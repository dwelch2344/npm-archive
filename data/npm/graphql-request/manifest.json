{
  "_id": "graphql-request",
  "_rev": "148-d0bbd7a13b8bb7bf3d4e014512914034",
  "name": "graphql-request",
  "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
  "dist-tags": {
    "latest": "6.1.0",
    "alpha": "1.3.5-alpha",
    "next": "7.0.0-next.22",
    "pr.183": "0.0.0-pr.183.1.70c5790"
  },
  "versions": {
    "0.2.1": {
      "name": "graphql-request",
      "version": "0.2.1",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "license": "MIT",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "test": "npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.2",
        "@types/node": "^7.0.18",
        "ava": "^0.19.1",
        "fetch-mock": "^5.11.0",
        "typescript": "^2.3.2"
      },
      "dependencies": {
        "isomorphic-fetch": "^2.2.1"
      },
      "gitHead": "205b43d4fa7c3f8842000cf87e97670cf72cfdd5",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps.",
      "_id": "graphql-request@0.2.1",
      "_shasum": "50e10963d6d5464a53761894b9287e7cceea6af0",
      "_from": ".",
      "_npmVersion": "4.1.2",
      "_nodeVersion": "7.7.1",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        }
      ],
      "dist": {
        "shasum": "50e10963d6d5464a53761894b9287e7cceea6af0",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-0.2.1.tgz",
        "integrity": "sha512-8GLloeSBOXP5ED5sGs2rA/ar4bzbdKaPlBjr0QAsDkGOJbr+aZw9SpFQaI6TXrGvkKPlX8YnvCR/FEinb82jng==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDhoZOFEF+BAxlXDpm2aXRtoei3LLEaABxz1NKAHohp+QIgJdJ4WtdSh8vqUyxwKrEcpvfZLNJvb/srlnSl+aO/sWM="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-0.2.1.tgz_1496321954009_0.7684003550093621"
      },
      "directories": {}
    },
    "0.2.2": {
      "name": "graphql-request",
      "version": "0.2.2",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "license": "MIT",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "test": "npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.2",
        "@types/node": "^7.0.18",
        "ava": "^0.19.1",
        "fetch-mock": "^5.11.0",
        "typescript": "^2.3.2"
      },
      "dependencies": {
        "isomorphic-fetch": "^2.2.1"
      },
      "gitHead": "6d27ec6d9103798d01140f05af574932ba876f00",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@0.2.2",
      "_shasum": "f6e448406810899858c8dec8cd6b340f092117d3",
      "_from": ".",
      "_npmVersion": "4.1.2",
      "_nodeVersion": "7.7.1",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        }
      ],
      "dist": {
        "shasum": "f6e448406810899858c8dec8cd6b340f092117d3",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-0.2.2.tgz",
        "integrity": "sha512-5y5uEa/cngJkquctmGJqw+3DQcRzprBJ5iPcx2s5qnKiO/Ebt6fPqZ8T+K3o/eOmrFSRbfu99jOqK6FslH4Hsg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCWN2U+hqLS36wRiO3QwAX+g6l8zRb5rZSVJPNp3WJuVgIhAL28cTSz5SKkerAc6QK6+W9jAehupR0RFvj7J3Up33zf"
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-0.2.2.tgz_1496322329140_0.2869323801714927"
      },
      "directories": {}
    },
    "0.2.3": {
      "name": "graphql-request",
      "version": "0.2.3",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "license": "MIT",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "test": "npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.2",
        "@types/node": "^7.0.18",
        "ava": "^0.19.1",
        "fetch-mock": "^5.11.0",
        "typescript": "^2.3.2"
      },
      "dependencies": {
        "isomorphic-fetch": "^2.2.1"
      },
      "gitHead": "6d27ec6d9103798d01140f05af574932ba876f00",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@0.2.3",
      "_shasum": "13f8e208afb5c9ebfa6d8413f8fd78badd4697e1",
      "_from": ".",
      "_npmVersion": "4.1.2",
      "_nodeVersion": "7.7.1",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        }
      ],
      "dist": {
        "shasum": "13f8e208afb5c9ebfa6d8413f8fd78badd4697e1",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-0.2.3.tgz",
        "integrity": "sha512-vn6KP9O3FmUubxoyhsn7Ua5xXS4okd0enVFhbKHu+32Tr9ENjHoclca7NrVZVWG+U0dQA/0b1MHxmyOyLtrE9w==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDGsXMe4l8gvgAzeCXtDFtYJpIIYKq+DpOaMhk2K6D8ygIgErCRDl3grSCLfbGpuDoYZ3c4xzT/KqKt+BiCPM4afl0="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-0.2.3.tgz_1496322801183_0.8884965556208044"
      },
      "directories": {}
    },
    "1.0.0": {
      "name": "graphql-request",
      "version": "1.0.0",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "license": "MIT",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "test": "npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.2",
        "@types/node": "^7.0.18",
        "ava": "^0.19.1",
        "fetch-mock": "^5.11.0",
        "typescript": "^2.3.2"
      },
      "dependencies": {
        "isomorphic-fetch": "^2.2.1"
      },
      "gitHead": "248baa50267d1ffd0412e1921cf46d35e0545567",
      "description": "📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@1.0.0",
      "_shasum": "d30e9d0da6880a216fd4e974f10c82d07828a8da",
      "_from": ".",
      "_npmVersion": "4.1.2",
      "_nodeVersion": "7.7.1",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        }
      ],
      "dist": {
        "shasum": "d30e9d0da6880a216fd4e974f10c82d07828a8da",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.0.0.tgz",
        "integrity": "sha512-9g773C74475H3bvp3Bho14QAirXx2AY/FotX8vBznpwjFv9a+DuZNoPLo5sq7EibGQBlTEbreaZdlwxlyUUEiA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCir/ALmWoTIw0W6cVehokWuVgbltDaBwMulaC9cQCekwIhAPQvIeKzfjAuJN24r1eEV/WB6XVboMkwjT38/6iWdY/f"
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-1.0.0.tgz_1496393859894_0.4457954983226955"
      },
      "directories": {}
    },
    "1.1.0": {
      "name": "graphql-request",
      "version": "1.1.0",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "test": "npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.2",
        "@types/node": "^7.0.18",
        "ava": "^0.19.1",
        "fetch-mock": "^5.11.0",
        "typescript": "^2.3.2"
      },
      "dependencies": {
        "isomorphic-fetch": "^2.2.1"
      },
      "gitHead": "4f393bc88fdb711e0887ea898de670db317256a4",
      "description": "📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@1.1.0",
      "_shasum": "13a66dcd166128f0458c9ab6eb16b3e4fd86f102",
      "_from": ".",
      "_npmVersion": "4.1.2",
      "_nodeVersion": "7.7.1",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        }
      ],
      "dist": {
        "shasum": "13a66dcd166128f0458c9ab6eb16b3e4fd86f102",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.1.0.tgz",
        "integrity": "sha512-GXGy5//cLl6OYasLwfAi7wowkEtbrrfdTT+jZXB1GakoKUYTeiJ3WRdSBhZOE8Cfb8x0ITGdXMWP4vpIO75Oaw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHmRxQa0055TNjACuGu95ic2fTKMwmUXHWF0svYFiZa4AiEA8mUUi1SLanb2WOvu2F5wQ41efNGH6aZa2VOHLKPJawQ="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-1.1.0.tgz_1496395596476_0.7783776251599193"
      },
      "directories": {}
    },
    "1.1.1": {
      "name": "graphql-request",
      "version": "1.1.1",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "test": "npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.2",
        "@types/node": "^7.0.18",
        "ava": "^0.19.1",
        "fetch-mock": "^5.11.0",
        "typescript": "^2.3.2"
      },
      "dependencies": {
        "isomorphic-fetch": "^2.2.1"
      },
      "gitHead": "55ade83a8e0ba85f1772c2d37ccb82b21dc85094",
      "description": "📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@1.1.1",
      "_shasum": "9c6dafe7a98cc0ea55f17a65cc7788ca2de5a27b",
      "_from": ".",
      "_npmVersion": "4.1.2",
      "_nodeVersion": "7.7.1",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        }
      ],
      "dist": {
        "shasum": "9c6dafe7a98cc0ea55f17a65cc7788ca2de5a27b",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.1.1.tgz",
        "integrity": "sha512-1G4xgpl4+UOgC5jY37//fD6U3NfZYlaoObTlqf0Cee70c1VYznOv/ia5P1yYeMhrPFZUUpSNmWKGBFFnjLb/JA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEKRTux5BfTConAC7I3712RD+8l03UKqmqJWy3ZUgIUlAiEAtm6NNpqurtUosoQrqM70UlAnKHB8rZac4oumgGTo8NA="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-1.1.1.tgz_1496395722494_0.45148799545131624"
      },
      "directories": {}
    },
    "1.1.2": {
      "name": "graphql-request",
      "version": "1.1.2",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "test": "npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.2",
        "@types/node": "^7.0.18",
        "ava": "^0.19.1",
        "fetch-mock": "^5.11.0",
        "typescript": "^2.3.2"
      },
      "dependencies": {
        "isomorphic-fetch": "^2.2.1"
      },
      "gitHead": "af87e4ec6c02151eddd6063078418a0fb812de2e",
      "description": "📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@1.1.2",
      "_shasum": "3efc00135d3cb7385385540bd5ee53e6718614f0",
      "_from": ".",
      "_npmVersion": "4.1.2",
      "_nodeVersion": "7.7.1",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        }
      ],
      "dist": {
        "shasum": "3efc00135d3cb7385385540bd5ee53e6718614f0",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.1.2.tgz",
        "integrity": "sha512-CRmzwfxqAOm2Nv6iDGcC1fYXQ4bPF58WPND+5tWIB9LZ3ujg+JadtyubhWLoQDtkDqFRO/TkCZS/9/Nlfrt/xw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCICaL84/Sjp3x/JyXQysRr3Iub5qAWGSLkXxWzwLBtUNTAiEAy6/0VE6USPVw12UtIATg8WCOEU8TKuyVNdEtktFsJMA="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-1.1.2.tgz_1496396831761_0.8484945988748223"
      },
      "directories": {}
    },
    "1.1.3": {
      "name": "graphql-request",
      "version": "1.1.3",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "test": "npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.2",
        "@types/node": "^7.0.18",
        "ava": "^0.19.1",
        "fetch-mock": "^5.11.0",
        "typescript": "^2.3.2"
      },
      "dependencies": {
        "isomorphic-fetch": "^2.2.1"
      },
      "gitHead": "d6c1984d5b787abdfd81dbba1a9ec80abbe2ad56",
      "description": "📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@1.1.3",
      "_shasum": "e1ab1a7a199daf2892f018747b365b588bfd35b9",
      "_from": ".",
      "_npmVersion": "4.1.2",
      "_nodeVersion": "7.7.1",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        }
      ],
      "dist": {
        "shasum": "e1ab1a7a199daf2892f018747b365b588bfd35b9",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.1.3.tgz",
        "integrity": "sha512-xgDOdKtth5jnCRPQ7vlTg6nXgih8usaYyHoxI+7sLxR3sc8VCUg8Zk6zzDRnEzhz2TsK66jFYKm7F5664VMitQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDNYCG/PY2n1gkStghQ9Zi4Dyz1oynlvqhkzTn/dlESYwIhANKgEN9OXHfOxzPYp3agS49480ouztI7HKhD4IKOCPh9"
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-1.1.3.tgz_1497257785886_0.4826509722042829"
      },
      "directories": {}
    },
    "1.2.0": {
      "name": "graphql-request",
      "version": "1.2.0",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "test": "npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.2",
        "@types/node": "^7.0.18",
        "ava": "^0.19.1",
        "fetch-mock": "^5.11.0",
        "typescript": "^2.3.2"
      },
      "dependencies": {
        "isomorphic-fetch": "^2.2.1"
      },
      "gitHead": "f809125b894c4f0d69ba74badd04997327ad5247",
      "description": "📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@1.2.0",
      "_shasum": "9be0945b2399342f1d495be96939b2421b0823a2",
      "_from": ".",
      "_npmVersion": "4.1.2",
      "_nodeVersion": "7.7.1",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        }
      ],
      "dist": {
        "shasum": "9be0945b2399342f1d495be96939b2421b0823a2",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.2.0.tgz",
        "integrity": "sha512-4ezHcHWoNL5MWYcSNEz4AVZNL+ZNSwamvGFSEOoNua9M8LVWqA6E3JWfW20POwkcGyLhEmfGHvJCBJ82jupkMw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDtDU5QInOyTsk+3j6Ho/RWOmPW7hu7PkPrdia7UrvqPAIgdqYwwZg6MDLNrGmlTFnbKfCbSEL/GZJhkmx5EFYthis="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-1.2.0.tgz_1497360798303_0.22592091164551675"
      },
      "directories": {}
    },
    "1.3.0": {
      "name": "graphql-request",
      "version": "1.3.0",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.2",
        "@types/node": "^7.0.18",
        "ava": "^0.19.1",
        "fetch-mock": "^5.11.0",
        "tslint": "^5.5.0",
        "tslint-config-standard": "^6.0.1",
        "typescript": "^2.3.2"
      },
      "dependencies": {
        "isomorphic-fetch": "^2.2.1"
      },
      "gitHead": "bc1630438069ce6ef78404e044c2b8d0cb3edb8e",
      "description": "📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@1.3.0",
      "_shasum": "b433098e29011dc0443d9c1612d42983ddaac268",
      "_from": ".",
      "_npmVersion": "4.1.2",
      "_nodeVersion": "7.7.1",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        }
      ],
      "dist": {
        "shasum": "b433098e29011dc0443d9c1612d42983ddaac268",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.3.0.tgz",
        "integrity": "sha512-jCLJRIGvpUa61OsBnQksTuSw5lKHRxnZUsBHEeioQgcxAc11PKh8Knyzr3VOBw19BAMB6iNdiCyqQ3MgN/FgCw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGuxyAk+tvYVSO6imPmz7tMgM6sJzdOGKRn6HEeKO798AiEAr2ezGOW8nAylL/pdER8C4PTU85UHOa6hwxiTzgB7H/4="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-1.3.0.tgz_1500145613822_0.7268763605970889"
      },
      "directories": {}
    },
    "1.3.1": {
      "name": "graphql-request",
      "version": "1.3.1",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.2",
        "@types/node": "^7.0.18",
        "ava": "^0.19.1",
        "fetch-mock": "^5.11.0",
        "tslint": "^5.5.0",
        "tslint-config-standard": "^6.0.1",
        "typescript": "^2.3.2"
      },
      "dependencies": {
        "isomorphic-fetch": "^2.2.1"
      },
      "gitHead": "e5d5fe1a02d718e8a2d9dd5fe492e04954780069",
      "description": "📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@1.3.1",
      "_shasum": "0d2c07df516a0e1be6d02500e271bcc550f2e423",
      "_from": ".",
      "_npmVersion": "4.1.2",
      "_nodeVersion": "7.7.1",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        }
      ],
      "dist": {
        "shasum": "0d2c07df516a0e1be6d02500e271bcc550f2e423",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.3.1.tgz",
        "integrity": "sha512-ZFqp77SlunG1fnCCvDRiGiD++k5izefeDpvDa6XkzDe4cYdRqVqdgMPw6B4px9iv68fy6GHcXusTGjkPq6xPFQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCh5eIVSGTODLbxDocFIbSUDqpUlNbZ0tvCkHZD/aPa3gIhAJpVUGfLtD4pFKVPN1N58RYaOcOHTfqT/snObcuID8vy"
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-1.3.1.tgz_1500146046474_0.17076370678842068"
      },
      "directories": {}
    },
    "1.3.2": {
      "name": "graphql-request",
      "version": "1.3.2",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.2",
        "@types/node": "^7.0.18",
        "ava": "^0.19.1",
        "fetch-mock": "^5.11.0",
        "tslint": "^5.5.0",
        "tslint-config-standard": "^6.0.1",
        "typescript": "^2.3.2"
      },
      "dependencies": {
        "isomorphic-fetch": "^2.2.1"
      },
      "gitHead": "f0bf20e790107f1e1de7ca3d47aa9106f609cc4a",
      "description": "📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@1.3.2",
      "_shasum": "bcbf5961279b7a5732135ad78cd07a3c0e982d66",
      "_from": ".",
      "_npmVersion": "4.1.2",
      "_nodeVersion": "7.7.1",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        }
      ],
      "dist": {
        "shasum": "bcbf5961279b7a5732135ad78cd07a3c0e982d66",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.3.2.tgz",
        "integrity": "sha512-fm6Ole7twAGIhFFzpc0WCxYfvXI/0lqIy8W5Ih4xwd8WQ1/BFRT46BkKS0WXHRPI6Dljf+Wq9QcnswkeWUgwGg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD/ddzWq8gxKm3O2eivCsV4uZPgSoXxR4G6bYtbvbMtsAIhAKM3IWqriqLzJoSnXVqN5rtoFoO78PwUrdnr9MSmJntY"
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-1.3.2.tgz_1500148781061_0.05578201566822827"
      },
      "directories": {}
    },
    "1.3.3": {
      "name": "graphql-request",
      "version": "1.3.3",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.3",
        "@types/node": "^8.0.16",
        "ava": "^0.21.0",
        "fetch-mock": "^5.12.1",
        "tslint": "^5.5.0",
        "tslint-config-standard": "^6.0.1",
        "typescript": "^2.4.2"
      },
      "dependencies": {
        "isomorphic-fetch": "^2.2.1"
      },
      "gitHead": "d08df6abad06fb5506a46c4ca4268e23fd3fef2b",
      "description": "📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@1.3.3",
      "_shasum": "8138f6b53914d8c659381fba5bd38dcca3f6b1f1",
      "_from": ".",
      "_npmVersion": "4.1.2",
      "_nodeVersion": "7.7.1",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        }
      ],
      "dist": {
        "shasum": "8138f6b53914d8c659381fba5bd38dcca3f6b1f1",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.3.3.tgz",
        "integrity": "sha512-fNLp6q/gyf1Q7AhHDr8qWMo69uB8L27OCHpG1SGVQtiBF3/XaAWt2xio03XebkQktjQDwnZBpn9o3bp2sYaTeg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIA9oD+FKMpLxkYvsk+g9zo8VcGNIRLMDQklkg9b/Pj/2AiEAxpK08XJA2sl9cpIAAgDtqpAfCAOTOIKnkdrVqMX0hJU="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-1.3.3.tgz_1501062609439_0.29605945642106235"
      },
      "directories": {}
    },
    "1.3.4": {
      "name": "graphql-request",
      "version": "1.3.4",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.3",
        "@types/node": "^8.0.16",
        "ava": "^0.21.0",
        "fetch-mock": "^5.12.1",
        "tslint": "^5.5.0",
        "tslint-config-standard": "^6.0.1",
        "typescript": "^2.4.2"
      },
      "dependencies": {
        "isomorphic-fetch": "^2.2.1"
      },
      "gitHead": "b199bce59dacfbcd00a477cae5980d2b961394ef",
      "description": "📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@1.3.4",
      "_shasum": "94d5f2e6644d9d9cbce0d06953e100c30e5cb633",
      "_from": ".",
      "_npmVersion": "4.0.5",
      "_nodeVersion": "7.4.0",
      "_npmUser": {
        "name": "timsuchanek",
        "email": "Tim.Suchanek@gmail.com"
      },
      "dist": {
        "shasum": "94d5f2e6644d9d9cbce0d06953e100c30e5cb633",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.3.4.tgz",
        "integrity": "sha512-5o6fJcsE7uigBsBjbgfEffyn4Z5kRTg1XhlHGdchXtBcPVydQlerw85XLC69fqjp4enwrisVG+e4lx8hTrmGiw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICBFjh63xMwhpY5+e7NLS25syja1QL1bcsO77wQqaHJNAiBCYSlC+3sHm0DRVe6oDf/iv3PP1tr0ks6NsvSjyRdeTw=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-1.3.4.tgz_1502363844850_0.8753754696808755"
      },
      "directories": {}
    },
    "1.3.5-alpha": {
      "name": "graphql-request",
      "version": "1.3.5-alpha",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.3",
        "@types/node": "^8.0.16",
        "ava": "^0.21.0",
        "fetch-mock": "^5.12.1",
        "tslint": "^5.5.0",
        "tslint-config-standard": "^6.0.1",
        "typescript": "^2.4.2"
      },
      "dependencies": {
        "isomorphic-fetch": "^2.2.1"
      },
      "gitHead": "14c1991962793f9130cc163bd8c0c97df2de1e4a",
      "description": "📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@1.3.5-alpha",
      "_npmVersion": "5.3.0",
      "_nodeVersion": "8.4.0",
      "_npmUser": {
        "name": "timsuchanek",
        "email": "tim.suchanek@gmail.com"
      },
      "dist": {
        "integrity": "sha512-HnXzqBhJM9hdoII+3rmqhFLxYRaubt2rCbXzWH4WO0OWfnWjzccKknPppSO5wMuaKmYDhHNC/yKJnsbq5MwLjA==",
        "shasum": "f1426af3daee5f28947d4cf0855f0dd23d7a465a",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.3.5-alpha.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDiYg2yMsLQzefoy4Xpt3H0if7zUMaUVi1Q7O8rtcBkAwIhAL6VclIyAje00wgBY9aRVXSzjha202UTYOhnngWfosWx"
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-1.3.5-alpha.tgz_1505131975735_0.27840524399653077"
      },
      "directories": {}
    },
    "1.3.5": {
      "name": "graphql-request",
      "version": "1.3.5",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.3",
        "@types/node": "^8.0.16",
        "ava": "^0.21.0",
        "fetch-mock": "^5.12.1",
        "tslint": "^5.5.0",
        "tslint-config-standard": "^6.0.1",
        "typescript": "^2.4.2"
      },
      "dependencies": {
        "isomorphic-fetch": "^2.2.1"
      },
      "gitHead": "a86f15f525fdb21083d13fba36170c11e1914d37",
      "description": "📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@1.3.5",
      "_npmVersion": "5.3.0",
      "_nodeVersion": "8.4.0",
      "_npmUser": {
        "name": "timsuchanek",
        "email": "tim.suchanek@gmail.com"
      },
      "dist": {
        "integrity": "sha512-AOdDFgX0BMatVUiH3gj9KCuh7BYAnhZxeq+r3EPK1fhp1wRVzupjUvPjKRW7ja/18M8ch0A6O0d4hNA+CMH51g==",
        "shasum": "7b710330b2cee7d859c7904783b595b4ba6d78f8",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.3.5.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD9xRVCyAustu2NzhICIa7sXYezSgvPwO1qtysmRo7P2wIhAPb2iv7msBXrtuHuiUCXZwZNxQ3NYlxonjqkGqy20vKq"
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-1.3.5.tgz_1505132718214_0.1634621557313949"
      },
      "directories": {}
    },
    "1.3.6": {
      "name": "graphql-request",
      "version": "1.3.6",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.3",
        "@types/node": "^8.0.16",
        "ava": "^0.21.0",
        "fetch-mock": "^5.12.1",
        "tslint": "^5.5.0",
        "tslint-config-standard": "^6.0.1",
        "typescript": "^2.4.2"
      },
      "dependencies": {
        "isomorphic-fetch": "^2.2.1"
      },
      "gitHead": "b5f9011007a1c08bd08bbacea5451e25d3cf6edb",
      "description": "📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@1.3.6",
      "_npmVersion": "5.3.0",
      "_nodeVersion": "8.4.0",
      "_npmUser": {
        "name": "timsuchanek",
        "email": "tim.suchanek@gmail.com"
      },
      "dist": {
        "integrity": "sha512-+Hq8UxXT7FC250VotQ9CJ3WKHvY8wz9f6FtK3kL5AzC5GkRxZF7zNdKjnnICgHVWCMtURrF73vEBEtNnghNGng==",
        "shasum": "7257d9c539e747b7ef8dbafc04e4a4231ca94464",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.3.6.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD2rUBbp4J/pvv7l/vi2m7NXKY6WucP7CBt1mptFzPTKwIhAKcdSz2492kTkCifQ6Y9Cl6fA8H6bHqGol58kq1grplY"
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-1.3.6.tgz_1505133310824_0.7034625168889761"
      },
      "directories": {}
    },
    "1.4.0": {
      "name": "graphql-request",
      "version": "1.4.0",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.3",
        "@types/node": "^8.0.16",
        "ava": "^0.22.0",
        "fetch-mock": "^5.12.1",
        "tslint": "^5.5.0",
        "tslint-config-standard": "^6.0.1",
        "typescript": "^2.4.2"
      },
      "dependencies": {
        "cross-fetch": "0.0.8"
      },
      "gitHead": "511565a2d9356d9177439fd0c37d8dc4c0652b55",
      "description": "📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@1.4.0",
      "_npmVersion": "5.3.0",
      "_nodeVersion": "8.6.0",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "dist": {
        "integrity": "sha512-lAAbaq2IbeN4sGcgQgx/OtxEZ9UimpWawIEUYAw8Dk0yNAYPwWH79/ASdGrH/5aTvYHz3U7CjgoQmaiUpLJ3qw==",
        "shasum": "f5b067c83070296d93fb45760e83dfad0d9f537a",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.4.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICuOMdN9gAaR+7DKNksw5u57V6sOoK/5jsmWKS/9gO1jAiBIT2W1Gx5PKLOugf2sNYcGTg5kdzJ9SOO4n6fv5n5VAQ=="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-1.4.0.tgz_1507135056019_0.4074647582601756"
      },
      "directories": {}
    },
    "1.4.1": {
      "name": "graphql-request",
      "version": "1.4.1",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "^5.8.3",
        "@types/node": "^8.0.16",
        "ava": "^0.23.0",
        "fetch-mock": "^5.12.1",
        "tslint": "^5.5.0",
        "tslint-config-standard": "^6.0.1",
        "typescript": "^2.4.2"
      },
      "dependencies": {
        "cross-fetch": "1.1.1"
      },
      "description": "📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@1.4.1",
      "dist": {
        "shasum": "0772743cfac8dfdd4d69d36106a96c9bdd191ce8",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.4.1.tgz",
        "integrity": "sha512-aIaSYpqhWKt7gqOST/PuIPZ8c/oElxYJtOAtgMGzdnzIBh+DqvvJE8ziMeGFZXmnaMkxJoJynQ3qC/A9EFlxVQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDF3f+4f6DkISn7VZ/e62jLlBYtBPks0S/ujMeK18OgDQIgIpFD0FKZSO55GEIbAjp6MSQfwzOK6CFz08jZpG7GE7g="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request-1.4.1.tgz_1514367100874_0.13499158690683544"
      },
      "directories": {}
    },
    "1.5.0": {
      "name": "graphql-request",
      "version": "1.5.0",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "5.12.2",
        "@types/node": "8.5.5",
        "ava": "0.25.0",
        "fetch-mock": "5.13.1",
        "tslint": "5.9.1",
        "tslint-config-standard": "7.0.0",
        "typescript": "2.7.2"
      },
      "dependencies": {
        "cross-fetch": "1.1.1"
      },
      "gitHead": "5b1b5c603d0d6bf888d56beee21df847ee5a2829",
      "description": "[![CircleCI](https://circleci.com/gh/graphcool/graphql-request.svg?style=shield)](https://circleci.com/gh/graphcool/graphql-request) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)",
      "_id": "graphql-request@1.5.0",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "9.5.0",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "dist": {
        "integrity": "sha512-K65i5mZb9ti4O08fd9gJkWoaidDxj9JPQdkGWGIxiuDj9pHAmwPLpX0xCjBZKVp3//DOiYk1r52sXuqMF6Zoyg==",
        "shasum": "69b30a1767189fcba27f5c907c0a87339f90b5d8",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.5.0.tgz",
        "fileCount": 12,
        "unpackedSize": 38554,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCajSK+CIkiC6xMVMhvxji9u8RjcxgHvYuS1hgm5caU4AIhAIH8mIOfguGiaBepK32PL0Dl5SLz5nrVfrI8iaRI/W9r"
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_1.5.0_1519397419656_0.7829310241530785"
      },
      "_hasShrinkwrap": false
    },
    "1.5.1": {
      "name": "graphql-request",
      "version": "1.5.1",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "5.12.2",
        "@types/node": "8.5.5",
        "ava": "0.25.0",
        "fetch-mock": "5.13.1",
        "tslint": "5.9.1",
        "tslint-config-standard": "7.0.0",
        "typescript": "2.7.2"
      },
      "dependencies": {
        "cross-fetch": "2.0.0"
      },
      "gitHead": "4f02144106e1da77faf1156980b6ecb2b2d65f85",
      "description": "[![CircleCI](https://circleci.com/gh/graphcool/graphql-request.svg?style=shield)](https://circleci.com/gh/graphcool/graphql-request) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)",
      "_id": "graphql-request@1.5.1",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "9.6.1",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "dist": {
        "integrity": "sha512-p1f1q+D+5k1PMxsaZszestYW1BAEKjygliqTAhJI5nueRe74WRmwNQWAdrRBoCFRIpM0SZer98cbJF4PZHXaqg==",
        "shasum": "cccdf5cce6432ca062b90f7b63793c77c821ff9a",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.5.1.tgz",
        "fileCount": 12,
        "unpackedSize": 38554,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHOpbOf9sKh58GFKvHtC9OTxIf/tGZASQj7q5hwy6he/AiEAoOuuv1wmF/FSGyWh3hiIt++C/WK6qy2tOPb3WK1bGyg="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_1.5.1_1519905052535_0.2039699505892889"
      },
      "_hasShrinkwrap": false
    },
    "1.5.2": {
      "name": "graphql-request",
      "version": "1.5.2",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "5.12.2",
        "@types/node": "8.5.5",
        "ava": "0.25.0",
        "fetch-mock": "5.13.1",
        "tslint": "5.9.1",
        "tslint-config-standard": "7.0.0",
        "typescript": "2.7.2"
      },
      "dependencies": {
        "cross-fetch": "2.0.0"
      },
      "gitHead": "d3652299f1707b7940124fc350c183bddfdae48e",
      "description": "[![CircleCI](https://circleci.com/gh/graphcool/graphql-request.svg?style=shield)](https://circleci.com/gh/graphcool/graphql-request) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)",
      "_id": "graphql-request@1.5.2",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "9.11.1",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "dist": {
        "integrity": "sha512-JwnyE2kKv87ex2mo/STFoya0g6wGkE0MfH4NcLx/n/N0uSYRayfr47Mr5xMuuN4Ix7S1XJ2ix15/aLA1B89suA==",
        "shasum": "cf329fad59e36daf6925f41751b4ba8ad93371c3",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.5.2.tgz",
        "fileCount": 12,
        "unpackedSize": 41670,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa4t2iCRA9TVsSAnZWagAAnboP/RCpG94e2qebnkgzh9BJ\nPhxexwgRTH8N3j2NnlRTbfTiSECBmXejVr3pqZRuK6sZSaGcxVVY0+ER3VMR\nqpHBCFiVhvKMle7WIlm87ipu9K65bNrkLUvX4XJAWu51QKTNJLOy8G+hWZs8\nuQoqmVYM+xitV9PDbJRdE8Oc/Y8WkTHcJ8BU/P6Mzicyb/N5Vt2QJ3IVOysI\n51c/JrZ4mTxn43yKP7mmfICBWxbSzSNahx7iAcDT6hWsQKh8Gmvr2qZVDdNX\nmU4tLpbt9JV83s/lRjKjt+ZIu6H+xSP0GQpYw1Jt59XnJMLVKxgTpNIp+ZP3\nDaxwYYbubFd6ugjyr2Yepme3vy0AMApaN63jzTG6k/+XxTF3t6wM+YkaJhJm\npm9U7i25u2Uq1MiOQo2ifRiJrD5W+75q8H50Ps4fZIpkHt5vdCSJ26zBeM20\nX/MxhKP19UVrIgbrrnKp8i9v3mDDwsYZ/pOknKObAfgP+f6mfcsxyc3llzrI\nQ8nRPadcI4JX2TSlfsJD7zse4pqAjDXSnFKbYI/n8hKbrYDHq1wKkQllCtKg\ni42GkXmlOHwlhNdKbzCcOl8CcNOYWQc84X6Jx1DeHl3NFl1u56VpbbZmPN6D\njCyPK4kuAq4/l5YXdov0WN7VWqHjy/EaEKFgCFFCpkbZHSsUS8tuEPdIsk2t\nKifG\r\n=NjIN\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCoW1zqcjmpgafpeo6eI6MHuVYTCd0Iw7auRT4pech1GgIhAIzAkDaqXQCYPDqvNstZyIEfbArhvFtPQgk2BG4kU4r9"
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_1.5.2_1524817312850_0.09198767696891075"
      },
      "_hasShrinkwrap": false
    },
    "1.6.0": {
      "name": "graphql-request",
      "version": "1.6.0",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "5.12.2",
        "@types/node": "8.5.5",
        "ava": "0.25.0",
        "fetch-mock": "5.13.1",
        "tslint": "5.9.1",
        "tslint-config-standard": "7.0.0",
        "typescript": "2.7.2"
      },
      "dependencies": {
        "cross-fetch": "2.0.0"
      },
      "gitHead": "ec601d9913276f205e7a3c84b51930c79d4f8978",
      "description": "[![CircleCI](https://circleci.com/gh/graphcool/graphql-request.svg?style=shield)](https://circleci.com/gh/graphcool/graphql-request) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)",
      "_id": "graphql-request@1.6.0",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "10.0.0",
      "_npmUser": {
        "name": "schickling",
        "email": "schickling.j@gmail.com"
      },
      "dist": {
        "integrity": "sha512-qqAPLZuaGlwZDsMQ2FfgEyZMcXFMsPPDl6bQQlmwP/xCnk1TqxkE1S644LsHTXAHYPvmRWsIimfdcnys5+o+fQ==",
        "shasum": "afe87cf2a336acabb0cc2a875900202eda89f412",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.6.0.tgz",
        "fileCount": 12,
        "unpackedSize": 41947,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa7KOwCRA9TVsSAnZWagAA/gUP/00J5X7jNuKQyMhCJYbe\nbiCwdd1bnCO5/BCWtia55A7sthim9w6galZGzmJmCFIveuBMB0/rgNlFvRT7\nuQ7uLpDYJn1h2HbDFYmWtmuPBPQPAZ9ZxqMPUuQfVFG7jLdrJP4Vphq1DGnB\nGxGs1hYYG8TK2eBZcVB55UtOWYUu8xTKOEnxiGuQ35QxExENeonSHioNQRcL\nwOeryirV5zgTQTp5TwEQxGN1/pEW2JoJPSAmMKV4kuSn8L+9QB8g5EwO/+Xm\nYNSBPQk8PccmH5baIBiK/n0dZU2TQ5u4Qhwyu5yUKPhsgUQ6QcFGPpZJ4BLD\nhTnHDtlr/1VBCI4fZAlhaQdC1bE4IeuqmoMJt7jfiSRO7vSzL3jQZBZ/G6to\nN4lc5HLAyByZni4Ez8aen95+dxqWskFTy2Ft27u9MmMN9IcBxKcYYYKyotA+\nJMalWr7GFUH+RQzPH2UcdDia2XmhRP+HBaxzN6l7JgZ08+TfXr4kHe5A9eJS\n6v/sR0XydL56KWC1OnQ2NeOToX1QYEzI+25fFiQ9g+4gTmrma/X/X/yRwbBL\nmjwjYQHoZEa6jMJ184eAo9FnxLK9qOHosqcJ/qgIMyqIMS0OjRgIL/iwosuq\noSeYs5mxg7zpEg8l6Xs0orw51d8y4Lh0zigiwjyuGvdTr7PtjSl7qj4pAZhp\n5ruP\r\n=KadD\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCID2GjXYLmtv1jufKgYuT7XroFD1Pd87PUUQ7IFL7ptWeAiEAzt4Z8ZpGYMWp2Wz+5H+0TimF0DELFGazwtfZwLZGh+4="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_1.6.0_1525457839898_0.795286858365237"
      },
      "_hasShrinkwrap": false
    },
    "1.7.0": {
      "name": "graphql-request",
      "version": "1.7.0",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial"
      },
      "devDependencies": {
        "@types/fetch-mock": "5.12.2",
        "@types/node": "8.5.5",
        "ava": "0.25.0",
        "fetch-mock": "5.13.1",
        "graphql-tag": "2.9.2",
        "tslint": "5.9.1",
        "tslint-config-standard": "7.0.0",
        "typescript": "2.7.2"
      },
      "dependencies": {
        "cross-fetch": "2.0.0",
        "graphql": "^0.13.2"
      },
      "peerDependencies": {
        "graphql": "0.13.2"
      },
      "gitHead": "aa117e44461c4fae3003dabcf153883a023be929",
      "description": "[![CircleCI](https://circleci.com/gh/prismagraphql/graphql-request.svg?style=shield)](https://circleci.com/gh/prismagraphql/graphql-request) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)",
      "_id": "graphql-request@1.7.0",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.11.3",
      "_npmUser": {
        "name": "timsuchanek",
        "email": "tim.suchanek@gmail.com"
      },
      "dist": {
        "integrity": "sha512-9Auw7y8WFmiVxW7FcJFvG5/br/P/nFNlWNVTddk8R+Mc/7jfWzXKtUUc+t7P9gAcVC7DkntUlqVdGjR/njbPlQ==",
        "shasum": "bb7c9e76fef3bf2ca4d42835f3df7df34bc9aa51",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.7.0.tgz",
        "fileCount": 12,
        "unpackedSize": 44326,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbVzmdCRA9TVsSAnZWagAAUAcQAIkHoMbXQs6I/iedtfTj\nrdFJu6Gulk1s3O3AXeUriMpSuBj4b/S1Ams2wSq3yFMeT65/b18wdXdsf4xh\nf9epF96QhTL7MD6OkAlJLki4SpQO03YMDdDMbfB687thHUDMagfQSFBZSkn9\nbKW18XWt831OwDz/JUipAI7facMXZJi/dyfDZDAq23+61G4Ytet5XPMTJnUq\nAsTXBnA+wRptpzkEAVcjlrcWVDAP4ElEQE2328+Qlmfz1vpBx+NyznhkZP/d\nDvAVcZUq1tjgpex6CbQf4ltjiaFIV94sDspcO/73zHD2sPmDFhSDqo/BpGeZ\nXhfY2KsbqljyBcSnZlHoc9fg17rFrgkNPMEvVMHrcZVF/ot7/dL0uu/lPpb3\ncPYlaDhDXIwxcLk0WLGnlE7iS+d6RGKziThaeyQQD/+FU4wX8Z12eOaFiCSj\nDGFXffqLvG7OOKEYJuwXQ9OehR3bqQLgoBlK67PhNYebK8yeGOg5e3CL06MJ\nt+h0UwkHjJHOMExz+qgTXuvWXKpoylK1duCRbp8ErHhzQ1DPfhABZKdJYl3V\n9ezTYOlFpJKccY2bN9uYV0nZ6Kdh84zwS4MxWnu2rdCAj48a8OZ3pqkWBJFc\ni7kHQB8NVDWuQRuf4uSb4+dX/XWlhk9rHLehRvCgq16OOYbo7bO9e1ZDjGCx\n9bH3\r\n=YYXv\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQC1lBwZblZSqWP2Bya3brQR2Yb4RVewpm+vo2cIC9NZkwIgK585Oml9N+JbuPdR90rQ9BoEyzRqblKH3cx0EqIw94E="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_1.7.0_1532443037632_0.9980041377606852"
      },
      "_hasShrinkwrap": false
    },
    "1.8.0": {
      "name": "graphql-request",
      "version": "1.8.0",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "bundlesize": [
        {
          "path": "./dist/src/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial && npm run size",
        "size": "bundlesize"
      },
      "devDependencies": {
        "@types/fetch-mock": "5.12.2",
        "@types/node": "8.5.5",
        "ava": "0.25.0",
        "bundlesize": "0.17.0",
        "fetch-mock": "5.13.1",
        "graphql-tag": "2.9.2",
        "tslint": "5.9.1",
        "tslint-config-standard": "7.0.0",
        "typescript": "2.7.2"
      },
      "dependencies": {
        "cross-fetch": "2.0.0",
        "graphql": "^0.13.2"
      },
      "peerDependencies": {
        "graphql": "0.13.2"
      },
      "gitHead": "206611f015f587c37732231414bb33af8f8c34eb",
      "description": "[![CircleCI](https://circleci.com/gh/prismagraphql/graphql-request.svg?style=shield)](https://circleci.com/gh/prismagraphql/graphql-request) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)",
      "_id": "graphql-request@1.8.0",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.11.3",
      "_npmUser": {
        "name": "timsuchanek",
        "email": "tim.suchanek@gmail.com"
      },
      "dist": {
        "integrity": "sha512-kX4u/rPNd8EkYdYXDzAiGyVrLBZmdZREOlQVemcUkXtNVaNTh6eXC0yhmRypIB070/YtRl1w01xR1efOrHO+JA==",
        "shasum": "baa18d482b4c3f84cb913ba4b771ae734e09b409",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.8.0.tgz",
        "fileCount": 12,
        "unpackedSize": 44493,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbYW1TCRA9TVsSAnZWagAA8loP/07ix2tTBYOGwYEOWYx8\nms4nSslFpoLXdevYqKCtfSnoXERK7aLG7X9X6JKrQuZrg7p/hICvH0o1hIOW\n791I8jyabiAGnBSZjUeJumptPeTJz9DdlMpzigI1J+YjUWHoFvb/ngJUCXHJ\ndFOUaULe2Xpzi3n3G+/e5BxjbYLF/22V5YMx4nq6qgZ1FhR7qaqes2GZlq7e\ndEbIkvv0NNDQrPMHofusnjsFUbxtwf/0fmhj25FKOu8qVA7kGMy+eIkQgXSu\ni+QSwN1NhODmLyrwTF/RAki1z9PSjkJUFit3PA1wsYbYjLQYSyEELXrwMFEH\nTCjNnUrUmp6yV7qIxB5sJjJw8MHGH2DUoZmC862R8L+dWYnj3RSoL3IzXODg\nTMRGmnDoCNgnvwrsahWQpZ3uwwn4HHnRyn8tmnpy17aBKtmfLGweaBtmOUoo\n+IXsXRxTnX0bWNVhYmjbxSxhdF6Y9UDIg+mTDFTK3uUC5xX6g+8Z3tGpm8w/\nolx2/j0/LeaI7RUEyIIOe2gCD8w4Lypp2cvcYDVBRHSxjy5uI1+1WUVjKB24\n+Z+8UtoPBD4SGkXYsyHfn+tUEDSQoLHKPI/nUAKm7kBitXV4UE44ItxeTkPq\n+qrnIkay9IeVYd6jNXCtTSAyzv0NLJ9DpphRfSe45G6cmjzH1SwPCcQs13oC\nigjG\r\n=zdL2\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDcgWOulXFQYo7SCHALCdAw1OY5Wtu43XH7HK5lzAuLNAiEAnpmzoViwDDr1m9DPVKq6iAw97pN1bIkrsa5SzSmpNh4="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_1.8.0_1533111634827_0.08311402764419018"
      },
      "_hasShrinkwrap": false
    },
    "1.8.1": {
      "name": "graphql-request",
      "version": "1.8.1",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "bundlesize": [
        {
          "path": "./dist/src/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial && npm run size",
        "size": "bundlesize"
      },
      "devDependencies": {
        "@types/fetch-mock": "5.12.2",
        "@types/node": "8.5.5",
        "ava": "0.25.0",
        "bundlesize": "0.17.0",
        "fetch-mock": "5.13.1",
        "tslint": "5.9.1",
        "tslint-config-standard": "7.0.0",
        "typescript": "2.7.2"
      },
      "dependencies": {
        "cross-fetch": "2.0.0"
      },
      "gitHead": "0b467b8410a97526559a419b6cbaf4f5639a4f30",
      "description": "[![CircleCI](https://circleci.com/gh/prismagraphql/graphql-request.svg?style=shield)](https://circleci.com/gh/prismagraphql/graphql-request) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)",
      "_id": "graphql-request@1.8.1",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.11.3",
      "_npmUser": {
        "name": "timsuchanek",
        "email": "tim.suchanek@gmail.com"
      },
      "dist": {
        "integrity": "sha512-ZqVtROJ/lgTQq9dRVCQU3/wRQX2JjUfUB7RWH/QuktmxsAAc3pkZikpiIkKyjSR0OD/+h6iSh/MkP0FonQBMNQ==",
        "shasum": "859f38810e4fd7ee4ce0db7cf5e9c6ee13f1ab94",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.8.1.tgz",
        "fileCount": 12,
        "unpackedSize": 42211,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbaYQQCRA9TVsSAnZWagAAOoYQAJhwMRsoRQwyNeVH8Bms\nqYKMgIMnohRKyHW8UQtzoEG8EImd+TBr0ZIhu4I3ZrDv6dGW5BFEJ2Z0nwDv\n6DPYfkzO/9NFbz+2oCLoRwmThYNRAgo2lh/SHy60pgFEfqvyRP0aMxX0c8mO\ntl+A9zHIDFPM3krcA7iEjmX80HpbZZPhrBlyrlpF3S8cakp5rgTGx5dT1rFp\nwCReZN/13ugshaEyr3t4WWNOsAFhRF7kGx4j7aKJmjXkNE7GrK6EuqAYf9bl\njAIlyw6i6PByoVyDWz1zsFv0NLhtEAOzUYmK8zkcicQ5nPIkwkgNqdF/kmQ1\n3lSLnD10jI2ER6XsuHetrHzC5HQJMTsTJfCEfmhVltoVfTTEAiFnBJZW4tdw\nr+gJxOxZCfkXz7lqH84FZnhD0+ZEd/4gYsI/Z1DNu0MENNwxQa3gW2wTKsNC\n5AO+z1x2sn1LSnphNo8OPQK6h5UVLvbfissxCHoqQVxLxMKNxvJKE+dbpIiH\nvjc5IGwtdQzrMCXrzxJL009HdTGIMjOfxsSzKqxl8qNAzsmNQNDKn8HmmWkG\nZelH1XChISYTlrAXuSvDho+4+OIU1Tp7/djONObDIbaEIu0l7ODBF2caBws9\nyN1SQhe8sRkcS5WbMQEfDi1cdA9k3H5eGEFQXAiTtmlw2zKYI6CVqf0DeOhT\n9n0P\r\n=5Ygp\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDOa1t9LIXF912ZJBhRxGMoYd7KLaBc0p3W1KZTG2e7oAiEA4yEgTcxoGVTJOrnPGc8LHeyhdeQkWA/c4yCOxcCIomo="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_1.8.1_1533641743677_0.7662619250434255"
      },
      "_hasShrinkwrap": false
    },
    "1.8.2": {
      "name": "graphql-request",
      "version": "1.8.2",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "files": [
        "dist"
      ],
      "bundlesize": [
        {
          "path": "./dist/src/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/graphcool/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/graphcool/graphql-request/issues"
      },
      "homepage": "https://github.com/graphcool/graphql-request",
      "scripts": {
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
        "test": "npm run lint && npm run build && ava --serial && npm run size",
        "size": "bundlesize"
      },
      "devDependencies": {
        "@types/fetch-mock": "5.12.2",
        "@types/node": "8.5.5",
        "ava": "0.25.0",
        "bundlesize": "0.17.0",
        "fetch-mock": "5.13.1",
        "tslint": "5.9.1",
        "tslint-config-standard": "7.0.0",
        "typescript": "2.7.2"
      },
      "dependencies": {
        "cross-fetch": "2.2.2"
      },
      "gitHead": "248cde8a1ac06ac7a5fa96e51ea126f8ed0d8dd7",
      "description": "[![CircleCI](https://circleci.com/gh/prismagraphql/graphql-request.svg?style=shield)](https://circleci.com/gh/prismagraphql/graphql-request) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)",
      "_id": "graphql-request@1.8.2",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.11.3",
      "_npmUser": {
        "name": "timsuchanek",
        "email": "tim.suchanek@gmail.com"
      },
      "dist": {
        "integrity": "sha512-dDX2M+VMsxXFCmUX0Vo0TopIZIX4ggzOtiCsThgtrKR4niiaagsGTDIHj3fsOMFETpa064vzovI+4YV4QnMbcg==",
        "shasum": "398d10ae15c585676741bde3fc01d5ca948f8fbe",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.8.2.tgz",
        "fileCount": 12,
        "unpackedSize": 42211,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbbT9dCRA9TVsSAnZWagAAFScQAKHYT3A/Zz5ylR2xD7Hp\nCWlBOdOlVZtaAJP35df2pl5/5Qi6sk+E58kgwLG7wR5QXyjCvU5rm1yUQbYa\n5Cl3tsjguPEgLhHybZ/MJCgCO15naLrrCxrd/tJEBOP800h8//HerXC0pkqG\nbrxaGGs6qWMPDq7UdU3Rz5kFGqbeKf13ZQSIUuuOzyG4feeUxjCllee19L5d\ncEv37wrCWJc5aRuoEdhv5VqTivLkM/V/252CXKg0h5z3eUQf6SwiwhjfqBX0\nqf75A9kNHjml+1Yjxw1gUPl9FK8AMhe3H1cM728yzadME2VWUsoQQBMjr24R\n1UolioOzpN6+OsJexsYqn85Xv1ohyeJj29DcFEZ7r6kMThMtnAEiEIvhISlK\nqqXpB/PxB3LzTOcnB4FqlhqeMhrbRulmebZB70tf2xdG3c4VSwHkLRsFzLZ2\nn2cAj62LRYafdID0y3LYd4oJq9MLv1U/ROMz5rjev36cYnq6uaXpQBjS/WGA\nPKo8O+AolZDsuiCQWYZMDL44a2WW6qLPgVVVFwfFR5JBW479lEAaA2fEtNVE\nRgutPJlC9r5Dos9S/guvr8PUaKWq3qiOTAYyJxWdHODjZRucwYYb3YEkMJr6\n2JDbZtHwRGkttQliIx45Xoh3uMgXoRvovUQynJxz4JaqR7jnFBgWzSA0amUl\nIA1P\r\n=4A7f\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDWQS4L0pHNCNlq2PLNwD6kOD8OiOJsT70A8ZfloBS2DgIgBychZc+St9X7McJqK7uqlZy0+XV1reBrqb+SINTFgZ8="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_1.8.2_1533886301415_0.30954346595804094"
      },
      "_hasShrinkwrap": false
    },
    "2.0.0": {
      "name": "graphql-request",
      "version": "2.0.0",
      "main": "dist/src/index.js",
      "typings": "./dist/src/index.d.ts",
      "bundlesize": [
        {
          "path": "./dist/src/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Johannes Schickling",
        "email": "johannes@graph.cool"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "engines": {
        "node": ">=10"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "format": "prettier --write .",
        "prepublish": "npm run build",
        "build": "rm -rf dist && tsc -d",
        "lint": "tslint --project . {examples,src,test}/**/*.ts",
        "test": "yarn lint && yarn build && ava --serial",
        "test:ci": "yarn test && bundlesize"
      },
      "dependencies": {},
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/fetch-mock": "5.12.2",
        "@types/node": "8.5.5",
        "ava": "^3.8.2",
        "bundlesize": "^0.18.0",
        "fetch-cookie": "0.7.2",
        "fetch-mock": "5.13.1",
        "prettier": "^2.0.5",
        "tslint": "5.11.0",
        "tslint-config-standard": "8.0.1",
        "typescript": "3.0.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "gitHead": "d7f4f2f49e9f11512b01c5f99b698bdc030cf74d",
      "description": "[![CircleCI](https://circleci.com/gh/prisma/graphql-request.svg?style=shield)](https://circleci.com/gh/prisma/graphql-request) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)",
      "_id": "graphql-request@2.0.0",
      "_nodeVersion": "10.20.1",
      "_npmVersion": "6.14.4",
      "dist": {
        "integrity": "sha512-Ww3Ax+G3l2d+mPT8w7HC9LfrKjutnCKtnDq7ZZp2ghVk5IQDjwAk3/arRF1ix17Ky15rm0hrSKVKxRhIVlSuoQ==",
        "shasum": "8dd12cf1eb2ce0c80f4114fd851741e091134862",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-2.0.0.tgz",
        "fileCount": 30,
        "unpackedSize": 69482,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJezy1bCRA9TVsSAnZWagAAtJoQAJfQ1LkCjKJon+hEnAne\nDoUnigwpvjrl9m6kofXA6SjlNKBlyl+bqMZ09V051TKbwTktNHJwFMrkld+6\n4CqDnao+0BZlt+e8Y48xjrAKNenFSKZHNGW7woCMVYrLKWAOkgoWxTv1idn8\nrGItEygFly95BphJfFmZkldcfnMJHmTWptOM5NEc45ORa4ZbDBPb8xSzhCMX\nsR4XX+eiCXuLktA+GDQljpbkPciAxxZ2F2iQvNuIbrWnduOGhpHPEFR1FTH8\nO+13GCd6JYSz15/47xP6Aie17iZKybekkMRwpT49mQLLMKXBzISevHJD6Oz/\nnO/RM3KByJ5WtWep540A/8AZd5jCZIdH2eF0S0kMb3ND4cJBXIeVSv2zZzh9\npN/5SRVF3Nvgs6laosJl3JmLuIFPr2KggT6PFbzLrCShM9v+2uUi+YRJ2xAu\n25Li6SwHVdgDOXhfJed5G1Pdhl0tagn7lcHc4Z+VdF5KTB7u6abk3XkK5xiR\nE93/Q6iLD1dI6ad1BX6tM43KutaxrZ5hjMsaaRMOXaCdeg9suC2pmS3KKnd4\ndb88SLCv/ZK3GgDq66ms/0ffvlLvGNI5VnPGWLN2xEoh6YeBAwo6Z2bAcdPG\nsYEhKNz7pbQrnzu2JxC91yFDrPTGSR4jzzZU3ZMiwSv6lznjuo8svV14aURY\nuti6\r\n=AYPv\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCuD7W2Oyo84jfMTz7aUvrhewMDjvjMc8w0ipjFZepryQIgYXAzPR77dH6PEbuzEsORu0TbaaaXgpUp8LMVn2OqBWM="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "timsuchanek",
        "email": "tim.suchanek@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_2.0.0_1590635867180_0.3593549883256639"
      },
      "_hasShrinkwrap": false
    },
    "2.1.0-next.1": {
      "name": "graphql-request",
      "version": "2.1.0-next.1",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "engines": {
        "node": "10.x || 12.x || 14.x"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test": "jest",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.4"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.6",
        "@types/fetch-mock": "5.12.2",
        "@types/jest": "^25.2.3",
        "@types/node": "10.17.24",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "dripip": "^0.9.0",
        "express": "^4.17.1",
        "fetch-cookie": "0.7.2",
        "jest": "^26.0.1",
        "prettier": "^2.0.5",
        "ts-jest": "^26.0.0",
        "type-fest": "^0.15.0",
        "typescript": "^3.9.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- Typescript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request } from 'graphql-request'\n\nconst query = `{\n  Movie(title: \"Inception\") {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n### Passing more options to fetch\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Using variables\n\n```js\nimport { request } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = /* GraphQL */ `\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling)\n\n### Using `require` instead of `import`\n\n```js\nconst { request } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node)\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/receiving-a-raw-response)\n\n### More examples coming soon...\n\n- Fragments\n- Using [`graphql-tag`](https://github.com/apollographql/graphql-tag)\n\n## FAQ\n\n### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@2.1.0-next.1",
      "dist": {
        "shasum": "d0771d814ebcb39ea67208da12e301f3f5d6a80d",
        "integrity": "sha512-9Qr+z4FCzxwFrnG9BE366v9KcgRXLv2bmFkj3RHfSQNDgPHCUM2mA83bwjhgxg4jig/F8X/pcceOZPwRkMleKQ==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-2.1.0-next.1.tgz",
        "fileCount": 14,
        "unpackedSize": 42022,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe0QeACRA9TVsSAnZWagAAVN0QAILhvIWhciE/m4lwsomj\nP2/Dz2O2bTqv9zw9zLIp6oXT+m5QFBCn4Gh/+hu70HISm1ZZVnfM5ytygeNS\nn4pcQqJ7fXY40U1WhfPeWxSCx+b6uldHwfB3yhHWOQce+lDJv4v2id/IQCDG\nmPmMvN4FHJjjx4OJbHIxiMs+Y8EFua9sxxS4TGcZTLWeUl4lp6MZRm+nJy33\nN0LoU9jz//xg8cmbv4dZseYKVYO8MmGb/5xG6lh6nz6lih9lzVflhMtNntt/\nsUdMZXR2VM+01LrFc/MvV7CwuoH8ionroU+l78zOt10pcibMWgSuMPC4m6yR\njeilAzdqQ3/w1MOSP5Uk+OXtGsvO2F8qZjjX+DKXEOPcSeJUnIT1/gCPDCvk\nlZnhggxMsy0h4MmG6TPj279prqbvTZmLO7J602/8sIF2+qDUAgtt3MX0vkuB\n8/Z9PDcIF6nWlURISSThZCHwjv4EYAkJp6V9SFTkic669jCZWWnQX+KKOy+1\ntoGX4YJHdc38QRCZGeByTcRikk8G5KLjtTmOJ3DfnonIc+6xH5768wcY7M+2\ngvAF56b00IzHRJVeA97IVE4s1Ki9PLPjHAZFUoOHITEbK30rkyJI0OWFgDt8\nBx6WYVGBLmlfq8TnyBd7zMa6o1wl3lYkgxZBvfwXtHXvhkUDD8hp77a5lprx\ngVNJ\r\n=5Bxq\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIAg1yZGt+mjs1+1P1CWOxLpmBRyOrM+TTyKdtZjxr2MFAiBz+VZ3B4vAL4PJgZSi8IKZYTj8AYLU0U/32mc4/9rkZw=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_2.1.0-next.1_1590757247834_0.9801237053794889"
      },
      "_hasShrinkwrap": false
    },
    "2.1.0-next.2": {
      "name": "graphql-request",
      "version": "2.1.0-next.2",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "engines": {
        "node": "10.x || 12.x || 14.x"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test": "jest",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.4"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.6",
        "@types/fetch-mock": "5.12.2",
        "@types/jest": "^25.2.3",
        "@types/node": "10.17.24",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "dripip": "^0.9.0",
        "express": "^4.17.1",
        "fetch-cookie": "0.7.2",
        "jest": "^26.0.1",
        "prettier": "^2.0.5",
        "ts-jest": "^26.0.0",
        "type-fest": "^0.15.0",
        "typescript": "^3.9.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- Typescript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request } from 'graphql-request'\n\nconst query = `{\n  Movie(title: \"Inception\") {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n### Passing more options to fetch\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Using variables\n\n```js\nimport { request } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = /* GraphQL */ `\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling)\n\n### Using `require` instead of `import`\n\n```js\nconst { request } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node)\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/receiving-a-raw-response)\n\n### More examples coming soon...\n\n- Fragments\n- Using [`graphql-tag`](https://github.com/apollographql/graphql-tag)\n\n## FAQ\n\n### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@2.1.0-next.2",
      "dist": {
        "shasum": "7cba8ae4bba6d617db3e6c44e9695ad293cfe1da",
        "integrity": "sha512-gdrSUknID+7dlSN4gaQ9ANLrZrIvlyhku+qO70FsML1ZAHV8psV8jd5qQopPZDEVvtlYD4W9c2ogHibugk3W6A==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-2.1.0-next.2.tgz",
        "fileCount": 14,
        "unpackedSize": 42022,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfKAbBCRA9TVsSAnZWagAAU1UP+QHyYEoIH/P46XImmpZG\nyD+BFuYBND0WVg4Co3yPQSipryrDp9lSU3lqjDTasu4nPR8+zlDF8hiihbgE\nWJWe4xCRDGrkknc8bnZ7T5mmc5155ymOSqTL0Vle8iXz4MdH8LHOEjC0CU4H\nvrejUUOP6JrvGCgK3HMDwO03Sjj8cUo4sZ6p0xOPNBr1PJyLmei8uONsJ+rH\nmQl8wVR5Vr69K4xZP9O2DpjA07MGQcJCLKVRg7pXb8ezwE1LOg/x8h058e+B\nvuzYUCsqRrWsjvbXxGO1g76mBU3ca+kZUFPdWu54MUPSO9AHXvlupnKim6ZY\npzn4YBlBvYk9F2QHlL8HAeRpC5768W0YErCDGfaz/RZESH/nWpOzuBVHEIlR\n9RuRN7iNDuSvSRs5KP3R6DSAbIdsXwAzdN6UpTcWMZ5SUH7kLXkiB/igLT+m\nrw+gA4reS8eaWDUpjmscE3VWiFm+TIgbZa2980SzUYqW4u5lMKzq9gBGJo6d\nd1X0Ad2lceo11WEN4heqKz2Q/z5gAGpSGWGGH6qYor+BsH6js3+bLJwXmtCY\nn2lkNatSJIOGpjmCtDx56hxsHZWLwwPdn9cg9YhndzihWN9N/ejNecfA9u08\nC5anspMZXu/xEJQUNWIS1PyNcATJyUHV//iZi5lqZROJh5LLOtoEg6QDzVcX\nshhd\r\n=Uuc6\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDwQjPrCrDB2fL1gDdslBbnQ5WnqAmDk6P8SyRL6EQqkwIhAMkKbbFjDls00AHKZDPxxEC2z/uNjcGlY5yJmmtr9rDK"
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_2.1.0-next.2_1596458688619_0.6035532832466797"
      },
      "_hasShrinkwrap": false
    },
    "2.1.0-next.3": {
      "name": "graphql-request",
      "version": "2.1.0-next.3",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "engines": {
        "node": "10.x || 12.x || 14.x"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test": "jest",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.4"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.6",
        "@types/fetch-mock": "5.12.2",
        "@types/jest": "^25.2.3",
        "@types/node": "10.17.24",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "dripip": "^0.9.0",
        "express": "^4.17.1",
        "fetch-cookie": "0.7.2",
        "jest": "^26.0.1",
        "prettier": "^2.0.5",
        "ts-jest": "^26.0.0",
        "type-fest": "^0.15.0",
        "typescript": "^3.9.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- Typescript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request } from 'graphql-request'\n\nconst query = `{\n  Movie(title: \"Inception\") {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n### Passing more options to fetch\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Using variables\n\n```js\nimport { request } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = /* GraphQL */ `\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling)\n\n### Using `require` instead of `import`\n\n```js\nconst { request } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node)\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/receiving-a-raw-response)\n\n### More examples coming soon...\n\n- Fragments\n- Using [`graphql-tag`](https://github.com/apollographql/graphql-tag)\n\n## FAQ\n\n### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@2.1.0-next.3",
      "dist": {
        "shasum": "62a5b3f784e72e950fa6776a4d5725eec5f5fed9",
        "integrity": "sha512-eXBvuvJLisrEjv6Roq7cp+X9fjW7pTSTF4M7lFlOtADQoisLbkOb5WXeZYbD4rbHJbOU4U7/JRxG73e16Rz6YQ==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-2.1.0-next.3.tgz",
        "fileCount": 14,
        "unpackedSize": 42391,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfKAdlCRA9TVsSAnZWagAA+KEP/2o/2FJe65alkRp2wZGO\nzDzsr8iR7fjDpJPWwGEQX/d8t6pxcTd/akXmKc1OBBXfyPobxog4T2MIBjQ2\nbV0e6N65hCOm+BmpRuKgXuXA/4E0nRhcFCbMZpEEMDspSdzPmA4m6uMyiH9b\n7XjdMOYcnQHDaVDMBcGRy6yZGMWMh9dN0bcn2oTlvxmSayZHVs8lUOuaQgxs\nAR/fHFyamb3FMffXIB03VId1IUGH6ZxvEiEd7ICKVeuMEqP5x1AqVWo2PbHT\nP3Ajfn6UAx9rK2b55R7wYI8AGIVoAASswKutmkSZHXm56zNLr3MDMe0mkF9L\nHFrGranf50PjQKb66DiyMdlKNjICouWry35mIYbluLWKx3y3jWvXgoDJHcFF\nVS5+vHQepGjZ2NxbY8etuazpmPZSwZZunG150bRuCWgdTmaxeatVIRAQ+8Fs\njNaB5TUKswxm3ueV4JqRfH9fwBH0zvMi9VWk3Fh8Vu76v8FTVtdmdYOQ9nFj\ndXIc8k75nv5Z3UUn7kZBa7HW33hIVju9VoZTi+sTbNusXlnUuusgzocEjPdh\nN4YvKG1ppKJyJXZoZ+E1qPDaA3gsWepOAAKLmPVLN33/ncGBGy9V1iuHEMe9\n3ios/emoHE5/EnKDxOdupe7NQ+03AWtTi3ekzZl+9NGK9yfPnZlVEJQb5jnW\nqzRG\r\n=9r+f\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCiWMhuOCmqZiMqIlOOF0qWV0i/Dttss3YKBnUGzyUrHAIhAKDAqIPyh+sgq1VFN8iaPxKtWThSlfoXslNnleUiC5Jl"
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_2.1.0-next.3_1596458853405_0.9132446243730923"
      },
      "_hasShrinkwrap": false
    },
    "0.0.0-pr.183.1.70c5790": {
      "name": "graphql-request",
      "version": "0.0.0-pr.183.1.70c5790",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "engines": {
        "node": "10.x || 12.x || 14.x"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test": "jest",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.4"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.6",
        "@types/fetch-mock": "5.12.2",
        "@types/jest": "^25.2.3",
        "@types/node": "10.17.24",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "dripip": "^0.9.0",
        "express": "^4.17.1",
        "fetch-cookie": "0.7.2",
        "graphql": "^15.3.0",
        "graphql-tag": "^2.11.0",
        "jest": "^26.0.1",
        "prettier": "^2.0.5",
        "ts-jest": "^26.0.0",
        "type-fest": "^0.15.0",
        "typescript": "^3.9.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- Typescript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request } from 'graphql-request'\n\nconst query = `{\n  Movie(title: \"Inception\") {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Dynamically setting headers\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { setHeaders, setHeader GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN'\n  anotherheader: 'header_value'\n})\n```\n\n### Passing more options to fetch\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Using variables\n\n```js\nimport { request } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = /* GraphQL */ `\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling)\n\n### Using `require` instead of `import`\n\n```js\nconst { request } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node)\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = /* GraphQL */ `\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/receiving-a-raw-response)\n\n### More examples coming soon...\n\n- Fragments\n- Using [`graphql-tag`](https://github.com/apollographql/graphql-tag)\n\n## FAQ\n\n### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@0.0.0-pr.183.1.70c5790",
      "dist": {
        "shasum": "0e87478a636996db1acb5564947a432030821a62",
        "integrity": "sha512-pciJXYvb3wdi12+JgYl9tvQfXkSt1q8v/y8PYkI74cfKv16oZTB/Bt34+RpETMc+LgjvqAdAE9ghxD8l2DDOlQ==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-0.0.0-pr.183.1.70c5790.tgz",
        "fileCount": 14,
        "unpackedSize": 47912,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfKB9ACRA9TVsSAnZWagAAUnEP/iNqgWNLbEHdl41yZCMA\n7OwpCnVEhG6rPV4i9p9zj6Ho1RKpc/nRnMdHGzBcbCHGJO5113rI73RnRV5u\n+TMo7Iks2MX5ynz+a3aTo+ipfjiP8fzbjUWWPr09yJ0J0hrcype3IuJ3Ya8X\nec+c3JrpVvDJ7/eMYBq19/mjhEa2xFi/EnpwbQS0W8CXT///H0B+Qhn9hLOz\nN5QKpJxBTiuKgXu5/QuMKbM2vffRsKP/4nsDYKJaz1ZODJKiPrh1SdztGPoS\nfkEL7DVnuG0cCMJQvhE0BwAdW8EUKcsCMaCGw6wNsXmc7Mi5PLlmqcP66C8J\noaTyQe0HZFC7Wp5+gOXBl6vqh/9M3eg0+WVBtT/YRXrTY5pZFi7FQHMVahdb\nuTNXJhhD47J1EXrI9NQy3QfuybE54ls4G8nHw4T7jCNNWplDrYr129msgjWm\nPtGkM+09hdSNEYGRieuqVc+u+hZcin6csAgHu+rqqG6KtPTCOatvgrAfL5IT\nroDO00rvMLsMh8UAcFk4ToWTTpU8vQ0tz+kiIfnbK05ksIAq+1xmf2sh3+oU\n+N5ZfFVPKbl8DQZKryj300kXSLtypM4JBAWVojDI8AaJlHKFUXYR57C8mdul\nv4gHSBCKv8jnZrXNS6ZT16gAI2/qSu3kG4erNVdIXMEIvQzFDx59VB2PG88y\nM9bB\r\n=stPO\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIApY6yBHzOeCswZtOEsSvhsMKP4ytrYSZ0434R5jEPDLAiBn/gQywKnQMqV3XfykMcr8QuTEpQAO9e0jY4R6ixkbLQ=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_0.0.0-pr.183.1.70c5790_1596464960304_0.8159312168175501"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0-next.4": {
      "name": "graphql-request",
      "version": "3.0.0-next.4",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "engines": {
        "node": "10.x || 12.x || 14.x"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test": "jest",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.4"
      },
      "peerDependencies": {
        "graphql": "14.x || 15.x"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.6",
        "@types/fetch-mock": "5.12.2",
        "@types/jest": "^25.2.3",
        "@types/node": "10.17.24",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "dripip": "^0.9.0",
        "express": "^4.17.1",
        "fetch-cookie": "0.7.2",
        "graphql": "^15.3.0",
        "graphql-tag": "^2.11.0",
        "jest": "^26.0.1",
        "prettier": "^2.0.5",
        "ts-jest": "^26.0.0",
        "type-fest": "^0.15.0",
        "typescript": "^3.9.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- Typescript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Dynamically setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { setHeaders, setHeader GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN'\n  anotherheader: 'header_value'\n})\n```\n\n### Passing more options to fetch\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Using variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node)\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/receiving-a-raw-response)\n\n### More examples coming soon...\n\n- Fragments\n- Using [`graphql-tag`](https://github.com/apollographql/graphql-tag)\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses a TypeScript type from the `graphql` package such that if you are using TypeScript to build your project and you are using `graphql-request` but don't have `graphql` installed TypeScript build will fail. Details [here](https://github.com/prisma-labs/graphql-request/pull/183#discussion_r464453076). If you are a JS user then you do not technically need to install `graphql`. However if you use an IDE that picks up TS types even for JS (like VSCode) then its still in your interest to install `graphql` so that you can benefit from enhanced type safety during development.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.0.0-next.4",
      "dist": {
        "shasum": "f15fc17ba4e35b5ba83af3288b04528ef7618557",
        "integrity": "sha512-fTdbmMGtC8AtMg14QVZDf2tZS2ox0tdBV1muVlJoGBbV5hd7WpeENLI+L4Ujp3pi0AIXeXhZiatsHDRN1Rp3lw==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.0.0-next.4.tgz",
        "fileCount": 14,
        "unpackedSize": 48896,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfKCb6CRA9TVsSAnZWagAA8hEQAJXxD5TSpnDxgNqbH5pQ\nCgFOxJGcYq/W8R9kcLX81sx0LyiIFKLdqBPfuX3mikBlA/vYI9gwoonYvDT0\ny4ntFKcKg/Xm0I391yKpiOW5sCoOEZRB8P4hpsf8/1dlLchukfei6/A77fgS\n+ad2U7mgb0AXvNJS4jVIQ2SYxmv8prlvf2T8qNu4+SwYchCYTGXKqlzPBhCs\n+kEws0Tbn6bX32pDyE61v8uqdDzI7XohD96w+p/g1Vo+AYzwGypwhEme8DbV\nJzy6kUAcII+RiehDGi9WJvhMsxp/j6hvMDgqCMqveLKO/juz0vditbkNGhMl\n/l1F7ghzr7Udoh7gOZsZsmNiFe+cAH+nTWamERvcoME7+86EON/Mxt6IxdUH\n3ZLJwK4h4LKtoNl/feuHuaozWQDWF16t+bls5vG00sV5I52hvp1Wf5s/n9y1\nTQqhpp79MsrEKa8cB3LUaYfsQaHMWtCLhcFnynwFFZjmvi72+0D0ChWKbH60\n4B8A+vAdTWoZeAZbVAR57YFQAqkaJuZAt+Os6dUdeEZCSh7Pgl236CUmgn0I\nAIV0bkIZeRJ+v3qaJEOfn7Lq3zsaib7cSmXvfe4xFW6mmLwbcW0vHhmY1siD\nF1jF1j3Zj3BRH7Tu4aXEDtimc+Es3sudWJKi22+zMWOLFN7E5q77UyJM1bCC\nMI8k\r\n=/L+t\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIA7Zm0jMX0LWcIfztU/QlSRH8HWuI5ab/onFwdv6LaVkAiEAtJl0RIpNPnlSb3CLD1pAWWJY3pFAgcEpl625I0XAu7E="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.0.0-next.4_1596466937408_0.21373303652326525"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0": {
      "name": "graphql-request",
      "version": "3.0.0",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "engines": {
        "node": "10.x || 12.x || 14.x"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test": "jest",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.4"
      },
      "peerDependencies": {
        "graphql": "14.x || 15.x"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.6",
        "@types/fetch-mock": "5.12.2",
        "@types/jest": "^25.2.3",
        "@types/node": "10.17.24",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "0.7.2",
        "graphql": "^15.3.0",
        "graphql-tag": "^2.11.0",
        "jest": "^26.0.1",
        "prettier": "^2.0.5",
        "ts-jest": "^26.0.0",
        "type-fest": "^0.15.0",
        "typescript": "^3.9.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.0.0",
      "dist": {
        "shasum": "942d81bbd621cc2223d35fbf2b42edf8be822b83",
        "integrity": "sha512-zW8AuLnKMYOnpVKdANU9FzLDoj4u4AoU6KZ79e+BcJaNiuw/vgCJ0p7ppDMSDrW77a12Moa7J7Mg4w0f9Kd/Kg==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.0.0.tgz",
        "fileCount": 14,
        "unpackedSize": 48890,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfKrtXCRA9TVsSAnZWagAAY4MP/3apGJRBZYU0H4a5AU0F\nyt65J7YEzuyZ/pnVfF0bJzOu73TQqgObwRloA6u2CttQehzE5jTYzv4FcGtN\nnm7WSdPLCzyAlLy6xEU8z06rfXeAsVruU4/P56DF6i4m/s777aiJmveBipvH\nJmdRdz7KKh1qZZrfaoED4plTTFbxF6oxj/8+dB3I9TruAiz+7G+cEaEmrS8r\nHZO9xkUDJPhUAPKfKW9P5ZXiAQhR1t5FzBmRGO2FoIwCFLFiwvWSOM1u1qW8\n+/mnOvKm0Y+0hSW+Ghx9Szc9KGNOandUyTWjYf9BprOUOiRI6b686hPdjxir\nHuHI7RJ4OFS8eYdfRCODo27rPpOuZyhXWwsYustKqBCvsbFQ1K/8R26FE1rF\nwNjsi0P4H8OHEZoE7xXbYJZKbVBRLWxkMIfAWWwYo93prIOZywkQEdXtuJ5m\ns3hMlZXkcMB/xrBWPYnRkPPHTR4rWhhDhpb/4NhCPiBTmu/UP+ZqrTHsE9Mm\nKWOJ5E6iMGuTA3+e+ArBoGhACt2PhSeNodRgmVi/WHsfia8oXYWQMTa2u05D\njLGh78hPo13kaHAM3sfrjRrJ3YEQ0hNY1ZN4geE0LobN3Osu6qpaEBdnBC2V\nnjKpy+x/TRieNlfSaktVuDVqUhaj8J3avUHDNXBvtZrd7liBawSZffuCs9Tr\nEwHZ\r\n=KYOk\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCIQ4i0rq/pnr9/+jHp5e1/B4u3qDzsdzNy/m3Xdyp4QAIhAN6VnlnXKNBanGf35ZOLSaw8Teoqo51YADRHGjx822c/"
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.0.0_1596635991314_0.2543747175704132"
      },
      "_hasShrinkwrap": false
    },
    "3.0.1-next.1": {
      "name": "graphql-request",
      "version": "3.0.1-next.1",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "engines": {
        "node": "10.x || 12.x || 14.x"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test": "jest",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.4"
      },
      "peerDependencies": {
        "graphql": "14.x || 15.x"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.6",
        "@types/fetch-mock": "5.12.2",
        "@types/jest": "^25.2.3",
        "@types/node": "10.17.24",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "0.7.2",
        "graphql": "^15.3.0",
        "graphql-tag": "^2.11.0",
        "jest": "^26.0.1",
        "prettier": "^2.0.5",
        "ts-jest": "^26.0.0",
        "type-fest": "^0.15.0",
        "typescript": "^3.9.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- Typescript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Dynamically setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { setHeaders, setHeader GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN'\n  anotherheader: 'header_value'\n})\n```\n\n### Passing more options to fetch\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Using variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node)\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/receiving-a-raw-response)\n\n### More examples coming soon...\n\n- Fragments\n- Using [`graphql-tag`](https://github.com/apollographql/graphql-tag)\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses a TypeScript type from the `graphql` package such that if you are using TypeScript to build your project and you are using `graphql-request` but don't have `graphql` installed TypeScript build will fail. Details [here](https://github.com/prisma-labs/graphql-request/pull/183#discussion_r464453076). If you are a JS user then you do not technically need to install `graphql`. However if you use an IDE that picks up TS types even for JS (like VSCode) then its still in your interest to install `graphql` so that you can benefit from enhanced type safety during development.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.0.1-next.1",
      "dist": {
        "shasum": "756d3e82ff24071085397b5d18f39c430639a390",
        "integrity": "sha512-ybnQNYd0lEKof/JpGxHD5o806RqcD1UxFUK9BIJMHKKPbMB/WXjMUI40eQdIw0GI3Iv3alMeEkA+YmGAWvasuA==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.0.1-next.1.tgz",
        "fileCount": 14,
        "unpackedSize": 48892,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfPQwtCRA9TVsSAnZWagAAlkoP/1hiGZeN9JmS+V02X56f\nYEy3w2MhfsBzFXnqzBDmr458P4+w3g9GRdo2a6wZ3smZnnrOKZJEKSCV8TLu\nSXIK6YCI0drVvLy+cbLIo8HZ3IonesQu9dxgYpBKw5l7rNYgHsPdqJZ610Cf\nZ/Km4TTCtgn3uVl8bgONyaU8YtTAGpYX4I19A3etU6rVGWpZzph6VDHyIaFB\nwomewErfJvksw59oAaddg5jYR8/X3/ROQSxlDjlSjf5/TV2LbttgkjGtW+uZ\ncsON75OgUep/JzFU67IaeFJFS5QJzeanRpqfyuJt3Dg0fLiM4Fez0qnwVcf8\nhrMbOI+1aFrdGOfk3QGWcSbk0haXrO9nMWSO3kS36IZ9iSfhwGVFJmglfgOG\nM4EHkEv7/a7XctPH01i6QL0B7kRByuYJqlDCNcCq+HgDHhNYgqamJSjYfgX8\n2pwOYxbtCbATI4gB+pgB3sVjozyETp6ReBCaQLk/+3Uygmf/ijGNu05fXCTI\n+PzJGNp6xk8/Ozdeiyv88tEKTxacOtH+P4IkMLYNdGPXQPj2Sk4E9cUkHI+B\nmE8WnocOf2tn7YUAYW7rWEc9g/bN0cTLmgzSIiczVTBK9kb+GfN+JGmecbNb\nNW/8mmREEbBmnQZQK/2OCC8dA94iuy5d9HBarNJ9SEsmRGzxCFVLgiIM8TQz\ncxuu\r\n=QKBl\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGEa9iLbKGaSRpTe/8dX+3qTeFlvUXEpD3lW16boeEQ6AiAsBbBuBxNA1kxcGiGXdVs8di99PXm0VVQRQGiK3ZqoVw=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.0.1-next.1_1597836333061_0.8031768716811012"
      },
      "_hasShrinkwrap": false
    },
    "3.0.1-next.2": {
      "name": "graphql-request",
      "version": "3.0.1-next.2",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "engines": {
        "node": "10.x || 12.x || 14.x"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test": "jest",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.4"
      },
      "peerDependencies": {
        "graphql": "14.x || 15.x"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.6",
        "@types/fetch-mock": "5.12.2",
        "@types/jest": "^25.2.3",
        "@types/node": "10.17.24",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "0.7.2",
        "graphql": "^15.3.0",
        "graphql-tag": "^2.11.0",
        "jest": "^26.0.1",
        "prettier": "^2.0.5",
        "ts-jest": "^26.0.0",
        "type-fest": "^0.15.0",
        "typescript": "^3.9.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- Typescript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Dynamically setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { setHeaders, setHeader GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN'\n  anotherheader: 'header_value'\n})\n```\n\n### Passing more options to fetch\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Using variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n      mutation AddMovie($title: String!, $releaseDate: Int!) {\n        insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n            title\n            releaseDate\n        }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node)\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/receiving-a-raw-response)\n\n### More examples coming soon...\n\n- Fragments\n- Using [`graphql-tag`](https://github.com/apollographql/graphql-tag)\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses a TypeScript type from the `graphql` package such that if you are using TypeScript to build your project and you are using `graphql-request` but don't have `graphql` installed TypeScript build will fail. Details [here](https://github.com/prisma-labs/graphql-request/pull/183#discussion_r464453076). If you are a JS user then you do not technically need to install `graphql`. However if you use an IDE that picks up TS types even for JS (like VSCode) then its still in your interest to install `graphql` so that you can benefit from enhanced type safety during development.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.0.1-next.2",
      "dist": {
        "shasum": "7b3eacd6e142d4601e3091695ab8f0b3bb97fbb9",
        "integrity": "sha512-zJ+YfxzuDYrcX30vbUtg/EDYd9mAFq8X7KQDeVyHQjpyxXF79wKlpDCIjqf7JQGYyqlHq4u7AVpLORXWcrVoUA==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.0.1-next.2.tgz",
        "fileCount": 14,
        "unpackedSize": 49668,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfSFbRCRA9TVsSAnZWagAAMlEP/A3w23DTMKvfPH78XaxZ\nrcKYlgZ/0TVdA3vJUejxPKLrGATh73T67G1GzcHfF3bPDbQliumNrohRWnvc\nqWLnETRZf0q1M0QRRzEXBpa0TpWC5zvpLnRprKS+fynxoaOiGx22PnyQhLWT\n2mrSDyl3VZGqNE3BsubhMyiywYlUYoDVCUDcZZfz+76RRdP6yayUexnOu+vN\ndx18J9eyzMwRGB0zsI9hBu/iemwq2rb5eilYPmgOwTDToOgz8eFh7GnH7eVx\nKidPZq9t1UW1+ib5jXHwsiiOQr4fMhc1O2HqMwFFpWL5uL4NbPJa+QG2QEh5\nQwL2/B49bAjdn+8ohjw5Si1hv57xGhHO8bgA9aaz53nd1ulJG18Df/0f+7px\nqu+UkXrYnri8QlaN6EH14JDWHivNSzyAcopj0nmwNu90EdORXgmz6+0z77dY\nCpfn2U/NsLScalKt3oGXYikrEpfq2pSQ7uGM7Wd5Knjt5JeXCxw4YHZZ98zU\nSkHfGUYTgW+H2Zky94vnQxO/6L+EnLBCtUmk0SvJUTFO6OpIaG/V25pdtno+\n7D+KeEjN+FsTdl/fSg8X0Yj7EV4ccRPRWyfgrGt7TjcViwzKfw+D9hghaG8B\nvBE5PoWPpTiHp4BGpqMKIj5zJ3e/F2y6h1OxccSyRdKxyioeamIQ4tsQ28lK\nqPQP\r\n=LRSc\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC+wsvDZWmoclOsBHjcfZJWsXtPeF/63QTAn0NbLJQFmQIhAPc1WbNEXzsmWSEoWhvSIEGkF5SUcZPsxxqEXJbykGLJ"
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.0.1-next.2_1598576337372_0.6178539244254415"
      },
      "_hasShrinkwrap": false
    },
    "3.0.1-next.3": {
      "name": "graphql-request",
      "version": "3.0.1-next.3",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "engines": {
        "node": "10.x || 12.x || 14.x"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test": "jest",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.4"
      },
      "peerDependencies": {
        "graphql": "14.x || 15.x"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.6",
        "@types/fetch-mock": "5.12.2",
        "@types/jest": "^25.2.3",
        "@types/node": "10.17.24",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "0.7.2",
        "graphql": "^15.3.0",
        "graphql-tag": "^2.11.0",
        "jest": "^26.0.1",
        "prettier": "^2.0.5",
        "ts-jest": "^26.0.0",
        "type-fest": "^0.15.0",
        "typescript": "^3.9.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- Typescript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Dynamically setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { setHeaders, setHeader GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN'\n  anotherheader: 'header_value'\n})\n```\n\n### Passing more options to fetch\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Using variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n      mutation AddMovie($title: String!, $releaseDate: Int!) {\n        insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n            title\n            releaseDate\n        }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node)\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/receiving-a-raw-response)\n\n### More examples coming soon...\n\n- Fragments\n- Using [`graphql-tag`](https://github.com/apollographql/graphql-tag)\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses a TypeScript type from the `graphql` package such that if you are using TypeScript to build your project and you are using `graphql-request` but don't have `graphql` installed TypeScript build will fail. Details [here](https://github.com/prisma-labs/graphql-request/pull/183#discussion_r464453076). If you are a JS user then you do not technically need to install `graphql`. However if you use an IDE that picks up TS types even for JS (like VSCode) then its still in your interest to install `graphql` so that you can benefit from enhanced type safety during development.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.0.1-next.3",
      "dist": {
        "shasum": "101ba0d7555d1f307446e4c3885756ae02842331",
        "integrity": "sha512-ibJluX5koy7o7GVbwB+JRcSuOrGKtgqUnnuRt6pcKcaLXJ8wFEjEkLkmglhEDM9kDqnPOs68yi2jTuJe0bBj0A==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.0.1-next.3.tgz",
        "fileCount": 14,
        "unpackedSize": 49684,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfSFenCRA9TVsSAnZWagAAxN8P/2bf8HWqryktpe9It2FW\nxVMRg+QrTxXGO+M36kEp18TDqTkhICdIW7SjeWNPBkEyZZbWMKL8FTGuzJp3\nZuRcjifqeNVMUL2MQawVKM1Mai4oY02PM19GUVukO56ZnS6nxQAR98DDmfDO\nUo66O4IXkjlhy9iebnymRjoPGLNEmm6A3fWnqsDexJe3iEWRSFvABr/WXYwr\nOag/YQ/YlECzNU/rx0vU53cEgkxQMXjn92p2VwxasS0NrdwWmG4FJUX9iJhr\n2nVs2Nw6X0RM5NAyJenCcYvCEnAIxgcvAoD09J6a0QuNVtQUNG38WEiTPpec\nz66KTtE913OgQ0Q1Emqcr7ehKNUA2N0m6+wk3eUWWO1kcpFQdTejVOXQJp8X\nHuh+zNMM/PiVut6lmAdIPSzu5qjjvYZwNQEJA6f9U0zzXpy1b1Xrj2UpL5Pw\nBFcFbbYE+3KOUh0JRrxNhQEvbv2yGwt1KS3ZInt05Y/KGZ0AyaFo52RApHns\nBCV3R+ndkSCVV0GTYCWa/yuVwOEkfT7vBhTJySAoUBmqlql4L0o9yWqHC5jI\n8XdueyhCrbLjshCLcEvtTx37MKe9fFYLP4sPAjP+zSiHSzzc9LfF5jrq5lBa\nl6m2Ty6dxO1PYWQecednOVgif4k89H+XXG0gREPDPw/SsSuNBApykCjnZbJ6\njtpR\r\n=KVCC\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIETJoi3ARTi0SG9gU7UyU7tXrZ4snQIlXHrX0RV6yJeNAiEAnC9m0u6e4MJVUn491SeipGftOg9jrfBXhFadjmNLRuY="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.0.1-next.3_1598576550831_0.28222877929266454"
      },
      "_hasShrinkwrap": false
    },
    "3.1.0-next.4": {
      "name": "graphql-request",
      "version": "3.1.0-next.4",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "engines": {
        "node": "10.x || 12.x || 14.x"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test": "jest",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.4",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14.x || 15.x"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.6",
        "@types/extract-files": "^8.1.0",
        "@types/fetch-mock": "5.12.2",
        "@types/jest": "^25.2.3",
        "@types/node": "10.17.24",
        "apollo-server-express": "^2.16.1",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "0.7.2",
        "graphql": "^15.3.0",
        "graphql-tag": "^2.11.0",
        "graphql-upload": "^11.0.0",
        "jest": "^26.0.1",
        "prettier": "^2.0.5",
        "ts-jest": "^26.0.0",
        "type-fest": "^0.15.0",
        "typescript": "^3.9.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- Typescript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Dynamically setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { setHeaders, setHeader GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN'\n  anotherheader: 'header_value'\n})\n```\n\n### Passing more options to fetch\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Using variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n      mutation AddMovie($title: String!, $releaseDate: Int!) {\n        insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n            title\n            releaseDate\n        }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node)\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### NodeJS\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response)\n\n### More examples coming soon...\n\n- Fragments\n- Using [`graphql-tag`](https://github.com/apollographql/graphql-tag)\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses a TypeScript type from the `graphql` package such that if you are using TypeScript to build your project and you are using `graphql-request` but don't have `graphql` installed TypeScript build will fail. Details [here](https://github.com/prisma-labs/graphql-request/pull/183#discussion_r464453076). If you are a JS user then you do not technically need to install `graphql`. However if you use an IDE that picks up TS types even for JS (like VSCode) then its still in your interest to install `graphql` so that you can benefit from enhanced type safety during development.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.1.0-next.4",
      "dist": {
        "shasum": "3b3399adeb5d69ca50badc64af763f1493c3efdd",
        "integrity": "sha512-Usgtcuw12Cx5FA0uZJ9LM4oo2gTI+7Id2g/kx5xE/paktptOotqF8mU0sjtH0HE0b+seS52021ka3Q1udC2wvQ==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.1.0-next.4.tgz",
        "fileCount": 17,
        "unpackedSize": 53648,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfST0yCRA9TVsSAnZWagAAPzkQAIXXi/9TJsW4GJnAQ8kf\n6//Nv7KT0h7l6CKfrRDcmwW5LVfdByS7t2FFKsX8jZKONVKWejATZu5243Br\n+kFUZHIjVJINq6mqroFibyBD/ri7yMteRZgtrYfmAF798cwWgNnxBbdxVdeu\nDD2nUuxGem8qTBs5YSjTFZivH8hVZguT3S1bQ/8QY3TlnvM8guQOsesW1xkC\n07U1PGEzhgd06mRK5FmfshZUERbKRYTLDrRmzzsG0NBFTsosHm4/enHoopUx\nlTLxnvpLP3CpEV9OWRUK6G3IkXI6/fWS+HBLgKbCQ3OblPnhOj9Z/OBaoZpw\n5pd8CyVnu1ieulqf/6V/nTPM6Ujr41eKrcpixhQ4EBBuOmMLXnGpne7FIF5c\nC9xSR90KNFt+y/ThVAyLcsxk785dAH1iX9w/Rq+LUkeZihli5uueqd3tAurg\nvSrSqPHMvAVA0+KQAsFAg2livwRklhfj/lljvnilbY2nBPXkZgLIowvm9xxT\ndypfTzKBNF1J+W3Rppu2Y6b8pKbO5lHDvsnAx0Y6MVSvWQeQXr91vHPexJ06\nWv5mgt9XSeyYE7jyWd0aXHp0ISJNnI79rxyz06YRavc81Dp1jrgBO87+ZyMT\nIu14BNEmWIyU0nC0PH5/EImLG9RDrg2DyVlbXE+r8C6EcVN27ZAY2L7TJ8pS\njWnP\r\n=ShJm\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDHDujHT/ohAYTPjIohavyLp/+5F+MfT/1OSSXb7obyFwIgUTO20tb3GhLMqqgi+10tO08XL3I+0V3+raZqmPpabD8="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.1.0-next.4_1598635313554_0.5271177884895057"
      },
      "_hasShrinkwrap": false
    },
    "3.1.0": {
      "name": "graphql-request",
      "version": "3.1.0",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "engines": {
        "node": "10.x || 12.x || 14.x"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test": "jest",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14.x || 15.x"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.8",
        "@types/extract-files": "^8.1.0",
        "@types/jest": "^26.0.13",
        "@types/node": "^14.6.4",
        "apollo-server-express": "^2.16.1",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^0.10.1",
        "get-port": "^5.1.1",
        "graphql": "^15.3.0",
        "graphql-tag": "^2.11.0",
        "graphql-upload": "^11.0.0",
        "jest": "^26.4.2",
        "prettier": "^2.1.1",
        "ts-jest": "^26.3.0",
        "type-fest": "^0.16.0",
        "typescript": "^4.0.2"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.1.0",
      "dist": {
        "shasum": "c487488a1aa7b9a0f02335026b4ec897d645f9d4",
        "integrity": "sha512-Flg2Bd4Ek9BDJ5qacZC/iYuiS3LroHxQTmlUnfqjo/6jKwowY25FVtoLTnssMCBrYspRYEYEIfF1GN8J3/o5JQ==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.1.0.tgz",
        "fileCount": 17,
        "unpackedSize": 55458,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfUsLKCRA9TVsSAnZWagAAJicP/RYCLroZYMaJUCFTZGi9\nC1f/+VgIzK7sjQ3pn7IrqShmYduAsxxtfcIDCCWHwPP5FTJYBzC5nLGHtyWd\nS7+UXzN4rSq7mLjF6y/rpKUe9vlPMy2KT2W0+CgO3Ulf6F0Xiu6gkfDzNS4a\nh04lFa4KJie3NNsjPkpc0cpokffcYVHSIUAvdPdX/9yZRxT02P0GA0dtFTfJ\nJwdCCxS2CrTs/zw5iSZdhzRApoI9jqCRaOtfdpRLEzOjrTUm2UJ0jWiyHUe3\nM8MvzzJm1QhNR22y1BYp3N3jrCdb3GDAc8k6kOSui+NC68bKBgsARIVqMl70\nptQz3DPBfPRoY6P6cQDqQvE95ETb227qDkUGgXBn0O8DWvWoKuk1MEmFY793\nma/kT1KKGPwoVc7GTfDiE/dDqPTj+ug+JFln8Fu0AGNZUtv/yPTVvoaPk/74\n+fkDjZUiWG/cf42n7iAAQDpfU42ok7H00nq41NOSDcXxogshj4956mYsL8gN\nE9rOsJnGQcEM6gnMYDu+8F8tWmiML9J75Moof9lVa43ztKTS8ZWeIq1onV3l\nI9e0fGg1yC/2E6LQnd87dVorb4X6g4wAb5PTPb4nms4XItRpv6Kbu3CyQN/P\nDykJYyV0Tgrx7zi931vP2uUWYqkZ3GKls4nU0KfBYaVVG4vOcJpqFRCfHxf/\nlMg4\r\n=xsLJ\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIB2o4Trk01vJctZz2PDUVE2OdQ7dzVPffZDq+mlqUGdCAiBk3qRcyL3BpAk8z+HRXCA/P28VswHU1NsZ8cEp81CcCg=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "Tim.Suchanek@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.1.0_1599259337608_0.05241025915314523"
      },
      "_hasShrinkwrap": false
    },
    "3.2.0-next.1": {
      "name": "graphql-request",
      "version": "3.2.0-next.1",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "engines": {
        "node": "10.x || 12.x || 14.x"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test": "jest",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14.x || 15.x"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.8",
        "@types/extract-files": "^8.1.0",
        "@types/jest": "^26.0.13",
        "@types/node": "^14.6.4",
        "apollo-server-express": "^2.16.1",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^0.10.1",
        "get-port": "^5.1.1",
        "graphql": "^15.3.0",
        "graphql-tag": "^2.11.0",
        "graphql-upload": "^11.0.0",
        "jest": "^26.4.2",
        "prettier": "^2.1.1",
        "ts-jest": "^26.3.0",
        "type-fest": "^0.16.0",
        "typescript": "^4.0.2"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- Typescript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Dynamically setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { setHeaders, setHeader, GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN'\n  anotherheader: 'header_value'\n})\n```\n\n### Passing more options to fetch\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Using variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n      mutation AddMovie($title: String!, $releaseDate: Int!) {\n        insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n            title\n            releaseDate\n        }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node)\n\n### Using a custom fetch method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch';\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch: fetch})\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### NodeJS\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response)\n\n### More examples coming soon...\n\n- Fragments\n- Using [`graphql-tag`](https://github.com/apollographql/graphql-tag)\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses a TypeScript type from the `graphql` package such that if you are using TypeScript to build your project and you are using `graphql-request` but don't have `graphql` installed TypeScript build will fail. Details [here](https://github.com/prisma-labs/graphql-request/pull/183#discussion_r464453076). If you are a JS user then you do not technically need to install `graphql`. However if you use an IDE that picks up TS types even for JS (like VSCode) then its still in your interest to install `graphql` so that you can benefit from enhanced type safety during development.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.2.0-next.1",
      "dist": {
        "shasum": "889c8362a2f34f7852cf569b615e7d4532f77b1a",
        "integrity": "sha512-ai3yHQYCKq9nQE+NtZV1Ovnhlk+PWMJlWlY8kC+hA4ujMBZ65RZVHyxO60kv3/PMKPqvjWyfYJ9ve7Ww8dFcUA==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.2.0-next.1.tgz",
        "fileCount": 17,
        "unpackedSize": 56472,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfhdCXCRA9TVsSAnZWagAASHoP/3f6BXQeat2D3JRRvStQ\nPCGpXXL4XpoXfXK+DT7WPil7fTqhq7XiqCkQD2o2GZIqTgr+dgZB4N4UA3tP\nGvRasSmVFDb59eOVUUIpyGJnmkvWsYowz2bymO9V6UdZ+rB13pb6dIKT2DFf\nZyIOuOcZRxXHfnueV9x2DrQ+khGskUYDTtHsOyHrSfhOVPbUCXKM2LDLSnrT\nK/t96L+f2uxrP3pD3sUwz7e10kr+2+7qnplgT5Og78Kqgftjw85zwIaGu+Mp\nAVI0ooMfHO1CLLXvnMZbWRYrQ0k1dRqgfaYu0tu9hBlMbliVxu3wMWaHyPJj\nEKs7DRzsoXi0hE41Sqme/Y2F+6uQtT+En0uCZVJhjAcXvq9y28ctaV5+tBq5\ngE9fM9iP8p4MukFOkdwUU3K75IaUPxl3eQ39uA+emH24UPngosrL2opDmNRC\n7t8obJeq9MJTCezHRUz4kqcsHNIOlcpYuuwhTk+27EQnaICvnjmBzVHtEQrR\nSCscIvSYrmnaKXI2hc6ICgjhlIe6vqflcv6F/60jpKGk3QElXcXpyt6Hvofq\nwHJr/+8uJ6h7N7b+RrUENGO5dd/MhtPvYmT/wk3UQDXKN5Aq1kxcFSAY9aFA\nL/BrmouIe88BZoC08SaANJusIY9tWtOxoISA3vQ6WuLcYDw/OEwNxDrpCMVR\n7TM2\r\n=2izW\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCID4Y+juTplhc+yuPyAqUWnQbwXXeXQy+fayMJdIJrWH7AiEA4DKDs9l7PL4rSd7fTDIw0pHMAXtIbv3BLqYMyKwCj5M="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.2.0-next.1_1602605207175_0.04089070514844173"
      },
      "_hasShrinkwrap": false
    },
    "3.2.0-next.2": {
      "name": "graphql-request",
      "version": "3.2.0-next.2",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "engines": {
        "node": "10.x || 12.x || 14.x"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14.x || 15.x"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.8",
        "@types/extract-files": "^8.1.0",
        "@types/jest": "^26.0.13",
        "@types/node": "^14.6.4",
        "apollo-server-express": "^2.16.1",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^0.10.1",
        "get-port": "^5.1.1",
        "graphql": "^15.3.0",
        "graphql-tag": "^2.11.0",
        "graphql-upload": "^11.0.0",
        "jest": "^26.4.2",
        "prettier": "^2.1.1",
        "ts-jest": "^26.3.0",
        "type-fest": "^0.16.0",
        "typescript": "^4.0.2"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- Typescript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { setHeaders, setHeader, GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN'\n  anotherheader: 'header_value'\n})\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response)\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses a TypeScript type from the `graphql` package such that if you are using TypeScript to build your project and you are using `graphql-request` but don't have `graphql` installed TypeScript build will fail. Details [here](https://github.com/prisma-labs/graphql-request/pull/183#discussion_r464453076). If you are a JS user then you do not technically need to install `graphql`. However if you use an IDE that picks up TS types even for JS (like VSCode) then its still in your interest to install `graphql` so that you can benefit from enhanced type safety during development.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.2.0-next.2",
      "dist": {
        "shasum": "2c4822df205928e85720ba0b645cb31572c2de0d",
        "integrity": "sha512-gTBpTn4j+2cLR7bAAE2EZH9vqwBwZz1pGxb1laFSKeF+ypxAxqbv4fD0Q1CMlxs/mqCNWhhLFrrXoSs6Jm/6pw==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.2.0-next.2.tgz",
        "fileCount": 17,
        "unpackedSize": 57640,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfh7rUCRA9TVsSAnZWagAAQzIQAIJZOZKR/lcfpzelm+H1\nGWzx+q2+GoHW7Et6eY6bPaaccvept5LCv18qArD3U/AWXQvPDCtZXWj7JKi1\nVM0i2FiERyN8DZEdu8Hih3FGMN+uHJjxeg/DDYgf+hjWZ5LcMTjLi6l7Lnn8\nmebi9yfwl/R8u3YGruqs2G44LYyHU0FTBgo9yNkmLHMmIhBuPZFM5g0yoDVV\n2Mmip/aKkunRE+upKIcYIcyaQrAdbtfo7glWDb1a3ozCqKmnwwulgEa378fv\n3fftA+KYvLjyg91EjiW1xwkQI+4dgRf/oEmoEf23Ro+5MrTZFocK0HgJobkc\na1VMOy33DkpxGTtjgOKcB/S03fkiYfXESj3po0kPMMpccDLx82uiHC3cc/kN\nOiXpM0Fyb6dZhC3ERBtxCmz8AErxgASuZ1Uol+Uy68HIeplmpd+Iq7oVemet\nctEY+FVbzAOWwNaYxRBilxziCyWT85vHPJYUO9eXvVK4E7rqEN0ZObVhERd9\n2u6g6MoKDIDWxbsR6zRYpL1+NJQgtU9vmLqkJvCi3vkM/VbURNUc2iJWzd3r\nIdhG6Wp9WplPBE9oyH4XP8KG7ZZ+ZBQl6+XtneoPRrXwzZuhaqSDSCe2MoOa\np7nykXQ1KiTn1xBTaidBw1KA+JvzVxcOt5xlf0xPWwrllbvRUDi4ddkXnufX\n1SPw\r\n=S4A6\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCzO6GWZFr7Exwr3USaat1d2rvqqv8yybltLnyl2oKmWgIhANMqUbNBkC2z1zXk8ip+wsUGGc0US33jex5Pkqn+axks"
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.2.0-next.2_1602730707721_0.5639323439111421"
      },
      "_hasShrinkwrap": false
    },
    "3.2.0-next.3": {
      "name": "graphql-request",
      "version": "3.2.0-next.3",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "engines": {
        "node": "10.x || 12.x || 14.x"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.6",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14.x || 15.x"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.8",
        "@types/extract-files": "^8.1.0",
        "@types/jest": "^26.0.13",
        "@types/node": "^14.6.4",
        "apollo-server-express": "^2.16.1",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^0.10.1",
        "get-port": "^5.1.1",
        "graphql": "^15.3.0",
        "graphql-tag": "^2.11.0",
        "graphql-upload": "^11.0.0",
        "jest": "^26.4.2",
        "prettier": "^2.1.1",
        "ts-jest": "^26.3.0",
        "type-fest": "^0.16.0",
        "typescript": "^4.0.2"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- Typescript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { setHeaders, setHeader, GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN'\n  anotherheader: 'header_value'\n})\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response)\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses a TypeScript type from the `graphql` package such that if you are using TypeScript to build your project and you are using `graphql-request` but don't have `graphql` installed TypeScript build will fail. Details [here](https://github.com/prisma-labs/graphql-request/pull/183#discussion_r464453076). If you are a JS user then you do not technically need to install `graphql`. However if you use an IDE that picks up TS types even for JS (like VSCode) then its still in your interest to install `graphql` so that you can benefit from enhanced type safety during development.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.2.0-next.3",
      "dist": {
        "shasum": "74de21a4e7c6ff2aca2e0d33cdc2d81a74b2487b",
        "integrity": "sha512-AZgOXP9snSSbnszPilfhZO640rorPbfMuZXuBSzig+2n0OPfAIaa1O6WMPfOMoKsVFe6mfz3SIrYRPaSSG0NOA==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.2.0-next.3.tgz",
        "fileCount": 17,
        "unpackedSize": 57640,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfh7tyCRA9TVsSAnZWagAAMlMP/A7r0xrGUrAbnx02WRqs\nGk7hSltpbJtq+APumH3Yt+TF10tJlGlMDJQj5KapgIdwwKRtJyC2ynwrpjDn\nj16s9qMyfybcu/ekZRtGfcm5p3lFAeLeDfmC2myQ1E2Ob6KFN7UQRHk9XDWH\njwhca6HyFFrFdpWnIg+ZlnGNZ6jubtLjN2waOUAaQUFUOeaToAGjCBZ0y/5R\nYbGlXVrvPWKxpDcbykXaQgJNX10jR3WJCqQpvvbEwS5vVI+gaN5tg+muC7Cn\n2qByOcjAqCB9tAyDJqAL/C+09/hP/A9kD1VTpsa1aLu6UpnVo5k8NBa11ckj\nh6qy6bI/n5lgZAgiukA5u0tLDFhk9Ih6hAABL3C6NtnFUa+tD8pXZoCtYPsz\naltqtHYYi6LYO773PND4Q+qnkqu57xW0P8azj1ZKuM7SJphuzAZxSdqbB1yB\ncwgx8UMbAfPWG4nWZ1djXN24FDyuVvsI10+HjGfNtn5dRf7OWkECx+v6jgU6\nG4PXiRQ8ykSyD2kqEEiiMyRGvdxItZNmmw58VV+xncDQUtevWoNkum20ATR5\nEVrYo1AXrKCQkm1P5wXTtIUjmO3k5YFxEMJ3Pj8j4iRrzPTss2nu5JXdCYg4\nZWm49U5+m9TrvJefv5yCDeR3iKEl5KMyYsjQcRE8Opt6SbvTFpFRz+zhwRyg\nf4HV\r\n=xacx\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCvcyVtkixR93R+/c9nSuEsBTSrGv9nmS8ynQKhdJAyBQIgeG9f3E3dCxLdfVBfKoL5jXwNJMxFEfpwQ5Vs/GjuK9A="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.2.0-next.3_1602730865818_0.038707406064138805"
      },
      "_hasShrinkwrap": false
    },
    "3.2.0": {
      "name": "graphql-request",
      "version": "3.2.0",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "engines": {
        "node": "10.x || 12.x || 14.x"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.6",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14.x || 15.x"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.8",
        "@types/extract-files": "^8.1.0",
        "@types/jest": "^26.0.14",
        "@types/node": "^14.11.8",
        "apollo-server-express": "^2.18.2",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^0.10.1",
        "get-port": "^5.1.1",
        "graphql": "^15.3.0",
        "graphql-tag": "^2.11.0",
        "graphql-upload": "^11.0.0",
        "jest": "^26.5.3",
        "prettier": "^2.1.2",
        "ts-jest": "^26.4.1",
        "type-fest": "^0.18.0",
        "typescript": "^4.0.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.2.0",
      "dist": {
        "shasum": "d356bbea6dc496ab7969aa0892a0ba9ac938a347",
        "integrity": "sha512-s4zIfQsDkGUv5ECCkGq55Png7hJjFBV7PMIadB403VDaXv0T1RThPSRgZM1hiKgB420rOItkR5BDQ3vPvaAWqw==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.2.0.tgz",
        "fileCount": 17,
        "unpackedSize": 57634,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfh7uoCRA9TVsSAnZWagAAWDgP/04K5Cc0PXi+JGY32X5U\n8aRw98qwVtf7zL2jF1Iy9yaeMWNNmEFAvFRPPEZa/kKrEy0ckWr55IVCE2OW\ndYhrZzh7Ifka4MGNYN8CljwL1yF78miZBS/INpBvLQ+mCs3ssv2daqEar1Zh\nLgj34gLZQ8OtfMofOp3sbXGSNVEdbi4pOlO6tPl4RVNAzkXGI2++s7/GkPLj\nxKMakvWaPeOO3DyCS75PibtUs3ae5vIQbfqewC5UfRW3sqJsh6Q5PaL3lQlN\nq3EHhjW9xd2FcG3aauXJA3sL/Ro8hGAvH1zEU6jqCK1BwtfCrp/a5adnpebY\nu1vuCGvhWnpv5eQNs8kQ/23xwNOZhVZ3Ckr5Nz8kW4xrnSI7UymUQGyh1ZbX\nIaQWKH+NpQCDMVGUxbLJLzhhPFWrBa5rC3OFu/h0jRk2L9DtoShNZAivVtp4\n75DH4VJGfN5dzZVp6VhbqhSUDKzIO+5eqbTLn2GOU7fdrJKzBACN9SzPPakp\nEH7MOba+yw/yo+2wO0DthkUh6RCvCBUboyTHhEX2ER2rdVTMA24UnQM9C5bz\njC70PhdfOp9jLEAp1O0toC8YNO88Q4Z6IFFlMGsKBV8TTaEKvRCSmGxFc0XU\nlhHFPJ6pS2YRcjDC8SsqAdLo/4U89YnauCJftAKIWJg+DpLT2PyKQSqhTrYi\ne9AM\r\n=wtlk\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIG2vStxaUkg2SnwY181TQC/MoJXBZ9xGsohlFu9JYhUhAiEA0+T8mycQFaxZiizi7Z+jEwabep1RLG1M86wiaMVikZY="
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.2.0_1602730919605_0.8870742963597922"
      },
      "_hasShrinkwrap": false
    },
    "3.3.0": {
      "name": "graphql-request",
      "version": "3.3.0",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.6",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14.x || 15.x"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.8",
        "@types/extract-files": "^8.1.0",
        "@types/jest": "^26.0.14",
        "@types/node": "^14.11.8",
        "apollo-server-express": "^2.18.2",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "doctoc": "^1.4.0",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^0.10.1",
        "get-port": "^5.1.1",
        "graphql": "^15.3.0",
        "graphql-tag": "^2.11.0",
        "graphql-upload": "^11.0.0",
        "jest": "^26.5.3",
        "prettier": "^2.1.2",
        "ts-jest": "^26.4.1",
        "type-fest": "^0.18.0",
        "typescript": "^4.0.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.3.0",
      "dist": {
        "shasum": "1b9003f34b73cd40d691803d2d422fde5c713af3",
        "integrity": "sha512-NHj65WSIUh8j7TBYgzWU0fqvLfxrqFDrLG8nZUh+IREZw50ljR6JXlXRkr52/fL/46wpItiQNLDrG+UZI+KmzA==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.3.0.tgz",
        "fileCount": 17,
        "unpackedSize": 60019,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfmBxlCRA9TVsSAnZWagAA1kQQAIlIJ1eIO0m0nErHeH4z\n8BAK90oav/R+cbZWC3ytk+YLrXta7FaqkS0kq6axRas16WSpqKrU4qC+NKwS\njBzZeuxPmgJWALa594sGhuTXdKH/UiYhhDM92KW6OLwFsJnkOWsdkr98xRtT\nF8eEgRtve9+9H4/csKeoO6i79KdyPvh72MbnjMUPRKcQzhCzPofivr02jSIT\n9DYW6R7rcs09ZH4Mb+9xVUlU6PlRTlGBhhQjbq/kWj2maasC7WyBI4oAwQz6\nTihZ9FJ3/bfz16TlUxFp1uyZ9Uwx4823Ug9hYWkqNvcGRzFOJjHPHA/p1Oss\nOLcocZ3twY+OaRMqfAjzfqe/2ff71upT2NThIT9N1a9qjHX+hQiBjiIxoXRE\nUZoUx2Rv+/aMuBB6gRBVbL0LvLbepwcXlvLl1ZSc/jYb/n3MylP6f0Cpyh7C\n4yx30tlwlysGs3pDc25aIphpKugha9FzGxJjjXmOzG1T/YEItl0BwZEoVLxt\no/qQesOlagDN3e9rft6t0aPneU8bgF/5/JNfNF75J4A3lD6GI+tYdK3K8k6P\nKIiVVHkx+XDiVoEwyCSmanRZXYPrHWZoLbeVvWETed9zwN76MnfxVAhNIMt2\nx/dHy4+dU/MshF+cKPz91lnzrr1c/o52GWRtRSYyAn7P9F1v6rqZLrEXhTUJ\n7WDM\r\n=wxJQ\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD0Lt7eSwp3WubDMcPaE7TfS07sIido7DYpFmCFqIOhJwIhALnfC4RNeYk7YTe0zh8VXHq/EGDKGcDWxhVilzfXtyQb"
          }
        ]
      },
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.3.0_1603804260601_0.36292155961225236"
      },
      "_hasShrinkwrap": false
    },
    "3.4.0-next.1": {
      "name": "graphql-request",
      "version": "3.4.0-next.1",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.6",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14.x || 15.x"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.8",
        "@types/extract-files": "^8.1.0",
        "@types/jest": "^26.0.14",
        "@types/node": "^14.11.8",
        "apollo-server-express": "^2.18.2",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "doctoc": "^1.4.0",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^0.10.1",
        "get-port": "^5.1.1",
        "graphql": "^15.3.0",
        "graphql-tag": "^2.11.0",
        "graphql-upload": "^11.0.0",
        "jest": "^26.5.3",
        "prettier": "^2.1.2",
        "ts-jest": "^26.4.1",
        "type-fest": "^0.18.0",
        "typescript": "^4.0.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Features](#features)\n- [Install](#install)\n- [Quickstart](#quickstart)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Community](#community)\n    - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n  - [Passing Headers in each request](#passing-headers-in-each-request)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n- [FAQ](#faq)\n    - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n    - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n    - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- Typescript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n#### GraphQL Code Generator's GraphQL-Request TypeScript Plugin\n\nA [GraphQL-Codegen plugin](https://graphql-code-generator.com/docs/plugins/typescript-graphql-request) that generates a `graphql-request` ready-to-use SDK, which is fully-typed.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { setHeaders, setHeader, GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value'\n})\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN'\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses a TypeScript type from the `graphql` package such that if you are using TypeScript to build your project and you are using `graphql-request` but don't have `graphql` installed TypeScript build will fail. Details [here](https://github.com/prisma-labs/graphql-request/pull/183#discussion_r464453076). If you are a JS user then you do not technically need to install `graphql`. However if you use an IDE that picks up TS types even for JS (like VSCode) then its still in your interest to install `graphql` so that you can benefit from enhanced type safety during development.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.4.0-next.1",
      "dist": {
        "shasum": "9c0767a776a22cecb164ebf50b27bc7f80a5a396",
        "integrity": "sha512-YMqhisZpktmzEQjbx5Dg3fsblFEwljYQhnsgCrm+u/BOVvPr19I4HP95yy0aXbO89unK/iYCGkDV7Us6s51BdQ==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.4.0-next.1.tgz",
        "fileCount": 17,
        "unpackedSize": 60901,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfsnzICRA9TVsSAnZWagAARSwP/1oLB9qn5x3KU1KekumC\nwl172aXn/y/4rCmpUSmrQaOEqcIj/n37ZB1V+n2Rkoz3TtWKZw/0Kvb4gkd/\n5xsPymGt1dBuaxexqNp90hZXRU9tz6ncbq4BF/0HnegbGj3UF5tziTYkVZEF\n3l+z01+AQ3HPYHujMVKCdH8tjTlI6K7lz5C8Rvm1IFfXjCxWNcUnLuoKjsgJ\ns3g5/JBrAmC5vR4XhJnOaqrv1KKj4p+QDIfOwovLi2gKEZbHdHe3DMWTY4K6\nJl4O3rwvYMZFNqsovBLMoRcEvjksQl7Vfq2l0N4mNXvmgNvTYtNAI5wpT2En\nbckQYrQcgHbizMABwA3OZN6Ko7+Ep3L9Phctz8g85o648X/Ih+PkJtoQd9az\nAIW39K4lCv42sEmMiIDI6PFSCF8+Y0God40oMR2T1YfjGbNba++ihlvNYSbk\nIV8yUojbhlmobGzEyjhJ+cxz2iOaG4lycQWlYoMVlymDFyszxij6enV5BVBs\nh88AYcT9JBSLcXUCzatw3sOYo1E0OL3GN9/utT2IhvJ5BX0dvJsIIvACXLV/\nEO7mnCx8Zfnvl4UaaOXYWRAeWUoPhnI8WUduhiq264hgkkOJO4xbZrIfSgrs\n29GWjOOZSO8fL4Gq8GStXJ5b4dtEI5s8FpAA14WSBnFPxmyK9k62dK8WuHQE\npBy8\r\n=pllY\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFwD52ryDy4+/rIKe9myzDszEY2DuYn2/tGovCGyNnyHAiBtWc2MfCvJ1BEXRSVPZmcvAfktHygymkeOug5yEADyGQ=="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.4.0-next.1_1605532872072_0.9105386657374159"
      },
      "_hasShrinkwrap": false
    },
    "3.4.0": {
      "name": "graphql-request",
      "version": "3.4.0",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.6",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14.x || 15.x"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.0",
        "@types/express": "^4.17.8",
        "@types/extract-files": "^8.1.0",
        "@types/jest": "^26.0.14",
        "@types/node": "^14.11.8",
        "apollo-server-express": "^2.18.2",
        "body-parser": "^1.19.0",
        "bundlesize": "^0.18.0",
        "doctoc": "^1.4.0",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^0.10.1",
        "get-port": "^5.1.1",
        "graphql": "^15.3.0",
        "graphql-tag": "^2.11.0",
        "graphql-upload": "^11.0.0",
        "jest": "^26.5.3",
        "prettier": "^2.1.2",
        "ts-jest": "^26.4.1",
        "type-fest": "^0.18.0",
        "typescript": "^4.0.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.4.0",
      "dist": {
        "shasum": "3a400cd5511eb3c064b1873afb059196bbea9c2b",
        "integrity": "sha512-acrTzidSlwAj8wBNO7Q/UQHS8T+z5qRGquCQRv9J1InwR01BBWV9ObnoE+JS5nCCEj8wSGS0yrDXVDoRiKZuOg==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.4.0.tgz",
        "fileCount": 17,
        "unpackedSize": 60894,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf2tH8CRA9TVsSAnZWagAAEsMP/3wZDUG/JixiT3xHeUPw\n8lFRZcCun2kxZ/r15vHymQo+0Edys48CNdgWga5RCp2VETZP8T51WfhkmWJf\nH8Ebi7e5zxYd2WNEdlfM0Aotvz5qAfhna3Tsj7V4A2wAWIr140hiSO4zmdDQ\nSWGh14+ZmM3LHawvQHC4isTERE0OQNEJmQ4Q6CbtY1ehViEJO9Nr0lC1eViv\n/Y7A6nbg3iGoNHaoY8sxsUtq0VDuL4tEDRCbzdMYgkUitOlNn1d0v5mua4Xv\nh9ehkKmaR4rbEraNSkQF7/m6IsDrCFF1MFMvrk5HT45n7YdePL5T3gOk+gxM\ntlaee3rLLN9N2dCZaU+3QyAAxKiKddavH6C1FXqO0jo6ooFLV8LuCwlp3843\nL82NXZDsutRJdjpaWAGeOUVV7PE1UEV2PguOlXvFW6CDG54H5/w0FrTAH+++\nyZ/y+3P7PPZ0e0BEsGDvhnSKVt+l/+/bM3/s0iivqfnNwzdJx88PPwpUUI1k\nNkxByEO5M9cn5H27gTp6E0JWh7WoUmOGN2RoVVbCI/QDySkeh6ocZlusDOWb\n6CrUIAu8dohczFjPxaoG7FjfWrN4IJ47sHdmZt2SziKOkVhNxOdRE8wx9jZp\n+yi/xmIWFFKNqe8WEiKaez0MnlZI73G49oS6K7qfxH7aN0gJThSE/WSaiZjC\n2yUy\r\n=kLNs\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD9eNu/MZw8Z6m5OIClEERUGsmNCAxr4U13E+f5oLbGfwIhAOFT9EeD45Z1mj3UHz+f0GXN39f/palz4Xs3Lk4Iosqz"
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.4.0_1608176124040_0.6163499710539058"
      },
      "_hasShrinkwrap": false
    },
    "3.5.0": {
      "name": "graphql-request",
      "version": "3.5.0",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.6",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14.x || 15.x"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "apollo-server-express": "^3.0.2",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "^15.5.1",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.5.0",
      "dist": {
        "shasum": "7e69574e15875fb3f660a4b4be3996ecd0bbc8b7",
        "integrity": "sha512-Io89QpfU4rqiMbqM/KwMBzKaDLOppi8FU8sEccCE4JqCgz95W9Q8bvxQ4NfPALLSMvg9nafgg8AkYRmgKSlukA==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.5.0.tgz",
        "fileCount": 17,
        "unpackedSize": 65170,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhAFKGCRA9TVsSAnZWagAAShgP/1cihAvKfGITA6tg9sYI\net/Vwg20KBK/VnR4gn5CzmpgFZjkPxBn2aRQ3a9ON4Vd+eN03PJIkmOuJ/xy\ndUdJPmlRJKMynkXF2h9RdH0KRbOut2dFY1fnhQ1NSivuZV/jwKQsoLhlKPA8\nlkmm761VJjr3CnYIL+naOppyxLSpJZnUkB2YV/oJiDnV8gx81ENr/SLhiVTg\nrxfYRfhWvBA7ZmN4iWeoQ1PkrM21SccOGlYMBQrI2IGeoMh+/Aq2AP+yhwk4\ni5kBX8tg4DpaMGrZj5O1QhamvD4nZSFfZWJqu7orrYvAJrE5qwRZi9+PWkAS\nL706l3ENPcztvydl43iF5a+ylsUxwuhsH/LHDUrhDJlfgMIFWCaw1KjIIb8t\nxQ4I+BYnEbgXnK/4WLyvkVO/bGD+2/zZ84UN2YCQnjKFcXa297h2FKD6UDKX\nSoajRatZsltSzCukIRaoM3vmrCRaUJB/6VT2qEQpirKe5u27LhfbGWS7tL5p\nK4Oxq2cJcTNMgjexZAeXpB4tLLVFX4EYwsh+dOMAzcyojqF+EkCMoCkFm/IN\nzvTaQD3TMSAT7RUQxqJpfVM2Xn/lv5ROACNsZK0imbFAEGx5D5rSWcE2NAwH\n2+Y1fZ4Q21WlD3HJiAWIOnRefcLqpYPE93O8PdQrQ5pfBQwdzm4zKg5nu+2t\n+EoN\r\n=gZeQ\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDBO6hw1tPSE50n8shffSozZVkH1lpcfWHT8XPoNJWXMwIgNvvnaAbW1H46/XQB60GwpMxFGDh2gPaMOuU+yebcIUg="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.5.0_1627411078614_0.03073346319381276"
      },
      "_hasShrinkwrap": false
    },
    "3.6.0": {
      "name": "graphql-request",
      "version": "3.6.0",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.6",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14.x || 15.x"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "apollo-server-express": "^3.0.2",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "^15.5.1",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.6.0",
      "dist": {
        "shasum": "8f2be900cf07ac87064b15601cc30e0f9a5e7d51",
        "integrity": "sha512-p5qIuD+gyjuOJ8z9sEcfcLVK7HUB+/88hf/xGEzX330U3L2OR1JtaupLPmd1D2V7YtqWiEnSA3tX9vqZ4eGMhA==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.6.0.tgz",
        "fileCount": 17,
        "unpackedSize": 74907,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDcA4r7zVsw4O6w6kB5b8ps/n2cXtdabno93bD/yXxLcQIhANyETziMUl5d7LBqCVBERJwP6U2ylIQXDmYwOx+dS4Eh"
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.6.0_1634138249206_0.34177401309764543"
      },
      "_hasShrinkwrap": false
    },
    "3.6.1": {
      "name": "graphql-request",
      "version": "3.6.1",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.6",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14.x || 15.x"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "apollo-server-express": "^3.0.2",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "^15.5.1",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest"
      },
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.6.1",
      "dist": {
        "shasum": "689cce1da990131b40b05651f9f32bff506a1d8e",
        "integrity": "sha512-Nm1EasrAQVZllyNTlHDLnLZjlhC6eRWnWP6KH//ytnAL08pjlLkdI2K+s6OV92p45hn5b/kUlLbDwACmRoLwrQ==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.6.1.tgz",
        "fileCount": 17,
        "unpackedSize": 75816,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEcT+ag/+9p237WqjF5j4zGzvJNhZt5E8vaIOzZYkxGRAiEA+RC10gTQXEzabd+1GCcVNe3rXsJKPMvrCpLXM8uxh0Q="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.6.1_1634559662941_0.393695997733583"
      },
      "_hasShrinkwrap": false
    },
    "3.7.0": {
      "name": "graphql-request",
      "version": "3.7.0",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.6",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@3.7.0",
      "dist": {
        "shasum": "c7406e537084f8b9788541e3e6704340ca13055b",
        "integrity": "sha512-dw5PxHCgBneN2DDNqpWu8QkbbJ07oOziy8z+bK/TAXufsOLaETuVO4GkXrbs0WjhdKhBMN3BkpN/RIvUHkmNUQ==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-3.7.0.tgz",
        "fileCount": 17,
        "unpackedSize": 75866,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhqjxuCRA9TVsSAnZWagAAP4cQAKJ5bU1jaQplF1u7mdqz\nu6q3Lr5BN9u3o2udlN/IPVyynlxYj8wDjPNFhrz0m+N6wCMfAYnSNiot//Mf\nEx17EZcR7oOVa5qrbvZnVHO0dwOe6S7Et8vbtBzVnHTwumn/VFxrc2D3T2Ts\nq8hQDJMWAZTAoqu2dw3I9aSaSN04VAH5M/Y+gXCU+4rG+Xq25gGD/9apnAYm\njcXvDCYo4cGX8iCsEP2BS6stm1yhoJ8Hk4qs20HR6JFMcaNgcsR08g1zKlMt\n0vzVhaHYLFMY50hyN/LSuEWivOkxpx1I2okXjwF4yCwLhCgj+Cc4FVlnQnvE\nPbl05rnCb0ODjtKv0oW7BCmLEBGs3PfQz2gVe98IRci0WqSo1MMxcKRjSH0e\niOpH0WPQ7avZJLILKSbaM803xAYQ7pEBGAV0K6tp3Bxmajpwmfb3sVN4Rcmp\nIMFYwfqHhvjvpFp8ZyWsea7rPc3lhifmp1T/4ydkh635jvUx09QjDqtWscf0\n91ba5T0DFdn7y7AxE/AIGKrdzCY5qgDQmAcrE6DcwsyDAqyEFW3dJ7uuWWx0\nX960isdQ/Z92C/7zc+vUItNomNhEUC7bdPyxhnbCY/sbghkcftC76RLxM/uI\n1mJUmjVp36eE+QvpDBrfp47g1v+9eylOVA5MM3GXVAt8fuAcFPV5T39XSTlM\nFDjV\r\n=2TcB\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCC8eP/nFXZR+TA/p9/PJr+Yar9IfbaiJXiQr4t3pLwxQIhAN3szPQVk1gUCwBN1RQy610aH/YsGewzU6xGc2JzgUSD"
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_3.7.0_1638546541910_0.11265300319479099"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-next.1": {
      "name": "graphql-request",
      "version": "4.0.0-next.1",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.6",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "abort-controller": "^3.0.0",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Features](#features)\n- [Install](#install)\n- [Quickstart](#quickstart)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Community](#community)\n    - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n  - [Passing Headers in each request](#passing-headers-in-each-request)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n- [FAQ](#faq)\n    - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n    - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n    - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n#### GraphQL Code Generator's GraphQL-Request TypeScript Plugin\n\nA [GraphQL-Codegen plugin](https://graphql-code-generator.com/docs/plugins/typescript-graphql-request) that generates a `graphql-request` ready-to-use SDK, which is fully-typed.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value'\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN'\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request';\n\n(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/';\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `;\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `;\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint, { signal: abortController.signal })\n  client.request(query)\n\n  abortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint)\n  client.request({ document: query, signal: abortController.signal })\n\n  abortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n````\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n````\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses a TypeScript type from the `graphql` package such that if you are using TypeScript to build your project and you are using `graphql-request` but don't have `graphql` installed TypeScript build will fail. Details [here](https://github.com/prisma-labs/graphql-request/pull/183#discussion_r464453076). If you are a JS user then you do not technically need to install `graphql`. However if you use an IDE that picks up TS types even for JS (like VSCode) then its still in your interest to install `graphql` so that you can benefit from enhanced type safety during development.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@4.0.0-next.1",
      "dist": {
        "shasum": "f2152978635d2ff0c4ce4a8a2f8673d988a5c9fd",
        "integrity": "sha512-eVleds0LwtPgS+9knhZRPsLmxIUbtVTrxpXJguNR7M239xZD4I6O6NGKLi58jMkM1m6NzK4/cAq2J7Y6/vS6dA==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-4.0.0-next.1.tgz",
        "fileCount": 20,
        "unpackedSize": 85880,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh3D4FCRA9TVsSAnZWagAAoZAP+wS0BW+qDzRHFhyltwhK\ny7oqP8qkHbDZuFr6a+tCEQ3pNbjDxpNdjOT0UionJ/SLv++Az2qJfuv9vgmq\nAZozhhqMUL7aayoLdk6CeZ1kwLC2fRFmbvfSULe9ZMBDj5d+KH6DnWLSQcRl\nIQTIx1TSEKHwuR8rWJ+BRMRW0osT+DjlcmA4wdCiEy0pLA8jFC8bn0gg5LR7\nDv8/5N24s7ggfXspMRqRt7N1AFB2ISni2dXcP7UZXi6W3K8E4yJ82PtOq0k0\nRf+0eLEuZ1v3wQgee4ACIBI+pqBWXCZ7hMF1VvZLAZRJoc+Q+Dbk0uW/Nn/8\nCOeL+p/BZTfc0qLBHqp1VE4+KzbdetUdMl2dbb9byJEw19gKf/L0xx7aL9Ig\nylhQcLY/JfDEILkbc+ucW3xo4TZgpr9E9qmOHdlk+fn16gn8yKhGkIUTRcd9\naYRNFlvta4ZXKhw0gK2XTP65hkyOpyEhQ3MQoftKnD3z7YtmJsVBFe0sAZs6\nuf2hLxKehRSSqSvtne20rGgveUqA8PwWzOQslXr8wpsMcdKEtO93nhIfa/5R\neJlrDN/4NBfLemq7T9/ft9zFWGu1ZsRO6ZFCe9GB1+heS5n7pVpMH/yxfev2\nPWQAcRMA9J8gjtsW+QMlINFV6R8gTQn0TAZRlvHeuxSfhCvawwQXaD7ID62V\n5+xy\r\n=ZDav\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDcADDx6qlTvWIuMgJj6jjupLFHP+BCHq0Lnh6mV54KZAIhAIuJPCTZZVMaM+vCk+SEtpOVji7wHBuBINrLYoGiqvzw"
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_4.0.0-next.1_1641823749559_0.36471624700554073"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0": {
      "name": "graphql-request",
      "version": "4.0.0",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.6",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "abort-controller": "^3.0.0",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@4.0.0",
      "dist": {
        "shasum": "5e4361d33df1a95ccd7ad23a8ebb6bbca9d5622f",
        "integrity": "sha512-cdqQLCXlBGkaLdkLYRl4LtkwaZU6TfpE7/tnUQFl3wXfUPWN74Ov+Q61VuIh+AltS789YfGB6whghmCmeXLvTw==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-4.0.0.tgz",
        "fileCount": 20,
        "unpackedSize": 85873,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh9DI+CRA9TVsSAnZWagAAp5MP/1XCrCMZ88hH6baPo4lL\nhasCxop9l3qFjFkbv9xhPy56Ix02vxk9xloZgfjv1PDBBorSEnqNav6lp1Tt\naYR/HVa+EqK5l1yisoAyJdo9JOr75l/B3QsIsTr38dKvBFb89DpMESsWEEJ3\nMwz0pBkCO/NouzLD+zCkMv6zE+lnyU3iyjVy4pHQKmkn+CtC2p+v0n01iw7k\nFnL7kj3VlG3LhVBWLBO6wJIZ0sMOPR+iVCqyPgG3td8L0x4Vgc2IDJnIsK/R\nsXyKFFsHNtHEtWTO2msecMzYYV5fXpSfcpXtPpdpiL7a0REetvFz2Jq5QkV8\nGjoFdlHFU4p8k9+aZ+AjSHL3yM86Vcy1Xm7saTGNmvQMRYjATKi5zIrB+Ona\njpiY95CsX1z3u8gfdHyZPf5jGn4nEAnTwGS5Bj4lq8o77KZvu6AR7nN94x5t\nL5GM1BdiLlaHeiakCAvtplAQ8lYr89NciAzz2oyMOKtVCWB9CqtDpCl/IhZZ\nQqFuqcwqy0DT66+4tP/1/qHxzSYAN14U1PIwZ+cTBrxqQ06V3I2kJvtlbGTf\nQKlL4O4YPFWmzL0tPNu8dSJ5KcP1Ji4atlKoKL35Yk0XWTB3H1K1ksOoT3rM\n5TPnjztwYy14RtF/Wv0+0z2tvub5aGspcWUWrJnM8CGkpdOIPf1nuY+OzDRX\n2YUJ\r\n=b0j8\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDnYT8xDAZyAM/wllr87NEPJbIW3b7+NI69Jhkwez7lcwIgcZY0vxnpvFLwlwD79I2gT/ZsIlvcK2tLRabcth+p8ek="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_4.0.0_1643393597946_0.6611867780577567"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-next.2": {
      "name": "graphql-request",
      "version": "4.0.0-next.2",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.6",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "abort-controller": "^3.0.0",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Features](#features)\n- [Install](#install)\n- [Quickstart](#quickstart)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Community](#community)\n    - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n  - [Passing Headers in each request](#passing-headers-in-each-request)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n- [FAQ](#faq)\n    - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n    - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n    - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n#### GraphQL Code Generator's GraphQL-Request TypeScript Plugin\n\nA [GraphQL-Codegen plugin](https://graphql-code-generator.com/docs/plugins/typescript-graphql-request) that generates a `graphql-request` ready-to-use SDK, which is fully-typed.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value'\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN'\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request';\n\n(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/';\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `;\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `;\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint, { signal: abortController.signal })\n  client.request(query)\n\n  abortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint)\n  client.request({ document: query, signal: abortController.signal })\n\n  abortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n````\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n````\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@4.0.0-next.2",
      "dist": {
        "shasum": "a7811fc04789e576e1dae82820c9477f2c52af67",
        "integrity": "sha512-uEk9TZ91jS4J62q4eau8OcieoDNK1CFO1lbgDgdnQUqr34xQlyrnK0TMvA7xCIUpqKoc7hkcyvaihFQkWbsuqQ==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-4.0.0-next.2.tgz",
        "fileCount": 26,
        "unpackedSize": 127008,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiKiuEACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmrvlw/+OzWdGY2o/HvlzpzFAO8pPTyHqn7EyejE8qaf19uR6Y6mz1b2\r\noC38lNtbxnA9kXf64wZX1+pLWfTqivLEbK16r3teIY/GQvVu4o1d2SQTeJfN\r\nwASfWI+tdYB+XXIb9dx0UO92VRPv4oe2c60/KZkFOkztfopfKCb50G/4GjCN\r\n7F1qDZEPnzVzLPb/fWl+nS73RZN31pRz8IATyeaBellZHdpM7mTHJ/zoBenf\r\nU6FUJfLD4X0NWEdCNMFOaHbcq30fWoeSMy187G5HPixopRkr08pqElRENXqA\r\ncCY66uJvKaynwX5oBoFp2RTv5JHmq/tbW0azwvj8GRqsEzrsrpC4kHN8GBDN\r\nR+kuhcgWMo+kCkA26XSOCPJf3SE15CHkWQF2SIY3Gys1+B9oYRg6DJcFK0JI\r\njsmBjtfPkmtL04XAJHqh2ijMlKeweehBzZRgoasLz/U1xZf2YFE6IOJIfmOY\r\nkx5dC+qR4g+qVw9D8w/3uEa/98GvEXDsKA2oeUPP5MdK04GB0Y7gbrb6NWm/\r\njq/cJMWI8Tz5ysdpkBcureDwwx2hJx/9rCgIxw2p8zpPYvMx4jZ9KJPdL+ed\r\nIz3lrf4rB97gXIk17Isks/qjgw5JY3DewgZwfmOBkTTd+e/EazcE/mlOcNNy\r\ng5MTEHMafr4LpwntOAJMHwpFO6iFz/JrYqQ=\r\n=AbD7\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDSdE7BeaFon31gP4fyMQsAxImOhJ1oqH7CPF654wxqjwIgCF7CTomw8XzpgblqwMpBLHypn/P1ZGjRi8E03Q/XJp8="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_4.0.0-next.2_1646930820694_0.8278465919044575"
      },
      "_hasShrinkwrap": false
    },
    "4.1.0-next.3": {
      "name": "graphql-request",
      "version": "4.1.0-next.3",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.6",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "abort-controller": "^3.0.0",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Features](#features)\n- [Install](#install)\n- [Quickstart](#quickstart)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Community](#community)\n    - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n  - [Passing Headers in each request](#passing-headers-in-each-request)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n- [FAQ](#faq)\n    - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n    - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n    - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n#### GraphQL Code Generator's GraphQL-Request TypeScript Plugin\n\nA [GraphQL-Codegen plugin](https://graphql-code-generator.com/docs/plugins/typescript-graphql-request) that generates a `graphql-request` ready-to-use SDK, which is fully-typed.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value'\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN'\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request';\n\n(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/';\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `;\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `;\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint, { signal: abortController.signal })\n  client.request(query)\n\n  abortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint)\n  client.request({ document: query, signal: abortController.signal })\n\n  abortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n````\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n````\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@4.1.0-next.3",
      "dist": {
        "shasum": "491830d01d57afe7304d8710690f4440b0a4d600",
        "integrity": "sha512-df46Bfd+nmhYawFbxadDiIqBV4oNXjKW9sFbDAkpcfNcJrGTts/1AbzG+qDd18BuWyX8+JmRyIGM7b23AW/OHg==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-4.1.0-next.3.tgz",
        "fileCount": 26,
        "unpackedSize": 127008,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiKiwrACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqyjQ/9Gq8uj68EijywhStsRVoJX3P/5cSHYdV+PA4G1JahDCl28aOX\r\nPNKYEBblJQ/b4Y2Q3gqvvxGXeKq18knESLEa3C42n59Db6iWGcLH9xTZ8NjP\r\nXYzWtH+yfo0API9JwDNLpBKSiIJkMhAtC6zEaLPJlUVoRjheO4wSxtzZ7nEM\r\nngE82eBePYJv6T1ccThN5AvNoH8NwCEPoKSa6anE1jLXMOGJsy3nrtV+9JwJ\r\nYQ3wSpsjNb0Jv91wuO0etCF/pG0m+Hs3EK1uVGGfWsk8G3/awgcWr3hBT1G5\r\nzPD9JnzG7nJCvTqhjeoKfVUnAvQwqfwVLzfy/VN+8OFICHKMX6i5y7iYAtIA\r\nisd2gs7Ipn4p7+0tpHGNAkTQBdLWdIiXtXaV+eRvhVCNY/PupNA0AdgYQQNe\r\nQB0pWsPQ67eBD0HGDRClBiHObNjli4yhR+NseZ6oraZvsf0XT8W2jrw0HklM\r\nA0LMULbz8F91kxIycBRO6WhR/VQ6Sifwd3UYTX+fz8QIVR9aDchGkCA5nQtC\r\nRNDrEqUQg7FYVyce5aNJG+IovCtbsvsVaIZUeo2uKP84ZhWr4bMfL2dYWAXl\r\nUt19AGOSM2hec6Nvto8sMpmbkkUVoKnDgz7viguRMU//+K7oGHnRwel0r9Zf\r\nEAVoOl0jJHq3vg6q8EkCc3KWGEYEQ6EaePY=\r\n=Rc9t\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIClC60d+Lx2BF5k/1jZqBg38wmWspKXhgdjmnwfp7mksAiA8YMQi3RiwcPz87kbnJO2WJb/UWYceO4TiMVExEAornQ=="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_4.1.0-next.3_1646930987557_0.22501167794042098"
      },
      "_hasShrinkwrap": false
    },
    "4.1.0": {
      "name": "graphql-request",
      "version": "4.1.0",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.6",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "abort-controller": "^3.0.0",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@4.1.0",
      "dist": {
        "shasum": "98d0d8d4458fd81674d8566d0b5781bd2823c26e",
        "integrity": "sha512-CBFcO6LP7cg+aBMc+x9C1dZEQsKTBZKR2J+HzuB0cR/6aaU4K4/tRXTQu8CDMp5195ZU+DTNKZZOSK1WRbTeAg==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-4.1.0.tgz",
        "fileCount": 26,
        "unpackedSize": 127001,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiKi36ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp49A//XLgrAg4GsdByg1Wm4mYRJ8PB+cpDbU5N/FtjyjeohfWCjfTC\r\nzJCWYdRChuvbyMYwkdesnoSvEY5EB3IQYv42mHd0+HDmmZrwdWcjNyAirg11\r\nKe4X5KOpP75IuRriFf+tI+WNJabpd3jCffDG2sHFZhULc+E6oGVa75aUjO4Z\r\nbZD6MeOWcDaIhpWU1FwVHoYHtzI0IgAMwY9qbh3C62zVwYdWhBWy+IflGZGp\r\n//OrFVPJfzMZvFojGyosWwjNK2HK+3PA3gMRpRu7c2YnKoEyVUbFKeOST03o\r\nkqaPEN6lsijJeZCzfmBwLQXfDFgZ2ycUoPPwVbMwTRCWr9q/ygutTUjw/BWo\r\n39fsLST768omSGbBoBp1dLKNMyUozbFbw7wkZi6LMOLudn7cP72HA4Szzi5m\r\nCuxYkLxTi9O6dS370oEYns5CtPKuphZ8YjtokeqfECVWcXu4+Ejl0ItqBRC4\r\nleKkXHGfUYAsNGwTyN47WnBasDKuUHCw2l3uph9JSq+j+GrnoVtNNwJmyHuv\r\nKyLMZODepetfCG/+IJUbAsMUlDnwHWbXk0+AXkMjpdesgOyC0tbTzIXenrES\r\noYZT3BOyaSElC/h6f4y2Ehz6HRCcQH4dyrFVRZRyHp8wL80nqDyL8UaGmbpe\r\nCB9/ceKIk2s9phZUmR+OV3Wd5R1+qfDLIas=\r\n=MaIn\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC02H4qucDTJVsDPAbgeB/8O6qDdbh99qxUOuBa7zUyywIhAKsITECYLXlVVjmiSS+wEwLrsmgh3iTaXHvRs0uflgT6"
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_4.1.0_1646931450565_0.11737541426867004"
      },
      "_hasShrinkwrap": false
    },
    "4.2.0-next.1": {
      "name": "graphql-request",
      "version": "4.2.0-next.1",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.0.6",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "abort-controller": "^3.0.0",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Features](#features)\n- [Install](#install)\n- [Quickstart](#quickstart)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Community](#community)\n    - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n  - [Passing Headers in each request](#passing-headers-in-each-request)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n- [FAQ](#faq)\n    - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n    - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n    - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n#### GraphQL Code Generator's GraphQL-Request TypeScript Plugin\n\nA [GraphQL-Codegen plugin](https://graphql-code-generator.com/docs/plugins/typescript-graphql-request) that generates a `graphql-request` ready-to-use SDK, which is fully-typed.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value'\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN'\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request';\n\n(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/';\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `;\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `;\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint, { signal: abortController.signal })\n  client.request(query)\n\n  abortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint)\n  client.request({ document: query, signal: abortController.signal })\n\n  abortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n````\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n````\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@4.2.0-next.1",
      "dist": {
        "shasum": "e9842fdc5172d4ce7ded55a9b5ec9d739ecc4289",
        "integrity": "sha512-C3RGAzhSbLHs81X6TeOgkJq1yajx7m+7/hXKpSSdMqYV9kQVyLaUnfeo6cwz21/fqbYsoY3bGR0Ege8gYfBY9Q==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-4.2.0-next.1.tgz",
        "fileCount": 30,
        "unpackedSize": 130695,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiMyeyACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqxwxAAoXN5y877zVcWvdoVco+dItAnWeQ71J5+dfr6dFPsbDrWJUGD\r\nF86hW8rE/BXp4SwrohCFv4CK2fUDFkAvP80uVvsIS74weUX3lvi5U6JEGGcY\r\nts27DMdHpHOdjHk5CMX1kAoTOt+M6VirjLqL/3SGgUYNRDWUBQeuQCUzbOET\r\nj89GbJdvzFKJzMVkKcZdWrmVXbES/OOLhKDgOPuFFGQ72oxBdLrinFM1gDhh\r\nLnfxMz0zrBUiUSrIpu2BElveN92oEiCGEcj8emCIORQMu7yBHNjVE56G6wCX\r\nqcfWEFsgjOLs/VMKnypcaxxxYaOSgCfPcGZk4457tbfqF4wu8ce5w46frr4O\r\nf+ttwHgLsjYEw6dL0bgfscm7ED0sR28E8Rrmi4nYIdA6JL9SumWak9BhH5HR\r\nV20YJ3qtwkdmIttUq0vz7ElnNoBNVNexAN5JvBhBaA/082YVM3iv0oN3kpLx\r\ndl/O4SLMRWCbn/jjPpSVfdFst6tWtkUae0jLGY4ASIy4Wu/HXzWoxwdrGuhI\r\n5GLP4PWhCiRe2vNgZZSxcOOqg9tsCNuFtvaDyVC0AX/obW2AWB/DIMFZVhza\r\nQufC6BO4uVL3/txrPlrXhwkgvAnGdt3GkqxG1SGSN64wW2NcTr955ynm/IgA\r\nVcx+4JQNcp0f9TXTVHlfaV9PHUanKKUO4xM=\r\n=+2OW\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCWRc5g7wC1AcwtbrR/lFWy3Mx2JdEwHckBYJMdZm1afgIgCUfAFqcX4sTmsZytEjNLGVRIFq/g+/vNH/pzyJa4XKk="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_4.2.0-next.1_1647519666500_0.1432837733763852"
      },
      "_hasShrinkwrap": false
    },
    "4.2.0-next.2": {
      "name": "graphql-request",
      "version": "4.2.0-next.2",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "abort-controller": "^3.0.0",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Features](#features)\n- [Install](#install)\n- [Quickstart](#quickstart)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Community](#community)\n    - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n  - [Passing Headers in each request](#passing-headers-in-each-request)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n- [FAQ](#faq)\n    - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n    - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n    - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n#### GraphQL Code Generator's GraphQL-Request TypeScript Plugin\n\nA [GraphQL-Codegen plugin](https://graphql-code-generator.com/docs/plugins/typescript-graphql-request) that generates a `graphql-request` ready-to-use SDK, which is fully-typed.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value'\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN'\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request';\n\n(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/';\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `;\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `;\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint, { signal: abortController.signal })\n  client.request(query)\n\n  abortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint)\n  client.request({ document: query, signal: abortController.signal })\n\n  abortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n````\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n````\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@4.2.0-next.2",
      "dist": {
        "shasum": "78549f243425ace9f979307a3df181ec6bd0bf1e",
        "integrity": "sha512-AJYaCv5lZwYgnJQEaeBR75VWq3H1EddDQ0D9BXaBj1lk1wEyiVS+QhVWPyuXt6Za/UHwM+RKFI2bmGTfxS3lZg==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-4.2.0-next.2.tgz",
        "fileCount": 30,
        "unpackedSize": 130695,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiOm3cACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq2ARAAn9L7yA05pfEDwGB/BnkFbR9q9qku20/2hZUnNCIVkK2YkfXF\r\nUzpW7dIZ+6uOB6v8Qutxuh6sUQjTGWFleiIfaSj1hv+72+j0+cFc3W3OpU4v\r\n/9p3qnbhgbhzLvTwm/tQjBKTXFvjNQfrnG+kqqzSMzuGzsaJN+WOTCSPqDbB\r\nPMYI0KWFwyYkz/xxLkAeB750VuWHGAUmjOkExNNg0sadmePtfqc1alfESbW5\r\nh+gRN+rTl09rypoE0tQoQ0aI7nArN56bpW8PQWZwx/NKjNywtoeIOfRkmOB2\r\njfccWKD8UEeHNMyAMkzpr5jlZE0LUjds4NRzE+5O0IzQKcsqBkVsLb8nF3M9\r\nCkeGBhYlRdtRZU5woh1fKbZIDQ3HxVLl+KO1MbdQybakIawOiN6OOh+na9Oa\r\nnR6XX2Dfz/2QyxY1Pyej2QGaNCu8CUaPOG7mRhSOiMoIu+0eNxL7OrWprt3b\r\n1DSq4I0k9y30jRB5odVgZd7HvuD8zNHlFZ8p8sQIILyMtfJMMC2mCIiyY2QE\r\nk8RLZu2y2kZ3W49e3dkhz9LyQ6yi/yEizTkusqfJgVLtN8Zf+J3G737NaQus\r\nDuaiROSwnchmka748trGRkpQSBWwF+3irEw4l2yb68a4JliaX/3RSW7nm0je\r\naQVVNX3kW0zEPZv+sCI9mUelus7rI9t6Yng=\r\n=ZCFF\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBcFlf3EOlXYl0KGyAhrJ4JbOYY7M32WHI/9nqvbr4uMAiEAjTRBJZVZDE034xLbfec3vjJ8UeCfo5NUnRjGRFzEyB4="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_4.2.0-next.2_1647996380648_0.6639037992725241"
      },
      "_hasShrinkwrap": false
    },
    "4.2.0": {
      "name": "graphql-request",
      "version": "4.2.0",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "abort-controller": "^3.0.0",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@4.2.0",
      "dist": {
        "shasum": "063377bc2dd29cc46aed3fddcc65fe97b805ba81",
        "integrity": "sha512-uFeMyhhl8ss4LFgjlfPeAn2pqYw+CJto+cjj71uaBYIMMK2jPIqgHm5KEFxUk0YDD41A8Bq31a2b4G2WJBlp2Q==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-4.2.0.tgz",
        "fileCount": 30,
        "unpackedSize": 130688,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiOxSYACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo6wg/+LNGpINjG331MxF+jOly8JVfWpjwAaFhfpXM30b2ZNjwLrFDp\r\nnvHG+EO1aKcIpmhnnw9c11coL23qTceaRVy1/HoUXXmJUzfFZJ+cDLIUQaL0\r\nFP4uf+Zx/Zp1LhRRF78b9R6SuXbLfQUV/3NL/c91Yom7mpED1BpkCcC05u95\r\nPIKEBEBipy6jLdTyZa9DeAhRWtqXLCCyPJoWBiKO7C8lrLwgRL+SSIUCFEXJ\r\nOLUbJhlvY12aBtwwlth0PSR03TLOX0DYKih3uUF4YUUxPN4o4QPZVbjl+KDq\r\nZi4O8CBi23DvawDL7CRczTjkfUNGvwOZ+UHZtFV4AA7W0HSQh/zUythUfhWu\r\nJtITP9zv/DEjmTIbLZoqdl7o3PVII9YKzpUOKRReuGU5n7FDJCS7VrgkDo45\r\nNMtysOOBLw62ABtLDtwwKepw2LgeImg59nLLtnbgwjvXLZSAKnWXhwsAbwJe\r\ny6Rw1bHr6LHNY+cLcxRiCcHmnrw/KfUhJhyH2o1sgoxyjACJNvlph46cyen1\r\nR4SG5JNddpQAQPE6NHjpcm96SV2fkBCW1N4n2o6y6RCXLDkAChev+CelGPFf\r\nKBGxEFfhXQLDhljxeRleVygoFRr1HhmFBoffBIknbCEjoQPYxQKhQW6jSQDX\r\nSnzBaLPAM0++Pjiu1LqTC7YeXBViTv0c+w0=\r\n=iJ2K\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIBLgvRm8E58Dg5goxeFz04PJora8dANIa1rba/pGYy2GAiBr09+niTKoL3dJ7WsSgH0LBUNaVGOVYE+OLgsxFV9bnQ=="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_4.2.0_1648039064854_0.9739772833297207"
      },
      "_hasShrinkwrap": false
    },
    "4.3.0-next.1": {
      "name": "graphql-request",
      "version": "4.3.0-next.1",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Features](#features)\n- [Install](#install)\n- [Quickstart](#quickstart)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Community](#community)\n    - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n  - [Passing Headers in each request](#passing-headers-in-each-request)\n  - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n- [FAQ](#faq)\n    - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n    - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n    - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n#### GraphQL Code Generator's GraphQL-Request TypeScript Plugin\n\nA [GraphQL-Codegen plugin](https://graphql-code-generator.com/docs/plugins/typescript-graphql-request) that generates a `graphql-request` ready-to-use SDK, which is fully-typed.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value'\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN'\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint,\n  { \n    headers: () => ({ 'X-Sent-At-Time': Date.now() })\n  }\n)\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request';\n\n(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/';\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `;\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `;\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint, { signal: abortController.signal })\n  client.request(query)\n\n  abortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint)\n  client.request({ document: query, signal: abortController.signal })\n\n  abortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n````\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n````\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@4.3.0-next.1",
      "dist": {
        "shasum": "9e3682e00351df4c726f97992f8fad98c7f14547",
        "integrity": "sha512-KDXWrIge+8RsA6fl2zOsthXb4u9q7t25eq3Ftu78lxVdJovQQN40h3Pi7vxweHLYB3z6vupl8wvtvfsJI9aEHw==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-4.3.0-next.1.tgz",
        "fileCount": 34,
        "unpackedSize": 162881,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDOzW2kNIqFv3bpMG+Krh5ypmC8by7AKR3NDIYNRX7ijQIgeF0dsCE4snFA2ZQPPb94Qdb5UprTWsKjdnxmx7rsl90="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiZtsmACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoE3A/9H4OfUfHKsgPNp0bA75OsecOI9FMwE94RrhjdiIFH6J31UTVT\r\npAdtRgqI3dILvN0c0TUy89GI7Wv/e7noI880P3YglQZq11Cku0zsLh9j6Rap\r\n9pa1I9hFzn+kO9Qgt5hCliH0YL/23khx4aJsaKt8G5Lskbp8jYQKzQfmXyCW\r\nBpkyQmllKeegE1lm51FtPT2cEAO2eUBrKnf74OxvZCpTAiJijBKVgZtbfT8Q\r\n6PzGH6ggDslw5AfDrnSNlpfcE6t5IKKYtPoRFAwc5HtJv0SnMWXvl1rfk7hg\r\nI/z4qvAKyTVGvdcjmfLKIraSaPve6eW42LVf2elF0J7czLRFERu2q2sWMqX8\r\nCW/7pn1DjsLo1xkhyVuFkIN+oDbSnJv9ipmYG0IotQ17R69AW9jhu1JEdVSO\r\n8CGgFkGYsn0nmwAswCu9JlHTmXrf41oevkjETBaEW/67rRe2rVIfrcWap7fV\r\nBlH78BysFq1ZJ2nX5hg4WT0f+X/lmGixL2neYCwac5PI4oTw00MaNnAXQ7jh\r\nFDijJ2C2o3hNBDQ5sW0xuynEl5ELfILT4WV3zfsnBM2Pf0eR0PrGsrahOSHT\r\nv/DSK3bnRgpJIqeq1v0Lq976AZLwteWCWda/b62b6O9ItmKJ3nakHpwBLfFy\r\nj6vFp9CZ6qH16B1YQ0i9mchdIhY4ctb0eVQ=\r\n=nhpE\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_4.3.0-next.1_1650907942676_0.8111983212274954"
      },
      "_hasShrinkwrap": false
    },
    "4.3.0-next.2": {
      "name": "graphql-request",
      "version": "4.3.0-next.2",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Features](#features)\n- [Install](#install)\n- [Quickstart](#quickstart)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Community](#community)\n    - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n  - [Passing Headers in each request](#passing-headers-in-each-request)\n  - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n- [FAQ](#faq)\n    - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n    - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n    - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n#### GraphQL Code Generator's GraphQL-Request TypeScript Plugin\n\nA [GraphQL-Codegen plugin](https://graphql-code-generator.com/docs/plugins/typescript-graphql-request) that generates a `graphql-request` ready-to-use SDK, which is fully-typed.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value'\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN'\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint,\n  { \n    headers: () => ({ 'X-Sent-At-Time': Date.now() })\n  }\n)\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request';\n\n(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/';\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `;\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `;\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint, { signal: abortController.signal })\n  client.request(query)\n\n  abortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint)\n  client.request({ document: query, signal: abortController.signal })\n\n  abortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n````\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n````\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received. \nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, {errorPolicy: \"all\"});\n```\n\n#### None (default)\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\nReturn both the errors and data.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@4.3.0-next.2",
      "dist": {
        "shasum": "356b70699255d95089f09a15efe7de98a3c4c56d",
        "integrity": "sha512-FTAcvD2BtwnvhITXgwRcLfotPyRk1l9A29pyHeggxWP/QjmfM5QeUDNeGlu1mlLaoTfCSyTgG7ZoG08riZGqUQ==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-4.3.0-next.2.tgz",
        "fileCount": 34,
        "unpackedSize": 165170,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDyE5xyZ8ByEfZjacGhPbELDRxOIcz6Vssb+QUN5OjQnQIgbSGnp0+sCNHSsJ7miw9/onGfE4Df3Dosh7EuKn7fe5I="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJijskaACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo8vQ/+NXCHafDflJWWWxy73bU5J8s5ZbrrnFUT40T7xpxLGrp1QTxQ\r\nmJf5s+Iv12zvMIvaySjlx4miaiZdt8CQgpHAe/Z/RX44fbgeOdN82wM5mwZn\r\nTce2bWvoNsytAFh7OrvOecUiqqXr5k7qMfL+6t7hLr/pj7yEPni5BbpgB4nn\r\nwGDrP2P7HBtaVlVlcWHkYZFA0M4mcCKuGXFBKu6BoRo7+Z3WDb6umifrTiW8\r\nn54bi8q7kcMuoQ+ziqcd1HjmgOyu8DoIN/v4UpzILgk0IjMyvu+ScPHN0E+L\r\n/32VckMKhj/RTT6PQ9oAIUgnIQMe/As3/B1qcz5Q3vz9JMG4+MUN0/P/Ubxr\r\nvirFXXhXEk2f52dP35boMiyJUVVkC3SvxRIM1qevNR4MFmIQrbNqVxHp32Y1\r\nVXx7qW4npiWVMteF3WSL2r4pkcxKxmiZposRLgCjXKi7GIGZx9EQ3m0AAfxw\r\nzkCEDMm0t9mRsWtzHULIhfvorVPpkQfIJxHIvBK/M/0fbMcmAFZpkqoz54HM\r\nbWT3y5S48fCRsLp1G8Zkm5gMpNU6GaB6UhsA1Jo11KGw2BLO/ZaTkF/jqhbO\r\nDPmi4mfwDroa6YIPJqUMY3pkBB1ADdlao5e0RLh/pSCNxYob5AkbsKJIQczY\r\nAO75bBHQ6xl24Ny34Uw2ZVmRorra+MpUeK8=\r\n=8gz8\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_4.3.0-next.2_1653524762382_0.404716744820641"
      },
      "_hasShrinkwrap": false
    },
    "4.3.0": {
      "name": "graphql-request",
      "version": "4.3.0",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@4.3.0",
      "dist": {
        "shasum": "b934e08fcae764aa2cdc697d3c821f046cb5dbf2",
        "integrity": "sha512-2v6hQViJvSsifK606AliqiNiijb1uwWp6Re7o0RTyH+uRTv/u7Uqm2g4Fjq/LgZIzARB38RZEvVBFOQOVdlBow==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-4.3.0.tgz",
        "fileCount": 34,
        "unpackedSize": 165163,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHrtfzyVUniW0aEDdav52aeu5/QeOR3ovYLRv+EuV1AKAiAM/N/zlhT3rV1Q9e8WxOl/PpScRt8QHDiqoAhxPjC7hw=="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJilQS6ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmonqg/+I86j3+gcBH+Aqo+btJOePf81+v4lcz7L+SvU8leFQ87+3a7R\r\n2BXSG2Kj3zuNreleyza5fx5ifWxwGPXayED/EQ7/FfPd/Cnp2S8C1SDQYe/+\r\nb+dDxW7AcgmStNVsWDFIO4oqyFCMgz5c0kOXmOvdRUFui0pRxdZPXGonWTHj\r\nq4kRmAP8bKW458eboFWa4DrgRRW3KRR8A1Rt8uDzD4yYETWfkC64UIsgs37T\r\nd9Y67EDAeuRaER3iezn0TcP0viYgOUvgyLQzMhp/+GOZF56oe8lQD/F+gR/V\r\ngTGJ4ff3Lx5J3+Hg/Q+yBNPTb5tovK+2yQakfRX3nWxeU2rKA9pIRySYycNx\r\nXiDoS6M06uNtbV+HGZvzHGykcqC3ImS7cVahG4wGglgIE4lm8CAfTb3hsGBQ\r\ngvnzcWKSXBlUuiyBClad9Ll9o3bWmxys3rwU0O0iPtOUmDkFtDOsHiGmWe2S\r\n3H/9ZWu9yUzrlvp+FAve24JD4KQZDg61RG2PIwbFkyMRlzvAG1gmn8As/hLZ\r\nk82VL2WOjlPtREXr9Wrny0hBlbmVB/kakIC99BNJ7hAO2nZ/UBi3B+ApETbt\r\n0xrk4U9zdu8R9tbTyoAxA/hx0LdqlIr+76CCl8F90MT9KuMpGlUXag4/Guqt\r\nYwH/kBw+Qxkzbg0Te49dbqinqc0MV5MXE9U=\r\n=P8cf\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_4.3.0_1653933242007_0.31427384112048706"
      },
      "_hasShrinkwrap": false
    },
    "4.4.0-next.1": {
      "name": "graphql-request",
      "version": "4.4.0-next.1",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Features](#features)\n- [Install](#install)\n- [Quickstart](#quickstart)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Community](#community)\n    - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n  - [Passing Headers in each request](#passing-headers-in-each-request)\n  - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n  - [Middleware](#middleware)\n- [FAQ](#faq)\n    - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n    - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n    - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n#### GraphQL Code Generator's GraphQL-Request TypeScript Plugin\n\nA [GraphQL-Codegen plugin](https://graphql-code-generator.com/docs/plugins/typescript-graphql-request) that generates a `graphql-request` ready-to-use SDK, which is fully-typed.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value'\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN'\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint,\n  { \n    headers: () => ({ 'X-Sent-At-Time': Date.now() })\n  }\n)\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request';\n\n(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/';\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `;\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `;\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint, { signal: abortController.signal })\n  client.request(query)\n\n  abortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint)\n  client.request({ document: query, signal: abortController.signal })\n\n  abortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n````\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n````\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken();\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n        `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received. \nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, {errorPolicy: \"all\"});\n```\n\n#### None (default)\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\nReturn both the errors and data, only works with `rawRequest`.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@4.4.0-next.1",
      "dist": {
        "shasum": "ec1a7d616d79c11e7e17d0af9245e0abc7c7ec2f",
        "integrity": "sha512-q6RCcpduuFASc4nSrNaUUV7X5X+KLN+HLZxDxTCvyXqP3XGptaXnKJKUc/iQqoG3DPwa1cf5abyiYuBYK0ZQTQ==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-4.4.0-next.1.tgz",
        "fileCount": 34,
        "unpackedSize": 167303,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCkTeT7Rfdn89LJlwnjfWH092QmovSqlqJO8g4McAk16AIgRqTwoedxgxjBVWU83NsvsjjeIz60bD8Unw0s9cqUdac="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJitdkaACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrCrg//fAO8n+npAPLddFXOt2H4J8xH+yQ3HCCjfckuq4h6I5gz7gxC\r\nGi5v5/xqqmL6nOSGwAtek1r0ceQ1lntt6R+qrdRbj+MmIX6/R0h4/1BIUfWR\r\nGxpsosdEOCIWtA8FUr+MYbvVRht0yC1V5xgLlxHSGM/6CGtZF3mzKkiwQK5T\r\nCK3wTyR7NtTnYaB0Tso7Z+y3MwPqzXqnjMY26/0Rktv+67FT44HZCPV3lCG8\r\nZferNEEHopzFnJ08SOC8NZEjIS4iJNp64w6D2jtwJEaHCesWtajRU2KrdRi6\r\nDBH6ofR7fWGIQ8u/R7QDJEYveg3Z33jEeaMo1OnirsOTUiGiiGuw+MfrUIim\r\n8/udYx6+LUPRl6YKr7ugdnwkj9siASCcmlpHCso405j9ZZRCxW7m7ng6raHY\r\nphi07h6SgzxIKiwK3X0FFah0ztaSPCogJkuucAmtrvWit0U9FFmU2mzmRQ46\r\nDm8Ai7d3KFYu3n6Noc0RYqbtCPJnTYuYMhBrhhw/GffOnG9wbt1N20gX44AO\r\nm1G3fC1iG43qDGSEvgB8izh7xBv1BY1eQ3uMUtwp/fRrfhweigS/Sqc/EQ6r\r\nLHMUJtT4rqwvcHDTWEGYOaPJUB1N5KUkavok63DT42p3plMRzWne7Wv5ao9U\r\nCUo01PHnPJbpbfuAFwLxP9IF3+dfhgc/yio=\r\n=UHmb\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_4.4.0-next.1_1656084762378_0.23139358286486944"
      },
      "_hasShrinkwrap": false
    },
    "4.4.0-next.2": {
      "name": "graphql-request",
      "version": "4.4.0-next.2",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Features](#features)\n- [Install](#install)\n- [Quickstart](#quickstart)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Community](#community)\n    - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n  - [Passing Headers in each request](#passing-headers-in-each-request)\n  - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n  - [Middleware](#middleware)\n- [FAQ](#faq)\n    - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n    - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n    - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n#### GraphQL Code Generator's GraphQL-Request TypeScript Plugin\n\nA [GraphQL-Codegen plugin](https://graphql-code-generator.com/docs/plugins/typescript-graphql-request) that generates a `graphql-request` ready-to-use SDK, which is fully-typed.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value'\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN'\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint,\n  { \n    headers: () => ({ 'X-Sent-At-Time': Date.now() })\n  }\n)\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request';\n\n(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/';\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `;\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `;\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint, { signal: abortController.signal })\n  client.request(query)\n\n  abortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\n  const abortController = new AbortController()\n\n  const client = new GraphQLClient(endpoint)\n  client.request({ document: query, signal: abortController.signal })\n\n  abortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n````\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n````\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken();\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n        `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received. \nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, {errorPolicy: \"all\"});\n```\n\n#### None (default)\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\nReturn both the errors and data, only works with `rawRequest`.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@4.4.0-next.2",
      "dist": {
        "shasum": "9cf481a59205d8b33940a2084d3e5a401dd6bbde",
        "integrity": "sha512-/BIVxlVVyExk9i6B28BJOfyn+iCuYVkB0COSai044krWX30UuOvQvJg/MpiEWNSb9SaVXOg4rlUePpoVHQX5Yw==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-4.4.0-next.2.tgz",
        "fileCount": 34,
        "unpackedSize": 167180,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDoemjUrkjd2cgFrrwC7MThqaTptiyYwAufx/ieurWdUQIgNRruTRfUzeVD+X+WEP9rBhLRvw0tPLVgDvAWTChfBDg="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJixE5mACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr6ag//S5OAvof9ktwgZbv8sgytjT6qum6D1iF+66R0F1yy/qEph8C0\r\nZeLjhGMbn42Ejo0nDsm9rLN0hp5J5f/KKzmMBbjsfxChTFb00KUypLW/tlLp\r\nd5i/4a0RNg584gz5Q9n9Lxtaizjx+n0BKhhS05/kYfs8Kby6JkrJ3q2O/AOK\r\nN05IUG5z2hFVxffzr34CvUyV9Z1pJm6ietRVFex1pnGRWQUEbIKgJAgSoDgl\r\n3UhkCvyWZZem9pCBeVKjl4/qRqj/DbElisYdZjmQc+mHdMmwLdnJSDz6lQct\r\n2Sf8/oR0dsLmxwBYPv2xjfLQMGAo1HfTpXKUqV2V1K0n+hPZ5m3igTajc/6X\r\nh0tiPNDE2BUoTroSGGaaV4sP7hZ/qAAt6eVk8KR6p662thSRL3+6qpC2J+vf\r\nzOIzShG36q+vSMnMQwhOn0HPF27rwJV51gRwIhYVl27YA5b8ni/I5cIbvD1F\r\neGMViMB5t8ahk3cZHY6UPSc0x0f5YBrY2uOUHK3WrsKCUKn5D8Ion1Txzikx\r\neot533C1onVhr2EMugKdTX3VZlIMEhrdlRx9rFQi+4mxEWZS+lF3LYdo16XZ\r\nEg4vV8OKdH2EAjN5WEemB0xS2EpGwL1BB/UUFXk39WN2GawbGDg1Xkm2krId\r\nVEdfjv7YuWO3d2Ycb14n9Yx4RvJOUH05NBc=\r\n=SZzy\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_4.4.0-next.2_1657032294461_0.02288865415221064"
      },
      "_hasShrinkwrap": false
    },
    "4.4.0-next.3": {
      "name": "graphql-request",
      "version": "4.4.0-next.3",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Features](#features)\n- [Install](#install)\n- [Quickstart](#quickstart)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Community](#community)\n  - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n  - [Passing Headers in each request](#passing-headers-in-each-request)\n  - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [Making a GET request](#making-a-get-request)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n  - [Middleware](#middleware)\n- [FAQ](#faq)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n#### GraphQL Code Generator's GraphQL-Request TypeScript Plugin\n\nA [GraphQL-Codegen plugin](https://graphql-code-generator.com/docs/plugins/typescript-graphql-request) that generates a `graphql-request` ready-to-use SDK, which is fully-typed.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request'\n\n;(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/'\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@4.4.0-next.3",
      "dist": {
        "shasum": "b50cff21816bcb880f29a9049fec9162641317c2",
        "integrity": "sha512-Rg/nyAedDm5qlVyvLuBrkh0uV6iTQAUwwqmOeb2Z6jLHcUqniMD3NqxLi1n262sL3R3jhCMpxwXkHJ5lK/JhMQ==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-4.4.0-next.3.tgz",
        "fileCount": 34,
        "unpackedSize": 171236,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCS1O4Va2D7/LS/X6VkYU4potIDd9D1LOG/0IDJQx+vkgIgOzsW2nefZKYg9X4+o6hBwnKHtIu9ULUiNDqssCALzIA="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi6UZpACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoEQg//THDS1iEdKIMYlOsHNYdh78KqsCC8REnMN5mGsVBC4hItSwSz\r\nINM8RiG9Uk55G1aS6junraFWnPHWz7WzeOIXsTDu1ooBYHxyG6lWkbeGuiey\r\nFyfC+nwg/+SR5IZFsFDm/N05LFyTc/U0a/RU/GAhA2v+Gggayyt0Yo9sr+5u\r\nRSiAlb0l8ms4jSeiYzQpQgHEMyE748JJ8yorweeV8Wr5yEeELfUwEGjgboNU\r\nSeKQ71dCvyUKeT0GpvOiJf2Wzdy+5J+v6iPEk630TUCc8SzvcQ0d3UI5iKIb\r\n5Ey/gpCZPcWGIgaNjr4IObnQH23iw9Qo7fwFaeD9/m9S4sJxpl6bBgAGFg9B\r\nMY2Zx78bTbHjL57sdp0EONvfgkLlTMcpOUqvCSFuixni1iGSJQW3CYaKjyhZ\r\nyX6iBPqClYpdisn1yDfEXc17aXGzVM4+fbTSuwYagk1ZMOnVpkGGUQxM4lbx\r\n8RKfV5omqilC0UEwTFDQSi3kJEzDwsmeGboScyuD0sM4c4vkyxxPvpMOhgCK\r\nLRcOpMC8Uoa6EsB1lvm2JmJUBqdahTBmgJrxjQ4i3CRvpN4vXAhfbwVp2J6Y\r\ngnf5i206/X1oLYS/QRkwLcIiw6nTxZiFUQGQPLEXruFmmeWafH0ORegEcMZP\r\nQvaS7rTwiN9Sp1+Xr3oDMClSbMVeIq6Ge6E=\r\n=ZmVd\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_4.4.0-next.3_1659455081551_0.13810344823020682"
      },
      "_hasShrinkwrap": false
    },
    "4.4.0-next.4": {
      "name": "graphql-request",
      "version": "4.4.0-next.4",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Features](#features)\n- [Install](#install)\n- [Quickstart](#quickstart)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Community](#community)\n  - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n  - [Passing Headers in each request](#passing-headers-in-each-request)\n  - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [Making a GET request](#making-a-get-request)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n  - [Middleware](#middleware)\n- [FAQ](#faq)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    Movie(title: \"Inception\") {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n#### GraphQL Code Generator's GraphQL-Request TypeScript Plugin\n\nA [GraphQL-Codegen plugin](https://graphql-code-generator.com/docs/plugins/typescript-graphql-request) that generates a `graphql-request` ready-to-use SDK, which is fully-typed.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request'\n\n;(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/'\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@4.4.0-next.4",
      "dist": {
        "shasum": "32b5b451870798382d08b38880538846aa9d4333",
        "integrity": "sha512-K/7bsPK2S3aoMR61aWw6cSHEP1BVzViJlYDDE9bi08TJWrAv2x9ec9PgkzrMe1uBDfc0z6nVdB++a2Hzf7t7zA==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-4.4.0-next.4.tgz",
        "fileCount": 34,
        "unpackedSize": 171352,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCN+MlBQpsIUUh4GozKn7zitCB4T+U11RGCIxrXDKUroAIhAKXZt0GiK3g3+uZUPIuAo+eQQ8j+SRtFI9cdKxopqKKe"
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi6XigACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoMFQ/+NQsOcja5uws19sxfPKByXaKIB/1hGoXenbUV9k4Jb0DfQYI5\r\ntb3mdoflFLE7IPNbZdcNsUtn3+o/Xpw41Uo7iezyPOzPHHwALZHiV711YVmC\r\nxWdQMAu0NIW6am0zixl+xPvrW/iNYngTHAzVgskMlUyialmAUpvoBZRvdNwa\r\nfZSbQjdR4kWZp+PbkEgYj+5gGwZuf3bdrOf8n878gFM8GThSC+aD8MKGBklI\r\nODBZnA0CA5Y5P9hYHT1yhZSoHPYyBelVQKv/QumIILauaCaUY9cPrKWaNLzk\r\n+AEJMkYFiJ8p8z/oB+8HyabWvvq29l3Pph6zTUw12upPwV38WQ/dIbq10iBZ\r\n42pQ0Y6COyvMyFVFL/YlOXRlvdYOuGW2Gg+Gu7Qa3el1lLan5ZRsTSJtw2JW\r\ncqm5gvS1i8/V9QqsokPe9g5eZ+iS8YuPl+wMu+n2y4svr8QZ94w30f5MLB4H\r\ngPMAaMygy1soCkdwS2cnFYp/dqzZxpBBwmycZ43pef0YJcQd2S+z37tz6wpe\r\nHCdBAcsX/WB4rgGQIIV9whZIW8qTwinpmjNhSgf0+XbdWPp8A+h+7Ig8GAG1\r\nQhDus/tP9xCcVOfJs5FNUDjZxhZQOhCt6CimhE1RxZCZAPiHgaUk7IYFiovz\r\nFZjyRnf8Zblorkzf3itLw/d0Vh+bB/ehe5M=\r\n=8k/2\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_4.4.0-next.4_1659467936788_0.6901433956054093"
      },
      "_hasShrinkwrap": false
    },
    "5.0.0-next.5": {
      "name": "graphql-request",
      "version": "5.0.0-next.5",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [graphql-request](#graphql-request)\n  - [Features](#features)\n  - [Install](#install)\n  - [Quickstart](#quickstart)\n  - [Usage](#usage)\n  - [Node Version Support](#node-version-support)\n  - [Community](#community)\n      - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n  - [Examples](#examples)\n    - [Authentication via HTTP header](#authentication-via-http-header)\n      - [Incrementally setting headers](#incrementally-setting-headers)\n      - [Set endpoint](#set-endpoint)\n      - [passing-headers-in-each-request](#passing-headers-in-each-request)\n      - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n    - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n    - [Using GraphQL Document variables](#using-graphql-document-variables)\n    - [Making a GET request](#making-a-get-request)\n    - [GraphQL Mutations](#graphql-mutations)\n    - [Error handling](#error-handling)\n    - [Using `require` instead of `import`](#using-require-instead-of-import)\n    - [Cookie support for `node`](#cookie-support-for-node)\n    - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n    - [Receiving a raw response](#receiving-a-raw-response)\n    - [File Upload](#file-upload)\n      - [Browser](#browser)\n      - [Node](#node)\n    - [Batching](#batching)\n    - [Cancellation](#cancellation)\n    - [Middleware](#middleware)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [FAQ](#faq)\n      - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n      - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n      - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n#### GraphQL Code Generator's GraphQL-Request TypeScript Plugin\n\nA [GraphQL-Codegen plugin](https://graphql-code-generator.com/docs/plugins/typescript-graphql-request) that generates a `graphql-request` ready-to-use SDK, which is fully-typed.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request'\n\n;(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/'\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@5.0.0-next.5",
      "dist": {
        "shasum": "2e4c4a0625faa1398cc6e7079b5bcd9fc0aca333",
        "integrity": "sha512-4u6R6kyxi/w1z8+AtS67Wx3vWMPL0y3Y8FU76w4sM/vNVgLkWBPYTFwi9cVSSr00aHerV1XsfdOC8+VG1I+45Q==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-5.0.0-next.5.tgz",
        "fileCount": 34,
        "unpackedSize": 173066,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCGjuyeLfXJjMNfcSGBT0YAVbaaQOpxOosVJBMLYmC3QQIgC83djSNTRXCCgBicLRYYwtwbtaSz848BFVbqh6P9kfc="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi8hwWACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoOQw//UvYIHzqEKB+YFyB8D+ril1Fg0SJgoe9XYQpSxSGeTWIvjUQm\r\nPQqPsCpGa4FmpVoGW14YEZSmV59sj2hDrkoyg6CBTCWF17mN21oT7gAebYT1\r\nn5HHcQlH7futOQytjRPeplgqaoxZZ14i852jVwikSc1pNMifH274rBJIY5SD\r\ngqO/rPWzbm+rUVOl23hXe66Yk9yy61QIv3E/4oEg0i+P/4awO+Z3uvtDBNTw\r\nJwb4QfXKHGt+X3/F3Hj47R1xXa5Ml0W6lxQZSH68+4pM81gE8nH7c4JG/JlK\r\nDOCCup7dLbP6O8fc/Uxp4tw+/pMvMiCmMNZJIzRktEQko0nIPnhjzse5Q9M3\r\nAE0rqZgpRNpDDqB46ou3IMZFoU6q5yofCSSxYM2lB+njVNc9ibJZzuYg7vc3\r\ncv6eSvB/KcCi/dADwZJW7lEFDZ0ljx76uXXz2J+xYjaMw8qWjVkmG42BrdZV\r\nlRaajKGpLgF1HeOqI0Kh6gFa6sYsrkpULktyGhRv4apxo6iAQAuDmxYETnFI\r\nT/XiIL3bgBDOhrFKLtsy9xTAkPLgqcQM2YutqYFvLWod/+L740xDQeYFztku\r\nE6JyGH3bAuQitlPaTO+pCHfQV/8qqXW0rPyThzuM/J2vrDhD9ZJA5obObv+I\r\nhiYcDXimodXfv+Bo+zpBOLgaD/cqqM7XdGs=\r\n=Jn5s\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_5.0.0-next.5_1660034070235_0.966815874576685"
      },
      "_hasShrinkwrap": false
    },
    "5.0.0-next.6": {
      "name": "graphql-request",
      "version": "5.0.0-next.6",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [graphql-request](#graphql-request)\n  - [Features](#features)\n  - [Install](#install)\n  - [Quickstart](#quickstart)\n  - [Usage](#usage)\n  - [Node Version Support](#node-version-support)\n  - [Community](#community)\n      - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n  - [Examples](#examples)\n    - [Authentication via HTTP header](#authentication-via-http-header)\n      - [Incrementally setting headers](#incrementally-setting-headers)\n      - [Set endpoint](#set-endpoint)\n      - [passing-headers-in-each-request](#passing-headers-in-each-request)\n      - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n    - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n    - [Using GraphQL Document variables](#using-graphql-document-variables)\n    - [Making a GET request](#making-a-get-request)\n    - [GraphQL Mutations](#graphql-mutations)\n    - [Error handling](#error-handling)\n    - [Using `require` instead of `import`](#using-require-instead-of-import)\n    - [Cookie support for `node`](#cookie-support-for-node)\n    - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n    - [Receiving a raw response](#receiving-a-raw-response)\n    - [File Upload](#file-upload)\n      - [Browser](#browser)\n      - [Node](#node)\n    - [Batching](#batching)\n    - [Cancellation](#cancellation)\n    - [Middleware](#middleware)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [FAQ](#faq)\n      - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n      - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n      - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n#### GraphQL Code Generator's GraphQL-Request TypeScript Plugin\n\nA [GraphQL-Codegen plugin](https://graphql-code-generator.com/docs/plugins/typescript-graphql-request) that generates a `graphql-request` ready-to-use SDK, which is fully-typed.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request'\n\n;(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/'\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@5.0.0-next.6",
      "dist": {
        "shasum": "5650a4133b4a41337182d54cfbebad8695b8d393",
        "integrity": "sha512-yZFLCSROX796FcbD7Pn3okxKaFxR5sPFHUdFuIw4YdQlCCP/8QrS25gGo6y9N0UjmOMfBXuDi5fi1Ho7WuBfsQ==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-5.0.0-next.6.tgz",
        "fileCount": 34,
        "unpackedSize": 173599,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDD0QNkbdpXKDv0T7TznsOALbhmkPJwlEww/Vo3MD3NRgIgL05dRy43bhoeZqfxheaqmZsn5Qyyp2dS1PyG+pWvywg="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjChxhACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq92xAAhQ6WaVD8ZtFSeFHiz/wdzJEVyPIg9YqlA+a7Vu3+yBWmv36N\r\nF3bglx6v0ZNedDiz1JKwOwKbyvArp2hU4TO8ERDfCxk4bYIZun4NzT1Q5HqY\r\ngeTft/mOQmL27BKJU70vfTVj8Sw/0sIuOno5US4Mh/SVDcdJSK8Ztb7Y9EKa\r\n2lNu59potuB0zuQdH8iznCyhiSL8mQf9Qorfs9f9FpPgLZa9FIPvoCCRD6TA\r\nYUjfRwIr9Zsuu0Ash4BZHDqfRs8YQ2E8D+I6Rsb3Lf2/hu1clDgGby8+U8Iw\r\nYwcuSX2e7AZWemYrCjSGYm+85+NwQuX18GGpZI+x/ZLGUBJjmBhHPd5adzAL\r\nxyBbgjPeJMw6XZrZubD8rH39rof19pL2bn95FtI3TM2E1d7Z92AFtDzdrDFa\r\nJiknZzqzMxuLjKxXNj8jWoAOr2sB9qXwva7KxCRcggveICpoRX/d/Ec/VoaF\r\neaG7rWRzjNvptrSyK0UYeOAbACLN33PddR0zvK+b86w17yYS1e03/mXdyTqZ\r\nP6muFcgMbQKmLa12iCiwqkvKSpOoea3KOxTBoXpT6ME0WyJqUeFdHF3KYG14\r\n41f/aiCtKWBvAbiBj92f+g2GVagAgX1OdBkdSihr64FQdnRa6T5Q1j3SgJ06\r\np0QgezFo5lPp+UvacVG+cPYVDwQwrN2UbeA=\r\n=BsXJ\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_5.0.0-next.6_1661607009732_0.06688554113310774"
      },
      "_hasShrinkwrap": false
    },
    "5.0.0": {
      "name": "graphql-request",
      "version": "5.0.0",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@5.0.0",
      "dist": {
        "shasum": "7504a807d0e11be11a3c448e900f0cc316aa18ef",
        "integrity": "sha512-SpVEnIo2J5k2+Zf76cUkdvIRaq5FMZvGQYnA4lUWYbc99m+fHh4CZYRRO/Ff4tCLQ613fzCm3SiDT64ubW5Gyw==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-5.0.0.tgz",
        "fileCount": 34,
        "unpackedSize": 173592,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDU7rWSmjZsQLzihDG5Itr5coGjSHjr9sqnZEPrZn1kawIgOKj4BEXuY+rDdYwSYt18Zfn8qL8B8aCjBmoCazDa+cA="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjCh06ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqKsA//ccaVXLVS9lkQMlHwlmPdNyi80D8oBXNVZ2T030H4KOX9+xab\r\nMB+159A16lRZTRd9if5OgzxV84k+MZ7F9/w2ltCphH+OBB0fXrbHn5xAaCai\r\nt3oEc6wgiLxCcOLAY4K9y9FxvU4IG1hvhA5mrlvcbknp0212tzgEzC75c71z\r\nWrddRMoJjqF/vgSwxgvoxTsXXHVfq8SMSI9HlJyO3OIa31PGUh3s6woJH4ck\r\nx3evkJ83CtWNOzTBL8enh3I0UWgVkKpqzfCFm0dCHQhn311BcujB7XBrM48T\r\nKW9FSVOTLUsldMBj0CRpoROV5pVcXcnXrvmju4fjLeWe9butaOdPO3dmZNf0\r\nzOoVkp10kvtNZyadVPrOIHZ64V4m7CZJ3CSv8+E2OXjPaIKQD+BwN5x2cy+/\r\nFz6vgFLBnuwBDTerDsaJf7l7yzGFbIKGh0M5vAADwazcHUmzMXOj26lIljwD\r\nZBEtptwKp2XDHP06xyVKruPFf+1T/ZYLfH5eo2cKFLOeGi7Kqyz9it4tZZJZ\r\n8O0L/5vwS37VZCVqPRSVOy4Yysto6Ki03LQRH+ZZdpEm0LnRkF4VWwX3s36t\r\nef3HZNVCrwiHN8UkvdNl9aYwKtAXFYWyXDc9ObMAr2vP2JxCBXSCfgzOSTt3\r\ndnbKsrTu34lBUyRaozue8w2pqHzgUzwPkWE=\r\n=r0ZW\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_5.0.0_1661607226219_0.13190921967569902"
      },
      "_hasShrinkwrap": false
    },
    "5.0.1-next.1": {
      "name": "graphql-request",
      "version": "5.0.1-next.1",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [graphql-request](#graphql-request)\n  - [Features](#features)\n  - [Install](#install)\n  - [Quickstart](#quickstart)\n  - [Usage](#usage)\n  - [Node Version Support](#node-version-support)\n  - [Community](#community)\n      - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n  - [Examples](#examples)\n    - [Authentication via HTTP header](#authentication-via-http-header)\n      - [Incrementally setting headers](#incrementally-setting-headers)\n      - [Set endpoint](#set-endpoint)\n      - [passing-headers-in-each-request](#passing-headers-in-each-request)\n      - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n    - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n    - [Using GraphQL Document variables](#using-graphql-document-variables)\n    - [Making a GET request](#making-a-get-request)\n    - [GraphQL Mutations](#graphql-mutations)\n    - [Error handling](#error-handling)\n    - [Using `require` instead of `import`](#using-require-instead-of-import)\n    - [Cookie support for `node`](#cookie-support-for-node)\n    - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n    - [Receiving a raw response](#receiving-a-raw-response)\n    - [File Upload](#file-upload)\n      - [Browser](#browser)\n      - [Node](#node)\n    - [Batching](#batching)\n    - [Cancellation](#cancellation)\n    - [Middleware](#middleware)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [FAQ](#faq)\n      - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n      - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n      - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n#### GraphQL Code Generator's GraphQL-Request TypeScript Plugin\n\nA [GraphQL-Codegen plugin](https://graphql-code-generator.com/docs/plugins/typescript-graphql-request) that generates a `graphql-request` ready-to-use SDK, which is fully-typed.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request'\n\n;(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/'\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@5.0.1-next.1",
      "dist": {
        "shasum": "9cd5bf40219a6c6c17f30d2a39dfc0bdc6af5b2e",
        "integrity": "sha512-yo7HvMp12X9UX88PdtNGD2b6hZH553uLNb6mUByxt+QTC5HagG24qndfvpFy9+aVeKTQ6RtNHYhjw1lLDmqBQg==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-5.0.1-next.1.tgz",
        "fileCount": 34,
        "unpackedSize": 174241,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHJpOG04AbQiA0CYiTeIAvul4ky8NX9VIDZWt/Es3MT2AiEAnL3EgpH8dsmpBlGtf6PrA7OgXa0PdwNYddfxeRYQEJE="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjLHJIACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpP0g//RNkS/WEKsfvE1EO+xY7LnzvrkPczW4jQ8x1AcYa2Ko2MYPXt\r\njdaHvAGrIcnmqPYy2TkBYom8wk1bBfZrohyWrO1OsiuAikxexS3L6aNaZqNy\r\npWmDwzpWSEf0t6BKhq0qSIhNUpnIi4LONUjSY9eBJ0iIKi4oBXmQSS+/yxsH\r\n0IRtc1FCO1F1FEFxLbUA8ayIeUxNPhVGjRwbIVuZyUBkj5rVj2cB40JbkThR\r\ntCOWdpxq5sX8aBIqMCugIvbdAp09Ltuhfq1ddz0hmaEgJr099i5ty32Os1lg\r\ng6w+dFkCH7TKQTU9JkUkO/Z5AShJQNqnPWdTyOBhQMCR0mYNgnIK4HbgqJhE\r\nXJXc41ZH9qzScrn1R9peKSqy5hdNDfBfpX2wMufYEaA7PgNdqg/dYMV8DK0U\r\nOObMPFwjC8YZP+SFISYYKGw1iIbd5uM9NEtO2gD//zIKCBit8MUizjbmO519\r\nRUAhinu0uY85yORQKPpupuHZdCbLPAvnO4daAY0LVK1DzVZ1mgYFk0oREz7o\r\n0oYfqcvOwGm8xD4arEq1IKIqwqj3RXV+ladlkx+sZ7lFeDoddoVzOkPFx/Cl\r\nyiSRV1E+IFvx6Hli1qv9cVKN5P+92VWzz90grLfTucZvJOCOP8ICS14TCTKy\r\nzxJ96HngbsvnadEkfJrNo52FFTHW9njvT3w=\r\n=4Gcz\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_5.0.1-next.1_1663857224178_0.5051457153117695"
      },
      "_hasShrinkwrap": false
    },
    "5.0.1-next.2": {
      "name": "graphql-request",
      "version": "5.0.1-next.2",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [graphql-request](#graphql-request)\n  - [Features](#features)\n  - [Install](#install)\n  - [Quickstart](#quickstart)\n  - [Usage](#usage)\n  - [Node Version Support](#node-version-support)\n  - [Community](#community)\n      - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n  - [Examples](#examples)\n    - [Authentication via HTTP header](#authentication-via-http-header)\n      - [Incrementally setting headers](#incrementally-setting-headers)\n      - [Set endpoint](#set-endpoint)\n      - [passing-headers-in-each-request](#passing-headers-in-each-request)\n      - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n    - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n    - [Using GraphQL Document variables](#using-graphql-document-variables)\n    - [Making a GET request](#making-a-get-request)\n    - [GraphQL Mutations](#graphql-mutations)\n    - [Error handling](#error-handling)\n    - [Using `require` instead of `import`](#using-require-instead-of-import)\n    - [Cookie support for `node`](#cookie-support-for-node)\n    - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n    - [Receiving a raw response](#receiving-a-raw-response)\n    - [File Upload](#file-upload)\n      - [Browser](#browser)\n      - [Node](#node)\n    - [Batching](#batching)\n    - [Cancellation](#cancellation)\n    - [Middleware](#middleware)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [FAQ](#faq)\n      - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n      - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n      - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n### Get typed GraphQL Queries with GraphQL Code Generator\n\n`graphql-request@^5` supports `TypedDocumentNode`, the typed counterpart of `graphql`'s `DocumentNode`.\n\nInstalling and configuring [GraphQL Code Generator](https://www.the-guild.dev/graphql/codegen) requires a few steps in order to get end-to-end typed GraphQL operations using the provided `graphql()` helper:\n\n```ts\nimport request from 'graphql-request';\nimport { graphql } from './gql/gql';\n\nconst getMovieQueryDocument = graphql(/* GraphQL */ `\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`);\n\n\nconst data = await request(\n  'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr',\n  getMovieQueryDocument,\n  // variables are type-checked!\n  { title: \"Inception\" }\n)\n\n// `data.Movie` is typed!\n```\n[_The complete example is available in the GraphQL Code Generator repository_](https://github.com/dotansimha/graphql-code-generator/tree/master/examples/front-end/react/graphql-request)\n\nVisit GraphQL Code Generator's dedicated guide to get started: https://www.the-guild.dev/graphql/codegen/docs/guides/react-vue.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request'\n\n;(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/'\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nIt's also possible to use an async function as a request middleware. The resolved data will be passed to the request:\n\n```ts\nasync function middleware(request: RequestInit) {\n  const token = await getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@5.0.1-next.2",
      "dist": {
        "shasum": "1f1c63926929e5534784ab998deef2830c03a6e9",
        "integrity": "sha512-wenr1clu45bJ97J37dvnrN1/Wq4JfUvnay745ZuNqsDf3Znb0V+mRGNWuXJygEsfTFHyIo3VALaUug5Sq7lYYg==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-5.0.1-next.2.tgz",
        "fileCount": 38,
        "unpackedSize": 176523,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCOUu+2vI6z2UGQOdORcbqK4WJ+lQP6EIV3QrSnH2BfugIgE/OlGVQiMXqgnoYYk6ONN5kI7RE41Iji71nYukiT7mg="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjQWupACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqmAw//eBb98ZaLpKVklfoT0y4Q7d1665guB/ee6Bhc26H9SCukUyNr\r\n/63ugsH/82QrgC02EY7KmMuclSGJCDi1FqEA4++y6PtrwTS4VKHH3Ej/XWk3\r\n5niCvabDAQfdK52vdN0410d8Mnl9UKvUqm1EBb6ZlqVH8V6yoIBLTr5gs2tm\r\numlKsqtdjvdSVEOeJQygiM5wyHTaq7YyquHYOVI01dYLjTqmTbJWAloTPcqi\r\nC0aKOdA2RLXYpwbjP59hOHBOKIBvwOcap6qvHJCRUswY3SHS/Q3p0S/x3QeD\r\n4VJfjgg1bGVxqv2iGONg06kUDajCWpvbSIgIgzty7BK5RdshocDnafrcutEa\r\n/Te/U0Z+A8gkFDZwFqtPS3x1z3qUqHui00oJlnk3kPODkJ9GS3LD17gO1P7R\r\nfz+wFG/X91lCGIvtbfe0iuBxBGNGCWw6H5nOY9hhRI0bA4OWO+er6mAU8V1F\r\nrbk0wv4gPpNR1wHogSitBYqAc6uAGSV6CbgXtpfsv6uLh3LBT6K14HfQKXYp\r\nr5Hjck9AiY7jjYTQRrpA/Gxakci4esSURSBgVoII2Rf9mWaewoaZ6qrgCjfw\r\nTWfYRPXgIXEZP/ls/3rbrwXfCKO9cW+gT1ahi46kXQFtAcPIfQTH6ai1hEGL\r\n21/vSZxKD6sR3Nt7D9UUX+h3ZEVWQ5O5AmM=\r\n=vfEg\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_5.0.1-next.2_1665231784862_0.6356101502193445"
      },
      "_hasShrinkwrap": false
    },
    "5.1.0-next.3": {
      "name": "graphql-request",
      "version": "5.1.0-next.3",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [graphql-request](#graphql-request)\n  - [Features](#features)\n  - [Install](#install)\n  - [Quickstart](#quickstart)\n  - [Usage](#usage)\n  - [Node Version Support](#node-version-support)\n  - [Community](#community)\n      - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n  - [Examples](#examples)\n    - [Authentication via HTTP header](#authentication-via-http-header)\n      - [Incrementally setting headers](#incrementally-setting-headers)\n      - [Set endpoint](#set-endpoint)\n      - [passing-headers-in-each-request](#passing-headers-in-each-request)\n      - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n    - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n    - [Using GraphQL Document variables](#using-graphql-document-variables)\n    - [Making a GET request](#making-a-get-request)\n    - [GraphQL Mutations](#graphql-mutations)\n    - [Error handling](#error-handling)\n    - [Using `require` instead of `import`](#using-require-instead-of-import)\n    - [Cookie support for `node`](#cookie-support-for-node)\n    - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n    - [Receiving a raw response](#receiving-a-raw-response)\n    - [File Upload](#file-upload)\n      - [Browser](#browser)\n      - [Node](#node)\n    - [Batching](#batching)\n    - [Cancellation](#cancellation)\n    - [Middleware](#middleware)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [FAQ](#faq)\n      - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n      - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n      - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n### Get typed GraphQL Queries with GraphQL Code Generator\n\n`graphql-request@^5` supports `TypedDocumentNode`, the typed counterpart of `graphql`'s `DocumentNode`.\n\nInstalling and configuring [GraphQL Code Generator](https://www.the-guild.dev/graphql/codegen) requires a few steps in order to get end-to-end typed GraphQL operations using the provided `graphql()` helper:\n\n```ts\nimport request from 'graphql-request';\nimport { graphql } from './gql/gql';\n\nconst getMovieQueryDocument = graphql(/* GraphQL */ `\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`);\n\n\nconst data = await request(\n  'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr',\n  getMovieQueryDocument,\n  // variables are type-checked!\n  { title: \"Inception\" }\n)\n\n// `data.Movie` is typed!\n```\n[_The complete example is available in the GraphQL Code Generator repository_](https://github.com/dotansimha/graphql-code-generator/tree/master/examples/front-end/react/graphql-request)\n\nVisit GraphQL Code Generator's dedicated guide to get started: https://www.the-guild.dev/graphql/codegen/docs/guides/react-vue.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request'\n\n;(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/'\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nIt's also possible to use an async function as a request middleware. The resolved data will be passed to the request:\n\n```ts\nasync function middleware(request: RequestInit) {\n  const token = await getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@5.1.0-next.3",
      "dist": {
        "shasum": "31002461c04e2cd4e6ea137370578dcc7238cc60",
        "integrity": "sha512-DzFHEz4/fUIWvo/CiWF3FnTejsaFDel/Fcu4YY34OYiFERG8LSsmGhKvwBWWygJYyzdQ5h4P42xv11+kdBheHg==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-5.1.0-next.3.tgz",
        "fileCount": 38,
        "unpackedSize": 177041,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIAaAK1XbxJnT/aPm4YNpZyzFYsH+6RCMJ5BD7ZwAVxJLAiANnZp7ulhhpodVydODAyhk6c2IddqjNolhHSigJULxww=="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjR3XlACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmplsxAAiv7zBKfWGCZ1JReBV23YebT2h5dDc6n1lxb3kdiPXnpnMBFa\r\nO1VTdTpsQ7E3HmsvLxJyB+ftkW/dK+l5MlzuIAZ33UHxMBBg+0hS2Q/TEjro\r\n5JmR5mEnvtRjeKqschvQkWRSIzQh/ErgH5C5LyP4KZ6ifuLY9nAlU6MKHgpI\r\norOf7PAmV6seZgzD2dl1Q45MhL9YwJqvdJSkwGYiRW53H4LZa+kpEFq/kuwY\r\nEsqDcb6WFFuUbvb5FUM45NQ6E8a+iKqSw1j6glxgRIoFD7aaLydnrz+/35rX\r\ngveMRACzAZg8fsjsDxUK5uxtU8nW0Irjgp7n+yVeFzWXjIVFTpMvmpZyADJx\r\n/oFR9uKkX6ijuu+dfR8TVPBpW2dZQBeEGAD7Pnx8nETMGDTTkeS0U9BTM/g3\r\nESQCuI2sa2TwaCmc1hMVo370p2S6wR7zmoUZjf5gH4zbIZAraEUY/stSMtUK\r\nEXf/XrScmNmCPCBqJdrnd5pAeeqNpD7AiuxqrcaceQjl6dQktEVrv6h/bv82\r\ngmfOszounuYVWxvLis6Uy/ngB5jkTTtsxwDEzcfPUF1m+xTy1S4WFurvXtZ3\r\nD+7y7VhIB6zE8as4Xd5L4sAXCUSjxaC1a76AgjxtmxX+e+6mcF/AiiRnMCkX\r\nINBNqcwDzErPWG+lMEfauU+uGZ5eZN+QpZU=\r\n=VDoQ\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_5.1.0-next.3_1665627621679_0.39464538350136036"
      },
      "_hasShrinkwrap": false
    },
    "5.1.0-next.4": {
      "name": "graphql-request",
      "version": "5.1.0-next.4",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.3.5",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [graphql-request](#graphql-request)\n  - [Features](#features)\n  - [Install](#install)\n  - [Quickstart](#quickstart)\n  - [Usage](#usage)\n  - [Node Version Support](#node-version-support)\n  - [Community](#community)\n    - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n  - [Examples](#examples)\n    - [Authentication via HTTP header](#authentication-via-http-header)\n      - [Incrementally setting headers](#incrementally-setting-headers)\n      - [Set endpoint](#set-endpoint)\n      - [passing-headers-in-each-request](#passing-headers-in-each-request)\n      - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n    - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n    - [Using GraphQL Document variables](#using-graphql-document-variables)\n    - [Making a GET request](#making-a-get-request)\n    - [GraphQL Mutations](#graphql-mutations)\n    - [Error handling](#error-handling)\n    - [Using `require` instead of `import`](#using-require-instead-of-import)\n    - [Cookie support for `node`](#cookie-support-for-node)\n    - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n    - [Receiving a raw response](#receiving-a-raw-response)\n    - [File Upload](#file-upload)\n      - [Browser](#browser)\n      - [Node](#node)\n    - [Batching](#batching)\n    - [Cancellation](#cancellation)\n    - [Middleware](#middleware)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [FAQ](#faq)\n    - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n    - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n    - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n### Get typed GraphQL Queries with GraphQL Code Generator\n\n`graphql-request@^5` supports `TypedDocumentNode`, the typed counterpart of `graphql`'s `DocumentNode`.\n\nInstalling and configuring [GraphQL Code Generator](https://www.the-guild.dev/graphql/codegen) requires a few steps in order to get end-to-end typed GraphQL operations using the provided `graphql()` helper:\n\n```ts\nimport request from 'graphql-request'\nimport { graphql } from './gql/gql'\n\nconst getMovieQueryDocument = graphql(/* GraphQL */ `\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`)\n\nconst data = await request(\n  'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr',\n  getMovieQueryDocument,\n  // variables are type-checked!\n  { title: 'Inception' }\n)\n\n// `data.Movie` is typed!\n```\n\n[_The complete example is available in the GraphQL Code Generator repository_](https://github.com/dotansimha/graphql-code-generator/tree/master/examples/front-end/react/graphql-request)\n\nVisit GraphQL Code Generator's dedicated guide to get started: https://www.the-guild.dev/graphql/codegen/docs/guides/react-vue.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request'\n;(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/'\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nIt's also possible to use an async function as a request middleware. The resolved data will be passed to the request:\n\n```ts\nasync function middleware(request: RequestInit) {\n  const token = await getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@5.1.0-next.4",
      "dist": {
        "shasum": "ccf864eda3bec664dc3040521cddb6519f2c59d8",
        "integrity": "sha512-A+yO95W/IG9UVGJ+aILz+Vhmf3jQ0DeOqN048ffwQf4HTAh3Lnb8bUKRNg05ALGjWEypNw3ioIggrMTWylxMcg==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-5.1.0-next.4.tgz",
        "fileCount": 38,
        "unpackedSize": 176906,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCULWkFL9fKMkXRnNUBott5e1kbJwh7uyv5NLrlaqnNtAIhAMmKnnTb38KiawUU4lXXg6/SDpKulpgEfJweLtYKx/y3"
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjdnRwACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmpvnw/+LNZnr6vZbqcxFOalQvM8Ohq7M5ArHQWeM1858Fzt1lP9TQKN\r\nwKLXYouKe3j/zX6swkfOG0Da+R+esRhhKeKbIQILSc2rAAB9bWdqTiY+77p5\r\nV8GmUYBvYDg1domhU/N535Ud7SjdBOg50uhg/nTuXL1qVjciL42R69+LQRJS\r\nF7z49s+BCn2Y2oGy4vWixTXPpc1/kaM9i+JwVv3O5edu4I2/51YD80wfwEdR\r\nrDHp++vHi+QoZtY083T3MRBr2uA4qfGPWcvftq4wZqhID0mTtI2jMbbqF/K9\r\nNZDNeWrOAP1XUdxeP/ELQr04icga+BpQhOG08TvNuAsaOe0eW9KkhkC2r+Ne\r\nn2suoCGdJibA/lFwtaQ25dyD4Sp5jL2EVSBpHCHEVYq0tdJpaDopEBQHv+t6\r\n/LT76cMk7jCSmkcmQtyImezu6ZhAw8vl8SMQHMkA8kiscAxoZM80WBxbB9Ry\r\nYpCh0812YGKJF9dHQo/hNVnZlXqs3EwwsFMcS1Hf2z2vIYyn5ihr0DE76rPv\r\n4i9I35U8/NDKjK5Ll0Bvl2AUj+w7tGk+S36iiOLyTpB+PEcwbpZJs3BXV0w/\r\nIVO9GRDwg2r5YyCBNXRjFjUoNBb3bltO6krgQ5qDCVH2rrlxz9eg372+aRaF\r\nkrV1qnN2jc/b659jjEvuHWeX21pIXA1FxpY=\r\n=N6KY\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_5.1.0-next.4_1668707440214_0.1485896406703131"
      },
      "_hasShrinkwrap": false
    },
    "5.1.0-next.5": {
      "name": "graphql-request",
      "version": "5.1.0-next.5",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.8.4",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [graphql-request](#graphql-request)\n  - [Features](#features)\n  - [Install](#install)\n  - [Quickstart](#quickstart)\n  - [Usage](#usage)\n  - [Node Version Support](#node-version-support)\n  - [Community](#community)\n    - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n  - [Examples](#examples)\n    - [Authentication via HTTP header](#authentication-via-http-header)\n      - [Incrementally setting headers](#incrementally-setting-headers)\n      - [Set endpoint](#set-endpoint)\n      - [passing-headers-in-each-request](#passing-headers-in-each-request)\n      - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n    - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n    - [Using GraphQL Document variables](#using-graphql-document-variables)\n    - [Making a GET request](#making-a-get-request)\n    - [GraphQL Mutations](#graphql-mutations)\n    - [Error handling](#error-handling)\n    - [Using `require` instead of `import`](#using-require-instead-of-import)\n    - [Cookie support for `node`](#cookie-support-for-node)\n    - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n    - [Receiving a raw response](#receiving-a-raw-response)\n    - [File Upload](#file-upload)\n      - [Browser](#browser)\n      - [Node](#node)\n    - [Batching](#batching)\n    - [Cancellation](#cancellation)\n    - [Middleware](#middleware)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [FAQ](#faq)\n    - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n    - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n    - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n### Get typed GraphQL Queries with GraphQL Code Generator\n\n`graphql-request@^5` supports `TypedDocumentNode`, the typed counterpart of `graphql`'s `DocumentNode`.\n\nInstalling and configuring [GraphQL Code Generator](https://www.the-guild.dev/graphql/codegen) requires a few steps in order to get end-to-end typed GraphQL operations using the provided `graphql()` helper:\n\n```ts\nimport request from 'graphql-request'\nimport { graphql } from './gql/gql'\n\nconst getMovieQueryDocument = graphql(/* GraphQL */ `\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`)\n\nconst data = await request(\n  'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr',\n  getMovieQueryDocument,\n  // variables are type-checked!\n  { title: 'Inception' }\n)\n\n// `data.Movie` is typed!\n```\n\n[_The complete example is available in the GraphQL Code Generator repository_](https://github.com/dotansimha/graphql-code-generator/tree/master/examples/front-end/react/graphql-request)\n\nVisit GraphQL Code Generator's dedicated guide to get started: https://www.the-guild.dev/graphql/codegen/docs/guides/react-vue.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request'\n;(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/'\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nIt's also possible to use an async function as a request middleware. The resolved data will be passed to the request:\n\n```ts\nasync function middleware(request: RequestInit) {\n  const token = await getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@5.1.0-next.5",
      "dist": {
        "shasum": "b0eb7816a32d097026f12977c0f7bb1dcbe12201",
        "integrity": "sha512-GXLfqCl4eMbEAEsz9q6G+z3FWG9/ngBCLD+w5RQoefu3GJMDzXxm/IQcl7XnmmGZkveQG4LQu0xSsltuA9E8+g==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-5.1.0-next.5.tgz",
        "fileCount": 38,
        "unpackedSize": 180829,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCICjxoEiGqoirktB4leUaiAxj6FJCnIYdKNMqLSJTABDfAiEA0+VuP1KS1ygENj2Tq8S/L0F9HZ0/fInIrKTx1sJpd2M="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjd7CfACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrbfQ//Zff58cq5sRYNzif3CFRDG3SaZaSPqfv+VVGQk08MzCRcR0nv\r\n18P9hrhduwOUYdX+3bkBb4qIOS8TNRTgqJ/HFnI4WKf59G9nOrCwv33azkGi\r\ncWwD7qywQro77eoXC/g9VV6cLgA6Kp3OJS9jHgPIWIrYwPUOwqzGSEB1z/z/\r\netxseVSvDX0lDIL/pNJMgZazaO3iMvkpkZgYksWqZrgF/PhqrwORZS7hvoup\r\nYCKmASrvxcTSR5+DZG1PA40bqyLBkggJ42D0ZXIVXM1ap52JqbdAa12YdpO6\r\n/uckbWu3+5PG+s6jgRG6xQAa4ceexr7uMCB/Wtzg3AG7E2yf+I+gVR2nwk9I\r\nO+aayya4SqrBOKX7zQU6L0SO7sgczCZFskzvs6eUon2+jzsNCHMh1ui1+MqD\r\n13WXb4uidRQwyd55s++791yO+/tHV2vBldGJDsUr2UBrPGivtoHk8BWFIMpt\r\nFl590nspohMF+77I2Hub+y13/yOZr36aeUJzjjN6ba18Wh07XedCc+L0sm+E\r\nJz0Rg7tFUjE/ifEh2fu7rC/axaKoUhnGVevJAIltZEQ5fhHxEIhG/WNbioIe\r\nV5kHKINoc9jrcyr/dprlR39DIY0raFqQfLZ14+kIFTe7l4yiWNP2djyPATsB\r\nwSLa+hGWgzMGHEcxuVtFM0qtxz3StvJPcI8=\r\n=AnlE\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_5.1.0-next.5_1668788383353_0.8034000760706492"
      },
      "_hasShrinkwrap": false
    },
    "5.1.0-next.6": {
      "name": "graphql-request",
      "version": "5.1.0-next.6",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.1",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.8.4",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [graphql-request](#graphql-request)\n  - [Features](#features)\n  - [Install](#install)\n  - [Quickstart](#quickstart)\n  - [Usage](#usage)\n  - [Node Version Support](#node-version-support)\n  - [Community](#community)\n    - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n  - [Examples](#examples)\n    - [Authentication via HTTP header](#authentication-via-http-header)\n      - [Incrementally setting headers](#incrementally-setting-headers)\n      - [Set endpoint](#set-endpoint)\n      - [passing-headers-in-each-request](#passing-headers-in-each-request)\n      - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n    - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n    - [Using GraphQL Document variables](#using-graphql-document-variables)\n    - [Making a GET request](#making-a-get-request)\n    - [GraphQL Mutations](#graphql-mutations)\n    - [Error handling](#error-handling)\n    - [Using `require` instead of `import`](#using-require-instead-of-import)\n    - [Cookie support for `node`](#cookie-support-for-node)\n    - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n    - [Receiving a raw response](#receiving-a-raw-response)\n    - [File Upload](#file-upload)\n      - [Browser](#browser)\n      - [Node](#node)\n    - [Batching](#batching)\n    - [Cancellation](#cancellation)\n    - [Middleware](#middleware)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [FAQ](#faq)\n    - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n    - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n    - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n### Get typed GraphQL Queries with GraphQL Code Generator\n\n`graphql-request@^5` supports `TypedDocumentNode`, the typed counterpart of `graphql`'s `DocumentNode`.\n\nInstalling and configuring [GraphQL Code Generator](https://www.the-guild.dev/graphql/codegen) requires a few steps in order to get end-to-end typed GraphQL operations using the provided `graphql()` helper:\n\n```ts\nimport request from 'graphql-request'\nimport { graphql } from './gql/gql'\n\nconst getMovieQueryDocument = graphql(/* GraphQL */ `\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`)\n\nconst data = await request(\n  'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr',\n  getMovieQueryDocument,\n  // variables are type-checked!\n  { title: 'Inception' }\n)\n\n// `data.Movie` is typed!\n```\n\n[_The complete example is available in the GraphQL Code Generator repository_](https://github.com/dotansimha/graphql-code-generator/tree/master/examples/front-end/react/graphql-request)\n\nVisit GraphQL Code Generator's dedicated guide to get started: https://www.the-guild.dev/graphql/codegen/docs/guides/react-vue.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request'\n;(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/'\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nIt's also possible to use an async function as a request middleware. The resolved data will be passed to the request:\n\n```ts\nasync function middleware(request: RequestInit) {\n  const token = await getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@5.1.0-next.6",
      "dist": {
        "shasum": "300641f37e0d3dafc79e7c33261412b319f7db10",
        "integrity": "sha512-s+B7wfdbPf/0zWIdfL1dUzAke37JNMuJ5cZIr0AgG97vIzxht9l/igx6cQc3f6uvnkCtAgd6FQPSEb0P8iWqAA==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-5.1.0-next.6.tgz",
        "fileCount": 38,
        "unpackedSize": 181288,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIA3h4GboGRx4TQ2xqMuYmJWJKx1kXzVXRwKe7wXxU1rAAiBlJ5+HapwCC9F5Jty/Ja34yQ3H7wHN8Hm02m4IO1k0iA=="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjd729ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqt8w/6AhvIsDSeye1PkcdaySHUipABcYM0tZFNbY8+Yf9+PmApHR+L\r\n/4fWsKFBHy5Tju33uUe1frzdsGwc0zdcKv0RE3kRUjU2B8ZcIfbpB3pHstRO\r\n8hpf6AoldzcSxbwXRXzG37cIBVSfFvJVprV4z6onQ531miqYRMhxpoBf6tLv\r\nTo/BjwP264FvnJr16kLWJ4885+SjbldtQfVOdeyGAp8NIRY0K8UOjgJIslTS\r\nXeg/TWzk3klxNLiBqgziHQQEkVF2xMgs7EvaxPbPVjiWATa7dNB99+is7+4Z\r\nP+2jOWftJsT3dGPCU0EgkzrGFWcsffbkAvyqZoQ56CO+qyQVFRJHM/T15Gqu\r\n+9Z1Iipf3biaEcAxgKxP3J8VLDCkbyeD3Wu6pLnb9sWs1CkS8tzZZsw0DzsC\r\nS5XeS4QAIdZE1NFPmPGLOD90GTRW3p1OD+PrMeNKopO8LQuCWSczeD31yZ7B\r\ntK8KHzIjIT+E5grCfbbxjXjPOske4lP4shSEf7LMbIY5UhCLVxIvEAv0KaYE\r\nB2EZGvBu6ZXtffG9VrnZGn+nSA303BjLGdMCzyKy7YzNlnZB0N3vekMZqsgO\r\n/VrqS1Wf1faM5/xe/tpfhEr5ID6kRWFFW8h+qi8kITjuTFsVgpLjSQ/woMBz\r\nZR+UdY2rmNZhPgRvm0papCnfWxkAU80Udps=\r\n=e3Pe\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_5.1.0-next.6_1668791741138_0.10718349499452118"
      },
      "_hasShrinkwrap": false
    },
    "5.1.0": {
      "name": "graphql-request",
      "version": "5.1.0",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.3",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.8.4",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@5.1.0",
      "dist": {
        "shasum": "dbc8feee27d21b993cd5da2d3af67821827b240a",
        "integrity": "sha512-0OeRVYigVwIiXhNmqnPDt+JhMzsjinxHE7TVy3Lm6jUzav0guVcL0lfSbi6jVTRAxcbwgyr6yrZioSHxf9gHzw==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-5.1.0.tgz",
        "fileCount": 38,
        "unpackedSize": 181281,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGdjowO36ke0/eSLibED6ZQVmNtiinXG5+Dx3tFPP4vpAiA7vvbDLCwEcAaB97vdzHIR40WSpiYYulvOfQWzp9r6/A=="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjnLZ+ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrQ8g/7BKgi6QhCsMDBMbsbyhhtRKZbGaiUXChI8ptcuw9nAbbo9ITu\r\nFxVFl6v3LbLSZd3Cb+h1k9T12AfGu0yB696rQ+U+R74OJ3c5cxmz9ia0zJtU\r\nescJfsCxaEYQA6BalvNRCWY8OUYCnvauMrCrs9gZqyx1QxLODN9IpUpIA0GJ\r\nsqRqcu+1Xt8ZIi3COtaqbLPFdU9svCRa9tlwC+RGQ8NQYwXhTOcDnRwpYVRd\r\nd2kV9SRamqr8Rrl1V0vVRFZduaEKhGeUk/X2uleqnLTe8+wCZclstlt+c8aj\r\nW7crlxOgdltOemhWY+2d8/CE18tqsb09xU60VYo4BKj/x2hRPUF+wMq7LOTA\r\nA9u3jPEWk0uzCvAtP9n1z7N/G1k25UGFBdco6UdVLMpKhyR133oRtpiNO2Uh\r\nLoTHVdFi4q6k8NWox1n7YF9GJrzTw+n7YU7xqsn55eDayKxbqjoVPUuh71B6\r\n4pfv200YaI6PQrMsCxoOW2cdV94WVmhQ8sqSImSmHTw6LKPJpxT6SY5ZimOx\r\nBunXtEWGxQf3gucJ1kZVWTU7mUvudtvqoZqvft6nmLDQMXXWEpZGYRbV5irh\r\n3NXwXIHbgbDYAw5C3oO4eRA6kL9K2ycoYhMMMe9Ng8AlhVLOltrGLkZs0m/7\r\nOQ9kMDq7n+3HsXIYllW5Yr31w5totcJbjvM=\r\n=QYrV\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_5.1.0_1671214718286_0.3801792339570371"
      },
      "_hasShrinkwrap": false
    },
    "5.1.1-next.1": {
      "name": "graphql-request",
      "version": "5.1.1-next.1",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "https://github.com/prisma/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Prisma Labs Team"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/prisma/graphql-request/issues"
      },
      "homepage": "https://github.com/prisma/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "dev:test": "jest --watch",
        "format": "prettier --write .",
        "prepublishOnly": "yarn build",
        "build": "rm -rf dist && tsc -d",
        "test:node": "jest --testEnvironment node",
        "test:dom": "jest --testEnvironment jsdom",
        "test": "yarn test:node && yarn test:dom",
        "test:coverage": "yarn test --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.1",
        "@types/express": "^4.17.13",
        "@types/extract-files": "^8.1.1",
        "@types/graphql-upload": "^8.0.6",
        "@types/jest": "^26.0.24",
        "@types/node": "^16.4.3",
        "@types/ws": "^8.2.3",
        "abort-controller": "^3.0.0",
        "apollo-server-express": "^3.5.0",
        "body-parser": "^1.19.0",
        "doctoc": "^2.0.1",
        "dripip": "^0.10.0",
        "express": "^4.17.3",
        "fetch-cookie": "^1.0.0",
        "get-port": "^5.1.1",
        "graphql": "16",
        "graphql-tag": "^2.12.5",
        "graphql-upload": "^12.0.0",
        "graphql-ws": "^5.6.0",
        "jest": "^27.0.6",
        "prettier": "^2.3.2",
        "ts-jest": "^27.0.4",
        "type-fest": "^1.2.2",
        "typescript": "^4.8.4",
        "ws": "^8.2.3"
      },
      "prettier": "@prisma-labs/prettier-config",
      "jest": {
        "preset": "ts-jest",
        "snapshotResolver": "<rootDir>/snapshot-resolver.js"
      },
      "readmeFilename": "README.md",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/prisma-labs/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [graphql-request](#graphql-request)\n  - [Features](#features)\n  - [Install](#install)\n  - [Quickstart](#quickstart)\n  - [Usage](#usage)\n  - [Node Version Support](#node-version-support)\n  - [Community](#community)\n    - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n  - [Examples](#examples)\n    - [Authentication via HTTP header](#authentication-via-http-header)\n      - [Incrementally setting headers](#incrementally-setting-headers)\n      - [Set endpoint](#set-endpoint)\n      - [passing-headers-in-each-request](#passing-headers-in-each-request)\n      - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n    - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n    - [Using GraphQL Document variables](#using-graphql-document-variables)\n    - [Making a GET request](#making-a-get-request)\n    - [GraphQL Mutations](#graphql-mutations)\n    - [Error handling](#error-handling)\n    - [Using `require` instead of `import`](#using-require-instead-of-import)\n    - [Cookie support for `node`](#cookie-support-for-node)\n    - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n    - [Receiving a raw response](#receiving-a-raw-response)\n    - [File Upload](#file-upload)\n      - [Browser](#browser)\n      - [Node](#node)\n    - [Batching](#batching)\n    - [Cancellation](#cancellation)\n    - [Middleware](#middleware)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [FAQ](#faq)\n    - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n    - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n    - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n### Get typed GraphQL Queries with GraphQL Code Generator\n\n`graphql-request@^5` supports `TypedDocumentNode`, the typed counterpart of `graphql`'s `DocumentNode`.\n\nInstalling and configuring [GraphQL Code Generator](https://www.the-guild.dev/graphql/codegen) requires a few steps in order to get end-to-end typed GraphQL operations using the provided `graphql()` helper:\n\n```ts\nimport request from 'graphql-request'\nimport { graphql } from './gql/gql'\n\nconst getMovieQueryDocument = graphql(/* GraphQL */ `\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`)\n\nconst data = await request(\n  'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr',\n  getMovieQueryDocument,\n  // variables are type-checked!\n  { title: 'Inception' }\n)\n\n// `data.Movie` is typed!\n```\n\n[_The complete example is available in the GraphQL Code Generator repository_](https://github.com/dotansimha/graphql-code-generator/tree/master/examples/front-end/react/graphql-request)\n\nVisit GraphQL Code Generator's dedicated guide to get started: https://www.the-guild.dev/graphql/codegen/docs/guides/react-vue.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request'\n;(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/'\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nIt's also possible to use an async function as a request middleware. The resolved data will be passed to the request:\n\n```ts\nasync function middleware(request: RequestInit) {\n  const token = await getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "licenseText": "MIT License\n\nCopyright (c) 2017 Graphcool\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "_id": "graphql-request@5.1.1-next.1",
      "dist": {
        "shasum": "5b9c6ad7ae41171889bc3843720bd60e279c3deb",
        "integrity": "sha512-GPUWyaD1MAQkOc2RD2cLUwQCEbvVuI01Uh6tYEdzQHHXghC/pcQrwmgieW/r0g0hfz/XQE/8KVl9DQH7T8W8KQ==",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-5.1.1-next.1.tgz",
        "fileCount": 38,
        "unpackedSize": 181275,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIAjsKoFZ1ff5FDMC+M4XgbKjwjwDor9HlF0pPnQaFfruAiBVwPdNm0ykMQw47HhqJ/y9nrn7+Rk1cEqn/V4sgW/84w=="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjvbIGACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpLoxAAl52uutwt4Tgotl/cmNEM1yfp4SnGaSmaRtmhpOr0CMXrwGQ1\r\nry55XAPu0OQlo/fYbWkEy3P1EHaeL8tVgae9UZWpi0BQg5n8HrpArWZbtu+c\r\nyXasjN9V8aI6WMEQWMH2GC0hvV7DnTmuhvU5YbfnJX4osmMed2L9kFvUzAJB\r\n0WS54DdUWsTvoeqJ+49EtBDbqd8yW/ECIK/D0koEjcBV820gKoZkqKSqeJzx\r\nr3KfmGOTaI9cO2MeQKTGBvYh1JK38+fV9pmjNasnymbkoOS3KuykgkWzJGpr\r\nFZkZASFquPfU9fSwHd+H5xk6J5/wpJdxoYO1mkAdI1H3YMgkrRkg2LhK1R6P\r\nrnjP4QMlauiCXr10mqUoFfBnYWoEW8l5hnqIiYjiReduVtTb6OkLg1p2QP3i\r\nnG/wymTbXB70UzgYnWeFNSRNsVTmpOw/NqOLcTzRsJPq5h+4DtEXnDi9l8Vh\r\n+qnciGE6yYRNhdUnAyjk3is7F4mJhmUC6VV39yo4xwFNL74rXGk31/NTxovi\r\nlpfO+5HOJcmpeNcjEd2827EoA4URQq/vvREIbes8OknJrNeBBG5/sXp2Viut\r\ny3WoDDaDPGQBurnsmBUjX+mUOSC3Zcfj3mKfpwlx2woUeoeCE6zFKHLxHzuk\r\nChXCnpAbCJtfanBG4z0PJF16d3WsHbIgGgw=\r\n=vTmO\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_5.1.1-next.1_1673376261928_0.9275099560280027"
      },
      "_hasShrinkwrap": false
    },
    "5.1.1-next.2": {
      "name": "graphql-request",
      "version": "5.1.1-next.2",
      "packageManager": "pnpm@7.27.0",
      "main": "dist/index.js",
      "bundlesize": [
        {
          "path": "./dist/index.js",
          "maxSize": "15 kB"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client",
        "apollo"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "format": "prettier --write .",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check .",
        "prepublishOnly": "pnpm build",
        "build": "rm -rf dist && tsc --project tsconfig.build.json",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.16",
        "@types/extract-files": "^8.1.1",
        "@types/node": "^18.11.18",
        "@types/ws": "^8.5.4",
        "@vitest/coverage-c8": "^0.28.2",
        "apollo-server-express": "^3.11.1",
        "body-parser": "^1.20.1",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.5",
        "graphql-ws": "^5.11.2",
        "happy-dom": "^8.1.5",
        "prettier": "^2.8.3",
        "type-fest": "^3.5.3",
        "typescript": "^4.9.4",
        "vitest": "^0.28.2",
        "ws": "^8.12.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "types": "./dist/index.d.ts",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [graphql-request](#graphql-request)\n  - [Features](#features)\n  - [Install](#install)\n  - [Quickstart](#quickstart)\n  - [Usage](#usage)\n  - [Node Version Support](#node-version-support)\n  - [Community](#community)\n    - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n  - [Examples](#examples)\n    - [Authentication via HTTP header](#authentication-via-http-header)\n      - [Incrementally setting headers](#incrementally-setting-headers)\n      - [Set endpoint](#set-endpoint)\n      - [passing-headers-in-each-request](#passing-headers-in-each-request)\n      - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n    - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n    - [Using GraphQL Document variables](#using-graphql-document-variables)\n    - [Making a GET request](#making-a-get-request)\n    - [GraphQL Mutations](#graphql-mutations)\n    - [Error handling](#error-handling)\n    - [Using `require` instead of `import`](#using-require-instead-of-import)\n    - [Cookie support for `node`](#cookie-support-for-node)\n    - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n    - [Receiving a raw response](#receiving-a-raw-response)\n    - [File Upload](#file-upload)\n      - [Browser](#browser)\n      - [Node](#node)\n    - [Batching](#batching)\n    - [Cancellation](#cancellation)\n    - [Middleware](#middleware)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [FAQ](#faq)\n    - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n    - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n    - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n### Get typed GraphQL Queries with GraphQL Code Generator\n\n`graphql-request@^5` supports `TypedDocumentNode`, the typed counterpart of `graphql`'s `DocumentNode`.\n\nInstalling and configuring [GraphQL Code Generator](https://www.the-guild.dev/graphql/codegen) requires a few steps in order to get end-to-end typed GraphQL operations using the provided `graphql()` helper:\n\n```ts\nimport request from 'graphql-request'\nimport { graphql } from './gql/gql'\n\nconst getMovieQueryDocument = graphql(/* GraphQL */ `\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`)\n\nconst data = await request(\n  'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr',\n  getMovieQueryDocument,\n  // variables are type-checked!\n  { title: 'Inception' }\n)\n\n// `data.Movie` is typed!\n```\n\n[_The complete example is available in the GraphQL Code Generator repository_](https://github.com/dotansimha/graphql-code-generator/tree/master/examples/front-end/react/graphql-request)\n\nVisit GraphQL Code Generator's dedicated guide to get started: https://www.the-guild.dev/graphql/codegen/docs/guides/react-vue.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request'\n;(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/'\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nIt's also possible to use an async function as a request middleware. The resolved data will be passed to the request:\n\n```ts\nasync function middleware(request: RequestInit) {\n  const token = await getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "4302ba183b8164e432edd19a79e89425a3ee8016",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@5.1.1-next.2",
      "_nodeVersion": "16.19.0",
      "_npmVersion": "8.19.3",
      "dist": {
        "integrity": "sha512-yKkVcO6KoGzs+fyhfaI6hYgCf0x7NnEzpUgEI4yVewXRJuKJJQvKXGO71n56Xm7u+diG7oYY0PQJo9t1qHLMbQ==",
        "shasum": "041d2f5b57b030691fba2f6c520cb7bb7aa35ec0",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-5.1.1-next.2.tgz",
        "fileCount": 35,
        "unpackedSize": 181398,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCrMSYubeJDIW/FbAxzWEWWu6XW6Hv9eP5In4SwEwNLTgIgFhMcwrpFm9Mm+YC0isI83pXclt/SpQyf/uW3EkA9p2Y="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj8BmxACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqeyg//SlQXJXKh2cpLxsFqaRbO4Z9IYGmWbwcsG1yushn9ma6wvGWu\r\nTpVYDcZCaI6aXy6Rtoebqqa3RniGTKQ1I1YpjEdWwqL89+8P9/UAspbpJWLY\r\n6SuJOJ9XJB7thULpDin3B+E5bCYAQJy/C+CBFQrK/Edcbt7XvlRZpcBltQkZ\r\nv+EQt6PMLVo4a/I7H4T8+yk94c/hwvLwi3AslLy3hlPz4YVHn4MoRrLniFYo\r\n+2DlJmPXQuea/HuYEK4Nt6MKRcpqFFeIJGBxhkydI0C3ksnTDpF9znvqdymJ\r\nHV81xGx0mLZ2eKpP/l4EejObzZp+RbGwGKYZq68QHqEn+eydhWTSt6J0WUqD\r\nKbR0hs9ATVQKsyRtuLY+CugsRkuLbc1TrbYAHEbDr24xVOWXhYdkCtJas9+j\r\nKlT0/gQg0pLMr+1qMNvpgrq79zuOKxWx6ZratrDplUWMt5Glecyqgk1v/MSu\r\nUpqEiCnbVuDSyPhzIj9vSQ3HH+k9upXw9fqElMhU5gp6T5cgisxrlB19jBMr\r\nfSlEQ3az5aApX900kfq4QuJpo/CsOW977RHT/r8ZeKd/M2SPoaexN94fWeAM\r\n5F3YVVdATm4+ju5nWyvtBjfq8UcVVYvk1Se7o4mw/tTIi9IvY+WhpVA+MwJX\r\n5yqRSYpkTluIRfx1x6ppn7Q2SjdHlNST89s=\r\n=3s6P\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_5.1.1-next.2_1676679600892_0.9978730615244868"
      },
      "_hasShrinkwrap": false
    },
    "5.2.0-next.3": {
      "name": "graphql-request",
      "version": "5.2.0-next.3",
      "type": "module",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@7.27.0",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "format": "prettier --write .",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check .",
        "prepublishOnly": "pnpm build",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.16",
        "@types/extract-files": "^8.1.1",
        "@types/node": "^18.11.18",
        "@types/ws": "^8.5.4",
        "@vitest/coverage-c8": "^0.28.2",
        "apollo-server-express": "^3.11.1",
        "body-parser": "^1.20.1",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.5",
        "graphql-ws": "^5.11.2",
        "happy-dom": "^8.1.5",
        "prettier": "^2.8.3",
        "type-fest": "^3.5.3",
        "typescript": "^4.9.4",
        "vitest": "^0.28.2",
        "ws": "^8.12.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [graphql-request](#graphql-request)\n  - [Features](#features)\n  - [Install](#install)\n  - [Quickstart](#quickstart)\n  - [Usage](#usage)\n  - [Node Version Support](#node-version-support)\n  - [Community](#community)\n    - [GraphQL Code Generator's GraphQL-Request TypeScript Plugin](#graphql-code-generators-graphql-request-typescript-plugin)\n  - [Examples](#examples)\n    - [Authentication via HTTP header](#authentication-via-http-header)\n      - [Incrementally setting headers](#incrementally-setting-headers)\n      - [Set endpoint](#set-endpoint)\n      - [passing-headers-in-each-request](#passing-headers-in-each-request)\n      - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n    - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n    - [Custom JSON serializer](#custom-json-serializer)\n    - [Using GraphQL Document variables](#using-graphql-document-variables)\n    - [Making a GET request](#making-a-get-request)\n    - [GraphQL Mutations](#graphql-mutations)\n    - [Error handling](#error-handling)\n    - [Using `require` instead of `import`](#using-require-instead-of-import)\n    - [Cookie support for `node`](#cookie-support-for-node)\n    - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n    - [Receiving a raw response](#receiving-a-raw-response)\n    - [File Upload](#file-upload)\n      - [Browser](#browser)\n      - [Node](#node)\n    - [Batching](#batching)\n    - [Cancellation](#cancellation)\n    - [Middleware](#middleware)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [FAQ](#faq)\n    - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n    - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n    - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n### Get typed GraphQL Queries with GraphQL Code Generator\n\n`graphql-request@^5` supports `TypedDocumentNode`, the typed counterpart of `graphql`'s `DocumentNode`.\n\nInstalling and configuring [GraphQL Code Generator](https://www.the-guild.dev/graphql/codegen) requires a few steps in order to get end-to-end typed GraphQL operations using the provided `graphql()` helper:\n\n```ts\nimport request from 'graphql-request'\nimport { graphql } from './gql/gql'\n\nconst getMovieQueryDocument = graphql(/* GraphQL */ `\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`)\n\nconst data = await request(\n  'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr',\n  getMovieQueryDocument,\n  // variables are type-checked!\n  { title: 'Inception' }\n)\n\n// `data.Movie` is typed!\n```\n\n[_The complete example is available in the GraphQL Code Generator repository_](https://github.com/dotansimha/graphql-code-generator/tree/master/examples/front-end/react/graphql-request)\n\nVisit GraphQL Code Generator's dedicated guide to get started: https://www.the-guild.dev/graphql/codegen/docs/guides/react-vue.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request'\n;(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/'\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nIt's also possible to use an async function as a request middleware. The resolved data will be passed to the request:\n\n```ts\nasync function middleware(request: RequestInit) {\n  const token = await getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "cb79d6740bb3d26f85c6b31d8e8f5aa3e3f2c530",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@5.2.0-next.3",
      "_nodeVersion": "16.19.0",
      "_npmVersion": "8.19.3",
      "dist": {
        "integrity": "sha512-x/Fm3igyxnTkyXxpNgTBYQquAcdNBr/2BeAgggb+TSa8YBP/FDjVWYDzm/c/9YOQdddLMyHdW06Gl/i6KSiBcQ==",
        "shasum": "4226968da2aa9eed50ba2f28967824e708b69294",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-5.2.0-next.3.tgz",
        "fileCount": 76,
        "unpackedSize": 286743,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQC7Oc5Yv4JIEBwFWMf4IGCKQ5aiu2S7LqDECvkSHgQpgAIgWJKUYIxAdB8r/xuatIKTzNPcymwy5zg0mYKb9D3BI4k="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj8EYGACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp/eg/9Fah2+YvoR6eKsDzp+/wW7eWkr+gvpavEfmSdCyEYqu/0IYg8\r\n/T5vLRAFii4YaykBSAcrd9L6ItYT8U2tLyQVpBpy9+Z9RSvgQKs3jzwrNQay\r\n9h4TwqhUH18nWoPxaSe5fJckap0FrrHIlXQUnFywXahdIeLFga+UF7MBaRXJ\r\nI6/DoVuoLfDqcR9mrNsjQqwhaPd2Jz6aW9NLlDKUzwJaLPetKJPC0kATbHxL\r\ndtKLGsaX3Q8BNiyA39MmKOrGQ9+c4ChCHBK5j0JeHy1ydEAT1o2RzvSgFY/b\r\ndJOrknX0hOTbJUGErbcv/y0v3OwXZqcnguJdaJ0hk/hDbukQahTaOea42+AI\r\n+S/D4upE5rJotsrNDWVAUrGDSajpIpQv8n9u1Vg1BTb6RcnMcVI8T/v9RcLr\r\nygHGsvyLA9QbpTeczWLZDR4MRb5cSzLcBVjbxjqNPu5RAekf3fS4SCWGoP8B\r\n/eXB8tvN3YYT0/O6o2XGBd0e0oXQMDwjESd5+2GrTRQxzGJWBm2Sq/D+pEIW\r\njvu5bY0ujvh1Ooqot2rbrky+Vn5GrbQFIUK4TdI1eRs+N0v5uopbLTeP+m9T\r\nMP9jX5PY/sMQPBZT5MH9boPxAN+42wynaOrMw6DK4mDTQcESAuwsavnL+mLk\r\nLSkvk51vzUcuCpDCp+ovRJhIy3QitnFm9/Q=\r\n=K9+E\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_5.2.0-next.3_1676690950237_0.27263979211258094"
      },
      "_hasShrinkwrap": false
    },
    "5.2.0-next.4": {
      "name": "graphql-request",
      "version": "5.2.0-next.4",
      "type": "module",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@7.27.1",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "format": "prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check .",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.16",
        "@types/extract-files": "^8.1.1",
        "@types/node": "^18.11.18",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.52.0",
        "@typescript-eslint/parser": "^5.52.0",
        "@vitest/coverage-c8": "^0.28.2",
        "apollo-server-express": "^3.11.1",
        "body-parser": "^1.20.1",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.34.0",
        "eslint-config-prettier": "^8.6.0",
        "eslint-plugin-deprecation": "^1.3.3",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.5",
        "graphql-ws": "^5.11.2",
        "happy-dom": "^8.1.5",
        "prettier": "^2.8.3",
        "type-fest": "^3.5.3",
        "typescript": "^4.9.4",
        "vitest": "^0.28.2",
        "ws": "^8.12.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Features](#features)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Community](#community)\n  - [Get typed GraphQL Queries with GraphQL Code Generator](#get-typed-graphql-queries-with-graphql-code-generator)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n    - [Set endpoint](#set-endpoint)\n    - [passing-headers-in-each-request](#passing-headers-in-each-request)\n    - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n  - [Custom JSON serializer](#custom-json-serializer)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [Making a GET request](#making-a-get-request)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n  - [Middleware](#middleware)\n  - [ErrorPolicy](#errorpolicy)\n    - [None (default)](#none-default)\n    - [Ignore](#ignore)\n    - [All](#all)\n- [FAQ](#faq)\n    - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n    - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n    - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n### Get typed GraphQL Queries with GraphQL Code Generator\n\n`graphql-request@^5` supports `TypedDocumentNode`, the typed counterpart of `graphql`'s `DocumentNode`.\n\nInstalling and configuring [GraphQL Code Generator](https://www.the-guild.dev/graphql/codegen) requires a few steps in order to get end-to-end typed GraphQL operations using the provided `graphql()` helper:\n\n```ts\nimport request from 'graphql-request'\nimport { graphql } from './gql/gql'\n\nconst getMovieQueryDocument = graphql(/* GraphQL */ `\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`)\n\nconst data = await request(\n  'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr',\n  getMovieQueryDocument,\n  // variables are type-checked!\n  { title: 'Inception' }\n)\n\n// `data.Movie` is typed!\n```\n\n[_The complete example is available in the GraphQL Code Generator repository_](https://github.com/dotansimha/graphql-code-generator/tree/master/examples/front-end/react/graphql-request)\n\nVisit GraphQL Code Generator's dedicated guide to get started: https://www.the-guild.dev/graphql/codegen/docs/guides/react-vue.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request'\n;(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/'\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nIt's also possible to use an async function as a request middleware. The resolved data will be passed to the request:\n\n```ts\nasync function middleware(request: RequestInit) {\n  const token = await getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "0fb70621df68e9b67ff58c0025d485fe27065419",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@5.2.0-next.4",
      "_nodeVersion": "16.19.0",
      "_npmVersion": "8.19.3",
      "dist": {
        "integrity": "sha512-Nylg6X3QO6ecOkhXV6O9ZO8djOjvV0aNTmRm2dSDg83KeEX8/s3c9j+ojVdmIora81sNeL3KtXXHOPzXhOTRAQ==",
        "shasum": "2343f884639abf5b89e419a19881c01b11ac3f31",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-5.2.0-next.4.tgz",
        "fileCount": 85,
        "unpackedSize": 291098,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQD7dX+/Kdo1wWUiXs7I5Py+TivrfGTAoIYigWNirm7UkgIgbKI5Nh51q8Cnecuskr66T7jHVMzBTM+BKHpxpt2D6x0="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj8P/wACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrhBg//aUJOQqPJAIN6H6XjiNaZukHvgXs+ntWzfQc9tC+pYNU9NylO\r\nA76dh7ieIV0DT8fI42wJQVoBmRsrRsNasqk5JEg6SEj5PaCOaAXR9PKAqdj5\r\nQ9EzqCP+7p6YHbkaNt28m9+f+XnKg5UUyHOu+MY0hNrl3SqrKduCzDH4HOn7\r\niZwKYDE88n+3Ni0WCpMrGS+w60cfpgf0PCV0GNSmwGH7MpcTuidGPT+aGFpk\r\nc6zZqHWQ8eUOK+yj9O6is7CoYD8SqGr0OAijRPry+X3Zu8E2+RFsVFboD+Qw\r\nAbYzlu6MV9I1AsTPHwkUdd47JlIFNMLstr1A6F2Wgq1ERNr4aXrm/TGFCO2H\r\nttRRHTWa99F2hzGzhcYcax3diZj8xwepf2TpxyFYZsXIXjg0rrdLdilW5He1\r\nIWIPzAfrpE0hyA21ubOq1sGqp891YKu/4i6hRtmwOXuwdsxLPWRx5MMNYBZH\r\ngTbVaJY52aBcZC8cAGWBrPRemfONLUt6SdgpCDVt4enR0Xja6VZleR3KJ3ee\r\nOVJD6SijaFPBK6cuSQ4bstotjPWVzvJ6qJ8KpOazINDokogVtNHxnD2wzyEv\r\nUXf9ABdwdOcCPtAZu15aq0q43ZaC/bzRy+zTnpbG6eR5dgMqXVlRVpa6cNS1\r\nkBvDa+vDdcKxoNVdaG3z18aPrHrCCHjYJ4Q=\r\n=HVO9\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_5.2.0-next.4_1676738544227_0.6090811532785014"
      },
      "_hasShrinkwrap": false
    },
    "5.2.0-next.5": {
      "name": "graphql-request",
      "version": "5.2.0-next.5",
      "type": "module",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@7.27.1",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "format": "prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check .",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.16",
        "@types/extract-files": "^8.1.1",
        "@types/node": "^18.11.18",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.52.0",
        "@typescript-eslint/parser": "^5.52.0",
        "@vitest/coverage-c8": "^0.28.2",
        "apollo-server-express": "^3.11.1",
        "body-parser": "^1.20.1",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.34.0",
        "eslint-config-prettier": "^8.6.0",
        "eslint-plugin-deprecation": "^1.3.3",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.5",
        "graphql-ws": "^5.11.2",
        "happy-dom": "^8.1.5",
        "prettier": "^2.8.3",
        "type-fest": "^3.5.3",
        "typescript": "^4.9.4",
        "vitest": "^0.29.0",
        "ws": "^8.12.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Features](#features)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Community](#community)\n  - [Get typed GraphQL Queries with GraphQL Code Generator](#get-typed-graphql-queries-with-graphql-code-generator)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n    - [Set endpoint](#set-endpoint)\n    - [passing-headers-in-each-request](#passing-headers-in-each-request)\n    - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n  - [Custom JSON serializer](#custom-json-serializer)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [Making a GET request](#making-a-get-request)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n  - [Middleware](#middleware)\n  - [ErrorPolicy](#errorpolicy)\n    - [None (default)](#none-default)\n    - [Ignore](#ignore)\n    - [All](#all)\n- [FAQ](#faq)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n### Get typed GraphQL Queries with GraphQL Code Generator\n\n`graphql-request@^5` supports `TypedDocumentNode`, the typed counterpart of `graphql`'s `DocumentNode`.\n\nInstalling and configuring [GraphQL Code Generator](https://www.the-guild.dev/graphql/codegen) requires a few steps in order to get end-to-end typed GraphQL operations using the provided `graphql()` helper:\n\n```ts\nimport request from 'graphql-request'\nimport { graphql } from './gql/gql'\n\nconst getMovieQueryDocument = graphql(/* GraphQL */ `\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`)\n\nconst data = await request(\n  'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr',\n  getMovieQueryDocument,\n  // variables are type-checked!\n  { title: 'Inception' }\n)\n\n// `data.Movie` is typed!\n```\n\n[_The complete example is available in the GraphQL Code Generator repository_](https://github.com/dotansimha/graphql-code-generator/tree/master/examples/front-end/react/graphql-request)\n\nVisit GraphQL Code Generator's dedicated guide to get started: https://www.the-guild.dev/graphql/codegen/docs/guides/react-vue.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request'\n;(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/'\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nIt's also possible to use an async function as a request middleware. The resolved data will be passed to the request:\n\n```ts\nasync function middleware(request: RequestInit) {\n  const token = await getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "d5a40129505c261a46ad892b10fde2eeb87c0261",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@5.2.0-next.5",
      "_nodeVersion": "16.19.1",
      "_npmVersion": "8.19.3",
      "dist": {
        "integrity": "sha512-kqEv3r9lMReGZ0jPEa99nPzn7grTajZmGeW1NAWkzMcx/qPglSroIjrBsqRSnMFrjhA1Sekz0F4xIc9SIe4XVQ==",
        "shasum": "9b8583995530677579e5c873ee8a569bc1bd06b7",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-5.2.0-next.5.tgz",
        "fileCount": 85,
        "unpackedSize": 291998,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGtjs0rrkhtVxkZ6mu0KuU1WjwXVNHKxeOIxstTgx1bUAiEAuvP7flvB5TLqOzDGzkX1CU6qhyCi9gguUgCEdC6nEVI="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj+f5HACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoAvw/+PUu2dpx61zjEZNld3cruG7DHDQaKXBI5BRgr8AY/MU75nPvm\r\nXUHWuXV1SZTt6IzbGhcfdoGlFfcepMT6FJ6EwIstlSdraqwJFpZ9BYHhq1gF\r\nRXVNuIPcAd6O7fCfPKP9keVtESTwn7DFil6U3Hh7rydIIso3dQPa7JgNySBi\r\nrZ3f2MYgcNOMtUkIAIZpZX48I00V/Ot9+Xu7se21h2YqaL5KPkORutReSXgk\r\ng4fd0upGvpqK/hleG+P6P4rLHlyHEDlWIxrH1tDit82LYTdXlD3OgYu5hwf9\r\ngQ6H8qSMshepebmgX1d9L8Inkz/aTsiqK6AhFSjVe9SaRva+FbdVOwa2cNuc\r\nUNxtYgfau6Hd6fRgqIwulyXabv640vhmnaU+hGpf5NeQ4+ogF74h4LcYo/AX\r\nZS/Gwx+FFMk/0Rhxwgb9aGSFeoL/pmo0y7NbtqvjBEEOBZBIkdbwguLc2ZUA\r\nSOhsI58pdupmaVissey98EW4EtdhWRxNuX8qcFfW4jL8ECRoQOF2k2/F2/bS\r\nKSBU4GdwqydeC013U5KJEYVunqA2Up2JUcpyPd9sXCVisFu0k76drAiSbYLX\r\n0DVOZTL8vLJc0ywAPMltdwcW8xBWoZGPbeEsd6sZOmUYABshMJ/YV/JmR329\r\nlP/ajFVGu9besdyAwILdQXexo28/69UjiKI=\r\n=Mx8G\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_5.2.0-next.5_1677327943057_0.06946138411410652"
      },
      "_hasShrinkwrap": false
    },
    "5.2.0": {
      "name": "graphql-request",
      "version": "5.2.0",
      "type": "module",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@7.28.0",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "format": "prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check .",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.16",
        "@types/extract-files": "^8.1.1",
        "@types/node": "^18.11.18",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.52.0",
        "@typescript-eslint/parser": "^5.52.0",
        "@vitest/coverage-c8": "^0.29.0",
        "apollo-server-express": "^3.11.1",
        "body-parser": "^1.20.1",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.34.0",
        "eslint-config-prettier": "^8.6.0",
        "eslint-plugin-deprecation": "^1.3.3",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.5",
        "graphql-ws": "^5.11.2",
        "happy-dom": "^8.1.5",
        "prettier": "^2.8.3",
        "type-fest": "^3.5.3",
        "typescript": "^4.9.4",
        "vitest": "^0.29.0",
        "ws": "^8.12.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "gitHead": "7bf2d10f0f09eeba175e13bb6fd95a794d37c091",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@5.2.0",
      "_nodeVersion": "16.19.1",
      "_npmVersion": "8.19.3",
      "dist": {
        "integrity": "sha512-pLhKIvnMyBERL0dtFI3medKqWOz/RhHdcgbZ+hMMIb32mEPa5MJSzS4AuXxfI4sRAu6JVVk5tvXuGfCWl9JYWQ==",
        "shasum": "a05fb54a517d91bb2d7aefa17ade4523dc5ebdca",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-5.2.0.tgz",
        "fileCount": 85,
        "unpackedSize": 291991,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD03GjRCYMXpktlyY0xHTe2UkoJLgqOnbM3kuD8EgUbdAIhAK5+Grcrr9iz53qkxCzNexdcES920gygwQAiQpRZbsCH"
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj/3rZACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo5YA/+KvY7fHXCETh++BGnQY1haFbtjTz5DU8pToxerFhNi2tsLPHw\r\ndX9PfSV3SpE4ptPz9y4e9eHdKlaamhlnDMnp8Md5UfAV3+X815IMwyusOpbP\r\nSRsR28xGBfOQEHoqjAFjt6r+mTO+jVQ/TjDAuWgDXOoI4RnJ3xf7sotj7gpK\r\nyGkLMYFj3axclILyNOdTUbKZnTudoSM66i5l+rXNygMtQ01XikgM1QQ31LJk\r\ngScX+55YCcQY7ZCfJw+s5UBLpuWgNPu0khucdCNr5OEvDtsxsvRUq3a/V4wE\r\nK+gyqCQx2gv0eRv9qfm0jqpJVQcAfmRki6SmnGdDY75CGHv02jk+NL80nRKh\r\nAeyq8lzfQ5KCNqC5+QHg4kJ+6U/ZAJJkPMzYe9FsFmMh16WXAqq/2951bvR7\r\n4q7P15khAEjOJmF95jIM7sh0iwVpJNs4NoookigGTr0s/gqMuBGlsutO+hgk\r\nP6ZdVPYQrAEO9/9PlWCT5i+v7rExzTvZLEeQIGScJOJtHKMop56Pnw/zlVMS\r\nJLXL6fcbWAuhymd3wwPv/wnp+0/h1lThhQ8PFrrzi2Ugm1bKTkiBGEKQ43o5\r\nSYddj3yffGD6V0FIwVuyffjR7cGlfYopscj62kF3NBBhdk98WkLIpTHW2aQF\r\nfvnQBYaDH7lnMIktpwZvMlya+qFPjAjC1qk=\r\n=YXzM\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_5.2.0_1677687513465_0.9037648303996753"
      },
      "_hasShrinkwrap": false
    },
    "5.2.1-next.1": {
      "name": "graphql-request",
      "version": "5.2.1-next.1",
      "type": "module",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@7.29.1",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "format": "prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check .",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.1.1",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^9.0.16",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.16",
        "@types/extract-files": "^8.1.1",
        "@types/node": "^18.11.18",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.52.0",
        "@typescript-eslint/parser": "^5.52.0",
        "@vitest/coverage-c8": "^0.29.0",
        "apollo-server-express": "^3.11.1",
        "body-parser": "^1.20.1",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.34.0",
        "eslint-config-prettier": "^8.6.0",
        "eslint-plugin-deprecation": "^1.3.3",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.5",
        "graphql-ws": "^5.11.2",
        "happy-dom": "^8.1.5",
        "prettier": "^2.8.3",
        "type-fest": "^3.5.3",
        "typescript": "^4.9.4",
        "vitest": "^0.29.0",
        "ws": "^8.12.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Features](#features)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Community](#community)\n  - [Get typed GraphQL Queries with GraphQL Code Generator](#get-typed-graphql-queries-with-graphql-code-generator)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n    - [Set endpoint](#set-endpoint)\n    - [passing-headers-in-each-request](#passing-headers-in-each-request)\n    - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n  - [Custom JSON serializer](#custom-json-serializer)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [Making a GET request](#making-a-get-request)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n  - [Middleware](#middleware)\n  - [ErrorPolicy](#errorpolicy)\n    - [None (default)](#none-default)\n    - [Ignore](#ignore)\n    - [All](#all)\n- [Troubleshooting](#troubleshooting)\n  - [React Native + Metro does not support yet `exports` field](#react-native--metro-does-not-support-yet-exports-field)\n- [FAQ](#faq)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n### Get typed GraphQL Queries with GraphQL Code Generator\n\n`graphql-request@^5` supports `TypedDocumentNode`, the typed counterpart of `graphql`'s `DocumentNode`.\n\nInstalling and configuring [GraphQL Code Generator](https://www.the-guild.dev/graphql/codegen) requires a few steps in order to get end-to-end typed GraphQL operations using the provided `graphql()` helper:\n\n```ts\nimport request from 'graphql-request'\nimport { graphql } from './gql/gql'\n\nconst getMovieQueryDocument = graphql(/* GraphQL */ `\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`)\n\nconst data = await request(\n  'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr',\n  getMovieQueryDocument,\n  // variables are type-checked!\n  { title: 'Inception' }\n)\n\n// `data.Movie` is typed!\n```\n\n[_The complete example is available in the GraphQL Code Generator repository_](https://github.com/dotansimha/graphql-code-generator/tree/master/examples/front-end/react/graphql-request)\n\nVisit GraphQL Code Generator's dedicated guide to get started: https://www.the-guild.dev/graphql/codegen/docs/guides/react-vue.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request'\n;(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/'\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nIt's also possible to use an async function as a request middleware. The resolved data will be passed to the request:\n\n```ts\nasync function middleware(request: RequestInit) {\n  const token = await getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Troubleshooting\n\n#### React Native + Metro does not support yet `exports` field\n\nYou might encounter the error below when you try to build a React Native app that uses `graphql-request`:\n\n```\nError: While trying to resolve module \"graphql-request\" from file \"/path/to/src/App.ts\", the package \"/path/to/node_modules/graphql-request/package.json\" was successfully found. However, this package itself specifies a \"main\" module field that could not be resolved (\"/path/to/node_modules/graphql-request/index\".\n```\n\nThis happens because Metro [does not support yet](https://github.com/facebook/metro/issues/670) the `exports` field in package.json. A workaround for this problem is to edit the `metro.config.js` file in your project and add a new [`resolveRequest`](https://facebook.github.io/metro/docs/configuration/#resolverequest) for `graphql-request`. Like this:\n\n```javascript\nresolver: {\n  resolveRequest: (context, moduleName, platform) => {\n    if (moduleName.startsWith('graphql-request')) {\n      return {\n        filePath: `${__dirname}/node_modules/graphql-request/build/esm/index.js`,\n        type: 'sourceFile',\n      }\n    }\n\n    return context.resolveRequest(context, moduleName, platform)\n  }\n}\n```\n\nAfter doing this change, clear Metro's cache and restart your application.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "8a98925644c7b5b0e13baabeaee8bdbff0f35150",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@5.2.1-next.1",
      "_nodeVersion": "16.19.1",
      "_npmVersion": "8.19.3",
      "dist": {
        "integrity": "sha512-fMnIy4i2vS8rnxqEDqDbc3D+ZXyj3G7TdS4jWlRDRMxuSK6enS03UMy+qFYyvWMT4Uso1CgVJ7M4/FiM7fBDXA==",
        "shasum": "50113e9b856fcf22e6fcf3a1aec01327d6ec4056",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-5.2.1-next.1.tgz",
        "fileCount": 85,
        "unpackedSize": 293830,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIB5mKoJQIn8rMpQbDpS8ieYIvNBPCS4wzDjpPwn1MrppAiEAsOTVUV9zLYNvkmAfnAKcckHXL+O+Br3AAT722no7QVo="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkDIjTACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqz/Q//WILbn5TZEJOj7tUYvkQMyhEl3rsVOgBo67uEBVF2KHuBTgIV\r\n05tmhG/xGty8v7/Ls0jB8M6XdNmTajCmDnYjaeiByo2MT60WOXJ3I0NjTFu7\r\n3DHwz6NY7r7lIuJc64iCRSoM7+7kC487pC2HywMQZcknfvVyVSfb03GFTq7o\r\nDnjk3H2sbAiKXor54z5NVFQPOqQmLdWhIqBCYXxekxJcefbJ5bB/uIPz0gaq\r\nPGuRvpuQj9WsWsUZFIDtvLuH48O3+IqQUsyZab7bYeS0QELXnzV4aF2Ew9S1\r\nmZC97YF+d3/1fs/DYZmbQ+eoOgvh2I/QQ5/MPKSPeNTPWy6QPKo4/e4ZWj/q\r\nL427fQ7XXjRccgvhT3T5MTA9H5SJ5Uvs37rNLaf8B3P1EvhbAUtQ3f8dzY59\r\nMou/q08L9IxnxGO0XiTCH31ZsKTAxZzWAkUZgzfK5fZT+KWRw025EeinB705\r\nfy8NjdLuNMczTdUAAybnZ1u15TTHSWyM51Hhe9Qdhj6jFYP24sCHYmzBNjU+\r\nJIhcEeyGXvsGaDC9CgJhaoFvMjBb7oaIbxQKPKdabd0IJ3MEsj2nL6fBhy1W\r\nI/cOaW7B9xN/OyLyQFRox3XyryqeqJH2/+XZvRtZiCzWYWEc3mlguJ1vRsNh\r\noy2E3XWpTkEJni1T9/GAbEtyrMATZkb/GLE=\r\n=d2bD\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_5.2.1-next.1_1678543059721_0.11278423191166809"
      },
      "_hasShrinkwrap": false
    },
    "6.0.0-next.2": {
      "name": "graphql-request",
      "version": "6.0.0-next.2",
      "type": "module",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.1.1",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "format": "prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check .",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^9.0.16",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.16",
        "@types/extract-files": "^8.1.1",
        "@types/node": "^18.15.11",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.57.1",
        "@typescript-eslint/parser": "^5.57.1",
        "@vitest/coverage-c8": "^0.29.0",
        "apollo-server-express": "^3.11.1",
        "body-parser": "^1.20.1",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.37.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-plugin-deprecation": "^1.4.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.5",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^9.1.7",
        "prettier": "^2.8.3",
        "type-fest": "^3.7.2",
        "typescript": "^5.0.3",
        "vitest": "^0.29.0",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Features](#features)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Community](#community)\n  - [Get typed GraphQL Queries with GraphQL Code Generator](#get-typed-graphql-queries-with-graphql-code-generator)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n    - [Set endpoint](#set-endpoint)\n    - [passing-headers-in-each-request](#passing-headers-in-each-request)\n    - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n  - [Custom JSON serializer](#custom-json-serializer)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [Making a GET request](#making-a-get-request)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n  - [Middleware](#middleware)\n  - [ErrorPolicy](#errorpolicy)\n    - [None (default)](#none-default)\n    - [Ignore](#ignore)\n    - [All](#all)\n- [Troubleshooting](#troubleshooting)\n  - [React Native + Metro does not support yet `exports` field](#react-native--metro-does-not-support-yet-exports-field)\n- [FAQ](#faq)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Community\n\n### Get typed GraphQL Queries with GraphQL Code Generator\n\n`graphql-request@^5` supports `TypedDocumentNode`, the typed counterpart of `graphql`'s `DocumentNode`.\n\nInstalling and configuring [GraphQL Code Generator](https://www.the-guild.dev/graphql/codegen) requires a few steps in order to get end-to-end typed GraphQL operations using the provided `graphql()` helper:\n\n```ts\nimport request from 'graphql-request'\nimport { graphql } from './gql/gql'\n\nconst getMovieQueryDocument = graphql(/* GraphQL */ `\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`)\n\nconst data = await request(\n  'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr',\n  getMovieQueryDocument,\n  // variables are type-checked!\n  { title: 'Inception' }\n)\n\n// `data.Movie` is typed!\n```\n\n[_The complete example is available in the GraphQL Code Generator repository_](https://github.com/dotansimha/graphql-code-generator/tree/master/examples/front-end/react/graphql-request)\n\nVisit GraphQL Code Generator's dedicated guide to get started: https://www.the-guild.dev/graphql/codegen/docs/guides/react-vue.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests } from 'graphql-request'\n;(async function () {\n  const endpoint = 'https://api.spacex.land/graphql/'\n\n  const query1 = /* GraphQL */ `\n    query ($id: ID!) {\n      capsule(id: $id) {\n        id\n        landings\n      }\n    }\n  `\n\n  const query2 = /* GraphQL */ `\n    {\n      rockets(limit: 10) {\n        active\n      }\n    }\n  `\n\n  const data = await batchRequests(endpoint, [\n    { document: query1, variables: { id: 'C105' } },\n    { document: query2 },\n  ])\n  console.log(JSON.stringify(data, undefined, 2))\n})().catch((error) => console.error(error))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nIt's also possible to use an async function as a request middleware. The resolved data will be passed to the request:\n\n```ts\nasync function middleware(request: RequestInit) {\n  const token = await getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Troubleshooting\n\n#### React Native + Metro does not support yet `exports` field\n\nYou might encounter the error below when you try to build a React Native app that uses `graphql-request`:\n\n```\nError: While trying to resolve module \"graphql-request\" from file \"/path/to/src/App.ts\", the package \"/path/to/node_modules/graphql-request/package.json\" was successfully found. However, this package itself specifies a \"main\" module field that could not be resolved (\"/path/to/node_modules/graphql-request/index\".\n```\n\nThis happens because Metro [does not support yet](https://github.com/facebook/metro/issues/670) the `exports` field in package.json. A workaround for this problem is to edit the `metro.config.js` file in your project and add a new [`resolveRequest`](https://facebook.github.io/metro/docs/configuration/#resolverequest) for `graphql-request`. Like this:\n\n```javascript\nresolver: {\n  resolveRequest: (context, moduleName, platform) => {\n    if (moduleName.startsWith('graphql-request')) {\n      return {\n        filePath: `${__dirname}/node_modules/graphql-request/build/esm/index.js`,\n        type: 'sourceFile',\n      }\n    }\n\n    return context.resolveRequest(context, moduleName, platform)\n  }\n}\n```\n\nAfter doing this change, clear Metro's cache and restart your application.\n\n## FAQ\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "702ef92ae382455ede353ac34300b25d31749e1c",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@6.0.0-next.2",
      "_nodeVersion": "16.19.1",
      "_npmVersion": "8.19.3",
      "dist": {
        "integrity": "sha512-nuYnGm8d5cIfUhTFykDBcWSkCC7AKSJ4Ul3fMzGLlVBzqBWOx0BN+fMwfvflqVPwrlUFReVvbsDqqpXNvJW1Kg==",
        "shasum": "dfb8e5e4ffa69cf0e43e0f379d12448a014dc152",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-6.0.0-next.2.tgz",
        "fileCount": 76,
        "unpackedSize": 226440,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCd5bcDLkCavUfVc4icP5TfoDmqwLSPjwTGGKIdqT8PJQIhALwKVTkrR6LaI2wtBxME41i1d8IeNtmvfsio5Ksl+TM7"
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkLK4yACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpOsA/5AFpul1gBYk6kk2cqECMo+B5JeF0LDZfzVAa4LXhUV6Qd/8Ix\r\nkaV0n3fz447N4vnBG6qo64sDj3xmtDdxWs+1K73ATx5hyYbcajkNt1IULPXs\r\ncwDblEEjNr7L6/fX7QQ8tu8PJjyYmpZsJzICLJFulG12miIykx5snoDR45Gi\r\nD2iCSUN32V0Tl/1N1PIXR1h68mw8kom0isKsZP+m2+gZxaCtDTHAb5N3i86J\r\n5byY7aeF1/xhTnxrvFvd3aBa5g1vbp2TFlOyFo6Rvku7LGFO6CP8YCwfxLbz\r\noLpMT2NQeXB46QDj0Z2ZfaHykuylxe0SDJ8djQKX8mYAHTpL0++uwA4wYVcg\r\nUlbwEBNVDhAgoh5d0r+u/GEkMgZxAJI0+c06KO2JJuEJ0zCXS6WYLSckUGyB\r\ncd6Vx9wjDsxd2GDEI/S/PbXJycm6ZuZonS/NsBbr89yQsR2qKsvjs8qHeYop\r\ng/iwMHFayYA+Cu+8gfKxN2HcgxS2wyQEZFnYq7NJjLCLmss+e2cO+wCDlRlL\r\nKd1n3aSPvvrAtS1YoEoVNH/vFWwR/lQzu8z+oUaFCdUAlUq7+NDG7VnzUXaQ\r\nXA8Se0DkSAuVn7/d5eSGm22rj+BXufoOwmxCKmMl14HJ5LBt96mi3N5Iq68A\r\nWc6mDZNg9NJUoksoXOFj6h7v+z/XDp92i0s=\r\n=08pR\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_6.0.0-next.2_1680649778694_0.4714100206735439"
      },
      "_hasShrinkwrap": false
    },
    "6.0.0-next.3": {
      "name": "graphql-request",
      "version": "6.0.0-next.3",
      "type": "module",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.1.1",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "format": "prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check .",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^9.0.17",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/extract-files": "^8.1.1",
        "@types/node": "^18.15.11",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.57.1",
        "@typescript-eslint/parser": "^5.57.1",
        "@vitest/coverage-c8": "^0.29.8",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.37.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^1.4.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.5",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^9.1.7",
        "prettier": "^2.8.7",
        "type-fest": "^3.7.2",
        "typescript": "^5.0.3",
        "vitest": "^0.29.8",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Features](#features)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n    - [Set endpoint](#set-endpoint)\n    - [passing-headers-in-each-request](#passing-headers-in-each-request)\n    - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n  - [Custom JSON serializer](#custom-json-serializer)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [Making a GET request](#making-a-get-request)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n  - [Middleware](#middleware)\n  - [ErrorPolicy](#errorpolicy)\n    - [None (default)](#none-default)\n    - [Ignore](#ignore)\n    - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n  - [Why is the package `main` field missing?](#why-is-the-package-main-field-missing)\n  - [How do I work around React Native + Metro's lack of `exports` support?](#how-do-i-work-around-react-native--metros-lack-of-exports-support)\n  - [Get typed GraphQL Queries with GraphQL Code Generator](#get-typed-graphql-queries-with-graphql-code-generator)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests, gql } from 'graphql-request'\n\nconst endpoint = 'https://api.spacex.land/graphql/'\n\nconst query1 = gql`\n  query ($id: ID!) {\n    capsule(id: $id) {\n      id\n      landings\n    }\n  }\n`\n\nconst query2 = gql`\n  {\n    rockets(limit: 10) {\n      active\n    }\n  }\n`\n\nconst data = await batchRequests(endpoint, [\n  { document: query1, variables: { id: 'C105' } },\n  { document: query2 },\n])\n\nconsole.log(JSON.stringify(data, undefined, 2))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nIt's also possible to use an async function as a request middleware. The resolved data will be passed to the request:\n\n```ts\nasync function middleware(request: RequestInit) {\n  const token = await getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n\n#### Why is the package `main` field missing?\n\nThe `main` field was deprecated by Node.js on April 23 2019 when version 12 was released, in favour of [entrypoints (`exports` package manifest field)](https://nodejs.org/api/packages.html#package-entry-points). I believe enough time has passed that tools should be adopting the new standards now.\n\n#### How do I work around React Native + Metro's lack of `exports` support?\n\nYou might encounter the error below when you try to build a React Native app that uses `graphql-request`:\n\n```\nError: While trying to resolve module \"graphql-request\" from file \"/path/to/src/App.ts\", the package \"/path/to/node_modules/graphql-request/package.json\" was successfully found. However, this package itself specifies a \"main\" module field that could not be resolved (\"/path/to/node_modules/graphql-request/index\".\n```\n\nThis happens because Metro [does not support yet](https://github.com/facebook/metro/issues/670) the `exports` field in package.json. A workaround for this problem is to edit the `metro.config.js` file in your project and add a new [`resolveRequest`](https://facebook.github.io/metro/docs/configuration/#resolverequest) for `graphql-request`. Like this:\n\n```javascript\nresolver: {\n  resolveRequest: (context, moduleName, platform) => {\n    if (moduleName.startsWith('graphql-request')) {\n      return {\n        filePath: `${__dirname}/node_modules/graphql-request/build/esm/index.js`,\n        type: 'sourceFile',\n      }\n    }\n\n    return context.resolveRequest(context, moduleName, platform)\n  }\n}\n```\n\nAfter doing this change, clear Metro's cache and restart your application.\n\n#### Get typed GraphQL Queries with GraphQL Code Generator\n\n`graphql-request@^5` supports `TypedDocumentNode`, the typed counterpart of `graphql`'s `DocumentNode`.\n\nInstalling and configuring [GraphQL Code Generator](https://www.the-guild.dev/graphql/codegen) requires a few steps in order to get end-to-end typed GraphQL operations using the provided `graphql()` helper:\n\n```ts\nimport request from 'graphql-request'\nimport { graphql } from './gql/gql'\n\nconst getMovieQueryDocument = graphql(gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`)\n\nconst data = await request(\n  'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr',\n  getMovieQueryDocument,\n  // variables are type-checked!\n  { title: 'Inception' }\n)\n\n// `data.Movie` is typed!\n```\n\n[_The complete example is available in the GraphQL Code Generator repository_](https://github.com/dotansimha/graphql-code-generator/tree/master/examples/front-end/react/graphql-request)\n\nVisit GraphQL Code Generator's dedicated guide to get started: https://www.the-guild.dev/graphql/codegen/docs/guides/react-vue.\n",
      "readmeFilename": "README.md",
      "gitHead": "b563ad529c6d6247d2a338fe6f2754ffc061bfbf",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@6.0.0-next.3",
      "_nodeVersion": "16.19.1",
      "_npmVersion": "8.19.3",
      "dist": {
        "integrity": "sha512-kE2F071pOmFc0UeIXaQo3sa8/gu8qW/mvwaZrDK06CmtXNTxwE+vq3zqnhjZJB4wL7zs7YaeTwsl3GgpQYDILQ==",
        "shasum": "7ba0f36eb13a56f193f0a625619f07211acd0b11",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-6.0.0-next.3.tgz",
        "fileCount": 76,
        "unpackedSize": 227687,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQChdAZJqgKR34WN9rMgbWf8O2G5DKVrlSCx8xBxWk272QIgHeE4bpzthb2xCf8Stjqmz1WkFfV+7/UCYrkWmvwdE8E="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkLOEiACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpPSw//dKKF8d6x/aPaA7l0Bs9W3OnON5ZJxNSEMvdELWVr/KA8e2fO\r\n85/dxA1KGxodAogjK/ihcFwrbE7bhJR12b8ktPebK8QFfq0jd+64NXGxSOeM\r\ntLcyqO+QBNR0OQFruIVTi+TSy2TN9Lrf9koEk9Q486OmMfTD9jqqSIMClnrY\r\nUoh+GNLRdtRwVChefhAGj7VOJAYUTbgNQwvYTQ5DI0EqinTz5Nt8SNCtx+PB\r\nXlxZB+d7mwMmb8JFVQo6A/RYxlu4ntvNG/3qTfsN7tzAZFafxf0oUlouUUig\r\nnLflf90UuA2KTl14JprgzaDqIoZVbYx4e+Rfga+ABbo74cVMO6LmfmWq78Jo\r\nTYuNR+ArEwcNDSqhBw7apAGP/1BH81BOUNVtQHtgNEsXeQ08cAGxM3BzM3LY\r\nMXnEiq0EPfJ5Wz0nkZitEY0ipwIgro1Av3rG1QfgM1jJiulqj+Dw164CBtn+\r\nY+upSdkp9YGRju4xRTOZ9ociQtsF5sJ+mRWrODDCjVbET3EZdqicsayOBuIC\r\n7pUuPQwAhV2uMN0+SNb0s3IFSPnXJtB2Dq8jvJfn55Xin9YZS15WGx06SOIO\r\nwGbo8XzaYfMzhQ0/eFNrS7dkSiO5RLTpnTtBDz9ujeaFQHT6BAOMpxpnRDC3\r\n7M0mD7Mo+CdnBRpvprIznR4CM6ITJY3BFlQ=\r\n=8h0s\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_6.0.0-next.3_1680662817936_0.2870037308746207"
      },
      "_hasShrinkwrap": false
    },
    "6.0.0-next.4": {
      "name": "graphql-request",
      "version": "6.0.0-next.4",
      "type": "module",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.1.1",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "format": "prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check .",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^9.0.17",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/extract-files": "^8.1.1",
        "@types/node": "^18.15.11",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.57.1",
        "@typescript-eslint/parser": "^5.57.1",
        "@vitest/coverage-c8": "^0.29.8",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.37.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^1.4.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.5",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^9.1.7",
        "prettier": "^2.8.7",
        "type-fest": "^3.7.2",
        "typescript": "^5.0.3",
        "vitest": "^0.29.8",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Features](#features)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n    - [Set endpoint](#set-endpoint)\n    - [passing-headers-in-each-request](#passing-headers-in-each-request)\n    - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n  - [Custom JSON serializer](#custom-json-serializer)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [Making a GET request](#making-a-get-request)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n  - [Middleware](#middleware)\n  - [ErrorPolicy](#errorpolicy)\n    - [None (default)](#none-default)\n    - [Ignore](#ignore)\n    - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n  - [Why is the package `main` field missing?](#why-is-the-package-main-field-missing)\n  - [How do I work around React Native + Metro's lack of `exports` support?](#how-do-i-work-around-react-native--metros-lack-of-exports-support)\n  - [Get typed GraphQL Queries with GraphQL Code Generator](#get-typed-graphql-queries-with-graphql-code-generator)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now().toString() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests, gql } from 'graphql-request'\n\nconst endpoint = 'https://api.spacex.land/graphql/'\n\nconst query1 = gql`\n  query ($id: ID!) {\n    capsule(id: $id) {\n      id\n      landings\n    }\n  }\n`\n\nconst query2 = gql`\n  {\n    rockets(limit: 10) {\n      active\n    }\n  }\n`\n\nconst data = await batchRequests(endpoint, [\n  { document: query1, variables: { id: 'C105' } },\n  { document: query2 },\n])\n\nconsole.log(JSON.stringify(data, undefined, 2))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nIt's also possible to use an async function as a request middleware. The resolved data will be passed to the request:\n\n```ts\nasync function middleware(request: RequestInit) {\n  const token = await getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n\n#### Why is the package `main` field missing?\n\nThe `main` field was deprecated by Node.js on April 23 2019 when version 12 was released, in favour of [entrypoints (`exports` package manifest field)](https://nodejs.org/api/packages.html#package-entry-points). I believe enough time has passed that tools should be adopting the new standards now.\n\n#### How do I work around React Native + Metro's lack of `exports` support?\n\nYou might encounter the error below when you try to build a React Native app that uses `graphql-request`:\n\n```\nError: While trying to resolve module \"graphql-request\" from file \"/path/to/src/App.ts\", the package \"/path/to/node_modules/graphql-request/package.json\" was successfully found. However, this package itself specifies a \"main\" module field that could not be resolved (\"/path/to/node_modules/graphql-request/index\".\n```\n\nThis happens because Metro [does not support yet](https://github.com/facebook/metro/issues/670) the `exports` field in package.json. A workaround for this problem is to edit the `metro.config.js` file in your project and add a new [`resolveRequest`](https://facebook.github.io/metro/docs/configuration/#resolverequest) for `graphql-request`. Like this:\n\n```javascript\nresolver: {\n  resolveRequest: (context, moduleName, platform) => {\n    if (moduleName.startsWith('graphql-request')) {\n      return {\n        filePath: `${__dirname}/node_modules/graphql-request/build/esm/index.js`,\n        type: 'sourceFile',\n      }\n    }\n\n    return context.resolveRequest(context, moduleName, platform)\n  }\n}\n```\n\nAfter doing this change, clear Metro's cache and restart your application.\n\n#### Get typed GraphQL Queries with GraphQL Code Generator\n\n`graphql-request@^5` supports `TypedDocumentNode`, the typed counterpart of `graphql`'s `DocumentNode`.\n\nInstalling and configuring [GraphQL Code Generator](https://www.the-guild.dev/graphql/codegen) requires a few steps in order to get end-to-end typed GraphQL operations using the provided `graphql()` helper:\n\n```ts\nimport request from 'graphql-request'\nimport { graphql } from './gql/gql'\n\nconst getMovieQueryDocument = graphql(gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`)\n\nconst data = await request(\n  'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr',\n  getMovieQueryDocument,\n  // variables are type-checked!\n  { title: 'Inception' }\n)\n\n// `data.Movie` is typed!\n```\n\n[_The complete example is available in the GraphQL Code Generator repository_](https://github.com/dotansimha/graphql-code-generator/tree/master/examples/front-end/react/graphql-request)\n\nVisit GraphQL Code Generator's dedicated guide to get started: https://www.the-guild.dev/graphql/codegen/docs/guides/react-vue.\n",
      "readmeFilename": "README.md",
      "gitHead": "8467a26bcfc57fa15b63664486250f55ea922353",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@6.0.0-next.4",
      "_nodeVersion": "16.19.1",
      "_npmVersion": "8.19.3",
      "dist": {
        "integrity": "sha512-mnbOZAe62C8T5VtJBucBLL8GxL+Wu/FRgf75/uQl/ySAc+LI4YQ7kevlBxK//lTLTYPEgrHUgKbPQqHBz92+6A==",
        "shasum": "0f3d63e3aaafc1a2edf2bdb1427810a0af773d7f",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-6.0.0-next.4.tgz",
        "fileCount": 76,
        "unpackedSize": 227666,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDdFtXz83xMTc2w0ARMeYS84pb1Cl0lgdcRk8eqKgGe0QIhAML0uSrEt63cASrPlNCdjykBcRD6S9kw9uFUcH9IJ+Tg"
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkLOj0ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoRrQ/+L+Qw5zN3wWYnq6ESeCrwak2/gIMEFGwOfSTouD0aTMbNHkzC\r\nr/X2WKT1SYZItI+1SvjDBMaAsktWZJ04N6OkVHpchWbM7lnxF5XhSrftLFiY\r\nj4fG5jwPNgGKP7hvM7hTwmR50Ta+pxc3ZCAY2WuFy5iACWTETf/tDHtqHxwu\r\nRTPni6rO+LeN88o7cEjYNZ0gD3UcwpvzVH3g0Gf9MbJCvx48BJ/eVS5IqaQE\r\nkeppk26M8aWTrNn8wCM1H6CwrJ3oazZ8UH5a08fZzE76SWpkscJG4WQcvFU+\r\nOp0267eofi1SaqO53tTUGnXCpj5MIZIkOHmGsLwpZYL2pcgtrI1PvIgRjq5f\r\n+Ig7vRk8cUsmA+lv/UWo5yVk8ronvOKLXWWJzb9fHSijqVASUNWCrBzNePSa\r\nwe9XEaEgbq3LLBgsxZlOkWAn7oKqNbn/tfvXDcirB8/f5LBjql5+su1OCe6I\r\n4eR9vFw3l6LPz1prjIVILBIvUZeFO4vz4ELSOK7ypNqAV/f05cM0VkV2s+hR\r\nCH9+oV/H+4GBNXDh9HvPJ6ra6FJZtoQ20FxG7k1tezxuxrC0cgcXuL4iVU50\r\nlTlxSsf6+LutgwexkpeElD4OHyAKE7mCIFGBvGp2ASkOc0tK1RHc/I6vJ7Q3\r\nbaf+H22TDHqYAvXoyBlj1avEs/6ir8Dvbrw=\r\n=r+PU\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_6.0.0-next.4_1680664820403_0.08601184081204827"
      },
      "_hasShrinkwrap": false
    },
    "6.0.0-next.5": {
      "name": "graphql-request",
      "version": "6.0.0-next.5",
      "type": "module",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.1.1",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "format": "prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check .",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^9.0.17",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/extract-files": "^8.1.1",
        "@types/node": "^18.15.11",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.57.1",
        "@typescript-eslint/parser": "^5.57.1",
        "@vitest/coverage-c8": "^0.29.8",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.37.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^1.4.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.5",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^9.1.7",
        "prettier": "^2.8.7",
        "type-fest": "^3.7.2",
        "typescript": "^5.0.3",
        "vitest": "^0.29.8",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Features](#features)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n    - [Set endpoint](#set-endpoint)\n    - [passing-headers-in-each-request](#passing-headers-in-each-request)\n    - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n  - [Custom JSON serializer](#custom-json-serializer)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [Making a GET request](#making-a-get-request)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n  - [Middleware](#middleware)\n  - [ErrorPolicy](#errorpolicy)\n    - [None (default)](#none-default)\n    - [Ignore](#ignore)\n    - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n  - [Why is the package `main` field missing?](#why-is-the-package-main-field-missing)\n  - [How do I work around React Native + Metro's lack of `exports` support?](#how-do-i-work-around-react-native--metros-lack-of-exports-support)\n  - [Get typed GraphQL Queries with GraphQL Code Generator](#get-typed-graphql-queries-with-graphql-code-generator)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now().toString() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests, gql } from 'graphql-request'\n\nconst endpoint = 'https://api.spacex.land/graphql/'\n\nconst query1 = gql`\n  query ($id: ID!) {\n    capsule(id: $id) {\n      id\n      landings\n    }\n  }\n`\n\nconst query2 = gql`\n  {\n    rockets(limit: 10) {\n      active\n    }\n  }\n`\n\nconst data = await batchRequests(endpoint, [\n  { document: query1, variables: { id: 'C105' } },\n  { document: query2 },\n])\n\nconsole.log(JSON.stringify(data, undefined, 2))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nIt's also possible to use an async function as a request middleware. The resolved data will be passed to the request:\n\n```ts\nasync function middleware(request: RequestInit) {\n  const token = await getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n\n#### Why is the package `main` field missing?\n\nThe `main` field was deprecated by Node.js on April 23 2019 when version 12 was released, in favour of [entrypoints (`exports` package manifest field)](https://nodejs.org/api/packages.html#package-entry-points). I believe enough time has passed that tools should be adopting the new standards now.\n\n#### How do I work around React Native + Metro's lack of `exports` support?\n\nYou might encounter the error below when you try to build a React Native app that uses `graphql-request`:\n\n```\nError: While trying to resolve module \"graphql-request\" from file \"/path/to/src/App.ts\", the package \"/path/to/node_modules/graphql-request/package.json\" was successfully found. However, this package itself specifies a \"main\" module field that could not be resolved (\"/path/to/node_modules/graphql-request/index\".\n```\n\nThis happens because Metro [does not support yet](https://github.com/facebook/metro/issues/670) the `exports` field in package.json. A workaround for this problem is to edit the `metro.config.js` file in your project and add a new [`resolveRequest`](https://facebook.github.io/metro/docs/configuration/#resolverequest) for `graphql-request`. Like this:\n\n```javascript\nresolver: {\n  resolveRequest: (context, moduleName, platform) => {\n    if (moduleName.startsWith('graphql-request')) {\n      return {\n        filePath: `${__dirname}/node_modules/graphql-request/build/esm/index.js`,\n        type: 'sourceFile',\n      }\n    }\n\n    return context.resolveRequest(context, moduleName, platform)\n  }\n}\n```\n\nAfter doing this change, clear Metro's cache and restart your application.\n\n#### Get typed GraphQL Queries with GraphQL Code Generator\n\n`graphql-request@^5` supports `TypedDocumentNode`, the typed counterpart of `graphql`'s `DocumentNode`.\n\nInstalling and configuring [GraphQL Code Generator](https://www.the-guild.dev/graphql/codegen) requires a few steps in order to get end-to-end typed GraphQL operations using the provided `graphql()` helper:\n\n```ts\nimport request from 'graphql-request'\nimport { graphql } from './gql/gql'\n\nconst getMovieQueryDocument = graphql(gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`)\n\nconst data = await request(\n  'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr',\n  getMovieQueryDocument,\n  // variables are type-checked!\n  { title: 'Inception' }\n)\n\n// `data.Movie` is typed!\n```\n\n[_The complete example is available in the GraphQL Code Generator repository_](https://github.com/dotansimha/graphql-code-generator/tree/master/examples/front-end/react/graphql-request)\n\nVisit GraphQL Code Generator's dedicated guide to get started: https://www.the-guild.dev/graphql/codegen/docs/guides/react-vue.\n",
      "readmeFilename": "README.md",
      "gitHead": "fee4476710c3cba2a3c1bf231f30e9feed0bba3c",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@6.0.0-next.5",
      "_nodeVersion": "16.19.1",
      "_npmVersion": "8.19.3",
      "dist": {
        "integrity": "sha512-jPQDZfz3krIuiCoGwLnhszOxGd7YyMZsP4TYEs17PmerT6Qll96q4TP+KtJx6HS80UVue3ZNOn7Ut1drHXEk1g==",
        "shasum": "6d2e74ea8a663afae2c21f319272e9d2fe14aa0e",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-6.0.0-next.5.tgz",
        "fileCount": 76,
        "unpackedSize": 227385,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDRNlRfQjPnb9j00cc3qP/0ZnSBxn7vsvyILG8ZCk3yyAIgA6hzPxppEKC0jvw8kWQCk+RYmE/lmEnDlok4TJuYQgY="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkLOl1ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoZmw/+LfhJW/NFmEU32eWNO9Uod8C/70cW7byfW6RgQ+B/aKSs4nAO\r\naqjyB4zraHyKpdIZGpHjF50WHx1p9SSryZP+CU6rm4qFZZEm1SwNcR2CY+1L\r\nomLRk1zR2MwUkL5gcG8H0980bFMIIDj4JhBtZRxrvzrqXSjGVRolT6L7Lmy/\r\n4yyPT2iV75Yv9+6PmAn9e3c9iXLIZ9N+UEcmBZvA5u8RlIaSzErMCtAGh3TK\r\nVcLPnUjsJjZY/7v9Zbtozn/OW22QUd+0x5L0EkPzdKGNL8wA73L3nbUzy6wy\r\nQqxD0nScCVDTfBhGXNbyF1hFXDQL664Zl4eVUv6/lZGNUDZYGlkACyh6Uyqd\r\nTrNOtyeSFx61+UsexQyIQzT+4bV4kejZkvpkDJFu8kz+42VwDflUJnWm0HM9\r\n5bQhr886CRsLhTkh7pdt0THG9qUwfLoWnjqt9JBv/dxjtwt6dkC7WOVSM7gp\r\nMwEhsXxS7CyAC98ruZOyhoYjNxCDDxL4Tz9jZLGbRz23jhWA4RAHbR+z3sS/\r\ngogagL6M5/Er2J12Z4X98pUKYwIusQGsml9vV4vZgyseNpQwB3tBS9wpaLdg\r\nQ+VZQ4AMbe99zj0e/xOvMY1jrpeeDjSbkl0sivV3VaORrgwwGE+MVPGFWQrZ\r\nWmFTwXCd2/wqcv5b33rfxwu1H3k9ZW7jt5Y=\r\n=jVrd\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_6.0.0-next.5_1680664949040_0.9285740105890725"
      },
      "_hasShrinkwrap": false
    },
    "6.0.0-next.6": {
      "name": "graphql-request",
      "version": "6.0.0-next.6",
      "type": "module",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.1.1",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "format": "prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check .",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "cross-fetch": "^3.1.5",
        "extract-files": "^9.0.0",
        "form-data": "^3.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^9.0.17",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/extract-files": "^8.1.1",
        "@types/node": "^18.15.11",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.57.1",
        "@typescript-eslint/parser": "^5.57.1",
        "@vitest/coverage-c8": "^0.29.8",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.37.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^1.4.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.5",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^9.1.7",
        "prettier": "^2.8.7",
        "type-fest": "^3.7.2",
        "typescript": "^5.0.3",
        "vitest": "^0.29.8",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Features](#features)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n    - [Set endpoint](#set-endpoint)\n    - [passing-headers-in-each-request](#passing-headers-in-each-request)\n    - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n  - [Custom JSON serializer](#custom-json-serializer)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [Making a GET request](#making-a-get-request)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [File Upload](#file-upload)\n    - [Browser](#browser)\n    - [Node](#node)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n  - [Middleware](#middleware)\n  - [ErrorPolicy](#errorpolicy)\n    - [None (default)](#none-default)\n    - [Ignore](#ignore)\n    - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n  - [Why is the package `main` field missing?](#why-is-the-package-main-field-missing)\n  - [How do I work around React Native + Metro's lack of `exports` support?](#how-do-i-work-around-react-native--metros-lack-of-exports-support)\n  - [Get typed GraphQL Queries with GraphQL Code Generator](#get-typed-graphql-queries-with-graphql-code-generator)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now().toString() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### File Upload\n\n#### Browser\n\n```js\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: document.querySelector('input#avatar').files[0],\n})\n```\n\n#### Node\n\n```js\nimport { createReadStream } from 'fs'\nimport { request } from 'graphql-request'\n\nconst UploadUserAvatar = gql`\n  mutation uploadUserAvatar($userId: Int!, $file: Upload!) {\n    updateUser(id: $userId, input: { avatar: $file })\n  }\n`\n\nrequest('/api/graphql', UploadUserAvatar, {\n  userId: 1,\n  file: createReadStream('./avatar.img'),\n})\n```\n\n[TypeScript Source](examples/receiving-a-raw-response.ts)\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests, gql } from 'graphql-request'\n\nconst endpoint = 'https://api.spacex.land/graphql/'\n\nconst query1 = gql`\n  query ($id: ID!) {\n    capsule(id: $id) {\n      id\n      landings\n    }\n  }\n`\n\nconst query2 = gql`\n  {\n    rockets(limit: 10) {\n      active\n    }\n  }\n`\n\nconst data = await batchRequests(endpoint, [\n  { document: query1, variables: { id: 'C105' } },\n  { document: query2 },\n])\n\nconsole.log(JSON.stringify(data, undefined, 2))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nIt's also possible to use an async function as a request middleware. The resolved data will be passed to the request:\n\n```ts\nasync function middleware(request: RequestInit) {\n  const token = await getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n\n#### Why is the package `main` field missing?\n\nThe `main` field was deprecated by Node.js on April 23 2019 when version 12 was released, in favour of [entrypoints (`exports` package manifest field)](https://nodejs.org/api/packages.html#package-entry-points). I believe enough time has passed that tools should be adopting the new standards now.\n\n#### How do I work around React Native + Metro's lack of `exports` support?\n\nYou might encounter the error below when you try to build a React Native app that uses `graphql-request`:\n\n```\nError: While trying to resolve module \"graphql-request\" from file \"/path/to/src/App.ts\", the package \"/path/to/node_modules/graphql-request/package.json\" was successfully found. However, this package itself specifies a \"main\" module field that could not be resolved (\"/path/to/node_modules/graphql-request/index\".\n```\n\nThis happens because Metro [does not support yet](https://github.com/facebook/metro/issues/670) the `exports` field in package.json. A workaround for this problem is to edit the `metro.config.js` file in your project and add a new [`resolveRequest`](https://facebook.github.io/metro/docs/configuration/#resolverequest) for `graphql-request`. Like this:\n\n```javascript\nresolver: {\n  resolveRequest: (context, moduleName, platform) => {\n    if (moduleName.startsWith('graphql-request')) {\n      return {\n        filePath: `${__dirname}/node_modules/graphql-request/build/esm/index.js`,\n        type: 'sourceFile',\n      }\n    }\n\n    return context.resolveRequest(context, moduleName, platform)\n  }\n}\n```\n\nAfter doing this change, clear Metro's cache and restart your application.\n\n#### Get typed GraphQL Queries with GraphQL Code Generator\n\n`graphql-request@^5` supports `TypedDocumentNode`, the typed counterpart of `graphql`'s `DocumentNode`.\n\nInstalling and configuring [GraphQL Code Generator](https://www.the-guild.dev/graphql/codegen) requires a few steps in order to get end-to-end typed GraphQL operations using the provided `graphql()` helper:\n\n```ts\nimport request from 'graphql-request'\nimport { graphql } from './gql/gql'\n\nconst getMovieQueryDocument = graphql(gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`)\n\nconst data = await request(\n  'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr',\n  getMovieQueryDocument,\n  // variables are type-checked!\n  { title: 'Inception' }\n)\n\n// `data.Movie` is typed!\n```\n\n[_The complete example is available in the GraphQL Code Generator repository_](https://github.com/dotansimha/graphql-code-generator/tree/master/examples/front-end/react/graphql-request)\n\nVisit GraphQL Code Generator's dedicated guide to get started: https://www.the-guild.dev/graphql/codegen/docs/guides/react-vue.\n",
      "readmeFilename": "README.md",
      "gitHead": "5ce990ab8746598cedfc420d4336f47fc551a4c9",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@6.0.0-next.6",
      "_nodeVersion": "16.20.0",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-EdbJYNcIdHLwxmURnzSOnrSTbEulFGhRxvYONQBLhj9O8qE1t17u0/Vgb1K1hytbJNFCaBzkl5PuVl8ANI4JDg==",
        "shasum": "12ed8dc5b5af44d452b1401e5602e8d7414ffaa0",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-6.0.0-next.6.tgz",
        "fileCount": 76,
        "unpackedSize": 227654,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCgJ3osxCmmUJ6KKwSwiGZAluBK8nQnJ3jsgIzDl7N//wIgBXIqdmjNMLd7UNGu7TYUuVvMjYrlv4B+xe/l1c6djRE="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkLV+hACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqkHQ//ejs9Aqjh71U6pQmwOVJ62IazMOLstvtM392nhoxf9W1QZjYz\r\n3SB9ebBzkVy/SNjC7ti2+Cgl9fw8a6p5hd6KfD5OLOpT0fvnU9N/uN/WioAJ\r\n2fjW0rdlzUIcMDQZJx9o92NrWRl8tesUmgkGozcRhT++wZnjAlqsl/ml0zUH\r\n6Ngub6oDQrxQ0Z0a1mQbC9UVGuNciScuUEBCv+JRVycL3ZTo7KsPpYcX1X/L\r\neAVr2RyADEWy3EpP7m7LyGPfOyasM7rE/PFcteRbiYkc4DYojTLoUJk6GALL\r\ngCkyRtx0PynfzCBrD6daNrujP54OsOmcT5r3bgRrWjh0L11YNAprZj4FbV/I\r\n9lna+/HMqdZJ02NyuW/yihCaaHPY5fAE35FWzqTd1BXM2906pGB6pJYHo6+X\r\nBPwXklVMUWa7l/i6K8b7dbpfQMHJk8VVfe7DEmEE4yVQshCrdUVlYXs+IKgb\r\nNoFNflsTFeHw68YvJqikU7K4dVvwuGr2UnYbvReh4adx1GP2sHCB6svJNVqs\r\nkXhjcIur4qUKwEmdAz4OZASk9fzbSgozOvR//jp6X6NAIikbns2wnKZe7QbE\r\nQqMpUAyM5wDuXxHHSSgahqnRRhoEzyuMPZNQI1myeDSuVKSpqlL3rsMbiMaO\r\n5ntssKyBCgAjvFReHHdxI3LgvLoan/UisAs=\r\n=2Mcz\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_6.0.0-next.6_1680695201187_0.560102480610507"
      },
      "_hasShrinkwrap": false
    },
    "6.0.0-next.7": {
      "name": "graphql-request",
      "version": "6.0.0-next.7",
      "type": "module",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.1.1",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "build:docs": "doctoc README.md --notitle",
        "dev": "rm -rf dist && tsc --watch",
        "format": "prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check .",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "cross-fetch": "^3.1.5"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^9.0.17",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/node": "^18.15.11",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.57.1",
        "@typescript-eslint/parser": "^5.57.1",
        "@vitest/coverage-c8": "^0.29.8",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.37.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^1.4.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.5",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^9.1.7",
        "prettier": "^2.8.7",
        "type-fest": "^3.7.2",
        "typescript": "^5.0.3",
        "vitest": "^0.29.8",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Features](#features)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Usage](#usage)\n- [Node Version Support](#node-version-support)\n- [Examples](#examples)\n  - [Authentication via HTTP header](#authentication-via-http-header)\n    - [Incrementally setting headers](#incrementally-setting-headers)\n    - [Set endpoint](#set-endpoint)\n    - [passing-headers-in-each-request](#passing-headers-in-each-request)\n    - [Passing dynamic headers to the client](#passing-dynamic-headers-to-the-client)\n  - [Passing more options to `fetch`](#passing-more-options-to-fetch)\n  - [Custom JSON serializer](#custom-json-serializer)\n  - [Using GraphQL Document variables](#using-graphql-document-variables)\n  - [Making a GET request](#making-a-get-request)\n  - [GraphQL Mutations](#graphql-mutations)\n  - [Error handling](#error-handling)\n  - [Using `require` instead of `import`](#using-require-instead-of-import)\n  - [Cookie support for `node`](#cookie-support-for-node)\n  - [Using a custom `fetch` method](#using-a-custom-fetch-method)\n  - [Receiving a raw response](#receiving-a-raw-response)\n  - [Batching](#batching)\n  - [Cancellation](#cancellation)\n  - [Middleware](#middleware)\n  - [ErrorPolicy](#errorpolicy)\n    - [None (default)](#none-default)\n    - [Ignore](#ignore)\n    - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What's the difference between `graphql-request`, Apollo and Relay?](#whats-the-difference-between-graphql-request-apollo-and-relay)\n  - [Why is the package `main` field missing?](#why-is-the-package-main-field-missing)\n  - [How do I work around React Native + Metro's lack of `exports` support?](#how-do-i-work-around-react-native--metros-lack-of-exports-support)\n  - [Get typed GraphQL Queries with GraphQL Code Generator](#get-typed-graphql-queries-with-graphql-code-generator)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Features\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- TypeScript support\n- Isomorphic (works with Node / browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst query = gql`\n  {\n    company {\n      ceo\n    }\n    roadster {\n      apoapsis_au\n    }\n  }\n`\n\nrequest('https://api.spacex.land/graphql/', query).then((data) => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then((data) => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then((data) => console.log(data))\n```\n\nYou can also use the single argument function variant:\n\n```js\nrequest({\n  url: endpoint,\n  document: query,\n  variables: variables,\n  requestHeaders: headers,\n}).then((data) => console.log(data))\n```\n\n## Node Version Support\n\nWe only officially support [LTS Node versions](https://github.com/nodejs/Release#release-schedule). We also make an effort to support two additional versions:\n\n1. The latest even Node version if it is not LTS already.\n2. The odd Node version directly following the latest even version.\n\nYou are free to try using other versions of Node (e.g. `13.x`) with `graphql-request` but at your own risk.\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/authentication-via-http-header.ts)\n\n#### Incrementally setting headers\n\nIf you want to set headers after the GraphQLClient has been initialised, you can use the `setHeader()` or `setHeaders()` functions.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\n// Set a single header\nclient.setHeader('authorization', 'Bearer MY_TOKEN')\n\n// Override all existing headers\nclient.setHeaders({\n  authorization: 'Bearer MY_TOKEN',\n  anotherheader: 'header_value',\n})\n```\n\n#### Set endpoint\n\nIf you want to change the endpoint after the GraphQLClient has been initialised, you can use the `setEndpoint()` function.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nclient.setEndpoint(newEndpoint)\n```\n\n#### passing-headers-in-each-request\n\nIt is possible to pass custom headers for each request. `request()` and `rawRequest()` accept a header object as the third parameter\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint)\n\nconst query = gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`\n\nconst variables = {\n  title: 'Inception',\n}\n\nconst requestHeaders = {\n  authorization: 'Bearer MY_TOKEN',\n}\n\n// Overrides the clients headers with the passed values\nconst data = await client.request(query, variables, requestHeaders)\n```\n\n#### Passing dynamic headers to the client\n\nIt's possible to recalculate the global client headers dynamically before each request.\nTo do that, pass a function that returns the headers to the `headers` property when creating a new `GraphQLClient`.\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient(endpoint, {\n  headers: () => ({ 'X-Sent-At-Time': Date.now().toString() }),\n})\n\nconst query = gql`\n  query getCars {\n    cars {\n      name\n    }\n  }\n`\n// Function saved in the client runs and calculates fresh headers before each request\nconst data = await client.request(query)\n```\n\n### Passing more options to `fetch`\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    credentials: 'include',\n    mode: 'cors',\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.request(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/passing-more-options-to-fetch.ts)\n\n### Custom JSON serializer\n\nIf you want to use non-standard JSON types, you can use your own JSON serializer to replace `JSON.parse`/`JSON.stringify` used by the `GraphQLClient`.\n\nAn original use case for this feature is `BigInt` support:\n\n```js\nimport JSONbig from 'json-bigint'\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const jsonSerializer = JSONbig({ useNativeBigInt: true })\n  const graphQLClient = new GraphQLClient(endpoint, { jsonSerializer })\n  const data = await graphQLClient.request(\n    gql`\n      {\n        someBigInt\n      }\n    `\n  )\n  console.log(typeof data.someBigInt) // if >MAX_SAFE_INTEGER then 'bigint' else 'number'\n}\n```\n\n### Using GraphQL Document variables\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await request(endpoint, query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Making a GET request\n\nQueries can be sent as an HTTP GET request:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    method: 'GET',\n    jsonSerializer: {\n      parse: JSON.parse,\n      stringify: JSON.stringify,\n    },\n  })\n\n  const query = gql`\n    query getMovie($title: String!) {\n      Movie(title: $title) {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n  }\n\n  const data = await graphQLClient.request(query, variables)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### GraphQL Mutations\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const mutation = gql`\n    mutation AddMovie($title: String!, $releaseDate: Int!) {\n      insert_movies_one(object: { title: $title, releaseDate: $releaseDate }) {\n        title\n        releaseDate\n      }\n    }\n  `\n\n  const variables = {\n    title: 'Inception',\n    releaseDate: 2010,\n  }\n  const data = await graphQLClient.request(mutation, variables)\n\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/using-variables.ts)\n\n### Error handling\n\n```js\nimport { request, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          fullname # \"Cannot query field 'fullname' on type 'Actor'. Did you mean 'name'?\"\n        }\n      }\n    }\n  `\n\n  try {\n    const data = await request(endpoint, query)\n    console.log(JSON.stringify(data, undefined, 2))\n  } catch (error) {\n    console.error(JSON.stringify(error, undefined, 2))\n    process.exit(1)\n  }\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/error-handling.ts)\n\n### Using `require` instead of `import`\n\n```js\nconst { request, gql } = require('graphql-request')\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await request(endpoint, query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nrequire('fetch-cookie/node-fetch')(require('node-fetch'))\n\nimport { GraphQLClient, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const graphQLClient = new GraphQLClient(endpoint, {\n    headers: {\n      authorization: 'Bearer MY_TOKEN',\n    },\n  })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n[TypeScript Source](examples/cookie-support-for-node.ts)\n\n### Using a custom `fetch` method\n\n```sh\nnpm install fetch-cookie\n```\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\nimport crossFetch from 'cross-fetch'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  // a cookie jar scoped to the client object\n  const fetch = require('fetch-cookie')(crossFetch)\n  const graphQLClient = new GraphQLClient(endpoint, { fetch })\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const data = await graphQLClient.rawRequest(query)\n  console.log(JSON.stringify(data, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest, gql } from 'graphql-request'\n\nasync function main() {\n  const endpoint = 'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr'\n\n  const query = gql`\n    {\n      Movie(title: \"Inception\") {\n        releaseDate\n        actors {\n          name\n        }\n      }\n    }\n  `\n\n  const { data, errors, extensions, headers, status } = await rawRequest(endpoint, query)\n  console.log(JSON.stringify({ data, errors, extensions, headers, status }, undefined, 2))\n}\n\nmain().catch((error) => console.error(error))\n```\n\n### Batching\n\nIt is possible with `graphql-request` to use [batching](https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md) via the `batchRequests()` function. Example available at [examples/batching-requests.ts](examples/batching-requests.ts)\n\n```ts\nimport { batchRequests, gql } from 'graphql-request'\n\nconst endpoint = 'https://api.spacex.land/graphql/'\n\nconst query1 = gql`\n  query ($id: ID!) {\n    capsule(id: $id) {\n      id\n      landings\n    }\n  }\n`\n\nconst query2 = gql`\n  {\n    rockets(limit: 10) {\n      active\n    }\n  }\n`\n\nconst data = await batchRequests(endpoint, [\n  { document: query1, variables: { id: 'C105' } },\n  { document: query2 },\n])\n\nconsole.log(JSON.stringify(data, undefined, 2))\n```\n\n### Cancellation\n\nIt is possible to cancel a request using an `AbortController` signal.\n\nYou can define the `signal` in the `GraphQLClient` constructor:\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint, { signal: abortController.signal })\nclient.request(query)\n\nabortController.abort()\n```\n\nYou can also set the signal per request (this will override an existing GraphQLClient signal):\n\n```ts\nconst abortController = new AbortController()\n\nconst client = new GraphQLClient(endpoint)\nclient.request({ document: query, signal: abortController.signal })\n\nabortController.abort()\n```\n\nIn Node environment, `AbortController` is supported since version v14.17.0.\nFor Node.js v12 you can use [abort-controller](https://github.com/mysticatea/abort-controller) polyfill.\n\n```\n import 'abort-controller/polyfill'\n\n const abortController = new AbortController()\n```\n\n### Middleware\n\nIt's possible to use a middleware to pre-process any request or handle raw response.\n\nRequest middleware example (set actual auth token to each request):\n\n```ts\nfunction middleware(request: RequestInit) {\n  const token = getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nIt's also possible to use an async function as a request middleware. The resolved data will be passed to the request:\n\n```ts\nasync function middleware(request: RequestInit) {\n  const token = await getToken()\n  return {\n    ...request,\n    headers: { ...request.headers, 'x-auth-token': token },\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { requestMiddleware: middleware })\n```\n\nResponse middleware example (log request trace id if error caused):\n\n```ts\nfunction middleware(response: Response<unknown>) {\n  if (response.errors) {\n    const traceId = response.headers.get('x-b3-traceid') || 'unknown'\n    console.error(\n      `[${traceId}] Request error:\n        status ${response.status}\n        details: ${response.errors}`\n    )\n  }\n}\n\nconst client = new GraphQLClient(endpoint, { responseMiddleware: middleware })\n```\n\n### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n#### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n#### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n#### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n\n#### Why is the package `main` field missing?\n\nThe `main` field was deprecated by Node.js on April 23 2019 when version 12 was released, in favour of [entrypoints (`exports` package manifest field)](https://nodejs.org/api/packages.html#package-entry-points). I believe enough time has passed that tools should be adopting the new standards now.\n\n#### How do I work around React Native + Metro's lack of `exports` support?\n\nYou might encounter the error below when you try to build a React Native app that uses `graphql-request`:\n\n```\nError: While trying to resolve module \"graphql-request\" from file \"/path/to/src/App.ts\", the package \"/path/to/node_modules/graphql-request/package.json\" was successfully found. However, this package itself specifies a \"main\" module field that could not be resolved (\"/path/to/node_modules/graphql-request/index\".\n```\n\nThis happens because Metro [does not support yet](https://github.com/facebook/metro/issues/670) the `exports` field in package.json. A workaround for this problem is to edit the `metro.config.js` file in your project and add a new [`resolveRequest`](https://facebook.github.io/metro/docs/configuration/#resolverequest) for `graphql-request`. Like this:\n\n```javascript\nresolver: {\n  resolveRequest: (context, moduleName, platform) => {\n    if (moduleName.startsWith('graphql-request')) {\n      return {\n        filePath: `${__dirname}/node_modules/graphql-request/build/esm/index.js`,\n        type: 'sourceFile',\n      }\n    }\n\n    return context.resolveRequest(context, moduleName, platform)\n  }\n}\n```\n\nAfter doing this change, clear Metro's cache and restart your application.\n\n#### Get typed GraphQL Queries with GraphQL Code Generator\n\n`graphql-request@^5` supports `TypedDocumentNode`, the typed counterpart of `graphql`'s `DocumentNode`.\n\nInstalling and configuring [GraphQL Code Generator](https://www.the-guild.dev/graphql/codegen) requires a few steps in order to get end-to-end typed GraphQL operations using the provided `graphql()` helper:\n\n```ts\nimport request from 'graphql-request'\nimport { graphql } from './gql/gql'\n\nconst getMovieQueryDocument = graphql(gql`\n  query getMovie($title: String!) {\n    Movie(title: $title) {\n      releaseDate\n      actors {\n        name\n      }\n    }\n  }\n`)\n\nconst data = await request(\n  'https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr',\n  getMovieQueryDocument,\n  // variables are type-checked!\n  { title: 'Inception' }\n)\n\n// `data.Movie` is typed!\n```\n\n[_The complete example is available in the GraphQL Code Generator repository_](https://github.com/dotansimha/graphql-code-generator/tree/master/examples/front-end/react/graphql-request)\n\nVisit GraphQL Code Generator's dedicated guide to get started: https://www.the-guild.dev/graphql/codegen/docs/guides/react-vue.\n",
      "readmeFilename": "README.md",
      "gitHead": "02a5522c2a09e90c916f5ee745003db1aed2fecd",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@6.0.0-next.7",
      "_nodeVersion": "16.20.0",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-GPHw3w7ZPRGAXKCcbmQYiYbKDKUyu/XRel9FQZ3cInYIlcfhHag73TAhjvankCVZg76WLg4PP0Li2P+0C0IE6g==",
        "shasum": "00fe0b1fb411850d38cf95eec1f29662509db8c5",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-6.0.0-next.7.tgz",
        "fileCount": 67,
        "unpackedSize": 218188,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIBOa9GuSMWvC63MlTUiPnTpwh8nr/NWyA2LXBm2i9BvwAiAP8odGLfVLeQZpJuyIIvokN43F840S6L8Iel7cXj8KBQ=="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkLWeLACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoweQ//U+1h/6QdHdyei+UNwt4mSbsCM8bnYKNEigKUrZT1vz3dhQ3t\r\nSh9gIvgrPkB9dnNVn4JGV9hkALPKMnROL3rr10Uyjl/xHwNObpKxKUJG+o+n\r\nqRBd6EjjpC9IwRxgwvPPG5XYXpQG0rL6PF4q1kSC24baUNn+0ChPuMwyJxga\r\nv7/FgTPGD5Opw5nrRG4FK5PLOD8AXmgSDQeNZmXJCV06MNj6XOlRE5Jla/Kr\r\nE6ehZGpEP596feScZJoMJSZ6b6N5Rk1zvR/fjg6FWss9K9s+bi+Q+sSbFIO0\r\nNvt5Ujzz/uxcjRuWLEnDslcrpcRBKSXSTOFxvi58Cowp1AjP4Dmtk3BBOxp9\r\nhIFJJWMURJQIwwxn7eTy6Q8+K37Vw65856DqRXmP8C5/eZchB0YdmqfDbQa2\r\nAM/yo8G0u2ThL4WRkdGeN1ojwjkZ1Cf6eDWjmkZywJpZcZOuVS8TIMeB4tvl\r\n1MGDcaIj+UtcwQGlTfUuU/PtVw8/fdz9Dn1wrJAtZXAPqNC+FPCHgJ+ysLtU\r\nHb5Qj+4Ed5bNe3jPDY2eKmmQd5IMIn/VQz+nBhCE2fNSMpxoEj24f9iNhcUG\r\niq2rkUQ7KWid79AwBnGkTyRat2LpznplqF8xPwpMx00KpPxrz74KHPyGpBl6\r\n2hWkhUjqIVh6oBt5vJQudLjjMs8iKMJzjS4=\r\n=z+hw\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_6.0.0-next.7_1680697227196_0.23559912950765005"
      },
      "_hasShrinkwrap": false
    },
    "6.0.0": {
      "name": "graphql-request",
      "version": "6.0.0",
      "type": "module",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.2.0",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "cross-fetch": "^3.1.5"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^9.0.17",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/node": "^18.15.11",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.57.1",
        "@typescript-eslint/parser": "^5.57.1",
        "@vitest/coverage-c8": "^0.30.0",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.37.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^1.4.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.5",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^9.1.7",
        "prettier": "^2.8.7",
        "type-fest": "^3.7.2",
        "typescript": "^5.0.3",
        "vitest": "^0.30.0",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "gitHead": "277bad5b4d2ab246f9e4f613220f778ccfb57c9b",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@6.0.0",
      "_nodeVersion": "16.20.0",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-2BmHTuglonjZvmNVw6ZzCfFlW/qkIPds0f+Qdi/Lvjsl3whJg2uvHmSvHnLWhUTEw6zcxPYAHiZoPvSVKOZ7Jw==",
        "shasum": "9c8b6a0c341f289e049936d03cc9205300faae1c",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-6.0.0.tgz",
        "fileCount": 67,
        "unpackedSize": 218283,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCEreqze8+C8NMZWgvRpHiyYr21qzKmIr0tZ8P3S4+dtgIhAKq8ypytU94A1o9jxvTV8zeFdjATa7zV12IeoP/vyeo/"
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkN3zrACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpdBBAAgeNgorjvd2lr6n5KvLjh2JbHwGc2RCVIspCjP4E/AWPEjkHt\r\nJUQUjNkI6ASN6LZzlZRm1v1oPpepZYE2CByhw31gI7ZERCD8kpzpdIV7IL7v\r\n8aAcYOWkjOY9HrUWe5Yv4iID51LFMOtm9cRadnRB54gXihMtQm+uJWUbEiNx\r\nuUQ7YVNKEeKAzBGRjcFJi5KOIZ19O6VVCr2HBlJGg2LC5SnhqHLcrZyD7Pbt\r\nTzUwjcwnK8C+cwxMNang4S3q+PJN3B9zJeLVTUaKewwoLEuV6iAdIIWqUt+g\r\n1RejV9hpZUbZjGd8tMtlwqonBCX1P53LpRPnVGK2gqlCKvVCoedQ2pkM4xjW\r\nSczr9xq3bVqnRh5LB9NVkqQTAsMGBN8YLKsEjxhfczXj0MQyQR19vNZ4roxr\r\nFVpPS/hcyOlMYMeFOizCwFy9sQhCm7sNHLPgegWVkqy7UuprFBZxGGevchQV\r\n7+Oci80vMPtH2WLVxCnSgXFkOZQcRe0tOKz2BJVqtY9yMPP7WKz7TdRr7Wih\r\nSfLHJu0X5KtHON8W75NYfjm4Xcwc2bF8QaexCMMRp5o2CEUC6HBiAkekQOd1\r\n80ujlErIqxSI79Jzt40DUkwjTrJpjdDViPHnYYRewoI8ZNxR0tG9yY6XpIyd\r\nTEmiHT0F0jwcfw6J141+rX3mU9Wz6D4ehBY=\r\n=YYFv\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_6.0.0_1681358059277_0.28060237476613636"
      },
      "_hasShrinkwrap": false
    },
    "6.1.0-next.1": {
      "name": "graphql-request",
      "version": "6.1.0-next.1",
      "type": "module",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.2.0",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "cross-fetch": "^3.1.5"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^9.0.18",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/json-bigint": "^1.0.1",
        "@types/node": "^18.15.11",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.58.0",
        "@typescript-eslint/parser": "^5.58.0",
        "@vitest/coverage-c8": "^0.30.1",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.38.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^1.4.1",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^9.7.1",
        "json-bigint": "^1.0.0",
        "prettier": "^2.8.7",
        "type-fest": "^3.8.0",
        "typescript": "^5.0.4",
        "vitest": "^0.30.1",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n  - [Why is the package `main` field missing?](#why-is-the-package-main-field-missing)\n  - [How do I work around React Native + Metro's lack of `exports` support?](#how-do-i-work-around-react-native--metros-lack-of-exports-support)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst client = new GraphQLClient(endpoint)\nawait request('https://api.spacex.land/graphql/', document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Cookie support for Nodejs](./examples/request-cookie-support-for-node.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n  - [OCommonJS Support](./examples/other-package-commonjs.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on May 1 2023 that would mean these versions: 16, 18, 19.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n\n#### Why is the package `main` field missing?\n\nThe `main` field was deprecated by Node.js on April 23 2019 when version 12 was released, in favour of [entrypoints (`exports` package manifest field)](https://nodejs.org/api/packages.html#package-entry-points). I believe enough time has passed that tools should be adopting the new standards now.\n\n#### How do I work around React Native + Metro's lack of `exports` support?\n\nYou might encounter the error below when you try to build a React Native app that uses `graphql-request`:\n\n```\nError: While trying to resolve module \"graphql-request\" from file \"/path/to/src/App.ts\", the package \"/path/to/node_modules/graphql-request/package.json\" was successfully found. However, this package itself specifies a \"main\" module field that could not be resolved (\"/path/to/node_modules/graphql-request/index\".\n```\n\nThis happens because Metro [does not support yet](https://github.com/facebook/metro/issues/670) the `exports` field in package.json. A workaround for this problem is to edit the `metro.config.js` file in your project and add a new [`resolveRequest`](https://facebook.github.io/metro/docs/configuration/#resolverequest) for `graphql-request`. Like this:\n\n```javascript\nresolver: {\n  resolveRequest: (context, moduleName, platform) => {\n    if (moduleName.startsWith('graphql-request')) {\n      return {\n        filePath: `${__dirname}/node_modules/graphql-request/build/esm/index.js`,\n        type: 'sourceFile',\n      }\n    }\n\n    return context.resolveRequest(context, moduleName, platform)\n  }\n}\n```\n\nAfter doing this change, clear Metro's cache and restart your application.\n",
      "readmeFilename": "README.md",
      "gitHead": "81c8bb2b0e9910eb682d3017ce40e7bb2f5af155",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@6.1.0-next.1",
      "_nodeVersion": "16.20.0",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-DYLDW4sZJIK8WPsLr3i4CQ+n5q1+jP3kJESK3pKYSnj9Lkn7Uvc8lbAuOo+HFn9glLT2onL3vF7D+yUxd+u1Fw==",
        "shasum": "540e0d7d81acd654e6f4e0dd6a1f4e8548795a19",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-6.1.0-next.1.tgz",
        "fileCount": 67,
        "unpackedSize": 205567,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDJOBltRDbmmvYfsc9pY9M+n6caxUCFaSdT7RWN3uJi6AiAh0T7RaJW9QS9a+B1hlv/0Kskl9DjEuuKYwQURJbbA6w=="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkO3a8ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoMnw/+KtgiIHTipWCwgJzN6Sh05AdJ/LUa+W3JUNIUoaKwKA+nmoFT\r\noIbR5H33PSWcTVxRG7JtZJmuoWdcKt+BqyVCuU3VPLCIvWnwvCv3i5d+JZ3c\r\nmt6Wfv+lzbsy3SmIqpTxAXjgpighLztgBrPaw+6jyetwhTgtGMPeQsmDcy85\r\nGOlQAZgaSC4UXZbLCshmgP+HGqWFjGicDIm3MAWcfw02j/x3AG68Z4543ZKB\r\nIcLfhLEUyys0iVODdi1LhvwWfTRguxBqnvcq3/2FTgdfPAI6KydrSnsQSi5z\r\niW0DKl5nuksLR1VwvXffRvGOQANNpoA5bSHLYF1han30nX4Zi2x30AEVRjkX\r\nrKxyb5cWyN82NhYmiLzxww2ViENzA7wdOvVwrzMjJvYgGmPHAXFMcBH41dmp\r\nYidTZ+3uXqXZGPLLjMMBuDQeczofOA5+QOiz18HwL8JpRYE257CO/tsYsuIL\r\n3gV0+5zDNaFC+P7niXA1yq11CgdBsBXLYgxkPC4WIVHW0CGvVn0+aQtMbrYJ\r\nv5fvXma1lr1I8gP83ATvKNQRPFjPLHHKEkJg6Or0jryafQ28RPbaF3ysxJf3\r\nQB8xj3PZrpacunbIzqU3DrLpjbTAQU0jhpzZXmU9r2SrsshcQqKauumzvA5f\r\njXszVCsizKgOqz+pXZGbVatuPtYXvR6+QK4=\r\n=8ltv\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_6.1.0-next.1_1681618620324_0.043406651810071306"
      },
      "_hasShrinkwrap": false
    },
    "6.1.0-next.2": {
      "name": "graphql-request",
      "version": "6.1.0-next.2",
      "type": "module",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.2.0",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "cross-fetch": "^3.1.5"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^9.0.18",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/json-bigint": "^1.0.1",
        "@types/node": "^18.15.11",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.58.0",
        "@typescript-eslint/parser": "^5.58.0",
        "@vitest/coverage-c8": "^0.30.1",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.38.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^1.4.1",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^9.7.1",
        "json-bigint": "^1.0.0",
        "prettier": "^2.8.7",
        "type-fest": "^3.8.0",
        "typescript": "^5.0.4",
        "vitest": "^0.30.1",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n  - [Why is the package `main` field missing?](#why-is-the-package-main-field-missing)\n  - [How do I work around React Native + Metro's lack of `exports` support?](#how-do-i-work-around-react-native--metros-lack-of-exports-support)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst client = new GraphQLClient(endpoint)\nawait request('https://api.spacex.land/graphql/', document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Cookie support for Nodejs](./examples/request-cookie-support-for-node.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n  - [OCommonJS Support](./examples/other-package-commonjs.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on May 1 2023 that would mean these versions: 16, 18, 19.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n\n#### Why is the package `main` field missing?\n\nThe `main` field was deprecated by Node.js on April 23 2019 when version 12 was released, in favour of [entrypoints (`exports` package manifest field)](https://nodejs.org/api/packages.html#package-entry-points). I believe enough time has passed that tools should be adopting the new standards now.\n\n#### How do I work around React Native + Metro's lack of `exports` support?\n\nYou might encounter the error below when you try to build a React Native app that uses `graphql-request`:\n\n```\nError: While trying to resolve module \"graphql-request\" from file \"/path/to/src/App.ts\", the package \"/path/to/node_modules/graphql-request/package.json\" was successfully found. However, this package itself specifies a \"main\" module field that could not be resolved (\"/path/to/node_modules/graphql-request/index\".\n```\n\nThis happens because Metro [does not support yet](https://github.com/facebook/metro/issues/670) the `exports` field in package.json. A workaround for this problem is to edit the `metro.config.js` file in your project and add a new [`resolveRequest`](https://facebook.github.io/metro/docs/configuration/#resolverequest) for `graphql-request`. Like this:\n\n```javascript\nresolver: {\n  resolveRequest: (context, moduleName, platform) => {\n    if (moduleName.startsWith('graphql-request')) {\n      return {\n        filePath: `${__dirname}/node_modules/graphql-request/build/esm/index.js`,\n        type: 'sourceFile',\n      }\n    }\n\n    return context.resolveRequest(context, moduleName, platform)\n  }\n}\n```\n\nAfter doing this change, clear Metro's cache and restart your application.\n",
      "readmeFilename": "README.md",
      "gitHead": "b98d71bd0c345495f3c7825b0b5b2fdbdfdff0cd",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@6.1.0-next.2",
      "_nodeVersion": "16.20.0",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-WspLVoyJ/cugc3SafH+pxHWhPXhfZFdssa535tzMwJ/KFPu1pwys5DqJMmuEITUcLbmc6JhS1hrPRmKkVeZYag==",
        "shasum": "3fc5eae4f67bdd6e095bfaeb18f0e6a9d01e04ca",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-6.1.0-next.2.tgz",
        "fileCount": 67,
        "unpackedSize": 205726,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEcoJJ+Os9REN22fKXsx6tGc5UoqokRK1fOrtAGPz2TbAiEApfZ8NmzIeMooj2LLt4VcZk4TbVmyJ66yVtGuK5sVBmw="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkPeArACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrZ4BAAnFdtrEF/6EftP0J31yI/+dJg3yCBmWmdXwUhNl5BPemG8GRc\r\nk60d7sQ3c/HDtdWp0fpLeO33NHwSyirOoX538DLzqWjx/gssbpKw2bux/wU8\r\nhbNRzn+I3bpePMBP0G7uTSeeJM+48ZIEHrhsU8LkT1jy2cBWVbPtdyf8irdE\r\n+Znk5G1QOMVFhakNgOXy7EzJKV9m8++fXaeXUMdpMHjRPNAnBEcG6OkkU+QT\r\nDwEiOkrcW0rSX46hjaK+zIfGaOLR8v5Ov63Kgy4KnRRzHK0hYwTuswOdr7ff\r\nL7TIS2Ubp2SBgAwY1XnxjJPNEFSE5ptgTvw9NpXsgYwKSoBJTlDCJXIkxqYS\r\nrhoSiAZ4NlOddAQKqO4ScqB8lhKqdAR8oG+2aShuiBBI4TV4OcrgGdfJO1wg\r\nnOc98QvTNjUZEWs2D8dn++ddiySH2V0H100NqIKOwMG2Wpl497khu1t2mR8x\r\nmeWOwwX1Egs1CCU/9QBQ74Z38QF8W47y8+ID9InuZ7X92B6owtmbI7g6NB6G\r\nbvx9Jd4lKX9OAZqe5QC9QPCJoRDZKc4MLE1KnOnCCr5SqqsjdBk5ghA9Qm4E\r\n3Yy8uYqzWzL6RhH7SH3UoB4oTwyfmJtPjFMx2oWWnS98Znzeh03ORUNAGdAw\r\n65hUzC8vhNfABixPY2F8eeTumkAELpMSj6I=\r\n=i0xa\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_6.1.0-next.2_1681776683200_0.12727034330321652"
      },
      "_hasShrinkwrap": false
    },
    "6.1.0-next.3": {
      "name": "graphql-request",
      "version": "6.1.0-next.3",
      "type": "module",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.2.0",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "cross-fetch": "^3.1.5"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^9.0.18",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/json-bigint": "^1.0.1",
        "@types/node": "^18.15.11",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.58.0",
        "@typescript-eslint/parser": "^5.58.0",
        "@vitest/coverage-c8": "^0.30.1",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.38.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^1.4.1",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^9.7.1",
        "json-bigint": "^1.0.0",
        "prettier": "^2.8.7",
        "type-fest": "^3.8.0",
        "typescript": "^5.0.4",
        "vitest": "^0.30.1",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n  - [Why is the package `main` field missing?](#why-is-the-package-main-field-missing)\n  - [How do I work around React Native + Metro's lack of `exports` support?](#how-do-i-work-around-react-native--metros-lack-of-exports-support)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst client = new GraphQLClient(endpoint)\nawait request('https://api.spacex.land/graphql/', document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Cookie support for Nodejs](./examples/request-cookie-support-for-node.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n  - [OCommonJS Support](./examples/other-package-commonjs.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on May 1 2023 that would mean these versions: 16, 18, 19.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n\n#### Why is the package `main` field missing?\n\nThe `main` field was deprecated by Node.js on April 23 2019 when version 12 was released, in favour of [entrypoints (`exports` package manifest field)](https://nodejs.org/api/packages.html#package-entry-points). I believe enough time has passed that tools should be adopting the new standards now.\n\n#### How do I work around React Native + Metro's lack of `exports` support?\n\nYou might encounter the error below when you try to build a React Native app that uses `graphql-request`:\n\n```\nError: While trying to resolve module \"graphql-request\" from file \"/path/to/src/App.ts\", the package \"/path/to/node_modules/graphql-request/package.json\" was successfully found. However, this package itself specifies a \"main\" module field that could not be resolved (\"/path/to/node_modules/graphql-request/index\".\n```\n\nThis happens because Metro [does not support yet](https://github.com/facebook/metro/issues/670) the `exports` field in package.json. A workaround for this problem is to edit the `metro.config.js` file in your project and add a new [`resolveRequest`](https://facebook.github.io/metro/docs/configuration/#resolverequest) for `graphql-request`. Like this:\n\n```javascript\nresolver: {\n  resolveRequest: (context, moduleName, platform) => {\n    if (moduleName.startsWith('graphql-request')) {\n      return {\n        filePath: `${__dirname}/node_modules/graphql-request/build/esm/index.js`,\n        type: 'sourceFile',\n      }\n    }\n\n    return context.resolveRequest(context, moduleName, platform)\n  }\n}\n```\n\nAfter doing this change, clear Metro's cache and restart your application.\n",
      "readmeFilename": "README.md",
      "gitHead": "5fc0062cbc5c1edcc5797b06533a82639fc7fef1",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@6.1.0-next.3",
      "_nodeVersion": "16.20.0",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-1OL3D1bYmLUFzPIj526/HYTBL4GUn3+JZOaBHr2Pxv4T+CF7fkQcXmxRk6nvuNJ6gIzJHp+SrDkemAM2TTfOWQ==",
        "shasum": "394f17884c78e853bb986319a6bec9c678309fc0",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-6.1.0-next.3.tgz",
        "fileCount": 67,
        "unpackedSize": 205920,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDiE0LdCQW4TT1+X+KEtaSJ0P7DcQX0uRKtpz3dz5RuVAiEAvcv+F4DR+8DZf0e2UxcdSWYrYeJs6UUskiAnU0ACCsw="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkPeJCACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqNBA/9EJLCxM7aVC+9CQHy6Xf7gF9LSUouHW7UvLq+93Ub+XIYqm76\r\nBa7T759QOhTnv2QIblusV014tpWuojfQiGY+MEiQhlWaev23ajt/zto6hd0X\r\nZOpVlAYifcVtHom+0aetDbtih/rPRWWYZDCJd03BHb7aOIK9O+hCpFblketY\r\nquQGD5b3iQf6w5dHmvilAqvijRbJOkKvMeaOGZpp0NXAMRxzpoKXBD9Yd1By\r\nKvTSpPxdqtEdVqcrv0PNNNOIBPYD2dLl3eBqDGgWoKD87n0aGFpFUPEgOqv0\r\nSye9WiyLlnpTnhHoOJiUD8kct+rTbMm4FVszzArZMacfcKDEMhHYR2VNhf21\r\naf1aKNplYFbXk9qhLmjMQzB4TDQptYLkFGgHdel7eWpsgrEgAmn/9tb4Vnq1\r\ni6VaWnbn3H9gstPmOpYJ0m8jmWShhMNUSQpZJHrqE5Hfov8RfGaL72Kd2FkG\r\nhE+YBaPwffuuYZx4n9hnBsXueiBeOXKlHpbZZTJtykqdaCON8vYU0dxbljxP\r\nn8LLsbM7zFgWLh5ZqMwi4LxSBp7EOlTYkLTctWBQpmWMlch51T45aKoSS3kj\r\ntLwON3RZ9MbDiwYkohd8tJTAxwK+xX0Z9MTgZxBkJL6ioz0WPKaVRDoqWFtl\r\nnoif/9t2QLrv6RGXKXz+lxSYhHgAiGgyRr0=\r\n=p9M0\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_6.1.0-next.3_1681777218145_0.24602302619349392"
      },
      "_hasShrinkwrap": false
    },
    "6.1.0-next.4": {
      "name": "graphql-request",
      "version": "6.1.0-next.4",
      "type": "module",
      "main": "./build/cjs/index.js",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.5.1",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "cross-fetch": "^3.1.5"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^9.0.18",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/json-bigint": "^1.0.1",
        "@types/node": "^20.0.0",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.58.0",
        "@typescript-eslint/parser": "^5.58.0",
        "@vitest/coverage-c8": "^0.31.0",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.38.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^1.4.1",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^9.7.1",
        "json-bigint": "^1.0.0",
        "prettier": "^2.8.7",
        "type-fest": "^3.8.0",
        "typescript": "^5.0.4",
        "vitest": "^0.31.0",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n  - [Why is the package `main` field missing?](#why-is-the-package-main-field-missing)\n  - [How do I work around React Native + Metro's lack of `exports` support?](#how-do-i-work-around-react-native--metros-lack-of-exports-support)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst client = new GraphQLClient(endpoint)\nawait request('https://api.spacex.land/graphql/', document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Cookie support for Nodejs](./examples/request-cookie-support-for-node.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n  - [OCommonJS Support](./examples/other-package-commonjs.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on May 1 2023 that would mean these versions: 16, 18, 19.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "71af6ab55caaf305ace277aded8592c83ff3d332",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@6.1.0-next.4",
      "_nodeVersion": "16.20.0",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-Asf8I80TO3id9gqvfUwxXlOEz0D5eBTQbM5xLQkN+IVsdjBAPJto6PCsPcAh1H1QOR0Rjbl/nPtsOZ10IIfe8g==",
        "shasum": "3cc30a1f459d2d89c979b4f8c6905cf1205be960",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-6.1.0-next.4.tgz",
        "fileCount": 67,
        "unpackedSize": 204317,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCID+mMqD5iQX75wNQwwz9av24bPhYaDQ3mdJ5gPfnqxz3AiBeQG36yYPxf/C6oSt6Fmp2GRl12XUoIjiDibqrolny6A=="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_6.1.0-next.4_1684378094739_0.1297774245095158"
      },
      "_hasShrinkwrap": false
    },
    "6.1.0": {
      "name": "graphql-request",
      "version": "6.1.0",
      "type": "module",
      "main": "./build/cjs/index.js",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.5.1",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "cross-fetch": "^3.1.5"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^9.0.18",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/json-bigint": "^1.0.1",
        "@types/node": "^20.0.0",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.58.0",
        "@typescript-eslint/parser": "^5.58.0",
        "@vitest/coverage-c8": "^0.31.0",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.38.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^1.4.1",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^9.7.1",
        "json-bigint": "^1.0.0",
        "prettier": "^2.8.7",
        "type-fest": "^3.8.0",
        "typescript": "^5.0.4",
        "vitest": "^0.31.0",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "gitHead": "6500e69b81859562cc6d88e54e8a659570e2bdef",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@6.1.0",
      "_nodeVersion": "16.20.0",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-p+XPfS4q7aIpKVcgmnZKhMNqhltk20hfXtkaIkTfjjmiKMJ5xrt5c743cL03y/K7y1rg3WrIC49xGiEQ4mxdNw==",
        "shasum": "f4eb2107967af3c7a5907eb3131c671eac89be4f",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-6.1.0.tgz",
        "fileCount": 67,
        "unpackedSize": 204078,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEr/UoFts/1ctzoQjiG70aINKVA3BPmalotTMvJlGafoAiAWskQtYHA0IH+ttDEZ7+zE7GmB+np4mOEMqqSaILc+vQ=="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_6.1.0_1684860962393_0.020308771332150588"
      },
      "_hasShrinkwrap": false
    },
    "6.1.1-next.1": {
      "name": "graphql-request",
      "version": "6.1.1-next.1",
      "type": "module",
      "main": "./build/cjs/index.js",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.6.0",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "cross-fetch": "^3.1.5"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^9.0.18",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/json-bigint": "^1.0.1",
        "@types/node": "^20.0.0",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.58.0",
        "@typescript-eslint/parser": "^5.58.0",
        "@vitest/coverage-c8": "^0.31.0",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.38.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^1.4.1",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^6.1.2",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^9.7.1",
        "json-bigint": "^1.0.0",
        "prettier": "^2.8.7",
        "type-fest": "^3.8.0",
        "typescript": "^5.0.4",
        "vitest": "^0.31.0",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst client = new GraphQLClient(endpoint)\nawait request('https://api.spacex.land/graphql/', document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Cookie support for Nodejs](./examples/request-cookie-support-for-node.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n  - [OCommonJS Support](./examples/other-package-commonjs.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on May 1 2023 that would mean these versions: 16, 18, 19.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "c124ec8c1d0b6771344dff044fdcad29417a3b17",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@6.1.1-next.1",
      "_nodeVersion": "16.20.0",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-rQX3D3gnmJ+pSOEAczbC1xy7S0R+xTJJqgqxirOJzlb8zJx2asMTUlmi+Htt/gd107nv8DB8wWd6tGsCXjT0Ew==",
        "shasum": "1e178a42722de19a1181c9ac4d24a6b0b0e89194",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-6.1.1-next.1.tgz",
        "fileCount": 67,
        "unpackedSize": 204147,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICocsYNINUsIBXqaPsiebzPrkZEpxt1oWExdC0vRdqSbAiBw22KjWJzAV3tf3AjHFUpV5LSXRBRUjs6QkvnP4LOffg=="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_6.1.1-next.1_1685362320919_0.17694797013739882"
      },
      "_hasShrinkwrap": false
    },
    "6.1.1-next.2": {
      "name": "graphql-request",
      "version": "6.1.1-next.2",
      "type": "module",
      "main": "./build/cjs/index.js",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.6.2",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "cross-fetch": "^3.1.5"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^9.0.18",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/json-bigint": "^1.0.1",
        "@types/node": "^20.0.0",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^5.58.0",
        "@typescript-eslint/parser": "^5.58.0",
        "@vitest/coverage-c8": "^0.32.0",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.38.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^1.4.1",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^9.7.1",
        "json-bigint": "^1.0.0",
        "prettier": "^2.8.7",
        "type-fest": "^3.8.0",
        "typescript": "^5.0.4",
        "vitest": "^0.32.0",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst client = new GraphQLClient(endpoint)\nawait request('https://api.spacex.land/graphql/', document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Cookie support for Nodejs](./examples/request-cookie-support-for-node.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n  - [OCommonJS Support](./examples/other-package-commonjs.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on May 1 2023 that would mean these versions: 16, 18, 19.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "e5c8e7f43066f238f96016f8c3b5c6c3cd0141ce",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@6.1.1-next.2",
      "_nodeVersion": "16.20.0",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-LzErI3rvWtcBjsnsWYq+3Uh0J1xLunY6Cvu+6zauiFL2Far3PfW63rM31efj54R65xXOC75YW+aBcxxUEKhjQQ==",
        "shasum": "cdd75d6ee06e7c21d4955a7a593fe1c4dd11ad8c",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-6.1.1-next.2.tgz",
        "fileCount": 67,
        "unpackedSize": 204690,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDW//H2JOLH8p2rRsY1yygtJe2wIxq89HyE3GtCsk/m4AIgA1NL+5y8Asc9LRmVohZvfxq3YpaBcJiqwYfUIu2pCUw="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_6.1.1-next.2_1686845311000_0.3721087915460075"
      },
      "_hasShrinkwrap": false
    },
    "6.2.0-next.3": {
      "name": "graphql-request",
      "version": "6.2.0-next.3",
      "type": "module",
      "main": "./build/cjs/index.js",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.7.5",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "cross-fetch": "^4.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^9.0.18",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/json-bigint": "^1.0.1",
        "@types/node": "^20.0.0",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^6.0.0",
        "@typescript-eslint/parser": "^6.0.0",
        "@vitest/coverage-c8": "^0.33.0",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.38.0",
        "eslint-config-prettier": "^9.0.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.6.0",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^11.0.0",
        "json-bigint": "^1.0.0",
        "prettier": "^3.0.0",
        "type-fest": "^4.0.0",
        "typescript": "^5.0.4",
        "vitest": "^0.34.0",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst client = new GraphQLClient(endpoint)\nawait request('https://api.spacex.land/graphql/', document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Cookie support for Nodejs](./examples/request-cookie-support-for-node.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n  - [OCommonJS Support](./examples/other-package-commonjs.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on May 1 2023 that would mean these versions: 16, 18, 19.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "e0656777fd3a72362d389815bee805bf5d649dc8",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@6.2.0-next.3",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-pOZfG/0lgnfu8fkMerbHFnz7X0Jsw1YGHt6Cc15PPSTZBhoP+Zp8VzwKwkXN5YSy2WE40IjMY9KFSSo1qykIJA==",
        "shasum": "e42e9020eb78b1112cf78db48e54975dca6daeed",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-6.2.0-next.3.tgz",
        "fileCount": 67,
        "unpackedSize": 204804,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIAwCgCdtMKvcZqAbY8ByYRH+NE97+id3Apsjg+nrvrp4AiBy+yy0Xqy+IfOtyx313eAGqBABG/7oof8LunukT1CQhA=="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_6.2.0-next.3_1694882460169_0.48638144799340677"
      },
      "_hasShrinkwrap": false
    },
    "6.2.0-next.4": {
      "name": "graphql-request",
      "version": "6.2.0-next.4",
      "type": "module",
      "main": "./build/cjs/index.js",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.8.0",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "cross-fetch": "^4.0.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.0",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/json-bigint": "^1.0.1",
        "@types/node": "^20.0.0",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^6.0.0",
        "@typescript-eslint/parser": "^6.0.0",
        "@vitest/coverage-c8": "^0.33.0",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.38.0",
        "eslint-config-prettier": "^9.0.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^11.0.0",
        "json-bigint": "^1.0.0",
        "prettier": "^3.0.0",
        "type-fest": "^4.0.0",
        "typescript": "^5.0.4",
        "vitest": "^0.34.0",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst client = new GraphQLClient(endpoint)\nawait request('https://api.spacex.land/graphql/', document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Cookie support for Nodejs](./examples/request-cookie-support-for-node.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n  - [OCommonJS Support](./examples/other-package-commonjs.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on May 1 2023 that would mean these versions: 16, 18, 19.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "a9fcb44713dbb78b444302e827f5c264cb2911d9",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@6.2.0-next.4",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-jkr/lHxvHF6PYG6Hpf5vFyRJ48hKw0asASQHAtmik96M8Xsf4IiF3NjolkbMGS9FER+RnezSCuVOD+Y8LS6FpQ==",
        "shasum": "5bde98f41ce92abc13eb4e81099318dcf715dff9",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-6.2.0-next.4.tgz",
        "fileCount": 67,
        "unpackedSize": 205430,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEK/DUWTyQh35lP12OsUA7Ou6wlzL1k6aj+Uvkskv3qgAiEA/4egpEApwFVYNA2BClIdcUDD8j4CNeXg7p/3jOB1E7Y="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_6.2.0-next.4_1695824478159_0.7109031532298113"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.5": {
      "name": "graphql-request",
      "version": "7.0.0-next.5",
      "type": "module",
      "main": "./build/cjs/index.js",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.9.2",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.0",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/json-bigint": "^1.0.1",
        "@types/node": "^20.0.0",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^6.0.0",
        "@typescript-eslint/parser": "^6.0.0",
        "@vitest/coverage-c8": "^0.33.0",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.38.0",
        "eslint-config-prettier": "^9.0.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^11.0.0",
        "json-bigint": "^1.0.0",
        "prettier": "^3.0.0",
        "type-fest": "^4.0.0",
        "typescript": "^5.0.4",
        "vitest": "^0.34.0",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/';\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Cookie support for Nodejs](./examples/request-cookie-support-for-node.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n  - [OCommonJS Support](./examples/other-package-commonjs.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "6efcc0da5eb3359f5deaa4f573b867d266903878",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.5",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-ZpZde+vmVeOzM/GBDtbsdNe7va7OaMfp3+bZN6hHc2PeWm8VY+A93YRtKWlDHDf2Db6SEHOogqeR6sFwSHvCfA==",
        "shasum": "3f19d54b66e2cc529bee10a9aaf9d51d73ec0417",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.5.tgz",
        "fileCount": 67,
        "unpackedSize": 203359,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBmlumwLFC6FInsJCr4FIhj5bAalqOQa1ow8HNbsUMDHAiEAh3FvHLS3w8Jv7JxTbyP39vDYvzWYFDdsI1gW3WY03wg="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.5_1698417775076_0.7391034757546349"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.6": {
      "name": "graphql-request",
      "version": "7.0.0-next.6",
      "type": "module",
      "main": "./build/cjs/index.js",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.10.0",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.0",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^1.0.3",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/json-bigint": "^1.0.1",
        "@types/node": "^20.0.0",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^6.0.0",
        "@typescript-eslint/parser": "^6.0.0",
        "@vitest/coverage-c8": "^0.33.0",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.38.0",
        "eslint-config-prettier": "^9.0.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^11.0.0",
        "json-bigint": "^1.0.0",
        "prettier": "^3.0.0",
        "type-fest": "^4.0.0",
        "typescript": "^5.0.4",
        "vitest": "^0.34.0",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/'\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Cookie support for Nodejs](./examples/request-cookie-support-for-node.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n  - [OCommonJS Support](./examples/other-package-commonjs.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "3b7b31f0b8318cb4746152fe6c61ea0d6afa50e0",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.6",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-zTC3RWaa8QEkhtKrrvPJz6Nhjn4NmpDBr23lqdRWQhnnFKkSpZ+bWLF8r0cKeyJYPp8j57qtBsklmHNucw/7Sg==",
        "shasum": "af80f3b58477454f2dba54138f929f24520440dc",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.6.tgz",
        "fileCount": 67,
        "unpackedSize": 203368,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDcaxvcJU1pu/8cGJGhsABeDeMs2MEacUWRENY3AGNphAIgJgAqDZJLreiEzKgrCAJEvoqRgqooIwdPK0KN3I0rrok="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.6_1698594110867_0.9256457505321256"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.7": {
      "name": "graphql-request",
      "version": "7.0.0-next.7",
      "type": "module",
      "main": "./build/cjs/index.js",
      "exports": {
        ".": {
          "require": {
            "types": "./build/cjs/index.d.ts",
            "default": "./build/cjs/index.js"
          },
          "import": {
            "types": "./build/esm/index.d.ts",
            "default": "./build/esm/index.js"
          }
        }
      },
      "types": "./build/esm/index.d.ts",
      "packageManager": "pnpm@8.10.0",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm build:cjs && pnpm build:esm",
        "build:cjs": "pnpm tsc --project tsconfig.cjs.json && echo '{\"type\":\"commonjs\"}' > build/cjs/package.json",
        "build:esm": "pnpm tsc --project tsconfig.esm.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.0",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^16.0.0",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/json-bigint": "^1.0.1",
        "@types/node": "^20.0.0",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^6.0.0",
        "@typescript-eslint/parser": "^6.0.0",
        "@vitest/coverage-c8": "^0.33.0",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.38.0",
        "eslint-config-prettier": "^9.0.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^12.0.0",
        "json-bigint": "^1.0.0",
        "prettier": "^3.0.0",
        "type-fest": "^4.0.0",
        "typescript": "^5.0.4",
        "vitest": "^0.34.0",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- ESM native package (CJS build is included for now as well, but will eventually be removed)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/'\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Cookie support for Nodejs](./examples/request-cookie-support-for-node.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n  - [OCommonJS Support](./examples/other-package-commonjs.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "d6298a3d567774c5a59d0efd0f8d33f4c43fcb0b",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.7",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-xE5n7VbScCl8O9+c+V/oGvQrrzJrembzpM8Ijk/Em9DrAP8L9oX59geHsFxVdJQjuEwncNUqElHKHVxJwpwL3g==",
        "shasum": "2f7140035d995d3be01b9f20adb628c90c29e151",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.7.tgz",
        "fileCount": 67,
        "unpackedSize": 203636,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD6sX3C3ipDSOr3hDMTg16dTYTNLJZYLaYgknAyW2+IiAIhAOFk+ttQqlCwSIWsn6dRi8uKmgip9MVzREYmdGQtJjcv"
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.7_1698670437040_0.8892443474680944"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.8": {
      "name": "graphql-request",
      "version": "7.0.0-next.8",
      "type": "module",
      "exports": {
        ".": {
          "import": {
            "types": "./build/index.d.ts",
            "default": "./build/index.js"
          }
        }
      },
      "packageManager": "pnpm@8.10.0",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm tsc --project tsconfig.build.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.0",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^16.0.0",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/json-bigint": "^1.0.1",
        "@types/node": "^20.0.0",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^6.0.0",
        "@typescript-eslint/parser": "^6.0.0",
        "@vitest/coverage-c8": "^0.33.0",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.38.0",
        "eslint-config-prettier": "^9.0.0",
        "eslint-config-prisma": "^0.1.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^12.0.0",
        "json-bigint": "^1.0.0",
        "prettier": "^3.0.0",
        "type-fest": "^4.0.0",
        "typescript": "^5.0.4",
        "vitest": "^0.34.0",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- [Pure ESM package](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/'\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function (e.g. cookie support)](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "c3a309fcb2fcd0bcdcd4f530bb4035490f68c682",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.8",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-cgSz56fc/XfUNy9ZffGrSnT2k6Rn4iYRH8/BabQD+15oM7mQzpGB7ktLj1RJNGhKBBIQPYcxnBv35NR3i+aouQ==",
        "shasum": "dc71fb80ad345cadfcf0b6c04fd081c32edaa7c3",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.8.tgz",
        "fileCount": 38,
        "unpackedSize": 125748,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBnSznGWq/coesR6fTTukbSEWKXAw/0ixWzqGFfaYjoYAiEAhFme56Ls0MSJ/gLj3jzg+u1de619Q766ghnzYqIid9w="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.8_1698677808236_0.9488980973617096"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.9": {
      "name": "graphql-request",
      "version": "7.0.0-next.9",
      "type": "module",
      "exports": {
        ".": {
          "import": {
            "types": "./build/index.d.ts",
            "default": "./build/index.js"
          }
        }
      },
      "packageManager": "pnpm@8.10.2",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm tsc --project tsconfig.build.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.0",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^16.0.0",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/json-bigint": "^1.0.1",
        "@types/node": "^20.0.0",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^6.0.0",
        "@typescript-eslint/parser": "^6.0.0",
        "@vitest/coverage-c8": "^0.33.0",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.38.0",
        "eslint-config-prettier": "^9.0.0",
        "eslint-config-prisma": "^0.2.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^12.0.0",
        "json-bigint": "^1.0.0",
        "prettier": "^3.0.0",
        "type-fest": "^4.0.0",
        "typescript": "^5.0.4",
        "vitest": "^0.34.0",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- [Pure ESM package](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/'\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function (e.g. cookie support)](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "dbd7c7fc113090134c83b3459ea08f54983ce3bd",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.9",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-NJRdRSOfL2UUkg7rczq1cfv6mTSoLvkBPAfPlgr/Yz4Hz47l4pd1iTbJ/6og7T3NcRue1H3xUeapXdvccxeQBw==",
        "shasum": "3aa6384f0f6a198f98f22155c18f1549d7a30f50",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.9.tgz",
        "fileCount": 38,
        "unpackedSize": 125948,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCICUQdbpgp/iZlOswPFIsgD08E1Z3FTNup2rvpElX9c6RAiEA+5oNW4QET3zGvzagLCrk3pLaELTyKLHIZmeqg9qKqzA="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.9_1698951439570_0.9625721420734856"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.10": {
      "name": "graphql-request",
      "version": "7.0.0-next.10",
      "type": "module",
      "exports": {
        ".": {
          "import": {
            "types": "./build/index.d.ts",
            "default": "./build/index.js"
          }
        }
      },
      "packageManager": "pnpm@8.10.2",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm tsc --project tsconfig.build.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.0",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^16.0.0",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/json-bigint": "^1.0.1",
        "@types/node": "^20.0.0",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^6.0.0",
        "@typescript-eslint/parser": "^6.0.0",
        "@vitest/coverage-c8": "^0.33.0",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.38.0",
        "eslint-config-prettier": "^9.0.0",
        "eslint-config-prisma": "^0.2.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^12.0.0",
        "json-bigint": "^1.0.0",
        "prettier": "^3.0.0",
        "type-fest": "^4.0.0",
        "typescript": "^5.0.4",
        "vitest": "^0.34.0",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- [Pure ESM package](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/'\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function (e.g. cookie support)](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "0e53aeda8511a545dc5802343ee409640ffe5a90",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.10",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-d7wvHf/8dyB7GQI67y4MpRuMw5oPfx/8RZ3IlRvf/Cyw5c6pHaSL04I/M5h2Ewud+f65csYR0QULQlD8zD/4aA==",
        "shasum": "0037def027ff288a8ab7fa8251f6eba0c62bc3e2",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.10.tgz",
        "fileCount": 38,
        "unpackedSize": 124754,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAqKUwjuLzSFsTG1wdphe3LvjyRPPMK7NfG2i5MKrg1qAiEAgG8hept27m3QtyNIQcQ0SI0wGr7t8m3w4I2hNMq2PSs="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.10_1699194759802_0.04503633502413695"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.11": {
      "name": "graphql-request",
      "version": "7.0.0-next.11",
      "type": "module",
      "exports": {
        ".": {
          "import": {
            "types": "./build/index.d.ts",
            "default": "./build/index.js"
          }
        }
      },
      "packageManager": "pnpm@8.10.2",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm tsc --project tsconfig.build.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.0",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^16.0.0",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/json-bigint": "^1.0.1",
        "@types/node": "^20.0.0",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^6.0.0",
        "@typescript-eslint/parser": "^6.0.0",
        "@vitest/coverage-c8": "^0.33.0",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.38.0",
        "eslint-config-prettier": "^9.0.0",
        "eslint-config-prisma": "^0.2.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^12.0.0",
        "json-bigint": "^1.0.0",
        "prettier": "^3.0.0",
        "type-fest": "^4.0.0",
        "typescript": "^5.0.4",
        "vitest": "^0.34.0",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- [Pure ESM package](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/'\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function (e.g. cookie support)](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "99a192e855fe513adaf049a09467b1807d07b562",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.11",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-9eo/pS++QUIueut1w8tSfWuPBRMa1dNNG2FExVfhFh87B3feFH9ECaIhtxVXhXAisQP8xA8yGZ639/45KAITUw==",
        "shasum": "c361a48cb9499049bca1cc5237e988995add497a",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.11.tgz",
        "fileCount": 43,
        "unpackedSize": 126480,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIADGnonhcX2dGRkgXBPaO19Px5rxHwjiNw8I8a1UFc9gAiEArjWYk/vSTtOUxwHOx+ZgUNDMTb4v1cZh4IPi0kA8jwg="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.11_1699329571254_0.41517472500563324"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.12": {
      "name": "graphql-request",
      "version": "7.0.0-next.12",
      "type": "module",
      "exports": {
        ".": {
          "import": {
            "types": "./build/index.d.ts",
            "default": "./build/index.js"
          }
        }
      },
      "packageManager": "pnpm@8.12.1",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm tsc --project tsconfig.build.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.0",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^16.0.0",
        "@types/body-parser": "^1.19.2",
        "@types/express": "^4.17.17",
        "@types/json-bigint": "^1.0.1",
        "@types/node": "^20.0.0",
        "@types/ws": "^8.5.4",
        "@typescript-eslint/eslint-plugin": "^6.0.0",
        "@typescript-eslint/parser": "^6.0.0",
        "@vitest/coverage-c8": "^0.33.0",
        "apollo-server-express": "^3.12.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.38.0",
        "eslint-config-prettier": "^9.0.0",
        "eslint-config-prisma": "^0.2.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.12.1",
        "happy-dom": "^12.0.0",
        "json-bigint": "^1.0.0",
        "prettier": "^3.0.0",
        "type-fest": "^4.0.0",
        "typescript": "^5.0.4",
        "vitest": "^0.34.0",
        "ws": "^8.13.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- [Pure ESM package](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/'\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function (e.g. cookie support)](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "0eb8a1def8c07be59535de7716b0b716fb139a31",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.12",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-+ZbTY8w0asENnlhdBJYukjuQr1A4GnpQpFD79DbimJxcspm6AtRS7hCg+SHV+hLeJ3FXENbiPcEevYj804BVtw==",
        "shasum": "d01fe0761cbbb887f480fff4128ae558fd37fc4b",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.12.tgz",
        "fileCount": 43,
        "unpackedSize": 126572,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDGfUV6dgIAJShWXYjISNioAUKYPO1iJE5JxkPQU8qsFQIgMkFeRvJi+vUeCQdYCtabNZVyG9k7IApEybpZi8Fox60="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.12_1702902723365_0.14853473897169445"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.13": {
      "name": "graphql-request",
      "version": "7.0.0-next.13",
      "type": "module",
      "exports": {
        ".": {
          "import": {
            "types": "./build/entrypoints/main.d.ts",
            "default": "./build/entrypoints/main.js"
          }
        }
      },
      "packageManager": "pnpm@8.14.3",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm tsc --project tsconfig.build.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.2",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^16.1.1",
        "@types/body-parser": "^1.19.5",
        "@types/express": "^4.17.21",
        "@types/json-bigint": "^1.0.4",
        "@types/node": "^20.11.6",
        "@types/ws": "^8.5.10",
        "@typescript-eslint/eslint-plugin": "^6.19.1",
        "@typescript-eslint/parser": "^6.19.1",
        "apollo-server-express": "^3.13.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.56.0",
        "eslint-config-prettier": "^9.1.0",
        "eslint-config-prisma": "^0.2.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.14.3",
        "happy-dom": "^13.3.1",
        "json-bigint": "^1.0.0",
        "prettier": "^3.2.4",
        "type-fest": "^4.10.1",
        "typescript": "^5.3.3",
        "vitest": "^1.2.1",
        "ws": "^8.16.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- [Pure ESM package](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/'\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function (e.g. cookie support)](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "4cadba3a662ac79eb6e58632b333ea872807fc65",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.13",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-jwojB26waJgVDM6ENw2pxFWTL0qNooCnvkDmYL/7z7CKhjfguqZcb1+W8NrGTWmfHAhHYZ2izXBxVWoMRT3FFQ==",
        "shasum": "f2a65178327d1b5dd00bed28c872f942428f6e9a",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.13.tgz",
        "fileCount": 68,
        "unpackedSize": 133647,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDSXQWkEU6n0QMhxgcNG316R2FyI3mBa1teBJleW75HSAIgbKlWCujd+WGK5Va4fNZaJcu+AyMnTII78QFaVmkHgY4="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.13_1706155767287_0.2932418253754323"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.14": {
      "name": "graphql-request",
      "version": "7.0.0-next.14",
      "type": "module",
      "exports": {
        ".": {
          "import": {
            "types": "./build/entrypoints/main.d.ts",
            "default": "./build/entrypoints/main.js"
          }
        }
      },
      "packageManager": "pnpm@8.15.1",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm tsc --project tsconfig.build.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.2",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^16.1.1",
        "@types/body-parser": "^1.19.5",
        "@types/express": "^4.17.21",
        "@types/json-bigint": "^1.0.4",
        "@types/node": "^20.11.6",
        "@types/ws": "^8.5.10",
        "@typescript-eslint/eslint-plugin": "^6.19.1",
        "@typescript-eslint/parser": "^6.19.1",
        "apollo-server-express": "^3.13.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.56.0",
        "eslint-config-prettier": "^9.1.0",
        "eslint-config-prisma": "^0.2.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.14.3",
        "happy-dom": "^13.3.1",
        "json-bigint": "^1.0.0",
        "prettier": "^3.2.4",
        "type-fest": "^4.10.1",
        "typescript": "^5.3.3",
        "vitest": "^1.2.1",
        "ws": "^8.16.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [IgnoreOperationName](#ignoreoperationname)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- [Pure ESM package](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/'\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function (e.g. cookie support)](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n### IgnoreOperationName\n\nOperationName has been introduced to address issues reported here [Support operation name](https://github.com/jasonkuhrt/graphql-request/issues/64),\nHowever, on certain occasions this information may not be needed in requests. In such cases, you might consider ignoring operationName to avoid the extraction steps currently performed by a parsing operation when the document is provided in string format.\n\nBy default the GraphQLClient tries to extract the operationName from the document.\nYou can define `excludeOperationName` in the constructor of GraphQLClient to avoid the extraction process if it is not needed. This can be useful if you don't use operationName and want to optimise queries by reducing the amount of computation as much as possible, especially if we are in a context where we are using documents in string format to reduce bundle size.\n\n```ts\n// example where the operation name is not ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n})\n// example in which the operation name is ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n  excludeOperationName: true,\n})\n```\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "0f1b7b5fec80eb345a4e6c585b5ce90f8bc8c053",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.14",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-iEM+PPoz8WnYp/wCrgWmB1Zl7CNpcU+YgujusoKKnzVaPE4rlw0z+fU+ce2hv7B9v00Pv3gQQ8uEuv/l/bf6PA==",
        "shasum": "dca58fc0825173eafba32a97de94ca787149d6ea",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.14.tgz",
        "fileCount": 68,
        "unpackedSize": 136661,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQC1b2hLjAh7uhO9xGnvq3nkJHV9n5Tc2gpLtWSvksBZsAIgUB28MJiHIUgWFyZXB2nx7dH9DzEkzwtt/1JzLrxD7U8="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.14_1706797514105_0.4920272991978185"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.15": {
      "name": "graphql-request",
      "version": "7.0.0-next.15",
      "type": "module",
      "exports": {
        ".": {
          "import": {
            "types": "./build/entrypoints/main.d.ts",
            "default": "./build/entrypoints/main.js"
          }
        }
      },
      "packageManager": "pnpm@8.15.1",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm tsc --project tsconfig.build.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.2",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^16.1.1",
        "@types/body-parser": "^1.19.5",
        "@types/express": "^4.17.21",
        "@types/json-bigint": "^1.0.4",
        "@types/node": "^20.11.6",
        "@types/ws": "^8.5.10",
        "@typescript-eslint/eslint-plugin": "^6.19.1",
        "@typescript-eslint/parser": "^6.19.1",
        "apollo-server-express": "^3.13.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.56.0",
        "eslint-config-prettier": "^9.1.0",
        "eslint-config-prisma": "^0.2.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.14.3",
        "happy-dom": "^13.3.1",
        "json-bigint": "^1.0.0",
        "prettier": "^3.2.4",
        "type-fest": "^4.10.1",
        "typescript": "^5.3.3",
        "vitest": "^1.2.1",
        "ws": "^8.16.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [IgnoreOperationName](#ignoreoperationname)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- [Pure ESM package](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/'\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function (e.g. cookie support)](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n### IgnoreOperationName\n\nOperationName has been introduced to address issues reported here [Support operation name](https://github.com/jasonkuhrt/graphql-request/issues/64),\nHowever, on certain occasions this information may not be needed in requests. In such cases, you might consider ignoring operationName to avoid the extraction steps currently performed by a parsing operation when the document is provided in string format.\n\nBy default the GraphQLClient tries to extract the operationName from the document.\nYou can define `excludeOperationName` in the constructor of GraphQLClient to avoid the extraction process if it is not needed. This can be useful if you don't use operationName and want to optimise queries by reducing the amount of computation as much as possible, especially if we are in a context where we are using documents in string format to reduce bundle size.\n\n```ts\n// example where the operation name is not ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n})\n// example in which the operation name is ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n  excludeOperationName: true,\n})\n```\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "8f926b8c9e2f2f0c53ae37ac9b387609fe7ef160",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.15",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-Kp3VqofQt8BZJkTI6xbxuOkXMrH91K9mU65n3sgjlZBjIm3L6farEMPjdsT9MvR5Pb3HEaLgVAKY0eHo/XuH6A==",
        "shasum": "581ebd2436e0a370a5b2cdc5df65c1d5001556bd",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.15.tgz",
        "fileCount": 78,
        "unpackedSize": 152606,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIB/SmA8VZ2KJNxxV3Br0agmByPboSICDQfQ61nFi0H4aAiEA+6P8Q7WVYvteo4tiBLEY19Pe9qZun9wORbWbWfMxqUA="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.15_1706983059704_0.5036115275922424"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.16": {
      "name": "graphql-request",
      "version": "7.0.0-next.16",
      "type": "module",
      "exports": {
        ".": {
          "import": {
            "types": "./build/entrypoints/main.d.ts",
            "default": "./build/entrypoints/main.js"
          }
        }
      },
      "packageManager": "pnpm@8.15.1",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm tsc --project tsconfig.build.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.2",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^16.1.1",
        "@types/body-parser": "^1.19.5",
        "@types/express": "^4.17.21",
        "@types/json-bigint": "^1.0.4",
        "@types/node": "^20.11.6",
        "@types/ws": "^8.5.10",
        "@typescript-eslint/eslint-plugin": "^6.19.1",
        "@typescript-eslint/parser": "^6.19.1",
        "apollo-server-express": "^3.13.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.56.0",
        "eslint-config-prettier": "^9.1.0",
        "eslint-config-prisma": "^0.2.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^10.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.14.3",
        "happy-dom": "^13.3.1",
        "json-bigint": "^1.0.0",
        "prettier": "^3.2.4",
        "tsx": "^4.7.0",
        "type-fest": "^4.10.1",
        "typescript": "^5.3.3",
        "vitest": "^1.2.1",
        "ws": "^8.16.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [IgnoreOperationName](#ignoreoperationname)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- [Pure ESM package](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/'\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function (e.g. cookie support)](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n### IgnoreOperationName\n\nOperationName has been introduced to address issues reported here [Support operation name](https://github.com/jasonkuhrt/graphql-request/issues/64),\nHowever, on certain occasions this information may not be needed in requests. In such cases, you might consider ignoring operationName to avoid the extraction steps currently performed by a parsing operation when the document is provided in string format.\n\nBy default the GraphQLClient tries to extract the operationName from the document.\nYou can define `excludeOperationName` in the constructor of GraphQLClient to avoid the extraction process if it is not needed. This can be useful if you don't use operationName and want to optimise queries by reducing the amount of computation as much as possible, especially if we are in a context where we are using documents in string format to reduce bundle size.\n\n```ts\n// example where the operation name is not ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n})\n// example in which the operation name is ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n  excludeOperationName: true,\n})\n```\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "a16996940a34c56d37c6253f7ebd553a120e2745",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.16",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-HZfmiLNb+dLlBv/vE3GlHlmTPiKHzjJ2YlZTymj70e7yYgCI3rhXXTeb4lZ9dT5pK7fhT6Tm6Mjeykc+lFogtw==",
        "shasum": "f4693af38db65104b9175fdfdae0292e33ec9282",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.16.tgz",
        "fileCount": 78,
        "unpackedSize": 158282,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIG8R5nXaN24EgS6DC++578TG4CODHLX8RBQqDjcxhXu5AiEA7geUhWbWhv7zF0SVnlgZsYYyC1c35zfWNf909ihzRAE="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.16_1706986262541_0.4471645448786319"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.17": {
      "name": "graphql-request",
      "version": "7.0.0-next.17",
      "type": "module",
      "exports": {
        ".": {
          "import": {
            "types": "./build/entrypoints/main.d.ts",
            "default": "./build/entrypoints/main.js"
          }
        }
      },
      "packageManager": "pnpm@8.15.1",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm tsc --project tsconfig.build.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.2",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^16.1.1",
        "@types/body-parser": "^1.19.5",
        "@types/express": "^4.17.21",
        "@types/json-bigint": "^1.0.4",
        "@types/node": "^20.11.6",
        "@types/ws": "^8.5.10",
        "@typescript-eslint/eslint-plugin": "^6.19.1",
        "@typescript-eslint/parser": "^6.19.1",
        "apollo-server-express": "^3.13.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.56.0",
        "eslint-config-prettier": "^9.1.0",
        "eslint-config-prisma": "^0.2.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^12.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.14.3",
        "happy-dom": "^13.3.1",
        "json-bigint": "^1.0.0",
        "prettier": "^3.2.4",
        "tsx": "^4.7.0",
        "type-fest": "^4.10.1",
        "typescript": "^5.3.3",
        "vitest": "^1.2.1",
        "ws": "^8.16.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [IgnoreOperationName](#ignoreoperationname)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- [Pure ESM package](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/'\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function (e.g. cookie support)](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n### IgnoreOperationName\n\nOperationName has been introduced to address issues reported here [Support operation name](https://github.com/jasonkuhrt/graphql-request/issues/64),\nHowever, on certain occasions this information may not be needed in requests. In such cases, you might consider ignoring operationName to avoid the extraction steps currently performed by a parsing operation when the document is provided in string format.\n\nBy default the GraphQLClient tries to extract the operationName from the document.\nYou can define `excludeOperationName` in the constructor of GraphQLClient to avoid the extraction process if it is not needed. This can be useful if you don't use operationName and want to optimise queries by reducing the amount of computation as much as possible, especially if we are in a context where we are using documents in string format to reduce bundle size.\n\n```ts\n// example where the operation name is not ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n})\n// example in which the operation name is ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n  excludeOperationName: true,\n})\n```\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "4d4ac4cc201e03aa70ab5182205b04bff6d4271d",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.17",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-GoCG5GgxZ8NtGFRaisOFHznNTwGYvqZ95EiD4QH/gLfu8Q2DtLNTtvW/W1L7CrqHlv6WyVtfHfjywnB9zcuw1Q==",
        "shasum": "e7098d4a00a9d336b5202bbbff3d7a34939663c6",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.17.tgz",
        "fileCount": 78,
        "unpackedSize": 158812,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGjOrwYvcxN7xRLM5bqxJE1MFBEgc1hyUxMzNsOaUnYtAiBesASy8ufpsR7qk0O7vgzL4w3ME/s77iVcWLcKFs/frA=="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.17_1707781438632_0.9880043111017174"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.18": {
      "name": "graphql-request",
      "version": "7.0.0-next.18",
      "type": "module",
      "exports": {
        ".": {
          "import": {
            "types": "./build/entrypoints/main.d.ts",
            "default": "./build/entrypoints/main.js"
          }
        }
      },
      "packageManager": "pnpm@8.15.2",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm tsc --project tsconfig.build.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.2",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^16.1.1",
        "@types/body-parser": "^1.19.5",
        "@types/express": "^4.17.21",
        "@types/json-bigint": "^1.0.4",
        "@types/node": "^20.11.6",
        "@types/ws": "^8.5.10",
        "@typescript-eslint/eslint-plugin": "^7.0.0",
        "@typescript-eslint/parser": "^7.0.0",
        "apollo-server-express": "^3.13.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.56.0",
        "eslint-config-prettier": "^9.1.0",
        "eslint-config-prisma": "^0.2.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^12.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.14.3",
        "happy-dom": "^13.3.1",
        "json-bigint": "^1.0.0",
        "prettier": "^3.2.4",
        "tsx": "^4.7.0",
        "type-fest": "^4.10.1",
        "typescript": "^5.3.3",
        "vitest": "^1.2.1",
        "ws": "^8.16.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [IgnoreOperationName](#ignoreoperationname)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- [Pure ESM package](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/'\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function (e.g. cookie support)](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n### IgnoreOperationName\n\nOperationName has been introduced to address issues reported here [Support operation name](https://github.com/jasonkuhrt/graphql-request/issues/64),\nHowever, on certain occasions this information may not be needed in requests. In such cases, you might consider ignoring operationName to avoid the extraction steps currently performed by a parsing operation when the document is provided in string format.\n\nBy default the GraphQLClient tries to extract the operationName from the document.\nYou can define `excludeOperationName` in the constructor of GraphQLClient to avoid the extraction process if it is not needed. This can be useful if you don't use operationName and want to optimise queries by reducing the amount of computation as much as possible, especially if we are in a context where we are using documents in string format to reduce bundle size.\n\n```ts\n// example where the operation name is not ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n})\n// example in which the operation name is ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n  excludeOperationName: true,\n})\n```\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "4af7cb4c0e9a8c67b1bf020ac50a25bde7c0bb4a",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.18",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-SBpeprqepqG37Rqi07JdEioHZHvz2OBFYOzqEzRSei1bAls7q03ijcd9Ya4gh8GzGOWcrGwSR2mEh2aj2N2JVA==",
        "shasum": "52fc3b245c82ed6deaec83f37cb1c7575bb2d34b",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.18.tgz",
        "fileCount": 78,
        "unpackedSize": 159079,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDqvLcfxhn4hUQBy5s42mzDGa+sbRPqFu9ga/PCJlkgmAIhALwmOa2tOCGv88mTQg76QgcNoKSZwHllv+Eg2ACNy1vt"
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.18_1707969301856_0.5320343937313807"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.19": {
      "name": "graphql-request",
      "version": "7.0.0-next.19",
      "type": "module",
      "exports": {
        ".": {
          "import": {
            "types": "./build/entrypoints/main.d.ts",
            "default": "./build/entrypoints/main.js"
          }
        }
      },
      "packageManager": "pnpm@8.15.3",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm tsc --project tsconfig.build.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.2",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^16.1.1",
        "@types/body-parser": "^1.19.5",
        "@types/express": "^4.17.21",
        "@types/json-bigint": "^1.0.4",
        "@types/node": "^20.11.6",
        "@types/ws": "^8.5.10",
        "@typescript-eslint/eslint-plugin": "^7.0.0",
        "@typescript-eslint/parser": "^7.0.0",
        "apollo-server-express": "^3.13.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.56.0",
        "eslint-config-prettier": "^9.1.0",
        "eslint-config-prisma": "^0.2.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^12.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.14.3",
        "happy-dom": "^13.3.1",
        "json-bigint": "^1.0.0",
        "prettier": "^3.2.4",
        "tsx": "^4.7.0",
        "type-fest": "^4.10.1",
        "typescript": "^5.3.3",
        "vitest": "^1.2.1",
        "ws": "^8.16.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [IgnoreOperationName](#ignoreoperationname)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- [Pure ESM package](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/'\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function (e.g. cookie support)](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n### IgnoreOperationName\n\nOperationName has been introduced to address issues reported here [Support operation name](https://github.com/jasonkuhrt/graphql-request/issues/64),\nHowever, on certain occasions this information may not be needed in requests. In such cases, you might consider ignoring operationName to avoid the extraction steps currently performed by a parsing operation when the document is provided in string format.\n\nBy default the GraphQLClient tries to extract the operationName from the document.\nYou can define `excludeOperationName` in the constructor of GraphQLClient to avoid the extraction process if it is not needed. This can be useful if you don't use operationName and want to optimise queries by reducing the amount of computation as much as possible, especially if we are in a context where we are using documents in string format to reduce bundle size.\n\n```ts\n// example where the operation name is not ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n})\n// example in which the operation name is ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n  excludeOperationName: true,\n})\n```\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "080346edfd9bfa4602eca8cb0aea30a7d3682a26",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.19",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-iXenbCECa4WdJ95G8ZkY/64wb7x41JlPXB58ovAhEUN4LsELizIAc47lmuFsuPKdK7nE6S8cV+RatE6YcLeJzA==",
        "shasum": "dbaafa03c559c288064ec9a61a58e3bf572da751",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.19.tgz",
        "fileCount": 78,
        "unpackedSize": 159079,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIC7GFVf0rR2peaJYfzCjfoiyyo78yptuZdwM89JRP+ekAiASIhEeQTeXF6mAA793G0PmwqP2P4I+9MsmzIsqwC0tGQ=="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.19_1708208263466_0.9870181931906199"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.20": {
      "name": "graphql-request",
      "version": "7.0.0-next.20",
      "type": "module",
      "exports": {
        ".": {
          "import": {
            "types": "./build/entrypoints/main.d.ts",
            "default": "./build/entrypoints/main.js"
          }
        }
      },
      "packageManager": "pnpm@8.15.3",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && prettier --write .",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "prettier --check . && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && prettier --write README.md",
        "build": "pnpm clean && pnpm tsc --project tsconfig.build.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.2",
        "@prisma-labs/prettier-config": "^0.1.0",
        "@tsconfig/node16": "^16.1.1",
        "@types/body-parser": "^1.19.5",
        "@types/express": "^4.17.21",
        "@types/json-bigint": "^1.0.4",
        "@types/node": "^20.11.6",
        "@types/ws": "^8.5.10",
        "@typescript-eslint/eslint-plugin": "^7.0.0",
        "@typescript-eslint/parser": "^7.0.0",
        "apollo-server-express": "^3.13.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.56.0",
        "eslint-config-prettier": "^9.1.0",
        "eslint-config-prisma": "^0.2.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^12.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.14.3",
        "happy-dom": "^13.3.1",
        "json-bigint": "^1.0.0",
        "prettier": "^3.2.4",
        "tsx": "^4.7.0",
        "type-fest": "^4.10.1",
        "typescript": "^5.3.3",
        "vitest": "^1.2.1",
        "ws": "^8.16.0"
      },
      "prettier": "@prisma-labs/prettier-config",
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [IgnoreOperationName](#ignoreoperationname)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- [Pure ESM package](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { request, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { GraphQLClient, gql } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/'\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function (e.g. cookie support)](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n### IgnoreOperationName\n\nOperationName has been introduced to address issues reported here [Support operation name](https://github.com/jasonkuhrt/graphql-request/issues/64),\nHowever, on certain occasions this information may not be needed in requests. In such cases, you might consider ignoring operationName to avoid the extraction steps currently performed by a parsing operation when the document is provided in string format.\n\nBy default the GraphQLClient tries to extract the operationName from the document.\nYou can define `excludeOperationName` in the constructor of GraphQLClient to avoid the extraction process if it is not needed. This can be useful if you don't use operationName and want to optimise queries by reducing the amount of computation as much as possible, especially if we are in a context where we are using documents in string format to reduce bundle size.\n\n```ts\n// example where the operation name is not ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n})\n// example in which the operation name is ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n  excludeOperationName: true,\n})\n```\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like prettier formatting and IDE syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "2a121c6b2b606cd8623c5e26df7ea1961a78bbeb",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.20",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-dWvx4SzPp6E7Dq/3qJj1XMnQtRO5rKhaWH6GgKUUzUjDbR4zPuqlfPhQbyByOqmCmjlJN1mdJ0Aj1blPBkdiOA==",
        "shasum": "93ef616fd8c79f2e0fb5cbde567ff5ef84d400d9",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.20.tgz",
        "fileCount": 73,
        "unpackedSize": 131640,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIH/z3l/hL15qnbSjBFC4wLdTkCOVLhLWFl7uebl5vu44AiArwhHr460lJgrkgkI4HRi96jurA5lPkUv0DvxaVg8vyw=="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.20_1708208623492_0.5864199186525745"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.21": {
      "name": "graphql-request",
      "version": "7.0.0-next.21",
      "type": "module",
      "exports": {
        ".": {
          "import": {
            "types": "./build/entrypoints/main.d.ts",
            "default": "./build/entrypoints/main.js"
          }
        }
      },
      "packageManager": "pnpm@8.15.3",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && dprint fmt",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "dprint check && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && dprint fmt README.md",
        "build": "pnpm clean && pnpm tsc --project tsconfig.build.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "dprint": "^0.45.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.2",
        "@tsconfig/node16": "^16.1.1",
        "@types/body-parser": "^1.19.5",
        "@types/express": "^4.17.21",
        "@types/json-bigint": "^1.0.4",
        "@types/node": "^20.11.6",
        "@types/ws": "^8.5.10",
        "@typescript-eslint/eslint-plugin": "^7.0.0",
        "@typescript-eslint/parser": "^7.0.0",
        "apollo-server-express": "^3.13.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.56.0",
        "eslint-config-prisma": "^0.2.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^12.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.1.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "graphql-ws": "^5.14.3",
        "happy-dom": "^13.3.1",
        "json-bigint": "^1.0.0",
        "tsx": "^4.7.0",
        "type-fest": "^4.10.1",
        "typescript": "^5.3.3",
        "vitest": "^1.2.1",
        "ws": "^8.16.0"
      },
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [IgnoreOperationName](#ignoreoperationname)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- [Pure ESM package](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { gql, request } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { gql, GraphQLClient } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/'\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function (e.g. cookie support)](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n### IgnoreOperationName\n\nOperationName has been introduced to address issues reported here [Support operation name](https://github.com/jasonkuhrt/graphql-request/issues/64),\nHowever, on certain occasions this information may not be needed in requests. In such cases, you might consider ignoring operationName to avoid the extraction steps currently performed by a parsing operation when the document is provided in string format.\n\nBy default the GraphQLClient tries to extract the operationName from the document.\nYou can define `excludeOperationName` in the constructor of GraphQLClient to avoid the extraction process if it is not needed. This can be useful if you don't use operationName and want to optimise queries by reducing the amount of computation as much as possible, especially if we are in a context where we are using documents in string format to reduce bundle size.\n\n```ts\n// example where the operation name is not ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n})\n// example in which the operation name is ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n  excludeOperationName: true,\n})\n```\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like automatic formatting and syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "cc86c347640302434a950f3987f7285c29796430",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.21",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-9xvAxoS/PLf3kuH974+EgEufF0Dugzl2qfPtFfssxf9+Qw+tvn/pXMGchTPmjIQV51bHahYZDmS9VXT6AZ8z8w==",
        "shasum": "556122bb38a26002bab58ac4223b152bfd43c615",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.21.tgz",
        "fileCount": 73,
        "unpackedSize": 131470,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHUBya17f+H9YOYhxKF61i70kDCjeU640CF3qFYM3HgLAiAFDssqtIZBSpDPYDB9tx39CUxCitpB/P88h8luc/Uvlg=="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.21_1708212240425_0.5067161850064124"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-next.22": {
      "name": "graphql-request",
      "version": "7.0.0-next.22",
      "type": "module",
      "exports": {
        ".": {
          "import": {
            "types": "./build/entrypoints/main.d.ts",
            "default": "./build/entrypoints/main.js"
          }
        }
      },
      "packageManager": "pnpm@8.15.3",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
      },
      "keywords": [
        "graphql",
        "request",
        "fetch",
        "graphql-client"
      ],
      "author": {
        "name": "Jason Kuhrt",
        "email": "jasonkuhrt@me.com",
        "url": "https://kuhrt.me"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/jasonkuhrt/graphql-request/issues"
      },
      "homepage": "https://github.com/jasonkuhrt/graphql-request",
      "scripts": {
        "dev": "rm -rf dist && tsc --watch",
        "format": "pnpm build:docs && dprint fmt",
        "lint": "eslint . --ext .ts,.tsx --fix",
        "check": "pnpm check:types && pnpm check:format && pnpm check:lint",
        "check:types": "pnpm tsc --noEmit",
        "check:format": "dprint check && pnpm build:docs && git diff --exit-code README.md",
        "check:lint": "eslint . --ext .ts,.tsx --max-warnings 0",
        "prepublishOnly": "pnpm build",
        "build:docs": "doctoc README.md --notitle && dprint fmt README.md",
        "build": "pnpm clean && pnpm tsc --project tsconfig.build.json",
        "clean": "tsc --build --clean && rm -rf build",
        "test": "vitest",
        "test:coverage": "pnpm test -- --coverage",
        "release:stable": "dripip stable",
        "release:preview": "dripip preview",
        "release:pr": "dripip pr"
      },
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "dprint": "^0.45.0"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      },
      "devDependencies": {
        "@graphql-tools/schema": "^10.0.2",
        "@tsconfig/node16": "^16.1.1",
        "@types/body-parser": "^1.19.5",
        "@types/express": "^4.17.21",
        "@types/json-bigint": "^1.0.4",
        "@types/node": "^20.11.19",
        "@types/ws": "^8.5.10",
        "@typescript-eslint/eslint-plugin": "^7.0.1",
        "@typescript-eslint/parser": "^7.0.1",
        "apollo-server-express": "^3.13.0",
        "body-parser": "^1.20.2",
        "doctoc": "^2.2.1",
        "dripip": "^0.10.0",
        "eslint": "^8.56.0",
        "eslint-config-prisma": "^0.2.0",
        "eslint-plugin-deprecation": "^2.0.0",
        "eslint-plugin-only-warn": "^1.1.0",
        "eslint-plugin-prefer-arrow": "^1.2.3",
        "eslint-plugin-simple-import-sort": "^12.0.0",
        "eslint-plugin-tsdoc": "^0.2.17",
        "express": "^4.18.2",
        "fetch-cookie": "^2.2.0",
        "get-port": "^7.0.0",
        "graphql": "^16.8.1",
        "graphql-tag": "^2.12.6",
        "happy-dom": "^13.3.8",
        "json-bigint": "^1.0.0",
        "tsx": "^4.7.1",
        "type-fest": "^4.10.2",
        "typescript": "^5.3.3",
        "vitest": "^1.3.0"
      },
      "readme": "# graphql-request\n\nMinimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n![GitHub Action](https://github.com/jasonkuhrt/graphql-request/workflows/trunk/badge.svg) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Highlights](#highlights)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Examples](#examples)\n- [Node Version Support](#node-version-support)\n- [Reference](#reference)\n  - [Configuration](#configuration)\n    - [ErrorPolicy](#errorpolicy)\n      - [None (default)](#none-default)\n      - [Ignore](#ignore)\n      - [All](#all)\n  - [IgnoreOperationName](#ignoreoperationname)\n- [Knowledge Base](#knowledge-base)\n  - [Why was the file upload feature taken away? Will it return?](#why-was-the-file-upload-feature-taken-away-will-it-return)\n  - [Why do I have to install `graphql`?](#why-do-i-have-to-install-graphql)\n  - [Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?](#do-i-need-to-wrap-my-graphql-documents-inside-the-gql-template-exported-by-graphql-request)\n  - [What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?](#what-sets-graphql-request-apart-from-other-clients-like-apollo-relay-etc)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Highlights\n\n- Most **simple & lightweight** GraphQL client\n- Promise-based API (works with `async` / `await`)\n- [Pure ESM package](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)\n- First class TypeScript support\n  - Including `TypedDocumentNode`\n- Isomorphic (works in both Nodejs and Browsers)\n\n## Install\n\n```sh\nnpm add graphql-request graphql\n```\n\n## Quick Start\n\nSend a GraphQL document using a static request function:\n\n```js\nimport { gql, request } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nawait request('https://api.spacex.land/graphql/', document)\n```\n\nThe function can be passed a configuration object for more complex cases:\n\n```ts\nawait request({\n  url,\n  document,\n  variables,\n  requestHeaders,\n})\n```\n\nA class is available for constructing your own instances:\n\n```js\nimport { gql, GraphQLClient } from 'graphql-request'\n\nconst document = gql`\n  {\n    company {\n      ceo\n    }\n  }\n`\nconst endpoint = 'https://api.spacex.land/graphql/'\nconst client = new GraphQLClient(endpoint)\nawait client.request(document)\n```\n\n## Examples\n\n- Request:\n  - [Authentication via HTTP header](./examples/request-authentication-via-http-header.ts)\n  - [Method GET](./examples/request-method-get.ts)\n  - [Cancellation](./examples/request-cancellation.ts)\n  - [Headers Per Request (static)](./examples/request-headers-static-per-request.ts)\n  - [Headers Per Request (dynamic)](./examples/request-headers-dynamic-per-request.ts)\n  - [Handle Raw Response](./examples/request-handle-raw-response.ts)\n- GraphQL:\n  - [Document Variables](./examples/graphql-document-variables.ts)\n  - [Mutation](./examples/graphql-mutations.ts)\n  - [Batching Requests](./examples/graphql-batching-requests.ts)\n- Configuration:\n  - [Fetch: Passing Options](./examples/configuration-fetch-options.ts)\n  - [Fetch: Use custom function (e.g. cookie support)](./examples/configuration-fetch-custom-function.ts)\n  - [Custom JSON Serializer](./examples/configuration-request-json-serializer.ts)\n  - [Incremental: Set Endpoint](./examples/configuration-incremental-endpoint.ts)\n  - [Incremental: Set Request Headers](./examples/configuration-incremental-request-headers.ts)\n- Community\n  - [GraphQL Code Generator for typed GraphQL Queries](./examples/community-graphql-code-generator.ts)\n- TypeScript\n  - [Use `TypedDocumentNode`](./examples/typescript-typed-document-node.ts)\n- Other:\n  - [Middleware](./examples/other-middleware.ts)\n  - [Error Handling](./examples/other-error-handling.ts)\n\n## Node Version Support\n\nWe only (officially) support [versions of Nodejs](https://github.com/nodejs/Release#release-schedule) of the following status:\n\n- Current\n- LTS\n- Maintenance _and end of life not yet reached_\n\nSo for example on Oct 24 2023 that would mean these versions: 18, 20, 21.\n\nAny issue that exists solely for an unsupported version of Nodejs will be rejected (not worked on).\n\n## Reference\n\n⚠️ This reference is incomplete. Check out the [examples](./examples/) for more reference material.\n\n### Configuration\n\n#### ErrorPolicy\n\nBy default GraphQLClient will throw when an error is received. However, sometimes you still want to resolve the (partial) data you received.\nYou can define `errorPolicy` in the `GraphQLClient` constructor.\n\n```ts\nconst client = new GraphQLClient(endpoint, { errorPolicy: 'all' })\n```\n\n##### None (default)\n\nAllow no errors at all. If you receive a GraphQL error the client will throw.\n\n##### Ignore\n\nIgnore incoming errors and resolve like no errors occurred\n\n##### All\n\nReturn both the errors and data, only works with `rawRequest`.\n\n### IgnoreOperationName\n\nOperationName has been introduced to address issues reported here [Support operation name](https://github.com/jasonkuhrt/graphql-request/issues/64),\nHowever, on certain occasions this information may not be needed in requests. In such cases, you might consider ignoring operationName to avoid the extraction steps currently performed by a parsing operation when the document is provided in string format.\n\nBy default the GraphQLClient tries to extract the operationName from the document.\nYou can define `excludeOperationName` in the constructor of GraphQLClient to avoid the extraction process if it is not needed. This can be useful if you don't use operationName and want to optimise queries by reducing the amount of computation as much as possible, especially if we are in a context where we are using documents in string format to reduce bundle size.\n\n```ts\n// example where the operation name is not ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n})\n// example in which the operation name is ignored\nconst client = new GraphQLClient(endpoint, {\n  method: 'POST',\n  excludeOperationName: true,\n})\n```\n\n## Knowledge Base\n\n#### Why was the file upload feature taken away? Will it return?\n\nIn [this issue](https://github.com/jasonkuhrt/graphql-request/issues/500) we decided to make this library more stable and maintainable. In principal the feature is still in scope of this library and will make a return when we find time to do the feature right.\n\n#### Why do I have to install `graphql`?\n\n`graphql-request` uses methods exposed by the `graphql` package to handle some internal logic. On top of that, for TypeScript users, some types are used from the `graphql` package to provide better typings.\n\n#### Do I need to wrap my GraphQL documents inside the `gql` template exported by `graphql-request`?\n\nNo. It is there for convenience so that you can get the tooling support like automatic formatting and syntax highlighting. You can use `gql` from `graphql-tag` if you need it for some reason too.\n\n#### What sets `graphql-request` apart from other clients like Apollo, Relay, etc.?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n",
      "readmeFilename": "README.md",
      "gitHead": "0ab350a299a7cd6972ddcd5e0566f8fa8b18833a",
      "description": "Minimal GraphQL client supporting Node and browsers for scripts or simple apps",
      "_id": "graphql-request@7.0.0-next.22",
      "_nodeVersion": "16.20.2",
      "_npmVersion": "8.19.4",
      "dist": {
        "integrity": "sha512-53UXF0PSvl0mEPSvqNMT70pax8VtmUr8crxG96DSGi4PNsH08+waJrsDa6NtaLXnrZ0VyWC5sgGsnduZvODwbw==",
        "shasum": "3e381ca2669bd31fbb19ca7c4f4b1c61b802e494",
        "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-7.0.0-next.22.tgz",
        "fileCount": 73,
        "unpackedSize": 131421,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIErkNrU3d8GWoDrDalhQ9z+Zd4m7b1tqk8uD7ACzfZmZAiEAkUO6Mtel1c1JIIn6WCJExKxJ+HGncxGjfNEUBTCIcQE="
          }
        ]
      },
      "_npmUser": {
        "name": "jasonkuhrt",
        "email": "jasonkuhrt@me.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "schickling",
          "email": "schickling.j@gmail.com"
        },
        {
          "name": "timsuchanek",
          "email": "tim.suchanek@gmail.com"
        },
        {
          "name": "jasonkuhrt",
          "email": "jasonkuhrt@me.com"
        },
        {
          "name": "divyenduz",
          "email": "mail@divyendusingh.com"
        },
        {
          "name": "weakky",
          "email": "rav4g3@hotmail.fr"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/graphql-request_7.0.0-next.22_1708224433434_0.16551751740538734"
      },
      "_hasShrinkwrap": false
    }
  },
  "readme": "",
  "maintainers": [
    {
      "name": "schickling",
      "email": "schickling.j@gmail.com"
    },
    {
      "name": "timsuchanek",
      "email": "tim.suchanek@gmail.com"
    },
    {
      "name": "jasonkuhrt",
      "email": "jasonkuhrt@me.com"
    },
    {
      "name": "divyenduz",
      "email": "mail@divyendusingh.com"
    },
    {
      "name": "weakky",
      "email": "rav4g3@hotmail.fr"
    }
  ],
  "time": {
    "modified": "2024-02-18T02:47:14.289Z",
    "created": "2017-06-01T12:59:14.894Z",
    "0.2.1": "2017-06-01T12:59:14.894Z",
    "0.2.2": "2017-06-01T13:05:30.096Z",
    "0.2.3": "2017-06-01T13:13:22.151Z",
    "1.0.0": "2017-06-02T08:57:40.910Z",
    "1.1.0": "2017-06-02T09:26:37.365Z",
    "1.1.1": "2017-06-02T09:28:43.369Z",
    "1.1.2": "2017-06-02T09:47:12.741Z",
    "1.1.3": "2017-06-12T08:56:27.139Z",
    "1.2.0": "2017-06-13T13:33:19.267Z",
    "1.3.0": "2017-07-15T19:06:54.787Z",
    "1.3.1": "2017-07-15T19:14:07.550Z",
    "1.3.2": "2017-07-15T19:59:41.994Z",
    "1.3.3": "2017-07-26T09:50:10.323Z",
    "1.3.4": "2017-08-10T11:17:25.712Z",
    "1.3.5-alpha": "2017-09-11T12:12:56.625Z",
    "1.3.5": "2017-09-11T12:25:19.447Z",
    "1.3.6": "2017-09-11T12:35:11.781Z",
    "1.4.0": "2017-10-04T16:37:36.969Z",
    "1.4.1": "2017-12-27T09:31:42.303Z",
    "1.5.0": "2018-02-23T14:50:19.701Z",
    "1.5.1": "2018-03-01T11:50:52.601Z",
    "1.5.2": "2018-04-27T08:21:53.056Z",
    "1.6.0": "2018-05-04T18:17:19.979Z",
    "1.7.0": "2018-07-24T14:37:17.785Z",
    "1.8.0": "2018-08-01T08:20:34.913Z",
    "1.8.1": "2018-08-07T11:35:43.766Z",
    "1.8.2": "2018-08-10T07:31:41.553Z",
    "2.0.0": "2020-05-28T03:17:47.275Z",
    "2.1.0-next.1": "2020-05-29T13:00:47.984Z",
    "2.1.0-next.2": "2020-08-03T12:44:48.965Z",
    "2.1.0-next.3": "2020-08-03T12:47:33.512Z",
    "0.0.0-pr.183.1.70c5790": "2020-08-03T14:29:20.489Z",
    "3.0.0-next.4": "2020-08-03T15:02:17.695Z",
    "3.0.0": "2020-08-05T13:59:51.533Z",
    "3.0.1-next.1": "2020-08-19T11:25:33.255Z",
    "3.0.1-next.2": "2020-08-28T00:58:57.485Z",
    "3.0.1-next.3": "2020-08-28T01:02:30.989Z",
    "3.1.0-next.4": "2020-08-28T17:21:53.700Z",
    "3.1.0": "2020-09-04T22:42:17.770Z",
    "3.2.0-next.1": "2020-10-13T16:06:47.353Z",
    "3.2.0-next.2": "2020-10-15T02:58:27.951Z",
    "3.2.0-next.3": "2020-10-15T03:01:05.957Z",
    "3.2.0": "2020-10-15T03:01:59.715Z",
    "3.3.0": "2020-10-27T13:11:00.710Z",
    "3.4.0-next.1": "2020-11-16T13:21:12.215Z",
    "3.4.0": "2020-12-17T03:35:24.236Z",
    "3.5.0": "2021-07-27T18:37:58.778Z",
    "3.6.0": "2021-10-13T15:17:29.391Z",
    "3.6.1": "2021-10-18T12:21:03.100Z",
    "3.7.0": "2021-12-03T15:49:02.269Z",
    "4.0.0-next.1": "2022-01-10T14:09:09.798Z",
    "4.0.0": "2022-01-28T18:13:18.087Z",
    "4.0.0-next.2": "2022-03-10T16:47:00.870Z",
    "4.1.0-next.3": "2022-03-10T16:49:47.731Z",
    "4.1.0": "2022-03-10T16:57:30.951Z",
    "4.2.0-next.1": "2022-03-17T12:21:06.652Z",
    "4.2.0-next.2": "2022-03-23T00:46:20.920Z",
    "4.2.0": "2022-03-23T12:37:44.998Z",
    "4.3.0-next.1": "2022-04-25T17:32:22.814Z",
    "4.3.0-next.2": "2022-05-26T00:26:02.534Z",
    "4.3.0": "2022-05-30T17:54:02.301Z",
    "4.4.0-next.1": "2022-06-24T15:32:42.749Z",
    "4.4.0-next.2": "2022-07-05T14:44:54.657Z",
    "4.4.0-next.3": "2022-08-02T15:44:41.808Z",
    "4.4.0-next.4": "2022-08-02T19:18:56.926Z",
    "5.0.0-next.5": "2022-08-09T08:34:30.576Z",
    "5.0.0-next.6": "2022-08-27T13:30:09.937Z",
    "5.0.0": "2022-08-27T13:33:46.413Z",
    "5.0.1-next.1": "2022-09-22T14:33:44.384Z",
    "5.0.1-next.2": "2022-10-08T12:23:05.096Z",
    "5.1.0-next.3": "2022-10-13T02:20:21.874Z",
    "5.1.0-next.4": "2022-11-17T17:50:40.435Z",
    "5.1.0-next.5": "2022-11-18T16:19:43.544Z",
    "5.1.0-next.6": "2022-11-18T17:15:41.365Z",
    "5.1.0": "2022-12-16T18:18:38.478Z",
    "5.1.1-next.1": "2023-01-10T18:44:22.055Z",
    "5.1.1-next.2": "2023-02-18T00:20:01.055Z",
    "5.2.0-next.3": "2023-02-18T03:29:10.436Z",
    "5.2.0-next.4": "2023-02-18T16:42:24.405Z",
    "5.2.0-next.5": "2023-02-25T12:25:43.261Z",
    "5.2.0": "2023-03-01T16:18:33.643Z",
    "5.2.1-next.1": "2023-03-11T13:57:39.904Z",
    "6.0.0-next.2": "2023-04-04T23:09:38.871Z",
    "6.0.0-next.3": "2023-04-05T02:46:58.117Z",
    "6.0.0-next.4": "2023-04-05T03:20:20.559Z",
    "6.0.0-next.5": "2023-04-05T03:22:29.318Z",
    "6.0.0-next.6": "2023-04-05T11:46:41.412Z",
    "6.0.0-next.7": "2023-04-05T12:20:27.506Z",
    "6.0.0": "2023-04-13T03:54:19.579Z",
    "6.1.0-next.1": "2023-04-16T04:17:00.548Z",
    "6.1.0-next.2": "2023-04-18T00:11:23.395Z",
    "6.1.0-next.3": "2023-04-18T00:20:18.314Z",
    "6.1.0-next.4": "2023-05-18T02:48:14.940Z",
    "6.1.0": "2023-05-23T16:56:02.613Z",
    "6.1.1-next.1": "2023-05-29T12:12:01.083Z",
    "6.1.1-next.2": "2023-06-15T16:08:31.191Z",
    "6.2.0-next.3": "2023-09-16T16:41:00.339Z",
    "6.2.0-next.4": "2023-09-27T14:21:18.347Z",
    "7.0.0-next.5": "2023-10-27T14:42:55.308Z",
    "7.0.0-next.6": "2023-10-29T15:41:51.030Z",
    "7.0.0-next.7": "2023-10-30T12:53:57.302Z",
    "7.0.0-next.8": "2023-10-30T14:56:48.434Z",
    "7.0.0-next.9": "2023-11-02T18:57:19.731Z",
    "7.0.0-next.10": "2023-11-05T14:32:40.023Z",
    "7.0.0-next.11": "2023-11-07T03:59:31.488Z",
    "7.0.0-next.12": "2023-12-18T12:32:03.579Z",
    "7.0.0-next.13": "2024-01-25T04:09:27.466Z",
    "7.0.0-next.14": "2024-02-01T14:25:14.278Z",
    "7.0.0-next.15": "2024-02-03T17:57:39.906Z",
    "7.0.0-next.16": "2024-02-03T18:51:02.724Z",
    "7.0.0-next.17": "2024-02-12T23:43:58.803Z",
    "7.0.0-next.18": "2024-02-15T03:55:02.172Z",
    "7.0.0-next.19": "2024-02-17T22:17:43.612Z",
    "7.0.0-next.20": "2024-02-17T22:23:43.682Z",
    "7.0.0-next.21": "2024-02-17T23:24:00.584Z",
    "7.0.0-next.22": "2024-02-18T02:47:13.669Z"
  },
  "license": "MIT",
  "readmeFilename": "",
  "homepage": "https://github.com/jasonkuhrt/graphql-request",
  "keywords": [
    "graphql",
    "request",
    "fetch",
    "graphql-client"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jasonkuhrt/graphql-request.git"
  },
  "author": {
    "name": "Jason Kuhrt",
    "email": "jasonkuhrt@me.com",
    "url": "https://kuhrt.me"
  },
  "bugs": {
    "url": "https://github.com/jasonkuhrt/graphql-request/issues"
  },
  "users": {
    "serge-nikitin": true,
    "fmakareev": true,
    "seangenabe": true,
    "touskar": true,
    "mjurincic": true,
    "parkerproject": true,
    "johniexu": true,
    "juanf03": true,
    "knksmith57": true
  }
}