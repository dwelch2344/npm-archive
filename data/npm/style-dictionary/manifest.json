{
  "_id": "style-dictionary",
  "_rev": "71-5fe0b943f479b0161ae880df7472fdce",
  "name": "style-dictionary",
  "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
  "dist-tags": {
    "latest": "3.9.2",
    "next": "3.0.0-rc.10",
    "unstable": "3.7.3-rc.1",
    "prerelease": "4.0.0-prerelease.15"
  },
  "versions": {
    "2.0.0-beta": {
      "name": "style-dictionary",
      "version": "2.0.0-beta",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=4.2.4"
      },
      "files": [
        "bin",
        "lib",
        "example",
        "index.js",
        "LICENSE",
        "NOTICE"
      ],
      "scripts": {
        "lint": "eslint index.js lib/**/*.js test/**/*.js",
        "test": "npm run lint && mocha --recursive -c",
        "install-cli": "npm install -g $(npm pack)"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amznlabs/style-dictionary.git"
      },
      "author": {
        "name": "Amazon Labs"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amznlabs/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amznlabs/style-dictionary",
      "dependencies": {
        "color": "^0.11.3",
        "commander": "^2.9.0",
        "fs-extra": "^0.30.0",
        "glob": "^7.1.1",
        "lodash": "^4.16.4"
      },
      "devDependencies": {
        "chai": "^3.5.0",
        "eslint": "^3.11.1",
        "mocha": "^3.1.2"
      },
      "gitHead": "c2c31cb381be05d8324838361188879cd8685f3c",
      "_id": "style-dictionary@2.0.0-beta",
      "_shasum": "1a64566fe2147e7daf29186fba1603c165b036be",
      "_from": ".",
      "_npmVersion": "4.0.2",
      "_nodeVersion": "7.1.0",
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "dist": {
        "shasum": "1a64566fe2147e7daf29186fba1603c165b036be",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.0.0-beta.tgz",
        "integrity": "sha512-JCNyKHf/v3uO6YqKUaD6DQNMWUoB9KvrtBu9PUwBw/2XitjDhALBDnOiwjXV/sFfyuz7EmRdG32EUYAGHpMc0Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIBgKqPyXi0zM9wU8q7hRzhiszrX1u6ycKcR+CJYsj/RmAiB9Css31PzrrM7X5CauERYSQKPo166Ozo0VaDTGysUhbg=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/style-dictionary-2.0.0-beta.tgz_1488913388361_0.960670497501269"
      },
      "directories": {}
    },
    "2.0.0": {
      "name": "style-dictionary",
      "version": "2.0.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=4.2.4"
      },
      "files": [
        "bin",
        "lib",
        "example",
        "index.js",
        "LICENSE",
        "NOTICE"
      ],
      "scripts": {
        "lint": "eslint index.js lib/**/*.js test/*.js test/**/*.js",
        "test": "npm run lint && mocha --recursive -c",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "preversion": "npm test",
        "version": "node ./scripts/version.js && npm run generate-docs",
        "generate-docs": "node ./scripts/generateDocs.js",
        "install-cli": "npm install -g $(npm pack)"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "commander": "^2.9.0",
        "fs-extra": "^0.30.0",
        "glob": "^7.1.1",
        "lodash": "^4.16.4",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "chai": "^3.5.0",
        "eslint": "^3.11.1",
        "istanbul": "^0.4.5",
        "mocha": "^3.1.2"
      },
      "gitHead": "58d23e80a47284285451ada3b4f3901ce9beff04",
      "_id": "style-dictionary@2.0.0",
      "_shasum": "568985a35a91c4de0812dc026500ec334eb93b22",
      "_from": ".",
      "_npmVersion": "4.0.2",
      "_nodeVersion": "7.1.0",
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "dist": {
        "shasum": "568985a35a91c4de0812dc026500ec334eb93b22",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.0.0.tgz",
        "integrity": "sha512-5t3qM90uuwmHwHiVHzM/dHYx1k8orf+SXyPwzM8ffIbHa2kSdw7ZCTYj9tqfNCQJTIylKfyOUAao8WeNEe3mwg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDOfaAHicV3tV19lpzEfLT3i0kvN9hNXMAc+2rFjqB6BgIhAIFu6QtyPgSH+OHIqUdtv4BP5rXNEM8hALJJOsst9Y7z"
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary-2.0.0.tgz_1498091573417_0.04421296436339617"
      },
      "directories": {}
    },
    "2.1.0": {
      "name": "style-dictionary",
      "version": "2.1.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=4.2.4"
      },
      "files": [
        "bin",
        "lib",
        "example",
        "index.js",
        "LICENSE",
        "NOTICE"
      ],
      "scripts": {
        "lint": "eslint index.js lib/**/*.js test/*.js test/**/*.js",
        "test": "npm run lint && mocha --recursive -c",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "preversion": "npm test",
        "version": "node ./scripts/version.js && npm run generate-docs",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "commander": "^2.9.0",
        "fs-extra": "^0.30.0",
        "glob": "^7.1.1",
        "lodash": "^4.16.4",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "chai": "^3.5.0",
        "docsify": "^4.5.7",
        "docsify-cli": "^4.2.0",
        "eslint": "^3.11.1",
        "istanbul": "^0.4.5",
        "jsdoc-to-markdown": "^3.0.3",
        "mocha": "^3.1.2"
      },
      "gitHead": "426496eb765bae5d76f2801893a399859efc873e",
      "_id": "style-dictionary@2.1.0",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "9.6.0",
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "dist": {
        "integrity": "sha512-89SdiAQCMUbh6Erh2IoaSqTWp5BxeAUsgguNvUNw+KkVnyqp7qiY5WbJOxr6ObfdfCHo/wuHhaJmX/WzRaEeKw==",
        "shasum": "02626d07f49c195934f76e1e5ccd56b34801cfd3",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.1.0.tgz",
        "fileCount": 345,
        "unpackedSize": 2852043,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGNK4Pb0BxSJne28Yuctl58vp+nbKaCzPrwnBrFlp2piAiEA7jZGK7+zlRkI5U/KRB0xj1DHrj+fyy0ZunJ5NxygrFE="
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.1.0_1519850331704_0.3870036317281673"
      },
      "_hasShrinkwrap": false
    },
    "2.2.0": {
      "name": "style-dictionary",
      "version": "2.2.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=6.0.0"
      },
      "files": [
        "bin",
        "lib",
        "example",
        "index.js",
        "LICENSE",
        "NOTICE"
      ],
      "scripts": {
        "lint": "eslint index.js lib/**/*.js test/*.js test/**/*.js",
        "test": "npm run lint && mocha --recursive -c",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "preversion": "npm test",
        "version": "node ./scripts/version.js && npm run generate-docs",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)"
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test"
        }
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "commander": "^2.9.0",
        "fs-extra": "^6.0.1",
        "glob": "^7.1.1",
        "lodash": "^4.16.4",
        "resolve-cwd": "^2.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "chai": "^4.1.2",
        "docsify": "^4.6.10",
        "docsify-cli": "^4.2.1",
        "eslint": "^4.19.1",
        "husky": "^1.0.0-rc.8",
        "istanbul": "^0.4.5",
        "jsdoc-to-markdown": "^4.0.1",
        "less": "^3.0.1",
        "mocha": "^5.2.0",
        "node-sass": "^4.8.3"
      },
      "gitHead": "f6cfa273c844899118dfea709babd3bb0a431e2a",
      "_id": "style-dictionary@2.2.0",
      "_npmVersion": "5.8.0",
      "_nodeVersion": "9.6.0",
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "dist": {
        "integrity": "sha512-GFWpihy8JOHRSWAe60rYl+h6vwrraT7o1NThvQHrYoF1kbBFfdBghoJrpS/4mUpa7EATTaHVH7eKCQV5RtOLWw==",
        "shasum": "f90c9a8f547a04b1849a81bf24b7f9e65a690c72",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.2.0.tgz",
        "fileCount": 1948,
        "unpackedSize": 8970364,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbGr0nCRA9TVsSAnZWagAAPFQP/j1bblc1y4qh2fWzRAoS\n+5szL24JsXMpCsM07GmmafX1/QIuByQp6pcMUsakMSLm0Ysr0dcvbpexoMsl\n5MCGLqvP+MU626SmVKj5NynB6kD+SDwGqF4vpYjhnew50xZd/3n8i6JCf9/U\nFqaPjO2GvSIIeuY0gTd/g4blilbdByiCG3WVY7OmGdUlKChUJOtOiKXpLxhQ\nVVRk/59yUxD7e2qX0MuYBzBlm0RCSAzDRx98kIzMnWJEMnWQ2YEGEgoncVOB\nv++yJWdhRaSwlPX8I3MXnZ/kWfdKQOwriGyMQGy+GwGiJi0o5Vki65XUIITP\n+DbHTGqtyj9PtpmbCJCreU/ckgvVyxRYX4adkFd9lX/Q+fH/MFLvNXTivgDa\n1CmFFbGw7q6RRSjSOKOC8JeRT/6WDtBjboUxh2e50rBPPVuR/U2Xm2vR1rfp\nOwhd8VUdyLT+3bNZxZoupsdQTHqjMUDSltpngOqO9LOcOl9flSsPn4VGc1Da\nfuzpq8pj1g0y4+l3O6U1F/0SvS6/DEDj5A/uuf3+/+Pp6a40SLqHsFKhNgf5\nOHWIVEN7jQpajTwHRftcI+gc2Q7vci/8X7VxU6S0gf5G+OyjiGnGHA1VTDRz\nUEcZSR6zowEsCAIZR4NnRPWk3XJBfqSn3AYj+e9sl3lgu1Gw6ja0XMY4EJHN\nAuk4\r\n=yV/C\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDb3NiQSjs+SzbEIT3NTwXCVMzwBQzWwiFNHXII2WJ5IgIhAPaHucDtcTyssBy2sZdOWCbemeF+p5xxqnmw7rxKA7fd"
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.2.0_1528479013747_0.09186596985952344"
      },
      "_hasShrinkwrap": false
    },
    "2.2.1": {
      "name": "style-dictionary",
      "version": "2.2.1",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=6.0.0"
      },
      "files": [
        "bin",
        "lib",
        "example",
        "index.js",
        "LICENSE",
        "NOTICE"
      ],
      "scripts": {
        "lint": "eslint index.js lib/**/*.js test/*.js test/**/*.js",
        "test": "npm run lint && mocha --recursive -c",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "preversion": "npm test",
        "version": "node ./scripts/version.js && npm run generate-docs",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)"
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test"
        }
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "commander": "^2.9.0",
        "fs-extra": "^6.0.1",
        "glob": "^7.1.1",
        "lodash": "^4.16.4",
        "resolve-cwd": "^2.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "chai": "^4.1.2",
        "docsify": "^4.6.10",
        "docsify-cli": "^4.2.1",
        "eslint": "^4.19.1",
        "husky": "^1.0.0-rc.8",
        "istanbul": "^0.4.5",
        "jsdoc-to-markdown": "^4.0.1",
        "less": "^3.0.1",
        "mocha": "^5.2.0",
        "node-sass": "^4.8.3"
      },
      "gitHead": "4ec3459412931005d55066eb984a881adbdde36d",
      "_id": "style-dictionary@2.2.1",
      "_npmVersion": "5.8.0",
      "_nodeVersion": "9.6.0",
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "dist": {
        "integrity": "sha512-GxvU92ks1TwancCyoXdcVM7bLAmdWorzqgRMWnP/rHy0TQrEHfaEg2bgh/8GtFY1iN6dHRcHkxkBhJJlYTFmKQ==",
        "shasum": "1aa31ab63aa3917bc3a669bd5a6525b0a1b7e7bb",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.2.1.tgz",
        "fileCount": 345,
        "unpackedSize": 2854874,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbPQcRCRA9TVsSAnZWagAAtb4P/1bnYzvhwXYzTCGgaEib\ngVpYwE+3t2JVxd3XK6rSYheOsZU401DUIv/gulLqtEpyzisQX7mtBespiolo\nE26CtOyHbR6QG1UHhRiLRDLHFDRLAwLscXhRM4oNHhJtKt/C5iZtoawqDUjj\nUS7vt8xfSuIx0wJ+QXIMEmIs79os31NUqgI3eYhd+yzcWnrctBXKuLF62Ctr\nnZBVF4/GBgagYrJ7exU21DyLhFjKm6xJv94AllLe+Jjc8DlI/iXr44FbpMKo\n/1xINXivDhQygyYJKJe5t7MSk51/O/yrgPSF3CTgPoxvH5JHqFIf75niFYhc\nP6vUe+fYb8AJriNH/ieYZT/B4LGGE6x4Fpcb6YTMfUnVwvLVEZlOl/ViNVCL\nYTKiIbBdLpY9pMViNbfiRJXW/v/6dQQ29P5dnV7Keb9/VbPkJSRq/rP4tQLt\nAUMVmSluNDTusjKQMaouS6O1ThMXhHBXT2FBwM7LK1p+Yw1dw2OXRsC3lp9K\nsDEQ5saEnTKG0bZg+O485AcVvScmKsq3h26ssGQG3t4yoGQ8XnEjZMvqChSc\nfCTyXYLju4rWSzmsN2LQ1dq8jlP5oajNGWXMOMACCjYxDhpTl9skNACX4CrZ\nsFzJfhD8to0S8rqoyh5SJUE85HCCtpFu+qplalDIHZ4Y08kmGNW6+Q0+Jr0i\n82wA\r\n=sSou\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCcHR12JuU0zWMMWfCkqAE1I5jiEdBzaqQ9s5dr8LVBfgIgESnUrx4VGKJfFJuM97TsJERLSGTsSv0zMx6/ruLBZUY="
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.2.1_1530726160572_0.6346669477399807"
      },
      "_hasShrinkwrap": false
    },
    "2.3.0": {
      "name": "style-dictionary",
      "version": "2.3.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=6.0.0"
      },
      "files": [
        "bin",
        "lib",
        "example",
        "index.js",
        "LICENSE",
        "NOTICE"
      ],
      "scripts": {
        "lint": "eslint index.js lib/**/*.js test/*.js test/**/*.js",
        "test": "npm run lint && mocha --recursive -c",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "preversion": "npm test",
        "version": "node ./scripts/version.js && npm run generate-docs",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)"
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test"
        }
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "commander": "^2.9.0",
        "fs-extra": "^6.0.1",
        "glob": "^7.1.1",
        "lodash": "^4.16.4",
        "resolve-cwd": "^2.0.0",
        "tinycolor2": "^1.4.1",
        "chalk": "^2.4.1"
      },
      "devDependencies": {
        "chai": "^4.1.2",
        "docsify": "^4.6.10",
        "docsify-cli": "^4.2.1",
        "eslint": "^4.19.1",
        "husky": "^1.0.0-rc.8",
        "istanbul": "^0.4.5",
        "jsdoc-to-markdown": "^4.0.1",
        "less": "^3.0.1",
        "mocha": "^5.2.0",
        "node-sass": "^4.8.3"
      },
      "gitHead": "3ae1ea04c5af5d4cd7ac36a86ed3399dfb34238b",
      "_id": "style-dictionary@2.3.0",
      "_npmVersion": "6.2.0",
      "_nodeVersion": "9.6.0",
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "dist": {
        "integrity": "sha512-dhpe5xp+g3k7lzZnCY1P3Fh7Po+uyxqFajndsvmAVoxOAUeIdx6UhFz6eeFanvhfv8j5ZJQOwuQJQlGeyoMuPA==",
        "shasum": "fe351c6f7a15449b53fcb291690e16d1d4d8cb48",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.3.0.tgz",
        "fileCount": 346,
        "unpackedSize": 2860032,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbaHHzCRA9TVsSAnZWagAAlr0P/Ao/2QxGaE9JA7WDHSff\ncm5VtH4/N9c/i6Dki9FhTXqpyY3AZw6BLXxID2SESSGxivkyBEU4olvy/3p7\nokMvfdbSDqrTMKShIJWEjdvOeVctYyNsu8gN7jM+mYr6UJtH3tiNQMEXtY2J\nQCASgGuUw6H9ztGVtpoxKshZ2ZT3N0znPdDv8dWdDDH2IPRjzU4ShJpzSe4y\nDSEH22UpYoC9x/8ffijBaONXOsJbchkDRXXJ7gnr+yjOrDLfcJZUq2gmEgOA\nftYHE2eaTpOnCsRizkMl1OUrO2d+RTmlJrvpKxuo6/Q30qcTd0ooHA5jYpSz\nUgC+OWKp3gOah0Rv7ufYAXWUamUIRw6gO7+i69Hf/gYLNlFgck4/gBbPSa6k\nklnkPWR8s4W0JIhp27DF240FpP/RWvADWV7F4Dlbi4uQEVa5317YDANE8gSZ\nfrMxiJm880bHYHa/i8gQO0o5wddUONl0gKpKip5xPGGR5bFf+plDw3hB4un/\ntyRHSpGY2GjJ4bof29Xy+rlvr96e1VU9CsJKW/Dj5P4Bo8+KLpcqfEz103Z3\nB9BoSb5rFsuDhJtBmMsvbD74rKdkgsKVnw0uzqnX/RwE6K/sYlR4dLaBgZSP\no9iW9pavkOW21Jzj0xXURqkX1mTH/YNZsPRQRdqSP8+dHoGPJYbjH9A1TWbi\nMeeq\r\n=S37D\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCMdGjEnEjHnbP+GnVYA6U9A4fFZOR6t09ujfWyVPzTWAIhALhq77gF3QcU31ZMvFIeQcVOeNuKbfIOcO9ruvKTza1u"
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.3.0_1533571568598_0.011046201297271407"
      },
      "_hasShrinkwrap": false
    },
    "2.4.0": {
      "name": "style-dictionary",
      "version": "2.4.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=6.0.0"
      },
      "scripts": {
        "lint": "eslint index.js lib/**/*.js test/*.js test/**/*.js",
        "test": "npm run lint && mocha --recursive -c",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "preversion": "npm test",
        "version": "node ./scripts/version.js && npm run generate-docs",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)"
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test"
        }
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "commander": "^2.9.0",
        "fs-extra": "^6.0.1",
        "glob": "^7.1.1",
        "lodash": "^4.16.4",
        "resolve-cwd": "^2.0.0",
        "tinycolor2": "^1.4.1",
        "chalk": "^2.4.1"
      },
      "devDependencies": {
        "chai": "^4.1.2",
        "docsify": "^4.6.10",
        "docsify-cli": "^4.2.1",
        "eslint": "^4.19.1",
        "husky": "^1.0.0-rc.8",
        "istanbul": "^0.4.5",
        "jsdoc-to-markdown": "^4.0.1",
        "less": "^3.0.1",
        "mocha": "^5.2.0",
        "node-sass": "^4.8.3"
      },
      "gitHead": "0183782ca27481fed1141beb1c6317b9d615e081",
      "_id": "style-dictionary@2.4.0",
      "_npmVersion": "6.2.0",
      "_nodeVersion": "9.6.0",
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "dist": {
        "integrity": "sha512-DDKRVSSSyodT+8L+mgRvNwwOl4PK1aSVMISAfpendKhMa0suxQTrZVbWX41NDu1zzvO3ciXITu8ao4CEwQ/BAg==",
        "shasum": "fae92adeeca1839940b61f6cf3e458afecdbb79d",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.4.0.tgz",
        "fileCount": 346,
        "unpackedSize": 2861579,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbkq5KCRA9TVsSAnZWagAAijIP/j+zy8HBfkUCcHDkraVD\nGV0PwS+aBF01c76jy2tTqLEGMHmx+6tXTKDg6dbeBsiNvloJcpKu6YegGYL2\n9dVl2Gh/36sXnwxLhoyIodVBrchViXPhI3EWbYwbGze4sf4Hqa81Rizz67iG\n5l3RXnIyrwu2/9XCS8J+M4cKfBigVp92dMg1hb/A3QcW92n+81/lANBLBD2M\n10ADCFsaJD8BlAkHzJBgrs6fjVXXkKsMBJzDor9Ci17tHf9hdHZAH3FbDNfc\ng78pkpmtItIvL7PIkAsnAA5QI/LQIqiPBmKj6ohfLYKKFyxqLJdpoLa2Lz5w\nWvtjwfJTpdaGnUn72scPyQ6DtkSo0DJJCpeRQhWj+Y3NVGFz22uWXqQUFr7m\n9XDqHUP086qr9CDA4UhLWyuGPNjRo5p5RNWNuW2q36q7B7ceoZyuU7IQNl0z\nQ9x/AzfxqAoa38CDZn/sN18UFnYlUWgFvacRHquyMOroJMhuWbC86MR8g3eP\n68JVCCbcaP+ZdIW41+/vHUuiMQQVN+FmZUvLbzmRYWAa5h3csn+UJ8MAIy6S\nO9+KwWYpQINjxglwb7OlZ343dqppHLiSx+GeGYbNEDEsg8ZRdeLnb4ze5BZa\n5e3CYwbxNH+DhhMPbJNH1m8wuDqiIXr96ZqN5G68QiXPSTe64vDsoX0hP35m\nV/Qs\r\n=PlFH\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDjK9D5EayX2aZ0LJYs3ul2gqNTzr7JXS/8pIrAdJe4DAIhAMB4EC5E/xsaa25rscYYahVq0mnm1QaFQuJVXQhA1LAx"
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.4.0_1536339530252_0.4875957548359602"
      },
      "_hasShrinkwrap": false
    },
    "2.5.0": {
      "name": "style-dictionary",
      "version": "2.5.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=6.0.0"
      },
      "scripts": {
        "lint": "eslint index.js lib/**/*.js test/*.js test/**/*.js",
        "test": "npm run lint && jest --runInBand",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "preversion": "npm test",
        "version": "node ./scripts/version.js && npm run generate-docs",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)"
      },
      "jest": {
        "verbose": false,
        "roots": [
          "__tests__"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/"
        ],
        "transform": {
          "^.+\\.json5?$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test"
        }
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^2.4.1",
        "commander": "^2.9.0",
        "fs-extra": "^6.0.1",
        "glob": "^7.1.1",
        "json5": "^2.1.0",
        "lodash": "^4.16.4",
        "resolve-cwd": "^2.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "babel-jest": "^23.6.0",
        "babel-preset-env": "^1.7.0",
        "chai": "^4.1.2",
        "docsify": "^4.8.0",
        "docsify-cli": "^4.3.0",
        "eslint": "^4.19.1",
        "husky": "^1.0.0-rc.8",
        "istanbul": "^0.4.5",
        "jest": "^23.6.0",
        "jsdoc-to-markdown": "^4.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.0.1",
        "mocha": "^5.2.0",
        "node-sass": "^4.9.4"
      },
      "gitHead": "eba4970065941aab4403b4f544a805ae3846fcd9",
      "_id": "style-dictionary@2.5.0",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "10.10.0",
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "dist": {
        "integrity": "sha512-8bgXctoAdQB938K+vO+kBzfWEfNsdI2cjGwCFUEFcNH8Y0bGWmCOVU/BDKjeSJrMkiATx4m7IqP2QzlyEmyWzQ==",
        "shasum": "1e596469a025b8a08c2d8bfc5e552a3119f3a619",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.5.0.tgz",
        "fileCount": 341,
        "unpackedSize": 2852486,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb4If5CRA9TVsSAnZWagAAZwgP/0qYFLbD20X5aBAR0NeO\n+FtfoW/z6x6ugCIuTVpJyxqFK/xf+OP+DW/po5v9Hc3lk1dzcCH2mvG8Q2HF\nw3fMf2q4H/0mt9YwZGnRPkvTaudQBJTWKQC/bt0YXpn6/BSPXbYh2vc1yEWg\nu5q1zU6YTOOhhCrieXeWK7MoV+vsrrAmOEc946fpZB/gVh7jJErnrXe+5RCD\ns6Q8uENQd3BF3MwOGjD20OTWha0OE3zTHqvX0QLOGU16HzWczgPvaQfUVbvH\nczXLEyWRwxVWR5UpAYd0v4zAan+4ReaiQ879+PB5cy6QdA9Pf4OOLjEusa2P\ni4KjeezVgR0Y4HZh9fhgCtGju6QhtsRf3O7JazeGhd9WXcO959Ctj75bu+P2\nGXHFo8z3TfUChNcgxfiIjLTarYw6DI2fugUpkd2e4/zkdxWNpFw3cL9u7Elg\nmZeW7Amzay+PPZzvSF9GlTMsfufNNyfwyOiHq4Ogz3dv7w0pWZJZkXScI8RA\n5ZHwhIRfAHYdKoK1iekN6XDPmmLcQc/Vc/c07zMXj7VtgOJubopYIt6BGT0M\nTYY2/rRa2gJnisISwFRygYXutqTuX1Q50XWZqqmUiX7pcPi96nB5VQAvFI/N\nJ9BHpO1OeawFfI8rri5C6d5yJTCP0XStWygQb0q9zdtw3j3GaWu0g92u6NCw\nKpJA\r\n=/dUs\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQD7MoH75e4f+vQYnXU7mA8kfsBL/yXznv2JSyWMVxby/AIgCWyVhGU5LF6utfmr1Wum9kM1Ot4QTyqMDKWch21b1Pg="
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.5.0_1541441528646_0.20563118738325437"
      },
      "_hasShrinkwrap": false
    },
    "2.6.0": {
      "name": "style-dictionary",
      "version": "2.6.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=6.0.0"
      },
      "scripts": {
        "lint": "eslint index.js lib/**/*.js test/*.js test/**/*.js",
        "test": "npm run lint && jest --runInBand",
        "test-watch": "npm run lint && jest --runInBand --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "preversion": "npm test",
        "version": "node ./scripts/version.js && npm run generate-docs",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)"
      },
      "jest": {
        "verbose": false,
        "roots": [
          "__tests__"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/"
        ],
        "transform": {
          "^.+\\.json5?$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test"
        }
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^2.4.1",
        "commander": "^2.9.0",
        "fs-extra": "^6.0.1",
        "glob": "^7.1.1",
        "json5": "^2.1.0",
        "lodash": "^4.16.4",
        "resolve-cwd": "^2.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "babel-jest": "^23.6.0",
        "babel-preset-env": "^1.7.0",
        "chai": "^4.1.2",
        "docsify": "^4.8.0",
        "docsify-cli": "^4.3.0",
        "eslint": "^4.19.1",
        "husky": "^1.0.0-rc.8",
        "istanbul": "^0.4.5",
        "jest": "^23.6.0",
        "jsdoc-to-markdown": "^4.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.0.1",
        "mocha": "^5.2.0",
        "node-sass": "^4.9.4"
      },
      "gitHead": "3a17ac1ff40411be327c2e68f2b3ecf218572e5a",
      "_id": "style-dictionary@2.6.0",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "10.10.0",
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "dist": {
        "integrity": "sha512-BLi4AHoEjQGyzWTh8rAY5QKE6o+QaywrFKU5cJh7YqytLF785opOHsk5c7YKSOxOomtACJKu4DpyA0Otao5dlA==",
        "shasum": "18069254a9621ea64704e0d630124b2411c39656",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.6.0.tgz",
        "fileCount": 60,
        "unpackedSize": 167254,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcAdWkCRA9TVsSAnZWagAACw4QAIBYdmIGu9d2rqYoDqHd\nzDXWBmsB84lVk5gHbBtaSttifNMhzEFHna8o5akpzSwJUriBPO7QGZfpjTgV\nkPgW5Ayo/lnTflfr6YwKrh4LN8PdDoz2FjOdTdR+ZMWZCdoDtfmCdyXbAIyy\naOmG9Q1w7MB3Dj21QUzS/yHJI20A6oP3qzuR+wS9EXBV8OGqmF3ujdrqn9/+\nmzAMVxT2/sP+unCmjvTavD7ms30FzLNjbY/Z+TI9Q9ZtwRt4vKbhW6A+D2A2\nBTc0FEtLfU+mRLvjigJsPWPGLE0Hp21JEtMfBcxXgdR0WxRShq59wgiaIMOz\ncTL/CIgaCu6hTdXAGkbNWFoilovGNIJndjY2OZk8AAc2aIRkSlozFws7m1hl\n2X1LIMH7e5OXxrnXTvOYi29oAaMI5CLbRLIE/qHkAgOOZ+p2aOD44ehWuC2H\nz2jtG8yiRnGxhR7sec7zGhVGUsAayFmOR7cWKwt5g10fEal6H623yZpWk5Di\nlc311veAUjpUzxaoEN1yF6TikMWqq1/eDfnEtukb7MOuLWgNSWZL5cTfx3lM\nGECgxoLM6P9I6jCvWS+gGMCXHbQNbXUbv0/+U59kJRRAIjvYUpgr9DmiqnCb\ntT/msLp+sPcAhkOrlP3InTz+pJDEwYyk05rvFZNR4EdxuGyepbcipp9GdiCr\nltWJ\r\n=hySA\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEPMYeSkdsmthF34yMycYwpciukO6M45EUnICShzKrISAiAF+i90G8KQNH3a2FN8gV90ctbDLJUWJ7I7QUTtOyC6tg=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.6.0_1543624100045_0.023948262840700396"
      },
      "_hasShrinkwrap": false
    },
    "2.6.1": {
      "name": "style-dictionary",
      "version": "2.6.1",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=6.0.0"
      },
      "scripts": {
        "lint": "eslint index.js lib/**/*.js test/*.js test/**/*.js",
        "test": "npm run lint && jest --runInBand",
        "test-watch": "npm run lint && jest --runInBand --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "preversion": "npm test",
        "version": "node ./scripts/version.js && npm run generate-docs",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)"
      },
      "jest": {
        "verbose": false,
        "roots": [
          "__tests__"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/"
        ],
        "transform": {
          "^.+\\.json5?$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test"
        }
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^2.4.1",
        "commander": "^2.9.0",
        "fs-extra": "^6.0.1",
        "glob": "^7.1.1",
        "json5": "^2.1.0",
        "lodash": "^4.16.4",
        "resolve-cwd": "^2.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "babel-jest": "^23.6.0",
        "babel-preset-env": "^1.7.0",
        "chai": "^4.1.2",
        "docsify": "^4.8.0",
        "docsify-cli": "^4.3.0",
        "eslint": "^4.19.1",
        "husky": "^1.0.0-rc.8",
        "istanbul": "^0.4.5",
        "jest": "^23.6.0",
        "jsdoc-to-markdown": "^4.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.0.1",
        "mocha": "^5.2.0",
        "node-sass": "^4.9.4"
      },
      "gitHead": "be5f4eaead19caf12869e398b435a0f401c62216",
      "_id": "style-dictionary@2.6.1",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "10.10.0",
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "dist": {
        "integrity": "sha512-jS9TuqIFRUCNA48mEhC9l4foJHrwUme2ZtPQ/X/5A+NPkRXCv2p9PSuTRCzbhJZl/6kTAGPoXIsCCoBh7W2W8g==",
        "shasum": "17156c8dd12728f4c17e6597ed26d3aa0084b40c",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.6.1.tgz",
        "fileCount": 60,
        "unpackedSize": 167255,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcEuHOCRA9TVsSAnZWagAAXKQP/0FYp7F2QRSBKXm4N2EQ\ngGV6Pd5aJHPl0u8UpJYgDA3OT0JOxIiHZFI/3Bbp+LGyAUJ93j09DRfpiJOz\n6q/q8Xc5EHvTZjJriqvA+Nv1gsbyPOwtAD+9f1V/aKouCfrhbzegXdpY8HW9\nfFLebUB7MS3qzbRaw6Ab2saMDhqGEsaTDqIswCHb26dDhhBafSpT5YstkVPM\nDgmUVB90f9AIvMuYe9MWKNaIN14VYfnb9vz9G4alL5hgocFuk9awivdwMhXI\nmr579aDfdKF69RGhE6uhqr7KQ+R/GxajOUk1eeZBb1Fi9wYS+m2R/umvG5Ss\njCpE5HB3ffQI7GS8j1FhX/CMkzepo3oyk90KanJhkqpmcAhQxh2ue9isQITj\n2Bp6EJeYjvnllx+NwILoh3H/+965JfWYQuWvz7tMQUHzEaEOJW35t6giHsf5\nrxifNkPkaAE4AcnAg99Zg30GMhd5sIPVWIxjS154bIIGtEFqKhoWTbP2SGuZ\n5+pYto7/iDPUoFQ0OK2lmEW4p4XDSwehkCICdOu4UaSvXQKOXUuEcXbWLDFn\nh4y//M/9JzzWJKyOwqH9MoFnelMbpWGG5Sqkv8UA3BVZudRh2/BN/RvO3NXU\nvZBefKSbMWI8oM8L4d/uy8VF2nAKp1mOIWVg5Lqz01dUFWBD8MKCr3KblYey\nVho1\r\n=J4Qu\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCeTU8BSQ+Awjw+n1Vaxl+bRwVNcCQNFLrXXAsvHpEzSgIhANLWwOJsZhLqf0Ot+LV1FP9Zj7OK5oqrXTtHJMGhn5UB"
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.6.1_1544741326033_0.7964259225260806"
      },
      "_hasShrinkwrap": false
    },
    "2.6.2": {
      "name": "style-dictionary",
      "version": "2.6.2",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=6.0.0"
      },
      "scripts": {
        "lint": "eslint index.js lib/**/*.js test/*.js test/**/*.js",
        "test": "npm run lint && jest --runInBand",
        "test-watch": "npm run lint && jest --runInBand --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "preversion": "npm test",
        "version": "node ./scripts/version.js && npm run generate-docs",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)"
      },
      "jest": {
        "verbose": false,
        "roots": [
          "__tests__"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/"
        ],
        "transform": {
          "^.+\\.json5?$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test"
        }
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^2.4.1",
        "commander": "^2.9.0",
        "fs-extra": "^6.0.1",
        "glob": "^7.1.1",
        "json5": "^2.1.0",
        "lodash": "^4.16.4",
        "resolve-cwd": "^2.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "babel-jest": "^23.6.0",
        "babel-preset-env": "^1.7.0",
        "chai": "^4.1.2",
        "docsify": "^4.8.0",
        "docsify-cli": "^4.3.0",
        "eslint": "^4.19.1",
        "husky": "^1.0.0-rc.8",
        "istanbul": "^0.4.5",
        "jest": "^23.6.0",
        "jsdoc-to-markdown": "^4.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.0.1",
        "mocha": "^5.2.0",
        "node-sass": "^4.9.4"
      },
      "gitHead": "123df3ed10d6e596fc35f856c246deb329a4f5be",
      "_id": "style-dictionary@2.6.2",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "10.10.0",
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "dist": {
        "integrity": "sha512-2uSd/8Y1fVduV1UkvkP8HwmyAV0I7lNN/gAWCd8y3xDlQFRtFgrNl2cWQkMNbS2UCbrymH0oVolQHkwDDj4fYg==",
        "shasum": "7a550869f8f0e59cb559bdaff87f63e7d80b4689",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.6.2.tgz",
        "fileCount": 369,
        "unpackedSize": 3024592,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcEuXJCRA9TVsSAnZWagAAin8P/2oUxw0VgmEnVyik/1SG\n1T/fqvWnc391wQT8baR4Ng+rWC7ZeM4Wg+ltkGyncpRnZDhuzi2bpwI+kpyt\nODDqWV6ysBa6OLUBR38NyiU6fNojWD6/HM8KwsBC/bHaj+iDIfYRGuDt9ZKo\nG7Du/9zEIV99uPZxaHynoIfrZ/0KfmOPf4GIR6U5TSLD9xko/pheJ/grktXo\nvTn+PtZNg86Lf2ND8AJWbuCxBDdcd71uaQjz9kKFW2Zu0G4jZ3t3ydtsnVsw\ntiQLKeCoDRP5rlJ0fWXvvpQrrcsPuSaZr72DimANxKkFWhJyyToReq4mY0G7\naLVtvGQYqKd0MyxXNPFE8Ob7nHr484rl5RPcS0bioqgfypLmYRnnnC45PYEv\nSziHIzUYGBqZp9LmQQTQ0YcGAArsjwtFRQE2L+ZWBj1nyW6KB7RhRrEd4qz+\ncmFayHs+x3yCdnfYOpFGwYowlWncyn0PZ/ktJOaRJmjaHOa9U1mhVzOwhB55\ngG2qEhaMWOPMIPYGJvJAcAJM6FYWqqfWjlnTfl3NlF+q6jQiOzuBpToCHDJN\narFRquLxn4fM2gpOVCAIGkqJi0ixDPRUvfgxwRhFYdJ/j9mKMRejqYBskD8w\nQbDwOXCj7A0Kjff3YNb6rt8v5W/0VeMG/rZJhRDuBPpdlZwuQveTjqcQgcZQ\nY5YW\r\n=T3M9\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFSGAERuQsej0lTT/P3/Bka2oc4t1X96QxffkazUMqQCAiEA0YzwM5ILcOQtVSodHrVOjZE5BL5LN62psZWPocvKfa0="
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.6.2_1544742345014_0.5219290750023351"
      },
      "_hasShrinkwrap": false
    },
    "2.7.0": {
      "name": "style-dictionary",
      "version": "2.7.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=6.0.0"
      },
      "scripts": {
        "lint": "eslint index.js lib/**/*.js test/*.js test/**/*.js",
        "test": "npm run lint && jest --runInBand",
        "test-watch": "npm run lint && jest --runInBand --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "preversion": "npm test",
        "version": "node ./scripts/version.js && npm run generate-docs",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)"
      },
      "jest": {
        "verbose": false,
        "roots": [
          "__tests__"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/"
        ],
        "transform": {
          "^.+\\.json5?$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test"
        }
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^2.4.1",
        "commander": "^2.9.0",
        "fs-extra": "^6.0.1",
        "glob": "^7.1.1",
        "json5": "^2.1.0",
        "lodash": "^4.16.4",
        "resolve-cwd": "^2.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "babel-jest": "^23.6.0",
        "babel-preset-env": "^1.7.0",
        "chai": "^4.1.2",
        "docsify": "^4.8.0",
        "docsify-cli": "^4.3.0",
        "eslint": "^4.19.1",
        "husky": "^1.0.0-rc.8",
        "istanbul": "^0.4.5",
        "jest": "^23.6.0",
        "jsdoc-to-markdown": "^4.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.0.1",
        "mocha": "^5.2.0",
        "node-sass": "^4.9.4"
      },
      "gitHead": "76539e76d65217925efa19cbfa665200c1c7a2bf",
      "_id": "style-dictionary@2.7.0",
      "_npmVersion": "6.5.0",
      "_nodeVersion": "10.10.0",
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "dist": {
        "integrity": "sha512-DRyiFQXy8Ue3EXpCdTBBb0MCoNtfaJWf+EWKq/H0ivhgA+v1MwQXER4GRkAorJapBbuqBe7yTpPRK5Ofn7vGAQ==",
        "shasum": "9576257a6829a8c7481a661a70bb8c81d2307599",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.7.0.tgz",
        "fileCount": 420,
        "unpackedSize": 4391163,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcWhSzCRA9TVsSAnZWagAAvEkP/1pR1cH5imNBt8W0zX0k\n4By+LyDH6ixnn+0y7oyfCaLvo81Dp1lFDjAdSKjBZGBOXS8mNxc5cLswZLUq\n1D5fO2eutFZ95JZsmyy1m6NZkH/LkRahD6/xA+1XzqkOf1c5raLeKtaRkMgw\nirmeQwZ6050TgS73IoRS4/W5GRYqBvF7dB+jq5JZWtlRjN1CK4F/C1Bz6Qjv\nUo82ksruV9iAOog4Qjpr+jc96NDj152xeOWuEz6BsPHD67HK6LdDpPUxD7uI\nueLhMgjscM6Esjfn5ETZs10nq2MShXaQ2IvEfPEY/Ldfi0mIBnh4GhHUtMaF\n6QXg8/YD+z0kRiIWqQt12KvKadNUUWk4CVWVof6oky0g+vqasEXVywU1y3rX\nukR8HmzhKBsu6P4e25vXeewvwsx88v4KMt9Dqtxrgbt3RjlNp1gIATTWI7b+\n54OEAsMEHH4mj1Tz/Srgn4YhPzIIv8KMFShCPwKIGZ0xvlz6UPwJvdyCqM6E\nviB0FBGJaoyqeWBVoqxCVDeVJtcdXHxrDUGz7vpwCEN7D+8I1OVOIbLokUpS\nCXZTIzx/gTPxHdVdBLXQFVubzAG4bl75AWbJC0DNtC9BvbK8Y6WWzb9g3duJ\nGOEHNglDED5+4I+eIucYI8EuoOUFO+bTv6YhG6trs0Kd6Q+dBXkxjVyqh3fT\nyvDQ\r\n=FqdC\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCEwn+FQ4G9C71y8aYWOrloyiuI/fQPfl4qIrctpi4W1gIhAN/PICizL0AMJcEzfRmiKSnuZ/sgr6bqff+d5OOHwlvB"
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.7.0_1549407410449_0.7953259450918861"
      },
      "_hasShrinkwrap": false
    },
    "2.8.0": {
      "name": "style-dictionary",
      "version": "2.8.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=6.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js lib/**/*.js test/*.js test/**/*.js",
        "test": "npm run lint && jest --runInBand",
        "test-watch": "npm run lint && jest --runInBand --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "roots": [
          "__tests__"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/"
        ],
        "transform": {
          "^.+\\.json5?$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^2.4.1",
        "commander": "^2.9.0",
        "fs-extra": "^6.0.1",
        "glob": "^7.1.1",
        "json5": "^2.1.0",
        "lodash": "^4.16.4",
        "resolve-cwd": "^2.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@commitlint/cli": "^7.2.1",
        "@commitlint/config-conventional": "^7.1.2",
        "babel-jest": "^23.6.0",
        "babel-preset-env": "^1.7.0",
        "chai": "^4.1.2",
        "docsify": "^4.8.0",
        "docsify-cli": "^4.3.0",
        "eslint": "^4.19.1",
        "husky": "^1.0.0-rc.8",
        "istanbul": "^0.4.5",
        "jest": "^23.6.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^4.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.0.1",
        "lint-staged": "^8.1.0",
        "mocha": "^5.2.0",
        "node-sass": "^4.9.4",
        "standard-version": "^4.4.0"
      },
      "gitHead": "8682ec00606e1d7c3a9bfcf9b04e4a6d8881fc2c",
      "_id": "style-dictionary@2.8.0",
      "_nodeVersion": "10.10.0",
      "_npmVersion": "6.9.0",
      "dist": {
        "integrity": "sha512-kOYzpszZKbRz3IBLm8rjq9M+Thk+J95qBjxej0S4ucFfV4WkJcIOH9RsyNi5IB4LEcfQj2fKwKEeSwzzT5m3Hg==",
        "shasum": "081371e3d17589914375d3d8a4a4f2c1a925e03e",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.8.0.tgz",
        "fileCount": 435,
        "unpackedSize": 4419763,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc7ZAlCRA9TVsSAnZWagAAcK4P/3WYNTFUXY42Px9LN4oB\n3cDYKdIplhoF/z/j8IY5CXuEr8hM8T3qCPYI6Zw1E/RPtrL1Nb1Ofne3B4wZ\nKYqnRXQIn0nnihtBZ/nxyHb4biR1qy44hQHX/+GjvWJnWRt7mrxlAK4fqbwc\n6Zjec995gFjD+fljthquYggkmyDXTRrvCKjruiBCeoJo0CoUW+SHTfEY8PLd\ntQNcehLp1K/wBnouo/dxlCSeWDbELIM4V+GMgj2f2x35CoM57jXVnjzSaj1j\n4+yUTt3V/oSbmZ6+ybzXbGtzIQV3/jQLFbI/JsAmilAVDvnj9FunJTyADg+Z\nl91sCtgdvGZzeUV+TCyCdeR1sweERx7r0u9bQks2X8j8fVCJHGNbfld/ZCfl\nLE8vit1nzHPgoptAba0QFUXNliCS64GOu+aLmuFXS1zt6AFhH8Bh4fOagssH\n0wfhDgSYrtJhMY6P/r9Ikyav4U0BamN92Mi/uygTbEoA1tzifynkMXgXs4wc\nmh1hNjcuSsuZggjUtrspwNdotB7WZcH0pVxH0qHkALRsYB/v0B/gZR8Q8aaX\nECuVzYB+8PerViT13/sj0bWl9xYDD/kIqAWo9UUoOj1LKU17ZsJvMv5W9uGr\nCd87RwA1iaNR+F564aJ8tku/8ex0idxjJ9qfjDNvL8t31ytK3SQRwXE7Uoqe\nQalb\r\n=mI1t\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCp7EtY9EbgSORfhW1vchQr5zlhaJLFwxqiqDZ5xTldtAIgD+aLg0mrUg1v1dOldOQfI7khfLd8iAGf6/cdH6MJw7I="
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        }
      ],
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.8.0_1559072804757_0.2310903571849232"
      },
      "_hasShrinkwrap": false
    },
    "2.8.1": {
      "name": "style-dictionary",
      "version": "2.8.1",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=6.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js lib/**/*.js __tests__/**/*.js",
        "test": "npm run lint && jest --runInBand",
        "test-watch": "npm run lint && jest --runInBand --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "roots": [
          "__tests__"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/"
        ],
        "transform": {
          "^.+\\.json5?$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^2.4.1",
        "commander": "^2.9.0",
        "fs-extra": "^6.0.1",
        "glob": "^7.1.1",
        "json5": "^2.1.0",
        "lodash": "^4.16.4",
        "resolve-cwd": "^2.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@commitlint/cli": "^7.2.1",
        "@commitlint/config-conventional": "^7.1.2",
        "babel-jest": "^23.6.0",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.9.4",
        "docsify-cli": "^4.3.0",
        "eslint": "^4.19.1",
        "husky": "^1.0.0-rc.8",
        "istanbul": "^0.4.5",
        "jest": "^23.6.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^4.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.0.1",
        "lint-staged": "^8.1.0",
        "node-sass": "^4.12.0",
        "standard-version": "^4.4.0"
      },
      "gitHead": "0ad7427550f03d1b64e9426ba1c42d6b3bb3ace7",
      "_id": "style-dictionary@2.8.1",
      "_nodeVersion": "10.10.0",
      "_npmVersion": "6.9.0",
      "dist": {
        "integrity": "sha512-6SFtQebwtHVr/YxocNKLmnfI3BRFkr3nTvVJB019e9JuoHmAWYwyVecoUWJYivaZN+0dZgdaLvDqqVhYl2loxQ==",
        "shasum": "0cc492772395fdb6579df17289d9d3ce065f3c13",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.8.1.tgz",
        "fileCount": 435,
        "unpackedSize": 4422256,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdG6z2CRA9TVsSAnZWagAAuHQP/160kUmC7orM4GHN/T72\nqs+R08WwYK2zjlEc6c+I/m9H+4ZG07gghtAt1wsbM4yr/rW1X87xmOEcHATk\ny4BS4TcOXtkTVi1dMkbW79mdd27t/cDgdRsB3oHM4ln5sjz9cT81dSk+qTQ0\nQy5vov/o9tmJpBa9Lmt4kGhWnFo4Q4w/bLoG67zvOsqldkmg9QMk9nN8vz8a\nTGXmyTxSZlyZ7kfP1C3yuw8rWtuvEwQqu3mGCEJS1eNP6pKBwxK3NrhovZDu\nERZDj9Yrue2O2Zy8ifDShxVdcdmK6oZFVMpwClhRLdLSOcY0Zea/wLwWnx/S\nFX/PETanFr3QXkW2Li2yMwT6UYBTvpnlZE4SXjklPcUWM12J0JVVYnK5NsOH\nI07ymBSjfNXj+/DLbGluhOe0ZIMprjChC2ozNhjAAFKLrOo68qgf1OGM0zfD\nUmZZCRClgGvWo7dE0JqbkRYMXOxautxEalp/KthIXe6lJen/IEnkoXpEug9L\n5dGB3KicbRqAGgKjKSv47RVZww2UX9g3iGhnhgAkW+Fmn8FE6ZhU9RxF2Tif\ns1PwNP1/pAI3dfJbW1NmPC3OVAH1oMpHs3oeHvgm1x46OifbLPAZpFNjbVF0\n3jBT+L56OTdinpWAlB/Q/x9IxHj3kAobBd/3Zzy25OSS407K4yI7XboRM6px\n4/cU\r\n=Ls4Y\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIF6CqtkLigB7qyRqZ8GXDpCfHGRDXcl/Gspgu9WKCcq+AiEAzi5kNbbJVGdJsm0YvEZUyhu5aTFyIcII9kuTCj8It2M="
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        }
      ],
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.8.1_1562094837918_0.24027338208268234"
      },
      "_hasShrinkwrap": false
    },
    "2.8.2": {
      "name": "style-dictionary",
      "version": "2.8.2",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=6.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js lib/**/*.js __tests__/**/*.js",
        "test": "npm run lint && jest --runInBand",
        "test-watch": "npm run lint && jest --runInBand --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "roots": [
          "__tests__"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^2.4.1",
        "commander": "^2.9.0",
        "fs-extra": "^6.0.1",
        "glob": "^7.1.1",
        "json5": "^2.1.0",
        "lodash": "^4.17.15",
        "resolve-cwd": "^2.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.5.5",
        "@commitlint/cli": "^8.1.0",
        "@commitlint/config-conventional": "^7.1.2",
        "babel-jest": "^24.8.0",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.9.4",
        "docsify-cli": "^4.3.0",
        "eslint": "^4.19.1",
        "husky": "^1.0.0-rc.8",
        "istanbul": "^0.4.5",
        "jest": "^24.8.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^5.0.0",
        "json5-jest": "^1.0.1",
        "less": "^3.0.1",
        "lint-staged": "^8.1.0",
        "node-sass": "^4.12.0",
        "standard-version": "^4.4.0"
      },
      "gitHead": "998198ae58a6ecb7775c5bd6c66047bfb2208ae4",
      "_id": "style-dictionary@2.8.2",
      "_nodeVersion": "10.10.0",
      "_npmVersion": "6.9.0",
      "dist": {
        "integrity": "sha512-7jePpXVeEGpvPcsy+ImyddSLRcp5oOK6EcWzsXA2pWTULibMwvWqBumyz8aVvLyDaj6k33M1yKdxVxT2M6rH8w==",
        "shasum": "6da6cdc547610fe2f0f5d9f061568b608c1a06f4",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.8.2.tgz",
        "fileCount": 435,
        "unpackedSize": 4423750,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdb+7nCRA9TVsSAnZWagAA0gkP/2LiSbDYxRhk9hLTsM4i\nGitPI/ZKPGXh3sWmNlHdG2DFAh/PY3WBizjI8a3O5EyoUJlFNxsILAg1TxJi\n4qyTSWvvnhmMeOxOX4+huOt36rh2MfjPeO0378U/oW0XCUzHp7XnKO281oYv\n4/wSeqmcqUm82wILxxoepoUBHH8tqci+ShWIv7TGlUswg0Mr6YgfuqBn4+hV\nZkVrnug/P/NBvk/4fRHMsJ36dk0JxH+IBStCw4kZ/9YKwkQfYV6H59s2OeZa\n3AcJll7jCkqdA5Xu2ppSfZRHBY+XfkhxSvfthMW1hlyEwGP458Y2PAKIJTt3\nD3CVWlzexzdxrT6+1xZNGo8KRlqy+qJvUI5PEYDa2idwbegOXxfiMHUTrs7D\nFX+e0Y2eeCSooteCURQ+hdtrN/tPCYhf16P+RihWpCnL6Z+Ueis91k8k7Z6g\nCtI1/4GdAKjjRZ3YhIEOJjRYq2yhfE/PHAlgPEi6rdwCN76y71grUS02yDXS\naDpMnxfTSZEioyAgS+QOML0gdhFdkd3biBZM3iNqjJU8EcXuEEHywoyZ/S2s\nJnjgr4Gi70gNVJRp6uGx/o3h0Wo6OX8psZ0aRIR1RP3Bjtjt6LMsJwsGCqhM\nA17Ic65Tr7kXV1G8alY+83o6wOxAWBOLZM7mJ5uf6ZwBoAMxwVzKdf4ioPaF\ncmUd\r\n=bRxg\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDwNLw+hN1Y+NoaYU4AE3ReLmNaxAIOALPvUgWCbj6zNAiAFUI8aBLOMdN3sY3nJcnMHCEWvQyLbPvhDTb3LOUfOjg=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        }
      ],
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.8.2_1567616742886_0.42354645585373407"
      },
      "_hasShrinkwrap": false
    },
    "2.8.3": {
      "name": "style-dictionary",
      "version": "2.8.3",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=8.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js lib/**/*.js __tests__/**/*.js",
        "test": "npm run lint && jest --runInBand",
        "test-watch": "npm run lint && jest --runInBand --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "roots": [
          "__tests__"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^2.4.1",
        "commander": "^2.9.0",
        "fs-extra": "^6.0.1",
        "glob": "^7.1.1",
        "json5": "^2.1.0",
        "lodash": "^4.17.15",
        "resolve-cwd": "^2.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.5.5",
        "@commitlint/cli": "^8.1.0",
        "@commitlint/config-conventional": "^7.1.2",
        "babel-jest": "^24.8.0",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.9.4",
        "docsify-cli": "^4.3.0",
        "eslint": "^4.19.1",
        "husky": "^1.0.0-rc.8",
        "istanbul": "^0.4.5",
        "jest": "^24.8.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^5.0.0",
        "json5-jest": "^1.0.1",
        "less": "^3.0.1",
        "lint-staged": "^8.1.0",
        "node-sass": "^4.12.0",
        "standard-version": "^4.4.0"
      },
      "gitHead": "49dce2c3fc70d012bd70537cde01379bd2a36dfc",
      "_id": "style-dictionary@2.8.3",
      "_nodeVersion": "10.10.0",
      "_npmVersion": "6.9.0",
      "dist": {
        "integrity": "sha512-eT4Xwz75avNLVy7Smt2tgmDoIEgloHDQjyGB6cuOZhEViM3I5J9yqoJRghWjORuW912UyZexDcE34aNz6BN/jw==",
        "shasum": "bc7993450d74bb86d076bb442863e32d5430a4b0",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.8.3.tgz",
        "fileCount": 442,
        "unpackedSize": 4428951,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdugZLCRA9TVsSAnZWagAAZykP/iFtrlc6tgUM4pJe9iWQ\nPWjfHUsZwV35R89QiNzVVbuxzoiLcvAhigosOWV2suaGPO56e+oLXVqOZY/d\nQAtFP547n7VgqzrS0Ct10FnFdhk9rmDVGNAN3xinmPPuiotOLInz6LPj6PsC\nQpekPnp413pRrdu6WI3JlDv/RceKpw5K5LrKlPTWRgwHdmqV4/vAhyxi0nLf\n/PBNek6xUB7FKLUn/f6tWVlgXv22yL3sTYezeSNE460mp/d6jNyHTw0jDKrM\nBbARJceIoJwvbeqh+vR0wqU5/lJLJ8G2ZAHG9WJUcw4GGDEALIdOKcOA/cA5\nb9Ee+7q4ZOotAYSs1HodbipIk6h3s+yavre7CQ2/kUNBAqcL/vM8r/Z0OXh+\n3ulXLoiUD1Uzm2E0qwzTHNsOe5Xiud+mmpRg4Ag1xYPdN78+YQKlD84NTB8j\nFVVnqhbkbWrmcoczgMYYRJiD0MG72Gi5hCKG8viwVZn3ujHJ7stE4VpLigOB\nuCGbJjGu+KtH6Qvjk89IyhHamaZ+osORlZVz9UzhVlbPNFpwUOIlwlEXk9Fy\nMevRdPf8DlECIOvhvjU2pRWkult70osUKGRVzTNkuoo07pUPdVYan06q6XYJ\nP6u+J5nSRcCSIDvVE21jlCO46rb1/5pfsrby1BbmcvkW98p4yL8ysZzF0tnZ\nx1zv\r\n=fbPm\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDMlRg+OfPEQPEey8Vw05VzKVVl8F4FtoACl8eNJHtlMAiEAzT+62DIPQ1igGAzXfyT3BXan1Nqww1+LHRjCsUSEN4M="
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        }
      ],
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.8.3_1572472395213_0.7308237418193562"
      },
      "_hasShrinkwrap": false
    },
    "2.9.0": {
      "name": "style-dictionary",
      "version": "2.9.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=8.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js lib/**/*.js __tests__/**/*.js",
        "test": "npm run lint && jest --runInBand",
        "test-watch": "npm run lint && jest --runInBand --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "roots": [
          "__tests__"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^2.4.1",
        "commander": "^2.9.0",
        "fs-extra": "^6.0.1",
        "glob": "^7.1.1",
        "json5": "^2.1.0",
        "lodash": "^4.17.15",
        "resolve-cwd": "^2.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.5.5",
        "@commitlint/cli": "^8.1.0",
        "@commitlint/config-conventional": "^7.1.2",
        "babel-jest": "^24.8.0",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.10.2",
        "docsify-cli": "^4.4.0",
        "eslint": "^4.19.1",
        "husky": "^1.0.0-rc.8",
        "istanbul": "^0.4.5",
        "jest": "^24.8.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^5.0.0",
        "json5-jest": "^1.0.1",
        "less": "^3.0.1",
        "lint-staged": "^8.1.0",
        "node-sass": "^4.13.1",
        "standard-version": "^7.1.0"
      },
      "gitHead": "bea26c26e7e6f7a963fa4d9e43f1da56e73e947b",
      "_id": "style-dictionary@2.9.0",
      "_nodeVersion": "12.13.1",
      "_npmVersion": "6.12.1",
      "dist": {
        "integrity": "sha512-2CKovpOV8gyMItNchNPkVBMGJ9XnVnfpeLPTeKi+IGTPh7Rf0jAxAyAKzhaxcUvxsSINKWvfo7oEbVpPCDXDcA==",
        "shasum": "8d22b7374abdeb62c78c0a8343956577eccd93f5",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.9.0.tgz",
        "fileCount": 435,
        "unpackedSize": 4436003,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJen2YECRA9TVsSAnZWagAAurIP/jQvMlqiT1vngvR9XIXb\naDyjXYA6IxlJutpBrLdauTxaw7At0roJnIeYXesMGKNHMSq6TqdpZt/SCWVg\n6qdV5/9KAPUKBM7pPu1xaGaKd6nfCTDcJa4lt2gGKIiS60whtbRQ6brB+rdJ\nxJ8zGH6QcVC4gc3RhoM0HcvNCIUluAqIc+L9y8ESt6icg39CdzV35gVJ/37L\n9J8l5tiGlw3opXOzL6WjM1onZ+QEg/Cu4utLubbPZg0R4vfawOf54vWptOag\nFJ3UgCu+8JMXTAR+PdLjq44LnNDZ3Xj7A7CwabmYtzN2hngJxs6H8rh+7JGd\nJbPJ1XMWr51lN2NHaikD7hb9YrZ5rHM+3gWwf2VMdDSToh24Ip2s/K3aIbGr\nivmn7j1MBm6QQotq+Mby4Egsp9Xt0Q+TMtYQuutI63MBb/vi3G+Jja3eH0Tf\nroCMB2QcHwLYBPmsqs9dUnHN4kZap3/jbr/kbTIzvsN7fwWSoBqVx/PuXGC+\n5nhpLj1lAyKMWYBrrBejfdi9iRjg0XwtrFn6v5c+w2hKfCEGSDJA8L8MU04/\nD49sw/TN6Wa2pLZxbz+1UyksgjetvkiyuCydiStziTEC3qOxLdWoEKNWXuIT\nu1Wpcn1ugRERNiB7rPOzrELRxD+6e7TPfbcT0MIfw1U/C9+yaigTkKRvi9dh\nI8Fq\r\n=esVd\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIAId4LKMZjXwP7QvYzyrzvOtFxnxFp+/Fjw7mLCuXh9wAiBiPM4B8EWodbFnWd7b7oybI8Vuc69y0m05yn7O43tfVw=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        }
      ],
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.9.0_1587504643558_0.49478368646772264"
      },
      "_hasShrinkwrap": false
    },
    "2.10.0": {
      "name": "style-dictionary",
      "version": "2.10.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=8.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js lib/**/*.js __tests__/**/*.js",
        "test": "npm run lint && jest --runInBand",
        "test-watch": "npm run lint && jest --runInBand --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "roots": [
          "__tests__"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^2.4.1",
        "commander": "^2.9.0",
        "fs-extra": "^6.0.1",
        "glob": "^7.1.1",
        "json5": "^2.1.0",
        "lodash": "^4.17.15",
        "resolve-cwd": "^2.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.5.5",
        "@commitlint/cli": "^8.1.0",
        "@commitlint/config-conventional": "^7.1.2",
        "babel-jest": "^24.8.0",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.10.2",
        "docsify-cli": "^4.4.0",
        "eslint": "^4.19.1",
        "husky": "^1.0.0-rc.8",
        "istanbul": "^0.4.5",
        "jest": "^24.8.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^5.0.0",
        "json5-jest": "^1.0.1",
        "less": "^3.0.1",
        "lint-staged": "^8.1.0",
        "node-sass": "^4.13.1",
        "standard-version": "^7.1.0"
      },
      "gitHead": "a5b7636e2c6d13839cd464ea38ebf1d410b2ff44",
      "_id": "style-dictionary@2.10.0",
      "_nodeVersion": "12.13.1",
      "_npmVersion": "6.12.1",
      "dist": {
        "integrity": "sha512-H4NpAKExmQdSMLNm9jVY8Kv+qfliFOgpxl07mqL+NyMMRs7HjR8IDvNJfxYqiVm0BhSpwFAp/hkUlD+8i7+P8w==",
        "shasum": "9da99b13facbadb671bd5848dd59ab6ac8f58893",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.10.0.tgz",
        "fileCount": 452,
        "unpackedSize": 4450978,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJesbezCRA9TVsSAnZWagAA6ecQAImqMw5sL9XThaMa7czA\nFUpz5wWzSCcsQQARBTEAlU3VlWhnnxNNPcPMDL4kppApF3RRQya98OPzahGr\nDGNfuSIr4B6iAdBnHKLepBXU2WTtZPyHii2tGdb4pYeegc6hoGr7HUC5SWqm\nFXnzy+GvJzbgHZjTnQQzoshfaXBTkx+RiA4IBH5NaVcTUo/yO+WkZyS/8Jmy\nHagODDjCr+5rfUkha5yD44pe7s7dqqADiSeltveIb/VK6hWLS1QZoKP4Y9FP\n/dVeGcCKgLXg6qiCVp1FVxFxhD6wAzsBYjlr4EOpvGSQ+WtOKKOI0sMxtsAf\nQwBd7Pw29T0MnMdF8yWIY5L2Fdq2jfzHkKDXl9IjYswroQPRGbkG/lB9g8q5\nBsek5i19CRFUDyQqOh3wXOyIwFIfW7URbHC+HFC2dNLUppZ1dkeAn3RezDf1\nr9wmpxWF82m1wgXzTzlgMzE3lcy3lO64g4KHEB0ebU9pq7tg62fN1rumukUi\ndjBEecEU+DeEu8UTVZs7+ElnSjN8rs7jtwz2amgZw16ikJhRwlz0T+lZTz2D\ngR6iBM5w99KkqQnG7jlo0EeSgqk21AZ0JfugHAXttRYilet30bbIyLZzkNMP\nDP1w8MS2GuD0n6vzxnADL08aEqrSL5A/Y/xUZdkWu/aXzLXIkly9Uhz/gOl+\nq/Ik\r\n=hBPI\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCfphyhiQcEm1hgYjKpND6iNKOwm86ykVPS+cjr6HnD/QIhAMDUfsf3xEEWChhPuokH46i0So+TS/wMyI30Ab5kE3N2"
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        }
      ],
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.10.0_1588705202559_0.4017963546573966"
      },
      "_hasShrinkwrap": false
    },
    "2.10.1": {
      "name": "style-dictionary",
      "version": "2.10.1",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "./bin/style-dictionary"
      },
      "engines": {
        "node": ">=8.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js lib/**/*.js __tests__/**/*.js",
        "test": "npm run lint && jest --runInBand",
        "test-watch": "npm run lint && jest --runInBand --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "roots": [
          "__tests__"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "resolve-cwd": "^3.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^8.3.5",
        "@commitlint/config-conventional": "^8.3.4",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.11.3",
        "docsify-cli": "^4.4.0",
        "eslint": "^6.8.0",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^25.4.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^6.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^4.14.1",
        "standard-version": "^8.0.0"
      },
      "gitHead": "c9ae1b8a592e7cf7b9ce5218403fed5406fec2ec",
      "_id": "style-dictionary@2.10.1",
      "_nodeVersion": "12.13.1",
      "_npmVersion": "6.12.1",
      "dist": {
        "integrity": "sha512-AsAeRIpA82zHRql1mg6yvBsLmi+seymwYcShdmnyhbwjBRmOlJ0pj9QlBWH5MWAUBwzR4IndS1aSzgxeqmH5Kg==",
        "shasum": "7c8bd31c265d5169ef40fc47fada97d21a249927",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.10.1.tgz",
        "fileCount": 452,
        "unpackedSize": 4355197,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfBoavCRA9TVsSAnZWagAAziYP/2cEWh0dVyByN1Z1Ou6w\n/deXJA6uIX63EWQR8ZMezMw4Q/DP5o5M5bYDqiQ9aJ86d3xTdnZIZoc9S1h5\nwFwcGy23lGTHKgPothClfWnHCqpUx8nQmDKNQEV9mMFnF2Rrz8GctkYMdmuY\nPGmgqwAWvm+nk4RCjDk2OfzbLw2wkKw2sfCrH27sxVAkDXfctLFoGGoq45tH\nVaCRgGHDbnEUXpCMmPjaEBBOgnP7/zWMiLgnaFHr0/6nTKKF1sofx8NJnLBK\nHFWUWfudYav3hSzv3j1FpHpDvivNc5IAc+tCZxLfwiGA3Xl+XRC9ggkhURKJ\nygjz5BHd+6Sdym3Jm5HJkxwo1YPR2q6e0rEu+ErS/RgtLqVZLVCrfP+xxRJs\njGRRYsSl3T/M4nR+hyezjmoDy5tlNpbfEDFC75C7I2uRMkjFsxhfYRCUgvuF\nNc3Fho/rtUhplSIivznHwZ1p+8XDwk1CdsTbFCvuL95f674IIWe6dqNYQdII\nv1lnFdyEQkWOl81VJLyZV81+CaOBsca1kzwnRFcSPDd/WPQnM5aRfWfAInor\nibhwnX4NuRCNlwb7qunXKIsVRgtYt0vdVxzoOjZOwy38R//ClqazAsTXopNF\nx4+mMHKYn75HIb2Lyy3XqaZnh6iVwf8c9c0zc77YDBW/lvbOUFyvwUZix5WU\nqJpJ\r\n=LFk/\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDVkQG36+cZmgq0VyFXhbUbgRA3wwvWX0KcoHuHlSoS+AIgIM9V4A/nzsvz04CQbG4OARxAioEltP3O9fVlOjCSSFk="
          }
        ]
      },
      "maintainers": [
        {
          "email": "osa-3p@amazon.com",
          "name": "amzn-oss"
        },
        {
          "email": "charles@pgina.org",
          "name": "chazzmoney"
        },
        {
          "email": "dbanks.design@gmail.com",
          "name": "dbanksdesign"
        }
      ],
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.10.1_1594263214417_0.3890665952501213"
      },
      "_hasShrinkwrap": false
    },
    "2.10.2": {
      "name": "style-dictionary",
      "version": "2.10.2",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=8.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js lib/**/*.js __tests__/**/*.js",
        "test": "npm run lint && jest --runInBand",
        "test-watch": "npm run lint && jest --runInBand --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "roots": [
          "__tests__"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "resolve-cwd": "^3.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^8.3.5",
        "@commitlint/config-conventional": "^8.3.4",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.11.3",
        "docsify-cli": "^4.4.0",
        "eslint": "^6.8.0",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^25.4.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^6.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^4.14.1",
        "standard-version": "^8.0.0"
      },
      "gitHead": "ef2dafa5c206f1b24a93520e67518a6506caaeb0",
      "_id": "style-dictionary@2.10.2",
      "_nodeVersion": "12.17.0",
      "_npmVersion": "6.14.8",
      "dist": {
        "integrity": "sha512-1GgtokijUl46tFXFGMmGPioO9xMzTBcCRfufYUZ61OxYRUEDT93M7Y9YxD+udgrHN2pYRrS/CiToM4jARBTccQ==",
        "shasum": "9150dfcdc1492e1cd5f0f0a73e2bc6ada349c09b",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.10.2.tgz",
        "fileCount": 445,
        "unpackedSize": 4354569,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJff1IFCRA9TVsSAnZWagAAfMAP/im9itbiDVFL4QGKCopm\nnoYxkxwh5fPncruGe2Xucp+IyyfdzAS47ecVs34L2lpf1v7ANjPj5eoQr02n\ndJzryQaidUO1QsZyz8mX37+nQ2VuTFFvU98BcRdw/hpWTTczyuEl0XW/tZDl\n67ZeHpJKplqCzY4kFEsmH0RtRjiCfmC3yay3rayscmlcPZDUD1tHMt8LlNg7\nF5bhBQbG05sduziIwrCoLKK4FdETVVqNL7KOndexzlVxUkWxMYgHmE4Epk20\ne3eGj8uvHs/RCVztxESNkDqSi23x/5+lex/op5Oh7RkBvPKUqfWFHnjaCnJq\ndgTsJGguy3Hc9+7lp7ceniqwThbgvI34492BIgXZJUw5t0O0QgZVTMHcJvlG\nKRJ1dOANX2wXC2w0KSI1qN81jH0HQJB7LY6WUaJOpp9TgvV4a1JNvkJ8bX31\naVCIOYGLTwgjei8SPXbrXGRjic4nTgTZK38IgB17ZL9jSfJgY1f8MUs6ZlNO\npdFT6kdmd/bk+kUTA/vINSP+2Yd3d9CSxOfHzNcSQmpLv/84IjGqx6s4e4uv\nOIeADVk07OyD8QV+A/3CUeL53nr/552e5Yv3L5JfpqCWsOuC+0jGqR8832zd\nI/1oWeUJ8lFLHQTixn3z5FyOfhQoSlTpONjzTYt5fJkZjokTpMO/hgxbmnw/\n0Dpr\r\n=NU/n\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIAIBPg/OqsaTS832Fsi3bJeRb2Vpp8oYc1kfdCGP0kP5AiA64aMHva8GRBYJsKNO8eN91NZKgXhAr17SjSzoOb46TQ=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.10.2_1602179588808_0.7407700007001443"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0-rc.0": {
      "name": "style-dictionary",
      "version": "3.0.0-rc.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js lib/**/*.js __tests__/**/*.js",
        "test": "npm run test-types && npm run lint && jest --runInBand",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "roots": [
          "__tests__"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "resolve-cwd": "^3.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.11.3",
        "docsify-cli": "^4.4.0",
        "eslint": "^6.8.0",
        "eslint-plugin-jest": "^24.1.3",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^25.4.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^6.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^4.14.1",
        "standard-version": "^9.0.0",
        "tsd": "^0.11.0",
        "yaml": "^1.10.0"
      },
      "readme": "<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/master/CONTRIBUTING.md#submitting-pull-requests)\n<br/>\n[![Build Status](https://img.shields.io/travis/amzn/style-dictionary.svg?style=flat-square)](https://travis-ci.org/amzn/style-dictionary)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n> *Style once, use everywhere.*\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these properties to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices.  At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication.  Even then, mistakes inevitably happen and the design may not be implemented accurately.  StyleDictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on Youtube\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Contents\n* [Installation](#installation)\n* [Usage](#usage)\n* [Example](#example)\n* [Quick Start](#quick-start)\n* [Style Properties](#style-properties)\n* [Extending](#extending)\n* [Contributing](#contributing)\n* [License](#license)\n\n\n## Installation\n*Note that you must have node (and npm) installed.*\n\nIf you want to use the CLI, you can install it globally via npm:\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n### CLI\n```bash\n$ style-dictionary build\n```\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag | Short Flag | Description |\n| --- | --- | --- |\n| --config \\[path\\] | -c | Set the config file to use. Must be a .json file |\n| --platform \\[platform\\] | -p | Only build a specific platform defined in the config file. |\n| --help | -h | Display help content |\n| --version | -v | Display the version |\n\n### Node\nYou can also use the style dictionary build system in node if you want to [extend](#extend) the functionality or use it in another build system like Grunt or Gulp.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['properties/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [{\n        destination: 'variables.scss',\n        format: 'scss/variables'\n      }]\n    }\n    // ...\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of style properties, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these style properties in JSON files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n```\n├── config.json\n├── properties/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\nThis tells the style dictionary build system how and what to build. The default file path is config.json in the root of the project, but you can name it whatever you want, you can pass in the `--config` flag.\n```json\n{\n  \"source\": [\"properties/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [{\n        \"destination\": \"scss/_variables.scss\",\n        \"format\": \"scss/variables\"\n      }]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [{\n        \"destination\": \"font_dimens.xml\",\n        \"format\": \"android/fontDimens\"\n      }]\n    }\n  }\n}\n```\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| source | Array | Paths to the property json files. Can have globs. |\n| platforms | Object | Sets of platform files to be built. |\n| platforms | Array | Paths to the property json files. Can have globs. |\n| platform.transformGroup | String (optional) | Apply a group of transforms to the properties, must either define this or `transforms`. |\n| platform.transforms | Array (optional) | Transforms to apply sequentially to all properties. Can be a built-in one or you can create your own. |\n| platform.buildPath | String (optional) | Base path to build the files, must end with a trailing slash. |\n| platform.files | Array (optional) | Files to be generated for this platform. |\n| platform.file.destination | String (optional) | Location to build the file, will be appended to the buildPath. |\n| platform.file.format | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats) |\n| platform.file.options | Object (optional) | A set of extra options associated with the file. |\n| platform.file.options.showFileHeader | Boolean | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\". |\n\n### Properties\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\" : { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\" : { \"value\": \"24px\" },\n      \"base\"  : { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size properties. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n\n## Quick Start\nThe style dictionary framework comes with some example code to get you stared. Install the node module globally, create a directory and `cd` into it.\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\nNow run:\n```\n$ style-dictionary init basic\n```\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n\n## Style Properties\n\nA style property is an attribute to describe something visually. It is atomic (it cannot be broken down further). Style properties have a name, a value, and optional attributes or metadata. The name of a property can be anything, but we have a proposed naming structure that works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of style properties makes the most sense semantically. Style properties can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the property. For example, we have the color category and every property underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your property json files like simple objects:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\n The CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 properties 'base' and 'large'.\n\n Structuring style properties in this manner gives us consistent naming and accessing of these properties. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\n You can organize and name your style properties however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the property of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\n Also, the CTI structure provides a good mechanism to target transforms for specific kinds of properties. All of the transforms provided by the framework use the CTI of a property to know if it should be applied. For instance, the 'color/hex' transform only applies to properties of the category 'color'.\n\nYou can also add a _comment_ to a style property:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment  will appear in the output files, where relevant or the output format supports comments.\n\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function(prop) {\n    return prop.attributes.category === 'time';\n  },\n  transformer: function(prop) {\n    return (parseInt(prop.original.value) / 1000).toString() + 's';\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "cc2de405fc485e1646b1ce855fd7e40b41a5b3cd",
      "_id": "style-dictionary@3.0.0-rc.0",
      "_nodeVersion": "12.17.0",
      "_npmVersion": "6.14.8",
      "dist": {
        "integrity": "sha512-BFBBGTX0bLyLlXlKfHlU4MAFTbKVMYa22igee80PaRcF2dtBXnNVSnVL6U14nFpuZqwmPoAxOThSAy385BDc5w==",
        "shasum": "cb0442b06934093f6a48c5cdf1935a31bbd14593",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.0.0-rc.0.tgz",
        "fileCount": 468,
        "unpackedSize": 4604833,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfyDBJCRA9TVsSAnZWagAACXoQAJDDWcKxFpoD/2AiO+XJ\nf/70MRO4LDCVUaqY3hkVjB0iNrzHFggIL5NBXTtPp/TJFZTCjJdLhTVeP7gi\nBbia49wr5VG5lOUsmCUIxpU+L4cbM6dCLYCMXbyU5KCMEgBnZEO0nTTuw6pg\nikSMPOQWCwIQttnRWdVBZuNtNua6hraet42UHU6QJfuZl4Oxi+ILDxNEZadd\nf/1Gc1QHQ4F4KZQh9X3u8dobtRu0pwVxyGBGR/RJUWB/CJTZdnBA2QEht6mi\nZOxkK/RY/yvWecbR3N5ztcFYW3VAVByJfujoJL24NqKQTGKWu358ZvPftDBc\nJeUmqy9FcrmFu/6tkJ3JmgPwgvP6nLvBQi9AJcv/fUZQ3JqxUY9X9y6noMO7\nVlSM+GGODDaohHD2kMRiK/94Zp8a3f4zEEawETRDEHQcxMr2SxUYBARbBMmg\nscq815/mkwonToDi10EB4D8sIbrU4t9RXyxJ8C/GZCBLU6fk+QxGwkvtfbQB\nFhOTP43KJQd3XXs+MG6017DnbOIukT54Vf/g2sBBJYYeANWl3M07kJN71ra5\ntCCD/HcLiBBREZQeEa7UfHpxYg25BlWjko1hWM7LSd0kMgKn0WcgevoSJAdK\njs2RPVG9nKUswrB7dKpDfmj6wJusR9TX107BaF4WxSdqVp1MQNlJhW7265RJ\nH/QC\r\n=BArx\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEHLlBbvvptrx68Y/TaAGBSfTIPpu9As+7L4Edjfn+CIAiEAzfxtubS3LTuEtTPWH35XxFoZdv3wCkQsom5ieLSLUkk="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.0.0-rc.0_1606955081135_0.2734777489055287"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0-rc.1": {
      "name": "style-dictionary",
      "version": "3.0.0-rc.1",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js lib/**/*.js __tests__/**/*.js",
        "test": "npm run test-types && npm run lint && jest --runInBand",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "roots": [
          "__tests__"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "resolve-cwd": "^3.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.11.3",
        "docsify-cli": "^4.4.0",
        "eslint": "^6.8.0",
        "eslint-plugin-jest": "^24.1.3",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^25.4.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^6.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^4.14.1",
        "standard-version": "^9.0.0",
        "tsd": "^0.11.0",
        "yaml": "^1.10.0"
      },
      "readme": "<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/master/CONTRIBUTING.md#submitting-pull-requests)\n<br/>\n[![Build Status](https://img.shields.io/travis/amzn/style-dictionary.svg?style=flat-square)](https://travis-ci.org/amzn/style-dictionary)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n> *Style once, use everywhere.*\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these properties to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices.  At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication.  Even then, mistakes inevitably happen and the design may not be implemented accurately.  StyleDictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on Youtube\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Contents\n* [Installation](#installation)\n* [Usage](#usage)\n* [Example](#example)\n* [Quick Start](#quick-start)\n* [Style Properties](#style-properties)\n* [Extending](#extending)\n* [Contributing](#contributing)\n* [License](#license)\n\n\n## Installation\n*Note that you must have node (and npm) installed.*\n\nIf you want to use the CLI, you can install it globally via npm:\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n### CLI\n```bash\n$ style-dictionary build\n```\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag | Short Flag | Description |\n| --- | --- | --- |\n| --config \\[path\\] | -c | Set the config file to use. Must be a .json file |\n| --platform \\[platform\\] | -p | Only build a specific platform defined in the config file. |\n| --help | -h | Display help content |\n| --version | -v | Display the version |\n\n### Node\nYou can also use the style dictionary build system in node if you want to [extend](#extend) the functionality or use it in another build system like Grunt or Gulp.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['properties/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [{\n        destination: 'variables.scss',\n        format: 'scss/variables'\n      }]\n    }\n    // ...\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of style properties, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these style properties in JSON files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n```\n├── config.json\n├── properties/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\nThis tells the style dictionary build system how and what to build. The default file path is config.json in the root of the project, but you can name it whatever you want, you can pass in the `--config` flag.\n```json\n{\n  \"source\": [\"properties/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [{\n        \"destination\": \"scss/_variables.scss\",\n        \"format\": \"scss/variables\"\n      }]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [{\n        \"destination\": \"font_dimens.xml\",\n        \"format\": \"android/fontDimens\"\n      }]\n    }\n  }\n}\n```\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| source | Array | Paths to the property json files. Can have globs. |\n| platforms | Object | Sets of platform files to be built. |\n| platforms | Array | Paths to the property json files. Can have globs. |\n| platform.transformGroup | String (optional) | Apply a group of transforms to the properties, must either define this or `transforms`. |\n| platform.transforms | Array (optional) | Transforms to apply sequentially to all properties. Can be a built-in one or you can create your own. |\n| platform.buildPath | String (optional) | Base path to build the files, must end with a trailing slash. |\n| platform.files | Array (optional) | Files to be generated for this platform. |\n| platform.file.destination | String (optional) | Location to build the file, will be appended to the buildPath. |\n| platform.file.format | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats) |\n| platform.file.options | Object (optional) | A set of extra options associated with the file. |\n| platform.file.options.showFileHeader | Boolean | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\". |\n\n### Properties\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\" : { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\" : { \"value\": \"24px\" },\n      \"base\"  : { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size properties. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n\n## Quick Start\nThe style dictionary framework comes with some example code to get you stared. Install the node module globally, create a directory and `cd` into it.\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\nNow run:\n```\n$ style-dictionary init basic\n```\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n\n## Style Properties\n\nA style property is an attribute to describe something visually. It is atomic (it cannot be broken down further). Style properties have a name, a value, and optional attributes or metadata. The name of a property can be anything, but we have a proposed naming structure that works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of style properties makes the most sense semantically. Style properties can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the property. For example, we have the color category and every property underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your property json files like simple objects:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\n The CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 properties 'base' and 'large'.\n\n Structuring style properties in this manner gives us consistent naming and accessing of these properties. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\n You can organize and name your style properties however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the property of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\n Also, the CTI structure provides a good mechanism to target transforms for specific kinds of properties. All of the transforms provided by the framework use the CTI of a property to know if it should be applied. For instance, the 'color/hex' transform only applies to properties of the category 'color'.\n\nYou can also add a _comment_ to a style property:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment  will appear in the output files, where relevant or the output format supports comments.\n\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function(prop) {\n    return prop.attributes.category === 'time';\n  },\n  transformer: function(prop) {\n    return (parseInt(prop.original.value) / 1000).toString() + 's';\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "4c0352f4a8dd7420c2b1cc2c1904b7456a882fb8",
      "_id": "style-dictionary@3.0.0-rc.1",
      "_nodeVersion": "12.17.0",
      "_npmVersion": "6.14.8",
      "dist": {
        "integrity": "sha512-tSFRc/dz7IgTA/YeP3hDIMPi90cFtC1dbcrak2/DCmIBllI/u1yYovyBOejgwJjv6N8ite0iUtnM6Z5NnBcqpQ==",
        "shasum": "aa916355f02ee574c6799f333d8945be72c52461",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.0.0-rc.1.tgz",
        "fileCount": 479,
        "unpackedSize": 4633395,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfyqlbCRA9TVsSAnZWagAAAfEP/3BQ7Sd4XQx2C49zZl8w\n1RxO8CXx/sRbtzNhvmXI5y3CUnglWLT45OrGSfUHhbpaNxKA3q810n6FsyfD\n4mEIJc+fTbY9lwSK39bqMGHIC4Oao+Bl9TDvcxQhAYtlQCsWJotyuoR7V/30\n9yAH2qcAlNvFppOQbNrWMg6nvZPEd6yh8cvPQRS+ZnKX1jPJSFVwOzmPRGGS\nlj338Lqz6Q2cWlMPSepUWs/KCNOYvvramEwW6BGYkJCcbwrrOIZiPg4YClDf\nPR/3pWAFow6pF8ezO6jscuFd0U0LyecBAg5tBFhaXZxWWyNX8nebclv8u1nV\nr2zWY4QYI4ge9IMyZewdeYzTdoOce8J921noLO7FINk2n528++TtpnaY6CCN\nDwmTeXa9J9VfPWANN9KzR+Zog9NJhGnndLI4FuyIaX4V1j9Hfho8RUIzvzqz\nZg9QpXJ3o0OhaeLOZ9PXA4Ub0FNcpZZXL9YrvREty8wrQPqGPY4CYujjg1a8\ndypFBR6uUUxA1luoY6FYtFWurVlp1KQRtHHrkqJgoYGBZS36ME1tzfKYeFht\nhvDrfwRZZpM4CrZkPzrKTK/woyJ3hklilYXItPMR3R495KCqK68kZcKSnqr7\nEbpzAWo2a14L1YQdCZmsAV3cQlApW20FOzGQCJMGP5YK5DzqtGzlESN64VrK\nOe4n\r\n=Fczl\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGTnE8nlUFCV9VPJrrOQjlyUxRRN4tpRrOi/G0r7zg4IAiAj0Cka0QQ7gTbKvliopU8KMJ4+3owyhNvJMvM2+XQ4hw=="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.0.0-rc.1_1607117145915_0.2755952106398385"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0-rc.2": {
      "name": "style-dictionary",
      "version": "3.0.0-rc.2",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js lib/**/*.js __tests__/**/*.js",
        "test": "npm run test-types && npm run lint && jest --runInBand",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "roots": [
          "__tests__"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "resolve-cwd": "^3.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.11.3",
        "docsify-cli": "^4.4.0",
        "eslint": "^6.8.0",
        "eslint-plugin-jest": "^24.1.3",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^25.4.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^6.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^4.14.1",
        "standard-version": "^9.0.0",
        "tsd": "^0.11.0",
        "yaml": "^1.10.0"
      },
      "readme": "<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/master/CONTRIBUTING.md#submitting-pull-requests)\n<br/>\n[![Build Status](https://img.shields.io/travis/amzn/style-dictionary.svg?style=flat-square)](https://travis-ci.org/amzn/style-dictionary)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n> *Style once, use everywhere.*\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these properties to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices.  At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication.  Even then, mistakes inevitably happen and the design may not be implemented accurately.  StyleDictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on Youtube\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Contents\n* [Installation](#installation)\n* [Usage](#usage)\n* [Example](#example)\n* [Quick Start](#quick-start)\n* [Style Properties](#style-properties)\n* [Extending](#extending)\n* [Contributing](#contributing)\n* [License](#license)\n\n\n## Installation\n*Note that you must have node (and npm) installed.*\n\nIf you want to use the CLI, you can install it globally via npm:\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n### CLI\n```bash\n$ style-dictionary build\n```\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag | Short Flag | Description |\n| --- | --- | --- |\n| --config \\[path\\] | -c | Set the config file to use. Must be a .json file |\n| --platform \\[platform\\] | -p | Only build a specific platform defined in the config file. |\n| --help | -h | Display help content |\n| --version | -v | Display the version |\n\n### Node\nYou can also use the style dictionary build system in node if you want to [extend](#extend) the functionality or use it in another build system like Grunt or Gulp.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['properties/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [{\n        destination: 'variables.scss',\n        format: 'scss/variables'\n      }]\n    }\n    // ...\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of style properties, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these style properties in JSON files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n```\n├── config.json\n├── properties/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\nThis tells the style dictionary build system how and what to build. The default file path is config.json in the root of the project, but you can name it whatever you want, you can pass in the `--config` flag.\n```json\n{\n  \"source\": [\"properties/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [{\n        \"destination\": \"scss/_variables.scss\",\n        \"format\": \"scss/variables\"\n      }]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [{\n        \"destination\": \"font_dimens.xml\",\n        \"format\": \"android/fontDimens\"\n      }]\n    }\n  }\n}\n```\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| source | Array | Paths to the property json files. Can have globs. |\n| platforms | Object | Sets of platform files to be built. |\n| platforms | Array | Paths to the property json files. Can have globs. |\n| platform.transformGroup | String (optional) | Apply a group of transforms to the properties, must either define this or `transforms`. |\n| platform.transforms | Array (optional) | Transforms to apply sequentially to all properties. Can be a built-in one or you can create your own. |\n| platform.buildPath | String (optional) | Base path to build the files, must end with a trailing slash. |\n| platform.files | Array (optional) | Files to be generated for this platform. |\n| platform.file.destination | String (optional) | Location to build the file, will be appended to the buildPath. |\n| platform.file.format | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats) |\n| platform.file.options | Object (optional) | A set of extra options associated with the file. |\n| platform.file.options.showFileHeader | Boolean | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\". |\n\n### Properties\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\" : { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\" : { \"value\": \"24px\" },\n      \"base\"  : { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size properties. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n\n## Quick Start\nThe style dictionary framework comes with some example code to get you stared. Install the node module globally, create a directory and `cd` into it.\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\nNow run:\n```\n$ style-dictionary init basic\n```\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n\n## Style Properties\n\nA style property is an attribute to describe something visually. It is atomic (it cannot be broken down further). Style properties have a name, a value, and optional attributes or metadata. The name of a property can be anything, but we have a proposed naming structure that works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of style properties makes the most sense semantically. Style properties can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the property. For example, we have the color category and every property underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your property json files like simple objects:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\n The CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 properties 'base' and 'large'.\n\n Structuring style properties in this manner gives us consistent naming and accessing of these properties. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\n You can organize and name your style properties however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the property of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\n Also, the CTI structure provides a good mechanism to target transforms for specific kinds of properties. All of the transforms provided by the framework use the CTI of a property to know if it should be applied. For instance, the 'color/hex' transform only applies to properties of the category 'color'.\n\nYou can also add a _comment_ to a style property:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment  will appear in the output files, where relevant or the output format supports comments.\n\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function(prop) {\n    return prop.attributes.category === 'time';\n  },\n  transformer: function(prop) {\n    return (parseInt(prop.original.value) / 1000).toString() + 's';\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "8d5b2ab643eed344f4ce34fe66de9724b8bdb758",
      "_id": "style-dictionary@3.0.0-rc.2",
      "_nodeVersion": "12.17.0",
      "_npmVersion": "6.14.10",
      "dist": {
        "integrity": "sha512-iW2zuJZGOAsMLW7GupNY9JRATdLQkoIceV875HgSeFQf4fcha3DfXYlpW3QQKf9Bt98auOYCZ5zCb3qmmAFD3A==",
        "shasum": "969527068ff1b10500e3817316dc9c5c353cea0c",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.0.0-rc.2.tgz",
        "fileCount": 480,
        "unpackedSize": 4641152,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf/OyaCRA9TVsSAnZWagAASSMP/1lDY27zzFsvash/oC+m\nTODMCcuGkQyw8rorEDX+GIEo4+MLKSDE9oSLTdb0KMWR/T4oBowEmPs9Z35l\nO3qmIIYenpGI///Jubq+ntF3FlOSg4Ypz+PaMTNq+hK/e+HUJTLlmsAtJeaJ\nWi+Rn/BnebMFs5thVrQMHSdN0j298+bEL7wTTXB44EOHnlSCUtkqOPTbpIZa\ncUn0/1SL+D4mWEeKjcDrHK1nU5bCX48t/5xi2vIt/MFv1mi4L8OQ8K/zoGSu\nZyMtUYqqlK6+fqIphaw7zCcjqHLnqf3+vR4ALCmSOXLY7lMIp4IP0sAjWGjW\n/FFUEkyYiEwS5PnLcslq9mEG6Yv8aH/sTA/c/mNYOw5uwtG6pDxkumToPmIf\nuAivUwEdJEA3dq9zAtXveKmInUGg44JjRZILWtUVu93GMJAuurwRyXfkHvyI\ngWpgNQAR8vQNcj3AyIVDsKINQpAxgGf8sksN+aHWLGvKedBu+0ZqJa/D9xqF\ne/ei4+5rLGNcuceZjbcxQIKA/yulaSvBUDBVLn0AFf+NaAggssAYz0oSjTiK\ntPIf6hjsq9Lv+DnO1drbLiVznJAsjmLJpYFMBXhweksODFvm9fQsjxbvpbPM\nQJb/QOhurZ0Qnn5oKzoEUWL6I7UTk0Uk5OVhtLGk8Qc/SYuRnfjDokA2yI0G\nsIev\r\n=7juO\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEJaNjVYQDCtB4yfl+rUfYMkxaNRFa12ZgUHO3VV9q6kAiEA+VKxu6zK73m49FAEupkLunSc3OPqELWCG9Np4PWvAZ8="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.0.0-rc.2_1610411162179_0.19503889851763478"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0-rc.3": {
      "name": "style-dictionary",
      "version": "3.0.0-rc.3",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "resolve-cwd": "^3.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.11.3",
        "docsify-cli": "^4.4.0",
        "eslint": "^6.8.0",
        "eslint-plugin-jest": "^24.1.3",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^25.4.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^6.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^4.14.1",
        "standard-version": "^9.0.0",
        "tsd": "^0.11.0",
        "yaml": "^1.10.0"
      },
      "readme": "<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/master/CONTRIBUTING.md#submitting-pull-requests)\n<br/>\n[![Build Status](https://img.shields.io/travis/amzn/style-dictionary.svg?style=flat-square)](https://travis-ci.org/amzn/style-dictionary)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n> *Style once, use everywhere.*\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these properties to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices.  At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication.  Even then, mistakes inevitably happen and the design may not be implemented accurately.  StyleDictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on Youtube\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Contents\n* [Installation](#installation)\n* [Usage](#usage)\n* [Example](#example)\n* [Quick Start](#quick-start)\n* [Style Properties](#style-properties)\n* [Extending](#extending)\n* [Contributing](#contributing)\n* [License](#license)\n\n\n## Installation\n*Note that you must have node (and npm) installed.*\n\nIf you want to use the CLI, you can install it globally via npm:\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n### CLI\n```bash\n$ style-dictionary build\n```\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag | Short Flag | Description |\n| --- | --- | --- |\n| --config \\[path\\] | -c | Set the config file to use. Must be a .json file |\n| --platform \\[platform\\] | -p | Only build a specific platform defined in the config file. |\n| --help | -h | Display help content |\n| --version | -v | Display the version |\n\n### Node\nYou can also use the style dictionary build system in node if you want to [extend](#extend) the functionality or use it in another build system like Grunt or Gulp.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['properties/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [{\n        destination: 'variables.scss',\n        format: 'scss/variables'\n      }]\n    }\n    // ...\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of style properties, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these style properties in JSON files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n```\n├── config.json\n├── properties/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\nThis tells the style dictionary build system how and what to build. The default file path is config.json in the root of the project, but you can name it whatever you want, you can pass in the `--config` flag.\n```json\n{\n  \"source\": [\"properties/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [{\n        \"destination\": \"scss/_variables.scss\",\n        \"format\": \"scss/variables\"\n      }]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [{\n        \"destination\": \"font_dimens.xml\",\n        \"format\": \"android/fontDimens\"\n      }]\n    }\n  }\n}\n```\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| source | Array | Paths to the property json files. Can have globs. |\n| platforms | Object | Sets of platform files to be built. |\n| platforms | Array | Paths to the property json files. Can have globs. |\n| platform.transformGroup | String (optional) | Apply a group of transforms to the properties, must either define this or `transforms`. |\n| platform.transforms | Array (optional) | Transforms to apply sequentially to all properties. Can be a built-in one or you can create your own. |\n| platform.buildPath | String (optional) | Base path to build the files, must end with a trailing slash. |\n| platform.files | Array (optional) | Files to be generated for this platform. |\n| platform.file.destination | String (optional) | Location to build the file, will be appended to the buildPath. |\n| platform.file.format | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats) |\n| platform.file.options | Object (optional) | A set of extra options associated with the file. |\n| platform.file.options.showFileHeader | Boolean | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\". |\n\n### Properties\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\" : { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\" : { \"value\": \"24px\" },\n      \"base\"  : { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size properties. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n\n## Quick Start\nThe style dictionary framework comes with some example code to get you stared. Install the node module globally, create a directory and `cd` into it.\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\nNow run:\n```\n$ style-dictionary init basic\n```\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n\n## Style Properties\n\nA style property is an attribute to describe something visually. It is atomic (it cannot be broken down further). Style properties have a name, a value, and optional attributes or metadata. The name of a property can be anything, but we have a proposed naming structure that works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of style properties makes the most sense semantically. Style properties can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the property. For example, we have the color category and every property underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your property json files like simple objects:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\n The CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 properties 'base' and 'large'.\n\n Structuring style properties in this manner gives us consistent naming and accessing of these properties. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\n You can organize and name your style properties however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the property of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\n Also, the CTI structure provides a good mechanism to target transforms for specific kinds of properties. All of the transforms provided by the framework use the CTI of a property to know if it should be applied. For instance, the 'color/hex' transform only applies to properties of the category 'color'.\n\nYou can also add a _comment_ to a style property:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment  will appear in the output files, where relevant or the output format supports comments.\n\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function(prop) {\n    return prop.attributes.category === 'time';\n  },\n  transformer: function(prop) {\n    return (parseInt(prop.original.value) / 1000).toString() + 's';\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "8d8257ec8afedabc4358c930cf9619c671c23958",
      "_id": "style-dictionary@3.0.0-rc.3",
      "_nodeVersion": "12.17.0",
      "_npmVersion": "6.14.10",
      "dist": {
        "integrity": "sha512-dU9RDYNYZJ0b0pshngMmySb526LaMTojk1kLp3mG/KfP1tU2VBNn0A4KSyK7c0uMqNWNW6yrphjLst6fizWwlQ==",
        "shasum": "e7ee01e2166fba0fd2dfa5917df1757e47631ffe",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.0.0-rc.3.tgz",
        "fileCount": 552,
        "unpackedSize": 4884281,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgHkFYCRA9TVsSAnZWagAAc2gQAJZDj7alJoIh0+J8yhfb\nfNCQOtRUQkGUB7XFzLyX5GHNNpajsB1GEOJPBTVaeMypndYAbcpRnU8g2TdE\nK1pqIjPXvOpCass2xK0IzKD49fJynjvQey1uRrcdZjpxvUZKOyh2bSBxmpUd\nuoamjUHZbRwmlOOgQ8K67uly9Pjf4cIwhPBP66qxyhY10OM+rsvG3BqzFCL2\n2bYrY7ezw9NiH+et6kpAMp9hKHpSUEHare0HsP8r7/jW2DIWef3Zc1clf+Lc\nrB983cIHS1dWUUMbkgaND4WrJBB4thFRD8sUM5fEAA29WbF06dqCM4YLnDFU\nVg/6ZcBMiHafb3MjjO+jRtusaol1OGAJ/nGlYa5vvpLX5biePNkDffGENkOf\nbr+t2ioXJjj/vzeuqcOkn338Wh62LVB4jQFzmPTQdG+x+Jwz4qIkb1Asmh6E\nChKK1LesOQhmv35AxgeKMsjglY8e3TzrLxGhk8RuR9GNL09FkODFTpqYStqC\nAzjdmPf4fzRArU8Vdpl0iJQgO/G8Ut4GJBYI0DDc5Ta100ICrAWc9+L24Nyt\n5rfarVytK5Gg8L8h6FaOcGdBohwsqccV6iyAHXAZgcrbdBml0XEsFxT9wPf/\nFVekEl79no8CHivkxkkFvkuk6h2E221mxvUTjMzn+vVJ9uEyHIcdYUSUYVtj\nxiMe\r\n=y6vr\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCICuv7iC/1eh8WXgiXsGgXZRzATKmDTHlzrAx2PF2xDu6AiEAvpkr7B+pUdKqW5sEScYwEtBxIFtrezzqlbBjiDlfzws="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.0.0-rc.3_1612595543697_0.3077633740306278"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0-rc.4": {
      "name": "style-dictionary",
      "version": "3.0.0-rc.4",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.11.3",
        "docsify-cli": "^4.4.0",
        "eslint": "^6.8.0",
        "eslint-plugin-jest": "^24.1.3",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^25.4.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^6.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^4.14.1",
        "standard-version": "^9.0.0",
        "stylus": "^0.54.8",
        "tsd": "^0.11.0",
        "yaml": "^1.10.0"
      },
      "readme": "<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/master/CONTRIBUTING.md#submitting-pull-requests)\n<br/>\n[![Build Status](https://img.shields.io/travis/amzn/style-dictionary.svg?style=flat-square)](https://travis-ci.org/amzn/style-dictionary)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n> *Style once, use everywhere.*\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these properties to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices.  At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication.  Even then, mistakes inevitably happen and the design may not be implemented accurately.  StyleDictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on Youtube\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Contents\n* [Installation](#installation)\n* [Usage](#usage)\n* [Example](#example)\n* [Quick Start](#quick-start)\n* [Style Properties](#style-properties)\n* [Extending](#extending)\n* [Contributing](#contributing)\n* [License](#license)\n\n\n## Installation\n*Note that you must have node (and npm) installed.*\n\nIf you want to use the CLI, you can install it globally via npm:\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n### CLI\n```bash\n$ style-dictionary build\n```\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag | Short Flag | Description |\n| --- | --- | --- |\n| --config \\[path\\] | -c | Set the config file to use. Must be a .json file |\n| --platform \\[platform\\] | -p | Only build a specific platform defined in the config file. |\n| --help | -h | Display help content |\n| --version | -v | Display the version |\n\n### Node\nYou can also use the style dictionary build system in node if you want to [extend](#extend) the functionality or use it in another build system like Grunt or Gulp.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['properties/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [{\n        destination: 'variables.scss',\n        format: 'scss/variables'\n      }]\n    }\n    // ...\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of style properties, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these style properties in JSON files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n```\n├── config.json\n├── properties/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\nThis tells the style dictionary build system how and what to build. The default file path is config.json in the root of the project, but you can name it whatever you want, you can pass in the `--config` flag.\n```json\n{\n  \"source\": [\"properties/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [{\n        \"destination\": \"scss/_variables.scss\",\n        \"format\": \"scss/variables\"\n      }]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [{\n        \"destination\": \"font_dimens.xml\",\n        \"format\": \"android/fontDimens\"\n      }]\n    }\n  }\n}\n```\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| source | Array | Paths to the property json files. Can have globs. |\n| platforms | Object | Sets of platform files to be built. |\n| platforms | Array | Paths to the property json files. Can have globs. |\n| platform.transformGroup | String (optional) | Apply a group of transforms to the properties, must either define this or `transforms`. |\n| platform.transforms | Array (optional) | Transforms to apply sequentially to all properties. Can be a built-in one or you can create your own. |\n| platform.buildPath | String (optional) | Base path to build the files, must end with a trailing slash. |\n| platform.files | Array (optional) | Files to be generated for this platform. |\n| platform.file.destination | String (optional) | Location to build the file, will be appended to the buildPath. |\n| platform.file.format | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats) |\n| platform.file.options | Object (optional) | A set of extra options associated with the file. |\n| platform.file.options.showFileHeader | Boolean | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\". |\n\n### Properties\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\" : { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\" : { \"value\": \"24px\" },\n      \"base\"  : { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size properties. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n\n## Quick Start\nThe style dictionary framework comes with some example code to get you stared. Install the node module globally, create a directory and `cd` into it.\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\nNow run:\n```\n$ style-dictionary init basic\n```\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n\n## Style Properties\n\nA style property is an attribute to describe something visually. It is atomic (it cannot be broken down further). Style properties have a name, a value, and optional attributes or metadata. The name of a property can be anything, but we have a proposed naming structure that works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of style properties makes the most sense semantically. Style properties can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the property. For example, we have the color category and every property underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your property json files like simple objects:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\n The CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 properties 'base' and 'large'.\n\n Structuring style properties in this manner gives us consistent naming and accessing of these properties. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\n You can organize and name your style properties however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the property of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\n Also, the CTI structure provides a good mechanism to target transforms for specific kinds of properties. All of the transforms provided by the framework use the CTI of a property to know if it should be applied. For instance, the 'color/hex' transform only applies to properties of the category 'color'.\n\nYou can also add a _comment_ to a style property:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment  will appear in the output files, where relevant or the output format supports comments.\n\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function(prop) {\n    return prop.attributes.category === 'time';\n  },\n  transformer: function(prop) {\n    return (parseInt(prop.original.value) / 1000).toString() + 's';\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "631c97f8ecde2331e6b2aeccc67d7eafc3b6d542",
      "_id": "style-dictionary@3.0.0-rc.4",
      "_nodeVersion": "12.17.0",
      "_npmVersion": "6.14.10",
      "dist": {
        "integrity": "sha512-QBZEQ2+j8vzfIQo0DzCgQv1qXwq9LPMfHtJozjfcw77XU3AKeblY42ro3HkDpCtXlWr2u5Rg8umm/Kjen6KJZA==",
        "shasum": "b597bb1e0d7ad46f3d575af91d6a86c17c88c863",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.0.0-rc.4.tgz",
        "fileCount": 552,
        "unpackedSize": 4885159,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgLCdXCRA9TVsSAnZWagAA84kP/2SMZgwzwpY0C1BmuR25\nzC5BzSCuixlfVgJwkYtIiMF/tX59XWFdyD33VaVS67vclLl+utLMdwEsPAkF\nChGhJ6POjtsG0WFfDIiACvBTpm8j2TUUN+ZmgDX3SjAoQ+vVIA/8LOncD5TN\n57hNfXlggOtLhrVwxwcOeOFFWQ/Ucz4Wvig9Lq5WdfvzjXZDHSM7c9xJ9Tpc\noZ0CdkQFCa8bFeXPKUSuwwWxihA151tGehKae3IucDjXBRwslvalePEcz/sJ\nNeL+2gPC/w/mphQCZGdpWrBxKKIZMbnMf7pnX/7yzfPXrYqWGqM3SklDHvBr\nBf7JHEaDVnQu+Pg2MiwkRW0W4FHEikZy02u9trM30nB5ZtnIEkNBefxyTX2T\nRl07uikW+F1Pu4rLaVKeiWkZsm6W8lJwE9YVHK1iPL+RzQv6y8AFEe3iV+IV\nyAnS1IDxPrRoqzPQ6L9fNGftq0CD1Hvet4+TQ8/2UIQIaWlm1sr+RKIQTGQl\n4yDeOIX7uV1MtgmvJUMchdsl0BSnqzHrNPlM+N+Cao2yN9VZykkb+KTqliSC\n1XrHOut7W5hZf+fcwHk0mpFdPSAfJgAFY5sam4reMm8SXb0BNjiRzngOdAUU\nLDd8dXottuxv3sQnXXA+uLXyDnUrH/E1s4vVWdaMhb0xZqZ7L3M1UHB88vrL\nWVSU\r\n=Iq9S\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQC2z1rpu6wr+oXlPJXE2oNfzg+6KfhByOo5xYlCTJDSbQIgYMge/QFZKtkTl3DHmCEN/cEFF3QV4wK/VuL5w+g9M1c="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.0.0-rc.4_1613506391077_0.7479257082185613"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0-rc.5": {
      "name": "style-dictionary",
      "version": "3.0.0-rc.5",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.11.3",
        "docsify-cli": "^4.4.0",
        "eslint": "^6.8.0",
        "eslint-plugin-jest": "^24.1.3",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^25.4.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^6.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^4.14.1",
        "standard-version": "^9.0.0",
        "stylus": "^0.54.8",
        "tsd": "^0.11.0",
        "yaml": "^1.10.0"
      },
      "readme": "<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/master/CONTRIBUTING.md#submitting-pull-requests)\n<br/>\n[![Build Status](https://img.shields.io/travis/amzn/style-dictionary.svg?style=flat-square)](https://travis-ci.org/amzn/style-dictionary)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n> *Style once, use everywhere.*\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these properties to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices.  At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication.  Even then, mistakes inevitably happen and the design may not be implemented accurately.  StyleDictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on Youtube\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Contents\n* [Installation](#installation)\n* [Usage](#usage)\n* [Example](#example)\n* [Quick Start](#quick-start)\n* [Style Properties](#style-properties)\n* [Extending](#extending)\n* [Contributing](#contributing)\n* [License](#license)\n\n\n## Installation\n*Note that you must have node (and npm) installed.*\n\nIf you want to use the CLI, you can install it globally via npm:\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n### CLI\n```bash\n$ style-dictionary build\n```\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag | Short Flag | Description |\n| --- | --- | --- |\n| --config \\[path\\] | -c | Set the config file to use. Must be a .json file |\n| --platform \\[platform\\] | -p | Only build a specific platform defined in the config file. |\n| --help | -h | Display help content |\n| --version | -v | Display the version |\n\n### Node\nYou can also use the style dictionary build system in node if you want to [extend](#extend) the functionality or use it in another build system like Grunt or Gulp.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['properties/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [{\n        destination: 'variables.scss',\n        format: 'scss/variables'\n      }]\n    }\n    // ...\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of style properties, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these style properties in JSON files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n```\n├── config.json\n├── properties/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\nThis tells the style dictionary build system how and what to build. The default file path is config.json in the root of the project, but you can name it whatever you want, you can pass in the `--config` flag.\n```json\n{\n  \"source\": [\"properties/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [{\n        \"destination\": \"scss/_variables.scss\",\n        \"format\": \"scss/variables\"\n      }]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [{\n        \"destination\": \"font_dimens.xml\",\n        \"format\": \"android/fontDimens\"\n      }]\n    }\n  }\n}\n```\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| source | Array | Paths to the property json files. Can have globs. |\n| platforms | Object | Sets of platform files to be built. |\n| platforms | Array | Paths to the property json files. Can have globs. |\n| platform.transformGroup | String (optional) | Apply a group of transforms to the properties, must either define this or `transforms`. |\n| platform.transforms | Array (optional) | Transforms to apply sequentially to all properties. Can be a built-in one or you can create your own. |\n| platform.buildPath | String (optional) | Base path to build the files, must end with a trailing slash. |\n| platform.files | Array (optional) | Files to be generated for this platform. |\n| platform.file.destination | String (optional) | Location to build the file, will be appended to the buildPath. |\n| platform.file.format | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats) |\n| platform.file.options | Object (optional) | A set of extra options associated with the file. |\n| platform.file.options.showFileHeader | Boolean | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\". |\n\n### Properties\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\" : { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\" : { \"value\": \"24px\" },\n      \"base\"  : { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size properties. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n\n## Quick Start\nThe style dictionary framework comes with some example code to get you stared. Install the node module globally, create a directory and `cd` into it.\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\nNow run:\n```\n$ style-dictionary init basic\n```\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n\n## Style Properties\n\nA style property is an attribute to describe something visually. It is atomic (it cannot be broken down further). Style properties have a name, a value, and optional attributes or metadata. The name of a property can be anything, but we have a proposed naming structure that works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of style properties makes the most sense semantically. Style properties can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the property. For example, we have the color category and every property underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your property json files like simple objects:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\n The CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 properties 'base' and 'large'.\n\n Structuring style properties in this manner gives us consistent naming and accessing of these properties. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\n You can organize and name your style properties however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the property of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\n Also, the CTI structure provides a good mechanism to target transforms for specific kinds of properties. All of the transforms provided by the framework use the CTI of a property to know if it should be applied. For instance, the 'color/hex' transform only applies to properties of the category 'color'.\n\nYou can also add a _comment_ to a style property:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment  will appear in the output files, where relevant or the output format supports comments.\n\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function(prop) {\n    return prop.attributes.category === 'time';\n  },\n  transformer: function(prop) {\n    return (parseInt(prop.original.value) / 1000).toString() + 's';\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "9b5cfad33256048a46e87b78ed3d5b50347f0e15",
      "_id": "style-dictionary@3.0.0-rc.5",
      "_nodeVersion": "12.17.0",
      "_npmVersion": "6.14.10",
      "dist": {
        "integrity": "sha512-IECilIfO2mpnu8W0tUcibxx274i9HMpbMKyEfEqck7Vr4R9gQ1NNJHbOHCvQV7fxh9HUK1Dfo9bKtwb0j2CgTQ==",
        "shasum": "c23639e4b20121908b41d2a9f5ab3dcbc0753340",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.0.0-rc.5.tgz",
        "fileCount": 2419,
        "unpackedSize": 12873492,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgOZdXCRA9TVsSAnZWagAAoeQP/AtGVMzzbLvwLKzyWmUe\n/MKyKgporWF0YXM8q98oAFUIfuTZBi2lr+RbnVDkVjd3NNkiINVdXH8T4n9B\nUCYo1MaoUznthFWAJzHGcMEzO6OWs1AoslxWGKmcJWmqH0LdUxIuOWiAq2i3\ndqvQuLDj9s96ZGK5NNEK2uE1FCnAyL7ZvVD9xn+vnFMqhaSw1RsW0pgrJ+BX\na7iahqC27JW776S/8OACRgxRJ4DTGZa4D4CmGOGGv6wL/xuxwxkr0Ng+TUBm\nGZ+w3/ten1EvACf/PkCzxKeFZTVVAU4RlTegfALgHnzpoMuWInuZZxZmrU9Q\nYd44MN5hk9Td82M2GTeURI2Z9NweAil0Mb6iCIb58oxIBMPqoEwmNzJGp7f3\n6pYg0EcLNkh3aAeDJFZYiWYjkR3EGQ4xdRqvBVc8TVNQgylbB+d0cD0bM4yv\n6eJ7P7ELtX1CkongkKHcZv1cOjRsDhejwpZH2lorNO7/7Ij48GtA2t7MIMO8\nnF2wDy/Cbjg9z7Zn6jEVKFN4TB1VQpp16WmP/OAMnUZ+5mt53cDRv7zsFr/U\n3mVjebGdGHzqM08UTmR6Q+pR+fnnekSE+Bi8Q6THehuCLVmlsSAiwb+zFEPR\n+qHrmk4S8XxKX9azG4WflF2M/Z8GOxzNKM7bzZ8qwW6P0tegeXFaJzpq/Y4d\nVnpX\r\n=Lgo+\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIBDsUsN8sR0P6CBl0e48UmfX6GKijTZgOwUTbyCdjhdNAiBqDljenSzVXN3DAiblB3A5KUUwKyJo1iWt6yWYLgrpXw=="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.0.0-rc.5_1614387030417_0.1962754396832327"
      },
      "_hasShrinkwrap": false
    },
    "2.10.3": {
      "name": "style-dictionary",
      "version": "2.10.3",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=8.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js lib/**/*.js __tests__/**/*.js",
        "test": "npm run lint && jest --runInBand",
        "test-watch": "npm run lint && jest --runInBand --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.js test/**/*.js",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "roots": [
          "__tests__"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "resolve-cwd": "^3.0.0",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.11.3",
        "docsify-cli": "^4.4.0",
        "eslint": "^6.8.0",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^26.6.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^6.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^4.14.1",
        "standard-version": "^9.0.0"
      },
      "gitHead": "be2fe3b83e064ddcc1385f5064b3d5c4e7070d34",
      "_id": "style-dictionary@2.10.3",
      "_nodeVersion": "12.17.0",
      "_npmVersion": "6.14.10",
      "dist": {
        "integrity": "sha512-iSDb8T2tMSB5JcTQ7uquB+W3oO7kuJbb+QrSQMiQjBCOa7AGYtWzYo/O7rl3f9Hj956w41WVw9HpTpYfFWwU+g==",
        "shasum": "7c89f8020524172df6e534ab4217f6923e1daf7b",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-2.10.3.tgz",
        "fileCount": 445,
        "unpackedSize": 4457241,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgR90lCRA9TVsSAnZWagAANEwP/38D4ppapuKSIEn7wIXJ\nn1u3NxyqFFApCXZyeu67oKdhUnbfShlPcAV4Wpu9GHDCZFJ8AlVYHsq+GGwj\nbi+QwsMfz+jKbzqDVwwQKtSs3My9lWPgtJyNHA+KxvW/nxaH66HlH9zDN1Ls\njfJoKItWvERzMxbFHa9XdSFeQOMIi/vGR+QHLPicS21n2hZ5IPAiuc5qAE83\nK++euUtsoS/U7lru6uHOODzPc51pC0arIVK57OprBIFs+G2L2uk2KEGSd7Jk\nfNWKbZwGMEu0v0cXRraGDWcyJfDhpizjiMfENmq7l6+YAiDYgv52O/GPz9s7\nWRB0z+mB2NumXpNKvePQIIZoJnx+WGULQ3skkF/KRgca85/BEFQnWhDx3br8\nSkLkfaFjrihl5AG5r3QVdeqcCsLXltSOlIlDLNUScEuOn/UwFxEke4e2XHv+\n3nMa+A2F/kFMXn1ITbuVylOUhHmM0rlIyzNCIgOAL52c001+gSfrZmaZXTj1\nyS0dE44LuIxnGPmRdFKCr04AaLiHmTKDiatAaXyiocLA5q4wZdaF9dQp+EP5\nEZOHCSCMcjDTMbF+iWnMYEGSCOBofCMzi2KEICbOGogtVqA9giRz7QQQryWt\n4S6GxScLvS+qDH4JbjjF5vVUvL0LC07qolK7GEb8QxChgVe4vhLET9ZZmnEx\nWC3I\r\n=sk8r\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFYN1i1+Hau783r5Ujk59caI5XJU2VYDyK4CrndOSndyAiADvIKPYvY4PPdDDDNSOlb8oAmPwxwaEyA7qvmb9qJvHA=="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_2.10.3_1615322405149_0.9943464073819419"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0-rc.6": {
      "name": "style-dictionary",
      "version": "3.0.0-rc.6",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.11.3",
        "docsify-cli": "^4.4.0",
        "eslint": "^6.8.0",
        "eslint-plugin-jest": "^24.1.3",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^25.4.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^6.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^4.14.1",
        "standard-version": "^9.0.0",
        "stylus": "^0.54.8",
        "tsd": "^0.11.0",
        "yaml": "^1.10.0"
      },
      "readme": "<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/master/CONTRIBUTING.md#submitting-pull-requests)\n<br/>\n[![Build Status](https://img.shields.io/travis/amzn/style-dictionary.svg?style=flat-square)](https://travis-ci.org/amzn/style-dictionary)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n> *Style once, use everywhere.*\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these properties to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices.  At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication.  Even then, mistakes inevitably happen and the design may not be implemented accurately.  StyleDictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on Youtube\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Contents\n* [Installation](#installation)\n* [Usage](#usage)\n* [Example](#example)\n* [Quick Start](#quick-start)\n* [Style Properties](#style-properties)\n* [Extending](#extending)\n* [Contributing](#contributing)\n* [License](#license)\n\n\n## Installation\n*Note that you must have node (and npm) installed.*\n\nIf you want to use the CLI, you can install it globally via npm:\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n### CLI\n```bash\n$ style-dictionary build\n```\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag | Short Flag | Description |\n| --- | --- | --- |\n| --config \\[path\\] | -c | Set the config file to use. Must be a .json file |\n| --platform \\[platform\\] | -p | Only build a specific platform defined in the config file. |\n| --help | -h | Display help content |\n| --version | -v | Display the version |\n\n### Node\nYou can also use the style dictionary build system in node if you want to [extend](#extend) the functionality or use it in another build system like Grunt or Gulp.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['properties/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [{\n        destination: 'variables.scss',\n        format: 'scss/variables'\n      }]\n    }\n    // ...\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of style properties, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these style properties in JSON files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n```\n├── config.json\n├── properties/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\nThis tells the style dictionary build system how and what to build. The default file path is config.json in the root of the project, but you can name it whatever you want, you can pass in the `--config` flag.\n```json\n{\n  \"source\": [\"properties/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [{\n        \"destination\": \"scss/_variables.scss\",\n        \"format\": \"scss/variables\"\n      }]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [{\n        \"destination\": \"font_dimens.xml\",\n        \"format\": \"android/fontDimens\"\n      }]\n    }\n  }\n}\n```\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| source | Array | Paths to the property json files. Can have globs. |\n| platforms | Object | Sets of platform files to be built. |\n| platforms | Array | Paths to the property json files. Can have globs. |\n| platform.transformGroup | String (optional) | Apply a group of transforms to the properties, must either define this or `transforms`. |\n| platform.transforms | Array (optional) | Transforms to apply sequentially to all properties. Can be a built-in one or you can create your own. |\n| platform.buildPath | String (optional) | Base path to build the files, must end with a trailing slash. |\n| platform.files | Array (optional) | Files to be generated for this platform. |\n| platform.file.destination | String (optional) | Location to build the file, will be appended to the buildPath. |\n| platform.file.format | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats) |\n| platform.file.options | Object (optional) | A set of extra options associated with the file. |\n| platform.file.options.showFileHeader | Boolean | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\". |\n\n### Properties\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\" : { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\" : { \"value\": \"24px\" },\n      \"base\"  : { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size properties. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n\n## Quick Start\nThe style dictionary framework comes with some example code to get you stared. Install the node module globally, create a directory and `cd` into it.\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\nNow run:\n```\n$ style-dictionary init basic\n```\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n\n## Style Properties\n\nA style property is an attribute to describe something visually. It is atomic (it cannot be broken down further). Style properties have a name, a value, and optional attributes or metadata. The name of a property can be anything, but we have a proposed naming structure that works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of style properties makes the most sense semantically. Style properties can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the property. For example, we have the color category and every property underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your property json files like simple objects:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\n The CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 properties 'base' and 'large'.\n\n Structuring style properties in this manner gives us consistent naming and accessing of these properties. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\n You can organize and name your style properties however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the property of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\n Also, the CTI structure provides a good mechanism to target transforms for specific kinds of properties. All of the transforms provided by the framework use the CTI of a property to know if it should be applied. For instance, the 'color/hex' transform only applies to properties of the category 'color'.\n\nYou can also add a _comment_ to a style property:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment  will appear in the output files, where relevant or the output format supports comments.\n\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function(prop) {\n    return prop.attributes.category === 'time';\n  },\n  transformer: function(prop) {\n    return (parseInt(prop.original.value) / 1000).toString() + 's';\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "33fe65096b83c6444e74e09c6827a8e929a92305",
      "_id": "style-dictionary@3.0.0-rc.6",
      "_nodeVersion": "12.17.0",
      "_npmVersion": "6.14.10",
      "dist": {
        "integrity": "sha512-EI0B3n9NnL/dmMWSSg18/CEqCamG9/fxYetS0kvBDfuSkXxDuBEwLfta1+GvSKF8b+/01WweITrazaUS991VIQ==",
        "shasum": "a0eb60ae8944180aa0514a2167ff1b82a4e99b8f",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.0.0-rc.6.tgz",
        "fileCount": 553,
        "unpackedSize": 4889939,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgR94XCRA9TVsSAnZWagAAo9oP/2E5sMvdbLSEtkczUxTI\nlyUvYkJMJIxFbpXdrybt3j2rjPIIMwTvovrhg3dfnJrQHShurH1j3p2n21/w\nh3u4PRIuvgtLyLNaWCmK2hi8mZgN5uYhHAF4tEqsw2EBOFZlwMq7EXMRuIqv\nlZZCDviFNsGEyAfoE0zgvg7V0ZXaBcuVuHl1BHFeuvQMQmSElGp0Py9sv4gv\nsn9OEhf3as6paOlondAXtLMFSZouLvavdIivKnISUklMxNQNvK2a8S4JLHUj\nhHwEl8rEU7DsoGd/jRGuaP8yx1QzrPGH5IcmQ2VQZU5PlpuOo4nj0/Zvucst\nsnXcaiioKGS2UsoQSDtGwt3pMr3Fb0+TrtQn+wq+6OpgR/ny4wA4mauol5vb\nIUc4xXcsAcAKrLkhA+6/eVTbOMEzIndxhxcAUEdkXFXS6WwizSPc6ruXRlly\nDuWuZOnvJoCDMN/zmpCWqH2JLGT+TQC0wZ+1afQOp3r7K7aS6FS3StHKyVcE\nRXM6LTIZNBUzni1ofVmihVJDj4ywXic2aH6NlFafNPND9Wi4NzOWSyJ6lzjs\nPPWzT8HvH4qifhqxAYk2NgfOPy6A/CXXSrOHe0AGDMvthp8zWSj86mOOMuR8\nzFs2e/JMUYQyLxYRGavAsWMnodoXg/HxUgPE/ehnO5WsgIrpPsdHR3bysbUY\n/IIR\r\n=csNj\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGCKhwwILzzLXe5jPqrEPUXU2Avsgb+bYmo2MosH14QtAiAmqV4C3D+OqLNrq6bsi4Cr14iibpFKqoaOJV3FPy2/Dg=="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.0.0-rc.6_1615322646558_0.9292537015047473"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0-rc.7": {
      "name": "style-dictionary",
      "version": "3.0.0-rc.7",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.11.3",
        "docsify-cli": "^4.4.0",
        "eslint": "^6.8.0",
        "eslint-plugin-jest": "^24.1.3",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^25.4.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^6.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^4.14.1",
        "standard-version": "^9.0.0",
        "stylus": "^0.54.8",
        "tsd": "^0.11.0",
        "yaml": "^1.10.0"
      },
      "readme": "<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/master/CONTRIBUTING.md#submitting-pull-requests)\n<br/>\n[![Build Status](https://img.shields.io/travis/amzn/style-dictionary.svg?style=flat-square)](https://travis-ci.org/amzn/style-dictionary)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n> *Style once, use everywhere.*\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these properties to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices.  At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication.  Even then, mistakes inevitably happen and the design may not be implemented accurately.  StyleDictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on Youtube\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Contents\n* [Installation](#installation)\n* [Usage](#usage)\n* [Example](#example)\n* [Quick Start](#quick-start)\n* [Style Properties](#style-properties)\n* [Extending](#extending)\n* [Contributing](#contributing)\n* [License](#license)\n\n\n## Installation\n*Note that you must have node (and npm) installed.*\n\nIf you want to use the CLI, you can install it globally via npm:\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n### CLI\n```bash\n$ style-dictionary build\n```\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag | Short Flag | Description |\n| --- | --- | --- |\n| --config \\[path\\] | -c | Set the config file to use. Must be a .json file |\n| --platform \\[platform\\] | -p | Only build a specific platform defined in the config file. |\n| --help | -h | Display help content |\n| --version | -v | Display the version |\n\n### Node\nYou can also use the style dictionary build system in node if you want to [extend](#extend) the functionality or use it in another build system like Grunt or Gulp.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['properties/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [{\n        destination: 'variables.scss',\n        format: 'scss/variables'\n      }]\n    }\n    // ...\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of style properties, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these style properties in JSON files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n```\n├── config.json\n├── properties/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\nThis tells the style dictionary build system how and what to build. The default file path is config.json in the root of the project, but you can name it whatever you want, you can pass in the `--config` flag.\n```json\n{\n  \"source\": [\"properties/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [{\n        \"destination\": \"scss/_variables.scss\",\n        \"format\": \"scss/variables\"\n      }]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [{\n        \"destination\": \"font_dimens.xml\",\n        \"format\": \"android/fontDimens\"\n      }]\n    }\n  }\n}\n```\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| source | Array | Paths to the property json files. Can have globs. |\n| platforms | Object | Sets of platform files to be built. |\n| platforms | Array | Paths to the property json files. Can have globs. |\n| platform.transformGroup | String (optional) | Apply a group of transforms to the properties, must either define this or `transforms`. |\n| platform.transforms | Array (optional) | Transforms to apply sequentially to all properties. Can be a built-in one or you can create your own. |\n| platform.buildPath | String (optional) | Base path to build the files, must end with a trailing slash. |\n| platform.files | Array (optional) | Files to be generated for this platform. |\n| platform.file.destination | String (optional) | Location to build the file, will be appended to the buildPath. |\n| platform.file.format | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats) |\n| platform.file.options | Object (optional) | A set of extra options associated with the file. |\n| platform.file.options.showFileHeader | Boolean | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\". |\n\n### Properties\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\" : { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\" : { \"value\": \"24px\" },\n      \"base\"  : { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size properties. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n\n## Quick Start\nThe style dictionary framework comes with some example code to get you stared. Install the node module globally, create a directory and `cd` into it.\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\nNow run:\n```\n$ style-dictionary init basic\n```\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n\n## Style Properties\n\nA style property is an attribute to describe something visually. It is atomic (it cannot be broken down further). Style properties have a name, a value, and optional attributes or metadata. The name of a property can be anything, but we have a proposed naming structure that works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of style properties makes the most sense semantically. Style properties can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the property. For example, we have the color category and every property underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your property json files like simple objects:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\n The CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 properties 'base' and 'large'.\n\n Structuring style properties in this manner gives us consistent naming and accessing of these properties. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\n You can organize and name your style properties however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the property of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\n Also, the CTI structure provides a good mechanism to target transforms for specific kinds of properties. All of the transforms provided by the framework use the CTI of a property to know if it should be applied. For instance, the 'color/hex' transform only applies to properties of the category 'color'.\n\nYou can also add a _comment_ to a style property:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment  will appear in the output files, where relevant or the output format supports comments.\n\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function(prop) {\n    return prop.attributes.category === 'time';\n  },\n  transformer: function(prop) {\n    return (parseInt(prop.original.value) / 1000).toString() + 's';\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "851c9a80f93218d1d3b7c05ebe37a6ff63754c63",
      "_id": "style-dictionary@3.0.0-rc.7",
      "_nodeVersion": "12.17.0",
      "_npmVersion": "6.14.10",
      "dist": {
        "integrity": "sha512-61SmrUPYi9R1vT9GXw1DS46cneC7iQEjHZpXE1pjhoffpBp23aJdqvG4HyBBE5DF8+BFzRZbLFRJa6C2iUpSuQ==",
        "shasum": "73fdd8cf2337db4eefe58187735eda5cb616bdaa",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.0.0-rc.7.tgz",
        "fileCount": 559,
        "unpackedSize": 4912864,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgW8n5CRA9TVsSAnZWagAAsfAP/i1NWRB8R5R+xB2iswaP\nOKOs+zn3EScWFB3XlgkiZpDosD89pAJG2eAWyHYZtWDtQa+Q7dctDHFgh9yy\n7O9NnjPQh4Ac839jPSn7FzE1cjhnBCkmR2dP8QtrPbYA/D/XK6C5rWc0AZzu\nj5oYyaIxy/EOYuvz0JZKcoaTcuWYb67qhcktYlPY9ibEHoXcluAzBBJ+9q8E\n1n1qjf1HDeoN5cM+EhjKda+86iSdndr85lGLHEl+tYYgNMjdevhBkaPathoJ\nkILpJ2xQ9ejs6bFFIPKsrBETA1FB67ZTsfktkxM9MFiXS+2CJtPoxfcQwzU0\nvfU/j0ExuJhLACamQY9BJZxr1aPWtDtqobFrmuxGJMAbBzmqjWi3F7/fa/H0\nFlsIWMtrSabqujloSN5oS5JmYGQHru9ZNbGxzp6+7ePju71IMKnxjd2n6v9K\nbtOTu4C3dBSKvAFGc0cET+dfsdIHOM+fwbQzzwkPfBHpXSW0lf1W3ZE++iXw\nbCpDyleYzAhHVOELHnh9IEnSm8OTrfSK/tjU6Y5NdjY2nNw+Lpucb8r9p2F8\nlRytkuhJbqboXayN+Ig10pTnm5JIiQnyDhb5L/vbJ8byIsfGHlJmPieYqOeS\nnjvI+Q0vDqlMLAWAe5zrlVNhuyzfs7xwifD1rwN/auT7BV3kXS56zVPFEHJr\nw4mT\r\n=4MB7\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHj0W/HXqzLx+GWEMnIvEi02uvp9KwsC/HOkTVlFnVaIAiEAwDbvElHMCtSjInvNwxjr9vgDe35MrhkvxI0cp6mkD0s="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.0.0-rc.7_1616628217157_0.6419029539537617"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0-rc.8": {
      "name": "style-dictionary",
      "version": "3.0.0-rc.8",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.11.3",
        "docsify-cli": "^4.4.0",
        "eslint": "^6.8.0",
        "eslint-plugin-jest": "^24.1.3",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^25.4.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^6.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^4.14.1",
        "standard-version": "^9.0.0",
        "stylus": "^0.54.8",
        "tsd": "^0.11.0",
        "yaml": "^1.10.0"
      },
      "readme": "<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/master/CONTRIBUTING.md#submitting-pull-requests)\n<br/>\n[![Build Status](https://img.shields.io/travis/amzn/style-dictionary.svg?style=flat-square)](https://travis-ci.org/amzn/style-dictionary)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n> *Style once, use everywhere.*\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these properties to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices.  At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication.  Even then, mistakes inevitably happen and the design may not be implemented accurately.  StyleDictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on Youtube\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Contents\n* [Installation](#installation)\n* [Usage](#usage)\n* [Example](#example)\n* [Quick Start](#quick-start)\n* [Style Properties](#style-properties)\n* [Extending](#extending)\n* [Contributing](#contributing)\n* [License](#license)\n\n\n## Installation\n*Note that you must have node (and npm) installed.*\n\nIf you want to use the CLI, you can install it globally via npm:\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n### CLI\n```bash\n$ style-dictionary build\n```\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag | Short Flag | Description |\n| --- | --- | --- |\n| --config \\[path\\] | -c | Set the config file to use. Must be a .json file |\n| --platform \\[platform\\] | -p | Only build a specific platform defined in the config file. |\n| --help | -h | Display help content |\n| --version | -v | Display the version |\n\n### Node\nYou can also use the style dictionary build system in node if you want to [extend](#extend) the functionality or use it in another build system like Grunt or Gulp.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['properties/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [{\n        destination: 'variables.scss',\n        format: 'scss/variables'\n      }]\n    }\n    // ...\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of style properties, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these style properties in JSON files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n```\n├── config.json\n├── properties/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\nThis tells the style dictionary build system how and what to build. The default file path is config.json in the root of the project, but you can name it whatever you want, you can pass in the `--config` flag.\n```json\n{\n  \"source\": [\"properties/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [{\n        \"destination\": \"scss/_variables.scss\",\n        \"format\": \"scss/variables\"\n      }]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [{\n        \"destination\": \"font_dimens.xml\",\n        \"format\": \"android/fontDimens\"\n      }]\n    }\n  }\n}\n```\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| source | Array | Paths to the property json files. Can have globs. |\n| platforms | Object | Sets of platform files to be built. |\n| platforms | Array | Paths to the property json files. Can have globs. |\n| platform.transformGroup | String (optional) | Apply a group of transforms to the properties, must either define this or `transforms`. |\n| platform.transforms | Array (optional) | Transforms to apply sequentially to all properties. Can be a built-in one or you can create your own. |\n| platform.buildPath | String (optional) | Base path to build the files, must end with a trailing slash. |\n| platform.files | Array (optional) | Files to be generated for this platform. |\n| platform.file.destination | String (optional) | Location to build the file, will be appended to the buildPath. |\n| platform.file.format | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats) |\n| platform.file.options | Object (optional) | A set of extra options associated with the file. |\n| platform.file.options.showFileHeader | Boolean | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\". |\n\n### Properties\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\" : { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\" : { \"value\": \"24px\" },\n      \"base\"  : { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size properties. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n\n## Quick Start\nThe style dictionary framework comes with some example code to get you stared. Install the node module globally, create a directory and `cd` into it.\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\nNow run:\n```\n$ style-dictionary init basic\n```\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n\n## Style Properties\n\nA style property is an attribute to describe something visually. It is atomic (it cannot be broken down further). Style properties have a name, a value, and optional attributes or metadata. The name of a property can be anything, but we have a proposed naming structure that works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of style properties makes the most sense semantically. Style properties can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the property. For example, we have the color category and every property underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your property json files like simple objects:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\n The CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 properties 'base' and 'large'.\n\n Structuring style properties in this manner gives us consistent naming and accessing of these properties. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\n You can organize and name your style properties however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the property of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\n Also, the CTI structure provides a good mechanism to target transforms for specific kinds of properties. All of the transforms provided by the framework use the CTI of a property to know if it should be applied. For instance, the 'color/hex' transform only applies to properties of the category 'color'.\n\nYou can also add a _comment_ to a style property:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment  will appear in the output files, where relevant or the output format supports comments.\n\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function(prop) {\n    return prop.attributes.category === 'time';\n  },\n  transformer: function(prop) {\n    return (parseInt(prop.original.value) / 1000).toString() + 's';\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "cd0958956d7f114ca9fd0e0ed5b2b948ad756885",
      "_id": "style-dictionary@3.0.0-rc.8",
      "_nodeVersion": "12.17.0",
      "_npmVersion": "7.7.4",
      "dist": {
        "integrity": "sha512-UpdP1VddbyDHOZk6W6xtzLoRlVClfs6blkHQ81auRrrBaHUgKMjI4JArA5Sq6Ts7GIpgteqr8bGs4+q8pbBH3Q==",
        "shasum": "82b50949eae60702700cb960ae1ca3fc9857055e",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.0.0-rc.8.tgz",
        "fileCount": 4079,
        "unpackedSize": 14851719,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJga6CtCRA9TVsSAnZWagAAsdsQAJYsTBzfvMTZudCup78O\nZ51umRF3z9Tq65XGEeaQLhHjzNz3bUcGNx/1PwCnjtQOfl0vnZkGka0iXKr9\ne0rnMAHTkPTeY77UglLX5ikmf+Sm/xaq7/Kd8OYTQThpMd87CxhEjcqSzrQ0\n0F5S9U0KNn5FDDJjoTQU4ywCtMeEy29PNEWJL6TEYKIUX//e+6fnexmDlx9J\nGb/MfCaX/cqrZixAuoTG0wg7Fya22f0+PHZiBClp18IcFIN4+HZqt0N9fBa5\njBjhZaTcH+SgN3jWv1UdWyqL0pfxWkzAcZ9iwdIeBymdiv0N/GWasf8SBKMi\nww89wOv6hg/lhLj7n15IJg9m6AECCRORVJoZWzmaBQtg/jb2fgkqyZ4nzn/1\nsPozj3bEsc36GXv1BNwwsQtrAPtZru9EOlKvTgXmZX/TXZTjI8vYZx/syLS+\nSehLdPi8lZNJ/S/4hq0aHNW+I7vSNPH/+UJ0RqgFiqlOoygXklXSRmvPWRtz\nvUSIfqf9qx3DNbMKbtuGDnrdF2Vl7bNvXxE5ZE5mwDHvkspALWAtMJgEojFJ\no2U01q7K081bUg3Z6uN2xlEYq7/ilSyYDRFytf1ZrNcBQw3D1dDRCwigcNmK\nAtYsaJw8FcS3EYwBqUmlbJ2vwN+QmLhlQHbfd/2VVP9EgY9BB9GGRnjuo4/B\nPgh9\r\n=zmLV\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCm1MFf7eljxtiaxxkFqQ13/eYXmfrCQ7sANWd/xX+F6gIhAMUiAYxrzyzwDCurRPcHQHlOFAhXXKwdbz9ZIPLtM4Bo"
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.0.0-rc.8_1617666221018_0.31134030931479084"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0-rc.9": {
      "name": "style-dictionary",
      "version": "3.0.0-rc.9",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.11.3",
        "docsify-cli": "^4.4.0",
        "eslint": "^6.8.0",
        "eslint-plugin-jest": "^24.1.3",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^25.4.0",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^6.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^4.14.1",
        "standard-version": "^9.0.0",
        "stylus": "^0.54.8",
        "tsd": "^0.11.0",
        "yaml": "^1.10.0"
      },
      "readme": "<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/master/CONTRIBUTING.md#submitting-pull-requests)\n<br/>\n[![Build Status](https://img.shields.io/travis/amzn/style-dictionary.svg?style=flat-square)](https://travis-ci.org/amzn/style-dictionary)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n> *Style once, use everywhere.*\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these properties to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices.  At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication.  Even then, mistakes inevitably happen and the design may not be implemented accurately.  StyleDictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on Youtube\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Contents\n* [Installation](#installation)\n* [Usage](#usage)\n* [Example](#example)\n* [Quick Start](#quick-start)\n* [Style Properties](#style-properties)\n* [Extending](#extending)\n* [Contributing](#contributing)\n* [License](#license)\n\n\n## Installation\n*Note that you must have node (and npm) installed.*\n\nIf you want to use the CLI, you can install it globally via npm:\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n### CLI\n```bash\n$ style-dictionary build\n```\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag | Short Flag | Description |\n| --- | --- | --- |\n| --config \\[path\\] | -c | Set the config file to use. Must be a .json file |\n| --platform \\[platform\\] | -p | Only build a specific platform defined in the config file. |\n| --help | -h | Display help content |\n| --version | -v | Display the version |\n\n### Node\nYou can also use the style dictionary build system in node if you want to [extend](#extend) the functionality or use it in another build system like Grunt or Gulp.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['properties/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [{\n        destination: 'variables.scss',\n        format: 'scss/variables'\n      }]\n    }\n    // ...\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of style properties, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these style properties in JSON files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n```\n├── config.json\n├── properties/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\nThis tells the style dictionary build system how and what to build. The default file path is config.json in the root of the project, but you can name it whatever you want, you can pass in the `--config` flag.\n```json\n{\n  \"source\": [\"properties/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [{\n        \"destination\": \"scss/_variables.scss\",\n        \"format\": \"scss/variables\"\n      }]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [{\n        \"destination\": \"font_dimens.xml\",\n        \"format\": \"android/fontDimens\"\n      }]\n    }\n  }\n}\n```\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| source | Array | Paths to the property json files. Can have globs. |\n| platforms | Object | Sets of platform files to be built. |\n| platforms | Array | Paths to the property json files. Can have globs. |\n| platform.transformGroup | String (optional) | Apply a group of transforms to the properties, must either define this or `transforms`. |\n| platform.transforms | Array (optional) | Transforms to apply sequentially to all properties. Can be a built-in one or you can create your own. |\n| platform.buildPath | String (optional) | Base path to build the files, must end with a trailing slash. |\n| platform.files | Array (optional) | Files to be generated for this platform. |\n| platform.file.destination | String (optional) | Location to build the file, will be appended to the buildPath. |\n| platform.file.format | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats) |\n| platform.file.options | Object (optional) | A set of extra options associated with the file. |\n| platform.file.options.showFileHeader | Boolean | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\". |\n\n### Properties\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\" : { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\" : { \"value\": \"24px\" },\n      \"base\"  : { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size properties. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n\n## Quick Start\nThe style dictionary framework comes with some example code to get you stared. Install the node module globally, create a directory and `cd` into it.\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\nNow run:\n```\n$ style-dictionary init basic\n```\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n\n## Style Properties\n\nA style property is an attribute to describe something visually. It is atomic (it cannot be broken down further). Style properties have a name, a value, and optional attributes or metadata. The name of a property can be anything, but we have a proposed naming structure that works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of style properties makes the most sense semantically. Style properties can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the property. For example, we have the color category and every property underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your property json files like simple objects:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\n The CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 properties 'base' and 'large'.\n\n Structuring style properties in this manner gives us consistent naming and accessing of these properties. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\n You can organize and name your style properties however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the property of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\n Also, the CTI structure provides a good mechanism to target transforms for specific kinds of properties. All of the transforms provided by the framework use the CTI of a property to know if it should be applied. For instance, the 'color/hex' transform only applies to properties of the category 'color'.\n\nYou can also add a _comment_ to a style property:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment  will appear in the output files, where relevant or the output format supports comments.\n\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function(prop) {\n    return prop.attributes.category === 'time';\n  },\n  transformer: function(prop) {\n    return (parseInt(prop.original.value) / 1000).toString() + 's';\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "35de14c07a3a82605bad8a77f18b653c61412f4e",
      "_id": "style-dictionary@3.0.0-rc.9",
      "_nodeVersion": "14.16.1",
      "_npmVersion": "7.11.2",
      "dist": {
        "integrity": "sha512-DATZSs8IP89flgX1GpPmwPzZVYTGRceGbrV6tNAGunX0O9KHiB087hadCh+Ai5krqlA4sagBJJcTCFXCFSP9BA==",
        "shasum": "c2586c58dd33199e6214b004c659710db00e2924",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.0.0-rc.9.tgz",
        "fileCount": 578,
        "unpackedSize": 4073183,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgkMdfCRA9TVsSAnZWagAAFKEQAIUx2fOCbcDCkrIN0ozk\noQJCPJbtWesdqASv+zG4EAUCmbDFgtDnvS+IEkr84W/xGy1fOo9CUic7r+FA\nT51vLjITTuJzCycxCoff9WKW25Ib51bjyqqJpZdvHTlZmU/mmFQXkEvPYOQ8\nW+F9CeQTyiDyBYEYAbvPgZ82uJ6v/Dx6fasAjm24AkmMGpkUbRa0yqnsfLKG\nXAlanTBUby7F/xfTAmhNbSQ2QPb3IoW7CXUROCS6AwletR3qpsdnBKm8jWtK\nvOQjnprhBF9IuqbpskPjs1bgtAilQ/mQAuxWrs4khwDEmtPhKYVXW0CpXyPr\nejZ7Vxi4hLo9CMudzyx1GAU7WjifViX+eleje1TZT6Iz9II0wSy8B2P7gWd5\n1/zzSnZ+vweZaH/Z4XIJVOyhITIu5VzyYZ9l6hULqvneJK5l4Ro1TLJQSsRt\nVD4x/OCL3UaCOHg/XtHrrm/XFQS7FjHQw7yLlbHsOqN4kbYjtO/2HhI+YL0b\n4Gfzu9kGKnk1BeCBb5o7mzvwwMXgZ62HQ7VF49mW2+HtS4FcMCdX9IJvtecQ\nuB08HVZTPX3JeYRu3xYaSt+2qYocl68FjqQzp6h0vmHNIFUrGEuq5hTcf/4v\nArQYAS9CX5i0Ug72H+T/+T00xvqeanWpSxVWem1CG/SbomKLLkK7HkebeR8z\nhQLu\r\n=zmVN\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDEHUcIgOp+1eM9R5/ecl8seMIoNWW+HBFMUxk3VgcGtQIgF0Vvq6ngYVS5OtH50odx4wzcwpK3fsJru+fjIUUJefc="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.0.0-rc.9_1620100958893_0.4243536044753613"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0-rc.10": {
      "name": "style-dictionary",
      "version": "3.0.0-rc.10",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.12.1",
        "docsify-cli": "^4.4.3",
        "eslint": "^6.8.0",
        "eslint-plugin-jest": "^24.1.3",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^26.6.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^4.14.1",
        "standard-version": "^9.0.0",
        "stylus": "^0.54.8",
        "tsd": "^0.15.1",
        "yaml": "^1.10.0"
      },
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n> *Style once, use everywhere.*\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on Youtube\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Contents\n* [Installation](#installation)\n* [Usage](#usage)\n* [Example](#example)\n* [Quick Start](#quick-start)\n* [Design Tokens](#design-tokens)\n* [Extending](#extending)\n* [Contributing](#contributing)\n* [License](#license)\n\n\n## Installation\n*Note that you must have node (and npm) installed.*\n\nIf you want to use the CLI, you can install it globally via npm:\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n### CLI\n```bash\n$ style-dictionary build\n```\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag | Short Flag | Description |\n| --- | --- | --- |\n| --config \\[path\\] | -c | Set the config file to use. Must be a .json file |\n| --platform \\[platform\\] | -p | Only build a specific platform defined in the config file. |\n| --help | -h | Display help content |\n| --version | -v | Display the version |\n\n### Node\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [{\n        destination: 'variables.scss',\n        format: 'scss/variables'\n      }]\n    }\n    // ...\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [{\n        \"destination\": \"scss/_variables.scss\",\n        \"format\": \"scss/variables\"\n      }]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [{\n        \"destination\": \"font_dimens.xml\",\n        \"format\": \"android/fontDimens\"\n      }]\n    }\n  }\n}\n```\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| source | Array | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want. |\n| include | Array | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms | Object | Sets of platform files to be built. |\n| platform.transformGroup | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`. |\n| platform.transforms | Array (optional) | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own. |\n| platform.buildPath | String (optional) | Base path to build the files, must end with a trailing slash. |\n| platform.files | Array (optional) | Files to be generated for this platform. |\n| platform.file.destination | String (optional) | Location to build the file, will be appended to the buildPath. |\n| platform.file.format | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats) |\n| platform.file.options | Object (optional) | A set of extra options associated with the file. |\n| platform.file.options.showFileHeader | Boolean | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\". |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\" : { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\" : { \"value\": \"24px\" },\n      \"base\"  : { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you stared. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment  will appear in the output files, where relevant or the output format supports comments.\n\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function(prop) {\n    return prop.attributes.category === 'time';\n  },\n  transformer: function(prop) {\n    return (parseInt(prop.original.value) / 1000).toString() + 's';\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "c349b180c46f85d016de177adf658d2a81dbc267",
      "_id": "style-dictionary@3.0.0-rc.10",
      "_nodeVersion": "14.16.1",
      "_npmVersion": "7.13.0",
      "dist": {
        "integrity": "sha512-1P/Fua3hH5RINDipvPxp9ofZKBl4p7VPDud3OS3+HBjHYBNXPUYk6mDdIqMaFrQzpzulYarsv2FfNr7rK+32jA==",
        "shasum": "cfe6d1a2879bed4449f9c0566a1b687953ca70c8",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.0.0-rc.10.tgz",
        "fileCount": 599,
        "unpackedSize": 4094890,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgq9sUCRA9TVsSAnZWagAA/BUQAJgIPFoTVM7Bh1RD9YMC\nHCqbyYpt79gs1iK4gx4HU7ttYQuqmD96ofkcFv0tAbCVBSP6XlYerse8iH/i\n87Ln5cx/pNG/oiCHr/9dYIZoIhOAQJeotxu4K0ejRjeFQffNk22LmpPugQAD\nsL0VQPybVuor901+smI4qXtrkibvcw4e04ddC6pxQJpaOLmrzdaMdfls6eyT\neETOLg4AvklHuao0T7JL/fMEq9ajVceyxAqZDI19gtcXDZFJzProvjDoW8pa\n6zl3vyVpttlDHyPS807vG0af2zDvbn+iSU5O1VZhmzb/+1YRk6hKWOXFtpil\nxplL4DqDVstvCZRLryAXJDJ0M6eYw0NZ5nsB0gA4nnAXTaylf5qyO0NG8GZd\n1B9oqB1E6JGjrmws9NwHCGDR2nhE7xCkKt4oz5bZf4vIEng1e2QIfelDj+aT\nXzd5z/F0uvc6Dbv157RoVdnBOk8huXiwnu9ugVW9rmtgqNAtn8HoCre9cmsL\n1dp9TeLG83TCLut6dLdv1wGcC92gWA8Ov5Ed9zX1nB+WGfb4esz/lvp2+K3g\nYoQjjaVkcvOwFpjsjNnzt4JxdcLtx3EktrpL8915xqjhu2slJU8clpycyv/+\nLOZy2gguLE37WFaUY2MJmrrExq/ypooIQ4VRSdmvLbK/DuV6MMuing7EyNYV\npboF\r\n=AAWw\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDwQcPeQAC4Hi3TMEaOodTC0CdFycrdfYMycMRkOXqApgIhAI0/ZQh7vtfkqs1CADAKW9dCUI7LxdGpGFU6ye4Bl+bx"
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.0.0-rc.10_1621875474266_0.4785630819550615"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0": {
      "name": "style-dictionary",
      "version": "3.0.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.12.1",
        "docsify-cli": "^4.4.3",
        "eslint": "^6.8.0",
        "eslint-plugin-jest": "^24.1.3",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^26.6.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^4.14.1",
        "standard-version": "^9.0.0",
        "stylus": "^0.54.8",
        "tsd": "^0.15.1",
        "yaml": "^1.10.0"
      },
      "gitHead": "bd498aaa3928a7d398da192d2827a03d8a4bc4fa",
      "_id": "style-dictionary@3.0.0",
      "_nodeVersion": "14.16.1",
      "_npmVersion": "7.13.0",
      "dist": {
        "integrity": "sha512-L9VZi8oUaKEOavVull3BmX9KeotiHbSerV1JNSuIb9sz9PLwiSdFUNcR2vELm8Si2Y5ayIyE8mudhmVCeAkJyg==",
        "shasum": "cc931d507ae629e5bc006759b552780393b92e02",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.0.0.tgz",
        "fileCount": 599,
        "unpackedSize": 4094760,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgrVB4CRA9TVsSAnZWagAA5SoP/0ItWYLThYlFVX2QFdPU\nReRM2iXgYVdZudNqkmcA/PjRJ1m2zUr8oAQ23DK63V3jVwcVaI2vI5/Cy1NI\nB4BSx5KBW1K9xiDnC3BcdSTVdtVkIEcZZBnpMJTaYl0jJhcx1iOju0nLaqQu\nD72mJh9WivYzk6YUjOYAO2osCbeSBQfTCoebNLmxVyR8gu8d0b+5/kfKwZFM\nyT7nlTJCIvOg/F+TrJ1BkxfGoq+XN1/EitIMrIzhafgFLMxqlNestMBbBPjG\nipoXP7QUhpQbNTh9Kx6uaILp1xnRogybCYJFxgGe0RZOuhuwu5tb45wJkCba\nTDoaJVA5zNF/2FdLT5NH5Y3oSyjJetajPg1xh9FD22gFgX8tEYHMLjjByLlF\nZrDRcXcNLUe5hQRpUtckhjSKeSUfHaKtAQ0vjLCS1d2xR1I4mpwasVbaKJeB\nHOAfNQnuV20HEnjE1aXL7wgOlzdy9zVoNQQCz9MCdB7v03z4WDaeablBjB4r\nB1yHu7SoPCEfjc41+RZPQWBLg7995qlgBvUrsR8EWcfJOQv2vJW/1c2lqpyj\nByCw3HewnzFHs8G+09EcjaEm875DvqJxF9clfAM3B9R+9X4nnsX69DEgUTo6\nEPHvVl2dljlWYDPHw0zKFYl/RILsx2mNJ8u6k4x/I534XdI/L0agjxHN8Wxc\nv8fE\r\n=5YeH\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDpLy+NUlDEGeswJyy+IW5DHdRialznPadSeDHyAOd2UgIhAMYwqPu5zh87EcUXd5V+IHPOZBe3WxKK/fIwK0J0EOiP"
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.0.0_1621971063469_0.9309635400407517"
      },
      "_hasShrinkwrap": false
    },
    "3.0.1": {
      "name": "style-dictionary",
      "version": "3.0.1",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.12.1",
        "docsify-cli": "^4.4.3",
        "eslint": "^6.8.0",
        "eslint-plugin-jest": "^24.1.3",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^26.6.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^4.14.1",
        "standard-version": "^9.0.0",
        "stylus": "^0.54.8",
        "tsd": "^0.15.1",
        "yaml": "^1.10.0"
      },
      "gitHead": "904a6ecaffc505098672faf162fc7bc647b34541",
      "_id": "style-dictionary@3.0.1",
      "_nodeVersion": "14.16.1",
      "_npmVersion": "7.13.0",
      "dist": {
        "integrity": "sha512-t6FzcaIY9gCTDufFMP3sUPMqHAA6vW0sHY7p39ckox8y5X8y/0xKbH3Y88QBJN4hKYWuejSLpDf48EVeA0LTiQ==",
        "shasum": "ce083c42891c65bffdf9cfff075306f6cefee3d0",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.0.1.tgz",
        "fileCount": 599,
        "unpackedSize": 4094753,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgvq5tCRA9TVsSAnZWagAAzngP/2sT7M7PspVAch1HAm9V\nKm9Prv7ODlpjSLANJitC5BprOgk3jIUseY9P5y0y1g4KuDBzXxunlvjo3mJk\nvhhKPjWBRgscd4ZFKRodEsIGaRQ2tkAd4ErzQrq7rT8nY0+g+X2QFGh43XMl\n0JnwpXK2bFgYcUGRsmi4ModVGE9B/Vj6Fu3GDkvbBuizno26BUKfu9KpY4sH\nkACWn1qNwQ494LNQPsZsFaoeHFrEc7qG6dj3huO32GT2FYx7ONZ+me8lAWk+\n20Lp8b6iyXcESde7nX1y83ixszCeq9ds67T85hgvG8VN7szAJvGcQadU7TsT\nGwfxG5bQ8W/W+Kdcx8ktM0sYd9wLFnxwfe1nBBVhVUNLoieIwZ4rVMzcLI4z\nDQVNOQJzWmRjRnP1NWISJkIJpXJlXY05jaVYfWTtRfYbVuuDPOtJv5W/dMxN\nKFCwWqfVQsDrhYn9Fk7HhfXwIKcCMQS/daiJx6CiE17HlLMGcATHXwC/w06J\n/5MiKr/vuHA/HKhdfsi3F8IM9pxgP2MdQtmNeLj2szXd8yoXVijrY3Y4zhAp\nu09M2P+foJLoLepoYxu5MkzbC9JeaqjWzUJmNDFA3xtzh4XqEIdA8WLLSJBH\ntMDfVG+wTkm9snEM5EkjW2p1zaCcbJJYdquUplb/j0rY16LjIldpcKwsql0s\nPIw9\r\n=HHLs\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIBapNL5k97E6wMskbpG6EyLo1/N4tPgzSbb0cUDRA2CaAiAvdGLL6qQGYIEzLWh/+Td8C41mhFK7EorkGl2jSHuHLg=="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.0.1_1623109228898_0.3943015772236307"
      },
      "_hasShrinkwrap": false
    },
    "3.0.2": {
      "name": "style-dictionary",
      "version": "3.0.2",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.12.1",
        "docsify-cli": "^4.4.3",
        "eslint": "^6.8.0",
        "eslint-plugin-jest": "^24.1.3",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^26.6.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^6.0.1",
        "standard-version": "^9.0.0",
        "stylus": "^0.54.8",
        "tsd": "^0.15.1",
        "yaml": "^1.10.0"
      },
      "gitHead": "a482a03ded3bb54b872a413e4e5f4a14f05cbc05",
      "_id": "style-dictionary@3.0.2",
      "_nodeVersion": "16.6.1",
      "_npmVersion": "7.20.3",
      "dist": {
        "integrity": "sha512-3fiSzbMG5nY174OrJQpK1JblEHAvZZjn4VRxbgR4Z1b75O60s8RSIeai4DDFEgEBr7eBQpFBnofgParsVeulpg==",
        "shasum": "638caa5a6d0c47cc71a41154b5c940ab2835359a",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.0.2.tgz",
        "fileCount": 600,
        "unpackedSize": 4097177,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhHuKgCRA9TVsSAnZWagAApVkP/10ovFBXvjdAdN3Xpxqz\nmaEdGrSkgJKs0X+Jo3XSDX9D6KHZ+WuU5YCDO1Hi1fgQT8zOKXFOVeJQbbzE\nTgp0knOhyViroOOCWcquKI8HMdKfSGvfPSiSyhedJb6Is4TKMEcCpM6hFHJo\n2PjBF1OmzEzDrsiT9YD0XBsQiZfGFPpQdCMyOFcMln3teEbXvKtvGht8gIKP\ntTCvqj7hQOL9Y6kf5GFOBA0R7+MHITN+09N97cBmTYgWZBH2DcznYhhaCfl1\nhQl1g7xwdbzKqns0240ESAwLdyZpaLFPFBgnhxFBVFuLn9HN1qOyVZhaCU50\njJgwIsTyueTnQebFFkBv/ESQWig5HafbOiS0SEg6FR4IgDUAd+uis/KN0ra4\noSvfQCOTsQE+7PM6jkmM91G6OL8Hf0W6SwXB3RZKSh7CnhECTjwUuzLp77+e\nr82N18Q6zNkDbcnsRTMZvf7hc+4EyUO0E+cJo5N9r2addw2Pdybet6aIdEUk\ntJ3kaCLJMQxYkDbVk8PhgTYM5wd0SscpALSMMaafqevEMEvqNnZjE030AR00\n954SY2sqsjkRmlY68dU7oPSuIo4u8Kvh1FB3LCDmzGcBMhDCpdCi9dykkWhy\notaAjJWNit1c1VYWFWttj0/XUxdG96HECJ9ca5APjIJztQm57osrQbnd2rKH\nQNOO\r\n=cSMR\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDx9bNtG7RXH25QpGgx7y6gO377+7avChNFy6gXjJWsbAiEAi6f84MSehtEMrzYvZ2h7diOU+H7OFHM+1WOfG7KwAp4="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.0.2_1629414048309_0.9106719046587235"
      },
      "_hasShrinkwrap": false
    },
    "3.0.3": {
      "name": "style-dictionary",
      "version": "3.0.3",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.12.1",
        "docsify-cli": "^4.4.3",
        "eslint": "^6.8.0",
        "eslint-plugin-jest": "^24.1.3",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^26.6.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^6.0.1",
        "standard-version": "^9.0.0",
        "stylus": "^0.54.8",
        "tsd": "^0.15.1",
        "yaml": "^1.10.0"
      },
      "gitHead": "e42d90b9786d171c3c7d303e9a7e2ed7eadbcf97",
      "_id": "style-dictionary@3.0.3",
      "_nodeVersion": "15.14.0",
      "_npmVersion": "7.7.6",
      "dist": {
        "integrity": "sha512-4s8wK1o4M/o9AhwsMqOdu0swBJrvxXspcQ7efdKpER5OP7DnnGC5KeCPHlLdciNYDng+z7TWHUXlw1xs7rR50g==",
        "shasum": "251ac680303fe757f19af3af9898db1a66f7373e",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.0.3.tgz",
        "fileCount": 601,
        "unpackedSize": 4120629,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGjDppDWZk8fafXuTluF81n8a4eHeRIZQUAUyOiXCqTkAiAe6a6nzhoPSHj6KvNI1C7zbJLmkL7ssOqe4flYyEbiKA=="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.0.3_1634335769974_0.5535454093821233"
      },
      "_hasShrinkwrap": false
    },
    "3.1.0": {
      "name": "style-dictionary",
      "version": "3.1.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsonc$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.12.1",
        "docsify-cli": "^4.4.3",
        "eslint": "^6.8.0",
        "eslint-plugin-jest": "^24.1.3",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^26.6.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.0.1",
        "json5-jest": "^1.0.1",
        "jsonc-parser": "^3.0.0",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^6.0.1",
        "standard-version": "^9.0.0",
        "stylus": "^0.54.8",
        "tsd": "^0.15.1",
        "yaml": "^1.10.0"
      },
      "gitHead": "983d9c67e0dbcf0906dace7dbcef167de6d63001",
      "_id": "style-dictionary@3.1.0",
      "_nodeVersion": "16.13.1",
      "_npmVersion": "8.1.2",
      "dist": {
        "integrity": "sha512-rQW74b89fV6eTUPwyLgytVXBVSogcOiT3fB3tefWtrv9Frh8vdaDEQj4H6r62TALDTPBONcUUSl0q93cSRDiTQ==",
        "shasum": "9dd7934ea81f6fb84cd0fe87a90091e5387946ee",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.1.0.tgz",
        "fileCount": 601,
        "unpackedSize": 4101707,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhu7whCRA9TVsSAnZWagAAizUP/3J2UE+gz+gme/C2GvHd\n6xQ5utnwYdDCVmPTVOAfO0eAJE9YZt/8g7GGSj2Uu1VRhM7IFc72wdalXLCD\nfnIJXep6S4Ow6YqpSFsMKvLwItL3u1jEbg4jwp97c2ZZO/MZqzg1PA1Whcoa\nPLNO873JD0PE5pFU7B/gGhE8oBLtJIFDUgN5u3ucpOvrXTNgDWxkpEVOFD2o\neUeuc/3FGBMS87df+TZmsIXaPRpvYA1TleKYvGHGQpF3+ZnaZNESBCLk2/V6\nKp7gFJAd0dLOK6D+xn8lYD1hE6+cybHCSpIyqsLarBNPwZ6lITtl/3LefX5I\nYxFpdWFa4/G73KQb4mrinKNcGscgHDTYAyqVNOBXnKmG5JEYCruWZyiep2e8\nVj6yaGCsn455k/SfmEYLvojt2UN0cAzve7q6DU71BTOw+RUgBytR2rZk+XvH\n7JuUXbK/GUa7VrFUZG+Wv6YyXMs40ZDmvVyYNjmNMU09Ifll/4lVNZu0M/DL\nfGm+C91ezn0J5zKvt0Ib83VQWf0GMbfF+WJoPd2XsUGQbykcY1LdhTq4MuUg\n23Oc5nF8z53VWBFQQcGhh4+8jcenKpqd6u0rYBOAYas6jrFpJ/+AmnVBKyyS\nHmRb5MFSSZXitJf6/KU/+wBg13Q0ZawW/QbrPhKg67OElAnm4Y9LtTdaasLB\nMZV9\r\n=iT20\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGhOU67jek1OrfxPDnmz+7SYmPMqJqR2b7PSrhJj7VLPAiArmQALgp37g4/1lRGNOphxdOmo3LVYRyeEagXnlwc33w=="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.1.0_1639693344767_0.9420166469967992"
      },
      "_hasShrinkwrap": false
    },
    "3.1.1": {
      "name": "style-dictionary",
      "version": "3.1.1",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsonc$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^5.1.0",
        "fs-extra": "^8.1.0",
        "glob": "^7.1.6",
        "jsonc-parser": "^3.0.0",
        "json5": "^2.1.3",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.10.2",
        "@commitlint/cli": "^11.0.0",
        "@commitlint/config-conventional": "^11.0.0",
        "babel-jest": "^26.0.1",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.12.1",
        "docsify-cli": "^4.4.3",
        "eslint": "^6.8.0",
        "eslint-plugin-jest": "^24.1.3",
        "husky": "^4.2.5",
        "istanbul": "^0.4.5",
        "jest": "^26.6.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.0.1",
        "json5-jest": "^1.0.1",
        "less": "^3.11.2",
        "lint-staged": "^10.2.7",
        "node-sass": "^6.0.1",
        "standard-version": "^9.0.0",
        "stylus": "^0.54.8",
        "tsd": "^0.15.1",
        "yaml": "^1.10.0"
      },
      "gitHead": "7bfeb923065c791b462add7779fdf008238ca507",
      "_id": "style-dictionary@3.1.1",
      "_nodeVersion": "16.13.1",
      "_npmVersion": "8.1.2",
      "dist": {
        "integrity": "sha512-Dpugx2wH3ElMvq1GOaSsfUChr8dwujx2/eBUUd0vaSFkP16LRp5XOJMTHF0f8QuPGkpBfVPXDWCkb3oJ3oJjxg==",
        "shasum": "780ffebc64a537b877ee5580bd9a937a4ea9ae0a",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.1.1.tgz",
        "fileCount": 601,
        "unpackedSize": 4101707,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhvLR4CRA9TVsSAnZWagAAUAcQAJqSK47uB8U5iUQXu6T3\nY293cy8V1/909ycwa1ohMjA3CzXwlkq7ExYLFrcDBX2jGqHgOb3QHGNFdZ5F\nDPV9zkbXV8inJnLKZPyGJDMndvyy99xSpwS5xYmmwMYeoRFfXGhZrgqCDa6c\nBItnf7znxpgxQgrBRbWGRcWQ3Arves/4zEjgJufJnq5iV38Kl4AidnW84hBE\nhrI4CvUzRgihRzEqh8H6Q/zmFhhStaTqBltfiiJgHnOfuih4R+x500nshsh+\nsp2hubrB22y20efrE2FqiMATN+bYwLGjvYDZiVAqZvdl0redf5j7oFQXM+fE\n0rAZMGFDr7wmwrJ7Lz50zsNtwyATloc6oYD3bIkOEN2xqPGqFeycFLtB6r8n\nDCFjg7ezgyIMPWKtV0I2Zp7dVaFjsHoZPOPE9KAZLp7i35xwB104JQHNc4QF\nOp1TbbOCM0Hqf+I+qZ9UMU9+bO7l+nl39vqfXVZgJraaR9w9U+XeI7uDTRpW\n4RBzVsiYj8+AFcJa/7+e7jnHt35EsreVFryBq0jccliTTpM+Fq4gE7rPg5I2\nrrsRxnTfI+X3F8HQBqAZiQAxOuG3y+YUWLID+HGcarHvKeCYr04vL+zd7y56\nHRk2ZXa+T+GCbYhULwg9CS4umA5TUCPfFwvfQ/JkWks4QFljCFauCJU+vtZP\nkNdP\r\n=EpPl\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQC12yQSi63s2JYNFP3/SFPz+FpGd+vLlSudoilQIu4NpQIgVKNcimTKkCxv1dNes4Dsh0iyuiMC2mreRvhDQGqk8+g="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.1.1_1639756920724_0.34422749158889143"
      },
      "_hasShrinkwrap": false
    },
    "3.7.0": {
      "name": "style-dictionary",
      "version": "3.7.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a",
        "prepare": "husky install"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsonc$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^8.3.0",
        "fs-extra": "^10.0.0",
        "glob": "^7.2.0",
        "json5": "^2.2.0",
        "jsonc-parser": "^3.0.0",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.16.11",
        "@commitlint/cli": "^16.1.0",
        "@commitlint/config-conventional": "^16.0.0",
        "babel-jest": "^27.4.6",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-plugin-jest": "^26.0.0",
        "husky": "^7.0.0",
        "istanbul": "^0.4.5",
        "jest": "^27.4.7",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.1.0",
        "json5-jest": "^1.0.1",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "node-sass": "^7.0.1",
        "standard-version": "^9.3.2",
        "stylus": "^0.56.0",
        "tsd": "^0.19.1",
        "yaml": "^1.10.2"
      },
      "gitHead": "94fc9f953f27b2d25d0ed358e68a82aac0f34571",
      "_id": "style-dictionary@3.7.0",
      "_nodeVersion": "16.13.1",
      "_npmVersion": "8.3.2",
      "dist": {
        "integrity": "sha512-BL4AQS5kNDBXbFHWJhlCve6+ojnHgHkiwhf2nNByU698elXWdyK5b27OprphT4q0/tJ52zB+lodhqxIxbNOajQ==",
        "shasum": "02f4b17232cbb1142a3fdc09a17dfb08aafde3b0",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.7.0.tgz",
        "fileCount": 607,
        "unpackedSize": 4112603,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiFWJ7ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqobw/5APJHaZlJrBf3z4XpMFCegOfKaoTLAgfMb0Dxb4WVgI7pYAwe\r\neSl3m3Jur8XcDLlgmFf9OkL5Kz37d1CfTxbIEqt6q4gx3s/r3ff7Tr3/9KVb\r\nm0+EOVRg1OIsJrLOv/tRTPxrwkRUuNCXXMST1QPJ9+zqxnV8wM/V+/p/gUs9\r\n/Vbx5yYXaJ4xpcgceGhA5WkgSK0fCIjyvvJ5Oh89Vei8ofqsH1wzZRaka4JS\r\nWdA8qCtVvU+/DK/jUMJbagNXJ7Fus+qyglRIu7yxGSrZrPMX8PQb9w1r61Uw\r\nDsL4ktA8qkr7oOKyUrIDCMfSkspqhioH+i+PA8tnFR22d7GbOgbq+HFbut2E\r\nRe4SmL2H96oootW2lW+JNkjTZ/4S0KA4t0Gs6QVudDl5kGEKjNrVoM1X6uKz\r\nAlhZST77LNTOR+XO2ymYPmxjMSgRz7qBobKV/FkfYRSy0fuWheFzvAiCtS8p\r\nVwMjfXYr63dWrENJH3OwhvRL/bzNFncqLGGkI2Tw2cH+9wVOFygVOErQi67q\r\nejEVn4MZTkti3hCZ6iKQHMsTMrnS+zIaaIng2LChrnQnmwYv/CrHacynbabe\r\nFDdVA0gHEkpI1CAenuGvU6mXBXtpz9k6hSybEQ/FoOeR9TrRqsaAIoGQ40dF\r\npMWlRmWYW4VYhfCSjLBEK4f5WdHH9pXJbAU=\r\n=GpF1\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCI/0dFSclJvkz4JXd8yROd2wfi9F+RExVZkHssqXutcAIhAJIph/SdIa6CSHH4BT7urmlf8XzbLKOQquIRgvloTKYw"
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.7.0_1645568635208_0.4260775119403355"
      },
      "_hasShrinkwrap": false
    },
    "3.7.1": {
      "name": "style-dictionary",
      "version": "3.7.1",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a",
        "prepare": "husky install"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsonc$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^8.3.0",
        "fs-extra": "^10.0.0",
        "glob": "^7.2.0",
        "json5": "^2.2.0",
        "jsonc-parser": "^3.0.0",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.16.11",
        "@commitlint/cli": "^16.1.0",
        "@commitlint/config-conventional": "^16.0.0",
        "babel-jest": "^27.4.6",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-plugin-jest": "^26.0.0",
        "husky": "^7.0.0",
        "istanbul": "^0.4.5",
        "jest": "^27.4.7",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.1.0",
        "json5-jest": "^1.0.1",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "node-sass": "^7.0.1",
        "standard-version": "^9.3.2",
        "stylus": "^0.56.0",
        "tsd": "^0.19.1",
        "yaml": "^1.10.2"
      },
      "gitHead": "a12a31fe14ca9500c03608c8dc2c35361339af96",
      "_id": "style-dictionary@3.7.1",
      "_nodeVersion": "16.13.1",
      "_npmVersion": "8.3.2",
      "dist": {
        "integrity": "sha512-yYU9Z/J8Znj9T9oJVjo8VOYamrOxv0UbBKPjhSt+PharxrhyQCM4RWb71fgEfv2pK9KO8G83/0ChDNQZ1mn0wQ==",
        "shasum": "d61c980513d7bb0a1946a9fab31491a672d0f6a2",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.7.1.tgz",
        "fileCount": 611,
        "unpackedSize": 4119325,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC/1k1rXS9djvUBaGXl/vFxKLD3m7s16sLs6dEpFi3C7wIhAItJjJCEfs0rjK7aCtulm66mKQcfB3s984YBFbUCniZ6"
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJin8zhACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpQNxAAmkrgxDXL5lCng0cJav4dUbLNoIwiK87xsKlgM5ot+ze0vba0\r\n6fZYcHMiIr8zCDs4yIMYs9+Avs1lrr+mDZnwQcoSqFYrJAdYYrDhA/y15C1r\r\nEeTpAXsSrx+bO1V50xCdpxyG+283x3bQk5k9ZXctKMk6MkBStGQ50kxo5ui4\r\nJCYCnOlUUTTXwveGyM2mLHXXA+dfn/Vf5NXbPj4dULXXfvSSO29WIsA+eyoR\r\nV/HIy3sZcTVxdiT4SZL7s/+Ll3X10IZUqpQUdoZv1nlY5vsUR+svGN9mWR2S\r\nG54Zf1AOhyAK2sXF2tlS34jXyXFCJB1F+XkG1mn5W0qJTX0pAjkysb5hAKbN\r\n0ExwAT7px4HzYMHV9loqX1n78yHzrCP/o16rgRgwDjWdrYcrJR9L9xhcOCe/\r\nJV/Sp/QoCFGCDJLJvJiwGPPboqFMLrdDbzRFiwofzzAoQ61FANWYp8g6bvOn\r\ntaJucouIOTfFx3ld/kAjhh0YV6jcTp9ne1q/8e3XEZ1O3BVJ9dM1H7c3bSbk\r\nTpE4JNnXHF9Bkb/QeKF6eFu5ejuh2eatCRBvEdyiJhftQ5SuS24RmbOToy5q\r\n9WrboeGFe4CYIzE74i9nGmW498tzy3wxHFuuwvhUsdbraxC6JejmBlKAihxs\r\ncRjL+uwCYbSkJ8carW5YJVsTRzGngNcOLlQ=\r\n=yEtm\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.7.1_1654639841606_0.5283600702502653"
      },
      "_hasShrinkwrap": false
    },
    "3.7.2": {
      "name": "style-dictionary",
      "version": "3.7.2",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a",
        "prepare": "husky install"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsonc$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^8.3.0",
        "fs-extra": "^10.0.0",
        "glob": "^7.2.0",
        "json5": "^2.2.0",
        "jsonc-parser": "^3.0.0",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.16.11",
        "@commitlint/cli": "^16.1.0",
        "@commitlint/config-conventional": "^16.0.0",
        "babel-jest": "^27.4.6",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-plugin-jest": "^26.0.0",
        "husky": "^7.0.0",
        "istanbul": "^0.4.5",
        "jest": "^27.4.7",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.1.0",
        "json5-jest": "^1.0.1",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "node-sass": "^7.0.1",
        "standard-version": "^9.3.2",
        "stylus": "^0.56.0",
        "tsd": "^0.19.1",
        "yaml": "^1.10.2"
      },
      "gitHead": "ebf02c1892bff2087118b6190c05f64e1a0b8ab9",
      "_id": "style-dictionary@3.7.2",
      "_nodeVersion": "16.13.1",
      "_npmVersion": "9.2.0",
      "dist": {
        "integrity": "sha512-Nd/qrPj1ikYX+sL/8PofMgfaJLRvGgT96Ty3dJLGNqtZmecVr3Xs+OZivMQEYmSCTiap/UyeV5SqwmAgn3/KKA==",
        "shasum": "bb4e70b2c2020dfa3ea81f22adda252aaf31e0a4",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.7.2.tgz",
        "fileCount": 2732,
        "unpackedSize": 11309351,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQC2NN1V4nYTmpe8buEm7DT56OrtBnBjtK95XWHoITtTIAIgI9KFmsHqiLEbGA6d2buzpIKsx6by2foRMc6a29q1TVQ="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjtKKkACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmppDw/9FwLdw362I0WA5pSqa5hQioy64GOuPWzLSJHVLaoBlv5LKzgx\r\n7MeGrj3mcgWnmIJChhIN3uLo1mdsaqBABPtHtxIPHO3FMdTrO5lf7niW+ZzD\r\nLqRLSEwn3rowtKoUmaZy8CFIkeuE2C4eZePWRvYiuszIp5WubBJCyQK7rMEW\r\nbQinBzi9scZLk2HUgfn6P+Fn78XhJ27lJ8syQ19wXvl0PG4mNfUMhheOY8rE\r\nFgx7/uuyxKye0isHnjQloPBSgRhpwgwzg6NJxyA2I8dN4H7Nj7GIhd5deqYa\r\nVFN6BryyqXr/zMKHOwGgu+pR9243QTiVmDX7xdpLZjjth5k+h6ieRZfDItyC\r\nSpyFFxhNlSSZg0HzYdh1LFcqCLCAd6NF9MC2qgWemJKayAElg8MLVta6Lyu4\r\nxJkoevCm7JwVaXrkj+gjCbYR7E3Txo4QOxFAqUZ14M3hmikuByCz1YsKUXdx\r\nuc3pnx1eOR6yEGlCGepm5zWT7H3Rb7USKjbjcbjr2su8w8bcBVHYUU8NQHpf\r\ngIsspUBH22exEzJ3Wd3JkXesZNkBx3ECEgklA9Un/jbDqFLqSQsHFfEt1UbC\r\nzZ/hpoWY8o/JJcPFbeh5tpCFNiDU0ArQmZIh1YH4fkai6XUa21jhgLNqmptl\r\nmbto84hj3dqDJMhl+07vPCXCKKvVggqlX2s=\r\n=o0IF\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.7.2_1672782499717_0.41374820076426744"
      },
      "_hasShrinkwrap": false
    },
    "3.7.3-rc.1": {
      "name": "style-dictionary",
      "version": "3.7.3-rc.1",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a",
        "prepare": "husky install"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsonc$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^8.3.0",
        "fs-extra": "^10.0.0",
        "glob": "^7.2.0",
        "json5": "^2.2.2",
        "jsonc-parser": "^3.0.0",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.16.11",
        "@commitlint/cli": "^16.1.0",
        "@commitlint/config-conventional": "^16.0.0",
        "babel-jest": "^27.4.6",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-plugin-jest": "^26.0.0",
        "husky": "^7.0.0",
        "istanbul": "^0.4.5",
        "jest": "^27.4.7",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.1.0",
        "json5-jest": "^1.0.1",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "node-sass": "^7.0.1",
        "standard-version": "^9.3.2",
        "stylus": "^0.56.0",
        "tsd": "^0.19.1",
        "yaml": "^1.10.2"
      },
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n> *Style once, use everywhere.*\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on YouTube\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Experiment in the playground\nTry the browser-based Style Dictionary playground: [https://www.style-dictionary-play.dev/](https://www.style-dictionary-play.dev/), built by the folks at [\\<div\\>RIOTS](https://divriots.com/).\n\n## Contents\n* [Installation](#installation)\n* [Usage](#usage)\n* [Example](#example)\n* [Quick Start](#quick-start)\n* [Design Tokens](#design-tokens)\n* [Extending](#extending)\n* [Contributing](#contributing)\n* [License](#license)\n\n\n## Installation\n*Note that you must have node (and npm) installed.*\n\nIf you want to use the CLI, you can install it globally via npm:\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n### CLI\n```bash\n$ style-dictionary build\n```\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag | Short Flag | Description |\n| --- | --- | --- |\n| --config \\[path\\] | -c | Set the config file to use. Must be a .json file |\n| --platform \\[platform\\] | -p | Only build a specific platform defined in the config file. |\n| --help | -h | Display help content |\n| --version | -v | Display the version |\n\n### Node\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [{\n        destination: 'variables.scss',\n        format: 'scss/variables'\n      }]\n    }\n    // ...\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [{\n        \"destination\": \"scss/_variables.scss\",\n        \"format\": \"scss/variables\"\n      }]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [{\n        \"destination\": \"font_dimens.xml\",\n        \"format\": \"android/fontDimens\"\n      }]\n    }\n  }\n}\n```\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| source | Array | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want. |\n| include | Array | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms | Object | Sets of platform files to be built. |\n| platform.transformGroup | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`. |\n| platform.transforms | Array (optional) | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own. |\n| platform.buildPath | String (optional) | Base path to build the files, must end with a trailing slash. |\n| platform.files | Array (optional) | Files to be generated for this platform. |\n| platform.file.destination | String (optional) | Location to build the file, will be appended to the buildPath. |\n| platform.file.format | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats) |\n| platform.file.options | Object (optional) | A set of extra options associated with the file. |\n| platform.file.options.showFileHeader | Boolean | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\". |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\" : { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\" : { \"value\": \"24px\" },\n      \"base\"  : { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\":  {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment  will appear in the output files, where relevant or the output format supports comments.\n\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function(prop) {\n    return prop.attributes.category === 'time';\n  },\n  transformer: function(prop) {\n    return (parseInt(prop.original.value) / 1000).toString() + 's';\n  }\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "4b6108bc98b34fdc5ec83cf1674095f54ad57463",
      "_id": "style-dictionary@3.7.3-rc.1",
      "_nodeVersion": "16.13.1",
      "_npmVersion": "9.2.0",
      "dist": {
        "integrity": "sha512-v2UCuZWHdIfTkkz9X/+y0zSemOY6steWcse6QmwvNWEh/WhcbahBHEdVgqFmZfXRHtw+15IaXggVr3z053OK2A==",
        "shasum": "8233b63a796a0080829920cbc9b1402df81323f9",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.7.3-rc.1.tgz",
        "fileCount": 611,
        "unpackedSize": 4114507,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHOTF7MYpUC8w7jXjlrVCehRO1Tp/QmxLHvr5tHm0YdKAiBXeByHfskfDJlpngDej+b4OX1RRTDXSaQF/dVWNbqb/w=="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj2sl5ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmpx+w/9H/aEumbpjeWAPa50AoJqiOJiuIOz1Q/AYNo9yqRYdCmPullK\r\nVCfXS+sYYCUnuhX/iKufG7zmVn2XLysV1/ZLDLsJuLt1FubxUWVc1VwlNRNu\r\ns0/ByON0uAkvz27rB1y7D/P6OtrZjGFn6bpqPuUMjUOipsXjhMv1ZWXywT4x\r\n+CdAt+UEOGYstw+N8fMyWEPcyNTTpRjpuQhcU5jfYVEZ9HKnqXuCZv2KheCG\r\n8fQvL29FgQSvylEOCp+qAVFcthw2v3wpN83ZxCcAavaxkjjuMq1H/4SgY1pc\r\nLb1eZRo8tP7rykShrEjvLosPRoFlNVR8jJeTdpdHD6KrjM7Wu1QisbIoum9V\r\niVZH74MWbS9VQxhspzdwSWcF6N6/HsFnEz/O3k/RP8cuCAeJSuXCqJn+XWX7\r\ntY5HlieaBLNfdLQYuE6O8pG7L3ZubnjAAUG+Rp1ELuijaO22blDdNmbFyNXc\r\n1mcTqHgYBByQyJ3QOmGaP/+9Ceny4RnmRhi4loltRcz/2C1u/fseix7bZhsG\r\nZnw4Szk7O7K1mFR9y/T5zOSadd6P5H04BMX7KA32rWCYNr8sb74nPQa6yVFs\r\nwvJggq0f/lPN40MQZYwJO5Hp2zAb93QwGh4A+l8qyRwGPqMRdB3k7GDwZ0A0\r\ng9oiHUNEbOV/D5fcAAlr2b9WkTc3xWoTcr4=\r\n=ZqSv\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.7.3-rc.1_1675282808876_0.2215930224063427"
      },
      "_hasShrinkwrap": false
    },
    "3.8.0": {
      "name": "style-dictionary",
      "version": "3.8.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a",
        "prepare": "husky install"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsonc$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^8.3.0",
        "fs-extra": "^10.0.0",
        "glob": "^7.2.0",
        "json5": "^2.2.2",
        "jsonc-parser": "^3.0.0",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.16.11",
        "@commitlint/cli": "^16.1.0",
        "@commitlint/config-conventional": "^16.0.0",
        "babel-jest": "^27.4.6",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-plugin-jest": "^26.0.0",
        "husky": "^7.0.0",
        "istanbul": "^0.4.5",
        "jest": "^27.4.7",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.1.0",
        "json5-jest": "^1.0.1",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "node-sass": "^7.0.1",
        "standard-version": "^9.3.2",
        "stylus": "^0.56.0",
        "tsd": "^0.19.1",
        "yaml": "^1.10.2"
      },
      "gitHead": "2cf72f3f89996503608c238d7f3bcbab5b53e719",
      "_id": "style-dictionary@3.8.0",
      "_nodeVersion": "16.13.1",
      "_npmVersion": "9.2.0",
      "dist": {
        "integrity": "sha512-wHlB/f5eO3mDcYv6WtOz6gvQC477jBKrwuIXe+PtHskTCBsJdAOvL8hCquczJxDui2TnwpeNE+2msK91JJomZg==",
        "shasum": "7cb8d64360c53431f768d44def665f61e971a73e",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.8.0.tgz",
        "fileCount": 611,
        "unpackedSize": 4114854,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCID4vHCcttlMPLCtGOloQIhkpCX4wJmO3428iD6oWfUsZAiEA37Qc7WXAtNX6OWoC70aUt7SbyQjhLiUyIy7tcXEVQPU="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkSEOhACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrD8A/5AWjVG+XG5+7yFxVxwOJSSJLiJe+oPRzrQMzPC8WRR0oHJCiG\r\n4O9BAPCyh5RYbxAESqXP6rA9HX9diVPejYKQudmPZuZg97Y7Ubz0PqKnbIjQ\r\nwd0xIVqzrh173wE3d5hMGaDoFIgX++aF9eMzLrFVDYmYRu4YSR17agNoxOgu\r\nSzfOa2jI4DpMtFuOrda9Ccl4czq5hfM1MY+qGWR9XPPI0cZOom6cLYt++b2s\r\n/FGCUnveRI/pMzja31BQTtghCHe34o95hUMyyk/SV5rUcpLOaEUpOf3Ar2nk\r\negcBgZmrEjQ6XYzByhPUmLcdl2d2pp+kMGb91HFiJAnOKttDsp5Rr4vIF/b/\r\nrkAu+mXcLFe0PS+K9+H6uWIUaAOof/Og57ZbGp+OqOmSBnIQj+TDE9bQUFkM\r\nlWC1KL4e26+CNcjMayFKZs2ZkbtJNLMq5IWzG4HnwUXOlW5ODyznw7ya5QrG\r\n46bDCPY2MhoF8tJgMIGYlrx08MpT5XD/CfoCFozPiZ/dpnX/PVyBHvfAbpwP\r\nyWh4xgFo0aTvJxHwmQGtwxlyuV9Mr/aYxWkEtDdgqG23+d2O85PBOw0hLtA6\r\naL0vjdYY7kIMXtKfVyBAe/XVV/xl0K1RpED8U457Bk5C5nk7z/LLc1TdDt6t\r\n5oNqCHGVeL9iHV8tCKKOUayUdTRHxJ3BMx0=\r\n=1LOg\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.8.0_1682457505645_0.6352403607063883"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-prerelease.0": {
      "name": "style-dictionary",
      "version": "4.0.0-prerelease.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "type": "module",
      "exports": {
        ".": {
          "types": "./types/index.d.ts",
          "node": "./index-node.js",
          "default": "./index.js"
        },
        "./fs": "./fs.js"
      },
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "scripts": {
        "format": "run-p format:*",
        "format:eslint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "format:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --write",
        "lint": "run-p lint:*",
        "lint:eslint": "eslint index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "lint:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --list-different || (echo '↑↑ these files are not prettier formatted ↑↑' && exit 1)",
        "test": "run-p test:*",
        "test:unit": "jest --runInBand --silent --coverage",
        "test:types": "tsd",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "node scripts/inject-version.js && changeset publish",
        "prepare": "husky install"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsonc$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "lint-staged": {
        "*.js": [
          "eslint",
          "prettier --list-different"
        ],
        "*.md": "prettier --list-different"
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "prettier": {
        "singleQuote": true,
        "arrowParens": "always",
        "trailingComma": "all",
        "printWidth": 100
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        },
        {
          "name": "Joren Broekema",
          "email": "joren.broekema@gmail.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "@bundled-es-modules/glob": "^10.3.5",
        "@bundled-es-modules/memfs": "^4.2.3",
        "@bundled-es-modules/path-browserify": "^1.0.2",
        "chalk": "^5.3.0",
        "change-case": "^4.1.2",
        "commander": "^8.3.0",
        "fs-extra": "^10.0.0",
        "json5": "^2.2.2",
        "jsonc-parser": "^3.0.0",
        "lodash": "^4.17.15",
        "lodash-es": "^4.17.21",
        "tinycolor2": "^1.6.0",
        "url": "^0.11.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.16.11",
        "@changesets/cli": "^2.26.2",
        "@commitlint/cli": "^16.1.0",
        "@commitlint/config-conventional": "^16.0.0",
        "babel-jest": "^27.4.6",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-plugin-jest": "^26.0.0",
        "husky": "^8.0.3",
        "istanbul": "^0.4.5",
        "jest": "^27.4.7",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.1.0",
        "json5-jest": "^1.0.1",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "node-sass": "^9.0.0",
        "npm-run-all": "^4.1.5",
        "prettier": "^3.0.3",
        "standard-version": "^9.3.2",
        "stylus": "^0.56.0",
        "tsd": "^0.19.1",
        "yaml": "^1.10.2"
      },
      "_id": "style-dictionary@4.0.0-prerelease.0",
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n\n> _Style once, use everywhere._\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on YouTube\n\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Experiment in the playground\n\nTry the browser-based Style Dictionary playground: [https://www.style-dictionary-play.dev/](https://www.style-dictionary-play.dev/), built by the folks at [\\<div\\>RIOTS](https://divriots.com/).\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Example](#example)\n- [Quick Start](#quick-start)\n- [Design Tokens](#design-tokens)\n- [Extending](#extending)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n_Note that you must have node (and npm) installed._\n\nIf you want to use the CLI, you can install it globally via npm:\n\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n\n### CLI\n\n```bash\n$ style-dictionary build\n```\n\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag                    | Short Flag | Description                                                |\n| ----------------------- | ---------- | ---------------------------------------------------------- |\n| --config \\[path\\]       | -c         | Set the config file to use. Must be a .json file           |\n| --platform \\[platform\\] | -p         | Only build a specific platform defined in the config file. |\n| --help                  | -h         | Display help content                                       |\n| --version               | -v         | Display the version                                        |\n\n### Node\n\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [\n        {\n          destination: 'variables.scss',\n          format: 'scss/variables',\n        },\n      ],\n    },\n    // ...\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\n\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [\n        {\n          \"destination\": \"scss/_variables.scss\",\n          \"format\": \"scss/variables\"\n        }\n      ]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [\n        {\n          \"destination\": \"font_dimens.xml\",\n          \"format\": \"android/fontDimens\"\n        }\n      ]\n    }\n  }\n}\n```\n\n| Attribute                            | Type              | Description                                                                                                                                                                                                                                                                   |\n| :----------------------------------- | :---------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source                               | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want.                                                        |\n| include                              | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms                            | Object            | Sets of platform files to be built.                                                                                                                                                                                                                                           |\n| platform.transformGroup              | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`.                                                                                                                                                                                           |\n| platform.transforms                  | Array (optional)  | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own.                                                                                                                                                                             |\n| platform.buildPath                   | String (optional) | Base path to build the files, must end with a trailing slash.                                                                                                                                                                                                                 |\n| platform.files                       | Array (optional)  | Files to be generated for this platform.                                                                                                                                                                                                                                      |\n| platform.file.destination            | String (optional) | Location to build the file, will be appended to the buildPath.                                                                                                                                                                                                                |\n| platform.file.format                 | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats)                                                                                                                      |\n| platform.file.options                | Object (optional) | A set of extra options associated with the file.                                                                                                                                                                                                                              |\n| platform.file.options.showFileHeader | Boolean           | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\".                                                                                                                                                    |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\": { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\": { \"value\": \"24px\" },\n      \"base\": { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment will appear in the output files, where relevant or the output format supports comments.\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function (token) {\n    return token.attributes.category === 'time';\n  },\n  transformer: function (token) {\n    return (parseInt(token.original.value) / 1000).toString() + 's';\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "dab4161c2de7798e420d4e394bdf6863121e1857",
      "_nodeVersion": "18.18.2",
      "_npmVersion": "9.8.1",
      "dist": {
        "integrity": "sha512-2yg42OfjVZARpaHlniw6h+TJufocndQd7x4l01DApMiIZjHpPfortwX0+e9otbTetABKvnn18xOOdDB5z1Y6XA==",
        "shasum": "f0ce359d4ed8bc19ef357908c4428d2820b08c00",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-4.0.0-prerelease.0.tgz",
        "fileCount": 612,
        "unpackedSize": 4117969,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDVdIYKhJiARxXtHzslgt7is2z4QWamAjdLaWSP50lENAiBGyFQR7Vgtovf4cXeT0EvxNqXhMoqSJSUwXOFAf2mpow=="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_4.0.0-prerelease.0_1698052986401_0.1458679365273936"
      },
      "_hasShrinkwrap": false
    },
    "3.9.0": {
      "name": "style-dictionary",
      "version": "3.9.0",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a",
        "prepare": "husky install"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsonc$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^8.3.0",
        "fs-extra": "^10.0.0",
        "glob": "^7.2.0",
        "json5": "^2.2.2",
        "jsonc-parser": "^3.0.0",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.16.11",
        "@commitlint/cli": "^16.1.0",
        "@commitlint/config-conventional": "^16.0.0",
        "babel-jest": "^27.4.6",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-plugin-jest": "^26.0.0",
        "husky": "^7.0.0",
        "istanbul": "^0.4.5",
        "jest": "^27.4.7",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.1.0",
        "json5-jest": "^1.0.1",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "node-sass": "^9.0.0",
        "standard-version": "^9.3.2",
        "stylus": "^0.56.0",
        "tsd": "^0.19.1",
        "yaml": "^1.10.2"
      },
      "_id": "style-dictionary@3.9.0",
      "gitHead": "f88fe97f696909f4eecd72ffc3a04b3b7a417189",
      "_nodeVersion": "20.5.0",
      "_npmVersion": "9.8.0",
      "dist": {
        "integrity": "sha512-mnq8QfPJoj3ellKHRKZwmCgYUGgwYtoagW5edyKpR09O1W4/XqBdeKXoY/LbeIKqHrqVR7sGgk6E/dNYkPS4aA==",
        "shasum": "c89ba60b81a821c52515ae45d5e5c2da41c34546",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.9.0.tgz",
        "fileCount": 611,
        "unpackedSize": 4120640,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDAM+7SvbL2PYdPXAWLUM6EWdybsZtTdRds8UoeEE+3DAIhANQww4MDck8pgFEftAqgtAXWAID5R+4+4arqiSz1ke+k"
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.9.0_1698094500799_0.3580367171160508"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-prerelease.1": {
      "name": "style-dictionary",
      "version": "4.0.0-prerelease.1",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "type": "module",
      "exports": {
        ".": {
          "types": "./types/index.d.ts",
          "node": "./index-node.js",
          "default": "./index.js"
        },
        "./fs": "./fs.js"
      },
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "scripts": {
        "format": "run-p format:*",
        "format:eslint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "format:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --write",
        "lint": "run-p lint:*",
        "lint:eslint": "eslint index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "lint:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --list-different || (echo '↑↑ these files are not prettier formatted ↑↑' && exit 1)",
        "test": "run-p test:*",
        "test:unit": "jest --runInBand --silent --coverage",
        "test:types": "tsd",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "node scripts/inject-version.js && changeset publish",
        "prepare": "husky install"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsonc$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "lint-staged": {
        "*.js": [
          "eslint",
          "prettier --list-different"
        ],
        "*.md": "prettier --list-different"
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "prettier": {
        "singleQuote": true,
        "arrowParens": "always",
        "trailingComma": "all",
        "printWidth": 100
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        },
        {
          "name": "Joren Broekema",
          "email": "joren.broekema@gmail.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "@bundled-es-modules/glob": "^10.3.5",
        "@bundled-es-modules/memfs": "^4.2.3",
        "@bundled-es-modules/path-browserify": "^1.0.2",
        "chalk": "^5.3.0",
        "change-case": "^4.1.2",
        "commander": "^8.3.0",
        "fs-extra": "^10.0.0",
        "json5": "^2.2.2",
        "jsonc-parser": "^3.0.0",
        "lodash": "^4.17.15",
        "lodash-es": "^4.17.21",
        "tinycolor2": "^1.6.0",
        "url": "^0.11.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.16.11",
        "@changesets/cli": "^2.26.2",
        "@commitlint/cli": "^16.1.0",
        "@commitlint/config-conventional": "^16.0.0",
        "babel-jest": "^27.4.6",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-plugin-jest": "^26.0.0",
        "husky": "^8.0.3",
        "istanbul": "^0.4.5",
        "jest": "^27.4.7",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.1.0",
        "json5-jest": "^1.0.1",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "node-sass": "^9.0.0",
        "npm-run-all": "^4.1.5",
        "prettier": "^3.0.3",
        "standard-version": "^9.3.2",
        "stylus": "^0.56.0",
        "tsd": "^0.19.1",
        "yaml": "^1.10.2"
      },
      "_id": "style-dictionary@4.0.0-prerelease.1",
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n\n> _Style once, use everywhere._\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on YouTube\n\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Experiment in the playground\n\nTry the browser-based Style Dictionary playground: [https://www.style-dictionary-play.dev/](https://www.style-dictionary-play.dev/), built by the folks at [\\<div\\>RIOTS](https://divriots.com/).\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Example](#example)\n- [Quick Start](#quick-start)\n- [Design Tokens](#design-tokens)\n- [Extending](#extending)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n_Note that you must have node (and npm) installed._\n\nIf you want to use the CLI, you can install it globally via npm:\n\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n\n### CLI\n\n```bash\n$ style-dictionary build\n```\n\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag                    | Short Flag | Description                                                |\n| ----------------------- | ---------- | ---------------------------------------------------------- |\n| --config \\[path\\]       | -c         | Set the config file to use. Must be a .json file           |\n| --platform \\[platform\\] | -p         | Only build a specific platform defined in the config file. |\n| --help                  | -h         | Display help content                                       |\n| --version               | -v         | Display the version                                        |\n\n### Node\n\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [\n        {\n          destination: 'variables.scss',\n          format: 'scss/variables',\n        },\n      ],\n    },\n    // ...\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\n\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [\n        {\n          \"destination\": \"scss/_variables.scss\",\n          \"format\": \"scss/variables\"\n        }\n      ]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [\n        {\n          \"destination\": \"font_dimens.xml\",\n          \"format\": \"android/fontDimens\"\n        }\n      ]\n    }\n  }\n}\n```\n\n| Attribute                            | Type              | Description                                                                                                                                                                                                                                                                   |\n| :----------------------------------- | :---------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source                               | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want.                                                        |\n| include                              | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms                            | Object            | Sets of platform files to be built.                                                                                                                                                                                                                                           |\n| platform.transformGroup              | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`.                                                                                                                                                                                           |\n| platform.transforms                  | Array (optional)  | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own.                                                                                                                                                                             |\n| platform.buildPath                   | String (optional) | Base path to build the files, must end with a trailing slash.                                                                                                                                                                                                                 |\n| platform.files                       | Array (optional)  | Files to be generated for this platform.                                                                                                                                                                                                                                      |\n| platform.file.destination            | String (optional) | Location to build the file, will be appended to the buildPath.                                                                                                                                                                                                                |\n| platform.file.format                 | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats)                                                                                                                      |\n| platform.file.options                | Object (optional) | A set of extra options associated with the file.                                                                                                                                                                                                                              |\n| platform.file.options.showFileHeader | Boolean           | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\".                                                                                                                                                    |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\": { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\": { \"value\": \"24px\" },\n      \"base\": { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment will appear in the output files, where relevant or the output format supports comments.\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function (token) {\n    return token.attributes.category === 'time';\n  },\n  transformer: function (token) {\n    return (parseInt(token.original.value) / 1000).toString() + 's';\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "0d3531cbf821b12f9a714c29fe64f3b051117539",
      "_nodeVersion": "18.18.2",
      "_npmVersion": "9.8.1",
      "dist": {
        "integrity": "sha512-1s1CV65eR53fVyOI6wHwqbARMTaojVOClqrkA7KzAmsHC/oIbuHFh8DNZCFHj+1HzOjS6IyEnKzwbPGkW4VBQg==",
        "shasum": "f1dbaaecfd3f33a7c3f9864731cb80e38d13fc0d",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-4.0.0-prerelease.1.tgz",
        "fileCount": 612,
        "unpackedSize": 4120003,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIChP58Marm/togrX5WAzKz1yaQm3I56o8CtoR8g5V7TuAiBzJW2AB0C0b684j1u8GUhRTp6zGr1jxOOv17DKr0YKZQ=="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_4.0.0-prerelease.1_1698309856522_0.8168194755212632"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-prerelease.2": {
      "name": "style-dictionary",
      "version": "4.0.0-prerelease.2",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "type": "module",
      "exports": {
        ".": {
          "types": "./types/index.d.ts",
          "default": "./lib/StyleDictionary.js"
        },
        "./fs": {
          "node": "./fs-node.js",
          "default": "./fs.js"
        }
      },
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "scripts": {
        "format": "run-p format:*",
        "format:eslint": "eslint --fix \"**/*.js\"",
        "format:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --write",
        "lint": "run-p lint:*",
        "lint:eslint": "eslint \"**/*.js\"",
        "lint:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --list-different || (echo '↑↑ these files are not prettier formatted ↑↑' && exit 1)",
        "test": "npm run test:browser && npm run test:node",
        "test:browser": "web-test-runner --coverage",
        "test:browser:coverage": "cd coverage/lcov-report && npx http-server -o -c-1",
        "test:browser:watch": "web-test-runner --watch",
        "test:browser:update-snapshots": "web-test-runner --update-snapshots",
        "test:node": "mocha -r mocha-hooks.mjs './__integration__/**/*.test.js' './__tests__/**/*.test.js' './__node_tests__/**/*.test.js'",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "node scripts/inject-version.js && changeset publish",
        "prepare": "husky install",
        "postinstall": "patch-package"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__tokens/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsonc$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "lint-staged": {
        "*.js": [
          "eslint",
          "prettier --list-different"
        ],
        "*.md": "prettier --list-different"
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "prettier": {
        "singleQuote": true,
        "arrowParens": "always",
        "trailingComma": "all",
        "printWidth": 100
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        },
        {
          "name": "Joren Broekema",
          "email": "joren.broekema@gmail.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "@bundled-es-modules/deepmerge": "^4.3.1",
        "@bundled-es-modules/glob": "^10.3.5",
        "@bundled-es-modules/memfs": "^4.2.3",
        "@bundled-es-modules/path-browserify": "^1.0.2",
        "chalk": "^5.3.0",
        "change-case": "^4.1.2",
        "commander": "^8.3.0",
        "fs-extra": "^10.0.0",
        "is-plain-object": "^5.0.0",
        "json5": "^2.2.2",
        "jsonc-parser": "^3.0.0",
        "lodash": "^4.17.15",
        "lodash-es": "^4.17.21",
        "tinycolor2": "^1.6.0",
        "url": "^0.11.1"
      },
      "devDependencies": {
        "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
        "@changesets/cli": "^2.26.2",
        "@commitlint/cli": "^16.1.0",
        "@commitlint/config-conventional": "^16.0.0",
        "@esm-bundle/chai-as-promised": "^7.1.1",
        "@types/chai": "^4.3.9",
        "@web/test-runner": "^0.18.0",
        "@web/test-runner-commands": "^0.9.0",
        "@web/test-runner-playwright": "^0.11.0",
        "chai": "^5.0.0-alpha.2",
        "chai-as-promised": "npm:@esm-bundle/chai-as-promised@^7.1.1",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-config-react-app": "^7.0.1",
        "eslint-plugin-jest": "^26.0.0",
        "hanbi": "^1.0.1",
        "husky": "^8.0.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.1.0",
        "json5-jest": "^1.0.1",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "mocha": "^10.2.0",
        "npm-run-all": "^4.1.5",
        "patch-package": "^8.0.0",
        "prettier": "^3.0.3",
        "sass": "^1.69.5",
        "standard-version": "^9.3.2",
        "stylus": "^0.56.0",
        "yaml": "^2.3.4"
      },
      "_id": "style-dictionary@4.0.0-prerelease.2",
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n\n> _Style once, use everywhere._\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on YouTube\n\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Experiment in the playground\n\nTry the browser-based Style Dictionary playground: [https://www.style-dictionary-play.dev/](https://www.style-dictionary-play.dev/), built by the folks at [\\<div\\>RIOTS](https://divriots.com/).\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Example](#example)\n- [Quick Start](#quick-start)\n- [Design Tokens](#design-tokens)\n- [Extending](#extending)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n_Note that you must have node (and npm) installed._\n\nIf you want to use the CLI, you can install it globally via npm:\n\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n\n### CLI\n\n```bash\n$ style-dictionary build\n```\n\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag                    | Short Flag | Description                                                |\n| ----------------------- | ---------- | ---------------------------------------------------------- |\n| --config \\[path\\]       | -c         | Set the config file to use. Must be a .json file           |\n| --platform \\[platform\\] | -p         | Only build a specific platform defined in the config file. |\n| --help                  | -h         | Display help content                                       |\n| --version               | -v         | Display the version                                        |\n\n### Node\n\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [\n        {\n          destination: 'variables.scss',\n          format: 'scss/variables',\n        },\n      ],\n    },\n    // ...\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\n\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [\n        {\n          \"destination\": \"scss/_variables.scss\",\n          \"format\": \"scss/variables\"\n        }\n      ]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [\n        {\n          \"destination\": \"font_dimens.xml\",\n          \"format\": \"android/fontDimens\"\n        }\n      ]\n    }\n  }\n}\n```\n\n| Attribute                            | Type              | Description                                                                                                                                                                                                                                                                   |\n| :----------------------------------- | :---------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source                               | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want.                                                        |\n| include                              | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms                            | Object            | Sets of platform files to be built.                                                                                                                                                                                                                                           |\n| platform.transformGroup              | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`.                                                                                                                                                                                           |\n| platform.transforms                  | Array (optional)  | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own.                                                                                                                                                                             |\n| platform.buildPath                   | String (optional) | Base path to build the files, must end with a trailing slash.                                                                                                                                                                                                                 |\n| platform.files                       | Array (optional)  | Files to be generated for this platform.                                                                                                                                                                                                                                      |\n| platform.file.destination            | String (optional) | Location to build the file, will be appended to the buildPath.                                                                                                                                                                                                                |\n| platform.file.format                 | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats)                                                                                                                      |\n| platform.file.options                | Object (optional) | A set of extra options associated with the file.                                                                                                                                                                                                                              |\n| platform.file.options.showFileHeader | Boolean           | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\".                                                                                                                                                    |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\": { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\": { \"value\": \"24px\" },\n      \"base\": { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment will appear in the output files, where relevant or the output format supports comments.\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function (token) {\n    return token.attributes.category === 'time';\n  },\n  transformer: function (token) {\n    return (parseInt(token.original.value) / 1000).toString() + 's';\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "3591f5050f72ee02cd89de79965105e51ba7923b",
      "_nodeVersion": "18.18.2",
      "_npmVersion": "9.8.1",
      "dist": {
        "integrity": "sha512-3OpGbOfeqJsqP2HXoq3dNtpcOfo0z8rub5PFNctqaKMPLlQBe9eBaDMVP1cUZTKfj2vlNeWWv24LWSAqRXdhCw==",
        "shasum": "6d506d554958412a2e21fe7f40821e8f12d80cad",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-4.0.0-prerelease.2.tgz",
        "fileCount": 608,
        "unpackedSize": 4118175,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDhIrw7JEX5UYPoBtxd5MYD2sNr3eUHgY26KCXNgLPpkgIgCptO1IJ9y7M29ZlbznwT0CllvZMi9Kid6p19IcPHepE="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_4.0.0-prerelease.2_1701169531426_0.4658878584677313"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-prerelease.3": {
      "name": "style-dictionary",
      "version": "4.0.0-prerelease.3",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "type": "module",
      "exports": {
        ".": {
          "types": "./types/index.d.ts",
          "default": "./lib/StyleDictionary.js"
        },
        "./fs": {
          "node": "./fs-node.js",
          "default": "./fs.js"
        }
      },
      "bin": {
        "style-dictionary": "bin/style-dictionary.js"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "scripts": {
        "format": "run-p format:*",
        "format:eslint": "eslint --fix \"**/*.js\"",
        "format:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --write",
        "lint": "run-p lint:*",
        "lint:eslint": "eslint \"**/*.js\"",
        "lint:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --list-different || (echo '↑↑ these files are not prettier formatted ↑↑' && exit 1)",
        "test": "npm run test:browser && npm run test:node",
        "test:browser": "web-test-runner --coverage",
        "test:browser:coverage": "cd coverage/lcov-report && npx http-server -o -c-1",
        "test:browser:watch": "web-test-runner --watch",
        "test:browser:update-snapshots": "web-test-runner --update-snapshots",
        "test:node": "mocha -r mocha-hooks.mjs './__integration__/**/*.test.js' './__tests__/**/*.test.js' './__node_tests__/**/*.test.js'",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "node scripts/inject-version.js && changeset publish",
        "prepare": "husky install",
        "postinstall": "patch-package"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__tokens/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsonc$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "lint-staged": {
        "*.js": [
          "eslint",
          "prettier --list-different"
        ],
        "*.md": "prettier --list-different"
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "prettier": {
        "singleQuote": true,
        "arrowParens": "always",
        "trailingComma": "all",
        "printWidth": 100
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        },
        {
          "name": "Joren Broekema",
          "email": "joren.broekema@gmail.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "@bundled-es-modules/deepmerge": "^4.3.1",
        "@bundled-es-modules/glob": "^10.3.5",
        "@bundled-es-modules/memfs": "^4.2.3",
        "@bundled-es-modules/path-browserify": "^1.0.2",
        "chalk": "^5.3.0",
        "change-case": "^4.1.2",
        "commander": "^8.3.0",
        "fs-extra": "^10.0.0",
        "is-plain-object": "^5.0.0",
        "json5": "^2.2.2",
        "jsonc-parser": "^3.0.0",
        "lodash": "^4.17.15",
        "lodash-es": "^4.17.21",
        "tinycolor2": "^1.6.0",
        "url": "^0.11.1"
      },
      "devDependencies": {
        "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
        "@changesets/cli": "^2.26.2",
        "@commitlint/cli": "^16.1.0",
        "@commitlint/config-conventional": "^16.0.0",
        "@esm-bundle/chai-as-promised": "^7.1.1",
        "@types/chai": "^4.3.9",
        "@web/test-runner": "^0.18.0",
        "@web/test-runner-commands": "^0.9.0",
        "@web/test-runner-playwright": "^0.11.0",
        "chai": "^5.0.0-alpha.2",
        "chai-as-promised": "npm:@esm-bundle/chai-as-promised@^7.1.1",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-config-react-app": "^7.0.1",
        "eslint-plugin-jest": "^26.0.0",
        "hanbi": "^1.0.1",
        "husky": "^8.0.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.1.0",
        "json5-jest": "^1.0.1",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "mocha": "^10.2.0",
        "npm-run-all": "^4.1.5",
        "patch-package": "^8.0.0",
        "prettier": "^3.0.3",
        "sass": "^1.69.5",
        "standard-version": "^9.3.2",
        "stylus": "^0.56.0",
        "yaml": "^2.3.4"
      },
      "_id": "style-dictionary@4.0.0-prerelease.3",
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n\n> _Style once, use everywhere._\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on YouTube\n\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Experiment in the playground\n\nTry the browser-based Style Dictionary playground: [https://www.style-dictionary-play.dev/](https://www.style-dictionary-play.dev/), built by the folks at [\\<div\\>RIOTS](https://divriots.com/).\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Example](#example)\n- [Quick Start](#quick-start)\n- [Design Tokens](#design-tokens)\n- [Extending](#extending)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n_Note that you must have node (and npm) installed._\n\nIf you want to use the CLI, you can install it globally via npm:\n\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n\n### CLI\n\n```bash\n$ style-dictionary build\n```\n\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag                    | Short Flag | Description                                                |\n| ----------------------- | ---------- | ---------------------------------------------------------- |\n| --config \\[path\\]       | -c         | Set the config file to use. Must be a .json file           |\n| --platform \\[platform\\] | -p         | Only build a specific platform defined in the config file. |\n| --help                  | -h         | Display help content                                       |\n| --version               | -v         | Display the version                                        |\n\n### Node\n\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [\n        {\n          destination: 'variables.scss',\n          format: 'scss/variables',\n        },\n      ],\n    },\n    // ...\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\n\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [\n        {\n          \"destination\": \"scss/_variables.scss\",\n          \"format\": \"scss/variables\"\n        }\n      ]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [\n        {\n          \"destination\": \"font_dimens.xml\",\n          \"format\": \"android/fontDimens\"\n        }\n      ]\n    }\n  }\n}\n```\n\n| Attribute                            | Type              | Description                                                                                                                                                                                                                                                                   |\n| :----------------------------------- | :---------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source                               | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want.                                                        |\n| include                              | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms                            | Object            | Sets of platform files to be built.                                                                                                                                                                                                                                           |\n| platform.transformGroup              | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`.                                                                                                                                                                                           |\n| platform.transforms                  | Array (optional)  | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own.                                                                                                                                                                             |\n| platform.buildPath                   | String (optional) | Base path to build the files, must end with a trailing slash.                                                                                                                                                                                                                 |\n| platform.files                       | Array (optional)  | Files to be generated for this platform.                                                                                                                                                                                                                                      |\n| platform.file.destination            | String (optional) | Location to build the file, will be appended to the buildPath.                                                                                                                                                                                                                |\n| platform.file.format                 | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats)                                                                                                                      |\n| platform.file.options                | Object (optional) | A set of extra options associated with the file.                                                                                                                                                                                                                              |\n| platform.file.options.showFileHeader | Boolean           | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\".                                                                                                                                                    |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\": { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\": { \"value\": \"24px\" },\n      \"base\": { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment will appear in the output files, where relevant or the output format supports comments.\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function (token) {\n    return token.attributes.category === 'time';\n  },\n  transformer: function (token) {\n    return (parseInt(token.original.value) / 1000).toString() + 's';\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "2ceb1fa8a138b586e219486690f73df445e50c5b",
      "_nodeVersion": "18.18.2",
      "_npmVersion": "9.8.1",
      "dist": {
        "integrity": "sha512-d13X7Im4AY1eyaB4f26+UXDRaoucxsIJRUfP8UsdGYyzoZhm6FVGrdRMufS6xP3nDJhA9t29rUew7fnXE6thnw==",
        "shasum": "1fe717c9ea39d98aadda5384868bf1757de0b384",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-4.0.0-prerelease.3.tgz",
        "fileCount": 609,
        "unpackedSize": 4118259,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDaUXRUDmBDrooY1JjuHAKRjFMeWIECYiU2IyWUdF7k9QIhAM3lzL3DB0xd0giLMdMLdeMtlywnLlzwWkRbUbVXPgaZ"
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_4.0.0-prerelease.3_1701798706060_0.2552433921715893"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-prerelease.4": {
      "name": "style-dictionary",
      "version": "4.0.0-prerelease.4",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "type": "module",
      "exports": {
        ".": {
          "types": "./types/index.d.ts",
          "default": "./lib/StyleDictionary.js"
        },
        "./fs": {
          "node": "./fs-node.js",
          "default": "./fs.js"
        },
        "./utils": "./lib/utils/index.js"
      },
      "bin": {
        "style-dictionary": "bin/style-dictionary.js"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "scripts": {
        "format": "run-p format:*",
        "format:eslint": "eslint --fix \"**/*.js\"",
        "format:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --write",
        "lint": "run-p lint:*",
        "lint:eslint": "eslint \"**/*.js\"",
        "lint:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --list-different || (echo '↑↑ these files are not prettier formatted ↑↑' && exit 1)",
        "test": "npm run test:browser && npm run test:node",
        "test:browser": "web-test-runner --coverage",
        "test:browser:coverage": "cd coverage/lcov-report && npx http-server -o -c-1",
        "test:browser:watch": "web-test-runner --watch",
        "test:browser:update-snapshots": "web-test-runner --update-snapshots",
        "test:node": "mocha -r mocha-hooks.mjs './__integration__/**/*.test.js' './__tests__/**/*.test.js' './__node_tests__/**/*.test.js'",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "node scripts/inject-version.js && changeset publish",
        "prepare": "husky install",
        "postinstall": "patch-package"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__tokens/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsonc$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "lint-staged": {
        "*.js": [
          "eslint",
          "prettier --list-different"
        ],
        "*.md": "prettier --list-different"
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "prettier": {
        "singleQuote": true,
        "arrowParens": "always",
        "trailingComma": "all",
        "printWidth": 100
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        },
        {
          "name": "Joren Broekema",
          "email": "joren.broekema@gmail.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "@bundled-es-modules/deepmerge": "^4.3.1",
        "@bundled-es-modules/glob": "^10.3.5",
        "@bundled-es-modules/memfs": "^4.2.3",
        "@bundled-es-modules/path-browserify": "^1.0.2",
        "chalk": "^5.3.0",
        "change-case": "^4.1.2",
        "commander": "^8.3.0",
        "fs-extra": "^10.0.0",
        "is-plain-object": "^5.0.0",
        "json5": "^2.2.2",
        "jsonc-parser": "^3.0.0",
        "lodash": "^4.17.15",
        "lodash-es": "^4.17.21",
        "tinycolor2": "^1.6.0",
        "url": "^0.11.1"
      },
      "devDependencies": {
        "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
        "@changesets/cli": "^2.26.2",
        "@commitlint/cli": "^16.1.0",
        "@commitlint/config-conventional": "^16.0.0",
        "@esm-bundle/chai-as-promised": "^7.1.1",
        "@types/chai": "^4.3.9",
        "@web/test-runner": "^0.18.0",
        "@web/test-runner-commands": "^0.9.0",
        "@web/test-runner-playwright": "^0.11.0",
        "chai": "^5.0.0-alpha.2",
        "chai-as-promised": "npm:@esm-bundle/chai-as-promised@^7.1.1",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-config-react-app": "^7.0.1",
        "eslint-plugin-jest": "^26.0.0",
        "hanbi": "^1.0.1",
        "husky": "^8.0.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.1.0",
        "json5-jest": "^1.0.1",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "mocha": "^10.2.0",
        "npm-run-all": "^4.1.5",
        "patch-package": "^8.0.0",
        "prettier": "^3.0.3",
        "sass": "^1.69.5",
        "standard-version": "^9.3.2",
        "stylus": "^0.56.0",
        "yaml": "^2.3.4"
      },
      "_id": "style-dictionary@4.0.0-prerelease.4",
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n\n> _Style once, use everywhere._\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on YouTube\n\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Experiment in the playground\n\nTry the browser-based Style Dictionary playground: [https://www.style-dictionary-play.dev/](https://www.style-dictionary-play.dev/), built by the folks at [\\<div\\>RIOTS](https://divriots.com/).\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Example](#example)\n- [Quick Start](#quick-start)\n- [Design Tokens](#design-tokens)\n- [Extending](#extending)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n_Note that you must have node (and npm) installed._\n\nIf you want to use the CLI, you can install it globally via npm:\n\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n\n### CLI\n\n```bash\n$ style-dictionary build\n```\n\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag                    | Short Flag | Description                                                |\n| ----------------------- | ---------- | ---------------------------------------------------------- |\n| --config \\[path\\]       | -c         | Set the config file to use. Must be a .json file           |\n| --platform \\[platform\\] | -p         | Only build a specific platform defined in the config file. |\n| --help                  | -h         | Display help content                                       |\n| --version               | -v         | Display the version                                        |\n\n### Node\n\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [\n        {\n          destination: 'variables.scss',\n          format: 'scss/variables',\n        },\n      ],\n    },\n    // ...\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\n\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [\n        {\n          \"destination\": \"scss/_variables.scss\",\n          \"format\": \"scss/variables\"\n        }\n      ]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [\n        {\n          \"destination\": \"font_dimens.xml\",\n          \"format\": \"android/fontDimens\"\n        }\n      ]\n    }\n  }\n}\n```\n\n| Attribute                            | Type              | Description                                                                                                                                                                                                                                                                   |\n| :----------------------------------- | :---------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source                               | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want.                                                        |\n| include                              | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms                            | Object            | Sets of platform files to be built.                                                                                                                                                                                                                                           |\n| platform.transformGroup              | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`.                                                                                                                                                                                           |\n| platform.transforms                  | Array (optional)  | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own.                                                                                                                                                                             |\n| platform.buildPath                   | String (optional) | Base path to build the files, must end with a trailing slash.                                                                                                                                                                                                                 |\n| platform.files                       | Array (optional)  | Files to be generated for this platform.                                                                                                                                                                                                                                      |\n| platform.file.destination            | String (optional) | Location to build the file, will be appended to the buildPath.                                                                                                                                                                                                                |\n| platform.file.format                 | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats)                                                                                                                      |\n| platform.file.options                | Object (optional) | A set of extra options associated with the file.                                                                                                                                                                                                                              |\n| platform.file.options.showFileHeader | Boolean           | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\".                                                                                                                                                    |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\": { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\": { \"value\": \"24px\" },\n      \"base\": { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment will appear in the output files, where relevant or the output format supports comments.\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function (token) {\n    return token.attributes.category === 'time';\n  },\n  transformer: function (token) {\n    return (parseInt(token.original.value) / 1000).toString() + 's';\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "5b9bcbf9819e838fd166e189d227161486e7d687",
      "_nodeVersion": "18.18.2",
      "_npmVersion": "9.8.1",
      "dist": {
        "integrity": "sha512-1qS+BWreFMbj2s5Q4NTAThpQSXm1BymmNxBBklAg/pVazkhxeA62UemOBFbgzqvMlye5IPQaJxCLDQsoJ+i2DQ==",
        "shasum": "92a27f7125a8bfa36416d011fba4a920bfdb1e70",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-4.0.0-prerelease.4.tgz",
        "fileCount": 611,
        "unpackedSize": 4120876,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGCfzeub+x3afgWYu1CBJkfoD1cLvxYbfLNQQMG5rgo8AiEAlncYhK+YKp3XMiRDF2cj2g/u0kqZir8ujPXsxtBhbrY="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_4.0.0-prerelease.4_1701801738559_0.4760216474008283"
      },
      "_hasShrinkwrap": false
    },
    "3.9.1": {
      "name": "style-dictionary",
      "version": "3.9.1",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a",
        "prepare": "husky install"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsonc$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^8.3.0",
        "fs-extra": "^10.0.0",
        "glob": "^10.3.10",
        "json5": "^2.2.2",
        "jsonc-parser": "^3.0.0",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.16.11",
        "@commitlint/cli": "^16.1.0",
        "@commitlint/config-conventional": "^16.0.0",
        "babel-jest": "^27.4.6",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-plugin-jest": "^26.0.0",
        "husky": "^7.0.0",
        "istanbul": "^0.4.5",
        "jest": "^27.4.7",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.1.0",
        "json5-jest": "^1.0.1",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "node-sass": "^9.0.0",
        "standard-version": "^9.3.2",
        "stylus": "^0.56.0",
        "tsd": "^0.19.1",
        "yaml": "^1.10.2"
      },
      "_id": "style-dictionary@3.9.1",
      "gitHead": "1df04d32161ae34bb3899493a87f7e5f26636acf",
      "_nodeVersion": "20.5.0",
      "_npmVersion": "9.8.0",
      "dist": {
        "integrity": "sha512-odyTC7wMYE4B3VOhc3LW1g0PCz9g+0WZZt5qp8KpWP9POlhw0+8MYiPQYwYfBmu4MEs1qbZ+GHySu4TTjQPH9A==",
        "shasum": "4cd1d426eb6918eca32291130eecebb14ef98a08",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.9.1.tgz",
        "fileCount": 610,
        "unpackedSize": 4120092,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCR0anddLQAE58f39rAMa8vcUu2Krvshr04uuJvlbk9rQIgPuqyNBuudvnFJ9GGXZn6238zzrx3fexRD3VujvZSxo0="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.9.1_1701982167510_0.5597037467221588"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-prerelease.5": {
      "name": "style-dictionary",
      "version": "4.0.0-prerelease.5",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "type": "module",
      "exports": {
        ".": "./lib/StyleDictionary.js",
        "./fs": {
          "node": "./lib/fs-node.js",
          "default": "./lib/fs.js"
        },
        "./utils": "./lib/utils/index.js",
        "./types": "./types/index.d.ts"
      },
      "bin": {
        "style-dictionary": "bin/style-dictionary.js"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "scripts": {
        "format": "run-p format:*",
        "format:eslint": "eslint --fix \"**/*.js\"",
        "format:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --write",
        "lint": "run-p lint:*",
        "lint:eslint": "eslint \"**/*.js\"",
        "lint:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --list-different || (echo '↑↑ these files are not prettier formatted ↑↑' && exit 1)",
        "lint:types": "tsc --noEmit",
        "test": "npm run test:browser && npm run test:node",
        "test:browser": "web-test-runner --coverage",
        "test:browser:coverage": "cd coverage/lcov-report && npx http-server -o -c-1",
        "test:browser:watch": "web-test-runner --watch",
        "test:browser:update-snapshots": "web-test-runner --update-snapshots",
        "test:node": "mocha -r mocha-hooks.mjs './__integration__/**/*.test.js' './__tests__/**/*.test.js' './__node_tests__/**/*.test.js'",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "node scripts/inject-version.js && tsc --emitDeclarationOnly && changeset publish",
        "prepare": "husky install",
        "postinstall": "patch-package"
      },
      "lint-staged": {
        "*.js": [
          "eslint",
          "prettier --list-different"
        ],
        "*.md": "prettier --list-different"
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "prettier": {
        "singleQuote": true,
        "arrowParens": "always",
        "trailingComma": "all",
        "printWidth": 100
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        },
        {
          "name": "Joren Broekema",
          "email": "joren.broekema@gmail.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "@bundled-es-modules/deepmerge": "^4.3.1",
        "@bundled-es-modules/glob": "^10.3.12",
        "@bundled-es-modules/memfs": "^4.2.3",
        "path-unified": "^0.1.0",
        "chalk": "^5.3.0",
        "change-case": "^5.3.0",
        "commander": "^8.3.0",
        "is-plain-obj": "^4.1.0",
        "json5": "^2.2.2",
        "lodash-es": "^4.17.21",
        "tinycolor2": "^1.6.0"
      },
      "devDependencies": {
        "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
        "@changesets/cli": "^2.27.1",
        "@commitlint/cli": "^18.4.3",
        "@commitlint/config-conventional": "^18.4.3",
        "@esm-bundle/chai-as-promised": "^7.1.1",
        "@types/chai": "^4.3.9",
        "@types/lodash-es": "^4.17.12",
        "@types/tinycolor2": "^1.4.6",
        "@web/test-runner": "^0.18.0",
        "@web/test-runner-commands": "^0.9.0",
        "@web/test-runner-playwright": "^0.11.0",
        "chai": "^5.0.0-alpha.2",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-config-react-app": "^7.0.1",
        "fs-extra": "^10.0.0",
        "hanbi": "^1.0.1",
        "husky": "^8.0.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^8.0.0",
        "jsdoc-tsimport-plugin": "^1.0.5",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "memfs": "^4.6.0",
        "mocha": "^10.2.0",
        "npm-run-all": "^4.1.5",
        "patch-package": "^8.0.0",
        "prettier": "^3.0.3",
        "sass": "^1.69.5",
        "stylus": "^0.56.0",
        "typescript": "^5.3.3",
        "yaml": "^2.3.4"
      },
      "_id": "style-dictionary@4.0.0-prerelease.5",
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n\n> _Style once, use everywhere._\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on YouTube\n\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Experiment in the playground\n\nTry the browser-based Style Dictionary playground: [https://www.style-dictionary-play.dev/](https://www.style-dictionary-play.dev/), built by the folks at [\\<div\\>RIOTS](https://divriots.com/).\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Example](#example)\n- [Quick Start](#quick-start)\n- [Design Tokens](#design-tokens)\n- [Extending](#extending)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n_Note that you must have node (and npm) installed._\n\nIf you want to use the CLI, you can install it globally via npm:\n\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n\n### CLI\n\n```bash\n$ style-dictionary build\n```\n\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag                    | Short Flag | Description                                                |\n| ----------------------- | ---------- | ---------------------------------------------------------- |\n| --config \\[path\\]       | -c         | Set the config file to use. Must be a .json file           |\n| --platform \\[platform\\] | -p         | Only build a specific platform defined in the config file. |\n| --help                  | -h         | Display help content                                       |\n| --version               | -v         | Display the version                                        |\n\n### Node\n\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [\n        {\n          destination: 'variables.scss',\n          format: 'scss/variables',\n        },\n      ],\n    },\n    // ...\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\n\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [\n        {\n          \"destination\": \"scss/_variables.scss\",\n          \"format\": \"scss/variables\"\n        }\n      ]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [\n        {\n          \"destination\": \"font_dimens.xml\",\n          \"format\": \"android/fontDimens\"\n        }\n      ]\n    }\n  }\n}\n```\n\n| Attribute                            | Type              | Description                                                                                                                                                                                                                                                                   |\n| :----------------------------------- | :---------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source                               | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want.                                                        |\n| include                              | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms                            | Object            | Sets of platform files to be built.                                                                                                                                                                                                                                           |\n| platform.transformGroup              | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`.                                                                                                                                                                                           |\n| platform.transforms                  | Array (optional)  | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own.                                                                                                                                                                             |\n| platform.buildPath                   | String (optional) | Base path to build the files, must end with a trailing slash.                                                                                                                                                                                                                 |\n| platform.files                       | Array (optional)  | Files to be generated for this platform.                                                                                                                                                                                                                                      |\n| platform.file.destination            | String (optional) | Location to build the file, will be appended to the buildPath.                                                                                                                                                                                                                |\n| platform.file.format                 | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats)                                                                                                                      |\n| platform.file.options                | Object (optional) | A set of extra options associated with the file.                                                                                                                                                                                                                              |\n| platform.file.options.showFileHeader | Boolean           | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\".                                                                                                                                                    |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\": { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\": { \"value\": \"24px\" },\n      \"base\": { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment will appear in the output files, where relevant or the output format supports comments.\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function (token) {\n    return token.attributes.category === 'time';\n  },\n  transformer: function (token) {\n    return (parseInt(token.original.value) / 1000).toString() + 's';\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "78daa4a4dd67ebded6c382659d8c1a13bf59e2c3",
      "_nodeVersion": "20.10.0",
      "_npmVersion": "10.2.3",
      "dist": {
        "integrity": "sha512-dMf41Cz9m5HUBCSlKGdw2fKQk2PyJ+LUKTQBzC+EMLLB3loleHTUyl2kVQU28WlMlouVqywlUBTF9LJsxegPSA==",
        "shasum": "1959b7ac2676e662427b3f67f6e20ce12c24f5d9",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-4.0.0-prerelease.5.tgz",
        "fileCount": 674,
        "unpackedSize": 4191337,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIF6J7A/4+r8pk6nsIvr9Vt0iNC6HlLvYmhZxM54vYW8bAiEA309KXtB0On3jTCISilB/Lj8rTRoZEDJDfKVjkMTSlZc="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_4.0.0-prerelease.5_1703336823889_0.4138856866962619"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-prerelease.6": {
      "name": "style-dictionary",
      "version": "4.0.0-prerelease.6",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "type": "module",
      "exports": {
        ".": "./lib/StyleDictionary.js",
        "./fs": {
          "node": "./lib/fs-node.js",
          "default": "./lib/fs.js"
        },
        "./utils": "./lib/utils/index.js",
        "./types": "./types/index.d.ts"
      },
      "bin": {
        "style-dictionary": "bin/style-dictionary.js"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "scripts": {
        "format": "run-p format:*",
        "format:eslint": "eslint --fix \"**/*.js\"",
        "format:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --write",
        "lint": "run-p lint:*",
        "lint:eslint": "eslint \"**/*.js\"",
        "lint:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --list-different || (echo '↑↑ these files are not prettier formatted ↑↑' && exit 1)",
        "lint:types": "tsc --noEmit",
        "test": "npm run test:browser && npm run test:node",
        "test:browser": "web-test-runner --coverage",
        "test:browser:coverage": "cd coverage/lcov-report && npx http-server -o -c-1",
        "test:browser:watch": "web-test-runner --watch",
        "test:browser:update-snapshots": "web-test-runner --update-snapshots",
        "test:node": "mocha -r mocha-hooks.mjs './__integration__/**/*.test.js' './__tests__/**/*.test.js' './__node_tests__/**/*.test.js'",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "node scripts/inject-version.js && tsc --emitDeclarationOnly && changeset publish",
        "prepare": "husky install",
        "postinstall": "patch-package"
      },
      "lint-staged": {
        "*.js": [
          "eslint",
          "prettier --list-different"
        ],
        "*.md": "prettier --list-different"
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "prettier": {
        "singleQuote": true,
        "arrowParens": "always",
        "trailingComma": "all",
        "printWidth": 100
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        },
        {
          "name": "Joren Broekema",
          "email": "joren.broekema@gmail.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "@bundled-es-modules/deepmerge": "^4.3.1",
        "@bundled-es-modules/glob": "^10.3.13",
        "@bundled-es-modules/memfs": "^4.2.3",
        "path-unified": "^0.1.0",
        "chalk": "^5.3.0",
        "change-case": "^5.3.0",
        "commander": "^8.3.0",
        "is-plain-obj": "^4.1.0",
        "json5": "^2.2.2",
        "lodash-es": "^4.17.21",
        "tinycolor2": "^1.6.0"
      },
      "devDependencies": {
        "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
        "@changesets/cli": "^2.27.1",
        "@commitlint/cli": "^18.4.3",
        "@commitlint/config-conventional": "^18.4.3",
        "@esm-bundle/chai-as-promised": "^7.1.1",
        "@types/chai": "^4.3.9",
        "@types/lodash-es": "^4.17.12",
        "@types/tinycolor2": "^1.4.6",
        "@web/test-runner": "^0.18.0",
        "@web/test-runner-commands": "^0.9.0",
        "@web/test-runner-playwright": "^0.11.0",
        "chai": "^5.0.0-alpha.2",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-config-react-app": "^7.0.1",
        "fs-extra": "^10.0.0",
        "hanbi": "^1.0.1",
        "husky": "^8.0.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^8.0.0",
        "jsdoc-tsimport-plugin": "^1.0.5",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "memfs": "^4.6.0",
        "mocha": "^10.2.0",
        "npm-run-all": "^4.1.5",
        "patch-package": "^8.0.0",
        "prettier": "^3.0.3",
        "sass": "^1.69.5",
        "stylus": "^0.56.0",
        "typescript": "^5.3.3",
        "yaml": "^2.3.4"
      },
      "_id": "style-dictionary@4.0.0-prerelease.6",
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n\n> _Style once, use everywhere._\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on YouTube\n\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Experiment in the playground\n\nTry the browser-based Style Dictionary playground: [https://www.style-dictionary-play.dev/](https://www.style-dictionary-play.dev/), built by the folks at [\\<div\\>RIOTS](https://divriots.com/).\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Example](#example)\n- [Quick Start](#quick-start)\n- [Design Tokens](#design-tokens)\n- [Extending](#extending)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n_Note that you must have node (and npm) installed._\n\nIf you want to use the CLI, you can install it globally via npm:\n\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n\n### CLI\n\n```bash\n$ style-dictionary build\n```\n\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag                    | Short Flag | Description                                                |\n| ----------------------- | ---------- | ---------------------------------------------------------- |\n| --config \\[path\\]       | -c         | Set the config file to use. Must be a .json file           |\n| --platform \\[platform\\] | -p         | Only build a specific platform defined in the config file. |\n| --help                  | -h         | Display help content                                       |\n| --version               | -v         | Display the version                                        |\n\n### Node\n\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [\n        {\n          destination: 'variables.scss',\n          format: 'scss/variables',\n        },\n      ],\n    },\n    // ...\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\n\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [\n        {\n          \"destination\": \"scss/_variables.scss\",\n          \"format\": \"scss/variables\"\n        }\n      ]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [\n        {\n          \"destination\": \"font_dimens.xml\",\n          \"format\": \"android/fontDimens\"\n        }\n      ]\n    }\n  }\n}\n```\n\n| Attribute                            | Type              | Description                                                                                                                                                                                                                                                                   |\n| :----------------------------------- | :---------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source                               | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want.                                                        |\n| include                              | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms                            | Object            | Sets of platform files to be built.                                                                                                                                                                                                                                           |\n| platform.transformGroup              | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`.                                                                                                                                                                                           |\n| platform.transforms                  | Array (optional)  | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own.                                                                                                                                                                             |\n| platform.buildPath                   | String (optional) | Base path to build the files, must end with a trailing slash.                                                                                                                                                                                                                 |\n| platform.files                       | Array (optional)  | Files to be generated for this platform.                                                                                                                                                                                                                                      |\n| platform.file.destination            | String (optional) | Location to build the file, will be appended to the buildPath.                                                                                                                                                                                                                |\n| platform.file.format                 | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats)                                                                                                                      |\n| platform.file.options                | Object (optional) | A set of extra options associated with the file.                                                                                                                                                                                                                              |\n| platform.file.options.showFileHeader | Boolean           | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\".                                                                                                                                                    |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\": { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\": { \"value\": \"24px\" },\n      \"base\": { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment will appear in the output files, where relevant or the output format supports comments.\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function (token) {\n    return token.attributes.category === 'time';\n  },\n  transformer: function (token) {\n    return (parseInt(token.original.value) / 1000).toString() + 's';\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "5443c3752946500bdf46c7fa065d83f7c5944466",
      "_nodeVersion": "20.10.0",
      "_npmVersion": "10.2.3",
      "dist": {
        "integrity": "sha512-hQxbx76IEMcKj29san51UvO0JsXFifhli3miK2LlsnjDW5iw2BMvG7/yeokTdHxzYN1GUioMJ6RFgvzAYoHRkA==",
        "shasum": "4a2b2ef7f2bbe17466c4ce3c411d0cdf15068d1a",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-4.0.0-prerelease.6.tgz",
        "fileCount": 674,
        "unpackedSize": 4191337,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDO44eGCX2HnjngGU5tunOryPAfrY9FPYo73OCyAgnTwAiEAhaJxxV5rQ9j/fUXRVd1RSVVx3027pVFOtPqfVTKj8Hk="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_4.0.0-prerelease.6_1703337547565_0.8270441068707894"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-prerelease.7": {
      "name": "style-dictionary",
      "version": "4.0.0-prerelease.7",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "type": "module",
      "exports": {
        ".": "./lib/StyleDictionary.js",
        "./fs": {
          "node": "./lib/fs-node.js",
          "default": "./lib/fs.js"
        },
        "./utils": "./lib/utils/index.js",
        "./types": "./types/index.d.ts"
      },
      "bin": {
        "style-dictionary": "bin/style-dictionary.js"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "scripts": {
        "format": "run-p format:*",
        "format:eslint": "eslint --fix \"**/*.js\"",
        "format:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --write",
        "lint": "run-p lint:*",
        "lint:eslint": "eslint \"**/*.js\"",
        "lint:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --list-different || (echo '↑↑ these files are not prettier formatted ↑↑' && exit 1)",
        "lint:types": "tsc --noEmit",
        "test": "npm run test:browser && npm run test:node",
        "test:browser": "web-test-runner --coverage",
        "test:browser:coverage": "cd coverage/lcov-report && npx http-server -o -c-1",
        "test:browser:watch": "web-test-runner --watch",
        "test:browser:update-snapshots": "web-test-runner --update-snapshots",
        "test:node": "mocha -r mocha-hooks.mjs './__integration__/**/*.test.js' './__tests__/**/*.test.js' './__node_tests__/**/*.test.js'",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "node scripts/inject-version.js && tsc --emitDeclarationOnly && changeset publish",
        "prepare": "husky install",
        "postinstall": "patch-package"
      },
      "lint-staged": {
        "*.js": [
          "eslint",
          "prettier --list-different"
        ],
        "*.md": "prettier --list-different"
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "prettier": {
        "singleQuote": true,
        "arrowParens": "always",
        "trailingComma": "all",
        "printWidth": 100
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        },
        {
          "name": "Joren Broekema",
          "email": "joren.broekema@gmail.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "@bundled-es-modules/deepmerge": "^4.3.1",
        "@bundled-es-modules/glob": "^10.3.13",
        "@bundled-es-modules/memfs": "^4.2.3",
        "path-unified": "^0.1.0",
        "chalk": "^5.3.0",
        "change-case": "^5.3.0",
        "commander": "^8.3.0",
        "is-plain-obj": "^4.1.0",
        "json5": "^2.2.2",
        "lodash-es": "^4.17.21",
        "tinycolor2": "^1.6.0"
      },
      "devDependencies": {
        "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
        "@changesets/cli": "^2.27.1",
        "@commitlint/cli": "^18.4.3",
        "@commitlint/config-conventional": "^18.4.3",
        "@esm-bundle/chai-as-promised": "^7.1.1",
        "@types/chai": "^4.3.9",
        "@types/lodash-es": "^4.17.12",
        "@types/tinycolor2": "^1.4.6",
        "@web/test-runner": "^0.18.0",
        "@web/test-runner-commands": "^0.9.0",
        "@web/test-runner-playwright": "^0.11.0",
        "chai": "^5.0.0-alpha.2",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-config-react-app": "^7.0.1",
        "fs-extra": "^10.0.0",
        "hanbi": "^1.0.1",
        "husky": "^8.0.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^8.0.0",
        "jsdoc-tsimport-plugin": "^1.0.5",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "memfs": "^4.6.0",
        "mocha": "^10.2.0",
        "npm-run-all": "^4.1.5",
        "patch-package": "^8.0.0",
        "prettier": "^3.0.3",
        "sass": "^1.69.5",
        "stylus": "^0.56.0",
        "typescript": "^5.3.3",
        "yaml": "^2.3.4"
      },
      "_id": "style-dictionary@4.0.0-prerelease.7",
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n\n> _Style once, use everywhere._\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on YouTube\n\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Experiment in the playground\n\nTry the browser-based Style Dictionary playground: [https://www.style-dictionary-play.dev/](https://www.style-dictionary-play.dev/), built by the folks at [\\<div\\>RIOTS](https://divriots.com/).\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Example](#example)\n- [Quick Start](#quick-start)\n- [Design Tokens](#design-tokens)\n- [Extending](#extending)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n_Note that you must have node (and npm) installed._\n\nIf you want to use the CLI, you can install it globally via npm:\n\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n\n### CLI\n\n```bash\n$ style-dictionary build\n```\n\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag                    | Short Flag | Description                                                |\n| ----------------------- | ---------- | ---------------------------------------------------------- |\n| --config \\[path\\]       | -c         | Set the config file to use. Must be a .json file           |\n| --platform \\[platform\\] | -p         | Only build a specific platform defined in the config file. |\n| --help                  | -h         | Display help content                                       |\n| --version               | -v         | Display the version                                        |\n\n### Node\n\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [\n        {\n          destination: 'variables.scss',\n          format: 'scss/variables',\n        },\n      ],\n    },\n    // ...\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\n\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [\n        {\n          \"destination\": \"scss/_variables.scss\",\n          \"format\": \"scss/variables\"\n        }\n      ]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [\n        {\n          \"destination\": \"font_dimens.xml\",\n          \"format\": \"android/fontDimens\"\n        }\n      ]\n    }\n  }\n}\n```\n\n| Attribute                            | Type              | Description                                                                                                                                                                                                                                                                   |\n| :----------------------------------- | :---------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source                               | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want.                                                        |\n| include                              | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms                            | Object            | Sets of platform files to be built.                                                                                                                                                                                                                                           |\n| platform.transformGroup              | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`.                                                                                                                                                                                           |\n| platform.transforms                  | Array (optional)  | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own.                                                                                                                                                                             |\n| platform.buildPath                   | String (optional) | Base path to build the files, must end with a trailing slash.                                                                                                                                                                                                                 |\n| platform.files                       | Array (optional)  | Files to be generated for this platform.                                                                                                                                                                                                                                      |\n| platform.file.destination            | String (optional) | Location to build the file, will be appended to the buildPath.                                                                                                                                                                                                                |\n| platform.file.format                 | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats)                                                                                                                      |\n| platform.file.options                | Object (optional) | A set of extra options associated with the file.                                                                                                                                                                                                                              |\n| platform.file.options.showFileHeader | Boolean           | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\".                                                                                                                                                    |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\": { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\": { \"value\": \"24px\" },\n      \"base\": { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment will appear in the output files, where relevant or the output format supports comments.\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function (token) {\n    return token.attributes.category === 'time';\n  },\n  transformer: function (token) {\n    return (parseInt(token.original.value) / 1000).toString() + 's';\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "0f5b1da55550255ca20655ec787bee4bff29142a",
      "_nodeVersion": "20.10.0",
      "_npmVersion": "10.2.3",
      "dist": {
        "integrity": "sha512-K5qpS1l/NUH1eV8+XCKVtXe5yrllHz0kbQZKnjcz0+5B8i+d4fhS+niuMJfKHjaE3v6WW1zfSKsXwU0Kr8AgZg==",
        "shasum": "e74e08da653fc714bec3e67660d3653fdf6ef029",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-4.0.0-prerelease.7.tgz",
        "fileCount": 674,
        "unpackedSize": 4192275,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDy3dkOvMLUontpar/+18vL4D8xKgw/854SDCqqx768GwIhAP7SRlP8EUKI1/9rMnrNDQA8dmYyMpTYl3yYYU3qUHmZ"
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_4.0.0-prerelease.7_1704734867951_0.5500329892000533"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-prerelease.8": {
      "name": "style-dictionary",
      "version": "4.0.0-prerelease.8",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "type": "module",
      "exports": {
        ".": "./lib/StyleDictionary.js",
        "./fs": {
          "node": "./lib/fs-node.js",
          "default": "./lib/fs.js"
        },
        "./utils": "./lib/utils/index.js",
        "./types": "./types/index.d.ts"
      },
      "bin": {
        "style-dictionary": "bin/style-dictionary.js"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "scripts": {
        "format": "run-p format:*",
        "format:eslint": "eslint --fix \"**/*.js\"",
        "format:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --write",
        "lint": "run-p lint:*",
        "lint:eslint": "eslint \"**/*.js\"",
        "lint:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --list-different || (echo '↑↑ these files are not prettier formatted ↑↑' && exit 1)",
        "lint:types": "tsc --noEmit",
        "test": "npm run test:browser && npm run test:node",
        "test:browser": "web-test-runner --coverage",
        "test:browser:coverage": "cd coverage/lcov-report && npx http-server -o -c-1",
        "test:browser:watch": "web-test-runner --watch",
        "test:browser:update-snapshots": "web-test-runner --update-snapshots",
        "test:node": "mocha -r mocha-hooks.mjs './__integration__/**/*.test.js' './__tests__/**/*.test.js' './__node_tests__/**/*.test.js'",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "node scripts/inject-version.js && tsc --emitDeclarationOnly && changeset publish",
        "prepare": "husky install",
        "postinstall": "patch-package"
      },
      "lint-staged": {
        "*.js": [
          "eslint",
          "prettier --list-different"
        ],
        "*.md": "prettier --list-different"
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "prettier": {
        "singleQuote": true,
        "arrowParens": "always",
        "trailingComma": "all",
        "printWidth": 100
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        },
        {
          "name": "Joren Broekema",
          "email": "joren.broekema@gmail.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "@bundled-es-modules/deepmerge": "^4.3.1",
        "@bundled-es-modules/glob": "^10.3.13",
        "@bundled-es-modules/memfs": "^4.2.3",
        "path-unified": "^0.1.0",
        "chalk": "^5.3.0",
        "change-case": "^5.3.0",
        "commander": "^8.3.0",
        "is-plain-obj": "^4.1.0",
        "json5": "^2.2.2",
        "lodash-es": "^4.17.21",
        "tinycolor2": "^1.6.0"
      },
      "devDependencies": {
        "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
        "@changesets/cli": "^2.27.1",
        "@commitlint/cli": "^18.4.3",
        "@commitlint/config-conventional": "^18.4.3",
        "@esm-bundle/chai-as-promised": "^7.1.1",
        "@types/chai": "^4.3.9",
        "@types/lodash-es": "^4.17.12",
        "@types/tinycolor2": "^1.4.6",
        "@web/test-runner": "^0.18.0",
        "@web/test-runner-commands": "^0.9.0",
        "@web/test-runner-playwright": "^0.11.0",
        "chai": "^5.0.0-alpha.2",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-config-react-app": "^7.0.1",
        "fs-extra": "^10.0.0",
        "hanbi": "^1.0.1",
        "husky": "^8.0.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^8.0.0",
        "jsdoc-tsimport-plugin": "^1.0.5",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "memfs": "^4.6.0",
        "mocha": "^10.2.0",
        "npm-run-all": "^4.1.5",
        "patch-package": "^8.0.0",
        "prettier": "^3.0.3",
        "sass": "^1.69.5",
        "stylus": "^0.56.0",
        "typescript": "^5.3.3",
        "yaml": "^2.3.4"
      },
      "_id": "style-dictionary@4.0.0-prerelease.8",
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n\n> _Style once, use everywhere._\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on YouTube\n\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Experiment in the playground\n\nTry the browser-based Style Dictionary playground: [https://www.style-dictionary-play.dev/](https://www.style-dictionary-play.dev/), built by the folks at [\\<div\\>RIOTS](https://divriots.com/).\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Example](#example)\n- [Quick Start](#quick-start)\n- [Design Tokens](#design-tokens)\n- [Extending](#extending)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n_Note that you must have node (and npm) installed._\n\nIf you want to use the CLI, you can install it globally via npm:\n\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n\n### CLI\n\n```bash\n$ style-dictionary build\n```\n\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag                    | Short Flag | Description                                                |\n| ----------------------- | ---------- | ---------------------------------------------------------- |\n| --config \\[path\\]       | -c         | Set the config file to use. Must be a .json file           |\n| --platform \\[platform\\] | -p         | Only build a specific platform defined in the config file. |\n| --help                  | -h         | Display help content                                       |\n| --version               | -v         | Display the version                                        |\n\n### Node\n\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [\n        {\n          destination: 'variables.scss',\n          format: 'scss/variables',\n        },\n      ],\n    },\n    // ...\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\n\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [\n        {\n          \"destination\": \"scss/_variables.scss\",\n          \"format\": \"scss/variables\"\n        }\n      ]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [\n        {\n          \"destination\": \"font_dimens.xml\",\n          \"format\": \"android/fontDimens\"\n        }\n      ]\n    }\n  }\n}\n```\n\n| Attribute                            | Type              | Description                                                                                                                                                                                                                                                                   |\n| :----------------------------------- | :---------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source                               | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want.                                                        |\n| include                              | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms                            | Object            | Sets of platform files to be built.                                                                                                                                                                                                                                           |\n| platform.transformGroup              | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`.                                                                                                                                                                                           |\n| platform.transforms                  | Array (optional)  | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own.                                                                                                                                                                             |\n| platform.buildPath                   | String (optional) | Base path to build the files, must end with a trailing slash.                                                                                                                                                                                                                 |\n| platform.files                       | Array (optional)  | Files to be generated for this platform.                                                                                                                                                                                                                                      |\n| platform.file.destination            | String (optional) | Location to build the file, will be appended to the buildPath.                                                                                                                                                                                                                |\n| platform.file.format                 | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats)                                                                                                                      |\n| platform.file.options                | Object (optional) | A set of extra options associated with the file.                                                                                                                                                                                                                              |\n| platform.file.options.showFileHeader | Boolean           | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\".                                                                                                                                                    |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\": { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\": { \"value\": \"24px\" },\n      \"base\": { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment will appear in the output files, where relevant or the output format supports comments.\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function (token) {\n    return token.attributes.category === 'time';\n  },\n  transformer: function (token) {\n    return (parseInt(token.original.value) / 1000).toString() + 's';\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "5fdba2051e1f6e2660a848200cd83677049e3a16",
      "_nodeVersion": "20.10.0",
      "_npmVersion": "10.2.3",
      "dist": {
        "integrity": "sha512-L+iLynBUAsIrNdT3nEvkuZlZ3ibZ+dT9CyPa6pfAf68hgnLErxFbmScbplt1suFnpiv6lLv2fmi3re2MnjqqqQ==",
        "shasum": "a82f3f928f4a09378c02f8eab0461af4c8d10262",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-4.0.0-prerelease.8.tgz",
        "fileCount": 672,
        "unpackedSize": 4190876,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDdMra3Vfex32WCI6TPyoRoM8QPCzwEZG45yyh9uWKgVAIgEAf5nlo86q9n8K3nueC/LZ6ylDbfxCqLm4qcPreYoTE="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_4.0.0-prerelease.8_1705328331239_0.39423395349122003"
      },
      "_hasShrinkwrap": false
    },
    "3.9.2": {
      "name": "style-dictionary",
      "version": "3.9.2",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "properties",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "main": "index.js",
      "types": "types/index.d.ts",
      "bin": {
        "style-dictionary": "bin/style-dictionary"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "scripts": {
        "lint": "eslint --fix index.js \"lib/**/*.js\" \"__tests__/**/*.js\"",
        "test": "npm run test-types && npm run lint && jest --runInBand --silent --coverage",
        "test-types": "tsd",
        "test-watch": "npm run test-types && npm run lint && jest --runInBand --watch",
        "generate-docs": "node ./scripts/generateDocs.js",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "git add . && standard-version -a",
        "prepare": "husky install"
      },
      "standard-version": {
        "scripts": {
          "postbump": "node ./scripts/version.js && npm run generate-docs"
        }
      },
      "jest": {
        "verbose": false,
        "collectCoverageFrom": [
          "lib/**/*.js"
        ],
        "coverageReporters": [
          "html"
        ],
        "coverageDirectory": "docs/coverage",
        "roots": [
          "__tests__",
          "__integration__"
        ],
        "setupFilesAfterEnv": [
          "<rootDir>/__tests__/__setup.js"
        ],
        "testPathIgnorePatterns": [
          "/__tests__/__setup.js",
          "/__tests__/__helpers.js",
          "/__tests__/__assets/",
          "/__tests__/__configs/",
          "/__tests__/__json_files/",
          "/__tests__/__properties/",
          "/__tests__/__output/",
          "/__tests__/formats/__constants.js"
        ],
        "transform": {
          "^.+\\.json5$": "json5-jest",
          "^.+\\.jsonc$": "json5-jest",
          "^.+\\.jsx?$": "babel-jest"
        }
      },
      "husky": {
        "hooks": {
          "pre-commit": "npm test && lint-staged",
          "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
        }
      },
      "lint-staged": {
        "*.js": [
          "npm run lint",
          "git add"
        ]
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "chalk": "^4.0.0",
        "change-case": "^4.1.2",
        "commander": "^8.3.0",
        "fs-extra": "^10.0.0",
        "glob": "^10.3.10",
        "json5": "^2.2.2",
        "jsonc-parser": "^3.0.0",
        "lodash": "^4.17.15",
        "tinycolor2": "^1.4.1"
      },
      "devDependencies": {
        "@babel/preset-env": "^7.16.11",
        "@commitlint/cli": "^16.1.0",
        "@commitlint/config-conventional": "^16.0.0",
        "babel-jest": "^27.4.6",
        "babel-preset-env": "^1.7.0",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-plugin-jest": "^26.0.0",
        "husky": "^7.0.0",
        "istanbul": "^0.4.5",
        "jest": "^27.4.7",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^7.1.0",
        "json5-jest": "^1.0.1",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "node-sass": "^9.0.0",
        "standard-version": "^9.3.2",
        "stylus": "^0.56.0",
        "tsd": "^0.19.1",
        "yaml": "^1.10.2"
      },
      "_id": "style-dictionary@3.9.2",
      "gitHead": "17f4cb2f30bd002dfd55d6ef8c5bee4138de8d64",
      "_nodeVersion": "20.5.0",
      "_npmVersion": "9.8.0",
      "dist": {
        "integrity": "sha512-M2pcQ6hyRtqHOh+NyT6T05R3pD/gwNpuhREBKvxC1En0vyywx+9Wy9nXWT1SZ9ePzv1vAo65ItnpA16tT9ZUCg==",
        "shasum": "5b3ecd4af28a64f4855db71c90d24fd288f27318",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-3.9.2.tgz",
        "fileCount": 610,
        "unpackedSize": 4120118,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDlX1ZVpgA8w5hxcF99TiZ+hxPNPMb5jV14n+5eV3mYRwIhAICbNuK+Qrj+bSY/Ck0ZsIa/GTX3x03x2NgpSrLAEnDQ"
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_3.9.2_1705511839179_0.7303786718517009"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-prerelease.9": {
      "name": "style-dictionary",
      "version": "4.0.0-prerelease.9",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "type": "module",
      "exports": {
        ".": "./lib/StyleDictionary.js",
        "./fs": {
          "node": "./lib/fs-node.js",
          "default": "./lib/fs.js"
        },
        "./utils": "./lib/utils/index.js",
        "./types": "./types/index.d.ts"
      },
      "bin": {
        "style-dictionary": "bin/style-dictionary.js"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "scripts": {
        "format": "run-p format:*",
        "format:eslint": "eslint --fix \"**/*.js\"",
        "format:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --write",
        "lint": "run-p lint:*",
        "lint:eslint": "eslint \"**/*.js\"",
        "lint:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --list-different || (echo '↑↑ these files are not prettier formatted ↑↑' && exit 1)",
        "lint:types": "tsc --noEmit",
        "test": "npm run test:browser && npm run test:node",
        "test:browser": "web-test-runner --coverage",
        "test:browser:coverage": "cd coverage/lcov-report && npx http-server -o -c-1",
        "test:browser:watch": "web-test-runner --watch",
        "test:browser:update-snapshots": "web-test-runner --update-snapshots",
        "test:node": "mocha -r mocha-hooks.mjs './__integration__/**/*.test.js' './__tests__/**/*.test.js' './__node_tests__/**/*.test.js'",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "node scripts/inject-version.js && tsc --emitDeclarationOnly && changeset publish",
        "prepare": "husky install",
        "postinstall": "patch-package"
      },
      "lint-staged": {
        "*.js": [
          "eslint",
          "prettier --list-different"
        ],
        "*.md": "prettier --list-different"
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "prettier": {
        "singleQuote": true,
        "arrowParens": "always",
        "trailingComma": "all",
        "printWidth": 100
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        },
        {
          "name": "Joren Broekema",
          "email": "joren.broekema@gmail.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "@bundled-es-modules/deepmerge": "^4.3.1",
        "@bundled-es-modules/glob": "^10.3.13",
        "@bundled-es-modules/memfs": "^4.2.3",
        "chalk": "^5.3.0",
        "change-case": "^5.3.0",
        "commander": "^8.3.0",
        "is-plain-obj": "^4.1.0",
        "json5": "^2.2.2",
        "lodash-es": "^4.17.21",
        "path-unified": "^0.1.0",
        "tinycolor2": "^1.6.0"
      },
      "devDependencies": {
        "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
        "@changesets/cli": "^2.27.1",
        "@commitlint/cli": "^18.4.3",
        "@commitlint/config-conventional": "^18.4.3",
        "@esm-bundle/chai-as-promised": "^7.1.1",
        "@types/chai": "^4.3.9",
        "@types/lodash-es": "^4.17.12",
        "@types/tinycolor2": "^1.4.6",
        "@web/test-runner": "^0.18.0",
        "@web/test-runner-commands": "^0.9.0",
        "@web/test-runner-playwright": "^0.11.0",
        "chai": "^5.0.0-alpha.2",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-config-react-app": "^7.0.1",
        "eslint-plugin-mocha": "^10.2.0",
        "fs-extra": "^10.0.0",
        "hanbi": "^1.0.1",
        "husky": "^8.0.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^8.0.0",
        "jsdoc-tsimport-plugin": "^1.0.5",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "memfs": "^4.6.0",
        "mocha": "^10.2.0",
        "npm-run-all": "^4.1.5",
        "patch-package": "^8.0.0",
        "prettier": "^3.0.3",
        "sass": "^1.69.5",
        "stylus": "^0.56.0",
        "typescript": "^5.3.3",
        "yaml": "^2.3.4"
      },
      "_id": "style-dictionary@4.0.0-prerelease.9",
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n\n> _Style once, use everywhere._\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on YouTube\n\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Experiment in the playground\n\nTry the browser-based Style Dictionary playground: [https://www.style-dictionary-play.dev/](https://www.style-dictionary-play.dev/), built by the folks at [\\<div\\>RIOTS](https://divriots.com/).\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Example](#example)\n- [Quick Start](#quick-start)\n- [Design Tokens](#design-tokens)\n- [Extending](#extending)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n_Note that you must have node (and npm) installed._\n\nIf you want to use the CLI, you can install it globally via npm:\n\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n\n### CLI\n\n```bash\n$ style-dictionary build\n```\n\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag                    | Short Flag | Description                                                |\n| ----------------------- | ---------- | ---------------------------------------------------------- |\n| --config \\[path\\]       | -c         | Set the config file to use. Must be a .json file           |\n| --platform \\[platform\\] | -p         | Only build a specific platform defined in the config file. |\n| --help                  | -h         | Display help content                                       |\n| --version               | -v         | Display the version                                        |\n\n### Node\n\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [\n        {\n          destination: 'variables.scss',\n          format: 'scss/variables',\n        },\n      ],\n    },\n    // ...\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\n\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [\n        {\n          \"destination\": \"scss/_variables.scss\",\n          \"format\": \"scss/variables\"\n        }\n      ]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [\n        {\n          \"destination\": \"font_dimens.xml\",\n          \"format\": \"android/fontDimens\"\n        }\n      ]\n    }\n  }\n}\n```\n\n| Attribute                            | Type              | Description                                                                                                                                                                                                                                                                   |\n| :----------------------------------- | :---------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source                               | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want.                                                        |\n| include                              | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms                            | Object            | Sets of platform files to be built.                                                                                                                                                                                                                                           |\n| platform.transformGroup              | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`.                                                                                                                                                                                           |\n| platform.transforms                  | Array (optional)  | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own.                                                                                                                                                                             |\n| platform.buildPath                   | String (optional) | Base path to build the files, must end with a trailing slash.                                                                                                                                                                                                                 |\n| platform.files                       | Array (optional)  | Files to be generated for this platform.                                                                                                                                                                                                                                      |\n| platform.file.destination            | String (optional) | Location to build the file, will be appended to the buildPath.                                                                                                                                                                                                                |\n| platform.file.format                 | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats)                                                                                                                      |\n| platform.file.options                | Object (optional) | A set of extra options associated with the file.                                                                                                                                                                                                                              |\n| platform.file.options.showFileHeader | Boolean           | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\".                                                                                                                                                    |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\": { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\": { \"value\": \"24px\" },\n      \"base\": { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment will appear in the output files, where relevant or the output format supports comments.\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function (token) {\n    return token.attributes.category === 'time';\n  },\n  transformer: function (token) {\n    return (parseInt(token.original.value) / 1000).toString() + 's';\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "7a1e446a0bf11cdc67975ec303207f83903ffa12",
      "_nodeVersion": "20.10.0",
      "_npmVersion": "10.2.3",
      "dist": {
        "integrity": "sha512-fpQe740k88tf2HqkqTn2bOOUKTUM2OA+z0Xsy/EAbgncFjohrCdJ855w2Gn9LW0K867qB82Or7lpL8xwaaD3ug==",
        "shasum": "daea8321073689fca3d60ab2933980ef6c4594c0",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-4.0.0-prerelease.9.tgz",
        "fileCount": 672,
        "unpackedSize": 4195883,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEx89GKP3vZj/eghlh0hQ5mwmxp1eFqvw9q0ogcG4ZGqAiAfStVG/ju0WC0sDCbj6IPNvnZMiMrkD3K/fiFMQUBLQw=="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_4.0.0-prerelease.9_1706003501150_0.6785648842349616"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-prerelease.10": {
      "name": "style-dictionary",
      "version": "4.0.0-prerelease.10",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "type": "module",
      "exports": {
        ".": "./lib/StyleDictionary.js",
        "./fs": {
          "node": "./lib/fs-node.js",
          "default": "./lib/fs.js"
        },
        "./utils": "./lib/utils/index.js",
        "./types": "./types/index.d.ts"
      },
      "bin": {
        "style-dictionary": "bin/style-dictionary.js"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "scripts": {
        "format": "run-p format:*",
        "format:eslint": "eslint --fix \"**/*.js\"",
        "format:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --write",
        "lint": "run-p lint:*",
        "lint:eslint": "eslint \"**/*.js\"",
        "lint:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --list-different || (echo '↑↑ these files are not prettier formatted ↑↑' && exit 1)",
        "lint:types": "tsc --noEmit",
        "test": "npm run test:browser && npm run test:node",
        "test:browser": "web-test-runner --coverage",
        "test:browser:coverage": "cd coverage/lcov-report && npx http-server -o -c-1",
        "test:browser:watch": "web-test-runner --watch",
        "test:browser:update-snapshots": "web-test-runner --update-snapshots",
        "test:node": "mocha -r mocha-hooks.mjs './__integration__/**/*.test.js' './__tests__/**/*.test.js' './__node_tests__/**/*.test.js'",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "node scripts/inject-version.js && tsc --emitDeclarationOnly && changeset publish",
        "prepare": "husky install",
        "postinstall": "patch-package"
      },
      "lint-staged": {
        "*.js": [
          "eslint",
          "prettier --list-different"
        ],
        "*.md": "prettier --list-different"
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "prettier": {
        "singleQuote": true,
        "arrowParens": "always",
        "trailingComma": "all",
        "printWidth": 100
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        },
        {
          "name": "Joren Broekema",
          "email": "joren.broekema@gmail.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "@bundled-es-modules/deepmerge": "^4.3.1",
        "@bundled-es-modules/glob": "^10.3.13",
        "@bundled-es-modules/memfs": "^4.2.3",
        "chalk": "^5.3.0",
        "change-case": "^5.3.0",
        "commander": "^8.3.0",
        "is-plain-obj": "^4.1.0",
        "json5": "^2.2.2",
        "lodash-es": "^4.17.21",
        "path-unified": "^0.1.0",
        "tinycolor2": "^1.6.0"
      },
      "devDependencies": {
        "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
        "@changesets/cli": "^2.27.1",
        "@commitlint/cli": "^18.4.3",
        "@commitlint/config-conventional": "^18.4.3",
        "@esm-bundle/chai-as-promised": "^7.1.1",
        "@types/chai": "^4.3.9",
        "@types/lodash-es": "^4.17.12",
        "@types/tinycolor2": "^1.4.6",
        "@web/test-runner": "^0.18.0",
        "@web/test-runner-commands": "^0.9.0",
        "@web/test-runner-playwright": "^0.11.0",
        "chai": "^5.0.0-alpha.2",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-config-react-app": "^7.0.1",
        "eslint-plugin-mocha": "^10.2.0",
        "fs-extra": "^10.0.0",
        "hanbi": "^1.0.1",
        "husky": "^8.0.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^8.0.0",
        "jsdoc-tsimport-plugin": "^1.0.5",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "memfs": "^4.6.0",
        "mocha": "^10.2.0",
        "npm-run-all": "^4.1.5",
        "patch-package": "^8.0.0",
        "prettier": "^3.0.3",
        "sass": "^1.69.5",
        "stylus": "^0.56.0",
        "typescript": "^5.3.3",
        "yaml": "^2.3.4"
      },
      "_id": "style-dictionary@4.0.0-prerelease.10",
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n\n> _Style once, use everywhere._\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on YouTube\n\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Experiment in the playground\n\nTry the browser-based Style Dictionary playground: [https://www.style-dictionary-play.dev/](https://www.style-dictionary-play.dev/), built by the folks at [\\<div\\>RIOTS](https://divriots.com/).\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Example](#example)\n- [Quick Start](#quick-start)\n- [Design Tokens](#design-tokens)\n- [Extending](#extending)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n_Note that you must have node (and npm) installed._\n\nIf you want to use the CLI, you can install it globally via npm:\n\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n\n### CLI\n\n```bash\n$ style-dictionary build\n```\n\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag                    | Short Flag | Description                                                |\n| ----------------------- | ---------- | ---------------------------------------------------------- |\n| --config \\[path\\]       | -c         | Set the config file to use. Must be a .json file           |\n| --platform \\[platform\\] | -p         | Only build a specific platform defined in the config file. |\n| --help                  | -h         | Display help content                                       |\n| --version               | -v         | Display the version                                        |\n\n### Node\n\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [\n        {\n          destination: 'variables.scss',\n          format: 'scss/variables',\n        },\n      ],\n    },\n    // ...\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\n\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [\n        {\n          \"destination\": \"scss/_variables.scss\",\n          \"format\": \"scss/variables\"\n        }\n      ]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [\n        {\n          \"destination\": \"font_dimens.xml\",\n          \"format\": \"android/fontDimens\"\n        }\n      ]\n    }\n  }\n}\n```\n\n| Attribute                            | Type              | Description                                                                                                                                                                                                                                                                   |\n| :----------------------------------- | :---------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source                               | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want.                                                        |\n| include                              | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms                            | Object            | Sets of platform files to be built.                                                                                                                                                                                                                                           |\n| platform.transformGroup              | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`.                                                                                                                                                                                           |\n| platform.transforms                  | Array (optional)  | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own.                                                                                                                                                                             |\n| platform.buildPath                   | String (optional) | Base path to build the files, must end with a trailing slash.                                                                                                                                                                                                                 |\n| platform.files                       | Array (optional)  | Files to be generated for this platform.                                                                                                                                                                                                                                      |\n| platform.file.destination            | String (optional) | Location to build the file, will be appended to the buildPath.                                                                                                                                                                                                                |\n| platform.file.format                 | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats)                                                                                                                      |\n| platform.file.options                | Object (optional) | A set of extra options associated with the file.                                                                                                                                                                                                                              |\n| platform.file.options.showFileHeader | Boolean           | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\".                                                                                                                                                    |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\": { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\": { \"value\": \"24px\" },\n      \"base\": { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment will appear in the output files, where relevant or the output format supports comments.\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function (token) {\n    return token.attributes.category === 'time';\n  },\n  transformer: function (token) {\n    return (parseInt(token.original.value) / 1000).toString() + 's';\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "0e0dd463f9d2f680a772834cb4d949a00f0aecb3",
      "_nodeVersion": "20.11.0",
      "_npmVersion": "10.2.4",
      "dist": {
        "integrity": "sha512-lk0qRDGvbqj+xT2qTZHxKuSqW51NZfvyXXEoU7dI0uu2dgD+oTakAVhZGDSaXypxEjGhJyZexeE9QujH33Gliw==",
        "shasum": "9c370afe32284bb94e1b86946968d3b8e5aed4fe",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-4.0.0-prerelease.10.tgz",
        "fileCount": 672,
        "unpackedSize": 4196443,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDRVWlvMOULJweCrx71mvFNaVwKy7Il7pR9zGgTmvP83QIgFeMT/pXy820HFMTGVz5YQLef6I0M3dLjfQgn/qFTUME="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_4.0.0-prerelease.10_1706222460297_0.9988862838385204"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-prerelease.11": {
      "name": "style-dictionary",
      "version": "4.0.0-prerelease.11",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "type": "module",
      "exports": {
        ".": "./lib/StyleDictionary.js",
        "./fs": {
          "node": "./lib/fs-node.js",
          "default": "./lib/fs.js"
        },
        "./utils": "./lib/utils/index.js",
        "./types": "./types/index.d.ts"
      },
      "bin": {
        "style-dictionary": "bin/style-dictionary.js"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "scripts": {
        "format": "run-p format:*",
        "format:eslint": "eslint --fix \"**/*.js\"",
        "format:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --write",
        "lint": "run-p lint:*",
        "lint:eslint": "eslint \"**/*.js\"",
        "lint:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --list-different || (echo '↑↑ these files are not prettier formatted ↑↑' && exit 1)",
        "lint:types": "tsc --noEmit",
        "test": "npm run test:browser && npm run test:node",
        "test:browser": "web-test-runner --coverage",
        "test:browser:coverage": "cd coverage/lcov-report && npx http-server -o -c-1",
        "test:browser:watch": "web-test-runner --watch",
        "test:browser:update-snapshots": "web-test-runner --update-snapshots",
        "test:node": "mocha -r mocha-hooks.mjs './__integration__/**/*.test.js' './__tests__/**/*.test.js' './__node_tests__/**/*.test.js'",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "node scripts/inject-version.js && tsc --emitDeclarationOnly && changeset publish",
        "postinstall": "node scripts/postinstall-dev.cjs"
      },
      "lint-staged": {
        "*.js": [
          "eslint",
          "prettier --list-different"
        ],
        "*.md": "prettier --list-different"
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "prettier": {
        "singleQuote": true,
        "arrowParens": "always",
        "trailingComma": "all",
        "printWidth": 100
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        },
        {
          "name": "Joren Broekema",
          "email": "joren.broekema@gmail.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "@bundled-es-modules/deepmerge": "^4.3.1",
        "@bundled-es-modules/glob": "^10.3.13",
        "@bundled-es-modules/memfs": "^4.2.3",
        "chalk": "^5.3.0",
        "change-case": "^5.3.0",
        "commander": "^8.3.0",
        "is-plain-obj": "^4.1.0",
        "json5": "^2.2.2",
        "lodash-es": "^4.17.21",
        "path-unified": "^0.1.0",
        "tinycolor2": "^1.6.0"
      },
      "devDependencies": {
        "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
        "@changesets/cli": "^2.27.1",
        "@commitlint/cli": "^18.4.3",
        "@commitlint/config-conventional": "^18.4.3",
        "@esm-bundle/chai-as-promised": "^7.1.1",
        "@types/chai": "^4.3.9",
        "@types/lodash-es": "^4.17.12",
        "@types/tinycolor2": "^1.4.6",
        "@web/test-runner": "^0.18.0",
        "@web/test-runner-commands": "^0.9.0",
        "@web/test-runner-playwright": "^0.11.0",
        "chai": "^5.0.0-alpha.2",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-config-react-app": "^7.0.1",
        "eslint-plugin-mocha": "^10.2.0",
        "fs-extra": "^10.0.0",
        "hanbi": "^1.0.1",
        "husky": "^8.0.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^8.0.0",
        "jsdoc-tsimport-plugin": "^1.0.5",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "memfs": "^4.6.0",
        "mocha": "^10.2.0",
        "npm-run-all": "^4.1.5",
        "patch-package": "^8.0.0",
        "prettier": "^3.0.3",
        "sass": "^1.69.5",
        "stylus": "^0.56.0",
        "typescript": "^5.3.3",
        "yaml": "^2.3.4"
      },
      "_id": "style-dictionary@4.0.0-prerelease.11",
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n\n> _Style once, use everywhere._\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on YouTube\n\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Experiment in the playground\n\nTry the browser-based Style Dictionary playground: [https://www.style-dictionary-play.dev/](https://www.style-dictionary-play.dev/), built by the folks at [\\<div\\>RIOTS](https://divriots.com/).\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Example](#example)\n- [Quick Start](#quick-start)\n- [Design Tokens](#design-tokens)\n- [Extending](#extending)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n_Note that you must have node (and npm) installed._\n\nIf you want to use the CLI, you can install it globally via npm:\n\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n\n### CLI\n\n```bash\n$ style-dictionary build\n```\n\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag                    | Short Flag | Description                                                |\n| ----------------------- | ---------- | ---------------------------------------------------------- |\n| --config \\[path\\]       | -c         | Set the config file to use. Must be a .json file           |\n| --platform \\[platform\\] | -p         | Only build a specific platform defined in the config file. |\n| --help                  | -h         | Display help content                                       |\n| --version               | -v         | Display the version                                        |\n\n### Node\n\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [\n        {\n          destination: 'variables.scss',\n          format: 'scss/variables',\n        },\n      ],\n    },\n    // ...\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\n\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [\n        {\n          \"destination\": \"scss/_variables.scss\",\n          \"format\": \"scss/variables\"\n        }\n      ]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [\n        {\n          \"destination\": \"font_dimens.xml\",\n          \"format\": \"android/fontDimens\"\n        }\n      ]\n    }\n  }\n}\n```\n\n| Attribute                            | Type              | Description                                                                                                                                                                                                                                                                   |\n| :----------------------------------- | :---------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source                               | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want.                                                        |\n| include                              | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms                            | Object            | Sets of platform files to be built.                                                                                                                                                                                                                                           |\n| platform.transformGroup              | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`.                                                                                                                                                                                           |\n| platform.transforms                  | Array (optional)  | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own.                                                                                                                                                                             |\n| platform.buildPath                   | String (optional) | Base path to build the files, must end with a trailing slash.                                                                                                                                                                                                                 |\n| platform.files                       | Array (optional)  | Files to be generated for this platform.                                                                                                                                                                                                                                      |\n| platform.file.destination            | String (optional) | Location to build the file, will be appended to the buildPath.                                                                                                                                                                                                                |\n| platform.file.format                 | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats)                                                                                                                      |\n| platform.file.options                | Object (optional) | A set of extra options associated with the file.                                                                                                                                                                                                                              |\n| platform.file.options.showFileHeader | Boolean           | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\".                                                                                                                                                    |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\": { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\": { \"value\": \"24px\" },\n      \"base\": { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment will appear in the output files, where relevant or the output format supports comments.\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function (token) {\n    return token.attributes.category === 'time';\n  },\n  transformer: function (token) {\n    return (parseInt(token.original.value) / 1000).toString() + 's';\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "6857825fc33fd7050a087f3c4fe963b6c1da408c",
      "_nodeVersion": "20.11.0",
      "_npmVersion": "10.2.4",
      "dist": {
        "integrity": "sha512-3LBAR6SxJh4fsKKINxKtwr5dnoxV4xb2W9iK7Sm1v+trWqD0eK2KiJEMkK0KJ0ehQdm7ZFDjjGzdM/Y9jrdehA==",
        "shasum": "b0cf3de344d11a522d30079c010b07f3ceb44746",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-4.0.0-prerelease.11.tgz",
        "fileCount": 672,
        "unpackedSize": 4196430,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICYYbhv+6qaMy+y4Elw4wlAyaMbQlbpGFt01N9zLYfvlAiBBfeIKQy5xDJ6UVNoWCFOh4EGWIZC54Q7DgAPnNrUpKg=="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_4.0.0-prerelease.11_1706269375692_0.020562297552126907"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-prerelease.12": {
      "name": "style-dictionary",
      "version": "4.0.0-prerelease.12",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "type": "module",
      "exports": {
        ".": "./lib/StyleDictionary.js",
        "./fs": {
          "node": "./lib/fs-node.js",
          "default": "./lib/fs.js"
        },
        "./utils": "./lib/utils/index.js",
        "./types": "./types/index.d.ts"
      },
      "bin": {
        "style-dictionary": "bin/style-dictionary.js"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "scripts": {
        "format": "run-p format:*",
        "format:eslint": "eslint --fix \"**/*.js\"",
        "format:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --write",
        "lint": "run-p lint:*",
        "lint:eslint": "eslint \"**/*.js\"",
        "lint:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --list-different || (echo '↑↑ these files are not prettier formatted ↑↑' && exit 1)",
        "lint:types": "tsc --noEmit",
        "test": "npm run test:browser && npm run test:node",
        "test:browser": "web-test-runner --coverage",
        "test:browser:coverage": "cd coverage/lcov-report && npx http-server -o -c-1",
        "test:browser:watch": "web-test-runner --watch",
        "test:browser:update-snapshots": "web-test-runner --update-snapshots",
        "test:node": "mocha -r mocha-hooks.mjs './__integration__/**/*.test.js' './__tests__/**/*.test.js' './__node_tests__/**/*.test.js'",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "node scripts/inject-version.js && tsc --emitDeclarationOnly && changeset publish",
        "postinstall": "node scripts/postinstall-dev.cjs"
      },
      "lint-staged": {
        "*.js": [
          "eslint",
          "prettier --list-different"
        ],
        "*.md": "prettier --list-different"
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "prettier": {
        "singleQuote": true,
        "arrowParens": "always",
        "trailingComma": "all",
        "printWidth": 100
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        },
        {
          "name": "Joren Broekema",
          "email": "joren.broekema@gmail.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "@bundled-es-modules/deepmerge": "^4.3.1",
        "@bundled-es-modules/glob": "^10.3.13",
        "@bundled-es-modules/memfs": "^4.2.3",
        "chalk": "^5.3.0",
        "change-case": "^5.3.0",
        "commander": "^8.3.0",
        "is-plain-obj": "^4.1.0",
        "json5": "^2.2.2",
        "lodash-es": "^4.17.21",
        "path-unified": "^0.1.0",
        "tinycolor2": "^1.6.0"
      },
      "devDependencies": {
        "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
        "@changesets/cli": "^2.27.1",
        "@commitlint/cli": "^18.4.3",
        "@commitlint/config-conventional": "^18.4.3",
        "@esm-bundle/chai-as-promised": "^7.1.1",
        "@types/chai": "^4.3.9",
        "@types/lodash-es": "^4.17.12",
        "@types/tinycolor2": "^1.4.6",
        "@web/test-runner": "^0.18.0",
        "@web/test-runner-commands": "^0.9.0",
        "@web/test-runner-playwright": "^0.11.0",
        "chai": "^5.0.0-alpha.2",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-config-react-app": "^7.0.1",
        "eslint-plugin-mocha": "^10.2.0",
        "fs-extra": "^10.0.0",
        "hanbi": "^1.0.1",
        "husky": "^8.0.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^8.0.0",
        "jsdoc-tsimport-plugin": "^1.0.5",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "memfs": "^4.6.0",
        "mocha": "^10.2.0",
        "npm-run-all": "^4.1.5",
        "patch-package": "^8.0.0",
        "prettier": "^3.0.3",
        "sass": "^1.69.5",
        "stylus": "^0.56.0",
        "typescript": "^5.3.3",
        "yaml": "^2.3.4"
      },
      "_id": "style-dictionary@4.0.0-prerelease.12",
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n\n> _Style once, use everywhere._\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on YouTube\n\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Experiment in the playground\n\nTry the browser-based Style Dictionary playground: [https://www.style-dictionary-play.dev/](https://www.style-dictionary-play.dev/), built by the folks at [\\<div\\>RIOTS](https://divriots.com/).\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Example](#example)\n- [Quick Start](#quick-start)\n- [Design Tokens](#design-tokens)\n- [Extending](#extending)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n_Note that you must have node (and npm) installed._\n\nIf you want to use the CLI, you can install it globally via npm:\n\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n\n### CLI\n\n```bash\n$ style-dictionary build\n```\n\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag                    | Short Flag | Description                                                |\n| ----------------------- | ---------- | ---------------------------------------------------------- |\n| --config \\[path\\]       | -c         | Set the config file to use. Must be a .json file           |\n| --platform \\[platform\\] | -p         | Only build a specific platform defined in the config file. |\n| --help                  | -h         | Display help content                                       |\n| --version               | -v         | Display the version                                        |\n\n### Node\n\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [\n        {\n          destination: 'variables.scss',\n          format: 'scss/variables',\n        },\n      ],\n    },\n    // ...\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\n\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [\n        {\n          \"destination\": \"scss/_variables.scss\",\n          \"format\": \"scss/variables\"\n        }\n      ]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [\n        {\n          \"destination\": \"font_dimens.xml\",\n          \"format\": \"android/fontDimens\"\n        }\n      ]\n    }\n  }\n}\n```\n\n| Attribute                            | Type              | Description                                                                                                                                                                                                                                                                   |\n| :----------------------------------- | :---------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source                               | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want.                                                        |\n| include                              | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms                            | Object            | Sets of platform files to be built.                                                                                                                                                                                                                                           |\n| platform.transformGroup              | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`.                                                                                                                                                                                           |\n| platform.transforms                  | Array (optional)  | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own.                                                                                                                                                                             |\n| platform.buildPath                   | String (optional) | Base path to build the files, must end with a trailing slash.                                                                                                                                                                                                                 |\n| platform.files                       | Array (optional)  | Files to be generated for this platform.                                                                                                                                                                                                                                      |\n| platform.file.destination            | String (optional) | Location to build the file, will be appended to the buildPath.                                                                                                                                                                                                                |\n| platform.file.format                 | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats)                                                                                                                      |\n| platform.file.options                | Object (optional) | A set of extra options associated with the file.                                                                                                                                                                                                                              |\n| platform.file.options.showFileHeader | Boolean           | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\".                                                                                                                                                    |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\": { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\": { \"value\": \"24px\" },\n      \"base\": { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment will appear in the output files, where relevant or the output format supports comments.\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function (token) {\n    return token.attributes.category === 'time';\n  },\n  transformer: function (token) {\n    return (parseInt(token.original.value) / 1000).toString() + 's';\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "290cf441544281f392599b3b41adeccbdcd6a0ae",
      "_nodeVersion": "20.11.0",
      "_npmVersion": "10.2.4",
      "dist": {
        "integrity": "sha512-O/TPTzxzTiajO+w2eBsIJdRWd2+2srhbnBxKvATLQvh73SaUeHIyZdGjsyXfcZUFxIajgFO6Mu3fMUeTd9Y1og==",
        "shasum": "d8337a8ebd7dd288899862e29ce648def14c130a",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-4.0.0-prerelease.12.tgz",
        "fileCount": 673,
        "unpackedSize": 4196593,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQD0g4UKT7x9tbe9oqetcr9LT3DVGMhb74qyYy5ra9xp9gIgARBvez6QXDGh0hGyIExWNLiPkW2KEqwT6TEjZ+P5aFY="
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_4.0.0-prerelease.12_1706269944384_0.5729378613152578"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-prerelease.13": {
      "name": "style-dictionary",
      "version": "4.0.0-prerelease.13",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "type": "module",
      "exports": {
        ".": "./lib/StyleDictionary.js",
        "./fs": {
          "node": "./lib/fs-node.js",
          "default": "./lib/fs.js"
        },
        "./utils": "./lib/utils/index.js",
        "./types": "./types/index.d.ts"
      },
      "bin": {
        "style-dictionary": "bin/style-dictionary.js"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "scripts": {
        "format": "run-p format:*",
        "format:eslint": "eslint --fix \"**/*.js\"",
        "format:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --write",
        "lint": "run-p lint:*",
        "lint:eslint": "eslint \"**/*.js\"",
        "lint:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --list-different || (echo '↑↑ these files are not prettier formatted ↑↑' && exit 1)",
        "lint:types": "tsc --noEmit",
        "test": "npm run test:browser && npm run test:node",
        "test:browser": "web-test-runner --coverage",
        "test:browser:coverage": "cd coverage/lcov-report && npx http-server -o -c-1",
        "test:browser:watch": "web-test-runner --watch",
        "test:browser:update-snapshots": "web-test-runner --update-snapshots",
        "test:node": "mocha -r mocha-hooks.mjs './__integration__/**/*.test.js' './__tests__/**/*.test.js' './__node_tests__/**/*.test.js'",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "node scripts/inject-version.js && tsc --emitDeclarationOnly && changeset publish",
        "prepare": "husky install",
        "postinstall": "patch-package"
      },
      "lint-staged": {
        "*.js": [
          "eslint",
          "prettier --list-different"
        ],
        "*.md": "prettier --list-different"
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "prettier": {
        "singleQuote": true,
        "arrowParens": "always",
        "trailingComma": "all",
        "printWidth": 100
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        },
        {
          "name": "Joren Broekema",
          "email": "joren.broekema@gmail.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "@bundled-es-modules/deepmerge": "^4.3.1",
        "@bundled-es-modules/glob": "^10.3.13",
        "@bundled-es-modules/memfs": "^4.2.3",
        "chalk": "^5.3.0",
        "change-case": "^5.3.0",
        "commander": "^8.3.0",
        "is-plain-obj": "^4.1.0",
        "json5": "^2.2.2",
        "lodash-es": "^4.17.21",
        "patch-package": "^8.0.0",
        "path-unified": "^0.1.0",
        "tinycolor2": "^1.6.0"
      },
      "devDependencies": {
        "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
        "@changesets/cli": "^2.27.1",
        "@commitlint/cli": "^18.4.3",
        "@commitlint/config-conventional": "^18.4.3",
        "@esm-bundle/chai-as-promised": "^7.1.1",
        "@types/chai": "^4.3.9",
        "@types/lodash-es": "^4.17.12",
        "@types/tinycolor2": "^1.4.6",
        "@web/test-runner": "^0.18.0",
        "@web/test-runner-commands": "^0.9.0",
        "@web/test-runner-playwright": "^0.11.0",
        "chai": "^5.0.0-alpha.2",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-config-react-app": "^7.0.1",
        "eslint-plugin-mocha": "^10.2.0",
        "fs-extra": "^10.0.0",
        "hanbi": "^1.0.1",
        "husky": "^8.0.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^8.0.0",
        "jsdoc-tsimport-plugin": "^1.0.5",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "memfs": "^4.6.0",
        "mocha": "^10.2.0",
        "npm-run-all": "^4.1.5",
        "prettier": "^3.0.3",
        "sass": "^1.69.5",
        "stylus": "^0.56.0",
        "typescript": "^5.3.3",
        "yaml": "^2.3.4"
      },
      "_id": "style-dictionary@4.0.0-prerelease.13",
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n\n> _Style once, use everywhere._\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on YouTube\n\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Experiment in the playground\n\nTry the browser-based Style Dictionary playground: [https://www.style-dictionary-play.dev/](https://www.style-dictionary-play.dev/), built by the folks at [\\<div\\>RIOTS](https://divriots.com/).\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Example](#example)\n- [Quick Start](#quick-start)\n- [Design Tokens](#design-tokens)\n- [Extending](#extending)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n_Note that you must have node (and npm) installed._\n\nIf you want to use the CLI, you can install it globally via npm:\n\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n\n### CLI\n\n```bash\n$ style-dictionary build\n```\n\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag                    | Short Flag | Description                                                |\n| ----------------------- | ---------- | ---------------------------------------------------------- |\n| --config \\[path\\]       | -c         | Set the config file to use. Must be a .json file           |\n| --platform \\[platform\\] | -p         | Only build a specific platform defined in the config file. |\n| --help                  | -h         | Display help content                                       |\n| --version               | -v         | Display the version                                        |\n\n### Node\n\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [\n        {\n          destination: 'variables.scss',\n          format: 'scss/variables',\n        },\n      ],\n    },\n    // ...\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\n\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [\n        {\n          \"destination\": \"scss/_variables.scss\",\n          \"format\": \"scss/variables\"\n        }\n      ]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [\n        {\n          \"destination\": \"font_dimens.xml\",\n          \"format\": \"android/fontDimens\"\n        }\n      ]\n    }\n  }\n}\n```\n\n| Attribute                            | Type              | Description                                                                                                                                                                                                                                                                   |\n| :----------------------------------- | :---------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source                               | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want.                                                        |\n| include                              | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms                            | Object            | Sets of platform files to be built.                                                                                                                                                                                                                                           |\n| platform.transformGroup              | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`.                                                                                                                                                                                           |\n| platform.transforms                  | Array (optional)  | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own.                                                                                                                                                                             |\n| platform.buildPath                   | String (optional) | Base path to build the files, must end with a trailing slash.                                                                                                                                                                                                                 |\n| platform.files                       | Array (optional)  | Files to be generated for this platform.                                                                                                                                                                                                                                      |\n| platform.file.destination            | String (optional) | Location to build the file, will be appended to the buildPath.                                                                                                                                                                                                                |\n| platform.file.format                 | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats)                                                                                                                      |\n| platform.file.options                | Object (optional) | A set of extra options associated with the file.                                                                                                                                                                                                                              |\n| platform.file.options.showFileHeader | Boolean           | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\".                                                                                                                                                    |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\": { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\": { \"value\": \"24px\" },\n      \"base\": { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment will appear in the output files, where relevant or the output format supports comments.\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function (token) {\n    return token.attributes.category === 'time';\n  },\n  transformer: function (token) {\n    return (parseInt(token.original.value) / 1000).toString() + 's';\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "b3f5d8624e64826f2744dbc8cb0b76bdfe6b5eb9",
      "_nodeVersion": "20.11.0",
      "_npmVersion": "10.2.4",
      "dist": {
        "integrity": "sha512-Y6Yzu2rGBuYCf8hAMuUNbez89YAmcYNqLQmeTfz6dED0IUv1HzYRAMNy9uP5jOC1FUX5YLCBzWraTQsS0Se1PA==",
        "shasum": "ac9427c302b5ecacf576afc49aa1064d9a63994d",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-4.0.0-prerelease.13.tgz",
        "fileCount": 672,
        "unpackedSize": 4196443,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDSrW91LdIxYxD9/IQdJU2h6IeWsnEdoSXfhQtQEAGsDgIhAPOG85vah735LRo1fv+2rSSubPxfmM1IpxtZXSXxwpVO"
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_4.0.0-prerelease.13_1706280194701_0.44846167604082554"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-prerelease.14": {
      "name": "style-dictionary",
      "version": "4.0.0-prerelease.14",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "type": "module",
      "exports": {
        ".": "./lib/StyleDictionary.js",
        "./fs": {
          "node": "./lib/fs-node.js",
          "default": "./lib/fs.js"
        },
        "./utils": "./lib/utils/index.js",
        "./types": "./types/index.d.ts"
      },
      "bin": {
        "style-dictionary": "bin/style-dictionary.js"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "scripts": {
        "format": "run-p format:*",
        "format:eslint": "eslint --fix \"**/*.js\"",
        "format:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --write",
        "lint": "run-p lint:*",
        "lint:eslint": "eslint \"**/*.js\"",
        "lint:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --list-different || (echo '↑↑ these files are not prettier formatted ↑↑' && exit 1)",
        "lint:types": "tsc --noEmit",
        "test": "npm run test:browser && npm run test:node",
        "test:browser": "web-test-runner --coverage",
        "test:browser:coverage": "cd coverage/lcov-report && npx http-server -o -c-1",
        "test:browser:watch": "web-test-runner --watch",
        "test:browser:update-snapshots": "web-test-runner --update-snapshots",
        "test:node": "mocha -r mocha-hooks.mjs './__integration__/**/*.test.js' './__tests__/**/*.test.js' './__node_tests__/**/*.test.js'",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "node scripts/inject-version.js && tsc --emitDeclarationOnly && changeset publish",
        "prepare": "husky install",
        "postinstall": "patch-package"
      },
      "lint-staged": {
        "*.js": [
          "eslint",
          "prettier --list-different"
        ],
        "*.md": "prettier --list-different"
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "prettier": {
        "singleQuote": true,
        "arrowParens": "always",
        "trailingComma": "all",
        "printWidth": 100
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        },
        {
          "name": "Joren Broekema",
          "email": "joren.broekema@gmail.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "@bundled-es-modules/deepmerge": "^4.3.1",
        "@bundled-es-modules/glob": "^10.3.13",
        "@bundled-es-modules/memfs": "^4.2.3",
        "chalk": "^5.3.0",
        "change-case": "^5.3.0",
        "commander": "^8.3.0",
        "is-plain-obj": "^4.1.0",
        "json5": "^2.2.2",
        "lodash-es": "^4.17.21",
        "patch-package": "^8.0.0",
        "path-unified": "^0.1.0",
        "tinycolor2": "^1.6.0"
      },
      "devDependencies": {
        "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
        "@changesets/cli": "^2.27.1",
        "@commitlint/cli": "^18.4.3",
        "@commitlint/config-conventional": "^18.4.3",
        "@esm-bundle/chai-as-promised": "^7.1.1",
        "@types/chai": "^4.3.9",
        "@types/lodash-es": "^4.17.12",
        "@types/tinycolor2": "^1.4.6",
        "@web/test-runner": "^0.18.0",
        "@web/test-runner-commands": "^0.9.0",
        "@web/test-runner-playwright": "^0.11.0",
        "chai": "^5.0.0-alpha.2",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-config-react-app": "^7.0.1",
        "eslint-plugin-mocha": "^10.2.0",
        "fs-extra": "^10.0.0",
        "hanbi": "^1.0.1",
        "husky": "^8.0.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^8.0.0",
        "jsdoc-tsimport-plugin": "^1.0.5",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "memfs": "^4.6.0",
        "mocha": "^10.2.0",
        "npm-run-all": "^4.1.5",
        "prettier": "^3.0.3",
        "sass": "^1.69.5",
        "stylus": "^0.56.0",
        "typescript": "^5.3.3",
        "yaml": "^2.3.4"
      },
      "_id": "style-dictionary@4.0.0-prerelease.14",
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n\n> _Style once, use everywhere._\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on YouTube\n\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Experiment in the playground\n\nTry the browser-based Style Dictionary playground: [https://www.style-dictionary-play.dev/](https://www.style-dictionary-play.dev/), built by the folks at [\\<div\\>RIOTS](https://divriots.com/).\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Example](#example)\n- [Quick Start](#quick-start)\n- [Design Tokens](#design-tokens)\n- [Extending](#extending)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n_Note that you must have node (and npm) installed._\n\nIf you want to use the CLI, you can install it globally via npm:\n\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n\n### CLI\n\n```bash\n$ style-dictionary build\n```\n\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag                    | Short Flag | Description                                                |\n| ----------------------- | ---------- | ---------------------------------------------------------- |\n| --config \\[path\\]       | -c         | Set the config file to use. Must be a .json file           |\n| --platform \\[platform\\] | -p         | Only build a specific platform defined in the config file. |\n| --help                  | -h         | Display help content                                       |\n| --version               | -v         | Display the version                                        |\n\n### Node\n\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [\n        {\n          destination: 'variables.scss',\n          format: 'scss/variables',\n        },\n      ],\n    },\n    // ...\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\n\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [\n        {\n          \"destination\": \"scss/_variables.scss\",\n          \"format\": \"scss/variables\"\n        }\n      ]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [\n        {\n          \"destination\": \"font_dimens.xml\",\n          \"format\": \"android/fontDimens\"\n        }\n      ]\n    }\n  }\n}\n```\n\n| Attribute                            | Type              | Description                                                                                                                                                                                                                                                                   |\n| :----------------------------------- | :---------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source                               | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want.                                                        |\n| include                              | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms                            | Object            | Sets of platform files to be built.                                                                                                                                                                                                                                           |\n| platform.transformGroup              | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`.                                                                                                                                                                                           |\n| platform.transforms                  | Array (optional)  | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own.                                                                                                                                                                             |\n| platform.buildPath                   | String (optional) | Base path to build the files, must end with a trailing slash.                                                                                                                                                                                                                 |\n| platform.files                       | Array (optional)  | Files to be generated for this platform.                                                                                                                                                                                                                                      |\n| platform.file.destination            | String (optional) | Location to build the file, will be appended to the buildPath.                                                                                                                                                                                                                |\n| platform.file.format                 | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats)                                                                                                                      |\n| platform.file.options                | Object (optional) | A set of extra options associated with the file.                                                                                                                                                                                                                              |\n| platform.file.options.showFileHeader | Boolean           | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\".                                                                                                                                                    |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\": { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\": { \"value\": \"24px\" },\n      \"base\": { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment will appear in the output files, where relevant or the output format supports comments.\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function (token) {\n    return token.attributes.category === 'time';\n  },\n  transformer: function (token) {\n    return (parseInt(token.original.value) / 1000).toString() + 's';\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "5194116fc045d4fa2bfda39401ee1a197dcc57a0",
      "_nodeVersion": "20.11.0",
      "_npmVersion": "10.2.4",
      "dist": {
        "integrity": "sha512-puNAJQSCyMeULksX74RYjERbzLsK3Pk7o8ydW9RYr6Cez4/+15za0iEN4yYC5KJgBEn5sJSwIvy0sUZYN03ZTw==",
        "shasum": "db44d23a58d328b30abafcca4c15b1bd01f16b93",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-4.0.0-prerelease.14.tgz",
        "fileCount": 674,
        "unpackedSize": 4205883,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDQPJybEFBJGWycu0zgHDMa6Ff44awHkhr5Z6koEQ2dUQIhAIz+q5RelebwVOMmeC9iBddet2ZmYtu6bUed874rDU+G"
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_4.0.0-prerelease.14_1707772054953_0.042596165669115615"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-prerelease.15": {
      "name": "style-dictionary",
      "version": "4.0.0-prerelease.15",
      "description": "Style once, use everywhere. A build system for creating cross-platform styles.",
      "keywords": [
        "style dictionary",
        "style",
        "dictionary",
        "amazon",
        "css",
        "design",
        "tokens",
        "sass",
        "scss",
        "iOS",
        "Android",
        "react",
        "react native",
        "style guide"
      ],
      "type": "module",
      "exports": {
        ".": "./lib/StyleDictionary.js",
        "./fs": {
          "node": "./lib/fs-node.js",
          "default": "./lib/fs.js"
        },
        "./utils": "./lib/utils/index.js",
        "./types": "./types/index.d.ts"
      },
      "bin": {
        "style-dictionary": "bin/style-dictionary.js"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "scripts": {
        "format": "run-p format:*",
        "format:eslint": "eslint --fix \"**/*.js\"",
        "format:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --write",
        "lint": "run-p lint:*",
        "lint:eslint": "eslint \"**/*.js\"",
        "lint:prettier": "prettier \"**/*.{js,md}\" \"package.json\" --list-different || (echo '↑↑ these files are not prettier formatted ↑↑' && exit 1)",
        "lint:types": "tsc --noEmit",
        "test": "npm run test:browser && npm run test:node",
        "test:browser": "web-test-runner --coverage",
        "test:browser:coverage": "cd coverage/lcov-report && npx http-server -o -c-1",
        "test:browser:watch": "web-test-runner --watch",
        "test:browser:update-snapshots": "web-test-runner --update-snapshots",
        "test:node": "mocha -r mocha-hooks.mjs './__integration__/**/*.test.js' './__tests__/**/*.test.js' './__node_tests__/**/*.test.js'",
        "serve-docs": "docsify serve docs -p 3000 -P 12345",
        "install-cli": "npm install -g $(npm pack)",
        "release": "node scripts/inject-version.js && tsc --emitDeclarationOnly && changeset publish",
        "prepare": "husky install",
        "postinstall": "patch-package"
      },
      "lint-staged": {
        "*.js": [
          "eslint",
          "prettier --list-different"
        ],
        "*.md": "prettier --list-different"
      },
      "commitlint": {
        "extends": [
          "@commitlint/config-conventional"
        ]
      },
      "prettier": {
        "singleQuote": true,
        "arrowParens": "always",
        "trailingComma": "all",
        "printWidth": 100
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/amzn/style-dictionary.git"
      },
      "author": {
        "name": "Amazon"
      },
      "license": "Apache-2.0",
      "bugs": {
        "url": "https://github.com/amzn/style-dictionary/issues"
      },
      "contributors": [
        {
          "name": "Yuliya Baran",
          "email": "baranyu@amazon.com"
        },
        {
          "name": "Charles Dorner",
          "email": "dornerc@amazon.com"
        },
        {
          "name": "Dustin Boudreau",
          "email": "boudrd@amazon.com"
        },
        {
          "name": "Danny Banks",
          "email": "djb@amazon.com"
        },
        {
          "name": "Joren Broekema",
          "email": "joren.broekema@gmail.com"
        }
      ],
      "homepage": "https://github.com/amzn/style-dictionary",
      "dependencies": {
        "@bundled-es-modules/deepmerge": "^4.3.1",
        "@bundled-es-modules/glob": "^10.3.13",
        "@bundled-es-modules/memfs": "^4.2.3",
        "chalk": "^5.3.0",
        "change-case": "^5.3.0",
        "commander": "^8.3.0",
        "is-plain-obj": "^4.1.0",
        "json5": "^2.2.2",
        "lodash-es": "^4.17.21",
        "patch-package": "^8.0.0",
        "path-unified": "^0.1.0",
        "tinycolor2": "^1.6.0"
      },
      "devDependencies": {
        "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
        "@changesets/cli": "^2.27.1",
        "@commitlint/cli": "^18.4.3",
        "@commitlint/config-conventional": "^18.4.3",
        "@esm-bundle/chai-as-promised": "^7.1.1",
        "@types/chai": "^4.3.9",
        "@types/lodash-es": "^4.17.12",
        "@types/tinycolor2": "^1.4.6",
        "@web/test-runner": "^0.18.0",
        "@web/test-runner-commands": "^0.9.0",
        "@web/test-runner-playwright": "^0.11.0",
        "chai": "^5.0.0-alpha.2",
        "docsify": "^4.12.2",
        "docsify-cli": "^4.4.3",
        "eslint": "^8.7.0",
        "eslint-config-react-app": "^7.0.1",
        "eslint-plugin-mocha": "^10.2.0",
        "fs-extra": "^10.0.0",
        "hanbi": "^1.0.1",
        "husky": "^8.0.3",
        "jsdoc-escape-at": "^1.0.1",
        "jsdoc-to-markdown": "^8.0.0",
        "jsdoc-tsimport-plugin": "^1.0.5",
        "less": "^4.1.2",
        "lint-staged": "^12.3.1",
        "memfs": "^4.6.0",
        "mocha": "^10.2.0",
        "npm-run-all": "^4.1.5",
        "prettier": "^3.0.3",
        "sass": "^1.69.5",
        "stylus": "^0.56.0",
        "typescript": "^5.3.3",
        "yaml": "^2.3.4"
      },
      "_id": "style-dictionary@4.0.0-prerelease.15",
      "readme": "<pre>\n<a href=\"https://amzn.github.io/style-dictionary/#/version_3\">What's new in Style Dictionary 3.0!</a>\n</pre>\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"100\" align=\"right\" />\n\n[![npm version](https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square)](https://badge.fury.io/js/style-dictionary)\n![license](https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square)\n[![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://github.com/amzn/style-dictionary/blob/main/CONTRIBUTING.md#submitting-pull-requests)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square)](https://github.com/amzn/style-dictionary/actions/workflows/test.yml)\n[![downloads](https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square)](https://www.npmjs.com/package/style-dictionary)\n\n# Style Dictionary\n\n> _Style once, use everywhere._\n\nA Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.\n\nWhen you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.\n\nFor detailed usage head to https://amzn.github.io/style-dictionary\n\n## Watch the Demo on YouTube\n\n[![Watch the video](/docs/assets/fake_player.png)](http://youtu.be/1HREvonfqhY)\n\n## Experiment in the playground\n\nTry the browser-based Style Dictionary playground: [https://www.style-dictionary-play.dev/](https://www.style-dictionary-play.dev/), built by the folks at [\\<div\\>RIOTS](https://divriots.com/).\n\n## Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Example](#example)\n- [Quick Start](#quick-start)\n- [Design Tokens](#design-tokens)\n- [Extending](#extending)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\n_Note that you must have node (and npm) installed._\n\nIf you want to use the CLI, you can install it globally via npm:\n\n```bash\n$ npm install -g style-dictionary\n```\n\nOr you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:\n\n```bash\n$ npm install -D style-dictionary\n```\n\nIf you want to install it with yarn:\n\n```bash\n$ yarn add style-dictionary --dev\n```\n\n## Usage\n\n### CLI\n\n```bash\n$ style-dictionary build\n```\n\nCall this in the root directory of your project. The only thing needed is a `config.json` file. There are also arguments:\n\n| Flag                    | Short Flag | Description                                                |\n| ----------------------- | ---------- | ---------------------------------------------------------- |\n| --config \\[path\\]       | -c         | Set the config file to use. Must be a .json file           |\n| --platform \\[platform\\] | -p         | Only build a specific platform defined in the config file. |\n| --help                  | -h         | Display help content                                       |\n| --version               | -v         | Display the version                                        |\n\n### Node\n\nYou can also use the style dictionary build system in node if you want to [extend](#extending) the functionality or use it in another build system like Grunt or Gulp.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.buildAllPlatforms();\n```\n\nThe `.extend()` method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend({\n  source: ['tokens/**/*.json'],\n  platforms: {\n    scss: {\n      transformGroup: 'scss',\n      buildPath: 'build/',\n      files: [\n        {\n          destination: 'variables.scss',\n          format: 'scss/variables',\n        },\n      ],\n    },\n    // ...\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\n## Example\n\n[Take a look at some of our examples](examples/)\n\nA style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:\n\n```\n├── config.json\n├── tokens/\n│   ├── size/\n│       ├── font.json\n│   ├── color/\n│       ├── font.json\n│   ...\n├── assets/\n│   ├── fonts/\n│   ├── images/\n```\n\n### config.json\n\nThis tells the style dictionary build system how and what to build. The default file path is `config.json` or `config.js` in the root of the project, but you can name it whatever you want by passing in the `--config` flag to the [CLI](https://amzn.github.io/style-dictionary/#/using_the_cli).\n\n```json\n{\n  \"source\": [\"tokens/**/*.json\"],\n  \"platforms\": {\n    \"scss\": {\n      \"transformGroup\": \"scss\",\n      \"buildPath\": \"build/\",\n      \"files\": [\n        {\n          \"destination\": \"scss/_variables.scss\",\n          \"format\": \"scss/variables\"\n        }\n      ]\n    },\n    \"android\": {\n      \"transformGroup\": \"android\",\n      \"buildPath\": \"build/android/\",\n      \"files\": [\n        {\n          \"destination\": \"font_dimens.xml\",\n          \"format\": \"android/fontDimens\"\n        }\n      ]\n    }\n  }\n}\n```\n\n| Attribute                            | Type              | Description                                                                                                                                                                                                                                                                   |\n| :----------------------------------- | :---------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| source                               | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want.                                                        |\n| include                              | Array             | An array of file path [globs](https://github.com/isaacs/node-glob) to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the \"source\" attribute will overwrite tokens found using include. |\n| platforms                            | Object            | Sets of platform files to be built.                                                                                                                                                                                                                                           |\n| platform.transformGroup              | String (optional) | Apply a group of transforms to the tokens, must either define this or `transforms`.                                                                                                                                                                                           |\n| platform.transforms                  | Array (optional)  | Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own.                                                                                                                                                                             |\n| platform.buildPath                   | String (optional) | Base path to build the files, must end with a trailing slash.                                                                                                                                                                                                                 |\n| platform.files                       | Array (optional)  | Files to be generated for this platform.                                                                                                                                                                                                                                      |\n| platform.file.destination            | String (optional) | Location to build the file, will be appended to the buildPath.                                                                                                                                                                                                                |\n| platform.file.format                 | String (optional) | Format used to generate the file. Can be a built-in one or you can create your own. [More on formats](https://amzn.github.io/style-dictionary/#/formats)                                                                                                                      |\n| platform.file.options                | Object (optional) | A set of extra options associated with the file.                                                                                                                                                                                                                              |\n| platform.file.options.showFileHeader | Boolean           | If the generated file should have a \"Do not edit + Timestamp\" header (where the format supports it). By default is \"true\".                                                                                                                                                    |\n\n### Design Tokens\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"small\": { \"value\": \"10px\" },\n      \"medium\": { \"value\": \"16px\" },\n      \"large\": { \"value\": \"24px\" },\n      \"base\": { \"value\": \"{size.font.medium.value}\" }\n    }\n  }\n}\n```\n\nHere we are creating some basic font size design tokens. The style definition size.font.small.value is \"10px\" for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to \"16px\".\n\nNow what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:\n\n```scss\n$size-font-small: 10px;\n$size-font-medium: 16px;\n$size-font-large: 24px;\n$size-font-base: 16px;\n```\n\n```xml\n<dimen name=\"font-small\">10sp</dimen>\n<dimen name=\"font-medium\">16sp</dimen>\n<dimen name=\"font-large\">24sp</dimen>\n<dimen name=\"font-base\">16sp</dimen>\n```\n\n```objc\nfloat const SizeFontSmall = 10.00f;\nfloat const SizeFontMedium = 16.00f;\nfloat const SizeFontLarge = 24.00f;\nfloat const SizeFontBase = 16.00f;\n```\n\n## Quick Start\n\nThe style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and `cd` into it.\n\n```\n$ npm i -g style-dictionary\n$ mkdir MyStyleDictionary\n$ cd MyStyleDictionary\n```\n\nNow run:\n\n```\n$ style-dictionary init basic\n```\n\nThis command will copy over the example files found in [example](examples/) in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:\n\n```\n$ style-dictionary build\n```\n\nTake a look at the documentation for the example code.\n\n## Design Tokens\n\nA design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.\n\n### Category/Type/Item Structure\n\nWhile not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": { \"value\": \"16\" },\n      \"large\": { \"value\": \"20\" }\n    }\n  }\n}\n```\n\nThe CTI is implicit in the structure, the category and type is 'size' and 'font', and there are 2 tokens 'base' and 'large'.\n\nStructuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don't need to remember if it is button_color_error or error_button_color, it is color_background_button_error!\n\nYou can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the 'attribute/cti' transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.\n\nAlso, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the 'color/hex' transform only applies to tokens of the category 'color'.\n\nYou can also add a _comment_ to a design token:\n\n```json\n{\n  \"size\": {\n    \"font\": {\n      \"base\": {\n        \"value\": \"16\",\n        \"comment\": \"the base size of the font\"\n      },\n      \"large\": {\n        \"value\": \"20\",\n        \"comment\": \"the large size of the font\"\n      }\n    }\n  }\n}\n```\n\nThe comment will appear in the output files, where relevant or the output format supports comments.\n\n## Extending\n\nThe style dictionary build system is made to be extended. We don't know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.\n\n```javascript\nconst StyleDictionary = require('style-dictionary').extend('config.json');\n\nStyleDictionary.registerTransform({\n  name: 'time/seconds',\n  type: 'value',\n  matcher: function (token) {\n    return token.attributes.category === 'time';\n  },\n  transformer: function (token) {\n    return (parseInt(token.original.value) / 1000).toString() + 's';\n  },\n});\n\nStyleDictionary.buildAllPlatforms();\n```\n\nFor more information on creating your own transforms and formats, take a look at our [docs](https://amzn.github.io/style-dictionary/).\n\n## Mascot\n\nThe mascot for Style Dictionary is [\"Pascal\"](https://github.com/amzn/style-dictionary/issues/97) the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.\n\n<img src=\"docs/assets/logo.png\" alt=\"Style Dictionary logo and mascot\" title=\"&quot;Pascal&quot;\" width=\"240\" />\n\n## Contributing\n\nPlease help make this framework better. For more information take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\n\n[Apache 2.0](LICENSE)\n",
      "readmeFilename": "README.md",
      "gitHead": "d5d7a8e5e48341d16ad804950bbaba0204d9ad77",
      "_nodeVersion": "20.11.1",
      "_npmVersion": "10.2.4",
      "dist": {
        "integrity": "sha512-kZ0qi0BClVsfh06+z/622VRKTcYdUvgSD6j1C/x50/Vvo2ndi/rcjyyTNmmwyqPMHp4lVgZ9BTUx0Mr9/+mzhA==",
        "shasum": "70865ab75162ad78ad81967c2518ed1f9c6b9640",
        "tarball": "https://registry.npmjs.org/style-dictionary/-/style-dictionary-4.0.0-prerelease.15.tgz",
        "fileCount": 673,
        "unpackedSize": 4207794,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDUPwWbfhhi4EvYEIrYPpLyG+z9jiY9Nvur8h2MM1S5ZAIhAOsvZwJN41hr5SZipzDmOzSXCEt/6SBa2XL5w+hbLEGq"
          }
        ]
      },
      "_npmUser": {
        "name": "dbanksdesign",
        "email": "dbanks.design@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dbanksdesign",
          "email": "dbanks.design@gmail.com"
        },
        {
          "name": "chazzmoney",
          "email": "charles@pgina.org"
        },
        {
          "name": "amzn-oss",
          "email": "osa-3p@amazon.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/style-dictionary_4.0.0-prerelease.15_1708694777978_0.8934053808958058"
      },
      "_hasShrinkwrap": false
    }
  },
  "readme": "",
  "maintainers": [
    {
      "name": "dbanksdesign",
      "email": "dbanks.design@gmail.com"
    },
    {
      "name": "chazzmoney",
      "email": "charles@pgina.org"
    },
    {
      "name": "amzn-oss",
      "email": "osa-3p@amazon.com"
    }
  ],
  "time": {
    "modified": "2024-02-23T13:26:18.614Z",
    "created": "2017-03-07T19:03:08.702Z",
    "2.0.0-beta": "2017-03-07T19:03:08.702Z",
    "2.0.0": "2017-06-22T00:32:55.763Z",
    "2.1.0": "2018-02-28T20:38:51.877Z",
    "2.2.0": "2018-06-08T17:30:13.985Z",
    "2.2.1": "2018-07-04T17:42:41.011Z",
    "2.3.0": "2018-08-06T16:06:11.369Z",
    "2.4.0": "2018-09-07T16:58:50.517Z",
    "2.5.0": "2018-11-05T18:12:08.835Z",
    "2.6.0": "2018-12-01T00:28:20.233Z",
    "2.6.1": "2018-12-13T22:48:46.245Z",
    "2.6.2": "2018-12-13T23:05:45.257Z",
    "2.7.0": "2019-02-05T22:56:50.642Z",
    "2.8.0": "2019-05-28T19:46:44.967Z",
    "2.8.1": "2019-07-02T19:13:58.195Z",
    "2.8.2": "2019-09-04T17:05:43.074Z",
    "2.8.3": "2019-10-30T21:53:15.431Z",
    "2.9.0": "2020-04-21T21:30:43.774Z",
    "2.10.0": "2020-05-05T19:00:02.897Z",
    "2.10.1": "2020-07-09T02:53:34.730Z",
    "2.10.2": "2020-10-08T17:53:09.018Z",
    "3.0.0-rc.0": "2020-12-03T00:24:41.334Z",
    "3.0.0-rc.1": "2020-12-04T21:25:46.148Z",
    "3.0.0-rc.2": "2021-01-12T00:26:02.460Z",
    "3.0.0-rc.3": "2021-02-06T07:12:24.049Z",
    "3.0.0-rc.4": "2021-02-16T20:13:11.334Z",
    "3.0.0-rc.5": "2021-02-27T00:50:30.884Z",
    "2.10.3": "2021-03-09T20:40:05.351Z",
    "3.0.0-rc.6": "2021-03-09T20:44:06.848Z",
    "3.0.0-rc.7": "2021-03-24T23:23:37.423Z",
    "3.0.0-rc.8": "2021-04-05T23:43:41.316Z",
    "3.0.0-rc.9": "2021-05-04T04:02:39.155Z",
    "3.0.0-rc.10": "2021-05-24T16:57:54.569Z",
    "3.0.0": "2021-05-25T19:31:03.760Z",
    "3.0.1": "2021-06-07T23:40:29.091Z",
    "3.0.2": "2021-08-19T23:00:48.509Z",
    "3.0.3": "2021-10-15T22:09:30.214Z",
    "3.1.0": "2021-12-16T22:22:25.160Z",
    "3.1.1": "2021-12-17T16:02:00.941Z",
    "3.7.0": "2022-02-22T22:23:55.455Z",
    "3.7.1": "2022-06-07T22:10:41.824Z",
    "3.7.2": "2023-01-03T21:48:20.038Z",
    "3.7.3-rc.1": "2023-02-01T20:20:09.061Z",
    "3.8.0": "2023-04-25T21:18:25.885Z",
    "4.0.0-prerelease.0": "2023-10-23T09:23:06.813Z",
    "3.9.0": "2023-10-23T20:55:01.081Z",
    "4.0.0-prerelease.1": "2023-10-26T08:44:16.788Z",
    "4.0.0-prerelease.2": "2023-11-28T11:05:31.678Z",
    "4.0.0-prerelease.3": "2023-12-05T17:51:46.318Z",
    "4.0.0-prerelease.4": "2023-12-05T18:42:18.818Z",
    "3.9.1": "2023-12-07T20:49:27.780Z",
    "4.0.0-prerelease.5": "2023-12-23T13:07:04.155Z",
    "4.0.0-prerelease.6": "2023-12-23T13:19:07.888Z",
    "4.0.0-prerelease.7": "2024-01-08T17:27:48.186Z",
    "4.0.0-prerelease.8": "2024-01-15T14:18:51.456Z",
    "3.9.2": "2024-01-17T17:17:19.468Z",
    "4.0.0-prerelease.9": "2024-01-23T09:51:41.410Z",
    "4.0.0-prerelease.10": "2024-01-25T22:41:00.474Z",
    "4.0.0-prerelease.11": "2024-01-26T11:42:55.843Z",
    "4.0.0-prerelease.12": "2024-01-26T11:52:24.631Z",
    "4.0.0-prerelease.13": "2024-01-26T14:43:14.966Z",
    "4.0.0-prerelease.14": "2024-02-12T21:07:35.153Z",
    "4.0.0-prerelease.15": "2024-02-23T13:26:18.185Z"
  },
  "homepage": "https://github.com/amzn/style-dictionary",
  "keywords": [
    "style dictionary",
    "style",
    "dictionary",
    "amazon",
    "css",
    "design",
    "properties",
    "tokens",
    "sass",
    "scss",
    "iOS",
    "Android",
    "react",
    "react native",
    "style guide"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/amzn/style-dictionary.git"
  },
  "contributors": [
    {
      "name": "Yuliya Baran",
      "email": "baranyu@amazon.com"
    },
    {
      "name": "Charles Dorner",
      "email": "dornerc@amazon.com"
    },
    {
      "name": "Dustin Boudreau",
      "email": "boudrd@amazon.com"
    },
    {
      "name": "Danny Banks",
      "email": "djb@amazon.com"
    }
  ],
  "author": {
    "name": "Amazon"
  },
  "bugs": {
    "url": "https://github.com/amzn/style-dictionary/issues"
  },
  "license": "Apache-2.0",
  "readmeFilename": "",
  "users": {}
}