{
  "_id": "ava",
  "_rev": "292-b71e5f629a53d844c0ef5e2fbf00715a",
  "name": "ava",
  "description": "Node.js test runner that lets you develop with confidence.",
  "dist-tags": {
    "latest": "6.1.2"
  },
  "versions": {
    "0.0.3": {
      "name": "ava",
      "version": "0.0.3",
      "description": "WIP - Simple test runner",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/sindresorhus/ava"
      },
      "bin": {
        "ava": "cli.js"
      },
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "http://sindresorhus.com"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "node test/test.js"
      },
      "files": [
        "index.js",
        "cli.js",
        "lib"
      ],
      "keywords": [
        "cli",
        "bin"
      ],
      "dependencies": {
        "chalk": "^0.5.0",
        "each-async": "^0.1.3"
      },
      "devDependencies": {
        "ava": "0.0.1"
      },
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "homepage": "https://github.com/sindresorhus/ava",
      "_id": "ava@0.0.3",
      "_shasum": "489624e906e857e35857696e2a5a4fbea415a177",
      "_from": ".",
      "_npmVersion": "1.4.9",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        }
      ],
      "dist": {
        "shasum": "489624e906e857e35857696e2a5a4fbea415a177",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.0.3.tgz",
        "integrity": "sha512-gt5L9Yhawm34pOhDkdhc4Aeid9eTKBqd7zSMdHVwiMvU376vMgCXFCbdk2lT/8KM4vGCh73HsUo9zvAYhB1oJA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCH9WboKYzSa/33/7C2+YsJu825PWvH1rtRPIecLP8VJAIgJCd9hY7GugIRjec284i/V3KhvCSDBjxbnJuHILOGhWo="
          }
        ]
      },
      "directories": {}
    },
    "0.0.4": {
      "name": "ava",
      "version": "0.0.4",
      "description": "WIP - Simple test runner",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/sindresorhus/ava"
      },
      "bin": {
        "ava": "cli.js"
      },
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "http://sindresorhus.com"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "node test/test.js"
      },
      "files": [
        "index.js",
        "cli.js",
        "lib"
      ],
      "keywords": [
        "cli",
        "bin"
      ],
      "dependencies": {
        "chalk": "^0.5.1",
        "each-async": "^1.0.0",
        "log-symbols": "^1.0.0",
        "minimist": "^1.1.0"
      },
      "devDependencies": {
        "ava": "0.0.3"
      },
      "gitHead": "99020f368d09afac5da32f785a94e1bbc4ad43b5",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "homepage": "https://github.com/sindresorhus/ava",
      "_id": "ava@0.0.4",
      "_shasum": "45fc22954d60b47fe47cd6cce5de2e8bf33bc824",
      "_from": ".",
      "_npmVersion": "1.4.14",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        }
      ],
      "dist": {
        "shasum": "45fc22954d60b47fe47cd6cce5de2e8bf33bc824",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.0.4.tgz",
        "integrity": "sha512-nKurDgjGntroIoL81KcCeReLWqrATMh3yqTC79mmSIdV2zyAYsDiUGhReNJGmnHuGFAkHMzSTNeJ9kS2y35TGw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCEhtniXQ6nncc7GgLQqGge4t5dIfw73Hj/7Md+HCVowwIgdU80QFiak52JKuwOSbzHUgR2pyqAjVhre8ydBqwT0cI="
          }
        ]
      },
      "directories": {}
    },
    "0.1.0": {
      "name": "ava",
      "version": "0.1.0",
      "description": "Simple concurrent test runner",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/sindresorhus/ava.git"
      },
      "homepage": "http://ava.li",
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && node test/test.js | tap-dot"
      },
      "files": [
        "index.js",
        "cli.js",
        "lib"
      ],
      "keywords": [
        "cli-app",
        "cli",
        "ava",
        "test",
        "runner",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine"
      ],
      "dependencies": {
        "async-each-series": "^1.0.0",
        "chalk": "^1.0.0",
        "claim": "^1.3.0",
        "each-async": "^1.0.0",
        "figures": "^1.3.5",
        "fn-name": "^2.0.0",
        "globby": "^2.0.0",
        "meow": "^3.3.0",
        "plur": "^2.0.0",
        "squeak": "^1.2.0",
        "update-notifier": "^0.5.0"
      },
      "devDependencies": {
        "pinkie-promise": "^1.0.0",
        "tap-dot": "^1.0.0",
        "tape": "^4.0.0",
        "xo": "*"
      },
      "gitHead": "97add1fcec62d510d72f1d26e1ea5ca972c495c6",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.1.0",
      "_shasum": "a9d0989558949974a42ec26fe045af0dbfb81bcf",
      "_from": ".",
      "_npmVersion": "2.11.3",
      "_nodeVersion": "0.12.7",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "a9d0989558949974a42ec26fe045af0dbfb81bcf",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.1.0.tgz",
        "integrity": "sha512-d+3RGefeYBN6M1hXgxLdMqWAKAWugEmQtRQU6N0d+W10rgLVnj9F42SQwkwCiahHFEYoQJ9qNELbw+GjSTWPwg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFnl9eorfGm+UhPGOccy/z2DPBgNazP4Fmk3DcS7LOVkAiEAk4mu4MyEbspWIg0bZwDeCqwZmBIxwhuhkzNIp7eSceY="
          }
        ]
      },
      "directories": {}
    },
    "0.2.0": {
      "name": "ava",
      "version": "0.2.0",
      "description": "Simple concurrent test runner",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/sindresorhus/ava.git"
      },
      "homepage": "http://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && tape test/*.js | tap-dot"
      },
      "files": [
        "index.js",
        "cli.js",
        "lib"
      ],
      "keywords": [
        "cli-app",
        "cli",
        "ava",
        "test",
        "runner",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "assert",
        "assertion"
      ],
      "dependencies": {
        "ava-init": "^0.1.0",
        "babel-core": "^5.8.23",
        "bluebird": "^2.9.34",
        "chalk": "^1.0.0",
        "figures": "^1.3.5",
        "fn-name": "^2.0.0",
        "globby": "^3.0.1",
        "meow": "^3.3.0",
        "plur": "^2.0.0",
        "pretty-ms": "^2.0.0",
        "resolve-from": "^1.0.0",
        "set-immediate-shim": "^1.0.1",
        "squeak": "^1.2.0",
        "update-notifier": "^0.5.0"
      },
      "devDependencies": {
        "tap-dot": "^1.0.0",
        "tape": "^4.0.0",
        "xo": "*"
      },
      "xo": {
        "ignores": [
          "test/fixture/**"
        ]
      },
      "gitHead": "cf4718a0ca62f8027867e8850b6e096af884a7d8",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.2.0",
      "_shasum": "93f03a17a9579ef54244f8ab20ee3d351a7a3f70",
      "_from": ".",
      "_npmVersion": "2.14.2",
      "_nodeVersion": "4.0.0",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "93f03a17a9579ef54244f8ab20ee3d351a7a3f70",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.2.0.tgz",
        "integrity": "sha512-SVuxStA/SQCgBYdffSX9GEyxIM8M8CMj3nEYrIQjeJQYRgi/HcDxO1CYp8pssRtEFZitPFTMU4ln+7KLbRq02Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIH+akxEJA31zgLW1MtqIZzrqZjFxgZQIXIBQtTDLX6vlAiEA8b5Nam786haX2YDrFydo2z1wUAXExZzUbRfVU9tB9RQ="
          }
        ]
      },
      "directories": {}
    },
    "0.3.0": {
      "name": "ava",
      "version": "0.3.0",
      "description": "Futuristic test runner",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "https://github.com/sindresorhus/ava"
      },
      "homepage": "http://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && nyc tape test/*.js | tap-dot",
        "coveralls": "nyc report --reporter=text-lcov | coveralls"
      },
      "files": [
        "index.js",
        "cli.js",
        "lib"
      ],
      "keywords": [
        "cli-app",
        "cli",
        "ava",
        "test",
        "runner",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "assert",
        "assertion",
        "futuristic"
      ],
      "dependencies": {
        "arr-flatten": "^1.0.1",
        "ava-init": "^0.1.0",
        "babel-core": "^5.8.23",
        "babel-plugin-espower": "^1.0.0",
        "bluebird": "^2.9.34",
        "chalk": "^1.0.0",
        "co": "^4.6.0",
        "core-assert": "^0.1.0",
        "empower": "^1.0.2",
        "figures": "^1.4.0",
        "fn-name": "^2.0.0",
        "globby": "^3.0.1",
        "is-generator": "^1.0.2",
        "meow": "^3.3.0",
        "object-assign": "^4.0.1",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.1.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "resolve-from": "^1.0.0",
        "set-immediate-shim": "^1.0.1",
        "squeak": "^1.2.0",
        "update-notifier": "^0.5.0"
      },
      "devDependencies": {
        "coveralls": "^2.11.4",
        "nyc": "^3.2.2",
        "tap-dot": "^1.0.0",
        "tape": "^4.0.0",
        "xo": "*"
      },
      "gitHead": "83ebf6713de31502c09ba657d0d36c39008c7e22",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.3.0",
      "_shasum": "ae0269b636ac2155eea324ca2147bba763a9bd74",
      "_from": ".",
      "_npmVersion": "2.14.7",
      "_nodeVersion": "4.2.1",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "ae0269b636ac2155eea324ca2147bba763a9bd74",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.3.0.tgz",
        "integrity": "sha512-Wed01Myo0zdcP7lAXxbIB/ubQXWrp5iop/tWaMev6UCC7VPSCVdxJ0Q9WORNgUpJBJ6Z0udBJPA0+dC3AaakDw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDdKPOVnam1gyuE28SzKevyFmAaNflsjjvp2prvVo7f5QIhAP/T9Bv8hhzFXVD4LCOnIv/yw60fHhm6IZ233vpoHkOo"
          }
        ]
      },
      "directories": {}
    },
    "0.4.0": {
      "name": "ava",
      "version": "0.4.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "https://github.com/sindresorhus/ava"
      },
      "homepage": "http://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && nyc tape test/*.js | tap-dot",
        "coveralls": "nyc report --reporter=text-lcov | coveralls"
      },
      "files": [
        "index.js",
        "cli.js",
        "lib"
      ],
      "keywords": [
        "cli-app",
        "cli",
        "ava",
        "test",
        "runner",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "assert",
        "assertion",
        "futuristic"
      ],
      "dependencies": {
        "arr-flatten": "^1.0.1",
        "ava-init": "^0.1.0",
        "babel-core": "^5.8.23",
        "babel-plugin-espower": "^1.1.0",
        "babel-runtime": "^5.8.29",
        "bluebird": "^3.0.0",
        "chalk": "^1.0.0",
        "co": "git+https://github.com/floatdrop/co#e6c2a50",
        "core-assert": "^0.1.0",
        "empower": "^1.1.0",
        "figures": "^1.4.0",
        "fn-name": "^2.0.0",
        "globby": "^3.0.1",
        "has-flag": "^1.0.0",
        "is-generator": "^1.0.2",
        "meow": "^3.3.0",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "require-from-string": "^1.1.0",
        "resolve-from": "^1.0.0",
        "serialize-error": "^1.0.0",
        "set-immediate-shim": "^1.0.1",
        "squeak": "^1.2.0",
        "update-notifier": "^0.5.0"
      },
      "devDependencies": {
        "coveralls": "^2.11.4",
        "nyc": "^3.2.2",
        "signal-exit": "^2.1.2",
        "tap-dot": "^1.0.0",
        "tape": "^4.0.0",
        "xo": "*"
      },
      "gitHead": "71c79e0d0f9a9274f7ed254e3d8e1105665ea575",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.4.0",
      "_shasum": "3cc792808f07a2355db2907077d6b59c9113cd59",
      "_from": ".",
      "_npmVersion": "2.14.7",
      "_nodeVersion": "4.2.1",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "3cc792808f07a2355db2907077d6b59c9113cd59",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.4.0.tgz",
        "integrity": "sha512-prGItTVuEMfa5cTZLeBUyb6oWs+zOyXKdIR746SzTOo49giouofZ8RgtahAaxlNAoCc/1BpQvolMVzzEjifhlg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIAhCj99h3EqfZhB+vBVRC654VEjejyV9MTnUoYFzkv01AiB3DiyELIN+8fA0ND/HMfuBHh5DpKQxW63B2BSI5ASaCw=="
          }
        ]
      },
      "directories": {}
    },
    "0.4.1": {
      "name": "ava",
      "version": "0.4.1",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "https://github.com/sindresorhus/ava"
      },
      "homepage": "http://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && nyc tape test/*.js | tap-dot",
        "coveralls": "nyc report --reporter=text-lcov | coveralls"
      },
      "files": [
        "index.js",
        "cli.js",
        "lib"
      ],
      "keywords": [
        "cli-app",
        "cli",
        "ava",
        "test",
        "runner",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "assert",
        "assertion",
        "futuristic"
      ],
      "dependencies": {
        "arr-flatten": "^1.0.1",
        "ava-init": "^0.1.0",
        "babel-core": "^5.8.23",
        "babel-plugin-espower": "^1.1.0",
        "babel-runtime": "^5.8.29",
        "bluebird": "^3.0.0",
        "chalk": "^1.0.0",
        "co": "git+https://github.com/floatdrop/co#e6c2a50",
        "core-assert": "^0.1.0",
        "empower": "^1.1.0",
        "figures": "^1.4.0",
        "fn-name": "^2.0.0",
        "globby": "^3.0.1",
        "has-flag": "^1.0.0",
        "is-generator": "^1.0.2",
        "meow": "^3.3.0",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "require-from-string": "^1.1.0",
        "resolve-from": "^1.0.0",
        "serialize-error": "^1.0.0",
        "set-immediate-shim": "^1.0.1",
        "squeak": "^1.2.0",
        "update-notifier": "^0.5.0"
      },
      "devDependencies": {
        "coveralls": "^2.11.4",
        "nyc": "^3.2.2",
        "signal-exit": "^2.1.2",
        "tap-dot": "^1.0.0",
        "tape": "^4.0.0",
        "xo": "*"
      },
      "gitHead": "e8f51804827e4f9395bdf3dcafd05c0d96f88eb8",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.4.1",
      "_shasum": "c10da8db1942d7b302fcee839b4a583d0d05fa27",
      "_from": ".",
      "_npmVersion": "2.14.7",
      "_nodeVersion": "4.2.1",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "c10da8db1942d7b302fcee839b4a583d0d05fa27",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.4.1.tgz",
        "integrity": "sha512-o7CGcvGgQ9MOShmbbY3XCCdG9Ge3rUPpAK8ZTOPx4rl6XHosUq4a4gJ3ZNNqI7MN/KSW/8Flxmfn0yLx5HmtCg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIBpnB5lIY/R5ArY6KOebCLRvFAANMb9qcel6qVuveSpJAiAf4F9RAwDKoVWcVbMNs4uQ4eoX51m5TMXTW8TXdEPrdw=="
          }
        ]
      },
      "directories": {}
    },
    "0.4.2": {
      "name": "ava",
      "version": "0.4.2",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "https://github.com/sindresorhus/ava"
      },
      "homepage": "http://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && nyc tape test/*.js | tap-dot",
        "test-win": "tape test/*.js | tap-dot",
        "coveralls": "nyc report --reporter=text-lcov | coveralls"
      },
      "files": [
        "index.js",
        "cli.js",
        "lib"
      ],
      "keywords": [
        "cli-app",
        "cli",
        "ava",
        "test",
        "runner",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "assert",
        "assertion",
        "futuristic"
      ],
      "dependencies": {
        "arr-flatten": "^1.0.1",
        "ava-init": "^0.1.0",
        "babel-core": "^5.8.23",
        "babel-plugin-espower": "^1.1.0",
        "babel-runtime": "^5.8.29",
        "bluebird": "^3.0.0",
        "chalk": "^1.0.0",
        "co-with-promise": "^4.6.0",
        "core-assert": "^0.1.0",
        "empower": "^1.1.0",
        "figures": "^1.4.0",
        "fn-name": "^2.0.0",
        "globby": "^3.0.1",
        "has-flag": "^1.0.0",
        "is-generator": "^1.0.2",
        "meow": "^3.3.0",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "require-from-string": "^1.1.0",
        "resolve-from": "^1.0.0",
        "serialize-error": "^1.0.0",
        "set-immediate-shim": "^1.0.1",
        "squeak": "^1.2.0",
        "update-notifier": "^0.5.0"
      },
      "devDependencies": {
        "coveralls": "^2.11.4",
        "nyc": "^3.2.2",
        "signal-exit": "^2.1.2",
        "tap-dot": "^1.0.0",
        "tape": "^4.0.0",
        "xo": "*"
      },
      "gitHead": "ff8031fa992b2ff64952e4628ff542eaf64718da",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.4.2",
      "_shasum": "38c4bcd616b22bc3e6a08a517c67dbfad2fd05e3",
      "_from": ".",
      "_npmVersion": "2.14.7",
      "_nodeVersion": "4.2.1",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "38c4bcd616b22bc3e6a08a517c67dbfad2fd05e3",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.4.2.tgz",
        "integrity": "sha512-HWnyAFrj+x7iyDPkgcFOlYAF4XmWsOeebG7K8NeLWneDTezFkczaFrx2qqe7jHtpQ8qiuyjC1/6xWJDF388O7Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQD3TijcX2huzMgk8AiGo+xnR5TwbxWKqmXF3FraPwNV8QIgJv+Do1ez8tgpaUOxg3gLwKL2i0LMyXQYMVKNsPFstz4="
          }
        ]
      },
      "directories": {}
    },
    "0.5.0": {
      "name": "ava",
      "version": "0.5.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "https://github.com/sindresorhus/ava"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && nyc tape test/*.js | tap-spec",
        "test-win": "tape test/*.js | tap-spec",
        "coveralls": "nyc report --reporter=text-lcov | coveralls"
      },
      "files": [
        "index.js",
        "cli.js",
        "lib"
      ],
      "keywords": [
        "cli-app",
        "cli",
        "ava",
        "test",
        "runner",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables"
      ],
      "dependencies": {
        "arr-flatten": "^1.0.1",
        "ava-init": "^0.1.0",
        "babel-core": "^5.8.23",
        "babel-plugin-espower": "^1.1.0",
        "babel-runtime": "^5.8.29",
        "bluebird": "^3.0.0",
        "chalk": "^1.0.0",
        "co-with-promise": "^4.6.0",
        "core-assert": "^0.1.0",
        "destroy-circular": "git+https://github.com/jamestalmage/destroy-circular#feeb7d1",
        "empower": "^1.1.0",
        "figures": "^1.4.0",
        "fn-name": "^2.0.0",
        "globby": "^4.0.0",
        "has-flag": "^1.0.0",
        "is-generator-fn": "^1.0.0",
        "loud-rejection": "^1.2.0",
        "max-timeout": "^1.0.0",
        "meow": "^3.3.0",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "require-from-string": "^1.1.0",
        "resolve-from": "^1.0.0",
        "set-immediate-shim": "^1.0.1",
        "squeak": "^1.2.0",
        "update-notifier": "^0.5.0"
      },
      "devDependencies": {
        "coveralls": "^2.11.4",
        "nyc": "^3.2.2",
        "signal-exit": "^2.1.2",
        "tap-spec": "^4.1.0",
        "tape": "^4.0.0",
        "xo": "*",
        "zen-observable": "^0.1.6"
      },
      "gitHead": "2d36b51490795adcb58f98ed9708a59abad04897",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.5.0",
      "_shasum": "1018aaaee00733215c2d8eb2d63fe7c5661692c5",
      "_from": ".",
      "_npmVersion": "2.14.7",
      "_nodeVersion": "4.2.1",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "1018aaaee00733215c2d8eb2d63fe7c5661692c5",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.5.0.tgz",
        "integrity": "sha512-iR20p36Efhp0lA0L0W9wpLgZb/u20s+Oyhfepbi7+tkzCNyLVSlXdRNgE/v3YsBhmOzlMiFZcYRRtbEyRiBscw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDVw9v0H9zymHF7gH0px/E9gfY1P3eP+LvELuWw+tTBkgIgNBrKI7gK2ZQKuwowiAEtOchqd3djLodQ4MSnsAO3gvw="
          }
        ]
      },
      "directories": {}
    },
    "0.6.0": {
      "name": "ava",
      "version": "0.6.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "https://github.com/sindresorhus/ava"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && tap --coverage --reporter=spec --timeout=150 test/*.js",
        "test-win": "tap --reporter=spec --timeout=150 test/*.js",
        "coverage": "tap --coverage-report=lcov"
      },
      "files": [
        "index.js",
        "cli.js",
        "lib"
      ],
      "keywords": [
        "cli-app",
        "cli",
        "ava",
        "test",
        "runner",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables"
      ],
      "dependencies": {
        "arr-flatten": "^1.0.1",
        "ava-init": "^0.1.0",
        "babel-core": "^5.8.23",
        "babel-plugin-espower": "^1.1.0",
        "babel-runtime": "^5.8.29",
        "bluebird": "^3.0.0",
        "chalk": "^1.0.0",
        "co-with-promise": "^4.6.0",
        "core-assert": "^0.1.0",
        "debug": "^2.2.0",
        "destroy-circular": "git+https://github.com/jamestalmage/destroy-circular#feeb7d1",
        "empower": "^1.1.0",
        "figures": "^1.4.0",
        "fn-name": "^2.0.0",
        "globby": "^4.0.0",
        "has-flag": "^1.0.0",
        "has-generator": "^1.0.0",
        "is-generator-fn": "^1.0.0",
        "is-promise": "^2.1.0",
        "loud-rejection": "^1.2.0",
        "max-timeout": "^1.0.0",
        "meow": "^3.6.0",
        "observable-to-promise": "^0.1.0",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "require-from-string": "^1.1.0",
        "resolve-from": "^1.0.0",
        "set-immediate-shim": "^1.0.1",
        "source-map-support": "^0.3.3",
        "squeak": "^1.2.0",
        "update-notifier": "^0.5.0"
      },
      "devDependencies": {
        "coveralls": "^2.11.4",
        "signal-exit": "^2.1.2",
        "tap": "^2.2.1",
        "xo": "*",
        "zen-observable": "^0.1.6"
      },
      "config": {
        "nyc": {
          "exclude": [
            "node_modules[/\\\\]",
            "test[/\\\\]"
          ]
        }
      },
      "gitHead": "09a2140b4645fc882afa50800c565298917ca45a",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.6.0",
      "_shasum": "719cb0484cb73b3d564a3a2209d1a78833899200",
      "_from": ".",
      "_npmVersion": "2.14.7",
      "_nodeVersion": "4.2.1",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "719cb0484cb73b3d564a3a2209d1a78833899200",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.6.0.tgz",
        "integrity": "sha512-oTITI0vDSBVjB70/4HFPBn5hULZ32BESv0UtROAYCGvg5koXjrYdvq0GFo/YSF5GGlzGxx4yfsOYVhoNMLjqLw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDoUs/ZtSS/e7BdBogaN2gYknomGMbk4elzyodDkEduPAiEAn49xtmkeCQ2GZtK8mq+TommsRO1uWS5A3yalNXAk7io="
          }
        ]
      },
      "directories": {}
    },
    "0.6.1": {
      "name": "ava",
      "version": "0.6.1",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/sindresorhus/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && tap --coverage --reporter=spec --timeout=150 test/*.js",
        "test-win": "tap --reporter=spec --timeout=150 test/*.js",
        "coverage": "tap --coverage-report=lcov"
      },
      "files": [
        "index.js",
        "cli.js",
        "lib"
      ],
      "keywords": [
        "cli-app",
        "cli",
        "ava",
        "test",
        "runner",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables"
      ],
      "dependencies": {
        "arr-flatten": "^1.0.1",
        "ava-init": "^0.1.0",
        "babel-core": "^5.8.23",
        "babel-plugin-espower": "^1.1.0",
        "babel-runtime": "^5.8.29",
        "bluebird": "^3.0.0",
        "chalk": "^1.0.0",
        "co-with-promise": "^4.6.0",
        "core-assert": "^0.1.0",
        "debug": "^2.2.0",
        "empower": "^1.1.0",
        "figures": "^1.4.0",
        "fn-name": "^2.0.0",
        "globby": "^4.0.0",
        "has-flag": "^1.0.0",
        "has-generator": "^1.0.0",
        "is-generator-fn": "^1.0.0",
        "is-promise": "^2.1.0",
        "loud-rejection": "^1.2.0",
        "max-timeout": "^1.0.0",
        "meow": "^3.6.0",
        "observable-to-promise": "^0.1.0",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "require-from-string": "^1.1.0",
        "resolve-from": "^1.0.0",
        "serialize-error": "^1.1.0",
        "set-immediate-shim": "^1.0.1",
        "source-map-support": "^0.3.3",
        "squeak": "^1.2.0",
        "update-notifier": "^0.5.0"
      },
      "devDependencies": {
        "coveralls": "^2.11.4",
        "signal-exit": "^2.1.2",
        "tap": "^2.2.1",
        "xo": "*",
        "zen-observable": "^0.1.6"
      },
      "config": {
        "nyc": {
          "exclude": [
            "node_modules[/\\\\]",
            "test[/\\\\]"
          ]
        }
      },
      "gitHead": "98b366b56a9cddd7dbe62f0acd5dd0cc7e76d149",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.6.1",
      "_shasum": "4671d73b29010dab61d9208eb8fe61f55b62da39",
      "_from": ".",
      "_npmVersion": "3.4.0",
      "_nodeVersion": "0.10.40",
      "_npmUser": {
        "name": "jamestalmage",
        "email": "james@talmage.io"
      },
      "dist": {
        "shasum": "4671d73b29010dab61d9208eb8fe61f55b62da39",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.6.1.tgz",
        "integrity": "sha512-9m6N9dYGqWj+zx3BzTu9ILK18xKPffdmpKDN+o35aMXL120EnnI7G9tN2NhRXJkukjBY47FJ3VDuYYYGbu1MSw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCOJnofP+ajQfhfNOdaF3UJF2LxhU5gPrYKWtJOuSIJBwIhAJ8JqrpNGQpdDskuqjxaOsUWkXEghj0HVf9kgC4xzsu/"
          }
        ]
      },
      "directories": {}
    },
    "0.7.0": {
      "name": "ava",
      "version": "0.7.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "https://github.com/sindresorhus/ava"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && tap --coverage --reporter=spec --timeout=150 test/*.js",
        "test-win": "tap --reporter=spec --timeout=150 test/*.js",
        "coverage": "tap --coverage-report=lcov"
      },
      "files": [
        "index.js",
        "cli.js",
        "lib"
      ],
      "keywords": [
        "cli-app",
        "cli",
        "ava",
        "test",
        "runner",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables"
      ],
      "dependencies": {
        "arr-flatten": "^1.0.1",
        "ava-init": "^0.1.0",
        "babel-core": "^5.8.23",
        "babel-plugin-espower": "^1.1.0",
        "babel-runtime": "^5.8.29",
        "bluebird": "^3.0.0",
        "chalk": "^1.0.0",
        "co-with-promise": "^4.6.0",
        "core-assert": "^0.1.0",
        "debug": "^2.2.0",
        "empower": "^1.1.0",
        "figures": "^1.4.0",
        "fn-name": "^2.0.0",
        "globby": "^4.0.0",
        "has-flag": "^1.0.0",
        "has-generator": "^1.0.0",
        "is-generator-fn": "^1.0.0",
        "is-observable": "^0.1.0",
        "is-promise": "^2.1.0",
        "loud-rejection": "^1.2.0",
        "max-timeout": "^1.0.0",
        "meow": "^3.6.0",
        "object-assign": "^4.0.1",
        "observable-to-promise": "^0.1.0",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "require-from-string": "^1.1.0",
        "resolve-from": "^2.0.0",
        "serialize-error": "^1.1.0",
        "set-immediate-shim": "^1.0.1",
        "source-map-support": "^0.3.3",
        "squeak": "^1.2.0",
        "time-require": "^0.1.2",
        "update-notifier": "^0.5.0"
      },
      "devDependencies": {
        "coveralls": "^2.11.4",
        "signal-exit": "^2.1.2",
        "sinon": "^1.17.2",
        "tap": "^2.2.1",
        "xo": "*",
        "zen-observable": "^0.1.6"
      },
      "config": {
        "nyc": {
          "exclude": [
            "node_modules[/\\\\]",
            "test[/\\\\]"
          ]
        }
      },
      "xo": {
        "ignore": [
          "cli.js"
        ]
      },
      "gitHead": "2f05aca5f33aee4abd9b92d9049807920f525550",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.7.0",
      "_shasum": "3cee9e66f811d4356ea419dc12d8b48c9e3c8cb5",
      "_from": ".",
      "_npmVersion": "2.14.7",
      "_nodeVersion": "4.2.1",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "3cee9e66f811d4356ea419dc12d8b48c9e3c8cb5",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.7.0.tgz",
        "integrity": "sha512-XMNlidn5OxABMIfKt8hd9WqbNb9PUYeKzvOiUpy/I7bIPPskPsi1Jg/+qKnYnN2DsxPbeE5acGipootbJDlB7A==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDC/cUpPZOUIV9FxlA28AkdPvq69y07AjuBX9glPIlhCAiAVZYJjL1ii5ZgvJBiiYYiaYrLmEzV+ZrCDpPOwzNvsZA=="
          }
        ]
      },
      "directories": {}
    },
    "0.8.0": {
      "name": "ava",
      "version": "0.8.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "https://github.com/sindresorhus/ava"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && tap --coverage --reporter=spec --timeout=150 test/*.js",
        "test-win": "tap --reporter=spec --timeout=150 test/*.js",
        "coverage": "tap --coverage-report=lcov"
      },
      "files": [
        "index.js",
        "cli.js",
        "api.js",
        "lib"
      ],
      "keywords": [
        "cli-app",
        "cli",
        "ava",
        "test",
        "runner",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables"
      ],
      "dependencies": {
        "arr-flatten": "^1.0.1",
        "arrify": "^1.0.0",
        "ava-init": "^0.1.0",
        "babel-core": "^5.8.23",
        "babel-plugin-espower": "^1.1.0",
        "babel-runtime": "^5.8.29",
        "bluebird": "^3.0.0",
        "chalk": "^1.0.0",
        "co-with-promise": "^4.6.0",
        "core-assert": "^0.1.0",
        "debug": "^2.2.0",
        "deeper": "^2.1.0",
        "empower": "^1.1.0",
        "empower-core": "^0.2.0",
        "figures": "^1.4.0",
        "fn-name": "^2.0.0",
        "globby": "^4.0.0",
        "has-generator": "^1.0.0",
        "is-generator-fn": "^1.0.0",
        "is-observable": "^0.1.0",
        "is-promise": "^2.1.0",
        "loud-rejection": "^1.2.0",
        "max-timeout": "^1.0.0",
        "meow": "^3.6.0",
        "object-assign": "^4.0.1",
        "observable-to-promise": "^0.1.0",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "require-from-string": "^1.1.0",
        "resolve-cwd": "^1.0.0",
        "serialize-error": "^1.1.0",
        "set-immediate-shim": "^1.0.1",
        "source-map-support": "^0.4.0",
        "squeak": "^1.2.0",
        "time-require": "^0.1.2",
        "update-notifier": "^0.5.0"
      },
      "devDependencies": {
        "coveralls": "^2.11.4",
        "signal-exit": "^2.1.2",
        "sinon": "^1.17.2",
        "source-map-fixtures": "^0.3.0",
        "tap": "^2.2.1",
        "xo": "*",
        "zen-observable": "^0.1.6"
      },
      "config": {
        "nyc": {
          "exclude": [
            "node_modules[/\\\\]",
            "test[/\\\\]"
          ]
        }
      },
      "xo": {
        "ignore": [
          "cli.js"
        ]
      },
      "gitHead": "ea6acff7bb56eb1a5cd8a0de467c03ce3836bc2d",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.8.0",
      "_shasum": "be12901937c5364336382adafc72e51eb26f11a4",
      "_from": ".",
      "_npmVersion": "2.14.7",
      "_nodeVersion": "4.2.1",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "be12901937c5364336382adafc72e51eb26f11a4",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.8.0.tgz",
        "integrity": "sha512-R+UJpSCjiOZrFeWpEcJbLzIjbQhQDj++C92rHH5m/j25SsjBShn1fGTz7AJJ/NZ8zDhilHtqX4D9hSbYLCirXA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHOSGLYjeo0SAb8x01lZGeXigIYGuB9nnnWFY7dXkNS8AiBPwISwNvE9lIlZM89jA7Gv5oBZhOtEOsoXTzSdnqwgGw=="
          }
        ]
      },
      "directories": {}
    },
    "0.9.0": {
      "name": "ava",
      "version": "0.9.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "https://github.com/sindresorhus/ava"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && tap --coverage --reporter=spec --timeout=150 test/*.js test/reporters/*.js",
        "test-win": "tap --reporter=spec --timeout=150 test/*.js test/reporters/*.js",
        "coverage": "tap --coverage-report=lcov"
      },
      "files": [
        "lib",
        "*.js"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "tap"
      ],
      "dependencies": {
        "arr-flatten": "^1.0.1",
        "arrify": "^1.0.0",
        "ava-init": "^0.1.0",
        "babel-core": "^6.3.21",
        "babel-plugin-espower": "^2.0.0",
        "babel-plugin-transform-runtime": "^6.3.13",
        "babel-preset-es2015": "^6.3.13",
        "babel-preset-stage-2": "^6.3.13",
        "babel-runtime": "^6.3.19",
        "bluebird": "^3.0.0",
        "cacha": "^1.0.3",
        "chalk": "^1.0.0",
        "co-with-promise": "^4.6.0",
        "commondir": "^1.0.1",
        "core-assert": "^0.1.0",
        "debug": "^2.2.0",
        "deeper": "^2.1.0",
        "empower-core": "^0.2.0",
        "figures": "^1.4.0",
        "fn-name": "^2.0.0",
        "globby": "^4.0.0",
        "hasha": "^2.0.2",
        "is-generator-fn": "^1.0.0",
        "is-observable": "^0.1.0",
        "is-promise": "^2.1.0",
        "log-update": "^1.0.2",
        "loud-rejection": "^1.2.0",
        "max-timeout": "^1.0.0",
        "meow": "^3.6.0",
        "object-assign": "^4.0.1",
        "observable-to-promise": "^0.1.0",
        "pkg-dir": "^1.0.0",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "require-from-string": "^1.1.0",
        "resolve-cwd": "^1.0.0",
        "serialize-error": "^1.1.0",
        "set-immediate-shim": "^1.0.1",
        "source-map-support": "^0.4.0",
        "time-require": "^0.1.2",
        "update-notifier": "^0.6.0"
      },
      "devDependencies": {
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "signal-exit": "^2.1.2",
        "sinon": "^1.17.2",
        "source-map-fixtures": "^0.4.0",
        "tap": "^2.2.1",
        "xo": "*",
        "zen-observable": "^0.1.6"
      },
      "config": {
        "nyc": {
          "exclude": [
            "node_modules[/\\\\]",
            "test[/\\\\]"
          ]
        }
      },
      "xo": {
        "ignore": [
          "cli.js"
        ]
      },
      "gitHead": "974ab6f84cd69f9e38c17b507c6c0f037b0149e4",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.9.0",
      "_shasum": "04657e243ab43023ca164f58c5c8d2642d6893e3",
      "_from": ".",
      "_npmVersion": "2.14.12",
      "_nodeVersion": "4.2.4",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "04657e243ab43023ca164f58c5c8d2642d6893e3",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.9.0.tgz",
        "integrity": "sha512-sgIWS0jNiIeA/iAczf6vFyE3uWd4Ca9i9oyaAquGn3OdOrAu1EXNhl+ekprwdXlApbwryJNjzJ/rI6uh6fwVdg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIG7eq/kth3PDLL+dXNgRMCjq28hVH0SMKd9hx/F/MIoQAiBGZkItAZYj4lg/ffwJB2xKJQHLZhKXleq5f3N9sadDMQ=="
          }
        ]
      },
      "directories": {}
    },
    "0.9.1": {
      "name": "ava",
      "version": "0.9.1",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "https://github.com/sindresorhus/ava"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && nyc --reporter=lcov --reporter=text tap --no-cov --timeout=150 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=150 test/*.js test/reporters/*.js"
      },
      "files": [
        "lib",
        "*.js"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "tap"
      ],
      "dependencies": {
        "arr-flatten": "^1.0.1",
        "arrify": "^1.0.0",
        "ava-init": "^0.1.0",
        "babel-core": "^6.3.21",
        "babel-plugin-espower": "^2.0.0",
        "babel-plugin-transform-runtime": "^6.3.13",
        "babel-preset-es2015": "^6.3.13",
        "babel-preset-stage-2": "^6.3.13",
        "babel-runtime": "^6.3.19",
        "bluebird": "^3.0.0",
        "cacha": "^1.0.3",
        "chalk": "^1.0.0",
        "co-with-promise": "^4.6.0",
        "commondir": "^1.0.1",
        "core-assert": "^0.1.0",
        "debug": "^2.2.0",
        "deeper": "^2.1.0",
        "empower-core": "^0.2.0",
        "figures": "^1.4.0",
        "fn-name": "^2.0.0",
        "globby": "^4.0.0",
        "hasha": "^2.0.2",
        "is-generator-fn": "^1.0.0",
        "is-observable": "^0.1.0",
        "is-promise": "^2.1.0",
        "log-update": "^1.0.2",
        "loud-rejection": "^1.2.0",
        "max-timeout": "^1.0.0",
        "meow": "^3.6.0",
        "object-assign": "^4.0.1",
        "observable-to-promise": "^0.1.0",
        "pkg-dir": "^1.0.0",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "require-from-string": "^1.1.0",
        "resolve-cwd": "^1.0.0",
        "serialize-error": "^1.1.0",
        "set-immediate-shim": "^1.0.1",
        "source-map-support": "^0.4.0",
        "time-require": "^0.1.2",
        "update-notifier": "^0.6.0"
      },
      "devDependencies": {
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "get-stream": "^1.1.0",
        "signal-exit": "^2.1.2",
        "sinon": "^1.17.2",
        "source-map-fixtures": "^0.4.0",
        "tap": "^2.2.1",
        "xo": "*",
        "zen-observable": "^0.1.6"
      },
      "xo": {
        "ignore": [
          "cli.js"
        ]
      },
      "gitHead": "10b52c524c6152bf8374fa8b26fc9c06fa298ec9",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.9.1",
      "_shasum": "34a6eb149f41f843b4eae0f03e11ac585a8355aa",
      "_from": ".",
      "_npmVersion": "2.14.12",
      "_nodeVersion": "4.2.4",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "34a6eb149f41f843b4eae0f03e11ac585a8355aa",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.9.1.tgz",
        "integrity": "sha512-fNHTCg1Qd2C1QMf59hmRIbuuvdR3ngaDb8TXhHSn0RuIVPdT1clU3hqnT8QoRPDfqhXDheWRxbtgmntm4RSPiQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCPxxcuofkllA6aPIXaxtWIKh2/96BVXtPbCU3w8ojiwwIhAOolFHbxlOa+Wv0NgPoCBvwYzgiI1H7ko06JRqZrggoG"
          }
        ]
      },
      "directories": {}
    },
    "0.9.2": {
      "name": "ava",
      "version": "0.9.2",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/sindresorhus/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && nyc --reporter=lcov --reporter=text tap --no-cov --timeout=150 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=150 test/*.js test/reporters/*.js"
      },
      "files": [
        "lib",
        "*.js"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "tap"
      ],
      "dependencies": {
        "arr-flatten": "^1.0.1",
        "arrify": "^1.0.0",
        "ava-init": "^0.1.0",
        "babel-core": "^6.3.21",
        "babel-plugin-espower": "^2.0.0",
        "babel-plugin-transform-regenerator": "6.3.26",
        "babel-plugin-transform-runtime": "^6.3.13",
        "babel-preset-es2015": "^6.3.13",
        "babel-preset-stage-2": "^6.3.13",
        "babel-runtime": "^6.3.19",
        "bluebird": "^3.0.0",
        "cacha": "^1.0.3",
        "chalk": "^1.0.0",
        "co-with-promise": "^4.6.0",
        "commondir": "^1.0.1",
        "core-assert": "^0.1.0",
        "debug": "^2.2.0",
        "deeper": "^2.1.0",
        "empower-core": "^0.2.0",
        "figures": "^1.4.0",
        "fn-name": "^2.0.0",
        "globby": "^4.0.0",
        "hasha": "^2.0.2",
        "is-generator-fn": "^1.0.0",
        "is-observable": "^0.1.0",
        "is-promise": "^2.1.0",
        "log-update": "^1.0.2",
        "loud-rejection": "^1.2.0",
        "max-timeout": "^1.0.0",
        "meow": "^3.6.0",
        "object-assign": "^4.0.1",
        "observable-to-promise": "^0.1.0",
        "pkg-dir": "^1.0.0",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "require-from-string": "^1.1.0",
        "resolve-cwd": "^1.0.0",
        "serialize-error": "^1.1.0",
        "set-immediate-shim": "^1.0.1",
        "source-map-support": "^0.4.0",
        "time-require": "^0.1.2",
        "update-notifier": "^0.6.0"
      },
      "devDependencies": {
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "get-stream": "^1.1.0",
        "signal-exit": "^2.1.2",
        "sinon": "^1.17.2",
        "source-map-fixtures": "^0.4.0",
        "tap": "^2.2.1",
        "xo": "*",
        "zen-observable": "^0.1.6"
      },
      "xo": {
        "ignore": [
          "cli.js"
        ]
      },
      "gitHead": "0acdcef54a4ac10ea0593635b589147ec5820542",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.9.2",
      "_shasum": "606e01842f458ec9598791a06bccab30bd8f270c",
      "_from": ".",
      "_npmVersion": "3.5.4",
      "_nodeVersion": "4.2.4",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "606e01842f458ec9598791a06bccab30bd8f270c",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.9.2.tgz",
        "integrity": "sha512-IFIIAg2WzxQHySj9+ZJoy53Cfvtlat+s7WE63agAvVVY2QdpQPMv3U8v72tnWVSJZhunIDIo2ryVxuwRD7MzPg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDQqPcH1P7YpgIGpPZW03SuMJm9k+Ys9NJjtECbD40alAiBi3z+h87iG/oglyjNVNpA/nkKjEwIgRfwkxsWhuzo6mA=="
          }
        ]
      },
      "directories": {}
    },
    "0.10.0": {
      "name": "ava",
      "version": "0.10.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/sindresorhus/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && nyc --cache --reporter=lcov --reporter=text tap --no-cov --timeout=150 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=150 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js"
      },
      "files": [
        "lib",
        "*.js"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "tap"
      ],
      "dependencies": {
        "arr-flatten": "^1.0.1",
        "arrify": "^1.0.0",
        "ava-init": "^0.1.0",
        "babel-core": "^6.3.21",
        "babel-plugin-espower": "^2.1.0",
        "babel-plugin-transform-regenerator": "6.3.26",
        "babel-plugin-transform-runtime": "^6.3.13",
        "babel-preset-es2015": "^6.3.13",
        "babel-preset-stage-2": "^6.3.13",
        "babel-runtime": "^6.3.19",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^1.0.0",
        "cli-cursor": "^1.0.2",
        "co-with-promise": "^4.6.0",
        "commondir": "^1.0.1",
        "convert-source-map": "^1.1.2",
        "core-assert": "^0.1.0",
        "debug": "^2.2.0",
        "deeper": "^2.1.0",
        "empower-core": "^0.4.0",
        "figures": "^1.4.0",
        "find-cache-dir": "^0.1.1",
        "fn-name": "^2.0.0",
        "globby": "^4.0.0",
        "is-generator-fn": "^1.0.0",
        "is-observable": "^0.1.0",
        "is-promise": "^2.1.0",
        "last-line-stream": "^1.0.0",
        "loud-rejection": "^1.2.0",
        "max-timeout": "^1.0.0",
        "md5-hex": "^1.2.0",
        "meow": "^3.7.0",
        "object-assign": "^4.0.1",
        "observable-to-promise": "^0.1.0",
        "pkg-conf": "^1.0.1",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^1.0.0",
        "serialize-error": "^1.1.0",
        "set-immediate-shim": "^1.0.1",
        "source-map-support": "^0.4.0",
        "stack-utils": "^0.3.0",
        "strip-bom": "^2.0.0",
        "time-require": "^0.1.2",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^0.6.0"
      },
      "devDependencies": {
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "get-stream": "^1.1.0",
        "inquirer": "^0.11.1",
        "nyc": "^5.1.0",
        "pify": "^2.3.0",
        "rimraf": "^2.5.0",
        "signal-exit": "^2.1.2",
        "sinon": "^1.17.2",
        "source-map-fixtures": "^1.0.0",
        "tap": "^5.0.1",
        "xo": "*",
        "zen-observable": "^0.1.6"
      },
      "xo": {
        "ignore": [
          "cli.js"
        ]
      },
      "gitHead": "3e869956894e77256ee7672f053e2feea1166fe5",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.10.0",
      "_shasum": "0ae47b47cf77c51afd3bb35d41b70bbd79bc8c20",
      "_from": ".",
      "_npmVersion": "3.5.3",
      "_nodeVersion": "5.3.0",
      "_npmUser": {
        "name": "jamestalmage",
        "email": "james@talmage.io"
      },
      "dist": {
        "shasum": "0ae47b47cf77c51afd3bb35d41b70bbd79bc8c20",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.10.0.tgz",
        "integrity": "sha512-MQ37DTP4ZrkiOYJzdD3eB0JCEgo1uY8tV/hV7xSBRjaJXHe7gPrrLISSd/NfYxBy2nV3xGxq9zr5q2GTC8Jf2g==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCXJSmwNILHvtG1N6uZ49Zmu3OuDeTdv+L4E48tohR6rQIhALXDaiR2d5fwSH+WaQzqink6cAvDZjgILshaJ7RoWDww"
          }
        ]
      },
      "directories": {}
    },
    "0.11.0": {
      "name": "ava",
      "version": "0.11.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "https://github.com/sindresorhus/ava"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && nyc --cache --reporter=lcov --reporter=text tap --no-cov --timeout=150 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=150 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js"
      },
      "files": [
        "lib",
        "*.js"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "tap"
      ],
      "dependencies": {
        "arr-flatten": "^1.0.1",
        "arrify": "^1.0.0",
        "ava-init": "^0.1.0",
        "babel-core": "^6.3.21",
        "babel-plugin-espower": "^2.1.0",
        "babel-plugin-transform-runtime": "^6.3.13",
        "babel-preset-es2015": "^6.3.13",
        "babel-preset-stage-2": "^6.3.13",
        "babel-runtime": "^6.3.19",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^1.0.0",
        "cli-cursor": "^1.0.2",
        "co-with-promise": "^4.6.0",
        "commondir": "^1.0.1",
        "convert-source-map": "^1.1.2",
        "core-assert": "^0.1.0",
        "debug": "^2.2.0",
        "deeper": "^2.1.0",
        "empower-core": "^0.5.0",
        "figures": "^1.4.0",
        "find-cache-dir": "^0.1.1",
        "fn-name": "^2.0.0",
        "globby": "^4.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-observable": "^0.1.0",
        "is-promise": "^2.1.0",
        "last-line-stream": "^1.0.0",
        "loud-rejection": "^1.2.0",
        "max-timeout": "^1.0.0",
        "md5-hex": "^1.2.0",
        "meow": "^3.7.0",
        "object-assign": "^4.0.1",
        "observable-to-promise": "^0.3.0",
        "option-chain": "^0.1.0",
        "pkg-conf": "^1.0.1",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^1.0.0",
        "serialize-error": "^1.1.0",
        "set-immediate-shim": "^1.0.1",
        "source-map-support": "^0.4.0",
        "stack-utils": "^0.3.0",
        "strip-bom": "^2.0.0",
        "time-require": "^0.1.2",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^0.6.0"
      },
      "devDependencies": {
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "get-stream": "^1.1.0",
        "inquirer": "^0.11.1",
        "nyc": "^5.1.0",
        "pify": "^2.3.0",
        "rimraf": "^2.5.0",
        "signal-exit": "^2.1.2",
        "sinon": "^1.17.2",
        "source-map-fixtures": "^1.0.0",
        "tap": "^5.0.1",
        "xo": "*",
        "zen-observable": "^0.1.6"
      },
      "xo": {
        "ignore": [
          "cli.js"
        ]
      },
      "gitHead": "678fb5f73298116e0df46e5d97e45b698673f4e7",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.11.0",
      "_shasum": "803c824834bc82ce4647a26d758e937ee78afd8e",
      "_from": ".",
      "_npmVersion": "2.14.12",
      "_nodeVersion": "4.2.4",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "803c824834bc82ce4647a26d758e937ee78afd8e",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.11.0.tgz",
        "integrity": "sha512-u8b/F2m5E/N72QRDyXlWfO2y+TNj3AyOOnSb2xdYPolonNm2f7VD+rChW2hlFsnyfoVGlBhYGxSGgbbB+016NQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCgeITOBucUW/cmNk2ZSXCFbbebizTns0Ds+sAG1zOg/gIhAP8zGa+eA3/eCIPzPxCHl2OOjccanllASv3C0OXwaC47"
          }
        ]
      },
      "directories": {}
    },
    "0.12.0": {
      "name": "ava",
      "version": "0.12.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/sindresorhus/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && nyc --cache --reporter=lcov --reporter=text tap --no-cov --timeout=150 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=150 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js"
      },
      "files": [
        "lib",
        "*.js"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "tap"
      ],
      "dependencies": {
        "arr-flatten": "^1.0.1",
        "arrify": "^1.0.0",
        "ava-init": "^0.1.0",
        "babel-core": "^6.3.21",
        "babel-plugin-espower": "^2.1.0",
        "babel-plugin-transform-runtime": "^6.3.13",
        "babel-preset-es2015": "^6.3.13",
        "babel-preset-stage-2": "^6.3.13",
        "babel-runtime": "^6.3.19",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^1.0.0",
        "cli-cursor": "^1.0.2",
        "co-with-promise": "^4.6.0",
        "common-path-prefix": "^1.0.0",
        "convert-source-map": "^1.1.2",
        "core-assert": "^0.1.0",
        "debug": "^2.2.0",
        "deeper": "^2.1.0",
        "empower-core": "^0.5.0",
        "figures": "^1.4.0",
        "find-cache-dir": "^0.1.1",
        "fn-name": "^2.0.0",
        "globby": "^4.0.0",
        "ignore-by-default": "^1.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-observable": "^0.1.0",
        "is-promise": "^2.1.0",
        "last-line-stream": "^1.0.0",
        "loud-rejection": "^1.2.0",
        "max-timeout": "^1.0.0",
        "md5-hex": "^1.2.0",
        "meow": "^3.7.0",
        "multimatch": "^2.1.0",
        "object-assign": "^4.0.1",
        "observable-to-promise": "^0.3.0",
        "option-chain": "^0.1.0",
        "pkg-conf": "^1.0.1",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^1.0.0",
        "serialize-error": "^1.1.0",
        "set-immediate-shim": "^1.0.1",
        "source-map-support": "^0.4.0",
        "stack-utils": "^0.4.0",
        "strip-bom": "^2.0.0",
        "time-require": "^0.1.2",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^0.6.0",
        "chokidar": "^1.4.2"
      },
      "devDependencies": {
        "cli-table2": "^0.1.9",
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "get-stream": "^1.1.0",
        "git-branch": "^0.3.0",
        "inquirer": "^0.11.1",
        "lolex": "^1.4.0",
        "mkdirp": "^0.5.1",
        "nyc": "^5.1.0",
        "pify": "^2.3.0",
        "proxyquire": "^1.7.4",
        "rimraf": "^2.5.0",
        "signal-exit": "^2.1.2",
        "sinon": "^1.17.2",
        "source-map-fixtures": "^1.0.0",
        "tap": "^5.4.2",
        "touch": "^1.0.0",
        "xo": "*",
        "zen-observable": "^0.1.6"
      },
      "optionalDependencies": {
        "chokidar": "^1.4.2"
      },
      "xo": {
        "ignore": [
          "cli.js",
          "bench/*/*.js"
        ]
      },
      "gitHead": "f435f35fda3d351478329296057ff66a4434b7a5",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.12.0",
      "_shasum": "cb26c24ef70deed169cceb1eec0b887b91fa4f5d",
      "_from": ".",
      "_npmVersion": "2.14.12",
      "_nodeVersion": "4.3.0",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "cb26c24ef70deed169cceb1eec0b887b91fa4f5d",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.12.0.tgz",
        "integrity": "sha512-A3NWmaIOAzse9vabKaCFTqATdaf/qzbbl6BIhHgmXgGYJ/Ix5jwL2SKpC8VPGAI0PTTJ+BVI0s8lwFcqnxUSNA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC3H1Orvlv3y5KmS/oXvc8yWWToU+Oo95ZT3OgtnDL3eQIhAMm9macbIV5SZouY/eSiJM6b2O4acvz9FsmhLGv3xwc7"
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-6-west.internal.npmjs.com",
        "tmp": "tmp/ava-0.12.0.tgz_1455790729673_0.02146853832527995"
      },
      "directories": {}
    },
    "0.13.0": {
      "name": "ava",
      "version": "0.13.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "https://github.com/sindresorhus/ava"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && nyc --cache --reporter=lcov --reporter=text tap --no-cov --timeout=150 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=150 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js"
      },
      "files": [
        "lib",
        "*.js",
        "index.d.ts"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "tap"
      ],
      "dependencies": {
        "arr-diff": "^2.0.0",
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "ava-init": "^0.1.0",
        "babel-core": "^6.3.21",
        "babel-plugin-espower": "^2.1.0",
        "babel-plugin-transform-runtime": "^6.3.13",
        "babel-preset-es2015": "^6.3.13",
        "babel-preset-stage-2": "^6.3.13",
        "babel-runtime": "^6.3.19",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^1.0.0",
        "cli-cursor": "^1.0.2",
        "cli-spinners": "^0.1.2",
        "co-with-promise": "^4.6.0",
        "common-path-prefix": "^1.0.0",
        "convert-source-map": "^1.1.2",
        "core-assert": "^0.1.0",
        "debug": "^2.2.0",
        "deeper": "^2.1.0",
        "empower-core": "^0.5.0",
        "figures": "^1.4.0",
        "find-cache-dir": "^0.1.1",
        "fn-name": "^2.0.0",
        "globby": "^4.0.0",
        "ignore-by-default": "^1.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-observable": "^0.1.0",
        "is-promise": "^2.1.0",
        "last-line-stream": "^1.0.0",
        "loud-rejection": "^1.2.0",
        "matcher": "^0.1.1",
        "max-timeout": "^1.0.0",
        "md5-hex": "^1.2.0",
        "meow": "^3.7.0",
        "multimatch": "^2.1.0",
        "object-assign": "^4.0.1",
        "observable-to-promise": "^0.3.0",
        "option-chain": "^0.1.0",
        "pkg-conf": "^1.0.1",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^1.0.0",
        "serialize-error": "^1.1.0",
        "set-immediate-shim": "^1.0.1",
        "slash": "^1.0.0",
        "source-map-support": "^0.4.0",
        "stack-utils": "^0.4.0",
        "strip-bom": "^2.0.0",
        "time-require": "^0.1.2",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^0.6.0",
        "chokidar": "^1.4.2"
      },
      "devDependencies": {
        "cli-table2": "^0.1.9",
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "get-stream": "^2.0.0",
        "git-branch": "^0.3.0",
        "inquirer": "^0.11.1",
        "lolex": "^1.4.0",
        "mkdirp": "^0.5.1",
        "nyc": "^5.1.0",
        "pify": "^2.3.0",
        "proxyquire": "^1.7.4",
        "rimraf": "^2.5.0",
        "signal-exit": "^2.1.2",
        "sinon": "^1.17.2",
        "source-map-fixtures": "^1.0.0",
        "tap": "^5.4.2",
        "touch": "^1.0.0",
        "xo": "*",
        "zen-observable": "^0.1.6"
      },
      "optionalDependencies": {
        "chokidar": "^1.4.2"
      },
      "xo": {
        "ignore": [
          "bench/*/*.js"
        ]
      },
      "gitHead": "a723eb12eb8cc37461988b9fa8715fe34a96d22d",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.13.0",
      "_shasum": "ea022652c27a69c50c5ceed80b1218dc3301f461",
      "_from": ".",
      "_npmVersion": "2.14.12",
      "_nodeVersion": "4.3.0",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "ea022652c27a69c50c5ceed80b1218dc3301f461",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.13.0.tgz",
        "integrity": "sha512-NGUlMNAyXKJ0REENiZFaaJ1sBKu/yaHa+Bq9MEkLM+A8WNKAlkkCQVCsJBeoZFqcscEmLNLsi7gBTRnGf1Ztbg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICup2Ez0taSa9rmlzu9pK9MQNIFtG4gjLii4vXP+d60RAiBjLruw//Y+AjCbNsXACYYKfu5G5UxFuW6ELCAZwmB15w=="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-13-west.internal.npmjs.com",
        "tmp": "tmp/ava-0.13.0.tgz_1457624128425_0.9680423887912184"
      },
      "directories": {}
    },
    "0.14.0": {
      "name": "ava",
      "version": "0.14.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/sindresorhus/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && nyc --cache --reporter=lcov --reporter=text tap --no-cov --timeout=150 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=150 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js"
      },
      "files": [
        "lib",
        "*.js",
        "index.d.ts"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "tap"
      ],
      "dependencies": {
        "arr-diff": "^2.0.0",
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "ava-init": "^0.1.0",
        "babel-core": "^6.3.21",
        "babel-plugin-detective": "^1.0.2",
        "babel-plugin-espower": "^2.1.0",
        "babel-plugin-transform-runtime": "^6.3.13",
        "babel-preset-es2015": "^6.3.13",
        "babel-preset-stage-2": "^6.3.13",
        "babel-runtime": "^6.3.19",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^1.0.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^1.0.2",
        "cli-spinners": "^0.1.2",
        "cli-truncate": "^0.2.0",
        "co-with-promise": "^4.6.0",
        "common-path-prefix": "^1.0.0",
        "convert-source-map": "^1.2.0",
        "core-assert": "^0.1.0",
        "debug": "^2.2.0",
        "empower-core": "^0.5.0",
        "figures": "^1.4.0",
        "find-cache-dir": "^0.1.1",
        "fn-name": "^2.0.0",
        "globby": "^4.0.0",
        "ignore-by-default": "^1.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^0.1.0",
        "is-promise": "^2.1.0",
        "last-line-stream": "^1.0.0",
        "lodash.debounce": "^4.0.3",
        "loud-rejection": "^1.2.0",
        "matcher": "^0.1.1",
        "max-timeout": "^1.0.0",
        "md5-hex": "^1.2.0",
        "meow": "^3.7.0",
        "ms": "^0.7.1",
        "multimatch": "^2.1.0",
        "object-assign": "^4.0.1",
        "observable-to-promise": "^0.3.0",
        "only-shallow": "^1.2.0",
        "option-chain": "^0.1.0",
        "pkg-conf": "^1.0.1",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^1.0.0",
        "set-immediate-shim": "^1.0.1",
        "slash": "^1.0.0",
        "source-map-support": "^0.4.0",
        "stack-utils": "^0.4.0",
        "strip-bom": "^2.0.0",
        "time-require": "^0.1.2",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^0.6.0",
        "chokidar": "^1.4.2"
      },
      "devDependencies": {
        "cli-table2": "^0.2.0",
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "get-stream": "^2.0.0",
        "git-branch": "^0.3.0",
        "inquirer": "^0.12.0",
        "lolex": "^1.4.0",
        "mkdirp": "^0.5.1",
        "nyc": "^6.0.0",
        "pify": "^2.3.0",
        "proxyquire": "^1.7.4",
        "rimraf": "^2.5.0",
        "signal-exit": "^2.1.2",
        "sinon": "^1.17.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^5.4.2",
        "touch": "^1.0.0",
        "xo": "*",
        "zen-observable": "^0.2.1"
      },
      "optionalDependencies": {
        "chokidar": "^1.4.2"
      },
      "xo": {
        "ignore": [
          "bench/*/*.js"
        ]
      },
      "gitHead": "1e0b1c14475fde7eb6d4c3109d2af3958b77704f",
      "bugs": {
        "url": "https://github.com/sindresorhus/ava/issues"
      },
      "_id": "ava@0.14.0",
      "_shasum": "fbe6001e79a101757141b6948795d64a6935d362",
      "_from": ".",
      "_npmVersion": "3.8.2",
      "_nodeVersion": "5.9.0",
      "_npmUser": {
        "name": "jamestalmage",
        "email": "james@talmage.io"
      },
      "dist": {
        "shasum": "fbe6001e79a101757141b6948795d64a6935d362",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.14.0.tgz",
        "integrity": "sha512-zKv96ov7YZngzCBd7W7SQLlUEDzDbZaDi4QZVPOSi0NzAxA8AXJ3rAhD3rSxSQZj/XQo3KrCRXVT6oadoKV6vw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBto51eit260hCEEER1i/Vg7c2mKBVIioj6y6dEFJJihAiEA1FNTivCgY4XgSe6ZLieP4jEL31JHBOpV0qSLDXO3oKI="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ava-0.14.0.tgz_1459994213187_0.437810976523906"
      },
      "directories": {}
    },
    "0.15.0": {
      "name": "ava",
      "version": "0.15.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && nyc --cache --reporter=lcov --reporter=text tap --no-cov --timeout=150 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=150 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js"
      },
      "files": [
        "lib",
        "*.js",
        "index.d.ts"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "tap"
      ],
      "dependencies": {
        "arr-diff": "^2.0.0",
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "ava-init": "^0.1.0",
        "babel-code-frame": "^6.7.5",
        "babel-core": "^6.3.21",
        "babel-plugin-ava-throws-helper": "0.0.4",
        "babel-plugin-detective": "^1.0.2",
        "babel-plugin-espower": "^2.1.0",
        "babel-plugin-transform-runtime": "^6.3.13",
        "babel-preset-es2015": "^6.3.13",
        "babel-preset-stage-2": "^6.3.13",
        "babel-runtime": "^6.3.19",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^1.0.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^1.0.2",
        "cli-spinners": "^0.1.2",
        "cli-truncate": "^0.2.0",
        "co-with-promise": "^4.6.0",
        "common-path-prefix": "^1.0.0",
        "convert-source-map": "^1.2.0",
        "core-assert": "^0.2.0",
        "debug": "^2.2.0",
        "empower-core": "^0.5.0",
        "figures": "^1.4.0",
        "find-cache-dir": "^0.1.1",
        "fn-name": "^2.0.0",
        "globby": "^4.0.0",
        "has-flag": "^2.0.0",
        "ignore-by-default": "^1.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^0.2.0",
        "is-promise": "^2.1.0",
        "last-line-stream": "^1.0.0",
        "lodash.debounce": "^4.0.3",
        "loud-rejection": "^1.2.0",
        "matcher": "^0.1.1",
        "max-timeout": "^1.0.0",
        "md5-hex": "^1.2.0",
        "meow": "^3.7.0",
        "ms": "^0.7.1",
        "multimatch": "^2.1.0",
        "not-so-shallow": "^0.1.3",
        "object-assign": "^4.0.1",
        "observable-to-promise": "^0.4.0",
        "option-chain": "^0.1.0",
        "package-hash": "^1.1.0",
        "pkg-conf": "^1.0.1",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "repeating": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^1.0.0",
        "set-immediate-shim": "^1.0.1",
        "slash": "^1.0.0",
        "source-map-support": "^0.4.0",
        "stack-utils": "^0.4.0",
        "strip-ansi": "^3.0.1",
        "strip-bom": "^2.0.0",
        "time-require": "^0.1.2",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^0.7.0",
        "chokidar": "^1.4.2"
      },
      "devDependencies": {
        "cli-table2": "^0.2.0",
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "execa": "^0.4.0",
        "get-stream": "^2.0.0",
        "git-branch": "^0.3.0",
        "has-ansi": "^2.0.0",
        "inquirer": "^1.0.2",
        "lolex": "^1.4.0",
        "mkdirp": "^0.5.1",
        "nyc": "^6.0.0",
        "pify": "^2.3.0",
        "proxyquire": "^1.7.4",
        "rimraf": "^2.5.0",
        "signal-exit": "^2.1.2",
        "sinon": "^1.17.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^5.4.2",
        "touch": "^1.0.0",
        "xo": "*",
        "zen-observable": "^0.2.1"
      },
      "optionalDependencies": {
        "chokidar": "^1.4.2"
      },
      "gitHead": "c9c00d626e4c7f1fe7ff31eea763ff9b6983032c",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@0.15.0",
      "_shasum": "7c86ec61d3ca4f81634b95ce0fd1717554f5f273",
      "_from": ".",
      "_npmVersion": "3.8.6",
      "_nodeVersion": "5.10.1",
      "_npmUser": {
        "name": "jamestalmage",
        "email": "james@talmage.io"
      },
      "dist": {
        "shasum": "7c86ec61d3ca4f81634b95ce0fd1717554f5f273",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.15.0.tgz",
        "integrity": "sha512-01nBJg+yz7lJHlSjpcEjvoHr9fvoyq0I5E6QvZbZIi7ZMHl6mb8K4JBSAcs5k1QUSmhTZnCSAIR7/oZSlhmwXg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCPACNUYr2tzxMNlV83S3B6No4jJqTdxy1SGJ2ezTE+MgIhAOWbWV/C33/ruvY9abE5O3Mj9I/RxdddUHpqxf3p/5yj"
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ava-0.15.0.tgz_1464147687363_0.012951282318681479"
      },
      "directories": {}
    },
    "0.15.1": {
      "name": "ava",
      "version": "0.15.1",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && nyc --cache --reporter=lcov --reporter=text tap --no-cov --timeout=150 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=150 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js"
      },
      "files": [
        "lib",
        "*.js",
        "index.d.ts"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "tap"
      ],
      "dependencies": {
        "arr-diff": "^2.0.0",
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "ava-init": "^0.1.0",
        "babel-code-frame": "^6.7.5",
        "babel-core": "^6.3.21",
        "babel-plugin-ava-throws-helper": "0.0.4",
        "babel-plugin-detective": "^1.0.2",
        "babel-plugin-espower": "^2.1.0",
        "babel-plugin-transform-runtime": "^6.3.13",
        "babel-preset-es2015": "^6.3.13",
        "babel-preset-stage-2": "^6.3.13",
        "babel-runtime": "^6.3.19",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^1.0.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^1.0.2",
        "cli-spinners": "^0.1.2",
        "cli-truncate": "^0.2.0",
        "co-with-promise": "^4.6.0",
        "common-path-prefix": "^1.0.0",
        "convert-source-map": "^1.2.0",
        "core-assert": "^0.2.0",
        "debug": "^2.2.0",
        "empower-core": "^0.5.0",
        "figures": "^1.4.0",
        "find-cache-dir": "^0.1.1",
        "fn-name": "^2.0.0",
        "globby": "^4.0.0",
        "has-flag": "^2.0.0",
        "ignore-by-default": "^1.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^0.2.0",
        "is-promise": "^2.1.0",
        "last-line-stream": "^1.0.0",
        "lodash.debounce": "^4.0.3",
        "loud-rejection": "^1.2.0",
        "matcher": "^0.1.1",
        "max-timeout": "^1.0.0",
        "md5-hex": "^1.2.0",
        "meow": "^3.7.0",
        "ms": "^0.7.1",
        "multimatch": "^2.1.0",
        "not-so-shallow": "^0.1.3",
        "object-assign": "^4.0.1",
        "observable-to-promise": "^0.4.0",
        "option-chain": "^0.1.0",
        "package-hash": "^1.1.0",
        "pkg-conf": "^1.0.1",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "repeating": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^1.0.0",
        "set-immediate-shim": "^1.0.1",
        "slash": "^1.0.0",
        "source-map-support": "^0.4.0",
        "stack-utils": "^0.4.0",
        "strip-ansi": "^3.0.1",
        "strip-bom": "^2.0.0",
        "time-require": "^0.1.2",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^0.7.0",
        "chokidar": "^1.4.2"
      },
      "devDependencies": {
        "cli-table2": "^0.2.0",
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "execa": "^0.4.0",
        "get-stream": "^2.0.0",
        "git-branch": "^0.3.0",
        "has-ansi": "^2.0.0",
        "inquirer": "^1.0.2",
        "lolex": "^1.4.0",
        "mkdirp": "^0.5.1",
        "nyc": "^6.0.0",
        "pify": "^2.3.0",
        "proxyquire": "^1.7.4",
        "rimraf": "^2.5.0",
        "signal-exit": "^2.1.2",
        "sinon": "^1.17.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^5.4.2",
        "touch": "^1.0.0",
        "xo": "*",
        "zen-observable": "^0.2.1"
      },
      "optionalDependencies": {
        "chokidar": "^1.4.2"
      },
      "gitHead": "63b478221fa7c74e009aafe97bab9837cd1e0f45",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@0.15.1",
      "_shasum": "c04c4a72ac76fa70239cc7c9ef857bb90e5c6f64",
      "_from": ".",
      "_npmVersion": "3.8.6",
      "_nodeVersion": "5.10.1",
      "_npmUser": {
        "name": "jamestalmage",
        "email": "james@talmage.io"
      },
      "dist": {
        "shasum": "c04c4a72ac76fa70239cc7c9ef857bb90e5c6f64",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.15.1.tgz",
        "integrity": "sha512-v5yuUn89ULyzlIbItxsyfJRLGkQXbAn4I2vrODY7BJBq+yJzPdkr4lvzkGG9YbBOL0hyyEyBsQc6hs5FwCp+wg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIF/XOk5NQxvxQhIptSCzzuHI/VftbON7ESRDOdeQiKsRAiA6UWMFfpKDrgLIJ2i0Nrx4NLlmjt6WAI5hTloeqxZYSQ=="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/ava-0.15.1.tgz_1464223430982_0.896197282942012"
      },
      "directories": {}
    },
    "0.15.2": {
      "name": "ava",
      "version": "0.15.2",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && nyc --cache --reporter=lcov --reporter=text tap --no-cov --timeout=150 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=150 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js"
      },
      "files": [
        "lib",
        "*.js",
        "index.d.ts"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "tap"
      ],
      "dependencies": {
        "arr-diff": "^2.0.0",
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "ava-init": "^0.1.0",
        "babel-code-frame": "^6.7.5",
        "babel-core": "^6.3.21",
        "babel-plugin-ava-throws-helper": "0.0.4",
        "babel-plugin-detective": "^1.0.2",
        "babel-plugin-espower": "^2.1.0",
        "babel-plugin-transform-runtime": "^6.3.13",
        "babel-preset-es2015": "^6.3.13",
        "babel-preset-stage-2": "^6.3.13",
        "babel-runtime": "^6.3.19",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^1.0.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^1.0.2",
        "cli-spinners": "^0.1.2",
        "cli-truncate": "^0.2.0",
        "co-with-promise": "^4.6.0",
        "common-path-prefix": "^1.0.0",
        "convert-source-map": "^1.2.0",
        "core-assert": "^0.2.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^2.2.0",
        "empower-core": "^0.5.0",
        "figures": "^1.4.0",
        "find-cache-dir": "^0.1.1",
        "fn-name": "^2.0.0",
        "globby": "^4.0.0",
        "has-flag": "^2.0.0",
        "ignore-by-default": "^1.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^0.2.0",
        "is-promise": "^2.1.0",
        "last-line-stream": "^1.0.0",
        "lodash.debounce": "^4.0.3",
        "loud-rejection": "^1.2.0",
        "matcher": "^0.1.1",
        "max-timeout": "^1.0.0",
        "md5-hex": "^1.2.0",
        "meow": "^3.7.0",
        "ms": "^0.7.1",
        "multimatch": "^2.1.0",
        "not-so-shallow": "^0.1.3",
        "object-assign": "^4.0.1",
        "observable-to-promise": "^0.4.0",
        "option-chain": "^0.1.0",
        "package-hash": "^1.1.0",
        "pkg-conf": "^1.0.1",
        "plur": "^2.0.0",
        "power-assert-formatter": "^1.3.0",
        "power-assert-renderers": "^0.1.0",
        "pretty-ms": "^2.0.0",
        "repeating": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^1.0.0",
        "set-immediate-shim": "^1.0.1",
        "slash": "^1.0.0",
        "source-map-support": "^0.4.0",
        "stack-utils": "^0.4.0",
        "strip-ansi": "^3.0.1",
        "strip-bom": "^2.0.0",
        "time-require": "^0.1.2",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^0.7.0",
        "chokidar": "^1.4.2"
      },
      "devDependencies": {
        "cli-table2": "^0.2.0",
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "execa": "^0.4.0",
        "get-stream": "^2.0.0",
        "git-branch": "^0.3.0",
        "has-ansi": "^2.0.0",
        "inquirer": "^1.0.2",
        "lolex": "^1.4.0",
        "mkdirp": "^0.5.1",
        "nyc": "^6.0.0",
        "pify": "^2.3.0",
        "proxyquire": "^1.7.4",
        "rimraf": "^2.5.0",
        "signal-exit": "^2.1.2",
        "sinon": "^1.17.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^5.4.2",
        "touch": "^1.0.0",
        "xo": "*",
        "zen-observable": "^0.2.1"
      },
      "optionalDependencies": {
        "chokidar": "^1.4.2"
      },
      "gitHead": "19625c9dd1bde2cbbe323f79e393b083ba2ccb78",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@0.15.2",
      "_shasum": "514bb5d86a71b0294351f803a13ddb0c27c7bb62",
      "_from": ".",
      "_npmVersion": "3.8.6",
      "_nodeVersion": "5.10.1",
      "_npmUser": {
        "name": "jamestalmage",
        "email": "james@talmage.io"
      },
      "dist": {
        "shasum": "514bb5d86a71b0294351f803a13ddb0c27c7bb62",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.15.2.tgz",
        "integrity": "sha512-aGjJz5OtTle5hS+SkofHfVjdjizDB/AHO270EiPiTTl2+BOnY/ykSgaMrt/KH/KkVQrd42Aqpi6+McSh4ZLKPw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFwA9Y+VTTd8R3ARQHszsG6UN3+VgdtYqEffcK3Db99jAiEArjX5Y8LRZYpx+hwi/nJMFyj4xjMB/MCfwa1rA0DagrA="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/ava-0.15.2.tgz_1465031185670_0.8939999574795365"
      },
      "directories": {}
    },
    "0.16.0": {
      "name": "ava",
      "version": "0.16.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "typings": "types/generated.d.ts",
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "xo && nyc --cache --reporter=lcov --reporter=text tap --no-cov --timeout=150 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=150 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js",
        "prepublish": "npm run make-ts",
        "make-ts": "babel-node --presets=babel-preset-es2015 --plugins=transform-runtime types/make.js"
      },
      "files": [
        "lib",
        "*.js",
        "types/generated.d.ts"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "tap"
      ],
      "dependencies": {
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "ava-files": "^0.1.1",
        "ava-init": "^0.1.0",
        "babel-code-frame": "^6.7.5",
        "babel-core": "^6.3.21",
        "babel-plugin-ava-throws-helper": "^0.1.0",
        "babel-plugin-detective": "^2.0.0",
        "babel-plugin-espower": "^2.2.0",
        "babel-plugin-transform-runtime": "^6.3.13",
        "babel-preset-es2015": "^6.3.13",
        "babel-preset-stage-2": "^6.3.13",
        "babel-runtime": "^6.3.19",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^1.0.0",
        "chokidar": "^1.4.2",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^1.0.2",
        "cli-spinners": "^0.1.2",
        "cli-truncate": "^0.2.0",
        "co-with-promise": "^4.6.0",
        "common-path-prefix": "^1.0.0",
        "convert-source-map": "^1.2.0",
        "core-assert": "^0.2.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^2.2.0",
        "empower-core": "^0.6.1",
        "figures": "^1.4.0",
        "find-cache-dir": "^0.1.1",
        "fn-name": "^2.0.0",
        "has-flag": "^2.0.0",
        "ignore-by-default": "^1.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^0.2.0",
        "is-promise": "^2.1.0",
        "last-line-stream": "^1.0.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "loud-rejection": "^1.2.0",
        "matcher": "^0.1.1",
        "max-timeout": "^1.0.0",
        "md5-hex": "^1.2.0",
        "meow": "^3.7.0",
        "ms": "^0.7.1",
        "not-so-shallow": "^0.1.3",
        "object-assign": "^4.0.1",
        "observable-to-promise": "^0.4.0",
        "option-chain": "^0.1.0",
        "package-hash": "^1.1.0",
        "pkg-conf": "^1.0.1",
        "plur": "^2.0.0",
        "power-assert-context-formatter": "^1.0.4",
        "power-assert-renderer-assertion": "^1.0.1",
        "power-assert-renderer-succinct": "^1.0.1",
        "pretty-ms": "^2.0.0",
        "repeating": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^1.0.0",
        "set-immediate-shim": "^1.0.1",
        "source-map-support": "^0.4.0",
        "stack-utils": "^0.4.0",
        "strip-ansi": "^3.0.1",
        "strip-bom": "^2.0.0",
        "time-require": "^0.1.2",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^1.0.0"
      },
      "devDependencies": {
        "babel-cli": "^6.10.1",
        "babel-preset-react": "^6.5.0",
        "cli-table2": "^0.2.0",
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "execa": "^0.4.0",
        "get-stream": "^2.0.0",
        "git-branch": "^0.3.0",
        "has-ansi": "^2.0.0",
        "inquirer": "^1.0.2",
        "lolex": "^1.4.0",
        "mkdirp": "^0.5.1",
        "nyc": "^7.1.0",
        "pify": "^2.3.0",
        "proxyquire": "^1.7.4",
        "rimraf": "^2.5.0",
        "signal-exit": "^3.0.0",
        "sinon": "^1.17.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^6.3.0",
        "touch": "^1.0.0",
        "xo": "*",
        "zen-observable": "^0.3.0"
      },
      "xo": {
        "rules": {
          "import/newline-after-import": 0
        },
        "overrides": [
          {
            "files": [
              "test/**/*.js"
            ],
            "rules": {
              "max-lines": 0
            }
          }
        ]
      },
      "gitHead": "01a110e15fecd84c44f464c09799d60416ee93fc",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@0.16.0",
      "_shasum": "07d7e06c627820115a84d7ee346f0bb165730454",
      "_from": ".",
      "_npmVersion": "3.10.5",
      "_nodeVersion": "4.4.5",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "07d7e06c627820115a84d7ee346f0bb165730454",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.16.0.tgz",
        "integrity": "sha512-dzjoolQdo67YMUCtmf+/Htin56/3usshvBQroKe0yjPpQYMOAK+MobofOIuLc+laUOUvNKbk2KpJ5xOgQetwuQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDPbbeAHbN9ymFPEeIKHlNunIlvl1ADkhdwWzAnasfvbQIhAM98bCTLu8PT/YIa10mUYNBGwflDOx+NOOFycz+5kzPF"
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/ava-0.16.0.tgz_1470496223996_0.43415276356972754"
      },
      "directories": {}
    },
    "0.17.0": {
      "name": "ava",
      "version": "0.17.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "typings": "types/generated.d.ts",
      "engines": {
        "node": ">=0.10.0"
      },
      "scripts": {
        "test": "scripts/xo.js && nyc --cache --reporter=lcov --reporter=text tap --no-cov --timeout=150 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=150 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js",
        "prepublish": "npm run make-ts",
        "make-ts": "babel-node --presets=babel-preset-es2015 --plugins=transform-runtime types/make.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "types/generated.d.ts"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "mocha",
        "qunit",
        "jasmine",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "tap"
      ],
      "dependencies": {
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "auto-bind": "^0.1.0",
        "ava-files": "^0.2.0",
        "ava-init": "^0.1.0",
        "babel-code-frame": "^6.16.0",
        "babel-core": "^6.17.0",
        "babel-plugin-ava-throws-helper": "^0.1.0",
        "babel-plugin-detective": "^2.0.0",
        "babel-plugin-espower": "^2.3.1",
        "babel-plugin-transform-runtime": "^6.15.0",
        "babel-preset-es2015": "^6.16.0",
        "babel-preset-es2015-node4": "^2.1.0",
        "babel-preset-stage-2": "^6.17.0",
        "babel-runtime": "^6.11.6",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^1.0.0",
        "chokidar": "^1.4.2",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^1.0.2",
        "cli-spinners": "^0.1.2",
        "cli-truncate": "^0.2.0",
        "co-with-promise": "^4.6.0",
        "common-path-prefix": "^1.0.0",
        "convert-source-map": "^1.2.0",
        "core-assert": "^0.2.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^2.2.0",
        "empower-core": "^0.6.1",
        "figures": "^1.4.0",
        "find-cache-dir": "^0.1.1",
        "fn-name": "^2.0.0",
        "get-port": "^2.1.0",
        "has-flag": "^2.0.0",
        "ignore-by-default": "^1.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^0.2.0",
        "is-promise": "^2.1.0",
        "last-line-stream": "^1.0.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.isequal": "^4.4.0",
        "loud-rejection": "^1.2.0",
        "matcher": "^0.1.1",
        "max-timeout": "^1.0.0",
        "md5-hex": "^1.2.0",
        "meow": "^3.7.0",
        "ms": "^0.7.1",
        "object-assign": "^4.0.1",
        "observable-to-promise": "^0.4.0",
        "option-chain": "^0.1.0",
        "package-hash": "^1.1.0",
        "pkg-conf": "^1.0.1",
        "plur": "^2.0.0",
        "power-assert-context-formatter": "^1.0.4",
        "power-assert-renderer-assertion": "^1.0.1",
        "power-assert-renderer-succinct": "^1.0.1",
        "pretty-ms": "^2.0.0",
        "repeating": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^1.0.0",
        "semver": "^5.3.0",
        "set-immediate-shim": "^1.0.1",
        "source-map-support": "^0.4.0",
        "stack-utils": "^0.4.0",
        "strip-ansi": "^3.0.1",
        "strip-bom": "^2.0.0",
        "time-require": "^0.1.2",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^1.0.0"
      },
      "devDependencies": {
        "babel-cli": "^6.10.1",
        "babel-preset-react": "^6.5.0",
        "cli-table2": "^0.2.0",
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "execa": "^0.4.0",
        "get-stream": "^2.0.0",
        "git-branch": "^0.3.0",
        "has-ansi": "^2.0.0",
        "inquirer": "^1.0.2",
        "lolex": "^1.4.0",
        "mkdirp": "^0.5.1",
        "nyc": "^9.0.1",
        "pify": "^2.3.0",
        "proxyquire": "^1.7.4",
        "rimraf": "^2.5.0",
        "signal-exit": "^3.0.0",
        "sinon": "^1.17.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^8.0.0",
        "touch": "^1.0.0",
        "xo": "^0.17.0",
        "zen-observable": "^0.3.0"
      },
      "xo": {
        "rules": {
          "import/newline-after-import": "off",
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "gitHead": "b24495d5f495abee798589c7c0b91202f4207064",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@0.17.0",
      "_shasum": "359e2a89616801ef03929c3cf10a9d4f8e451d02",
      "_from": ".",
      "_npmVersion": "2.15.11",
      "_nodeVersion": "4.6.2",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "359e2a89616801ef03929c3cf10a9d4f8e451d02",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.17.0.tgz",
        "integrity": "sha512-Cr214Kw3q5TkyP2qV441gB/fiSPU17Q8L1YM6m/8vx2Z+xn4M983n9OF67n2gp5DbF9g8HA8hngDt1tuqX8D+w==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCI7Ul5V7GCfTS6pECtOPXebnCQS0QxOsPhmHr4C9D0ywIhAL+bLqN131fy8o7PLK+CTl1A561+ZvLdaJWXgeQiXnUB"
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ava-0.17.0.tgz_1479372727762_0.5040751337073743"
      },
      "directories": {}
    },
    "0.18.0": {
      "name": "ava",
      "version": "0.18.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "ava",
          "email": "npm@ava.li"
        },
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "jfmengels",
          "email": "jfm.engels@gmail.com"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "sotojuan",
          "email": "imjuansoto@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "typings": "types/generated.d.ts",
      "engines": {
        "node": ">=4"
      },
      "scripts": {
        "test": "xo && nyc tap --no-cov --timeout=150 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=150 --jobs=4 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js",
        "prepublish": "npm run make-ts",
        "make-ts": "node types/make.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "types/generated.d.ts"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "jest",
        "mocha",
        "qunit",
        "jasmine",
        "testing",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^1.0.0",
        "@ava/babel-preset-transform-test-files": "^2.0.0",
        "@ava/pretty-format": "^1.0.0",
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "auto-bind": "^1.1.0",
        "ava-init": "^0.2.0",
        "babel-code-frame": "^6.16.0",
        "babel-core": "^6.17.0",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^1.0.0",
        "chokidar": "^1.4.2",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-spinners": "^1.0.0",
        "cli-truncate": "^0.2.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.0",
        "common-path-prefix": "^1.0.0",
        "convert-source-map": "^1.2.0",
        "core-assert": "^0.2.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^2.2.0",
        "diff": "^3.0.1",
        "dot-prop": "^4.1.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "figures": "^2.0.0",
        "find-cache-dir": "^0.1.1",
        "fn-name": "^2.0.0",
        "get-port": "^2.1.0",
        "globby": "^6.0.0",
        "has-flag": "^2.0.0",
        "ignore-by-default": "^1.0.0",
        "indent-string": "^3.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^0.2.0",
        "is-promise": "^2.1.0",
        "jest-snapshot": "^18.1.0",
        "last-line-stream": "^1.0.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "lodash.isequal": "^4.5.0",
        "loud-rejection": "^1.2.0",
        "matcher": "^0.1.1",
        "max-timeout": "^1.0.0",
        "md5-hex": "^2.0.0",
        "meow": "^3.7.0",
        "ms": "^0.7.1",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.4.0",
        "option-chain": "^0.1.0",
        "package-hash": "^1.2.0",
        "pkg-conf": "^2.0.0",
        "plur": "^2.0.0",
        "pretty-ms": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^1.0.0",
        "slash": "^1.0.0",
        "source-map-support": "^0.4.0",
        "stack-utils": "^0.4.0",
        "strip-ansi": "^3.0.1",
        "strip-bom-buf": "^1.0.0",
        "time-require": "^0.1.2",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^1.0.0"
      },
      "devDependencies": {
        "babel-preset-react": "^6.5.0",
        "cli-table2": "^0.2.0",
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "execa": "^0.6.0",
        "get-stream": "^3.0.0",
        "git-branch": "^0.3.0",
        "has-ansi": "^2.0.0",
        "inquirer": "^2.0.0",
        "is-array-sorted": "^1.0.0",
        "lolex": "^1.4.0",
        "mkdirp": "^0.5.1",
        "nyc": "^10.0.0",
        "pify": "^2.3.0",
        "proxyquire": "^1.7.4",
        "rimraf": "^2.5.0",
        "signal-exit": "^3.0.0",
        "sinon": "^1.17.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^10.0.0",
        "temp-write": "^3.0.0",
        "touch": "^1.0.0",
        "xo": "^0.17.0",
        "zen-observable": "^0.4.0"
      },
      "xo": {
        "esnext": true,
        "rules": {
          "import/newline-after-import": "off",
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "lcov",
          "text"
        ]
      },
      "gitHead": "2623c11ae285d3292037c92644495cc6e3d97b7c",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@0.18.0",
      "_shasum": "9bfe4f7d5eacb6037b41a70113fba056b15a9701",
      "_from": ".",
      "_npmVersion": "2.15.11",
      "_nodeVersion": "4.6.2",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "9bfe4f7d5eacb6037b41a70113fba056b15a9701",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.18.0.tgz",
        "integrity": "sha512-w5PKNPFkP4QOkNpiBdRJ7WWeY0tDCin8oejKmSrIeyugu1Ehn/9LFMe2MBkjB+hYIh+GmWhTUf5EXstQ+EJBng==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGnsnCq5fCT+QG6T3sQ+jVJFtTyGv8q2LuHq7ahtPvf/AiEA0mJvPBbQBEgCRVU356Mk1gQUDeu8501T7yqZDJ1PcPE="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ava-0.18.0.tgz_1486052652100_0.29435160104185343"
      },
      "directories": {}
    },
    "0.18.1": {
      "name": "ava",
      "version": "0.18.1",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "ava",
          "email": "npm@ava.li"
        },
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "jfmengels",
          "email": "jfm.engels@gmail.com"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "sotojuan",
          "email": "imjuansoto@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "typings": "types/generated.d.ts",
      "engines": {
        "node": ">=4"
      },
      "scripts": {
        "test": "xo && nyc tap --no-cov --timeout=150 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=150 --jobs=4 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js",
        "prepublish": "npm run make-ts",
        "make-ts": "node types/make.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "types/generated.d.ts"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "jest",
        "mocha",
        "qunit",
        "jasmine",
        "testing",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^1.0.0",
        "@ava/babel-preset-transform-test-files": "^2.0.0",
        "@ava/pretty-format": "^1.0.0",
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "auto-bind": "^1.1.0",
        "ava-init": "^0.2.0",
        "babel-code-frame": "^6.16.0",
        "babel-core": "^6.17.0",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^1.0.0",
        "chokidar": "^1.4.2",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-spinners": "^1.0.0",
        "cli-truncate": "^0.2.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.0",
        "common-path-prefix": "^1.0.0",
        "convert-source-map": "^1.2.0",
        "core-assert": "^0.2.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^2.2.0",
        "diff": "^3.0.1",
        "dot-prop": "^4.1.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "figures": "^2.0.0",
        "find-cache-dir": "^0.1.1",
        "fn-name": "^2.0.0",
        "get-port": "^2.1.0",
        "globby": "^6.0.0",
        "has-flag": "^2.0.0",
        "ignore-by-default": "^1.0.0",
        "indent-string": "^3.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^0.2.0",
        "is-promise": "^2.1.0",
        "jest-snapshot": "^18.1.0",
        "last-line-stream": "^1.0.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "lodash.isequal": "^4.5.0",
        "loud-rejection": "^1.2.0",
        "matcher": "^0.1.1",
        "max-timeout": "^1.0.0",
        "md5-hex": "^2.0.0",
        "meow": "^3.7.0",
        "ms": "^0.7.1",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.4.0",
        "option-chain": "^0.1.0",
        "package-hash": "^1.2.0",
        "pkg-conf": "^2.0.0",
        "plur": "^2.0.0",
        "pretty-ms": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^1.0.0",
        "slash": "^1.0.0",
        "source-map-support": "^0.4.0",
        "stack-utils": "^0.4.0",
        "strip-ansi": "^3.0.1",
        "strip-bom-buf": "^1.0.0",
        "time-require": "^0.1.2",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^1.0.0"
      },
      "devDependencies": {
        "babel-preset-react": "^6.5.0",
        "cli-table2": "^0.2.0",
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "execa": "^0.6.0",
        "get-stream": "^3.0.0",
        "git-branch": "^0.3.0",
        "has-ansi": "^2.0.0",
        "inquirer": "^2.0.0",
        "is-array-sorted": "^1.0.0",
        "lolex": "^1.4.0",
        "mkdirp": "^0.5.1",
        "nyc": "^10.0.0",
        "pify": "^2.3.0",
        "proxyquire": "^1.7.4",
        "rimraf": "^2.5.0",
        "signal-exit": "^3.0.0",
        "sinon": "^1.17.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^10.0.0",
        "temp-write": "^3.0.0",
        "touch": "^1.0.0",
        "xo": "^0.17.0",
        "zen-observable": "^0.4.0"
      },
      "xo": {
        "esnext": true,
        "rules": {
          "import/newline-after-import": "off",
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "lcov",
          "text"
        ]
      },
      "gitHead": "dcdfbee689e1538420f5793bbaca09c7e78ddedd",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@0.18.1",
      "_shasum": "5f47e09642b397aba471e09ffc1e5a59c670a52d",
      "_from": ".",
      "_npmVersion": "4.0.5",
      "_nodeVersion": "7.4.0",
      "_npmUser": {
        "name": "ava",
        "email": "npm@ava.li"
      },
      "dist": {
        "shasum": "5f47e09642b397aba471e09ffc1e5a59c670a52d",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.18.1.tgz",
        "integrity": "sha512-nu8y/YMFjpjnk1Ri+h9RllveQFfRGY4wxDs3OUQfirziRmINGzEo1K38aK9f8iN4wkrlbfrN6Lh187NVQB36DQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGGjDCpqyEPc3d83tiCvHlenETeijN63MGMkYdlVqDXPAiAOEN5V+TYVjN7EGyP4+w/f8REj87yr39f0DrlkcLLxFA=="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/ava-0.18.1.tgz_1486162388912_0.3892736053094268"
      },
      "directories": {}
    },
    "0.18.2": {
      "name": "ava",
      "version": "0.18.2",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "ava",
          "email": "npm@ava.li"
        },
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "jfmengels",
          "email": "jfm.engels@gmail.com"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "sotojuan",
          "email": "imjuansoto@gmail.com"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "typings": "types/generated.d.ts",
      "engines": {
        "node": ">=4"
      },
      "scripts": {
        "test": "xo && flow check test/flow-types && nyc tap --no-cov --timeout=150 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=150 --jobs=4 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js",
        "prepublish": "npm run make-ts",
        "make-ts": "node types/make.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "types/generated.d.ts"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "jest",
        "mocha",
        "qunit",
        "jasmine",
        "testing",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^1.0.0",
        "@ava/babel-preset-transform-test-files": "^2.0.0",
        "@ava/pretty-format": "^1.1.0",
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "auto-bind": "^1.1.0",
        "ava-init": "^0.2.0",
        "babel-code-frame": "^6.16.0",
        "babel-core": "^6.17.0",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^1.0.0",
        "chokidar": "^1.4.2",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-spinners": "^1.0.0",
        "cli-truncate": "^0.2.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.0",
        "common-path-prefix": "^1.0.0",
        "convert-source-map": "^1.2.0",
        "core-assert": "^0.2.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^2.2.0",
        "diff": "^3.0.1",
        "dot-prop": "^4.1.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "figures": "^2.0.0",
        "find-cache-dir": "^0.1.1",
        "fn-name": "^2.0.0",
        "get-port": "^2.1.0",
        "globby": "^6.0.0",
        "has-flag": "^2.0.0",
        "ignore-by-default": "^1.0.0",
        "indent-string": "^3.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^0.2.0",
        "is-promise": "^2.1.0",
        "jest-snapshot": "^18.1.0",
        "last-line-stream": "^1.0.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "lodash.isequal": "^4.5.0",
        "loud-rejection": "^1.2.0",
        "matcher": "^0.1.1",
        "max-timeout": "^1.0.0",
        "md5-hex": "^2.0.0",
        "meow": "^3.7.0",
        "ms": "^0.7.1",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.4.0",
        "option-chain": "^0.1.0",
        "package-hash": "^1.2.0",
        "pkg-conf": "^2.0.0",
        "plur": "^2.0.0",
        "pretty-ms": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^1.0.0",
        "slash": "^1.0.0",
        "source-map-support": "^0.4.0",
        "stack-utils": "^1.0.0",
        "strip-ansi": "^3.0.1",
        "strip-bom-buf": "^1.0.0",
        "time-require": "^0.1.2",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^1.0.0"
      },
      "devDependencies": {
        "babel-preset-react": "^6.5.0",
        "cli-table2": "^0.2.0",
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "execa": "^0.6.0",
        "flow-bin": "^0.38.0",
        "get-stream": "^3.0.0",
        "git-branch": "^0.3.0",
        "has-ansi": "^2.0.0",
        "inquirer": "^2.0.0",
        "is-array-sorted": "^1.0.0",
        "lolex": "^1.4.0",
        "mkdirp": "^0.5.1",
        "nyc": "^10.0.0",
        "pify": "^2.3.0",
        "proxyquire": "^1.7.4",
        "rimraf": "^2.5.0",
        "signal-exit": "^3.0.0",
        "sinon": "^1.17.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^10.0.0",
        "temp-write": "^3.1.0",
        "touch": "^1.0.0",
        "xo": "^0.17.0",
        "zen-observable": "^0.4.0"
      },
      "xo": {
        "esnext": true,
        "rules": {
          "import/newline-after-import": "off",
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "98dded553c8c213739cea9743ab4662f40d3125a",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@0.18.2",
      "_shasum": "79253d1636077034a2780bb55b5c3e6c3d7f312f",
      "_from": ".",
      "_npmVersion": "3.10.8",
      "_nodeVersion": "6.9.1",
      "_npmUser": {
        "name": "sindresorhus",
        "email": "sindresorhus@gmail.com"
      },
      "dist": {
        "shasum": "79253d1636077034a2780bb55b5c3e6c3d7f312f",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.18.2.tgz",
        "integrity": "sha512-uarnGkAe6sHTY1srbC6/Pa2bJdpeeECSaiqaAJPCaFa+YrBPlVsso/cee174OWtGLv2o2Mz6flZvSs52BXHfcA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDJ1jEBOWPIF+4dw8XPMahdc7NdNjuSog0WMYjRGO/DhQIgIOTNr7Ml6DzzJyZbGhH7JoD4YQkyJilwcRlOmyuKVEY="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ava-0.18.2.tgz_1487438060459_0.7445917995646596"
      },
      "directories": {}
    },
    "0.19.0": {
      "name": "ava",
      "version": "0.19.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "jfmengels",
          "email": "jfm.engels@gmail.com"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "sotojuan",
          "email": "imjuansoto@gmail.com"
        },
        {
          "name": "unicorn-rocket-sparkles",
          "email": "npm@ava.li"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "typings": "types/generated.d.ts",
      "engines": {
        "node": ">=4"
      },
      "scripts": {
        "test": "xo && flow check test/flow-types && nyc tap --no-cov --timeout=150 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=150 --jobs=4 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js",
        "prepublish": "npm run make-ts",
        "make-ts": "node types/make.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "types/generated.d.ts"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "jest",
        "mocha",
        "qunit",
        "jasmine",
        "testing",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^1.0.0",
        "@ava/babel-preset-transform-test-files": "^3.0.0",
        "@ava/pretty-format": "^1.1.0",
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "auto-bind": "^1.1.0",
        "ava-init": "^0.2.0",
        "babel-code-frame": "^6.16.0",
        "babel-core": "^6.17.0",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^1.0.0",
        "chokidar": "^1.4.2",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-spinners": "^1.0.0",
        "cli-truncate": "^1.0.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.0",
        "common-path-prefix": "^1.0.0",
        "convert-source-map": "^1.2.0",
        "core-assert": "^0.2.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^2.2.0",
        "diff": "^3.0.1",
        "diff-match-patch": "^1.0.0",
        "dot-prop": "^4.1.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "figures": "^2.0.0",
        "find-cache-dir": "^0.1.1",
        "fn-name": "^2.0.0",
        "get-port": "^3.0.0",
        "globby": "^6.0.0",
        "has-flag": "^2.0.0",
        "hullabaloo-config-manager": "^1.0.0",
        "ignore-by-default": "^1.0.0",
        "indent-string": "^3.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^0.2.0",
        "is-promise": "^2.1.0",
        "jest-diff": "19.0.0",
        "jest-snapshot": "19.0.2",
        "js-yaml": "^3.8.2",
        "last-line-stream": "^1.0.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "lodash.isequal": "^4.5.0",
        "loud-rejection": "^1.2.0",
        "matcher": "^0.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^3.7.0",
        "mkdirp": "^0.5.1",
        "ms": "^0.7.1",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "option-chain": "^0.1.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.0.0",
        "plur": "^2.0.0",
        "pretty-ms": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^1.0.0",
        "slash": "^1.0.0",
        "source-map-support": "^0.4.0",
        "stack-utils": "^1.0.0",
        "strip-ansi": "^3.0.1",
        "strip-bom-buf": "^1.0.0",
        "supports-color": "^3.2.3",
        "time-require": "^0.1.2",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.1.0"
      },
      "devDependencies": {
        "babel-preset-react": "^6.5.0",
        "cli-table2": "^0.2.0",
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "execa": "^0.6.0",
        "flow-bin": "^0.42.0",
        "get-stream": "^3.0.0",
        "git-branch": "^0.3.0",
        "has-ansi": "^2.0.0",
        "inquirer": "^3.0.5",
        "is-array-sorted": "^1.0.0",
        "lolex": "^1.4.0",
        "nyc": "^10.0.0",
        "proxyquire": "^1.7.4",
        "rimraf": "^2.5.0",
        "signal-exit": "^3.0.0",
        "sinon": "^2.0.0",
        "source-map-fixtures": "^2.1.0",
        "tap": "^10.0.0",
        "temp-write": "^3.1.0",
        "touch": "^1.0.0",
        "xo": "^0.18.0",
        "zen-observable": "^0.5.1"
      },
      "xo": {
        "esnext": true,
        "rules": {
          "import/newline-after-import": "off",
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "8f80ed104c2c72dfa8ad9e98f2455cf36f09b72d",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@0.19.0",
      "_shasum": "6c8c03c9f3f4036f701dbb3fdc487ab4d6533537",
      "_from": ".",
      "_npmVersion": "4.5.0",
      "_nodeVersion": "7.8.0",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "shasum": "6c8c03c9f3f4036f701dbb3fdc487ab4d6533537",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.19.0.tgz",
        "integrity": "sha512-4oQ2PNDYnt7EYV0Ns9bnvtkNPrQk1xEGKjjj6JpqVUQdzIj79aPurG5z+I6gMG7tk31G3HkQtH/0yMJN4L9+/A==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDmHY4Bn7xVqBAChrEfUaUZOof0Ip4ovrLLccKlkNg73wIgPvkPax4mJHLdRF8J4Xj0W94OV20qeAt0JpplYtdLUmM="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ava-0.19.0.tgz_1491409935345_0.08537392015568912"
      },
      "directories": {}
    },
    "0.19.1": {
      "name": "ava",
      "version": "0.19.1",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "name": "jamestalmage",
          "email": "james@talmage.io"
        },
        {
          "name": "jfmengels",
          "email": "jfm.engels@gmail.com"
        },
        {
          "name": "kevva",
          "email": "kevinmartensson@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        },
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "sotojuan",
          "email": "imjuansoto@gmail.com"
        },
        {
          "name": "unicorn-rocket-sparkles",
          "email": "npm@ava.li"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "typings": "types/generated.d.ts",
      "engines": {
        "node": ">=4"
      },
      "scripts": {
        "test": "xo && flow check test/flow-types && tsc -p test/ts-types && nyc tap --no-cov --timeout=150 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=150 --jobs=4 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js",
        "prepublish": "npm run make-ts",
        "make-ts": "node types/make.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "types/generated.d.ts"
      ],
      "keywords": [
        "test",
        "runner",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tape",
        "tap",
        "jest",
        "mocha",
        "qunit",
        "jasmine",
        "testing",
        "tdd",
        "cli-app",
        "cli",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^1.0.0",
        "@ava/babel-preset-transform-test-files": "^3.0.0",
        "@ava/pretty-format": "^1.1.0",
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "auto-bind": "^1.1.0",
        "ava-init": "^0.2.0",
        "babel-code-frame": "^6.16.0",
        "babel-core": "^6.17.0",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^1.0.0",
        "chokidar": "^1.4.2",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-spinners": "^1.0.0",
        "cli-truncate": "^1.0.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.0",
        "common-path-prefix": "^1.0.0",
        "convert-source-map": "^1.2.0",
        "core-assert": "^0.2.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^2.2.0",
        "diff": "^3.0.1",
        "diff-match-patch": "^1.0.0",
        "dot-prop": "^4.1.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "figures": "^2.0.0",
        "find-cache-dir": "^0.1.1",
        "fn-name": "^2.0.0",
        "get-port": "^3.0.0",
        "globby": "^6.0.0",
        "has-flag": "^2.0.0",
        "hullabaloo-config-manager": "^1.0.0",
        "ignore-by-default": "^1.0.0",
        "indent-string": "^3.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^0.2.0",
        "is-promise": "^2.1.0",
        "jest-diff": "19.0.0",
        "jest-snapshot": "19.0.2",
        "js-yaml": "^3.8.2",
        "last-line-stream": "^1.0.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "lodash.isequal": "^4.5.0",
        "loud-rejection": "^1.2.0",
        "matcher": "^0.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^3.7.0",
        "mkdirp": "^0.5.1",
        "ms": "^0.7.1",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "option-chain": "^0.1.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.0.0",
        "plur": "^2.0.0",
        "pretty-ms": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^1.0.0",
        "slash": "^1.0.0",
        "source-map-support": "^0.4.0",
        "stack-utils": "^1.0.0",
        "strip-ansi": "^3.0.1",
        "strip-bom-buf": "^1.0.0",
        "supports-color": "^3.2.3",
        "time-require": "^0.1.2",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.1.0"
      },
      "devDependencies": {
        "babel-preset-react": "^6.5.0",
        "cli-table2": "^0.2.0",
        "coveralls": "^2.11.4",
        "delay": "^1.3.0",
        "execa": "^0.6.0",
        "flow-bin": "^0.42.0",
        "get-stream": "^3.0.0",
        "git-branch": "^0.3.0",
        "has-ansi": "^2.0.0",
        "inquirer": "^3.0.5",
        "is-array-sorted": "^1.0.0",
        "lolex": "^1.4.0",
        "nyc": "^10.0.0",
        "proxyquire": "^1.7.4",
        "rimraf": "^2.5.0",
        "signal-exit": "^3.0.0",
        "sinon": "^2.0.0",
        "source-map-fixtures": "^2.1.0",
        "tap": "^10.0.0",
        "temp-write": "^3.1.0",
        "touch": "^1.0.0",
        "typescript": "^2.2.2",
        "xo": "^0.18.0",
        "zen-observable": "^0.5.1"
      },
      "xo": {
        "esnext": true,
        "rules": {
          "import/newline-after-import": "off",
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "4cc3403b4878e0e32c8d1a2e95874223fe4cdc29",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@0.19.1",
      "_shasum": "43dd82435ad19b3980ffca2488f05daab940b273",
      "_from": ".",
      "_npmVersion": "4.5.0",
      "_nodeVersion": "7.8.0",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "shasum": "43dd82435ad19b3980ffca2488f05daab940b273",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.19.1.tgz",
        "integrity": "sha512-4ju4SSO5ljjCl5dx167T26H6A5QHKUe0zXx6Nk2dKycUsbmLarAF6kzbfrLgjy4HExk9CetVeJ8YEQZiJIv+1w==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICMsPcENRB0a5jYaDs1d+Rt6ROM3Jh/2ffjRX0KpF744AiBHnw5AW+XD/q2yy4I02FbfYA20lOr/4cWC39RIx+e+bQ=="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ava-0.19.1.tgz_1491813236525_0.9140785234048963"
      },
      "directories": {}
    },
    "0.20.0": {
      "name": "ava",
      "version": "0.20.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "james@talmage.io",
          "name": "jamestalmage"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=4"
      },
      "scripts": {
        "test": "xo && flow check test/flow-types && tsc -p test/ts-types && nyc tap --no-cov --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js",
        "prepublish": "npm run make-ts",
        "make-ts": "node types/make.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "types/generated.d.ts"
      ],
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "unit",
        "observables",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^1.1.0",
        "@ava/babel-preset-transform-test-files": "^3.0.0",
        "@ava/write-file-atomic": "^2.2.0",
        "@concordance/react": "^1.0.0",
        "ansi-escapes": "^2.0.0",
        "ansi-styles": "^3.1.0",
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "auto-bind": "^1.1.0",
        "ava-init": "^0.2.0",
        "babel-core": "^6.17.0",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^1.0.0",
        "chokidar": "^1.4.2",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-spinners": "^1.0.0",
        "cli-truncate": "^1.0.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.0",
        "common-path-prefix": "^1.0.0",
        "concordance": "^2.0.0",
        "convert-source-map": "^1.2.0",
        "core-assert": "^0.2.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^2.2.0",
        "dot-prop": "^4.1.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "figures": "^2.0.0",
        "find-cache-dir": "^0.1.1",
        "fn-name": "^2.0.0",
        "get-port": "^3.0.0",
        "globby": "^6.0.0",
        "has-flag": "^2.0.0",
        "hullabaloo-config-manager": "^1.1.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^0.1.1",
        "indent-string": "^3.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^0.2.0",
        "is-promise": "^2.1.0",
        "js-yaml": "^3.8.2",
        "last-line-stream": "^1.0.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.0.0",
        "matcher": "^0.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^3.7.0",
        "ms": "^1.0.0",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "option-chain": "^0.1.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.0.0",
        "plur": "^2.0.0",
        "pretty-ms": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^1.0.0",
        "slash": "^1.0.0",
        "source-map-support": "^0.4.0",
        "stack-utils": "^1.0.0",
        "strip-ansi": "^3.0.1",
        "strip-bom-buf": "^1.0.0",
        "supports-color": "^3.2.3",
        "time-require": "^0.1.2",
        "trim-off-newlines": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.1.0"
      },
      "devDependencies": {
        "cli-table2": "^0.2.0",
        "codecov": "^2.1.0",
        "del": "^2.2.2",
        "delay": "^2.0.0",
        "execa": "^0.6.0",
        "flow-bin": "^0.45.0",
        "get-stream": "^3.0.0",
        "git-branch": "^0.3.0",
        "has-ansi": "^2.0.0",
        "inquirer": "^3.0.5",
        "is-array-sorted": "^1.0.0",
        "lolex": "^1.4.0",
        "nyc": "^10.0.0",
        "proxyquire": "^1.7.4",
        "react": "^15.6.1",
        "react-test-renderer": "^15.6.1",
        "signal-exit": "^3.0.0",
        "sinon": "^2.0.0",
        "source-map-fixtures": "^2.1.0",
        "tap": "^10.0.0",
        "temp-write": "^3.1.0",
        "touch": "^1.0.0",
        "typescript": "^2.2.2",
        "xo": "^0.18.2",
        "zen-observable": "^0.5.1"
      },
      "typings": "types/generated.d.ts",
      "xo": {
        "ignores": [
          "media/**"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "854203a728c4dff3ea61a3bcf49f1dfae04c7657",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@0.20.0",
      "_npmVersion": "5.0.4",
      "_nodeVersion": "8.1.2",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-/Jw/TwBgptUzDGB4bmpOO9flrUoJBZOA6YpAB6Y1NpH/nDTrS6JEZ/KeeMcgBm3Kk6ytTWsvpYWHK83V1RBzQA==",
        "shasum": "bdc0dd36453d7255e9f733305ab370c248381e41",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.20.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDBveOkbS3TlSJ16ZV1lVlzo2HK7jkTK4/zzmvz1B+A5AIgRdUeUD2/yJ4NdRmJtNOznR9tfwW4R3XkLyF0CK5SgoE="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava-0.20.0.tgz_1498658687349_0.8128701278474182"
      },
      "directories": {}
    },
    "0.21.0": {
      "name": "ava",
      "version": "0.21.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "james@talmage.io",
          "name": "jamestalmage"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=4"
      },
      "scripts": {
        "test": "xo && flow check test/flow-types && tsc -p test/ts-types && nyc tap --no-cov --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js",
        "prepublish": "npm run make-ts",
        "make-ts": "node types/make.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "types/generated.d.ts"
      ],
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "unit",
        "observables",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^1.1.0",
        "@ava/babel-preset-transform-test-files": "^3.0.0",
        "@ava/write-file-atomic": "^2.2.0",
        "@concordance/react": "^1.0.0",
        "ansi-escapes": "^2.0.0",
        "ansi-styles": "^3.1.0",
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "auto-bind": "^1.1.0",
        "ava-init": "^0.2.0",
        "babel-core": "^6.17.0",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^2.0.1",
        "chokidar": "^1.4.2",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-spinners": "^1.0.0",
        "cli-truncate": "^1.0.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.0",
        "common-path-prefix": "^1.0.0",
        "concordance": "^3.0.0",
        "convert-source-map": "^1.2.0",
        "core-assert": "^0.2.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^2.2.0",
        "dot-prop": "^4.1.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "figures": "^2.0.0",
        "find-cache-dir": "^1.0.0",
        "fn-name": "^2.0.0",
        "get-port": "^3.0.0",
        "globby": "^6.0.0",
        "has-flag": "^2.0.0",
        "hullabaloo-config-manager": "^1.1.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^0.1.1",
        "indent-string": "^3.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^0.2.0",
        "is-promise": "^2.1.0",
        "js-yaml": "^3.8.2",
        "last-line-stream": "^1.0.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.0.0",
        "matcher": "^1.0.0",
        "md5-hex": "^2.0.0",
        "meow": "^3.7.0",
        "ms": "^2.0.0",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "option-chain": "^1.0.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.0.0",
        "plur": "^2.0.0",
        "pretty-ms": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "safe-buffer": "^5.1.1",
        "slash": "^1.0.0",
        "source-map-support": "^0.4.0",
        "stack-utils": "^1.0.0",
        "strip-ansi": "^4.0.0",
        "strip-bom-buf": "^1.0.0",
        "supports-color": "^4.0.0",
        "time-require": "^0.1.2",
        "trim-off-newlines": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.1.0"
      },
      "devDependencies": {
        "cli-table2": "^0.2.0",
        "codecov": "^2.1.0",
        "del": "^3.0.0",
        "delay": "^2.0.0",
        "execa": "^0.7.0",
        "flow-bin": "^0.49.1",
        "get-stream": "^3.0.0",
        "git-branch": "^1.0.0",
        "has-ansi": "^3.0.0",
        "inquirer": "^3.0.5",
        "is-array-sorted": "^1.0.0",
        "lolex": "^1.4.0",
        "nyc": "^11.0.3",
        "proxyquire": "^1.7.4",
        "react": "^15.6.1",
        "react-test-renderer": "^15.6.1",
        "signal-exit": "^3.0.0",
        "sinon": "^2.0.0",
        "source-map-fixtures": "^2.1.0",
        "tap": "^10.0.0",
        "temp-write": "^3.1.0",
        "touch": "^2.0.2",
        "typescript": "^2.2.2",
        "xo": "^0.18.2",
        "zen-observable": "^0.5.1"
      },
      "typings": "types/generated.d.ts",
      "xo": {
        "ignores": [
          "media/**"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "a1afbe347d9636b033129fc7cc49ab18bcdc9d70",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@0.21.0",
      "_npmVersion": "5.2.0",
      "_nodeVersion": "8.1.4",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-+ZjahyjqyzkPLlFZe2OoLmiE3aaQ2jK5h74wrkuX5I+J6LpNAPoQ8X/EhqEtKEjuWwmniLAjnVjZ7OY8rWdJwA==",
        "shasum": "cd8d8ea3546f57150dea38548b9f72f8ca583d29",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.21.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEGBruA90WtOKBZiU7IRdxVOmRykH99B0wURK8APT3iZAiArsKC7PHkkFuQGu7UM3XWxidxspuiMgazZyIW86wwy/w=="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava-0.21.0.tgz_1499955942945_0.04631600435823202"
      },
      "directories": {}
    },
    "0.22.0": {
      "name": "ava",
      "version": "0.22.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=4"
      },
      "scripts": {
        "test": "xo && flow check test/flow-types && tsc -p test/ts-types && nyc tap --no-cov --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js",
        "prepublish": "npm run make-ts",
        "make-ts": "node types/make.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "types/generated.d.ts"
      ],
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "unit",
        "observables",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^1.1.0",
        "@ava/babel-preset-transform-test-files": "^3.0.0",
        "@ava/write-file-atomic": "^2.2.0",
        "@concordance/react": "^1.0.0",
        "ansi-escapes": "^2.0.0",
        "ansi-styles": "^3.1.0",
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "auto-bind": "^1.1.0",
        "ava-init": "^0.2.0",
        "babel-core": "^6.17.0",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^2.0.1",
        "chokidar": "^1.4.2",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-spinners": "^1.0.0",
        "cli-truncate": "^1.0.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.0",
        "common-path-prefix": "^1.0.0",
        "concordance": "^3.0.0",
        "convert-source-map": "^1.2.0",
        "core-assert": "^0.2.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^2.2.0",
        "dot-prop": "^4.1.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "figures": "^2.0.0",
        "find-cache-dir": "^1.0.0",
        "fn-name": "^2.0.0",
        "get-port": "^3.0.0",
        "globby": "^6.0.0",
        "has-flag": "^2.0.0",
        "hullabaloo-config-manager": "^1.1.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^0.1.1",
        "indent-string": "^3.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^0.2.0",
        "is-promise": "^2.1.0",
        "js-yaml": "^3.8.2",
        "last-line-stream": "^1.0.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.0.0",
        "matcher": "^1.0.0",
        "md5-hex": "^2.0.0",
        "meow": "^3.7.0",
        "ms": "^2.0.0",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "option-chain": "^1.0.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.0.0",
        "plur": "^2.0.0",
        "pretty-ms": "^2.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "safe-buffer": "^5.1.1",
        "slash": "^1.0.0",
        "source-map-support": "^0.4.0",
        "stack-utils": "^1.0.0",
        "strip-ansi": "^4.0.0",
        "strip-bom-buf": "^1.0.0",
        "supports-color": "^4.0.0",
        "time-require": "^0.1.2",
        "trim-off-newlines": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.1.0"
      },
      "devDependencies": {
        "cli-table2": "^0.2.0",
        "codecov": "^2.1.0",
        "del": "^3.0.0",
        "delay": "^2.0.0",
        "execa": "^0.7.0",
        "flow-bin": "^0.49.1",
        "get-stream": "^3.0.0",
        "git-branch": "^1.0.0",
        "has-ansi": "^3.0.0",
        "inquirer": "^3.0.5",
        "is-array-sorted": "^1.0.0",
        "lolex": "^1.4.0",
        "nyc": "^11.0.3",
        "proxyquire": "^1.7.4",
        "react": "^15.6.1",
        "react-test-renderer": "^15.6.1",
        "signal-exit": "^3.0.0",
        "sinon": "^2.0.0",
        "source-map-fixtures": "^2.1.0",
        "tap": "^10.0.0",
        "temp-write": "^3.1.0",
        "touch": "^2.0.2",
        "typescript": "^2.2.2",
        "xo": "^0.18.2",
        "zen-observable": "^0.5.1"
      },
      "typings": "types/generated.d.ts",
      "xo": {
        "ignores": [
          "media/**"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "dd9e8b2effe541f9f232ee622452343dac5895dd",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@0.22.0",
      "_npmVersion": "5.3.0",
      "_nodeVersion": "8.2.1",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-dYxvVDL9CeIcgaQ/FojaBVaL/rnIsXdgPVliDOMe1O5nSsIZEsPYDIzmZ1KnO/cuxeQx1PQbtW6qziiEwQZusg==",
        "shasum": "4c28a1fdef7e749ba0c8131ac18a7ca489eef049",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.22.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAV/vFjwwImmx5sGEL2p0jhInoiOorVG18ZpriLA/U1NAiEAuK4J++VoN/gV7UKdptL1oX007BJOBWwZWjJBD5SHv6k="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava-0.22.0.tgz_1502782663652_0.3847922761924565"
      },
      "directories": {}
    },
    "0.23.0": {
      "name": "ava",
      "version": "0.23.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "author": {
        "name": "Sindre Sorhus",
        "email": "sindresorhus@gmail.com",
        "url": "sindresorhus.com"
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        }
      ],
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=4"
      },
      "scripts": {
        "lint": "xo && (cd test/fixture && xo '**' '!{source-map-initial,syntax-error}.js' '!snapshots/test-sourcemaps/build/**')",
        "test": "npm run lint && flow check test/flow-types && tsc -p test/ts-types && nyc tap --no-cov --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js",
        "prepublish": "npm run make-ts",
        "make-ts": "node types/make.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "types/generated.d.ts"
      ],
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "futuristic",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "unit",
        "observables",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^1.1.0",
        "@ava/babel-preset-transform-test-files": "^3.0.0",
        "@ava/write-file-atomic": "^2.2.0",
        "@concordance/react": "^1.0.0",
        "ansi-escapes": "^2.0.0",
        "ansi-styles": "^3.1.0",
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "auto-bind": "^1.1.0",
        "ava-init": "^0.2.0",
        "babel-core": "^6.17.0",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^2.0.1",
        "chokidar": "^1.4.2",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-spinners": "^1.0.0",
        "cli-truncate": "^1.0.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.0",
        "common-path-prefix": "^1.0.0",
        "concordance": "^3.0.0",
        "convert-source-map": "^1.2.0",
        "core-assert": "^0.2.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^3.0.1",
        "dot-prop": "^4.1.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "figures": "^2.0.0",
        "find-cache-dir": "^1.0.0",
        "fn-name": "^2.0.0",
        "get-port": "^3.0.0",
        "globby": "^6.0.0",
        "has-flag": "^2.0.0",
        "hullabaloo-config-manager": "^1.1.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^0.1.1",
        "indent-string": "^3.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^0.2.0",
        "is-promise": "^2.1.0",
        "js-yaml": "^3.8.2",
        "last-line-stream": "^1.0.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.0.0",
        "matcher": "^1.0.0",
        "md5-hex": "^2.0.0",
        "meow": "^3.7.0",
        "ms": "^2.0.0",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "option-chain": "^1.0.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.0.0",
        "plur": "^2.0.0",
        "pretty-ms": "^3.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "safe-buffer": "^5.1.1",
        "slash": "^1.0.0",
        "source-map-support": "^0.4.0",
        "stack-utils": "^1.0.1",
        "strip-ansi": "^4.0.0",
        "strip-bom-buf": "^1.0.0",
        "supports-color": "^4.0.0",
        "time-require": "^0.1.2",
        "trim-off-newlines": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.3.0"
      },
      "devDependencies": {
        "cli-table2": "^0.2.0",
        "codecov": "^2.1.0",
        "del": "^3.0.0",
        "delay": "^2.0.0",
        "execa": "^0.8.0",
        "flow-bin": "^0.54.0",
        "get-stream": "^3.0.0",
        "git-branch": "^1.0.0",
        "has-ansi": "^3.0.0",
        "inquirer": "^3.0.5",
        "is-array-sorted": "^1.0.0",
        "lolex": "^2.1.2",
        "nyc": "^11.0.3",
        "proxyquire": "^1.7.4",
        "react": "^15.6.1",
        "react-test-renderer": "^15.6.1",
        "signal-exit": "^3.0.0",
        "sinon": "^3.2.1",
        "source-map-fixtures": "^2.1.0",
        "tap": "^10.0.0",
        "temp-write": "^3.1.0",
        "touch": "^3.1.0",
        "typescript": "^2.2.2",
        "xo": "^0.18.2",
        "zen-observable": "^0.5.1"
      },
      "typings": "types/generated.d.ts",
      "xo": {
        "ignores": [
          "media/**"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "3b81e2ca13db91e558234f55badc312209677d82",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@0.23.0",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.7.0",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-ZsVwO8UENDoZHlYQOEBv6oSGuUiZ8AFqaa+OhTv/McwC+4Y2V9skip5uYwN3egT9I9c+mKzLWA9lXUv7D6g8ZA==",
        "shasum": "beed11730adef74a857761b62b8882bf16d5a038",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.23.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFQC5DacDUY7cq1U0QLeJ6jvlrFTdxki4ehn1M5yS/DDAiEAvLF3s9Aipp1frivrASVWyBwfvWW96VDC1tOBrevCsmw="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava-0.23.0.tgz_1508861269031_0.947831159690395"
      },
      "directories": {}
    },
    "0.24.0": {
      "name": "ava",
      "version": "0.24.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=4"
      },
      "scripts": {
        "lint": "xo && (cd test/fixture && xo '**' '!{source-map-initial,syntax-error}.js' '!snapshots/test-sourcemaps/build/**') && lock-verify",
        "test": "npm run lint && flow check test/flow-types && tsc -p test/ts-types && nyc tap --no-cov --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js",
        "prepublish": "npm run make-ts",
        "make-ts": "node types/make.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "types/generated.d.ts"
      ],
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^1.1.0",
        "@ava/babel-preset-transform-test-files": "^3.0.0",
        "@ava/write-file-atomic": "^2.2.0",
        "@concordance/react": "^1.0.0",
        "ansi-escapes": "^3.0.0",
        "ansi-styles": "^3.1.0",
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "auto-bind": "^1.1.0",
        "ava-init": "^0.2.0",
        "babel-core": "^6.17.0",
        "babel-generator": "^6.26.0",
        "babel-plugin-syntax-object-rest-spread": "^6.13.0",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^2.0.1",
        "chokidar": "^1.4.2",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-spinners": "^1.0.0",
        "cli-truncate": "^1.0.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.0",
        "common-path-prefix": "^1.0.0",
        "concordance": "^3.0.0",
        "convert-source-map": "^1.2.0",
        "core-assert": "^0.2.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^3.0.1",
        "dot-prop": "^4.1.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "figures": "^2.0.0",
        "find-cache-dir": "^1.0.0",
        "fn-name": "^2.0.0",
        "get-port": "^3.0.0",
        "globby": "^6.0.0",
        "has-flag": "^2.0.0",
        "hullabaloo-config-manager": "^1.1.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^0.1.1",
        "indent-string": "^3.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^1.0.0",
        "is-promise": "^2.1.0",
        "js-yaml": "^3.8.2",
        "last-line-stream": "^1.0.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.0.0",
        "matcher": "^1.0.0",
        "md5-hex": "^2.0.0",
        "meow": "^3.7.0",
        "ms": "^2.0.0",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "option-chain": "^1.0.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.0.0",
        "plur": "^2.0.0",
        "pretty-ms": "^3.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "safe-buffer": "^5.1.1",
        "semver": "^5.4.1",
        "slash": "^1.0.0",
        "source-map-support": "^0.5.0",
        "stack-utils": "^1.0.1",
        "strip-ansi": "^4.0.0",
        "strip-bom-buf": "^1.0.0",
        "supports-color": "^5.0.0",
        "time-require": "^0.1.2",
        "trim-off-newlines": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.3.0"
      },
      "devDependencies": {
        "cli-table2": "^0.2.0",
        "codecov": "^3.0.0",
        "del": "^3.0.0",
        "delay": "^2.0.0",
        "execa": "^0.8.0",
        "flow-bin": "^0.59.0",
        "get-stream": "^3.0.0",
        "git-branch": "^1.0.0",
        "has-ansi": "^3.0.0",
        "inquirer": "^4.0.0",
        "is-array-sorted": "^1.0.0",
        "lock-verify": "^1.1.0",
        "lolex": "^2.1.2",
        "nyc": "^11.0.3",
        "proxyquire": "^1.7.4",
        "react": "^16.1.1",
        "react-test-renderer": "^16.1.1",
        "signal-exit": "^3.0.0",
        "sinon": "^4.1.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^10.0.0",
        "temp-write": "^3.1.0",
        "touch": "^3.1.0",
        "typescript": "^2.2.2",
        "xo": "^0.18.2",
        "zen-observable": "^0.6.0"
      },
      "typings": "types/generated.d.ts",
      "xo": {
        "ignores": [
          "media/**"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "e401bd151b1a81f79ccb106f034b2e18715ee125",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@0.24.0",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.9.1",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-o/ykNzsWB5qgh1cR9jzVw0E1y4E219aXl9njNFGSamSCsD7VhPd3aoZabNZuG1PSVMZmQ8RuwKnTuz/loNhKnw==",
        "shasum": "dd0ab33a0b3ad2ac582f55e9a61caf8bcf7a9af1",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.24.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEubv0cg96sQAdB1Q3tJjoOLG5m2s0JoDm/DLc6UP90LAiA2AhLQPo+4m1BzEZuborRj7Xs6WYYbi4ZLuVLUZ4GTRQ=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava-0.24.0.tgz_1511804699613_0.24531792639754713"
      },
      "directories": {}
    },
    "0.25.0": {
      "name": "ava",
      "version": "0.25.0",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=4"
      },
      "scripts": {
        "lint": "xo && (cd test/fixture && xo '**' '!{source-map-initial,syntax-error}.js' '!snapshots/test-sourcemaps/build/**') && lock-verify",
        "test": "npm run lint && flow check test/flow-types && tsc -p test/ts-types && nyc tap --no-cov --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js",
        "prepublish": "npm run make-ts",
        "make-ts": "node types/make.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "types/generated.d.ts"
      ],
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^1.1.0",
        "@ava/babel-preset-transform-test-files": "^3.0.0",
        "@ava/write-file-atomic": "^2.2.0",
        "@concordance/react": "^1.0.0",
        "@ladjs/time-require": "^0.1.4",
        "ansi-escapes": "^3.0.0",
        "ansi-styles": "^3.1.0",
        "arr-flatten": "^1.0.1",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "auto-bind": "^1.1.0",
        "ava-init": "^0.2.0",
        "babel-core": "^6.17.0",
        "babel-generator": "^6.26.0",
        "babel-plugin-syntax-object-rest-spread": "^6.13.0",
        "bluebird": "^3.0.0",
        "caching-transform": "^1.0.0",
        "chalk": "^2.0.1",
        "chokidar": "^1.4.2",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-spinners": "^1.0.0",
        "cli-truncate": "^1.0.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^3.0.0",
        "convert-source-map": "^1.5.1",
        "core-assert": "^0.2.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^3.0.1",
        "dot-prop": "^4.1.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "figures": "^2.0.0",
        "find-cache-dir": "^1.0.0",
        "fn-name": "^2.0.0",
        "get-port": "^3.0.0",
        "globby": "^6.0.0",
        "has-flag": "^2.0.0",
        "hullabaloo-config-manager": "^1.1.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^0.1.1",
        "indent-string": "^3.0.0",
        "is-ci": "^1.0.7",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^1.0.0",
        "is-promise": "^2.1.0",
        "last-line-stream": "^1.0.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.0.0",
        "matcher": "^1.0.0",
        "md5-hex": "^2.0.0",
        "meow": "^3.7.0",
        "ms": "^2.0.0",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "option-chain": "^1.0.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.0.0",
        "plur": "^2.0.0",
        "pretty-ms": "^3.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "safe-buffer": "^5.1.1",
        "semver": "^5.4.1",
        "slash": "^1.0.0",
        "source-map-support": "^0.5.0",
        "stack-utils": "^1.0.1",
        "strip-ansi": "^4.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^5.0.0",
        "trim-off-newlines": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.3.0"
      },
      "devDependencies": {
        "@std/esm": "^0.19.1",
        "cli-table2": "^0.2.0",
        "codecov": "^3.0.0",
        "del": "^3.0.0",
        "delay": "^2.0.0",
        "execa": "^0.8.0",
        "flow-bin": "^0.59.0",
        "get-stream": "^3.0.0",
        "git-branch": "^1.0.0",
        "has-ansi": "^3.0.0",
        "inquirer": "^4.0.0",
        "is-array-sorted": "^1.0.0",
        "lock-verify": "^1.1.0",
        "lolex": "^2.1.2",
        "nyc": "^11.0.3",
        "proxyquire": "^1.7.4",
        "react": "^16.1.1",
        "react-test-renderer": "^16.1.1",
        "signal-exit": "^3.0.0",
        "sinon": "^4.1.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^10.0.0",
        "temp-write": "^3.1.0",
        "touch": "^3.1.0",
        "typescript": "^2.2.2",
        "xo": "^0.18.2",
        "zen-observable": "^0.6.0"
      },
      "typings": "types/generated.d.ts",
      "xo": {
        "ignores": [
          "media/**"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "a051d3e18dba92c893fddb08490a8627f586c231",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@0.25.0",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-4lGNJCf6xL8SvsKVEKxEE46se7JAUIAZoKHw9itTQuwcsydhpAMkBs5gOOiWiwt0JKNIuXWc2/r4r8ZdcNrBEw==",
        "shasum": "8ac87780514f96a6fd42e1306eaa0752ce3a407f",
        "tarball": "https://registry.npmjs.org/ava/-/ava-0.25.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCoTd1sffGnnEvi/bfTa3yNAhNiqxFJvCnO2MA4F2nqKwIhAPReMeBTB76UvFsBuRVebgzbO7OG3EvLZpuEtET7tdKL"
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava-0.25.0.tgz_1516976821658_0.8890732538420707"
      },
      "directories": {}
    },
    "1.0.0-beta.1": {
      "name": "ava",
      "version": "1.0.0-beta.1",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=4.8.7 <5 || >=6.12.3 <7 || >=8.9.4"
      },
      "scripts": {
        "lint": "xo && (cd test/fixture && xo '**' '!{source-map-initial,syntax-error}.js' '!snapshots/test-sourcemaps/build/**') && lock-verify",
        "test": "npm run lint && flow check test/flow-types && tsc -p test/ts-types && nyc tap --no-cov --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js",
        "prepare": "npm run make-ts",
        "make-ts": "node types/make.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "types/generated.d.ts"
      ],
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^2.0.0-beta.3",
        "@ava/babel-preset-transform-test-files": "^4.0.0-beta.2",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "^7.0.0-beta.39",
        "@babel/generator": "^7.0.0-beta.39",
        "@babel/plugin-syntax-async-generators": "^7.0.0-beta.39",
        "@babel/plugin-syntax-object-rest-spread": "^7.0.0-beta.39",
        "@concordance/react": "^1.0.0",
        "@ladjs/time-require": "^0.1.4",
        "ansi-escapes": "^3.0.0",
        "ansi-styles": "^3.2.0",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "auto-bind": "^1.2.0",
        "ava-init": "^0.2.1",
        "bluebird": "^3.5.1",
        "caching-transform": "^1.0.0",
        "chalk": "^2.3.0",
        "chokidar": "^2.0.0",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-spinners": "^1.1.0",
        "cli-truncate": "^1.1.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^3.0.0",
        "convert-source-map": "^1.5.1",
        "core-assert": "^0.2.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^3.1.0",
        "dot-prop": "^4.2.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "figures": "^2.0.0",
        "find-cache-dir": "^1.0.0",
        "get-port": "^3.2.0",
        "globby": "^7.1.1",
        "hullabaloo-config-manager": "^2.0.0-beta.2",
        "ignore-by-default": "^1.0.0",
        "import-local": "^1.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^1.1.0",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^1.1.0",
        "is-promise": "^2.1.0",
        "last-line-stream": "^1.0.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.1.0",
        "matcher": "^1.0.0",
        "md5-hex": "^2.0.0",
        "meow": "^4.0.0",
        "ms": "^2.1.1",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "option-chain": "^1.0.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.1.0",
        "plur": "^2.0.0",
        "pretty-ms": "^3.1.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "safe-buffer": "^5.1.1",
        "slash": "^1.0.0",
        "source-map-support": "^0.5.3",
        "stack-utils": "^1.0.1",
        "strip-ansi": "^4.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^5.1.0",
        "trim-off-newlines": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.3.0"
      },
      "devDependencies": {
        "@std/esm": "^0.19.1",
        "cli-table2": "^0.2.0",
        "codecov": "^3.0.0",
        "del": "^3.0.0",
        "delay": "^2.0.0",
        "execa": "^0.9.0",
        "flow-bin": "^0.64.0",
        "get-stream": "^3.0.0",
        "git-branch": "^1.0.0",
        "has-ansi": "^3.0.0",
        "inquirer": "^5.0.1",
        "is-array-sorted": "^1.0.0",
        "lock-verify": "^1.1.0",
        "lolex": "^2.3.1",
        "nyc": "^11.4.1",
        "proxyquire": "^1.7.4",
        "react": "^16.2.0",
        "react-test-renderer": "^16.2.0",
        "signal-exit": "^3.0.0",
        "sinon": "^4.2.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^11.0.1",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "typescript": "^2.6.2",
        "xo": "^0.18.2",
        "zen-observable": "^0.7.1"
      },
      "typings": "types/generated.d.ts",
      "xo": {
        "ignores": [
          "media/**"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "4d60d5def01e88df4eee3246cad5f6785c0b6400",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.0.0-beta.1",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-4/sTNRFQSZbhVWkGF31+E+8CvsH1dj8pwD0ZpKiXAEt+CcCdqwBuS4Srr7yE/GPYhLZ9tqLXQUf6LOT7O+2OMg==",
        "shasum": "f7bd03cc5b85db9680491d8ea3022d741388d4d3",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.0.0-beta.1.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHFIYbjzXgHWJc1GSnM7dMEfsQZtCYOyAVBx1JfBaFupAiBrpvOUEEZ2HAo9yVrdApXHhxzdODk5d5h/1+AtOJZZXg=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava-1.0.0-beta.1.tgz_1517421808546_0.764227879466489"
      },
      "directories": {}
    },
    "1.0.0-beta.2": {
      "name": "ava",
      "version": "1.0.0-beta.2",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=4.8.7 <5 || >=6.12.3 <7 || >=8.9.4"
      },
      "scripts": {
        "lint": "xo && (cd test/fixture && xo '**' '!{source-map-initial,syntax-error}.js' '!snapshots/test-sourcemaps/build/**') && lock-verify",
        "test": "npm run lint && flow check test/flow-types && tsc -p test/ts-types && nyc tap --no-cov --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "index.d.ts"
      ],
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^2.0.0-beta.4",
        "@ava/babel-preset-transform-test-files": "^4.0.0-beta.3",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "^7.0.0-beta.40",
        "@babel/generator": "^7.0.0-beta.40",
        "@babel/plugin-syntax-async-generators": "^7.0.0-beta.40",
        "@babel/plugin-syntax-object-rest-spread": "^7.0.0-beta.40",
        "@concordance/react": "^1.0.0",
        "@ladjs/time-require": "^0.1.4",
        "ansi-escapes": "^3.0.0",
        "ansi-styles": "^3.2.0",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "auto-bind": "^1.2.0",
        "ava-init": "^0.2.1",
        "bluebird": "^3.5.1",
        "caching-transform": "^1.0.0",
        "chalk": "^2.3.1",
        "chokidar": "^2.0.1",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-spinners": "^1.1.0",
        "cli-truncate": "^1.1.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^3.0.0",
        "convert-source-map": "^1.5.1",
        "currently-unhandled": "^0.4.1",
        "debug": "^3.1.0",
        "dot-prop": "^4.2.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "figures": "^2.0.0",
        "get-port": "^3.2.0",
        "globby": "^7.1.1",
        "hullabaloo-config-manager": "^2.0.0-beta.3",
        "ignore-by-default": "^1.0.0",
        "import-local": "^1.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^1.1.0",
        "is-error": "^2.2.1",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^1.1.0",
        "is-promise": "^2.1.0",
        "last-line-stream": "^1.0.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.1.0",
        "matcher": "^1.1.0",
        "md5-hex": "^2.0.0",
        "meow": "^4.0.0",
        "ms": "^2.1.1",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.1.0",
        "plur": "^2.0.0",
        "pretty-ms": "^3.1.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "safe-buffer": "^5.1.1",
        "slash": "^1.0.0",
        "source-map-support": "^0.5.3",
        "stack-utils": "^1.0.1",
        "strip-ansi": "^4.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^5.2.0",
        "trim-off-newlines": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.3.0"
      },
      "devDependencies": {
        "@std/esm": "^0.21.7",
        "cli-table2": "^0.2.0",
        "codecov": "^3.0.0",
        "del": "^3.0.0",
        "delay": "^2.0.0",
        "execa": "^0.9.0",
        "flow-bin": "^0.65.0",
        "get-stream": "^3.0.0",
        "git-branch": "^1.0.0",
        "has-ansi": "^3.0.0",
        "inquirer": "^5.1.0",
        "lock-verify": "^1.1.0",
        "lolex": "^2.3.2",
        "nyc": "^11.4.1",
        "proxyquire": "^1.7.4",
        "react": "^16.2.0",
        "react-test-renderer": "^16.2.0",
        "signal-exit": "^3.0.0",
        "sinon": "^4.3.0",
        "source-map-fixtures": "^2.1.0",
        "tap": "^11.1.0",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "typescript": "^2.7.1",
        "xo": "^0.20.1",
        "zen-observable": "^0.8.6"
      },
      "typings": "index.d.ts",
      "xo": {
        "ignores": [
          "media/**"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "readme": "# [![AVA](media/header.png)](https://ava.li)\n\n> Futuristic test runner\n\n[![Build Status: Linux](https://travis-ci.org/avajs/ava.svg?branch=master)](https://travis-ci.org/avajs/ava) [![Build status: Windows](https://ci.appveyor.com/api/projects/status/e7v91mu2m5x48ehx/branch/master?svg=true)](https://ci.appveyor.com/project/ava/ava/branch/master) [![Coverage Status](https://coveralls.io/repos/github/avajs/ava/badge.svg?branch=master)](https://coveralls.io/github/avajs/ava?branch=master) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/sindresorhus/xo) [![Gitter](https://badges.gitter.im/join_chat.svg)](https://gitter.im/avajs/ava) [![Mentioned in Awesome Node.js](https://awesome.re/mentioned-badge.svg)](https://github.com/sindresorhus/awesome-nodejs)\n\nEven though JavaScript is single-threaded, IO in Node.js can happen in parallel due to its async nature. AVA takes advantage of this and runs your tests concurrently, which is especially beneficial for IO heavy tests. In addition, test files are run in parallel as separate processes, giving you even better performance and an isolated environment for each test file. [Switching](https://github.com/sindresorhus/pageres/commit/663be15acb3dd2eb0f71b1956ef28c2cd3fdeed0) from Mocha to AVA in Pageres brought the test time down from 31 to 11 seconds. Having tests run concurrently forces you to write atomic tests, meaning tests don't depend on global state or the state of other tests, which is a great thing!\n\n![](media/mini-reporter.gif)\n\n*Read our [contributing guide](contributing.md) if you're looking to contribute (issues/PRs/etc).*\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\n**This documentation covers the 1.0 beta releases, which use Babel 7. The last release that uses Babel 6 is [`v0.25.0`](https://github.com/avajs/ava/tree/v0.25.0).**\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Contents\n\n- [Usage](#usage)\n- [CLI Usage](#cli)\n- [Debugging](#debugging)\n- [Reporters](#reporters)\n- [Configuration](#configuration)\n- [Documentation](#documentation)\n- [API](#api)\n- [Assertions](#assertions)\n- [Snapshot testing](#snapshot-testing)\n- [Tips](#tips)\n- [FAQ](#faq)\n- [Recipes](#recipes)\n- [Support](#support)\n- [Related](#related)\n- [Links](#links)\n- [Team](#team)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript & Flow type definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](#process-isolation)\n- [Write your tests using the latest JavaScript syntax](#latest-javascript-support)\n- [Promise support](#promise-support)\n- [Generator function support](#generator-function-support)\n- [Async function support](#async-function-support)\n- [Observable support](#observable-support)\n- [Enhanced assertion messages](#enhanced-assertion-messages)\n- [TAP reporter](#tap-reporter)\n- [Automatic migration from other test runners](https://github.com/avajs/ava-codemods#migrating-to-ava)\n\n\n## Test syntax\n\n```js\nimport test from 'ava';\n\ntest('arrays are equal', t => {\n\tt.deepEqual([1, 2], [1, 2]);\n});\n```\n\n## Usage\n\n### Add AVA to your project\n\nInstall AVA globally and run it with `--init` to add AVA to your `package.json`.\n\n\n```console\n$ npm install --global ava@next\n$ ava --init\n```\n\nIf you prefer using Yarn:\n\n```console\n$ yarn global add ava@next\n$ ava --init\n```\n\nYour `package.json` will then look like this:\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"^1.0.0-beta.1\"\n\t}\n}\n```\n\nAny arguments passed after `--init` are added as config to `package.json`.\n\n#### Manual installation\n\nYou can also install AVA directly:\n\n```console\n$ npm install --save-dev ava@next\n```\n\nAlternatively using Yarn:\n\n```console\n$ yarn add --dev ava@next\n```\n\nYou'll have to configure the `test` script in your `package.json` to use `ava` (see above).\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nimport test from 'ava';\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\n\tt.is(await bar, 'bar');\n});\n```\n\n### Run it\n\n```console\n$ npm test\n```\n\n### Watch it\n\n```console\n$ npm test -- --watch\n```\n\nAVA comes with an intelligent watch mode. [Learn more in its recipe](docs/recipes/watch-mode.md).\n\n### Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## CLI\n\n```console\n$ ava --help\n\n  Usage\n    ava [<file|directory|glob> ...]\n\n  Options\n    --init                  Add AVA to your project\n    --watch, -w             Re-run tests when tests and source files change\n    --match, -m             Only run tests with matching title (Can be repeated)\n    --update-snapshots, -u  Update snapshots\n    --fail-fast             Stop after first test failure\n    --timeout, -T           Set global timeout\n    --serial, -s            Run tests serially\n    --concurrency, -c       Max number of test files running at the same time (Default: CPU cores)\n    --verbose, -v           Enable verbose output\n    --tap, -t               Generate TAP output\n    --no-cache              Disable the compiler cache\n    --color                 Force color output\n    --no-color              Disable color output\n\n  Examples\n    ava\n    ava test.js test2.js\n    ava test-*.js\n    ava test\n    ava --init\n\n  Default patterns when no arguments:\n  test.js test-*.js test/**/*.js **/__tests__/**/*.js **/*.test.js\n```\n\n*Note that the CLI will use your local install of AVA when available, even when run globally.*\n\nDirectories are recursed, with all `*.js` files being treated as test files. Directories named `fixtures`, `helpers` and `node_modules` are *always* ignored. So are files starting with `_` which allows you to place helpers in the same directory as your test files.\n\nWhen using `npm test`, you can pass positional arguments directly `npm test test2.js`, but flags needs to be passed like `npm test -- --verbose`.\n\n\n## Debugging\n\nAVA runs tests in child processes, so to debug tests, you need to do this workaround:\n\n```console\n$ node --inspect node_modules/ava/profile.js some/test/file.js\n```\n\n### Debugger-specific tips\n\n- [Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Visual Studio Code](docs/recipes/debugging-with-vscode.md)\n\n\n## Reporters\n\n### Mini-reporter\n\nThe mini-reporter is the default reporter.\n\n<img src=\"media/mini-reporter.gif\" width=\"460\">\n\n### Verbose reporter\n\nUse the `--verbose` flag to enable the verbose reporter. This is always used in CI environments unless the [TAP reporter](#tap-reporter) is enabled.\n\n<img src=\"media/verbose-reporter.png\" width=\"294\">\n\n### TAP reporter\n\nAVA supports the TAP format and thus is compatible with [any TAP reporter](https://github.com/sindresorhus/awesome-tap#reporters). Use the `--tap` flag to enable TAP output.\n\n```console\n$ ava --tap | tap-nyan\n```\n\n<img src=\"media/tap-reporter.png\" width=\"420\">\n\nPlease note that the TAP reporter is unavailable when using [watch mode](#watch-it).\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n\n## Configuration\n\nAll of the CLI options can be configured in the `ava` section of your `package.json`. This allows you to modify the default behavior of the `ava` command, so you don't have to repeatedly type the same options on the command prompt.\n\n```json\n{\n\t\"ava\": {\n\t\t\"files\": [\n\t\t\t\"my-test-folder/*.js\",\n\t\t\t\"!**/not-this-file.js\"\n\t\t],\n\t\t\"source\": [\n\t\t\t\"**/*.{js,jsx}\",\n\t\t\t\"!dist/**/*\"\n\t\t],\n\t\t\"match\": [\n\t\t\t\"*oo\",\n\t\t\t\"!foo\"\n\t\t],\n\t\t\"concurrency\": 5,\n\t\t\"failFast\": true,\n\t\t\"failWithoutAssertions\": false,\n\t\t\"tap\": true,\n\t\t\"compileEnhancements\": false,\n\t\t\"require\": [\n\t\t\t\"@babel/register\"\n\t\t],\n\t\t\"babel\": {\n\t\t\t\"testOptions\": {\n\t\t\t\t\"babelrc\": false\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nArguments passed to the CLI will always take precedence over the configuration in `package.json`.\n\n### Options\n\n- `files`: file & directory paths and glob patterns that select which files AVA will run tests from. Only files with a `.js` extension are used. Files with an underscore prefix are ignored. All `.js` files in selected directories are run\n- `source`: files that, when changed, cause tests to be re-run in watch mode. See the [watch mode recipe for details](https://github.com/avajs/ava/blob/master/docs/recipes/watch-mode.md#source-files-and-test-files)\n- `match`: not typically useful in the `package.json` configuration, but equivalent to [specifying `--match` on the CLI](#running-tests-with-matching-titles)\n- `failFast`: stop running further tests once a test fails\n- `failWithoutAssertions`: if `false`, does not fail a test if it doesn't run [assertions](#assertions)\n- `tap`: if `true`, enables the [TAP reporter](#tap-reporter)\n- `snapshotDir`: specifies a fixed location for storing snapshot files. Use this if your snapshots are ending up in the wrong location\n- `compileEnhancements`: if `false`, disables [power-assert](https://github.com/power-assert-js/power-assert) — which otherwise helps provide more descriptive error messages — and detection of improper use of the `t.throws()` assertion\n- `require`: extra modules to require before tests are run. Modules are required in the [worker processes](#process-isolation)\n- `babel`: test file specific Babel options. See our [Babel recipe] for more details\n\nNote that providing files on the CLI overrides the `files` option. If you've configured a glob pattern, for instance `test/**/*.test.js`, you may want to repeat it when using the CLI: `ava 'test/integration/*.test.js'`.\n\n## Documentation\n\nTests are run concurrently. You can specify synchronous and asynchronous tests. Tests are considered synchronous unless you return a promise or [observable](https://github.com/zenparsing/zen-observable).\n\nWe *highly* recommend the use of [async functions](#async-function-support). They make asynchronous code concise and readable, and they implicitly return a promise so you don't have to.\n\nIf you're unable to use promises or observables, you may enable \"callback mode\" by defining your test with `test.cb([title], fn)`. Tests declared this way **must** be manually ended with `t.end()`. This mode is mainly intended for testing callback-style APIs. However, we would strongly recommend [promisifying](https://github.com/sindresorhus/pify) callback-style APIs instead of using \"callback mode\", as this results in more correct and readable tests.\n\nYou must define all tests synchronously. They can't be defined inside `setTimeout`, `setImmediate`, etc.\n\nAVA tries to run test files with their current working directory set to the directory that contains your `package.json` file.\n\n### Creating tests\n\nTo create a test you call the `test` function you imported from AVA. Provide the required title and implementation function. Titles must be unique within each test file. The function will be called when your test is run. It's passed an [execution object](#t) as its first argument.\n\n**Note:** In order for the [enhanced assertion messages](#enhanced-assertion-messages) to behave correctly, the first argument **must** be named `t`.\n\n```js\nimport test from 'ava';\n\ntest('my passing test', t => {\n\tt.pass();\n});\n```\n\n### Assertion planning\n\nAssertion plans ensure tests only pass when a specific number of assertions have been executed. They'll help you catch cases where tests exit too early. They'll also cause tests to fail if too many assertions are executed, which can be useful if you have assertions inside callbacks or loops.\n\nIf you do not specify an assertion plan, your test will still fail if no assertions are executed. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration) to disable this behavior.\n\nNote that, unlike [`tap`](https://www.npmjs.com/package/tap) and [`tape`](https://www.npmjs.com/package/tape), AVA does *not* automatically end a test when the planned assertion count is reached.\n\nThese examples will result in a passed test:\n\n```js\ntest('resolves with 3', t => {\n\tt.plan(1);\n\n\treturn Promise.resolve(3).then(n => {\n\t\tt.is(n, 3);\n\t});\n});\n\ntest.cb('invokes callback', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t\tt.end();\n\t});\n});\n```\n\nThese won't:\n\n```js\ntest('loops twice', t => {\n\tt.plan(2);\n\n\tfor (let i = 0; i < 3; i++) {\n\t\tt.true(i < 3);\n\t}\n}); // Fails, 3 assertions are executed which is too many\n\ntest('invokes callback synchronously', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t});\n}); // Fails, the test ends synchronously before the assertion is executed\n```\n\n### Running tests serially\n\nTests are run concurrently by default, however, sometimes you have to write tests that cannot run concurrently. In these rare cases you can use the `.serial` modifier. It will force those tests to run serially *before* the concurrent ones.\n\n```js\ntest.serial('passes serially', t => {\n\tt.pass();\n});\n```\n\nNote that this only applies to tests within a particular test file. AVA will still run multiple tests files at the same time unless you pass the [`--serial` CLI flag](#cli).\n\nYou can use the `.serial` modifier with all tests, hooks and even `.todo()`, but it's only available on the `test` function.\n\n### Running specific tests\n\nDuring development it can be helpful to only run a few specific tests. This can be accomplished using the `.only` modifier:\n\n```js\ntest('will not be run', t => {\n\tt.fail();\n});\n\ntest.only('will be run', t => {\n\tt.pass();\n});\n```\n\nYou can use the `.only` modifier with all tests. It cannot be used with hooks or `.todo()`.\n\n*Note:* The `.only` modifier applies to the test file it's defined in, so if you run multiple test files, tests in other files will still run. If you want to only run the `test.only` test, provide just that test file to AVA.\n\n### Running tests with matching titles\n\nThe `--match` flag allows you to run just the tests that have a matching title. This is achieved with simple wildcard patterns. Patterns are case insensitive. See [`matcher`](https://github.com/sindresorhus/matcher) for more details.\n\nMatch titles ending with `foo`:\n\n```console\n$ ava --match='*foo'\n```\n\nMatch titles starting with `foo`:\n\n```console\n$ ava --match='foo*'\n```\n\nMatch titles containing `foo`:\n\n```console\n$ ava --match='*foo*'\n```\n\nMatch titles that are *exactly* `foo` (albeit case insensitively):\n\n```console\n$ ava --match='foo'\n```\n\nMatch titles not containing `foo`:\n\n```console\n$ ava --match='!*foo*'\n```\n\nMatch titles starting with `foo` and ending with `bar`:\n\n```console\n$ ava --match='foo*bar'\n```\n\nMatch titles starting with `foo` or ending with `bar`:\n\n```console\n$ ava --match='foo*' --match='*bar'\n```\n\nNote that a match pattern takes precedence over the `.only` modifier. Only tests with an explicit title are matched. Tests without titles or whose title is derived from the implementation function will be skipped when `--match` is used.\n\nHere's what happens when you run AVA with a match pattern of `*oo*` and the following tests:\n\n```js\ntest('foo will run', t => {\n\tt.pass();\n});\n\ntest('moo will also run', t => {\n\tt.pass();\n});\n\ntest.only('boo will run but not exclusively', t => {\n\tt.pass();\n});\n\n// Won't run, no title\ntest(function (t) {\n\tt.fail();\n});\n\n// Won't run, no explicit title\ntest(function foo(t) {\n\tt.fail();\n});\n```\n\n### Skipping tests\n\nSometimes failing tests can be hard to fix. You can tell AVA to skip these tests using the `.skip` modifier. They'll still be shown in the output (as having been skipped) but are never run.\n\n```js\ntest.skip('will not be run', t => {\n\tt.fail();\n});\n```\n\nYou must specify the implementation function. You can use the `.skip` modifier with all tests and hooks, but not with `.todo()`. You can not apply further modifiers to `.skip`.\n\n### Test placeholders (\"todo\")\n\nYou can use the `.todo` modifier when you're planning to write a test. Like skipped tests these placeholders are shown in the output. They only require a title; you cannot specify the implementation function.\n\n```js\ntest.todo('will think about writing this later');\n```\n\nYou can signal that you need to write a serial test:\n\n```js\ntest.serial.todo('will think about writing this later');\n```\n\n### Failing tests\n\nYou can use the `.failing` modifier to document issues with your code that need to be fixed. Failing tests are run just like normal ones, but they are expected to fail, and will not break your build when they do. If a test marked as failing actually passes, it will be reported as an error and fail the build with a helpful message instructing you to remove the `.failing` modifier.\n\nThis allows you to merge `.failing` tests before a fix is implemented without breaking CI. This is a great way to recognize good bug report PR's with a commit credit, even if the reporter is unable to actually fix the problem.\n\n```js\n// See: github.com/user/repo/issues/1234\ntest.failing('demonstrate some bug', t => {\n\tt.fail(); // Test will count as passed\n});\n```\n\n### Before & after hooks\n\nAVA lets you register hooks that are run before and after your tests. This allows you to run setup and/or teardown code.\n\n`test.before()` registers a hook to be run before the first test in your test file. Similarly `test.after()` registers a hook to be run after the last test. Use `test.after.always()` to register a hook that will **always** run once your tests and other hooks complete. `.always()` hooks run regardless of whether there were earlier failures, so they are ideal for cleanup tasks. Note however that uncaught exceptions, unhandled rejections or timeouts will crash your tests, possibly preventing `.always()` hooks from running.\n\n`test.beforeEach()` registers a hook to be run before each test in your test file. Similarly `test.afterEach()` a hook to be run after each test. Use `test.afterEach.always()` to register an after hook that is called even if other test hooks, or the test itself, fail.\n\nIf a test is skipped with the `.skip` modifier, the respective `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks are not run. Likewise, if all tests in a test file are skipped `.before()`, `.after()` and `.after.always()` hooks for the file are not run.\n\nLike `test()` these methods take an optional title and an implementation function. The title is shown if your hook fails to execute. The implementation is called with an [execution object](#t). You can use assertions in your hooks. You can also pass a [macro function](#test-macros) and additional arguments.\n\n`.before()` hooks execute before `.beforeEach()` hooks. `.afterEach()` hooks execute before `.after()` hooks. Within their category the hooks execute in the order they were defined. By default hooks execute concurrently, but you can use `test.serial` to ensure only that single hook is run at a time. Unlike with tests, serial hooks are *not* run before other hooks:\n\n```js\ntest.before(t => {\n\t// This runs before all tests\n});\n\ntest.before(t => {\n\t// This runs concurrently with the above\n});\n\ntest.serial.before(t => {\n\t// This runs after the above\n});\n\ntest.serial.before(t => {\n\t// This too runs after the above, and before tests\n});\n\ntest.after('cleanup', t => {\n\t// This runs after all tests\n});\n\ntest.after.always('guaranteed cleanup', t => {\n\t// This will always run, regardless of earlier failures\n});\n\ntest.beforeEach(t => {\n\t// This runs before each test\n});\n\ntest.afterEach(t => {\n\t// This runs after each test\n});\n\ntest.afterEach.always(t => {\n\t// This runs after each test and other test hooks, even if they failed\n});\n\ntest('title', t => {\n\t// Regular test\n});\n```\n\nHooks can be synchronous or asynchronous, just like tests. To make a hook asynchronous return a promise or observable, use an async function, or enable callback mode via `test.before.cb()`, `test.beforeEach.cb()` etc.\n\n```js\ntest.before(async t => {\n\tawait promiseFn();\n});\n\ntest.after(t => {\n\treturn new Promise(/* ... */);\n});\n\ntest.beforeEach.cb(t => {\n\tsetTimeout(t.end);\n});\n\ntest.afterEach.cb(t => {\n\tsetTimeout(t.end);\n});\n```\n\nKeep in mind that the `.beforeEach()` and `.afterEach()` hooks run just before and after a test is run, and that by default tests run concurrently. This means each multiple `.beforeEach()` hooks may run concurrently. Using `test.serial.beforeEach()` does not change this. If you need to set up global state for each test (like spying on `console.log` [for example](https://github.com/avajs/ava/issues/560)), you'll need to make sure the tests themselves are [run serially](#running-tests-serially).\n\nRemember that AVA runs each test file in its own process. You may not have to clean up global state in a `.after()`-hook since that's only called right before the process exits.\n\n#### Test context\n\nHooks can share context with the test:\n\n```js\ntest.beforeEach(t => {\n\tt.context.data = generateUniqueData();\n});\n\ntest('context data is foo', t => {\n\tt.is(t.context.data + 'bar', 'foobar');\n});\n```\n\nContext created in `.before()` hooks is [cloned](https://www.npmjs.com/package/lodash.clone) before it is passed to `.beforeEach()` hooks and / or tests. The `.after()` and `.after.always()` hooks receive the original context value.\n\nFor `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks the context is *not* shared between different tests, allowing you to set up data such that it will not leak to other tests.\n\nBy default `t.context` is an object but you can reassign it:\n\n```js\ntest.before(t => {\n\tt.context = 'unicorn';\n});\n\ntest('context is unicorn', t => {\n\tt.is(t.context, 'unicorn');\n});\n```\n\n### Test macros\n\nAdditional arguments passed to the test declaration will be passed to the test implementation. This is useful for creating reusable test macros.\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\ntest('2 + 2 = 4', macro, '2 + 2', 4);\ntest('2 * 3 = 6', macro, '2 * 3', 6);\n```\n\nYou can build the test title programmatically by attaching a `title` function to the macro:\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nmacro.title = (providedTitle, input, expected) => `${providedTitle} ${input} = ${expected}`.trim();\n\ntest(macro, '2 + 2', 4);\ntest(macro, '2 * 3', 6);\ntest('providedTitle', macro, '3 * 3', 9);\n```\n\nThe `providedTitle` argument defaults to an empty string if the user does not supply a string title. This allows for easy concatenation without having to worry about `null` / `undefined`. It is worth remembering that the empty string is considered a falsy value, so you can still use `if(providedTitle) {...}`.\n\nYou can also pass arrays of macro functions:\n\n```js\nconst safeEval = require('safe-eval');\n\nfunction evalMacro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nfunction safeEvalMacro(t, input, expected) {\n\tt.is(safeEval(input), expected);\n}\n\ntest([evalMacro, safeEvalMacro], '2 + 2', 4);\ntest([evalMacro, safeEvalMacro], '2 * 3', 6);\n```\n\nWe encourage you to use macros instead of building your own test generators ([here is an example](https://github.com/avajs/ava-codemods/blob/47073b5b58aa6f3fb24f98757be5d3f56218d160/test/ok-to-truthy.js#L7-L9) of code that should be replaced with a macro). Macros are designed to perform static analysis of your code, which can lead to better performance, IDE integration, and linter rules.\n\n### Custom assertions\n\nYou can use any assertion library instead of or in addition to the built-in one, provided it throws exceptions when the assertion fails.\n\nThis won't give you as nice an experience as you'd get with the [built-in assertions](#assertions) though, and you won't be able to use the [assertion planning](#assertion-planning) ([see #25](https://github.com/avajs/ava/issues/25)).\n\nYou'll have to configure AVA to not fail tests if no assertions are executed, because AVA can't tell if custom assertions pass. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration).\n\n```js\nimport assert from 'assert';\n\ntest('custom assertion', t => {\n\tassert(true);\n});\n```\n\n### Latest JavaScript support\n\nAVA uses [Babel 7](https://babeljs.io) so you can use the latest JavaScript syntax in your tests. There is no extra setup required. You don't need to be using Babel in your own project for this to work either.\n\nWe aim support all [finished syntax proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md), as well as all syntax from ratified JavaScript versions (e.g. ES2017). See our [`@ava/stage-4`](https://github.com/avajs/babel-preset-stage-4) preset for the currently supported proposals.\n\nPlease note that we do not add or modify built-ins. For example, if you use [`Object.entries()`](https://github.com/tc39/proposal-object-values-entries) in your tests, they will crash in Node.js 6 which does not implement this method.\n\nYou can disable this syntax support, or otherwise customize AVA's Babel pipeline. See our [Babel recipe] for more details.\n\n### TypeScript support\n\nAVA includes typings for TypeScript. You have to set up transpilation yourself. When you set `module` to `commonjs` in your `tsconfig.json` file, TypeScript will automatically find the type definitions for AVA. You should set `target` to `es2015` to use promises and async functions.\n\nSee AVA's [TypeScript recipe](docs/recipes/typescript.md) for a more detailed explanation.\n\n### Transpiling imported modules\n\nAVA currently only transpiles the tests you ask it to run, as well as test helpers (files starting with `_` or in `helpers` directory) inside the test directory. *It will not transpile modules you `import` from outside of the test.* This may be unexpected but there are workarounds.\n\nIf you use Babel you can use its [require hook](https://babeljs.io/docs/usage/require/) to transpile imported modules on-the-fly. To add it, [configure it in your `package.json`](#configuration).\n\nYou can also transpile your modules in a separate process and refer to the transpiled files rather than the sources from your tests. Example [here](docs/recipes/precompiling-with-webpack.md).\n\n### Promise support\n\nIf you return a promise in the test you don't need to explicitly end the test as it will end when the promise resolves.\n\n```js\ntest('resolves with unicorn', t => {\n\treturn somePromise().then(result => {\n\t\tt.is(result, 'unicorn');\n\t});\n});\n```\n\n### Generator function support\n\nAVA comes with built-in support for [generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*).\n\n```js\ntest(function * (t) {\n\tconst value = yield generatorFn();\n\tt.true(value);\n});\n```\n\n### Async function support\n\nAVA comes with built-in support for [async functions](https://tc39.github.io/ecmascript-asyncawait/) *(async/await)*.\n\n```js\ntest(async function (t) {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n\n// Async arrow function\ntest('promises the truth', async t => {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n```\n\n### Observable support\n\nAVA comes with built-in support for [observables](https://github.com/zenparsing/es-observable). If you return an observable from a test, AVA will automatically consume it to completion before ending the test.\n\n*You do not need to use \"callback mode\" or call `t.end()`.*\n\n```js\ntest('handles observables', t => {\n\tt.plan(3);\n\treturn Observable.of(1, 2, 3, 4, 5, 6)\n\t\t.filter(n => {\n\t\t\t// Only even numbers\n\t\t\treturn n % 2 === 0;\n\t\t})\n\t\t.map(() => t.pass());\n});\n```\n\n### Callback support\n\nAVA supports using `t.end` as the final callback when using node-style error-first callback APIs. AVA will consider any truthy value passed as the first argument to `t.end` to be an error. Note that `t.end` requires \"callback mode\", which can be enabled by using the `test.cb` chain.\n\n```js\ntest.cb('data.txt can be read', t => {\n\t// `t.end` automatically checks for error as first argument\n\tfs.readFile('data.txt', t.end);\n});\n```\n\n### Global timeout\n\nA global timeout can be set via the `--timeout` option. Timeout in AVA behaves differently than in other test frameworks. AVA resets a timer after each test, forcing tests to quit if no new test results were received within the specified timeout. This can be used to handle stalled tests.\n\nYou can set timeouts in a human-readable way:\n\n```console\n$ ava --timeout=10s # 10 seconds\n$ ava --timeout=2m # 2 minutes\n$ ava --timeout=100 # 100 milliseconds\n```\n\n## API\n\n### `test([title], implementation)`\n### `test.serial([title], implementation)`\n### `test.cb([title], implementation)`\n### `test.only([title], implementation)`\n### `test.skip([title], implementation)`\n### `test.todo(title)`\n### `test.failing([title], implementation)`\n### `test.before([title], implementation)`\n### `test.after([title], implementation)`\n### `test.beforeEach([title], implementation)`\n### `test.afterEach([title], implementation)`\n\n#### `title`\n\nType: `string`\n\nTest title.\n\n#### `implementation(t)`\n\nType: `function`\n\nShould contain the actual test.\n\n##### `t`\n\nType: `object`\n\nThe execution object of a particular test. Each test implementation receives a different object. Contains the [assertions](#assertions) as well as `.plan(count)` and `.end()` methods. `t.context` can contain shared state from hooks. `t.title` returns the test's title.\n\n###### `t.plan(count)`\n\nPlan how many assertion there are in the test. The test will fail if the actual assertion count doesn't match the number of planned assertions. See [assertion planning](#assertion-planning).\n\n###### `t.end()`\n\nEnd the test. Only works with `test.cb()`.\n\n###### `t.log(...values)`\n\nLog values contextually alongside the test result instead of immediately printing them to `stdout`. Behaves somewhat like `console.log`, but without support for placeholder tokens.\n\n## Assertions\n\nAssertions are mixed into the [execution object](#t) provided to each test implementation:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy('unicorn'); // Assertion\n});\n```\n\nAssertions are bound to their test so you can assign them to a variable or pass them around:\n\n```js\ntest('unicorns are truthy', t => {\n\tconst truthy = t.thruthy;\n\ttruthy('unicorn');\n});\n```\n\nAssertions can be skipped by adding `.skip()`:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy.skip('unicorn');\n});\n```\n\nIf multiple assertion failures are encountered within a single test, AVA will only display the *first* one.\n\n### `.pass([message])`\n\nPassing assertion.\n\n### `.fail([message])`\n\nFailing assertion.\n\n### `.truthy(value, [message])`\n\nAssert that `value` is truthy.\n\n### `.falsy(value, [message])`\n\nAssert that `value` is falsy.\n\n### `.true(value, [message])`\n\nAssert that `value` is `true`.\n\n### `.false(value, [message])`\n\nAssert that `value` is `false`.\n\n### `.is(value, expected, [message])`\n\nAssert that `value` is the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.not(value, expected, [message])`\n\nAssert that `value` is not the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.deepEqual(value, expected, [message])`\n\nAssert that `value` is deeply equal to `expected`. See [Concordance](https://github.com/concordancejs/concordance) for details. Works with [React elements and `react-test-renderer`](https://github.com/concordancejs/react).\n\n### `.notDeepEqual(value, expected, [message])`\n\nAssert that `value` is not deeply equal to `expected`. The inverse of `.deepEqual()`.\n\n### `.throws(thrower, [expected, [message]])`\n\nAssert that an error is thrown. `thrower` can be a function which should throw, or return a promise that should reject, or an observable that should error. Alternatively a promise or observable can be passed directly.\n\nThe thrown value *must* be an error. It is returned so you can run more assertions against it.\n\n`expected` can be a constructor, in which case the thrown error must be an instance of the constructor. It can be a string, which is compared against the thrown error's message, or a regular expression which is matched against this message. You can also specify a matcher object with one or more of the following properties:\n\n* `instanceOf`: a constructor, the thrown error must be an instance of\n* `is`: the thrown error must be strictly equal to `expected.is`\n* `message`: either a string, which is compared against the thrown error's message, or a regular expression, which is matched against this message\n* `name`: the expected `.name` value of the thrown error\n\n`expected` does not need to be specified. If you don't need it but do want to set an assertion message you have to specify `null`.\n\nExample:\n\n```js\nconst fn = () => {\n\tthrow new TypeError('🦄');\n};\n\ntest('throws', t => {\n\tconst error = t.throws(() => {\n\t\tfn();\n\t}, TypeError);\n\n\tt.is(error.message, '🦄');\n});\n```\n\n```js\nconst promise = Promise.reject(new TypeError('🦄'));\n\ntest('rejects', async t => {\n\tconst error = await t.throws(promise);\n\tt.is(error.message, '🦄');\n});\n```\n\nWhen testing an observable or promise you must wait for the assertion to complete:\n\n```js\ntest('rejects', async t => {\n\tawait t.throws(promise);\n});\n```\n\nWhen testing an asynchronous function you must also wait for the assertion to complete:\n\n```js\ntest('throws', async t => {\n\tawait t.throws(async () => {\n\t\tthrow new TypeError('🦄');\n\t}, {instanceOf: TypeError, message: '🦄'});\n});\n```\n\n### `.notThrows(nonThrower, [message])`\n\nAssert that no error is thrown. `thrower` can be a function which shouldn't throw, or return a promise that should resolve, or an observable that should complete. Alternatively a promise or an observable can be passed directly.\n\nLike the `.throws()` assertion, when testing a promise or an observable you must wait for the assertion to complete:\n\n```js\ntest('resolves', async t => {\n\tawait t.notThrows(promise);\n});\n```\n\n### `.regex(contents, regex, [message])`\n\nAssert that `contents` matches `regex`.\n\n### `.notRegex(contents, regex, [message])`\n\nAssert that `contents` does not match `regex`.\n\n### `.ifError(error, [message])`\n\nAssert that `error` is falsy.\n\n### `.snapshot(expected, [message])`\n### `.snapshot(expected, [options], [message])`\n\nCompares the `expected` value with a previously recorded snapshot. Snapshots are stored for each test, so ensure you give your tests unique titles. Alternatively pass an `options` object to select a specific snapshot, for instance `{id: 'my snapshot'}`.\n\nSnapshot assertions cannot be skipped when snapshots are being updated.\n\n## Snapshot testing\n\nAVA supports snapshot testing, [as introduced by Jest](https://facebook.github.io/jest/docs/snapshot-testing.html), through its [Assertions](#assertions) interface. You can snapshot any value as well as React elements:\n\n```js\n// Your component\nconst HelloWorld = () => <h1>Hello World...!</h1>;\n\nexport default HelloWorld;\n```\n\n```js\n// Your test\nimport test from 'ava';\nimport render from 'react-test-renderer';\nimport HelloWorld from '.';\n\ntest('HelloWorld component', t => {\n\tconst tree = render.create(<HelloWorld/>).toJSON();\n\tt.snapshot(tree);\n});\n```\n\n[Try it out in this example project.](https://github.com/avajs/ava-snapshot-example)\n\nSnapshots are stored alongside your test files. If your tests are in a `test` or `tests` folder the snapshots will be stored in a `snapshots` folder. If your tests are in a `__tests__` folder then they they'll be stored in a `__snapshots__` folder.\n\nSay you have `~/project/test/main.js` which contains snapshot assertions. AVA will create two files:\n\n* `~/project/test/snapshots/main.js.snap`\n* `~/project/test/snapshots/main.js.md`\n\nThe first file contains the actual snapshot and is required for future comparisons. The second file contains your *snapshot report*. It's regenerated when you update your snapshots. If you commit it to source control you can diff it to see the changes to your snapshot.\n\nAVA will show why your snapshot assertion failed:\n\n<img src=\"media/snapshot-testing.png\" width=\"1048\">\n\nYou can then check your code. If the change was intentional you can use the `--update-snapshots` (or `-u`) flag to update the snapshots:\n\n```console\n$ ava --update-snapshots\n```\n\nYou can specify a fixed location for storing the snapshot files in AVA's [`package.json` configuration](#configuration):\n\n```json\n{\n\t\"ava\": {\n\t\t\"snapshotDir\": \"custom-directory\"\n\t}\n}\n```\n\nThe snapshot files will be saved in a directory structure that mirrors that of your test files.\n\nIf you are running AVA against precompiled test files, AVA will try and use source maps to determine the location of the original files. Snapshots will be stored next to these files, following the same rules as if AVA had executed the original files directly. This is great if you're writing your tests in TypeScript (see our [TypeScript recipe](docs/recipes/typescript.md)).\n\n### Skipping assertions\n\nAny assertion can be skipped using the `skip` modifier. Skipped assertions are still counted, so there is no need to change your planned assertion count.\n\n```js\ntest('skip assertion', t => {\n\tt.plan(2);\n\tt.is.skip(foo(), 5); // No need to change your plan count when skipping\n\tt.is(1, 1);\n});\n```\n\n### Enhanced assertion messages\n\nAVA comes with [`power-assert`](https://github.com/power-assert-js/power-assert) built-in, giving you more descriptive assertion messages. It reads your test and tries to infer more information from the code.\n\nLet's take this example, using Node's standard [`assert` library](https://nodejs.org/api/assert.html):\n\n```js\nconst a = /foo/;\nconst b = 'bar';\nconst c = 'baz';\nrequire('assert').ok(a.test(b) || b === c);\n```\n\nIf you paste that into a Node REPL it'll return:\n\n```\nAssertionError: false == true\n```\n\nIn AVA however, this test:\n\n```js\ntest('enhanced assertions', t => {\n\tconst a = /foo/;\n\tconst b = 'bar';\n\tconst c = 'baz';\n\tt.true(a.test(b) || b === c);\n});\n```\n\nWill output:\n\n```\nt.true(a.test(b) || b === c)\n       |      |     |     |\n       |      \"bar\" \"bar\" \"baz\"\n       false\n```\n\n## Process isolation\n\nEach test file is run in a separate Node.js process. This allows you to change the global state or overriding a built-in in one test file, without affecting another. It's also great for performance on modern multi-core processors, allowing multiple test files to execute in parallel.\n\nAVA will set `process.env.NODE_ENV` to `test`, unless the `NODE_ENV` environment variable has been set. This is useful if the code you're testing has test defaults (for example when picking what database to connect to, or environment-specific Babel options). It may cause your code or its dependencies to behave differently though. Note that `'NODE_ENV' in process.env` will always be `true`.\n\n## Tips\n\n### Temp files\n\nRunning tests concurrently comes with some challenges, doing file IO is one.\n\nUsually, serial tests create temp directories in the current test directory and clean them up at the end. This won't work when you run tests concurrently as tests will conflict with each other. The correct way to do it is to use a new temp directory for each test. The [`tempfile`](https://github.com/sindresorhus/tempfile) and [`temp-write`](https://github.com/sindresorhus/temp-write) modules can be helpful.\n\n### Code coverage\n\nYou can't use [`istanbul`](https://github.com/gotwarlost/istanbul) for code coverage as AVA [spawns the test files](#process-isolation). You can use [`nyc`](https://github.com/bcoe/nyc) instead, which is basically `istanbul` with support for subprocesses.\n\nAs of version `5.0.0` it uses source maps to report coverage for your actual code, regardless of transpilation. Make sure that the code you're testing includes an inline source map or references a source map file. If you use `babel-register` you can set the `sourceMaps` option in your Babel config to `inline`.\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [`/ˈeɪvə/` ay-və](media/pronunciation.m4a?raw=true).\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Flow](docs/recipes/flow.md)\n- [Configuring Babel][Babel recipe]\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [JSPM and SystemJS](docs/recipes/jspm-systemjs.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Precompiling source files with webpack](docs/recipes/precompiling-with-webpack.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n\n## Support\n\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/ava)\n- [Gitter chat](https://gitter.im/avajs/ava)\n- [Twitter](https://twitter.com/ava__js)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) - Lint rules for AVA tests\n- [sublime-ava](https://github.com/avajs/sublime-ava) - Snippets for AVA tests\n- [atom-ava](https://github.com/avajs/atom-ava) - Snippets for AVA tests\n- [vscode-ava](https://github.com/samverschueren/vscode-ava) - Snippets for AVA tests\n- [gulp-ava](https://github.com/avajs/gulp-ava) - Run tests with gulp\n- [grunt-ava](https://github.com/avajs/grunt-ava) - Run tests with grunt\n- [More…](https://github.com/avajs/awesome-ava#packages)\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [AVA Casts](http://avacasts.com)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus) | [![Vadim Demedes](https://github.com/vadimdemedes.png?size=100)](https://github.com/vadimdemedes)\n---|---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](http://sindresorhus.com) | [Vadim Demedes](https://github.com/vadimdemedes)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://ava.li\">\n\t\t<img src=\"https://cdn.rawgit.com/avajs/ava/fe1cea1ca3d2c8518c0cc39ec8be592beab90558/media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n\n[Babel recipe]: docs/recipes/babel.md\n",
      "readmeFilename": "readme.md",
      "gitHead": "14a842fdef91ab1a98d9d864e47bbf196ea4afdb",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.0.0-beta.2",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-ulHqAlgUCcoACAG9eDiOtRqVcRPrV6aep2B+6KgvZZ+LNEDiEo4dojBSzAnOiovClHdQtQH9zicggCmQ+QaXAQ==",
        "shasum": "3645d992fc7a60a005aeb17b6065670a6aa412cf",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.0.0-beta.2.tgz",
        "fileCount": 43,
        "unpackedSize": 227213,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCvfUbk7AuoygA2HBbbeYSQpX3w1Xdu1Hnk/vJRkg5GlwIhAMy29Sz96q4pA7AWzWwDC+eIaPOl4V3P/U0nt3eDSZxX"
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.0.0-beta.2_1518625446393_0.7897935152300442"
      },
      "_hasShrinkwrap": false
    },
    "1.0.0-beta.3": {
      "name": "ava",
      "version": "1.0.0-beta.3",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=4.8.7 <5 || >=6.12.3 <7 || >=8.9.4"
      },
      "scripts": {
        "lint": "xo && (cd test/fixture && xo '**' '!{source-map-initial,syntax-error}.js' '!snapshots/test-sourcemaps/build/**') && lock-verify",
        "test": "npm run lint && flow check test/flow-types && tsc -p test/ts-types && nyc tap --no-cov --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "index.d.ts"
      ],
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^2.0.0-beta.4",
        "@ava/babel-preset-transform-test-files": "^4.0.0-beta.3",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "^7.0.0-beta.40",
        "@babel/generator": "^7.0.0-beta.40",
        "@babel/plugin-syntax-async-generators": "^7.0.0-beta.40",
        "@babel/plugin-syntax-object-rest-spread": "^7.0.0-beta.40",
        "@concordance/react": "^1.0.0",
        "@ladjs/time-require": "^0.1.4",
        "ansi-escapes": "^3.0.0",
        "ansi-styles": "^3.2.0",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "auto-bind": "^1.2.0",
        "ava-init": "^0.2.1",
        "bluebird": "^3.5.1",
        "caching-transform": "^1.0.0",
        "chalk": "^2.3.1",
        "chokidar": "^2.0.1",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-spinners": "^1.1.0",
        "cli-truncate": "^1.1.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^3.0.0",
        "convert-source-map": "^1.5.1",
        "currently-unhandled": "^0.4.1",
        "debug": "^3.1.0",
        "dot-prop": "^4.2.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "figures": "^2.0.0",
        "get-port": "^3.2.0",
        "globby": "^7.1.1",
        "hullabaloo-config-manager": "^2.0.0-beta.3",
        "ignore-by-default": "^1.0.0",
        "import-local": "^1.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^1.1.0",
        "is-error": "^2.2.1",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^1.1.0",
        "is-promise": "^2.1.0",
        "last-line-stream": "^1.0.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.1.0",
        "matcher": "^1.1.0",
        "md5-hex": "^2.0.0",
        "meow": "^4.0.0",
        "ms": "^2.1.1",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.1.0",
        "plur": "^2.0.0",
        "pretty-ms": "^3.1.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "safe-buffer": "^5.1.1",
        "slash": "^1.0.0",
        "source-map-support": "^0.5.3",
        "stack-utils": "^1.0.1",
        "strip-ansi": "^4.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^5.2.0",
        "trim-off-newlines": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.3.0"
      },
      "devDependencies": {
        "@std/esm": "^0.21.7",
        "cli-table2": "^0.2.0",
        "codecov": "^3.0.0",
        "del": "^3.0.0",
        "delay": "^2.0.0",
        "execa": "^0.9.0",
        "flow-bin": "^0.65.0",
        "get-stream": "^3.0.0",
        "git-branch": "^1.0.0",
        "has-ansi": "^3.0.0",
        "inquirer": "^5.1.0",
        "lock-verify": "^1.1.0",
        "lolex": "^2.3.2",
        "nyc": "^11.4.1",
        "proxyquire": "^1.7.4",
        "react": "^16.2.0",
        "react-test-renderer": "^16.2.0",
        "signal-exit": "^3.0.0",
        "sinon": "^4.3.0",
        "source-map-fixtures": "^2.1.0",
        "tap": "^11.1.0",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "typescript": "^2.7.1",
        "xo": "^0.20.1",
        "zen-observable": "^0.8.6"
      },
      "typings": "index.d.ts",
      "xo": {
        "ignores": [
          "media/**"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "readme": "# [![AVA](media/header.png)](https://ava.li)\n\n> Futuristic test runner\n\n[![Build Status: Linux](https://travis-ci.org/avajs/ava.svg?branch=master)](https://travis-ci.org/avajs/ava) [![Build status: Windows](https://ci.appveyor.com/api/projects/status/e7v91mu2m5x48ehx/branch/master?svg=true)](https://ci.appveyor.com/project/ava/ava/branch/master) [![Coverage Status](https://coveralls.io/repos/github/avajs/ava/badge.svg?branch=master)](https://coveralls.io/github/avajs/ava?branch=master) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo) [![Gitter](https://badges.gitter.im/join_chat.svg)](https://gitter.im/avajs/ava) [![Mentioned in Awesome Node.js](https://awesome.re/mentioned-badge.svg)](https://github.com/sindresorhus/awesome-nodejs)\n\nEven though JavaScript is single-threaded, IO in Node.js can happen in parallel due to its async nature. AVA takes advantage of this and runs your tests concurrently, which is especially beneficial for IO heavy tests. In addition, test files are run in parallel as separate processes, giving you even better performance and an isolated environment for each test file. [Switching](https://github.com/sindresorhus/pageres/commit/663be15acb3dd2eb0f71b1956ef28c2cd3fdeed0) from Mocha to AVA in Pageres brought the test time down from 31 to 11 seconds. Having tests run concurrently forces you to write atomic tests, meaning tests don't depend on global state or the state of other tests, which is a great thing!\n\n![](media/mini-reporter.gif)\n\n*Read our [contributing guide](contributing.md) if you're looking to contribute (issues/PRs/etc).*\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\n**This documentation covers the 1.0 beta releases, which use Babel 7. The last release that uses Babel 6 is [`v0.25.0`](https://github.com/avajs/ava/tree/v0.25.0).**\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Contents\n\n- [Usage](#usage)\n- [CLI Usage](#cli)\n- [Debugging](#debugging)\n- [Reporters](#reporters)\n- [Configuration](#configuration)\n- [Documentation](#documentation)\n- [API](#api)\n- [Assertions](#assertions)\n- [Snapshot testing](#snapshot-testing)\n- [Tips](#tips)\n- [FAQ](#faq)\n- [Recipes](#recipes)\n- [Support](#support)\n- [Related](#related)\n- [Links](#links)\n- [Team](#team)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript & Flow type definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](#process-isolation)\n- [Write your tests using the latest JavaScript syntax](#latest-javascript-support)\n- [Promise support](#promise-support)\n- [Generator function support](#generator-function-support)\n- [Async function support](#async-function-support)\n- [Observable support](#observable-support)\n- [Enhanced assertion messages](#enhanced-assertion-messages)\n- [TAP reporter](#tap-reporter)\n- [Automatic migration from other test runners](https://github.com/avajs/ava-codemods#migrating-to-ava)\n\n\n## Test syntax\n\n```js\nimport test from 'ava';\n\ntest('arrays are equal', t => {\n\tt.deepEqual([1, 2], [1, 2]);\n});\n```\n\n## Usage\n\n### Add AVA to your project\n\nInstall AVA globally and run it with `--init` to add AVA to your `package.json`.\n\n\n```console\n$ npm install --global ava@next\n$ ava --init\n```\n\nIf you prefer using Yarn:\n\n```console\n$ yarn global add ava@next\n$ ava --init\n```\n\nYour `package.json` will then look like this:\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"^1.0.0-beta.1\"\n\t}\n}\n```\n\nAny arguments passed after `--init` are added as config to `package.json`.\n\n#### Manual installation\n\nYou can also install AVA directly:\n\n```console\n$ npm install --save-dev ava@next\n```\n\nAlternatively using Yarn:\n\n```console\n$ yarn add --dev ava@next\n```\n\nYou'll have to configure the `test` script in your `package.json` to use `ava` (see above).\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nimport test from 'ava';\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\n\tt.is(await bar, 'bar');\n});\n```\n\n### Run it\n\n```console\n$ npm test\n```\n\n### Watch it\n\n```console\n$ npm test -- --watch\n```\n\nAVA comes with an intelligent watch mode. [Learn more in its recipe](docs/recipes/watch-mode.md).\n\n### Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## CLI\n\n```console\n$ ava --help\n\n  Usage\n    ava [<file|directory|glob> ...]\n\n  Options\n    --init                  Add AVA to your project\n    --watch, -w             Re-run tests when tests and source files change\n    --match, -m             Only run tests with matching title (Can be repeated)\n    --update-snapshots, -u  Update snapshots\n    --fail-fast             Stop after first test failure\n    --timeout, -T           Set global timeout\n    --serial, -s            Run tests serially\n    --concurrency, -c       Max number of test files running at the same time (Default: CPU cores)\n    --verbose, -v           Enable verbose output\n    --tap, -t               Generate TAP output\n    --no-cache              Disable the compiler cache\n    --color                 Force color output\n    --no-color              Disable color output\n\n  Examples\n    ava\n    ava test.js test2.js\n    ava test-*.js\n    ava test\n    ava --init\n\n  Default patterns when no arguments:\n  test.js test-*.js test/**/*.js **/__tests__/**/*.js **/*.test.js\n```\n\n*Note that the CLI will use your local install of AVA when available, even when run globally.*\n\nDirectories are recursed, with all `*.js` files being treated as test files. Directories named `fixtures`, `helpers` and `node_modules` are *always* ignored. So are files starting with `_` which allows you to place helpers in the same directory as your test files.\n\nWhen using `npm test`, you can pass positional arguments directly `npm test test2.js`, but flags needs to be passed like `npm test -- --verbose`.\n\n\n## Debugging\n\nAVA runs tests in child processes, so to debug tests, you need to do this workaround:\n\n```console\n$ node --inspect node_modules/ava/profile.js some/test/file.js\n```\n\n### Debugger-specific tips\n\n- [Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Visual Studio Code](docs/recipes/debugging-with-vscode.md)\n\n\n## Reporters\n\n### Mini-reporter\n\nThe mini-reporter is the default reporter.\n\n<img src=\"media/mini-reporter.gif\" width=\"460\">\n\n### Verbose reporter\n\nUse the `--verbose` flag to enable the verbose reporter. This is always used in CI environments unless the [TAP reporter](#tap-reporter) is enabled.\n\n<img src=\"media/verbose-reporter.png\" width=\"294\">\n\n### TAP reporter\n\nAVA supports the TAP format and thus is compatible with [any TAP reporter](https://github.com/sindresorhus/awesome-tap#reporters). Use the `--tap` flag to enable TAP output.\n\n```console\n$ ava --tap | tap-nyan\n```\n\n<img src=\"media/tap-reporter.png\" width=\"420\">\n\nPlease note that the TAP reporter is unavailable when using [watch mode](#watch-it).\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n\n## Configuration\n\nAll of the CLI options can be configured in the `ava` section of your `package.json`. This allows you to modify the default behavior of the `ava` command, so you don't have to repeatedly type the same options on the command prompt.\n\n```json\n{\n\t\"ava\": {\n\t\t\"files\": [\n\t\t\t\"my-test-folder/*.js\",\n\t\t\t\"!**/not-this-file.js\"\n\t\t],\n\t\t\"source\": [\n\t\t\t\"**/*.{js,jsx}\",\n\t\t\t\"!dist/**/*\"\n\t\t],\n\t\t\"match\": [\n\t\t\t\"*oo\",\n\t\t\t\"!foo\"\n\t\t],\n\t\t\"concurrency\": 5,\n\t\t\"failFast\": true,\n\t\t\"failWithoutAssertions\": false,\n\t\t\"tap\": true,\n\t\t\"compileEnhancements\": false,\n\t\t\"require\": [\n\t\t\t\"@babel/register\"\n\t\t],\n\t\t\"babel\": {\n\t\t\t\"testOptions\": {\n\t\t\t\t\"babelrc\": false\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nArguments passed to the CLI will always take precedence over the configuration in `package.json`.\n\n### Options\n\n- `files`: file & directory paths and glob patterns that select which files AVA will run tests from. Only files with a `.js` extension are used. Files with an underscore prefix are ignored. All `.js` files in selected directories are run\n- `source`: files that, when changed, cause tests to be re-run in watch mode. See the [watch mode recipe for details](https://github.com/avajs/ava/blob/master/docs/recipes/watch-mode.md#source-files-and-test-files)\n- `match`: not typically useful in the `package.json` configuration, but equivalent to [specifying `--match` on the CLI](#running-tests-with-matching-titles)\n- `failFast`: stop running further tests once a test fails\n- `failWithoutAssertions`: if `false`, does not fail a test if it doesn't run [assertions](#assertions)\n- `tap`: if `true`, enables the [TAP reporter](#tap-reporter)\n- `snapshotDir`: specifies a fixed location for storing snapshot files. Use this if your snapshots are ending up in the wrong location\n- `compileEnhancements`: if `false`, disables [power-assert](https://github.com/power-assert-js/power-assert) — which otherwise helps provide more descriptive error messages — and detection of improper use of the `t.throws()` assertion\n- `require`: extra modules to require before tests are run. Modules are required in the [worker processes](#process-isolation)\n- `babel`: test file specific Babel options. See our [Babel recipe] for more details\n\nNote that providing files on the CLI overrides the `files` option. If you've configured a glob pattern, for instance `test/**/*.test.js`, you may want to repeat it when using the CLI: `ava 'test/integration/*.test.js'`.\n\n## Documentation\n\nTests are run concurrently. You can specify synchronous and asynchronous tests. Tests are considered synchronous unless you return a promise or [observable](https://github.com/zenparsing/zen-observable).\n\nWe *highly* recommend the use of [async functions](#async-function-support). They make asynchronous code concise and readable, and they implicitly return a promise so you don't have to.\n\nIf you're unable to use promises or observables, you may enable \"callback mode\" by defining your test with `test.cb([title], fn)`. Tests declared this way **must** be manually ended with `t.end()`. This mode is mainly intended for testing callback-style APIs. However, we would strongly recommend [promisifying](https://github.com/sindresorhus/pify) callback-style APIs instead of using \"callback mode\", as this results in more correct and readable tests.\n\nYou must define all tests synchronously. They can't be defined inside `setTimeout`, `setImmediate`, etc.\n\nAVA tries to run test files with their current working directory set to the directory that contains your `package.json` file.\n\n### Creating tests\n\nTo create a test you call the `test` function you imported from AVA. Provide the required title and implementation function. Titles must be unique within each test file. The function will be called when your test is run. It's passed an [execution object](#t) as its first argument.\n\n**Note:** In order for the [enhanced assertion messages](#enhanced-assertion-messages) to behave correctly, the first argument **must** be named `t`.\n\n```js\nimport test from 'ava';\n\ntest('my passing test', t => {\n\tt.pass();\n});\n```\n\n### Assertion planning\n\nAssertion plans ensure tests only pass when a specific number of assertions have been executed. They'll help you catch cases where tests exit too early. They'll also cause tests to fail if too many assertions are executed, which can be useful if you have assertions inside callbacks or loops.\n\nIf you do not specify an assertion plan, your test will still fail if no assertions are executed. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration) to disable this behavior.\n\nNote that, unlike [`tap`](https://www.npmjs.com/package/tap) and [`tape`](https://www.npmjs.com/package/tape), AVA does *not* automatically end a test when the planned assertion count is reached.\n\nThese examples will result in a passed test:\n\n```js\ntest('resolves with 3', t => {\n\tt.plan(1);\n\n\treturn Promise.resolve(3).then(n => {\n\t\tt.is(n, 3);\n\t});\n});\n\ntest.cb('invokes callback', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t\tt.end();\n\t});\n});\n```\n\nThese won't:\n\n```js\ntest('loops twice', t => {\n\tt.plan(2);\n\n\tfor (let i = 0; i < 3; i++) {\n\t\tt.true(i < 3);\n\t}\n}); // Fails, 3 assertions are executed which is too many\n\ntest('invokes callback synchronously', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t});\n}); // Fails, the test ends synchronously before the assertion is executed\n```\n\n### Running tests serially\n\nTests are run concurrently by default, however, sometimes you have to write tests that cannot run concurrently. In these rare cases you can use the `.serial` modifier. It will force those tests to run serially *before* the concurrent ones.\n\n```js\ntest.serial('passes serially', t => {\n\tt.pass();\n});\n```\n\nNote that this only applies to tests within a particular test file. AVA will still run multiple tests files at the same time unless you pass the [`--serial` CLI flag](#cli).\n\nYou can use the `.serial` modifier with all tests, hooks and even `.todo()`, but it's only available on the `test` function.\n\n### Running specific tests\n\nDuring development it can be helpful to only run a few specific tests. This can be accomplished using the `.only` modifier:\n\n```js\ntest('will not be run', t => {\n\tt.fail();\n});\n\ntest.only('will be run', t => {\n\tt.pass();\n});\n```\n\nYou can use the `.only` modifier with all tests. It cannot be used with hooks or `.todo()`.\n\n*Note:* The `.only` modifier applies to the test file it's defined in, so if you run multiple test files, tests in other files will still run. If you want to only run the `test.only` test, provide just that test file to AVA.\n\n### Running tests with matching titles\n\nThe `--match` flag allows you to run just the tests that have a matching title. This is achieved with simple wildcard patterns. Patterns are case insensitive. See [`matcher`](https://github.com/sindresorhus/matcher) for more details.\n\nMatch titles ending with `foo`:\n\n```console\n$ ava --match='*foo'\n```\n\nMatch titles starting with `foo`:\n\n```console\n$ ava --match='foo*'\n```\n\nMatch titles containing `foo`:\n\n```console\n$ ava --match='*foo*'\n```\n\nMatch titles that are *exactly* `foo` (albeit case insensitively):\n\n```console\n$ ava --match='foo'\n```\n\nMatch titles not containing `foo`:\n\n```console\n$ ava --match='!*foo*'\n```\n\nMatch titles starting with `foo` and ending with `bar`:\n\n```console\n$ ava --match='foo*bar'\n```\n\nMatch titles starting with `foo` or ending with `bar`:\n\n```console\n$ ava --match='foo*' --match='*bar'\n```\n\nNote that a match pattern takes precedence over the `.only` modifier. Only tests with an explicit title are matched. Tests without titles or whose title is derived from the implementation function will be skipped when `--match` is used.\n\nHere's what happens when you run AVA with a match pattern of `*oo*` and the following tests:\n\n```js\ntest('foo will run', t => {\n\tt.pass();\n});\n\ntest('moo will also run', t => {\n\tt.pass();\n});\n\ntest.only('boo will run but not exclusively', t => {\n\tt.pass();\n});\n\n// Won't run, no title\ntest(function (t) {\n\tt.fail();\n});\n\n// Won't run, no explicit title\ntest(function foo(t) {\n\tt.fail();\n});\n```\n\n### Skipping tests\n\nSometimes failing tests can be hard to fix. You can tell AVA to skip these tests using the `.skip` modifier. They'll still be shown in the output (as having been skipped) but are never run.\n\n```js\ntest.skip('will not be run', t => {\n\tt.fail();\n});\n```\n\nYou must specify the implementation function. You can use the `.skip` modifier with all tests and hooks, but not with `.todo()`. You can not apply further modifiers to `.skip`.\n\n### Test placeholders (\"todo\")\n\nYou can use the `.todo` modifier when you're planning to write a test. Like skipped tests these placeholders are shown in the output. They only require a title; you cannot specify the implementation function.\n\n```js\ntest.todo('will think about writing this later');\n```\n\nYou can signal that you need to write a serial test:\n\n```js\ntest.serial.todo('will think about writing this later');\n```\n\n### Failing tests\n\nYou can use the `.failing` modifier to document issues with your code that need to be fixed. Failing tests are run just like normal ones, but they are expected to fail, and will not break your build when they do. If a test marked as failing actually passes, it will be reported as an error and fail the build with a helpful message instructing you to remove the `.failing` modifier.\n\nThis allows you to merge `.failing` tests before a fix is implemented without breaking CI. This is a great way to recognize good bug report PR's with a commit credit, even if the reporter is unable to actually fix the problem.\n\n```js\n// See: github.com/user/repo/issues/1234\ntest.failing('demonstrate some bug', t => {\n\tt.fail(); // Test will count as passed\n});\n```\n\n### Before & after hooks\n\nAVA lets you register hooks that are run before and after your tests. This allows you to run setup and/or teardown code.\n\n`test.before()` registers a hook to be run before the first test in your test file. Similarly `test.after()` registers a hook to be run after the last test. Use `test.after.always()` to register a hook that will **always** run once your tests and other hooks complete. `.always()` hooks run regardless of whether there were earlier failures, so they are ideal for cleanup tasks. Note however that uncaught exceptions, unhandled rejections or timeouts will crash your tests, possibly preventing `.always()` hooks from running.\n\n`test.beforeEach()` registers a hook to be run before each test in your test file. Similarly `test.afterEach()` a hook to be run after each test. Use `test.afterEach.always()` to register an after hook that is called even if other test hooks, or the test itself, fail.\n\nIf a test is skipped with the `.skip` modifier, the respective `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks are not run. Likewise, if all tests in a test file are skipped `.before()`, `.after()` and `.after.always()` hooks for the file are not run.\n\nLike `test()` these methods take an optional title and an implementation function. The title is shown if your hook fails to execute. The implementation is called with an [execution object](#t). You can use assertions in your hooks. You can also pass a [macro function](#test-macros) and additional arguments.\n\n`.before()` hooks execute before `.beforeEach()` hooks. `.afterEach()` hooks execute before `.after()` hooks. Within their category the hooks execute in the order they were defined. By default hooks execute concurrently, but you can use `test.serial` to ensure only that single hook is run at a time. Unlike with tests, serial hooks are *not* run before other hooks:\n\n```js\ntest.before(t => {\n\t// This runs before all tests\n});\n\ntest.before(t => {\n\t// This runs concurrently with the above\n});\n\ntest.serial.before(t => {\n\t// This runs after the above\n});\n\ntest.serial.before(t => {\n\t// This too runs after the above, and before tests\n});\n\ntest.after('cleanup', t => {\n\t// This runs after all tests\n});\n\ntest.after.always('guaranteed cleanup', t => {\n\t// This will always run, regardless of earlier failures\n});\n\ntest.beforeEach(t => {\n\t// This runs before each test\n});\n\ntest.afterEach(t => {\n\t// This runs after each test\n});\n\ntest.afterEach.always(t => {\n\t// This runs after each test and other test hooks, even if they failed\n});\n\ntest('title', t => {\n\t// Regular test\n});\n```\n\nHooks can be synchronous or asynchronous, just like tests. To make a hook asynchronous return a promise or observable, use an async function, or enable callback mode via `test.before.cb()`, `test.beforeEach.cb()` etc.\n\n```js\ntest.before(async t => {\n\tawait promiseFn();\n});\n\ntest.after(t => {\n\treturn new Promise(/* ... */);\n});\n\ntest.beforeEach.cb(t => {\n\tsetTimeout(t.end);\n});\n\ntest.afterEach.cb(t => {\n\tsetTimeout(t.end);\n});\n```\n\nKeep in mind that the `.beforeEach()` and `.afterEach()` hooks run just before and after a test is run, and that by default tests run concurrently. This means each multiple `.beforeEach()` hooks may run concurrently. Using `test.serial.beforeEach()` does not change this. If you need to set up global state for each test (like spying on `console.log` [for example](https://github.com/avajs/ava/issues/560)), you'll need to make sure the tests themselves are [run serially](#running-tests-serially).\n\nRemember that AVA runs each test file in its own process. You may not have to clean up global state in a `.after()`-hook since that's only called right before the process exits.\n\n#### Test context\n\nHooks can share context with the test:\n\n```js\ntest.beforeEach(t => {\n\tt.context.data = generateUniqueData();\n});\n\ntest('context data is foo', t => {\n\tt.is(t.context.data + 'bar', 'foobar');\n});\n```\n\nContext created in `.before()` hooks is [cloned](https://www.npmjs.com/package/lodash.clone) before it is passed to `.beforeEach()` hooks and / or tests. The `.after()` and `.after.always()` hooks receive the original context value.\n\nFor `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks the context is *not* shared between different tests, allowing you to set up data such that it will not leak to other tests.\n\nBy default `t.context` is an object but you can reassign it:\n\n```js\ntest.before(t => {\n\tt.context = 'unicorn';\n});\n\ntest('context is unicorn', t => {\n\tt.is(t.context, 'unicorn');\n});\n```\n\n### Test macros\n\nAdditional arguments passed to the test declaration will be passed to the test implementation. This is useful for creating reusable test macros.\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\ntest('2 + 2 = 4', macro, '2 + 2', 4);\ntest('2 * 3 = 6', macro, '2 * 3', 6);\n```\n\nYou can build the test title programmatically by attaching a `title` function to the macro:\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nmacro.title = (providedTitle, input, expected) => `${providedTitle} ${input} = ${expected}`.trim();\n\ntest(macro, '2 + 2', 4);\ntest(macro, '2 * 3', 6);\ntest('providedTitle', macro, '3 * 3', 9);\n```\n\nThe `providedTitle` argument defaults to an empty string if the user does not supply a string title. This allows for easy concatenation without having to worry about `null` / `undefined`. It is worth remembering that the empty string is considered a falsy value, so you can still use `if(providedTitle) {...}`.\n\nYou can also pass arrays of macro functions:\n\n```js\nconst safeEval = require('safe-eval');\n\nfunction evalMacro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nfunction safeEvalMacro(t, input, expected) {\n\tt.is(safeEval(input), expected);\n}\n\ntest([evalMacro, safeEvalMacro], '2 + 2', 4);\ntest([evalMacro, safeEvalMacro], '2 * 3', 6);\n```\n\nWe encourage you to use macros instead of building your own test generators ([here is an example](https://github.com/avajs/ava-codemods/blob/47073b5b58aa6f3fb24f98757be5d3f56218d160/test/ok-to-truthy.js#L7-L9) of code that should be replaced with a macro). Macros are designed to perform static analysis of your code, which can lead to better performance, IDE integration, and linter rules.\n\n### Custom assertions\n\nYou can use any assertion library instead of or in addition to the built-in one, provided it throws exceptions when the assertion fails.\n\nThis won't give you as nice an experience as you'd get with the [built-in assertions](#assertions) though, and you won't be able to use the [assertion planning](#assertion-planning) ([see #25](https://github.com/avajs/ava/issues/25)).\n\nYou'll have to configure AVA to not fail tests if no assertions are executed, because AVA can't tell if custom assertions pass. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration).\n\n```js\nimport assert from 'assert';\n\ntest('custom assertion', t => {\n\tassert(true);\n});\n```\n\n### Latest JavaScript support\n\nAVA uses [Babel 7](https://babeljs.io) so you can use the latest JavaScript syntax in your tests. There is no extra setup required. You don't need to be using Babel in your own project for this to work either.\n\nWe aim support all [finished syntax proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md), as well as all syntax from ratified JavaScript versions (e.g. ES2017). See our [`@ava/stage-4`](https://github.com/avajs/babel-preset-stage-4) preset for the currently supported proposals.\n\nPlease note that we do not add or modify built-ins. For example, if you use [`Object.entries()`](https://github.com/tc39/proposal-object-values-entries) in your tests, they will crash in Node.js 6 which does not implement this method.\n\nYou can disable this syntax support, or otherwise customize AVA's Babel pipeline. See our [Babel recipe] for more details.\n\n### TypeScript support\n\nAVA includes typings for TypeScript. You have to set up transpilation yourself. When you set `module` to `commonjs` in your `tsconfig.json` file, TypeScript will automatically find the type definitions for AVA. You should set `target` to `es2015` to use promises and async functions.\n\nSee AVA's [TypeScript recipe](docs/recipes/typescript.md) for a more detailed explanation.\n\n### Transpiling imported modules\n\nAVA currently only transpiles the tests you ask it to run, as well as test helpers (files starting with `_` or in `helpers` directory) inside the test directory. *It will not transpile modules you `import` from outside of the test.* This may be unexpected but there are workarounds.\n\nIf you use Babel you can use its [require hook](https://babeljs.io/docs/usage/require/) to transpile imported modules on-the-fly. To add it, [configure it in your `package.json`](#configuration).\n\nYou can also transpile your modules in a separate process and refer to the transpiled files rather than the sources from your tests. Example [here](docs/recipes/precompiling-with-webpack.md).\n\n### Promise support\n\nIf you return a promise in the test you don't need to explicitly end the test as it will end when the promise resolves.\n\n```js\ntest('resolves with unicorn', t => {\n\treturn somePromise().then(result => {\n\t\tt.is(result, 'unicorn');\n\t});\n});\n```\n\n### Generator function support\n\nAVA comes with built-in support for [generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*).\n\n```js\ntest(function * (t) {\n\tconst value = yield generatorFn();\n\tt.true(value);\n});\n```\n\n### Async function support\n\nAVA comes with built-in support for [async functions](https://tc39.github.io/ecmascript-asyncawait/) *(async/await)*.\n\n```js\ntest(async function (t) {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n\n// Async arrow function\ntest('promises the truth', async t => {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n```\n\n### Observable support\n\nAVA comes with built-in support for [observables](https://github.com/zenparsing/es-observable). If you return an observable from a test, AVA will automatically consume it to completion before ending the test.\n\n*You do not need to use \"callback mode\" or call `t.end()`.*\n\n```js\ntest('handles observables', t => {\n\tt.plan(3);\n\treturn Observable.of(1, 2, 3, 4, 5, 6)\n\t\t.filter(n => {\n\t\t\t// Only even numbers\n\t\t\treturn n % 2 === 0;\n\t\t})\n\t\t.map(() => t.pass());\n});\n```\n\n### Callback support\n\nAVA supports using `t.end` as the final callback when using node-style error-first callback APIs. AVA will consider any truthy value passed as the first argument to `t.end` to be an error. Note that `t.end` requires \"callback mode\", which can be enabled by using the `test.cb` chain.\n\n```js\ntest.cb('data.txt can be read', t => {\n\t// `t.end` automatically checks for error as first argument\n\tfs.readFile('data.txt', t.end);\n});\n```\n\n### Global timeout\n\nA global timeout can be set via the `--timeout` option. Timeout in AVA behaves differently than in other test frameworks. AVA resets a timer after each test, forcing tests to quit if no new test results were received within the specified timeout. This can be used to handle stalled tests.\n\nYou can set timeouts in a human-readable way:\n\n```console\n$ ava --timeout=10s # 10 seconds\n$ ava --timeout=2m # 2 minutes\n$ ava --timeout=100 # 100 milliseconds\n```\n\n## API\n\n### `test([title], implementation)`\n### `test.serial([title], implementation)`\n### `test.cb([title], implementation)`\n### `test.only([title], implementation)`\n### `test.skip([title], implementation)`\n### `test.todo(title)`\n### `test.failing([title], implementation)`\n### `test.before([title], implementation)`\n### `test.after([title], implementation)`\n### `test.beforeEach([title], implementation)`\n### `test.afterEach([title], implementation)`\n\n#### `title`\n\nType: `string`\n\nTest title.\n\n#### `implementation(t)`\n\nType: `function`\n\nShould contain the actual test.\n\n##### `t`\n\nType: `object`\n\nThe execution object of a particular test. Each test implementation receives a different object. Contains the [assertions](#assertions) as well as `.plan(count)` and `.end()` methods. `t.context` can contain shared state from hooks. `t.title` returns the test's title.\n\n###### `t.plan(count)`\n\nPlan how many assertion there are in the test. The test will fail if the actual assertion count doesn't match the number of planned assertions. See [assertion planning](#assertion-planning).\n\n###### `t.end()`\n\nEnd the test. Only works with `test.cb()`.\n\n###### `t.log(...values)`\n\nLog values contextually alongside the test result instead of immediately printing them to `stdout`. Behaves somewhat like `console.log`, but without support for placeholder tokens.\n\n## Assertions\n\nAssertions are mixed into the [execution object](#t) provided to each test implementation:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy('unicorn'); // Assertion\n});\n```\n\nAssertions are bound to their test so you can assign them to a variable or pass them around:\n\n```js\ntest('unicorns are truthy', t => {\n\tconst truthy = t.thruthy;\n\ttruthy('unicorn');\n});\n```\n\nAssertions can be skipped by adding `.skip()`:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy.skip('unicorn');\n});\n```\n\nIf multiple assertion failures are encountered within a single test, AVA will only display the *first* one.\n\n### `.pass([message])`\n\nPassing assertion.\n\n### `.fail([message])`\n\nFailing assertion.\n\n### `.truthy(value, [message])`\n\nAssert that `value` is truthy.\n\n### `.falsy(value, [message])`\n\nAssert that `value` is falsy.\n\n### `.true(value, [message])`\n\nAssert that `value` is `true`.\n\n### `.false(value, [message])`\n\nAssert that `value` is `false`.\n\n### `.is(value, expected, [message])`\n\nAssert that `value` is the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.not(value, expected, [message])`\n\nAssert that `value` is not the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.deepEqual(value, expected, [message])`\n\nAssert that `value` is deeply equal to `expected`. See [Concordance](https://github.com/concordancejs/concordance) for details. Works with [React elements and `react-test-renderer`](https://github.com/concordancejs/react).\n\n### `.notDeepEqual(value, expected, [message])`\n\nAssert that `value` is not deeply equal to `expected`. The inverse of `.deepEqual()`.\n\n### `.throws(thrower, [expected, [message]])`\n\nAssert that an error is thrown. `thrower` can be a function which should throw, or return a promise that should reject, or an observable that should error. Alternatively a promise or observable can be passed directly.\n\nThe thrown value *must* be an error. It is returned so you can run more assertions against it.\n\n`expected` can be a constructor, in which case the thrown error must be an instance of the constructor. It can be a string, which is compared against the thrown error's message, or a regular expression which is matched against this message. You can also specify a matcher object with one or more of the following properties:\n\n* `instanceOf`: a constructor, the thrown error must be an instance of\n* `is`: the thrown error must be strictly equal to `expected.is`\n* `message`: either a string, which is compared against the thrown error's message, or a regular expression, which is matched against this message\n* `name`: the expected `.name` value of the thrown error\n\n`expected` does not need to be specified. If you don't need it but do want to set an assertion message you have to specify `null`.\n\nExample:\n\n```js\nconst fn = () => {\n\tthrow new TypeError('🦄');\n};\n\ntest('throws', t => {\n\tconst error = t.throws(() => {\n\t\tfn();\n\t}, TypeError);\n\n\tt.is(error.message, '🦄');\n});\n```\n\n```js\nconst promise = Promise.reject(new TypeError('🦄'));\n\ntest('rejects', async t => {\n\tconst error = await t.throws(promise);\n\tt.is(error.message, '🦄');\n});\n```\n\nWhen testing an observable or promise you must wait for the assertion to complete:\n\n```js\ntest('rejects', async t => {\n\tawait t.throws(promise);\n});\n```\n\nWhen testing an asynchronous function you must also wait for the assertion to complete:\n\n```js\ntest('throws', async t => {\n\tawait t.throws(async () => {\n\t\tthrow new TypeError('🦄');\n\t}, {instanceOf: TypeError, message: '🦄'});\n});\n```\n\n### `.notThrows(nonThrower, [message])`\n\nAssert that no error is thrown. `thrower` can be a function which shouldn't throw, or return a promise that should resolve, or an observable that should complete. Alternatively a promise or an observable can be passed directly.\n\nLike the `.throws()` assertion, when testing a promise or an observable you must wait for the assertion to complete:\n\n```js\ntest('resolves', async t => {\n\tawait t.notThrows(promise);\n});\n```\n\n### `.regex(contents, regex, [message])`\n\nAssert that `contents` matches `regex`.\n\n### `.notRegex(contents, regex, [message])`\n\nAssert that `contents` does not match `regex`.\n\n### `.ifError(error, [message])`\n\nAssert that `error` is falsy.\n\n### `.snapshot(expected, [message])`\n### `.snapshot(expected, [options], [message])`\n\nCompares the `expected` value with a previously recorded snapshot. Snapshots are stored for each test, so ensure you give your tests unique titles. Alternatively pass an `options` object to select a specific snapshot, for instance `{id: 'my snapshot'}`.\n\nSnapshot assertions cannot be skipped when snapshots are being updated.\n\n## Snapshot testing\n\nAVA supports snapshot testing, [as introduced by Jest](https://facebook.github.io/jest/docs/snapshot-testing.html), through its [Assertions](#assertions) interface. You can snapshot any value as well as React elements:\n\n```js\n// Your component\nconst HelloWorld = () => <h1>Hello World...!</h1>;\n\nexport default HelloWorld;\n```\n\n```js\n// Your test\nimport test from 'ava';\nimport render from 'react-test-renderer';\nimport HelloWorld from '.';\n\ntest('HelloWorld component', t => {\n\tconst tree = render.create(<HelloWorld/>).toJSON();\n\tt.snapshot(tree);\n});\n```\n\n[Try it out in this example project.](https://github.com/avajs/ava-snapshot-example)\n\nSnapshots are stored alongside your test files. If your tests are in a `test` or `tests` folder the snapshots will be stored in a `snapshots` folder. If your tests are in a `__tests__` folder then they they'll be stored in a `__snapshots__` folder.\n\nSay you have `~/project/test/main.js` which contains snapshot assertions. AVA will create two files:\n\n* `~/project/test/snapshots/main.js.snap`\n* `~/project/test/snapshots/main.js.md`\n\nThe first file contains the actual snapshot and is required for future comparisons. The second file contains your *snapshot report*. It's regenerated when you update your snapshots. If you commit it to source control you can diff it to see the changes to your snapshot.\n\nAVA will show why your snapshot assertion failed:\n\n<img src=\"media/snapshot-testing.png\" width=\"1048\">\n\nYou can then check your code. If the change was intentional you can use the `--update-snapshots` (or `-u`) flag to update the snapshots:\n\n```console\n$ ava --update-snapshots\n```\n\nYou can specify a fixed location for storing the snapshot files in AVA's [`package.json` configuration](#configuration):\n\n```json\n{\n\t\"ava\": {\n\t\t\"snapshotDir\": \"custom-directory\"\n\t}\n}\n```\n\nThe snapshot files will be saved in a directory structure that mirrors that of your test files.\n\nIf you are running AVA against precompiled test files, AVA will try and use source maps to determine the location of the original files. Snapshots will be stored next to these files, following the same rules as if AVA had executed the original files directly. This is great if you're writing your tests in TypeScript (see our [TypeScript recipe](docs/recipes/typescript.md)).\n\n### Skipping assertions\n\nAny assertion can be skipped using the `skip` modifier. Skipped assertions are still counted, so there is no need to change your planned assertion count.\n\n```js\ntest('skip assertion', t => {\n\tt.plan(2);\n\tt.is.skip(foo(), 5); // No need to change your plan count when skipping\n\tt.is(1, 1);\n});\n```\n\n### Enhanced assertion messages\n\nAVA comes with [`power-assert`](https://github.com/power-assert-js/power-assert) built-in, giving you more descriptive assertion messages. It reads your test and tries to infer more information from the code.\n\nLet's take this example, using Node's standard [`assert` library](https://nodejs.org/api/assert.html):\n\n```js\nconst a = /foo/;\nconst b = 'bar';\nconst c = 'baz';\nrequire('assert').ok(a.test(b) || b === c);\n```\n\nIf you paste that into a Node REPL it'll return:\n\n```\nAssertionError: false == true\n```\n\nIn AVA however, this test:\n\n```js\ntest('enhanced assertions', t => {\n\tconst a = /foo/;\n\tconst b = 'bar';\n\tconst c = 'baz';\n\tt.true(a.test(b) || b === c);\n});\n```\n\nWill output:\n\n```\nt.true(a.test(b) || b === c)\n       |      |     |     |\n       |      \"bar\" \"bar\" \"baz\"\n       false\n```\n\n## Process isolation\n\nEach test file is run in a separate Node.js process. This allows you to change the global state or overriding a built-in in one test file, without affecting another. It's also great for performance on modern multi-core processors, allowing multiple test files to execute in parallel.\n\nAVA will set `process.env.NODE_ENV` to `test`, unless the `NODE_ENV` environment variable has been set. This is useful if the code you're testing has test defaults (for example when picking what database to connect to, or environment-specific Babel options). It may cause your code or its dependencies to behave differently though. Note that `'NODE_ENV' in process.env` will always be `true`.\n\n## Tips\n\n### Temp files\n\nRunning tests concurrently comes with some challenges, doing file IO is one.\n\nUsually, serial tests create temp directories in the current test directory and clean them up at the end. This won't work when you run tests concurrently as tests will conflict with each other. The correct way to do it is to use a new temp directory for each test. The [`tempfile`](https://github.com/sindresorhus/tempfile) and [`temp-write`](https://github.com/sindresorhus/temp-write) modules can be helpful.\n\n### Code coverage\n\nYou can't use [`istanbul`](https://github.com/gotwarlost/istanbul) for code coverage as AVA [spawns the test files](#process-isolation). You can use [`nyc`](https://github.com/bcoe/nyc) instead, which is basically `istanbul` with support for subprocesses.\n\nAs of version `5.0.0` it uses source maps to report coverage for your actual code, regardless of transpilation. Make sure that the code you're testing includes an inline source map or references a source map file. If you use `babel-register` you can set the `sourceMaps` option in your Babel config to `inline`.\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [`/ˈeɪvə/` ay-və](media/pronunciation.m4a?raw=true).\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Flow](docs/recipes/flow.md)\n- [Configuring Babel][Babel recipe]\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [JSPM and SystemJS](docs/recipes/jspm-systemjs.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Precompiling source files with webpack](docs/recipes/precompiling-with-webpack.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n\n## Support\n\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/ava)\n- [Gitter chat](https://gitter.im/avajs/ava)\n- [Twitter](https://twitter.com/ava__js)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) - Lint rules for AVA tests\n- [sublime-ava](https://github.com/avajs/sublime-ava) - Snippets for AVA tests\n- [atom-ava](https://github.com/avajs/atom-ava) - Snippets for AVA tests\n- [vscode-ava](https://github.com/samverschueren/vscode-ava) - Snippets for AVA tests\n- [gulp-ava](https://github.com/avajs/gulp-ava) - Run tests with gulp\n- [grunt-ava](https://github.com/avajs/grunt-ava) - Run tests with grunt\n- [More…](https://github.com/avajs/awesome-ava#packages)\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [AVA Casts](http://avacasts.com)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus) | [![Vadim Demedes](https://github.com/vadimdemedes.png?size=100)](https://github.com/vadimdemedes)\n---|---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](http://sindresorhus.com) | [Vadim Demedes](https://github.com/vadimdemedes)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://ava.li\">\n\t\t<img src=\"https://cdn.rawgit.com/avajs/ava/fe1cea1ca3d2c8518c0cc39ec8be592beab90558/media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n\n[Babel recipe]: docs/recipes/babel.md\n",
      "readmeFilename": "readme.md",
      "gitHead": "1d9f176b7153282a4cbf5f1d676b67b95ffb2911",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.0.0-beta.3",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-A1Tp+vHoLHlry+YWkcVGI8u6be+GuvP4ROT/SulRUMpwev1rrQb6zE32nRrVQt0C4q405q4zyTY+ghzUFrD+0A==",
        "shasum": "79b1ac65e6342453fd5e26bda552ee97b3c842d5",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.0.0-beta.3.tgz",
        "fileCount": 43,
        "unpackedSize": 227208,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDbYn6vwzqb1oQpjkoScRJ0XBWly7vCqgC9i888/L3HcQIgUW4xpbxWJQurcTY9MLs+2amZH7nn7q9+0iTz37vSPBA="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.0.0-beta.3_1518712915329_0.6405228334281123"
      },
      "_hasShrinkwrap": false
    },
    "1.0.0-beta.4": {
      "name": "ava",
      "version": "1.0.0-beta.4",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=6.12.3 <7 || >=8.9.4"
      },
      "scripts": {
        "lint": "xo && (cd test/fixture && xo '**' '!{source-map-initial,syntax-error}.js' '!snapshots/test-sourcemaps/build/**')",
        "test": "npm run lint && flow check test/flow-types && tsc --noEmit -p test/ts-types && nyc tap --no-cov --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "visual": "node test/visual/run-visual-tests.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "index.d.ts"
      ],
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "2.0.0-beta.5",
        "@ava/babel-preset-transform-test-files": "4.0.0-beta.4",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "7.0.0-beta.44",
        "@babel/generator": "7.0.0-beta.44",
        "@babel/plugin-syntax-async-generators": "7.0.0-beta.44",
        "@babel/plugin-syntax-object-rest-spread": "7.0.0-beta.44",
        "@concordance/react": "^1.0.0",
        "@ladjs/time-require": "^0.1.4",
        "ansi-escapes": "^3.1.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^1.0.2",
        "arrify": "^1.0.0",
        "auto-bind": "^1.2.0",
        "bluebird": "^3.5.1",
        "caching-transform": "^1.0.0",
        "chalk": "^2.3.2",
        "chokidar": "^2.0.3",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-spinners": "^1.1.0",
        "cli-truncate": "^1.1.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^3.0.0",
        "convert-source-map": "^1.5.1",
        "currently-unhandled": "^0.4.1",
        "debug": "^3.1.0",
        "dot-prop": "^4.2.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "figures": "^2.0.0",
        "get-port": "^3.2.0",
        "globby": "^7.1.1",
        "hullabaloo-config-manager": "2.0.0-beta.4",
        "ignore-by-default": "^1.0.0",
        "import-local": "^1.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^1.1.0",
        "is-error": "^2.2.1",
        "is-generator-fn": "^1.0.0",
        "is-obj": "^1.0.0",
        "is-observable": "^1.1.0",
        "is-promise": "^2.1.0",
        "last-line-stream": "^1.0.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.2.0",
        "matcher": "^1.1.0",
        "md5-hex": "^2.0.0",
        "meow": "^4.0.0",
        "ms": "^2.1.1",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.1.0",
        "plur": "^2.0.0",
        "pretty-ms": "^3.1.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "safe-buffer": "^5.1.1",
        "slash": "^2.0.0",
        "source-map-support": "^0.5.4",
        "stack-utils": "^1.0.1",
        "strip-ansi": "^4.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^5.3.0",
        "trim-off-newlines": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.4.0"
      },
      "devDependencies": {
        "cli-table2": "^0.2.0",
        "codecov": "^3.0.0",
        "del": "^3.0.0",
        "delay": "^2.0.0",
        "esm": "^3.0.15",
        "execa": "^0.10.0",
        "flow-bin": "^0.69.0",
        "get-stream": "^3.0.0",
        "git-branch": "^1.0.0",
        "has-ansi": "^3.0.0",
        "inquirer": "^5.1.0",
        "lolex": "^2.3.2",
        "nyc": "^11.6.0",
        "proxyquire": "^2.0.1",
        "react": "^16.3.0",
        "react-test-renderer": "^16.3.0",
        "signal-exit": "^3.0.0",
        "sinon": "^4.5.0",
        "source-map-fixtures": "^2.1.0",
        "tap": "^11.1.3",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "typescript": "^2.8.1",
        "xo": "^0.20.3",
        "zen-observable": "^0.8.8"
      },
      "typings": "index.d.ts",
      "xo": {
        "ignores": [
          "media/**"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off",
          "prefer-destructuring": "off",
          "prefer-rest-params": "off",
          "unicorn/prefer-spread": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "readme": "# [![AVA](media/header.png)](https://ava.li)\n\n> Futuristic test runner\n\n[![Build Status: Linux](https://travis-ci.org/avajs/ava.svg?branch=master)](https://travis-ci.org/avajs/ava) [![Build status: Windows](https://ci.appveyor.com/api/projects/status/e7v91mu2m5x48ehx/branch/master?svg=true)](https://ci.appveyor.com/project/ava/ava/branch/master) [![Coverage Status](https://coveralls.io/repos/github/avajs/ava/badge.svg?branch=master)](https://coveralls.io/github/avajs/ava?branch=master) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo) [![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/ava)\n [![Mentioned in Awesome Node.js](https://awesome.re/mentioned-badge.svg)](https://github.com/sindresorhus/awesome-nodejs)\n\nEven though JavaScript is single-threaded, IO in Node.js can happen in parallel due to its async nature. AVA takes advantage of this and runs your tests concurrently, which is especially beneficial for IO heavy tests. In addition, test files are run in parallel as separate processes, giving you even better performance and an isolated environment for each test file. [Switching](https://github.com/sindresorhus/pageres/commit/663be15acb3dd2eb0f71b1956ef28c2cd3fdeed0) from Mocha to AVA in Pageres brought the test time down from 31 to 11 seconds. Having tests run concurrently forces you to write atomic tests, meaning tests don't depend on global state or the state of other tests, which is a great thing!\n\n![](media/mini-reporter.gif)\n\n*Read our [contributing guide](contributing.md) if you're looking to contribute (issues/PRs/etc).*\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\n**This documentation covers the 1.0 beta releases, which use Babel 7. The last release that uses Babel 6 is [`v0.25.0`](https://github.com/avajs/ava/tree/v0.25.0).**\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Contents\n\n- [Usage](#usage)\n- [CLI Usage](#cli)\n- [Debugging](#debugging)\n- [Reporters](#reporters)\n- [Configuration](#configuration)\n- [Documentation](#documentation)\n- [API](#api)\n- [Assertions](#assertions)\n- [Snapshot testing](#snapshot-testing)\n- [Tips](#tips)\n- [FAQ](#faq)\n- [Recipes](#recipes)\n- [Support](#support)\n- [Related](#related)\n- [Links](#links)\n- [Team](#team)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript & Flow type definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](#process-isolation)\n- [Write your tests using the latest JavaScript syntax](#latest-javascript-support)\n- [Promise support](#promise-support)\n- [Generator function support](#generator-function-support)\n- [Async function support](#async-function-support)\n- [Observable support](#observable-support)\n- [Enhanced assertion messages](#enhanced-assertion-messages)\n- [TAP reporter](#tap-reporter)\n- [Automatic migration from other test runners](https://github.com/avajs/ava-codemods#migrating-to-ava)\n\n\n## Test syntax\n\n```js\nimport test from 'ava';\n\ntest('arrays are equal', t => {\n\tt.deepEqual([1, 2], [1, 2]);\n});\n```\n\n## Usage\n\n### Add AVA to your project\n\nTo install and set up AVA, run:\n\n```console\n$ npx create-ava --next\n```\n\nYour `package.json` will then look like this:\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"1.0.0-beta.4\"\n\t}\n}\n```\n\nInitialization will work with npm and Yarn, but running `npx` requires [`npm@5.2.0`](https://github.com/npm/npm/releases/tag/v5.2.0) or greater to be installed. Otherwise, you'll have to manually install `ava` and configure the `test` script in your `package.json` as per above:\n\n```console\n$ npm install --save-dev --save-exact ava@next\n```\n\nOr if you prefer using Yarn:\n\n```console\n$ yarn add ava@next --dev --exact\n```\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nimport test from 'ava';\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\n\tt.is(await bar, 'bar');\n});\n```\n\n### Run it\n\n```console\n$ npm test\n```\n\n### Watch it\n\n```console\n$ npm test -- --watch\n```\n\nAVA comes with an intelligent watch mode. [Learn more in its recipe](docs/recipes/watch-mode.md).\n\n### Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## CLI\n\n```console\n$ ava --help\n\n  Usage\n    ava [<file|directory|glob> ...]\n\n  Options\n    --watch, -w             Re-run tests when tests and source files change\n    --match, -m             Only run tests with matching title (Can be repeated)\n    --update-snapshots, -u  Update snapshots\n    --fail-fast             Stop after first test failure\n    --timeout, -T           Set global timeout\n    --serial, -s            Run tests serially\n    --concurrency, -c       Max number of test files running at the same time (Default: CPU cores)\n    --verbose, -v           Enable verbose output\n    --tap, -t               Generate TAP output\n    --no-cache              Disable the compiler cache\n    --color                 Force color output\n    --no-color              Disable color output\n\n  Examples\n    ava\n    ava test.js test2.js\n    ava test-*.js\n    ava test\n\n  Default patterns when no arguments:\n  test.js test-*.js test/**/*.js **/__tests__/**/*.js **/*.test.js\n```\n\n*Note that the CLI will use your local install of AVA when available, even when run globally.*\n\nDirectories are recursed, with all `*.js` files being treated as test files. Directories named `fixtures`, `helpers` and `node_modules` are *always* ignored. So are files starting with `_` which allows you to place helpers in the same directory as your test files.\n\nWhen using `npm test`, you can pass positional arguments directly `npm test test2.js`, but flags needs to be passed like `npm test -- --verbose`.\n\n\n## Debugging\n\nAVA runs tests in child processes, so to debug tests, you need to do this workaround:\n\n```console\n$ node --inspect node_modules/ava/profile.js some/test/file.js\n```\n\n### Debugger-specific tips\n\n- [Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Visual Studio Code](docs/recipes/debugging-with-vscode.md)\n\n\n## Reporters\n\n### Mini-reporter\n\nThe mini-reporter is the default reporter.\n\n<img src=\"media/mini-reporter.gif\" width=\"460\">\n\n### Verbose reporter\n\nUse the `--verbose` flag to enable the verbose reporter. This is always used in CI environments unless the [TAP reporter](#tap-reporter) is enabled.\n\n<img src=\"media/verbose-reporter.png\" width=\"294\">\n\n### TAP reporter\n\nAVA supports the TAP format and thus is compatible with [any TAP reporter](https://github.com/sindresorhus/awesome-tap#reporters). Use the `--tap` flag to enable TAP output.\n\n```console\n$ ava --tap | tap-nyan\n```\n\n<img src=\"media/tap-reporter.png\" width=\"420\">\n\nPlease note that the TAP reporter is unavailable when using [watch mode](#watch-it).\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n\n## Configuration\n\nAll of the CLI options can be configured in the `ava` section of your `package.json`. This allows you to modify the default behavior of the `ava` command, so you don't have to repeatedly type the same options on the command prompt.\n\nTo ignore a file or directory, prefix the pattern with an `!` (exclamation mark).\n\n```json\n{\n\t\"ava\": {\n\t\t\"files\": [\n\t\t\t\"my-test-directory/**/*.js\",\n\t\t\t\"!my-test-directory/exclude-this-directory/**/*.js\",\n\t\t\t\"!**/exclude-this-file.js\"\n\t\t],\n\t\t\"source\": [\n\t\t\t\"**/*.{js,jsx}\",\n\t\t\t\"!dist/**/*\"\n\t\t],\n\t\t\"match\": [\n\t\t\t\"*oo\",\n\t\t\t\"!foo\"\n\t\t],\n\t\t\"concurrency\": 5,\n\t\t\"failFast\": true,\n\t\t\"failWithoutAssertions\": false,\n\t\t\"tap\": true,\n\t\t\"compileEnhancements\": false,\n\t\t\"require\": [\n\t\t\t\"@babel/register\"\n\t\t],\n\t\t\"babel\": {\n\t\t\t\"testOptions\": {\n\t\t\t\t\"babelrc\": false\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nArguments passed to the CLI will always take precedence over the configuration in `package.json`.\n\n### Options\n\n- `files`: file & directory paths and glob patterns that select which files AVA will run tests from. Only files with a `.js` extension are used. Files with an underscore prefix are ignored. All `.js` files in selected directories are run\n- `source`: files that, when changed, cause tests to be re-run in watch mode. See the [watch mode recipe for details](https://github.com/avajs/ava/blob/master/docs/recipes/watch-mode.md#source-files-and-test-files)\n- `match`: not typically useful in the `package.json` configuration, but equivalent to [specifying `--match` on the CLI](#running-tests-with-matching-titles)\n- `failFast`: stop running further tests once a test fails\n- `failWithoutAssertions`: if `false`, does not fail a test if it doesn't run [assertions](#assertions)\n- `tap`: if `true`, enables the [TAP reporter](#tap-reporter)\n- `snapshotDir`: specifies a fixed location for storing snapshot files. Use this if your snapshots are ending up in the wrong location\n- `compileEnhancements`: if `false`, disables [power-assert](https://github.com/power-assert-js/power-assert) — which otherwise helps provide more descriptive error messages — and detection of improper use of the `t.throws()` assertion\n- `require`: extra modules to require before tests are run. Modules are required in the [worker processes](#process-isolation)\n- `babel`: test file specific Babel options. See our [Babel recipe] for more details\n\nNote that providing files on the CLI overrides the `files` option. If you've configured a glob pattern, for instance `test/**/*.test.js`, you may want to repeat it when using the CLI: `ava 'test/integration/*.test.js'`.\n\n## Documentation\n\nTests are run concurrently. You can specify synchronous and asynchronous tests. Tests are considered synchronous unless you return a promise or [observable](https://github.com/zenparsing/zen-observable).\n\nWe *highly* recommend the use of [async functions](#async-function-support). They make asynchronous code concise and readable, and they implicitly return a promise so you don't have to.\n\nIf you're unable to use promises or observables, you may enable \"callback mode\" by defining your test with `test.cb([title], fn)`. Tests declared this way **must** be manually ended with `t.end()`. This mode is mainly intended for testing callback-style APIs. However, we would strongly recommend [promisifying](https://github.com/sindresorhus/pify) callback-style APIs instead of using \"callback mode\", as this results in more correct and readable tests.\n\nYou must define all tests synchronously. They can't be defined inside `setTimeout`, `setImmediate`, etc.\n\nAVA tries to run test files with their current working directory set to the directory that contains your `package.json` file.\n\n### Creating tests\n\nTo create a test you call the `test` function you imported from AVA. Provide the required title and implementation function. Titles must be unique within each test file. The function will be called when your test is run. It's passed an [execution object](#t) as its first argument.\n\n**Note:** In order for the [enhanced assertion messages](#enhanced-assertion-messages) to behave correctly, the first argument **must** be named `t`.\n\n```js\nimport test from 'ava';\n\ntest('my passing test', t => {\n\tt.pass();\n});\n```\n\n### Assertion planning\n\nAssertion plans ensure tests only pass when a specific number of assertions have been executed. They'll help you catch cases where tests exit too early. They'll also cause tests to fail if too many assertions are executed, which can be useful if you have assertions inside callbacks or loops.\n\nIf you do not specify an assertion plan, your test will still fail if no assertions are executed. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration) to disable this behavior.\n\nNote that, unlike [`tap`](https://www.npmjs.com/package/tap) and [`tape`](https://www.npmjs.com/package/tape), AVA does *not* automatically end a test when the planned assertion count is reached.\n\nThese examples will result in a passed test:\n\n```js\ntest('resolves with 3', t => {\n\tt.plan(1);\n\n\treturn Promise.resolve(3).then(n => {\n\t\tt.is(n, 3);\n\t});\n});\n\ntest.cb('invokes callback', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t\tt.end();\n\t});\n});\n```\n\nThese won't:\n\n```js\ntest('loops twice', t => {\n\tt.plan(2);\n\n\tfor (let i = 0; i < 3; i++) {\n\t\tt.true(i < 3);\n\t}\n}); // Fails, 3 assertions are executed which is too many\n\ntest('invokes callback synchronously', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t});\n}); // Fails, the test ends synchronously before the assertion is executed\n```\n\n### Running tests serially\n\nTests are run concurrently by default, however, sometimes you have to write tests that cannot run concurrently. In these rare cases you can use the `.serial` modifier. It will force those tests to run serially *before* the concurrent ones.\n\n```js\ntest.serial('passes serially', t => {\n\tt.pass();\n});\n```\n\nNote that this only applies to tests within a particular test file. AVA will still run multiple tests files at the same time unless you pass the [`--serial` CLI flag](#cli).\n\nYou can use the `.serial` modifier with all tests, hooks and even `.todo()`, but it's only available on the `test` function.\n\n### Running specific tests\n\nDuring development it can be helpful to only run a few specific tests. This can be accomplished using the `.only` modifier:\n\n```js\ntest('will not be run', t => {\n\tt.fail();\n});\n\ntest.only('will be run', t => {\n\tt.pass();\n});\n```\n\nYou can use the `.only` modifier with all tests. It cannot be used with hooks or `.todo()`.\n\n*Note:* The `.only` modifier applies to the test file it's defined in, so if you run multiple test files, tests in other files will still run. If you want to only run the `test.only` test, provide just that test file to AVA.\n\n### Running tests with matching titles\n\nThe `--match` flag allows you to run just the tests that have a matching title. This is achieved with simple wildcard patterns. Patterns are case insensitive. See [`matcher`](https://github.com/sindresorhus/matcher) for more details.\n\nMatch titles ending with `foo`:\n\n```console\n$ ava --match='*foo'\n```\n\nMatch titles starting with `foo`:\n\n```console\n$ ava --match='foo*'\n```\n\nMatch titles containing `foo`:\n\n```console\n$ ava --match='*foo*'\n```\n\nMatch titles that are *exactly* `foo` (albeit case insensitively):\n\n```console\n$ ava --match='foo'\n```\n\nMatch titles not containing `foo`:\n\n```console\n$ ava --match='!*foo*'\n```\n\nMatch titles starting with `foo` and ending with `bar`:\n\n```console\n$ ava --match='foo*bar'\n```\n\nMatch titles starting with `foo` or ending with `bar`:\n\n```console\n$ ava --match='foo*' --match='*bar'\n```\n\nNote that a match pattern takes precedence over the `.only` modifier. Only tests with an explicit title are matched. Tests without titles or whose title is derived from the implementation function will be skipped when `--match` is used.\n\nHere's what happens when you run AVA with a match pattern of `*oo*` and the following tests:\n\n```js\ntest('foo will run', t => {\n\tt.pass();\n});\n\ntest('moo will also run', t => {\n\tt.pass();\n});\n\ntest.only('boo will run but not exclusively', t => {\n\tt.pass();\n});\n\n// Won't run, no title\ntest(function (t) {\n\tt.fail();\n});\n\n// Won't run, no explicit title\ntest(function foo(t) {\n\tt.fail();\n});\n```\n\n### Skipping tests\n\nSometimes failing tests can be hard to fix. You can tell AVA to skip these tests using the `.skip` modifier. They'll still be shown in the output (as having been skipped) but are never run.\n\n```js\ntest.skip('will not be run', t => {\n\tt.fail();\n});\n```\n\nYou must specify the implementation function. You can use the `.skip` modifier with all tests and hooks, but not with `.todo()`. You can not apply further modifiers to `.skip`.\n\n### Test placeholders (\"todo\")\n\nYou can use the `.todo` modifier when you're planning to write a test. Like skipped tests these placeholders are shown in the output. They only require a title; you cannot specify the implementation function.\n\n```js\ntest.todo('will think about writing this later');\n```\n\nYou can signal that you need to write a serial test:\n\n```js\ntest.serial.todo('will think about writing this later');\n```\n\n### Failing tests\n\nYou can use the `.failing` modifier to document issues with your code that need to be fixed. Failing tests are run just like normal ones, but they are expected to fail, and will not break your build when they do. If a test marked as failing actually passes, it will be reported as an error and fail the build with a helpful message instructing you to remove the `.failing` modifier.\n\nThis allows you to merge `.failing` tests before a fix is implemented without breaking CI. This is a great way to recognize good bug report PR's with a commit credit, even if the reporter is unable to actually fix the problem.\n\n```js\n// See: github.com/user/repo/issues/1234\ntest.failing('demonstrate some bug', t => {\n\tt.fail(); // Test will count as passed\n});\n```\n\n### Before & after hooks\n\nAVA lets you register hooks that are run before and after your tests. This allows you to run setup and/or teardown code.\n\n`test.before()` registers a hook to be run before the first test in your test file. Similarly `test.after()` registers a hook to be run after the last test. Use `test.after.always()` to register a hook that will **always** run once your tests and other hooks complete. `.always()` hooks run regardless of whether there were earlier failures, so they are ideal for cleanup tasks. Note however that uncaught exceptions, unhandled rejections or timeouts will crash your tests, possibly preventing `.always()` hooks from running.\n\n`test.beforeEach()` registers a hook to be run before each test in your test file. Similarly `test.afterEach()` a hook to be run after each test. Use `test.afterEach.always()` to register an after hook that is called even if other test hooks, or the test itself, fail.\n\nIf a test is skipped with the `.skip` modifier, the respective `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks are not run. Likewise, if all tests in a test file are skipped `.before()`, `.after()` and `.after.always()` hooks for the file are not run.\n\nLike `test()` these methods take an optional title and an implementation function. The title is shown if your hook fails to execute. The implementation is called with an [execution object](#t). You can use assertions in your hooks. You can also pass a [macro function](#test-macros) and additional arguments.\n\n`.before()` hooks execute before `.beforeEach()` hooks. `.afterEach()` hooks execute before `.after()` hooks. Within their category the hooks execute in the order they were defined. By default hooks execute concurrently, but you can use `test.serial` to ensure only that single hook is run at a time. Unlike with tests, serial hooks are *not* run before other hooks:\n\n```js\ntest.before(t => {\n\t// This runs before all tests\n});\n\ntest.before(t => {\n\t// This runs concurrently with the above\n});\n\ntest.serial.before(t => {\n\t// This runs after the above\n});\n\ntest.serial.before(t => {\n\t// This too runs after the above, and before tests\n});\n\ntest.after('cleanup', t => {\n\t// This runs after all tests\n});\n\ntest.after.always('guaranteed cleanup', t => {\n\t// This will always run, regardless of earlier failures\n});\n\ntest.beforeEach(t => {\n\t// This runs before each test\n});\n\ntest.afterEach(t => {\n\t// This runs after each test\n});\n\ntest.afterEach.always(t => {\n\t// This runs after each test and other test hooks, even if they failed\n});\n\ntest('title', t => {\n\t// Regular test\n});\n```\n\nHooks can be synchronous or asynchronous, just like tests. To make a hook asynchronous return a promise or observable, use an async function, or enable callback mode via `test.before.cb()`, `test.beforeEach.cb()` etc.\n\n```js\ntest.before(async t => {\n\tawait promiseFn();\n});\n\ntest.after(t => {\n\treturn new Promise(/* ... */);\n});\n\ntest.beforeEach.cb(t => {\n\tsetTimeout(t.end);\n});\n\ntest.afterEach.cb(t => {\n\tsetTimeout(t.end);\n});\n```\n\nKeep in mind that the `.beforeEach()` and `.afterEach()` hooks run just before and after a test is run, and that by default tests run concurrently. This means each multiple `.beforeEach()` hooks may run concurrently. Using `test.serial.beforeEach()` does not change this. If you need to set up global state for each test (like spying on `console.log` [for example](https://github.com/avajs/ava/issues/560)), you'll need to make sure the tests themselves are [run serially](#running-tests-serially).\n\nRemember that AVA runs each test file in its own process. You may not have to clean up global state in a `.after()`-hook since that's only called right before the process exits.\n\n#### Test context\n\nHooks can share context with the test:\n\n```js\ntest.beforeEach(t => {\n\tt.context.data = generateUniqueData();\n});\n\ntest('context data is foo', t => {\n\tt.is(t.context.data + 'bar', 'foobar');\n});\n```\n\nContext created in `.before()` hooks is [cloned](https://www.npmjs.com/package/lodash.clone) before it is passed to `.beforeEach()` hooks and / or tests. The `.after()` and `.after.always()` hooks receive the original context value.\n\nFor `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks the context is *not* shared between different tests, allowing you to set up data such that it will not leak to other tests.\n\nBy default `t.context` is an object but you can reassign it:\n\n```js\ntest.before(t => {\n\tt.context = 'unicorn';\n});\n\ntest('context is unicorn', t => {\n\tt.is(t.context, 'unicorn');\n});\n```\n\n### Test macros\n\nAdditional arguments passed to the test declaration will be passed to the test implementation. This is useful for creating reusable test macros.\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\ntest('2 + 2 = 4', macro, '2 + 2', 4);\ntest('2 * 3 = 6', macro, '2 * 3', 6);\n```\n\nYou can build the test title programmatically by attaching a `title` function to the macro:\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nmacro.title = (providedTitle, input, expected) => `${providedTitle} ${input} = ${expected}`.trim();\n\ntest(macro, '2 + 2', 4);\ntest(macro, '2 * 3', 6);\ntest('providedTitle', macro, '3 * 3', 9);\n```\n\nThe `providedTitle` argument defaults to an empty string if the user does not supply a string title. This allows for easy concatenation without having to worry about `null` / `undefined`. It is worth remembering that the empty string is considered a falsy value, so you can still use `if(providedTitle) {...}`.\n\nYou can also pass arrays of macro functions:\n\n```js\nconst safeEval = require('safe-eval');\n\nfunction evalMacro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nfunction safeEvalMacro(t, input, expected) {\n\tt.is(safeEval(input), expected);\n}\n\ntest([evalMacro, safeEvalMacro], '2 + 2', 4);\ntest([evalMacro, safeEvalMacro], '2 * 3', 6);\n```\n\nWe encourage you to use macros instead of building your own test generators ([here is an example](https://github.com/avajs/ava-codemods/blob/47073b5b58aa6f3fb24f98757be5d3f56218d160/test/ok-to-truthy.js#L7-L9) of code that should be replaced with a macro). Macros are designed to perform static analysis of your code, which can lead to better performance, IDE integration, and linter rules.\n\n### Custom assertions\n\nYou can use any assertion library instead of or in addition to the built-in one, provided it throws exceptions when the assertion fails.\n\nThis won't give you as nice an experience as you'd get with the [built-in assertions](#assertions) though, and you won't be able to use the [assertion planning](#assertion-planning) ([see #25](https://github.com/avajs/ava/issues/25)).\n\nYou'll have to configure AVA to not fail tests if no assertions are executed, because AVA can't tell if custom assertions pass. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration).\n\n```js\nimport assert from 'assert';\n\ntest('custom assertion', t => {\n\tassert(true);\n});\n```\n\n### Latest JavaScript support\n\nAVA uses [Babel 7](https://babeljs.io) so you can use the latest JavaScript syntax in your tests. There is no extra setup required. You don't need to be using Babel in your own project for this to work either.\n\nWe aim support all [finished syntax proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md), as well as all syntax from ratified JavaScript versions (e.g. ES2017). See our [`@ava/stage-4`](https://github.com/avajs/babel-preset-stage-4) preset for the currently supported proposals.\n\nPlease note that we do not add or modify built-ins. For example, if you use [`Object.entries()`](https://github.com/tc39/proposal-object-values-entries) in your tests, they will crash in Node.js 6 which does not implement this method.\n\nYou can disable this syntax support, or otherwise customize AVA's Babel pipeline. See our [Babel recipe] for more details.\n\n### TypeScript support\n\nAVA includes typings for TypeScript. You have to set up transpilation yourself. When you set `module` to `commonjs` in your `tsconfig.json` file, TypeScript will automatically find the type definitions for AVA. You should set `target` to `es2015` to use promises and async functions.\n\nSee AVA's [TypeScript recipe](docs/recipes/typescript.md) for a more detailed explanation.\n\n### Transpiling imported modules\n\nAVA currently only transpiles the tests you ask it to run, as well as test helpers (files starting with `_` or in `helpers` directory) inside the test directory. *It will not transpile modules you `import` from outside of the test.* This may be unexpected but there are workarounds.\n\nIf you use Babel you can use its [require hook](https://babeljs.io/docs/usage/require/) to transpile imported modules on-the-fly. To add it, [configure it in your `package.json`](#configuration).\n\nYou can also transpile your modules in a separate process and refer to the transpiled files rather than the sources from your tests. Example [here](docs/recipes/precompiling-with-webpack.md).\n\n### Promise support\n\nIf you return a promise in the test you don't need to explicitly end the test as it will end when the promise resolves.\n\n```js\ntest('resolves with unicorn', t => {\n\treturn somePromise().then(result => {\n\t\tt.is(result, 'unicorn');\n\t});\n});\n```\n\n### Generator function support\n\nAVA comes with built-in support for [generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*).\n\n```js\ntest(function * (t) {\n\tconst value = yield generatorFn();\n\tt.true(value);\n});\n```\n\n### Async function support\n\nAVA comes with built-in support for [async functions](https://tc39.github.io/ecmascript-asyncawait/) *(async/await)*.\n\n```js\ntest(async function (t) {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n\n// Async arrow function\ntest('promises the truth', async t => {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n```\n\n### Observable support\n\nAVA comes with built-in support for [observables](https://github.com/zenparsing/es-observable). If you return an observable from a test, AVA will automatically consume it to completion before ending the test.\n\n*You do not need to use \"callback mode\" or call `t.end()`.*\n\n```js\ntest('handles observables', t => {\n\tt.plan(3);\n\treturn Observable.of(1, 2, 3, 4, 5, 6)\n\t\t.filter(n => {\n\t\t\t// Only even numbers\n\t\t\treturn n % 2 === 0;\n\t\t})\n\t\t.map(() => t.pass());\n});\n```\n\n### Callback support\n\nAVA supports using `t.end` as the final callback when using node-style error-first callback APIs. AVA will consider any truthy value passed as the first argument to `t.end` to be an error. Note that `t.end` requires \"callback mode\", which can be enabled by using the `test.cb` chain.\n\n```js\ntest.cb('data.txt can be read', t => {\n\t// `t.end` automatically checks for error as first argument\n\tfs.readFile('data.txt', t.end);\n});\n```\n\n### Global timeout\n\nA global timeout can be set via the `--timeout` option. Timeout in AVA behaves differently than in other test frameworks. AVA resets a timer after each test, forcing tests to quit if no new test results were received within the specified timeout. This can be used to handle stalled tests.\n\nYou can set timeouts in a human-readable way:\n\n```console\n$ ava --timeout=10s # 10 seconds\n$ ava --timeout=2m # 2 minutes\n$ ava --timeout=100 # 100 milliseconds\n```\n\n## API\n\n### `test([title], implementation)`\n### `test.serial([title], implementation)`\n### `test.cb([title], implementation)`\n### `test.only([title], implementation)`\n### `test.skip([title], implementation)`\n### `test.todo(title)`\n### `test.failing([title], implementation)`\n### `test.before([title], implementation)`\n### `test.after([title], implementation)`\n### `test.beforeEach([title], implementation)`\n### `test.afterEach([title], implementation)`\n\n#### `title`\n\nType: `string`\n\nTest title.\n\n#### `implementation(t)`\n\nType: `function`\n\nShould contain the actual test.\n\n##### `t`\n\nType: `object`\n\nThe execution object of a particular test. Each test implementation receives a different object. Contains the [assertions](#assertions) as well as `.plan(count)` and `.end()` methods. `t.context` can contain shared state from hooks. `t.title` returns the test's title.\n\n###### `t.plan(count)`\n\nPlan how many assertion there are in the test. The test will fail if the actual assertion count doesn't match the number of planned assertions. See [assertion planning](#assertion-planning).\n\n###### `t.end()`\n\nEnd the test. Only works with `test.cb()`.\n\n###### `t.log(...values)`\n\nLog values contextually alongside the test result instead of immediately printing them to `stdout`. Behaves somewhat like `console.log`, but without support for placeholder tokens.\n\n## Assertions\n\nAssertions are mixed into the [execution object](#t) provided to each test implementation:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy('unicorn'); // Assertion\n});\n```\n\nAssertions are bound to their test so you can assign them to a variable or pass them around:\n\n```js\ntest('unicorns are truthy', t => {\n\tconst truthy = t.thruthy;\n\ttruthy('unicorn');\n});\n```\n\nAssertions can be skipped by adding `.skip()`:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy.skip('unicorn');\n});\n```\n\nIf multiple assertion failures are encountered within a single test, AVA will only display the *first* one.\n\n### `.pass([message])`\n\nPassing assertion.\n\n### `.fail([message])`\n\nFailing assertion.\n\n### `.truthy(value, [message])`\n\nAssert that `value` is truthy.\n\n### `.falsy(value, [message])`\n\nAssert that `value` is falsy.\n\n### `.true(value, [message])`\n\nAssert that `value` is `true`.\n\n### `.false(value, [message])`\n\nAssert that `value` is `false`.\n\n### `.is(value, expected, [message])`\n\nAssert that `value` is the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.not(value, expected, [message])`\n\nAssert that `value` is not the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.deepEqual(value, expected, [message])`\n\nAssert that `value` is deeply equal to `expected`. See [Concordance](https://github.com/concordancejs/concordance) for details. Works with [React elements and `react-test-renderer`](https://github.com/concordancejs/react).\n\n### `.notDeepEqual(value, expected, [message])`\n\nAssert that `value` is not deeply equal to `expected`. The inverse of `.deepEqual()`.\n\n### `.throws(thrower, [expected, [message]])`\n\nAssert that an error is thrown. `thrower` can be a function which should throw, or return a promise that should reject, or an observable that should error. Alternatively a promise or observable can be passed directly.\n\nThe thrown value *must* be an error. It is returned so you can run more assertions against it.\n\n`expected` can be a constructor, in which case the thrown error must be an instance of the constructor. It can be a string, which is compared against the thrown error's message, or a regular expression which is matched against this message. You can also specify a matcher object with one or more of the following properties:\n\n* `instanceOf`: a constructor, the thrown error must be an instance of\n* `is`: the thrown error must be strictly equal to `expected.is`\n* `message`: either a string, which is compared against the thrown error's message, or a regular expression, which is matched against this message\n* `name`: the expected `.name` value of the thrown error\n\n`expected` does not need to be specified. If you don't need it but do want to set an assertion message you have to specify `null`.\n\nExample:\n\n```js\nconst fn = () => {\n\tthrow new TypeError('🦄');\n};\n\ntest('throws', t => {\n\tconst error = t.throws(() => {\n\t\tfn();\n\t}, TypeError);\n\n\tt.is(error.message, '🦄');\n});\n```\n\n```js\nconst promise = Promise.reject(new TypeError('🦄'));\n\ntest('rejects', async t => {\n\tconst error = await t.throws(promise);\n\tt.is(error.message, '🦄');\n});\n```\n\nWhen testing an observable or promise you must wait for the assertion to complete:\n\n```js\ntest('rejects', async t => {\n\tawait t.throws(promise);\n});\n```\n\nWhen testing an asynchronous function you must also wait for the assertion to complete:\n\n```js\ntest('throws', async t => {\n\tawait t.throws(async () => {\n\t\tthrow new TypeError('🦄');\n\t}, {instanceOf: TypeError, message: '🦄'});\n});\n```\n\n### `.notThrows(nonThrower, [message])`\n\nAssert that no error is thrown. `thrower` can be a function which shouldn't throw, or return a promise that should resolve, or an observable that should complete. Alternatively a promise or an observable can be passed directly.\n\nLike the `.throws()` assertion, when testing a promise or an observable you must wait for the assertion to complete:\n\n```js\ntest('resolves', async t => {\n\tawait t.notThrows(promise);\n});\n```\n\n### `.regex(contents, regex, [message])`\n\nAssert that `contents` matches `regex`.\n\n### `.notRegex(contents, regex, [message])`\n\nAssert that `contents` does not match `regex`.\n\n### `.snapshot(expected, [message])`\n### `.snapshot(expected, [options], [message])`\n\nCompares the `expected` value with a previously recorded snapshot. Snapshots are stored for each test, so ensure you give your tests unique titles. Alternatively pass an `options` object to select a specific snapshot, for instance `{id: 'my snapshot'}`.\n\nSnapshot assertions cannot be skipped when snapshots are being updated.\n\n## Snapshot testing\n\nAVA supports snapshot testing, [as introduced by Jest](https://facebook.github.io/jest/docs/snapshot-testing.html), through its [Assertions](#assertions) interface. You can snapshot any value as well as React elements:\n\n```js\n// Your component\nconst HelloWorld = () => <h1>Hello World...!</h1>;\n\nexport default HelloWorld;\n```\n\n```js\n// Your test\nimport test from 'ava';\nimport render from 'react-test-renderer';\nimport HelloWorld from '.';\n\ntest('HelloWorld component', t => {\n\tconst tree = render.create(<HelloWorld/>).toJSON();\n\tt.snapshot(tree);\n});\n```\n\n[Try it out in this example project.](https://github.com/avajs/ava-snapshot-example)\n\nSnapshots are stored alongside your test files. If your tests are in a `test` or `tests` folder the snapshots will be stored in a `snapshots` folder. If your tests are in a `__tests__` folder then they they'll be stored in a `__snapshots__` folder.\n\nSay you have `~/project/test/main.js` which contains snapshot assertions. AVA will create two files:\n\n* `~/project/test/snapshots/main.js.snap`\n* `~/project/test/snapshots/main.js.md`\n\nThe first file contains the actual snapshot and is required for future comparisons. The second file contains your *snapshot report*. It's regenerated when you update your snapshots. If you commit it to source control you can diff it to see the changes to your snapshot.\n\nAVA will show why your snapshot assertion failed:\n\n<img src=\"media/snapshot-testing.png\" width=\"1048\">\n\nYou can then check your code. If the change was intentional you can use the `--update-snapshots` (or `-u`) flag to update the snapshots:\n\n```console\n$ ava --update-snapshots\n```\n\nYou can specify a fixed location for storing the snapshot files in AVA's [`package.json` configuration](#configuration):\n\n```json\n{\n\t\"ava\": {\n\t\t\"snapshotDir\": \"custom-directory\"\n\t}\n}\n```\n\nThe snapshot files will be saved in a directory structure that mirrors that of your test files.\n\nIf you are running AVA against precompiled test files, AVA will try and use source maps to determine the location of the original files. Snapshots will be stored next to these files, following the same rules as if AVA had executed the original files directly. This is great if you're writing your tests in TypeScript (see our [TypeScript recipe](docs/recipes/typescript.md)).\n\n### Skipping assertions\n\nAny assertion can be skipped using the `skip` modifier. Skipped assertions are still counted, so there is no need to change your planned assertion count.\n\n```js\ntest('skip assertion', t => {\n\tt.plan(2);\n\tt.is.skip(foo(), 5); // No need to change your plan count when skipping\n\tt.is(1, 1);\n});\n```\n\n### Enhanced assertion messages\n\nAVA comes with [`power-assert`](https://github.com/power-assert-js/power-assert) built-in, giving you more descriptive assertion messages. It reads your test and tries to infer more information from the code.\n\nLet's take this example, using Node's standard [`assert` library](https://nodejs.org/api/assert.html):\n\n```js\nconst a = /foo/;\nconst b = 'bar';\nconst c = 'baz';\nrequire('assert').ok(a.test(b) || b === c);\n```\n\nIf you paste that into a Node REPL it'll return:\n\n```\nAssertionError: false == true\n```\n\nIn AVA however, this test:\n\n```js\ntest('enhanced assertions', t => {\n\tconst a = /foo/;\n\tconst b = 'bar';\n\tconst c = 'baz';\n\tt.true(a.test(b) || b === c);\n});\n```\n\nWill output:\n\n```\nt.true(a.test(b) || b === c)\n       |      |     |     |\n       |      \"bar\" \"bar\" \"baz\"\n       false\n```\n\n## Process isolation\n\nEach test file is run in a separate Node.js process. This allows you to change the global state or overriding a built-in in one test file, without affecting another. It's also great for performance on modern multi-core processors, allowing multiple test files to execute in parallel.\n\nAVA will set `process.env.NODE_ENV` to `test`, unless the `NODE_ENV` environment variable has been set. This is useful if the code you're testing has test defaults (for example when picking what database to connect to, or environment-specific Babel options). It may cause your code or its dependencies to behave differently though. Note that `'NODE_ENV' in process.env` will always be `true`.\n\n## Tips\n\n### Temp files\n\nRunning tests concurrently comes with some challenges, doing file IO is one.\n\nUsually, serial tests create temp directories in the current test directory and clean them up at the end. This won't work when you run tests concurrently as tests will conflict with each other. The correct way to do it is to use a new temp directory for each test. The [`tempfile`](https://github.com/sindresorhus/tempfile) and [`temp-write`](https://github.com/sindresorhus/temp-write) modules can be helpful.\n\n### Code coverage\n\nYou can't use [`istanbul`](https://github.com/gotwarlost/istanbul) for code coverage as AVA [spawns the test files](#process-isolation). You can use [`nyc`](https://github.com/bcoe/nyc) instead, which is basically `istanbul` with support for subprocesses.\n\nAs of version `5.0.0` it uses source maps to report coverage for your actual code, regardless of transpilation. Make sure that the code you're testing includes an inline source map or references a source map file. If you use `babel-register` you can set the `sourceMaps` option in your Babel config to `inline`.\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [`/ˈeɪvə/` ay-və](media/pronunciation.m4a?raw=true).\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Flow](docs/recipes/flow.md)\n- [Configuring Babel][Babel recipe]\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [JSPM and SystemJS](docs/recipes/jspm-systemjs.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Precompiling source files with webpack](docs/recipes/precompiling-with-webpack.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n\n## Support\n\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/ava)\n- [Spectrum](https://spectrum.chat/ava)\n- [Twitter](https://twitter.com/ava__js)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) - Lint rules for AVA tests\n- [sublime-ava](https://github.com/avajs/sublime-ava) - Snippets for AVA tests\n- [atom-ava](https://github.com/avajs/atom-ava) - Snippets for AVA tests\n- [vscode-ava](https://github.com/samverschueren/vscode-ava) - Snippets for AVA tests\n- [gulp-ava](https://github.com/avajs/gulp-ava) - Run tests with gulp\n- [grunt-ava](https://github.com/avajs/grunt-ava) - Run tests with grunt\n- [More…](https://github.com/avajs/awesome-ava#packages)\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [AVA Casts](http://avacasts.com)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus) | [![Vadim Demedes](https://github.com/vadimdemedes.png?size=100)](https://github.com/vadimdemedes)\n---|---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](http://sindresorhus.com) | [Vadim Demedes](https://github.com/vadimdemedes)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://ava.li\">\n\t\t<img src=\"https://cdn.rawgit.com/avajs/ava/fe1cea1ca3d2c8518c0cc39ec8be592beab90558/media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n\n[Babel recipe]: docs/recipes/babel.md\n",
      "readmeFilename": "readme.md",
      "gitHead": "718349ece833c30052138862785a4e7ee7bc02e6",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.0.0-beta.4",
      "_npmVersion": "5.8.0",
      "_nodeVersion": "8.11.0",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-qiGsy/lLl99gNYoaW321pPvRkWRr9iHAXx+nOzJLIpJZ1JGQKqAPlqmjrt4p3I1EtT+pHTuV+J5OOsfJm7Vijg==",
        "shasum": "67602aab01e8bf97bfd0a7f80e384655dd369dd0",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.0.0-beta.4.tgz",
        "fileCount": 43,
        "unpackedSize": 273166,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa0iBLCRA9TVsSAnZWagAAuxcP/1iJBZcrMH6kZKWFdEgr\nPR2h/UrOrrlSjYB1X63U8VSIq3ez87+9KOthz1tOXnlj4GYKe7mhoBa9tDJ/\nH0N04uzkE7UU5BylQ0IeKcUgjC8XY6o0OjqceTBsHjU2+sLu4uYfxpQkHHIx\nSRq97eS+xyHwyAH+WBPPzSjeO35CAf61JrzLeJvTL2LlFIKGi9i10GuY9YlQ\nmtZWDMXsWa1OlbVqi95pMrepShkY/rKp7gx+nUjtEOegiGx+DDvXAYiYfNrS\nxJoeJhQ5Jx1joEN7Knq+km5pH+LvCc4OUWY5qE22F81I63vxrgFsOiLqGH//\n2RC3xDHMrl6RbwNkpLuh2+yD/YNnQesExOsVEjnur9uXlizTBfSOiw9qz9/m\nKXIemjzfFL9AU3XvVg4PLlcWFFj5LNMd1ENH/Eg6Zdg38juUphykgoKXamEy\nbt/QNTpkXmlc7St8tltqw3/ZXweWydHVFJ/swZxrbCAfaSfB//GLieMMReCl\nXszdYvuOIPHbcNBx7T2fWxOxntILLiG/Ybw5tc4hpdnaNoLGYdHPUGLZ33uw\nF98WSSEhYcpVEO3cWt4QQIuJ1O2iQkDdN1ssixR3iTRlY2B9EZnwkxB5B5q8\nOxMLssnGFGbc0GZTqUI0/ZY1QRH+MZIfpkC5UwsSHt/HaCNzUjoL9Rs75B7E\nooE5\r\n=pN9s\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIA8E1/bijZm28s3ZuenLcX2tzzLVz2iz4H2KAAy8MZEJAiAxu1HYi/UeoPktj7BGWq4gJTxNajmMlZR5K+BuKNPvRg=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.0.0-beta.4_1523720266204_0.45436650421855473"
      },
      "_hasShrinkwrap": false
    },
    "1.0.0-beta.5": {
      "name": "ava",
      "version": "1.0.0-beta.5",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=6.12.3 <7 || >=8.9.4 <9 || >=9.11.1 <10 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo && (cd test/fixture && xo '**' '!{source-map-initial,syntax-error}.js' '!snapshots/test-sourcemaps/build/**')",
        "test": "npm run lint && flow check test/flow-types && tsc --noEmit -p test/ts-types && nyc tap --no-cov --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=300 --jobs=1 test/*.js test/reporters/*.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "index.d.ts"
      ],
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "2.0.0-beta.7",
        "@ava/babel-preset-transform-test-files": "4.0.0-beta.6",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "7.0.0-beta.49",
        "@babel/generator": "7.0.0-beta.49",
        "@babel/plugin-syntax-async-generators": "7.0.0-beta.49",
        "@babel/plugin-syntax-object-rest-spread": "7.0.0-beta.49",
        "@babel/plugin-syntax-optional-catch-binding": "7.0.0-beta.49",
        "@concordance/react": "^1.0.0",
        "ansi-escapes": "^3.1.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^2.0.0",
        "arrify": "^1.0.0",
        "auto-bind": "^1.2.0",
        "bluebird": "^3.5.1",
        "chalk": "^2.4.1",
        "chokidar": "^2.0.3",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-truncate": "^1.1.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^3.0.0",
        "convert-source-map": "^1.5.1",
        "currently-unhandled": "^0.4.1",
        "debug": "^3.1.0",
        "dot-prop": "^4.2.0",
        "emittery": "^0.3.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^1.0.5",
        "esm": "^3.0.40",
        "figures": "^2.0.0",
        "get-port": "^3.2.0",
        "globby": "^7.1.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^1.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^1.1.0",
        "is-error": "^2.2.1",
        "is-generator-fn": "^1.0.0",
        "is-observable": "^1.1.0",
        "is-plain-object": "^2.0.4",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.3.0",
        "matcher": "^1.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^5.0.0",
        "ms": "^2.1.1",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "ora": "^2.1.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.1.0",
        "plur": "^3.0.1",
        "pretty-ms": "^3.2.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "slash": "^2.0.0",
        "source-map-support": "^0.5.6",
        "stack-utils": "^1.0.1",
        "strip-ansi": "^4.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^5.4.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.5.0"
      },
      "devDependencies": {
        "cli-table2": "^0.2.0",
        "codecov": "^3.0.2",
        "del": "^3.0.0",
        "delay": "^3.0.0",
        "execa": "^0.10.0",
        "flow-bin": "^0.73.0",
        "get-stream": "^3.0.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^2.7.0",
        "nyc": "^11.8.0",
        "proxyquire": "^2.0.1",
        "react": "^16.4.0",
        "react-test-renderer": "^16.4.0",
        "replace-string": "^1.1.0",
        "signal-exit": "^3.0.0",
        "sinon": "^5.0.10",
        "source-map-fixtures": "^2.1.0",
        "tap": "^12.0.1",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "typescript": "^2.8.3",
        "xo": "^0.21.1",
        "zen-observable": "^0.8.8"
      },
      "typings": "index.d.ts",
      "xo": {
        "ignores": [
          "media/**"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off",
          "prefer-destructuring": "off",
          "prefer-rest-params": "off",
          "prefer-spread": "off",
          "unicorn/prefer-spread": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "1142ead3d6865619f4cfcb868a600289264837cc",
      "readme": "# [![AVA](media/header.png)](https://ava.li)\n\n> Futuristic test runner\n\n[![Build Status: Linux](https://travis-ci.org/avajs/ava.svg?branch=master)](https://travis-ci.org/avajs/ava) [![Build status: Windows](https://ci.appveyor.com/api/projects/status/e7v91mu2m5x48ehx/branch/master?svg=true)](https://ci.appveyor.com/project/ava/ava/branch/master) [![Coverage Status](https://coveralls.io/repos/github/avajs/ava/badge.svg?branch=master)](https://coveralls.io/github/avajs/ava?branch=master) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo) [![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/ava)\n [![Mentioned in Awesome Node.js](https://awesome.re/mentioned-badge.svg)](https://github.com/sindresorhus/awesome-nodejs)\n\nEven though JavaScript is single-threaded, IO in Node.js can happen in parallel due to its async nature. AVA takes advantage of this and runs your tests concurrently, which is especially beneficial for IO heavy tests. In addition, test files are run in parallel as separate processes, giving you even better performance and an isolated environment for each test file. [Switching](https://github.com/sindresorhus/pageres/commit/663be15acb3dd2eb0f71b1956ef28c2cd3fdeed0) from Mocha to AVA in Pageres brought the test time down from 31 to 11 seconds. Having tests run concurrently forces you to write atomic tests, meaning tests don't depend on global state or the state of other tests, which is a great thing!\n\n![](media/mini-reporter.gif)\n\n*Read our [contributing guide](contributing.md) if you're looking to contribute (issues/PRs/etc).*\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\n**This documentation covers the 1.0 beta releases, which use Babel 7. The last release that uses Babel 6 is [`v0.25.0`](https://github.com/avajs/ava/tree/v0.25.0).**\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Contents\n\n- [Usage](#usage)\n- [CLI Usage](#cli)\n- [Debugging](#debugging)\n- [Reporters](#reporters)\n- [Configuration](#configuration)\n- [Documentation](#documentation)\n- [API](#api)\n- [Assertions](#assertions)\n- [Snapshot testing](#snapshot-testing)\n- [Tips](#tips)\n- [FAQ](#faq)\n- [Recipes](#recipes)\n- [Support](#support)\n- [Related](#related)\n- [Links](#links)\n- [Team](#team)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript & Flow type definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](#process-isolation)\n- [Write your tests using the latest JavaScript syntax](#latest-javascript-support)\n- [Promise support](#promise-support)\n- [Generator function support](#generator-function-support)\n- [Async function support](#async-function-support)\n- [Observable support](#observable-support)\n- [Enhanced assertion messages](#enhanced-assertion-messages)\n- [TAP reporter](#tap-reporter)\n- [Automatic migration from other test runners](https://github.com/avajs/ava-codemods#migrating-to-ava)\n\n\n## Test syntax\n\n```js\nimport test from 'ava';\n\ntest('arrays are equal', t => {\n\tt.deepEqual([1, 2], [1, 2]);\n});\n```\n\n## Usage\n\n### Add AVA to your project\n\nTo install and set up AVA, run:\n\n```console\n$ npx create-ava --next\n```\n\nYour `package.json` will then look like this:\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"1.0.0-beta.4\"\n\t}\n}\n```\n\nInitialization will work with npm and Yarn, but running `npx` requires [`npm@5.2.0`](https://github.com/npm/npm/releases/tag/v5.2.0) or greater to be installed. Otherwise, you'll have to manually install `ava` and configure the `test` script in your `package.json` as per above:\n\n```console\n$ npm install --save-dev --save-exact ava@next\n```\n\nOr if you prefer using Yarn:\n\n```console\n$ yarn add ava@next --dev --exact\n```\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nimport test from 'ava';\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\n\tt.is(await bar, 'bar');\n});\n```\n\n### Run it\n\n```console\n$ npm test\n```\n\n### Watch it\n\n```console\n$ npm test -- --watch\n```\n\nAVA comes with an intelligent watch mode. [Learn more in its recipe](docs/recipes/watch-mode.md).\n\n### Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## CLI\n\n```console\n$ ava --help\n\n  Usage\n    ava [<file|directory|glob> ...]\n\n  Options\n    --watch, -w             Re-run tests when tests and source files change\n    --match, -m             Only run tests with matching title (Can be repeated)\n    --update-snapshots, -u  Update snapshots\n    --fail-fast             Stop after first test failure\n    --timeout, -T           Set global timeout\n    --serial, -s            Run tests serially\n    --concurrency, -c       Max number of test files running at the same time (Default: CPU cores)\n    --verbose, -v           Enable verbose output\n    --tap, -t               Generate TAP output\n    --color                 Force color output\n    --no-color              Disable color output\n\n  Examples\n    ava\n    ava test.js test2.js\n    ava test-*.js\n    ava test\n\n  Default patterns when no arguments:\n  test.js test-*.js test/**/*.js **/__tests__/**/*.js **/*.test.js\n```\n\n*Note that the CLI will use your local install of AVA when available, even when run globally.*\n\nDirectories are recursed, with all `*.js` files being treated as test files. Directories named `fixtures`, `helpers` and `node_modules` are *always* ignored. So are files starting with `_` which allows you to place helpers in the same directory as your test files.\n\nWhen using `npm test`, you can pass positional arguments directly `npm test test2.js`, but flags needs to be passed like `npm test -- --verbose`.\n\n\n## Debugging\n\nAVA runs tests in child processes, so to debug tests, you need to do this workaround:\n\n```console\n$ node --inspect node_modules/ava/profile.js some/test/file.js\n```\n\n### Debugger-specific tips\n\n- [Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Visual Studio Code](docs/recipes/debugging-with-vscode.md)\n\n\n## Reporters\n\n### Mini-reporter\n\nThe mini-reporter is the default reporter.\n\n<img src=\"media/mini-reporter.gif\" width=\"460\">\n\n### Verbose reporter\n\nUse the `--verbose` flag to enable the verbose reporter. This is always used in CI environments unless the [TAP reporter](#tap-reporter) is enabled.\n\n<img src=\"media/verbose-reporter.png\" width=\"294\">\n\n### TAP reporter\n\nAVA supports the TAP format and thus is compatible with [any TAP reporter](https://github.com/sindresorhus/awesome-tap#reporters). Use the `--tap` flag to enable TAP output.\n\n```console\n$ ava --tap | tap-nyan\n```\n\n<img src=\"media/tap-reporter.png\" width=\"420\">\n\nPlease note that the TAP reporter is unavailable when using [watch mode](#watch-it).\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n\n## Configuration\n\nAll of the CLI options can be configured in the `ava` section of either your `package.json` or an `ava.config.js` file. This allows you to modify the default behavior of the `ava` command, so you don't have to repeatedly type the same options on the command prompt.\n\nTo ignore a file or directory, prefix the pattern with an `!` (exclamation mark).\n\n```json\n{\n\t\"ava\": {\n\t\t\"files\": [\n\t\t\t\"my-test-directory/**/*.js\",\n\t\t\t\"!my-test-directory/exclude-this-directory/**/*.js\",\n\t\t\t\"!**/exclude-this-file.js\"\n\t\t],\n\t\t\"sources\": [\n\t\t\t\"**/*.{js,jsx}\",\n\t\t\t\"!dist/**/*\"\n\t\t],\n\t\t\"match\": [\n\t\t\t\"*oo\",\n\t\t\t\"!foo\"\n\t\t],\n\t\t\"cache\": true,\n\t\t\"concurrency\": 5,\n\t\t\"failFast\": true,\n\t\t\"failWithoutAssertions\": false,\n\t\t\"tap\": true,\n\t\t\"compileEnhancements\": false,\n\t\t\"require\": [\n\t\t\t\"@babel/register\"\n\t\t],\n\t\t\"babel\": {\n\t\t\t\"extensions\": [\"jsx\"],\n\t\t\t\"testOptions\": {\n\t\t\t\t\"babelrc\": false\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nArguments passed to the CLI will always take precedence over the configuration in `package.json`.\n\n### Options\n\n- `files`: file & directory paths and glob patterns that select which files AVA will run tests from. Files with an underscore prefix are ignored. All matched files in selected directories are run. By default only selects files with `js` extensions, even if the glob pattern matches other files. Specify `extensions` and `babel.extensions` to allow other file extensions\n- `source`: files that, when changed, cause tests to be re-run in watch mode. See the [watch mode recipe for details](https://github.com/avajs/ava/blob/master/docs/recipes/watch-mode.md#source-files-and-test-files)\n- `match`: not typically useful in the `package.json` configuration, but equivalent to [specifying `--match` on the CLI](#running-tests-with-matching-titles)\n- `cache`: cache compiled test and helper files under `node_modules/.cache/ava`. If `false`, files are cached in a temporary directory instead\n- `failFast`: stop running further tests once a test fails\n- `failWithoutAssertions`: if `false`, does not fail a test if it doesn't run [assertions](#assertions)\n- `tap`: if `true`, enables the [TAP reporter](#tap-reporter)\n- `snapshotDir`: specifies a fixed location for storing snapshot files. Use this if your snapshots are ending up in the wrong location\n- `compileEnhancements`: if `false`, disables [power-assert](https://github.com/power-assert-js/power-assert) — which otherwise helps provide more descriptive error messages — and detection of improper use of the `t.throws()` assertion\n- `extensions`: extensions of test files that are not precompiled using AVA's Babel presets. Note that files are still compiled to enable power-assert and other features, so you may also need to set `compileEnhancements` to `false` if your files are not valid JavaScript. Setting this overrides the default `\"js\"` value, so make sure to include that extension in the list, as long as it's not included in `babel.extensions`\n- `require`: extra modules to require before tests are run. Modules are required in the [worker processes](#process-isolation)\n- `babel`: test file specific Babel options. See our [Babel recipe] for more details\n- `babel.extensions`: extensions of test files that will be precompiled using AVA's Babel presets. Setting this overrides the default `\"js\"` value, so make sure to include that extension in the list\n\nNote that providing files on the CLI overrides the `files` option. If you've configured a glob pattern, for instance `test/**/*.test.js`, you may want to repeat it when using the CLI: `ava 'test/integration/*.test.js'`.\n\n### Using `ava.config.js`\n\nTo use an `ava.config.js` file:\n\n 1. It must be in the same directory as your `package.json`\n 2. Your `package.json` must not contain an `ava` property (or, if it does, it must be an empty object)\n\nThe config file must have a default export, using ES modules. It can either be a plain object or a factory function which returns a plain object:\n\n```js\nexport default {\n\trequire: ['esm']\n};\n```\n\n```js\nexport default function factory() {\n\treturn {\n\t\trequire: ['esm']\n\t};\n};\n```\n\nThe factory function is called with an object containing a `projectDir` property, which you could use to change the returned configuration:\n\n```js\nexport default ({projectDir}) => {\n\tif (projectDir === '/Users/username/projects/my-project') {\n\t\treturn {\n\t\t\t// Config A\n\t\t};\n\t}\n\n\treturn {\n\t\t// Config B\n\t};\n};\n```\n\nNote that the final configuration must not be a promise.\n\n## Documentation\n\nTests are run concurrently. You can specify synchronous and asynchronous tests. Tests are considered synchronous unless you return a promise or [observable](https://github.com/zenparsing/zen-observable).\n\nWe *highly* recommend the use of [async functions](#async-function-support). They make asynchronous code concise and readable, and they implicitly return a promise so you don't have to.\n\nIf you're unable to use promises or observables, you may enable \"callback mode\" by defining your test with `test.cb([title], fn)`. Tests declared this way **must** be manually ended with `t.end()`. This mode is mainly intended for testing callback-style APIs. However, we would strongly recommend [promisifying](https://github.com/sindresorhus/pify) callback-style APIs instead of using \"callback mode\", as this results in more correct and readable tests.\n\nYou must define all tests synchronously. They can't be defined inside `setTimeout`, `setImmediate`, etc.\n\nAVA tries to run test files with their current working directory set to the directory that contains your `package.json` file.\n\n### Creating tests\n\nTo create a test you call the `test` function you imported from AVA. Provide the required title and implementation function. Titles must be unique within each test file. The function will be called when your test is run. It's passed an [execution object](#t) as its first argument.\n\n**Note:** In order for the [enhanced assertion messages](#enhanced-assertion-messages) to behave correctly, the first argument **must** be named `t`.\n\n```js\nimport test from 'ava';\n\ntest('my passing test', t => {\n\tt.pass();\n});\n```\n\n### Assertion planning\n\nAssertion plans ensure tests only pass when a specific number of assertions have been executed. They'll help you catch cases where tests exit too early. They'll also cause tests to fail if too many assertions are executed, which can be useful if you have assertions inside callbacks or loops.\n\nIf you do not specify an assertion plan, your test will still fail if no assertions are executed. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration) to disable this behavior.\n\nNote that, unlike [`tap`](https://www.npmjs.com/package/tap) and [`tape`](https://www.npmjs.com/package/tape), AVA does *not* automatically end a test when the planned assertion count is reached.\n\nThese examples will result in a passed test:\n\n```js\ntest('resolves with 3', t => {\n\tt.plan(1);\n\n\treturn Promise.resolve(3).then(n => {\n\t\tt.is(n, 3);\n\t});\n});\n\ntest.cb('invokes callback', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t\tt.end();\n\t});\n});\n```\n\nThese won't:\n\n```js\ntest('loops twice', t => {\n\tt.plan(2);\n\n\tfor (let i = 0; i < 3; i++) {\n\t\tt.true(i < 3);\n\t}\n}); // Fails, 3 assertions are executed which is too many\n\ntest('invokes callback synchronously', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t});\n}); // Fails, the test ends synchronously before the assertion is executed\n```\n\n### Running tests serially\n\nTests are run concurrently by default, however, sometimes you have to write tests that cannot run concurrently. In these rare cases you can use the `.serial` modifier. It will force those tests to run serially *before* the concurrent ones.\n\n```js\ntest.serial('passes serially', t => {\n\tt.pass();\n});\n```\n\nNote that this only applies to tests within a particular test file. AVA will still run multiple tests files at the same time unless you pass the [`--serial` CLI flag](#cli).\n\nYou can use the `.serial` modifier with all tests, hooks and even `.todo()`, but it's only available on the `test` function.\n\n### Running specific tests\n\nDuring development it can be helpful to only run a few specific tests. This can be accomplished using the `.only` modifier:\n\n```js\ntest('will not be run', t => {\n\tt.fail();\n});\n\ntest.only('will be run', t => {\n\tt.pass();\n});\n```\n\nYou can use the `.only` modifier with all tests. It cannot be used with hooks or `.todo()`.\n\n*Note:* The `.only` modifier applies to the test file it's defined in, so if you run multiple test files, tests in other files will still run. If you want to only run the `test.only` test, provide just that test file to AVA.\n\n### Running tests with matching titles\n\nThe `--match` flag allows you to run just the tests that have a matching title. This is achieved with simple wildcard patterns. Patterns are case insensitive. See [`matcher`](https://github.com/sindresorhus/matcher) for more details.\n\nMatch titles ending with `foo`:\n\n```console\n$ ava --match='*foo'\n```\n\nMatch titles starting with `foo`:\n\n```console\n$ ava --match='foo*'\n```\n\nMatch titles containing `foo`:\n\n```console\n$ ava --match='*foo*'\n```\n\nMatch titles that are *exactly* `foo` (albeit case insensitively):\n\n```console\n$ ava --match='foo'\n```\n\nMatch titles not containing `foo`:\n\n```console\n$ ava --match='!*foo*'\n```\n\nMatch titles starting with `foo` and ending with `bar`:\n\n```console\n$ ava --match='foo*bar'\n```\n\nMatch titles starting with `foo` or ending with `bar`:\n\n```console\n$ ava --match='foo*' --match='*bar'\n```\n\nNote that a match pattern takes precedence over the `.only` modifier. Only tests with an explicit title are matched. Tests without titles or whose title is derived from the implementation function will be skipped when `--match` is used.\n\nHere's what happens when you run AVA with a match pattern of `*oo*` and the following tests:\n\n```js\ntest('foo will run', t => {\n\tt.pass();\n});\n\ntest('moo will also run', t => {\n\tt.pass();\n});\n\ntest.only('boo will run but not exclusively', t => {\n\tt.pass();\n});\n\n// Won't run, no title\ntest(function (t) {\n\tt.fail();\n});\n\n// Won't run, no explicit title\ntest(function foo(t) {\n\tt.fail();\n});\n```\n\n### Skipping tests\n\nSometimes failing tests can be hard to fix. You can tell AVA to skip these tests using the `.skip` modifier. They'll still be shown in the output (as having been skipped) but are never run.\n\n```js\ntest.skip('will not be run', t => {\n\tt.fail();\n});\n```\n\nYou must specify the implementation function. You can use the `.skip` modifier with all tests and hooks, but not with `.todo()`. You can not apply further modifiers to `.skip`.\n\n### Test placeholders (\"todo\")\n\nYou can use the `.todo` modifier when you're planning to write a test. Like skipped tests these placeholders are shown in the output. They only require a title; you cannot specify the implementation function.\n\n```js\ntest.todo('will think about writing this later');\n```\n\nYou can signal that you need to write a serial test:\n\n```js\ntest.serial.todo('will think about writing this later');\n```\n\n### Failing tests\n\nYou can use the `.failing` modifier to document issues with your code that need to be fixed. Failing tests are run just like normal ones, but they are expected to fail, and will not break your build when they do. If a test marked as failing actually passes, it will be reported as an error and fail the build with a helpful message instructing you to remove the `.failing` modifier.\n\nThis allows you to merge `.failing` tests before a fix is implemented without breaking CI. This is a great way to recognize good bug report PR's with a commit credit, even if the reporter is unable to actually fix the problem.\n\n```js\n// See: github.com/user/repo/issues/1234\ntest.failing('demonstrate some bug', t => {\n\tt.fail(); // Test will count as passed\n});\n```\n\n### Before & after hooks\n\nAVA lets you register hooks that are run before and after your tests. This allows you to run setup and/or teardown code.\n\n`test.before()` registers a hook to be run before the first test in your test file. Similarly `test.after()` registers a hook to be run after the last test. Use `test.after.always()` to register a hook that will **always** run once your tests and other hooks complete. `.always()` hooks run regardless of whether there were earlier failures, so they are ideal for cleanup tasks. Note however that uncaught exceptions, unhandled rejections or timeouts will crash your tests, possibly preventing `.always()` hooks from running.\n\n`test.beforeEach()` registers a hook to be run before each test in your test file. Similarly `test.afterEach()` a hook to be run after each test. Use `test.afterEach.always()` to register an after hook that is called even if other test hooks, or the test itself, fail.\n\nIf a test is skipped with the `.skip` modifier, the respective `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks are not run. Likewise, if all tests in a test file are skipped `.before()`, `.after()` and `.after.always()` hooks for the file are not run.\n\nLike `test()` these methods take an optional title and an implementation function. The title is shown if your hook fails to execute. The implementation is called with an [execution object](#t). You can use assertions in your hooks. You can also pass a [macro function](#test-macros) and additional arguments.\n\n`.before()` hooks execute before `.beforeEach()` hooks. `.afterEach()` hooks execute before `.after()` hooks. Within their category the hooks execute in the order they were defined. By default hooks execute concurrently, but you can use `test.serial` to ensure only that single hook is run at a time. Unlike with tests, serial hooks are *not* run before other hooks:\n\n```js\ntest.before(t => {\n\t// This runs before all tests\n});\n\ntest.before(t => {\n\t// This runs concurrently with the above\n});\n\ntest.serial.before(t => {\n\t// This runs after the above\n});\n\ntest.serial.before(t => {\n\t// This too runs after the above, and before tests\n});\n\ntest.after('cleanup', t => {\n\t// This runs after all tests\n});\n\ntest.after.always('guaranteed cleanup', t => {\n\t// This will always run, regardless of earlier failures\n});\n\ntest.beforeEach(t => {\n\t// This runs before each test\n});\n\ntest.afterEach(t => {\n\t// This runs after each test\n});\n\ntest.afterEach.always(t => {\n\t// This runs after each test and other test hooks, even if they failed\n});\n\ntest('title', t => {\n\t// Regular test\n});\n```\n\nHooks can be synchronous or asynchronous, just like tests. To make a hook asynchronous return a promise or observable, use an async function, or enable callback mode via `test.before.cb()`, `test.beforeEach.cb()` etc.\n\n```js\ntest.before(async t => {\n\tawait promiseFn();\n});\n\ntest.after(t => {\n\treturn new Promise(/* ... */);\n});\n\ntest.beforeEach.cb(t => {\n\tsetTimeout(t.end);\n});\n\ntest.afterEach.cb(t => {\n\tsetTimeout(t.end);\n});\n```\n\nKeep in mind that the `.beforeEach()` and `.afterEach()` hooks run just before and after a test is run, and that by default tests run concurrently. This means each multiple `.beforeEach()` hooks may run concurrently. Using `test.serial.beforeEach()` does not change this. If you need to set up global state for each test (like spying on `console.log` [for example](https://github.com/avajs/ava/issues/560)), you'll need to make sure the tests themselves are [run serially](#running-tests-serially).\n\nRemember that AVA runs each test file in its own process. You may not have to clean up global state in a `.after()`-hook since that's only called right before the process exits.\n\n#### Test context\n\nHooks can share context with the test:\n\n```js\ntest.beforeEach(t => {\n\tt.context.data = generateUniqueData();\n});\n\ntest('context data is foo', t => {\n\tt.is(t.context.data + 'bar', 'foobar');\n});\n```\n\nContext created in `.before()` hooks is [cloned](https://www.npmjs.com/package/lodash.clone) before it is passed to `.beforeEach()` hooks and / or tests. The `.after()` and `.after.always()` hooks receive the original context value.\n\nFor `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks the context is *not* shared between different tests, allowing you to set up data such that it will not leak to other tests.\n\nBy default `t.context` is an object but you can reassign it:\n\n```js\ntest.before(t => {\n\tt.context = 'unicorn';\n});\n\ntest('context is unicorn', t => {\n\tt.is(t.context, 'unicorn');\n});\n```\n\n### Test macros\n\nAdditional arguments passed to the test declaration will be passed to the test implementation. This is useful for creating reusable test macros.\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\ntest('2 + 2 = 4', macro, '2 + 2', 4);\ntest('2 * 3 = 6', macro, '2 * 3', 6);\n```\n\nYou can build the test title programmatically by attaching a `title` function to the macro:\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nmacro.title = (providedTitle, input, expected) => `${providedTitle} ${input} = ${expected}`.trim();\n\ntest(macro, '2 + 2', 4);\ntest(macro, '2 * 3', 6);\ntest('providedTitle', macro, '3 * 3', 9);\n```\n\nThe `providedTitle` argument defaults to an empty string if the user does not supply a string title. This allows for easy concatenation without having to worry about `null` / `undefined`. It is worth remembering that the empty string is considered a falsy value, so you can still use `if(providedTitle) {...}`.\n\nYou can also pass arrays of macro functions:\n\n```js\nconst safeEval = require('safe-eval');\n\nfunction evalMacro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nfunction safeEvalMacro(t, input, expected) {\n\tt.is(safeEval(input), expected);\n}\n\ntest([evalMacro, safeEvalMacro], '2 + 2', 4);\ntest([evalMacro, safeEvalMacro], '2 * 3', 6);\n```\n\nWe encourage you to use macros instead of building your own test generators ([here is an example](https://github.com/avajs/ava-codemods/blob/47073b5b58aa6f3fb24f98757be5d3f56218d160/test/ok-to-truthy.js#L7-L9) of code that should be replaced with a macro). Macros are designed to perform static analysis of your code, which can lead to better performance, IDE integration, and linter rules.\n\n### Custom assertions\n\nYou can use any assertion library instead of or in addition to the built-in one, provided it throws exceptions when the assertion fails.\n\nThis won't give you as nice an experience as you'd get with the [built-in assertions](#assertions) though, and you won't be able to use the [assertion planning](#assertion-planning) ([see #25](https://github.com/avajs/ava/issues/25)).\n\nYou'll have to configure AVA to not fail tests if no assertions are executed, because AVA can't tell if custom assertions pass. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration).\n\n```js\nimport assert from 'assert';\n\ntest('custom assertion', t => {\n\tassert(true);\n});\n```\n\n### Latest JavaScript support\n\nAVA uses [Babel 7](https://babeljs.io) so you can use the latest JavaScript syntax in your tests. There is no extra setup required. You don't need to be using Babel in your own project for this to work either.\n\nWe aim support all [finished syntax proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md), as well as all syntax from ratified JavaScript versions (e.g. ES2017). See our [`@ava/stage-4`](https://github.com/avajs/babel-preset-stage-4) preset for the currently supported proposals.\n\nPlease note that we do not add or modify built-ins. For example, if you use [`Object.entries()`](https://github.com/tc39/proposal-object-values-entries) in your tests, they will crash in Node.js 6 which does not implement this method.\n\nYou can disable this syntax support, or otherwise customize AVA's Babel pipeline. See our [Babel recipe] for more details.\n\n### TypeScript support\n\nAVA includes typings for TypeScript. You have to set up transpilation yourself. When you set `module` to `commonjs` in your `tsconfig.json` file, TypeScript will automatically find the type definitions for AVA. You should set `target` to `es2015` to use promises and async functions.\n\nSee AVA's [TypeScript recipe](docs/recipes/typescript.md) for a more detailed explanation.\n\n### Transpiling imported modules\n\nAVA currently only transpiles the tests you ask it to run, as well as test helpers (files starting with `_` or in `helpers` directory) inside the test directory. *It will not transpile modules you `import` from outside of the test.* This may be unexpected but there are workarounds.\n\nIf you use Babel you can use its [require hook](https://babeljs.io/docs/usage/require/) to transpile imported modules on-the-fly. To add it, [configure it in your `package.json`](#configuration).\n\nYou can also transpile your modules in a separate process and refer to the transpiled files rather than the sources from your tests. Example [here](docs/recipes/precompiling-with-webpack.md).\n\n### Promise support\n\nIf you return a promise in the test you don't need to explicitly end the test as it will end when the promise resolves.\n\n```js\ntest('resolves with unicorn', t => {\n\treturn somePromise().then(result => {\n\t\tt.is(result, 'unicorn');\n\t});\n});\n```\n\n### Generator function support\n\nAVA comes with built-in support for [generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*).\n\n```js\ntest(function * (t) {\n\tconst value = yield generatorFn();\n\tt.true(value);\n});\n```\n\n### Async function support\n\nAVA comes with built-in support for [async functions](https://tc39.github.io/ecmascript-asyncawait/) *(async/await)*.\n\n```js\ntest(async function (t) {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n\n// Async arrow function\ntest('promises the truth', async t => {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n```\n\n### Observable support\n\nAVA comes with built-in support for [observables](https://github.com/zenparsing/es-observable). If you return an observable from a test, AVA will automatically consume it to completion before ending the test.\n\n*You do not need to use \"callback mode\" or call `t.end()`.*\n\n```js\ntest('handles observables', t => {\n\tt.plan(3);\n\treturn Observable.of(1, 2, 3, 4, 5, 6)\n\t\t.filter(n => {\n\t\t\t// Only even numbers\n\t\t\treturn n % 2 === 0;\n\t\t})\n\t\t.map(() => t.pass());\n});\n```\n\n### Callback support\n\nAVA supports using `t.end` as the final callback when using node-style error-first callback APIs. AVA will consider any truthy value passed as the first argument to `t.end` to be an error. Note that `t.end` requires \"callback mode\", which can be enabled by using the `test.cb` chain.\n\n```js\ntest.cb('data.txt can be read', t => {\n\t// `t.end` automatically checks for error as first argument\n\tfs.readFile('data.txt', t.end);\n});\n```\n\n### Global timeout\n\nA global timeout can be set via the `--timeout` option. Timeout in AVA behaves differently than in other test frameworks. AVA resets a timer after each test, forcing tests to quit if no new test results were received within the specified timeout. This can be used to handle stalled tests.\n\nYou can set timeouts in a human-readable way:\n\n```console\n$ ava --timeout=10s # 10 seconds\n$ ava --timeout=2m # 2 minutes\n$ ava --timeout=100 # 100 milliseconds\n```\n\n## API\n\n### `test([title], implementation)`\n### `test.serial([title], implementation)`\n### `test.cb([title], implementation)`\n### `test.only([title], implementation)`\n### `test.skip([title], implementation)`\n### `test.todo(title)`\n### `test.failing([title], implementation)`\n### `test.before([title], implementation)`\n### `test.after([title], implementation)`\n### `test.beforeEach([title], implementation)`\n### `test.afterEach([title], implementation)`\n\n#### `title`\n\nType: `string`\n\nTest title.\n\n#### `implementation(t)`\n\nType: `function`\n\nShould contain the actual test.\n\n##### `t`\n\nType: `object`\n\nThe execution object of a particular test. Each test implementation receives a different object. Contains the [assertions](#assertions) as well as `.plan(count)` and `.end()` methods. `t.context` can contain shared state from hooks. `t.title` returns the test's title.\n\n###### `t.plan(count)`\n\nPlan how many assertion there are in the test. The test will fail if the actual assertion count doesn't match the number of planned assertions. See [assertion planning](#assertion-planning).\n\n###### `t.end()`\n\nEnd the test. Only works with `test.cb()`.\n\n###### `t.log(...values)`\n\nLog values contextually alongside the test result instead of immediately printing them to `stdout`. Behaves somewhat like `console.log`, but without support for placeholder tokens.\n\n## Assertions\n\nAssertions are mixed into the [execution object](#t) provided to each test implementation:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy('unicorn'); // Assertion\n});\n```\n\nAssertions are bound to their test so you can assign them to a variable or pass them around:\n\n```js\ntest('unicorns are truthy', t => {\n\tconst truthy = t.truthy;\n\ttruthy('unicorn');\n});\n```\n\nAssertions can be skipped by adding `.skip()`:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy.skip('unicorn');\n});\n```\n\nIf multiple assertion failures are encountered within a single test, AVA will only display the *first* one.\n\n### `.pass([message])`\n\nPassing assertion.\n\n### `.fail([message])`\n\nFailing assertion.\n\n### `.truthy(value, [message])`\n\nAssert that `value` is truthy.\n\n### `.falsy(value, [message])`\n\nAssert that `value` is falsy.\n\n### `.true(value, [message])`\n\nAssert that `value` is `true`.\n\n### `.false(value, [message])`\n\nAssert that `value` is `false`.\n\n### `.is(value, expected, [message])`\n\nAssert that `value` is the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.not(value, expected, [message])`\n\nAssert that `value` is not the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.deepEqual(value, expected, [message])`\n\nAssert that `value` is deeply equal to `expected`. See [Concordance](https://github.com/concordancejs/concordance) for details. Works with [React elements and `react-test-renderer`](https://github.com/concordancejs/react).\n\n### `.notDeepEqual(value, expected, [message])`\n\nAssert that `value` is not deeply equal to `expected`. The inverse of `.deepEqual()`.\n\n### `.throws(thrower, [expected, [message]])`\n\nAssert that an error is thrown. `thrower` can be a function which should throw, or return a promise that should reject, or an observable that should error. Alternatively a promise or observable can be passed directly.\n\nThe thrown value *must* be an error. It is returned so you can run more assertions against it.\n\n`expected` can be a constructor, in which case the thrown error must be an instance of the constructor. It can be a string, which is compared against the thrown error's message, or a regular expression which is matched against this message. You can also specify a matcher object with one or more of the following properties:\n\n* `instanceOf`: a constructor, the thrown error must be an instance of\n* `is`: the thrown error must be strictly equal to `expected.is`\n* `message`: either a string, which is compared against the thrown error's message, or a regular expression, which is matched against this message\n* `name`: the expected `.name` value of the thrown error\n* `code`: the expected `.code` value of the thrown error\n\n`expected` does not need to be specified. If you don't need it but do want to set an assertion message you have to specify `null`.\n\nExample:\n\n```js\nconst fn = () => {\n\tthrow new TypeError('🦄');\n};\n\ntest('throws', t => {\n\tconst error = t.throws(() => {\n\t\tfn();\n\t}, TypeError);\n\n\tt.is(error.message, '🦄');\n});\n```\n\n```js\nconst promise = Promise.reject(new TypeError('🦄'));\n\ntest('rejects', async t => {\n\tconst error = await t.throws(promise);\n\tt.is(error.message, '🦄');\n});\n```\n\nWhen testing an observable or promise you must wait for the assertion to complete:\n\n```js\ntest('rejects', async t => {\n\tawait t.throws(promise);\n});\n```\n\nWhen testing an asynchronous function you must also wait for the assertion to complete:\n\n```js\ntest('throws', async t => {\n\tawait t.throws(async () => {\n\t\tthrow new TypeError('🦄');\n\t}, {instanceOf: TypeError, message: '🦄'});\n});\n```\n\n### `.notThrows(nonThrower, [message])`\n\nAssert that no error is thrown. `thrower` can be a function which shouldn't throw, or return a promise that should resolve, or an observable that should complete. Alternatively a promise or an observable can be passed directly.\n\nLike the `.throws()` assertion, when testing a promise or an observable you must wait for the assertion to complete:\n\n```js\ntest('resolves', async t => {\n\tawait t.notThrows(promise);\n});\n```\n\n### `.regex(contents, regex, [message])`\n\nAssert that `contents` matches `regex`.\n\n### `.notRegex(contents, regex, [message])`\n\nAssert that `contents` does not match `regex`.\n\n### `.snapshot(expected, [message])`\n### `.snapshot(expected, [options], [message])`\n\nCompares the `expected` value with a previously recorded snapshot. Snapshots are stored for each test, so ensure you give your tests unique titles. Alternatively pass an `options` object to select a specific snapshot, for instance `{id: 'my snapshot'}`.\n\nSnapshot assertions cannot be skipped when snapshots are being updated.\n\n## Snapshot testing\n\nAVA supports snapshot testing, [as introduced by Jest](https://facebook.github.io/jest/docs/snapshot-testing.html), through its [Assertions](#assertions) interface. You can snapshot any value as well as React elements:\n\n```js\n// Your component\nconst HelloWorld = () => <h1>Hello World...!</h1>;\n\nexport default HelloWorld;\n```\n\n```js\n// Your test\nimport test from 'ava';\nimport render from 'react-test-renderer';\nimport HelloWorld from '.';\n\ntest('HelloWorld component', t => {\n\tconst tree = render.create(<HelloWorld/>).toJSON();\n\tt.snapshot(tree);\n});\n```\n\n[Try it out in this example project.](https://github.com/avajs/ava-snapshot-example)\n\nSnapshots are stored alongside your test files. If your tests are in a `test` or `tests` folder the snapshots will be stored in a `snapshots` folder. If your tests are in a `__tests__` folder then they they'll be stored in a `__snapshots__` folder.\n\nSay you have `~/project/test/main.js` which contains snapshot assertions. AVA will create two files:\n\n* `~/project/test/snapshots/main.js.snap`\n* `~/project/test/snapshots/main.js.md`\n\nThe first file contains the actual snapshot and is required for future comparisons. The second file contains your *snapshot report*. It's regenerated when you update your snapshots. If you commit it to source control you can diff it to see the changes to your snapshot.\n\nAVA will show why your snapshot assertion failed:\n\n<img src=\"media/snapshot-testing.png\" width=\"1048\">\n\nYou can then check your code. If the change was intentional you can use the `--update-snapshots` (or `-u`) flag to update the snapshots:\n\n```console\n$ ava --update-snapshots\n```\n\nYou can specify a fixed location for storing the snapshot files in AVA's [`package.json` configuration](#configuration):\n\n```json\n{\n\t\"ava\": {\n\t\t\"snapshotDir\": \"custom-directory\"\n\t}\n}\n```\n\nThe snapshot files will be saved in a directory structure that mirrors that of your test files.\n\nIf you are running AVA against precompiled test files, AVA will try and use source maps to determine the location of the original files. Snapshots will be stored next to these files, following the same rules as if AVA had executed the original files directly. This is great if you're writing your tests in TypeScript (see our [TypeScript recipe](docs/recipes/typescript.md)).\n\n### Skipping assertions\n\nAny assertion can be skipped using the `skip` modifier. Skipped assertions are still counted, so there is no need to change your planned assertion count.\n\n```js\ntest('skip assertion', t => {\n\tt.plan(2);\n\tt.is.skip(foo(), 5); // No need to change your plan count when skipping\n\tt.is(1, 1);\n});\n```\n\n### Enhanced assertion messages\n\nAVA comes with [`power-assert`](https://github.com/power-assert-js/power-assert) built-in, giving you more descriptive assertion messages. It reads your test and tries to infer more information from the code.\n\nLet's take this example, using Node's standard [`assert` library](https://nodejs.org/api/assert.html):\n\n```js\nconst a = /foo/;\nconst b = 'bar';\nconst c = 'baz';\nrequire('assert').ok(a.test(b) || b === c);\n```\n\nIf you paste that into a Node REPL it'll return:\n\n```\nAssertionError: false == true\n```\n\nIn AVA however, this test:\n\n```js\ntest('enhanced assertions', t => {\n\tconst a = /foo/;\n\tconst b = 'bar';\n\tconst c = 'baz';\n\tt.true(a.test(b) || b === c);\n});\n```\n\nWill output:\n\n```\nt.true(a.test(b) || b === c)\n       |      |     |     |\n       |      \"bar\" \"bar\" \"baz\"\n       false\n```\n\n## Process isolation\n\nEach test file is run in a separate Node.js process. This allows you to change the global state or overriding a built-in in one test file, without affecting another. It's also great for performance on modern multi-core processors, allowing multiple test files to execute in parallel.\n\nAVA will set `process.env.NODE_ENV` to `test`, unless the `NODE_ENV` environment variable has been set. This is useful if the code you're testing has test defaults (for example when picking what database to connect to, or environment-specific Babel options). It may cause your code or its dependencies to behave differently though. Note that `'NODE_ENV' in process.env` will always be `true`.\n\n## Tips\n\n### Temp files\n\nRunning tests concurrently comes with some challenges, doing file IO is one.\n\nUsually, serial tests create temp directories in the current test directory and clean them up at the end. This won't work when you run tests concurrently as tests will conflict with each other. The correct way to do it is to use a new temp directory for each test. The [`tempfile`](https://github.com/sindresorhus/tempfile) and [`temp-write`](https://github.com/sindresorhus/temp-write) modules can be helpful.\n\n### Code coverage\n\nYou can't use [`istanbul`](https://github.com/gotwarlost/istanbul) for code coverage as AVA [spawns the test files](#process-isolation). You can use [`nyc`](https://github.com/bcoe/nyc) instead, which is basically `istanbul` with support for subprocesses.\n\nAs of version `5.0.0` it uses source maps to report coverage for your actual code, regardless of transpilation. Make sure that the code you're testing includes an inline source map or references a source map file. If you use `babel-register` you can set the `sourceMaps` option in your Babel config to `inline`.\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [/ˈeɪvə/ ay-və](media/pronunciation.m4a?raw=true).\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Flow](docs/recipes/flow.md)\n- [Configuring Babel][Babel recipe]\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [JSPM and SystemJS](docs/recipes/jspm-systemjs.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Precompiling source files with webpack](docs/recipes/precompiling-with-webpack.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n\n## Support\n\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/ava)\n- [Spectrum](https://spectrum.chat/ava)\n- [Twitter](https://twitter.com/ava__js)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) - Lint rules for AVA tests\n- [sublime-ava](https://github.com/avajs/sublime-ava) - Snippets for AVA tests\n- [atom-ava](https://github.com/avajs/atom-ava) - Snippets for AVA tests\n- [vscode-ava](https://github.com/samverschueren/vscode-ava) - Snippets for AVA tests\n- [gulp-ava](https://github.com/avajs/gulp-ava) - Run tests with gulp\n- [grunt-ava](https://github.com/avajs/grunt-ava) - Run tests with grunt\n- [More…](https://github.com/avajs/awesome-ava#packages)\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [AVA Casts](http://avacasts.com)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus) | [![Vadim Demedes](https://github.com/vadimdemedes.png?size=100)](https://github.com/vadimdemedes)\n---|---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](http://sindresorhus.com) | [Vadim Demedes](https://github.com/vadimdemedes)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://ava.li\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n\n[Babel recipe]: docs/recipes/babel.md\n",
      "readmeFilename": "readme.md",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.0.0-beta.5",
      "_npmVersion": "6.1.0",
      "_nodeVersion": "10.2.1",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-CwhIczIJ+k0ljfGtRv2JgdXOw3vY4a1yq3IdcXHS1hnoeeBBuUQfecEMT66NhACwsP+THo8FHw5U7WV5i2kxdw==",
        "shasum": "57a9fcd28cf65979fc3f8f9bb21699b02f6ef045",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.0.0-beta.5.tgz",
        "fileCount": 51,
        "unpackedSize": 291669,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbEDV9CRA9TVsSAnZWagAA+SAP+wSIEB3+w7JE4QnsIJca\nDtTnqQ8I0m2eaI83FAVoeJuvyyNMtRHEvZ3PQ/9Q6MiRW2TXdjBewIYIO0w4\nXJyGwHZZbse/DDTxqfTbKzTKcCED14q04cKd1EXCbEvldY3RM/7IK20bkR0c\nGI9PDYef0PZaaPvSqkeHRS9ZFAR8mdsw819/9aAVcDai1Z+VjjdnEdGt4j0G\nmXpXrALvF6oxipyIQRycMRoYklED1/3kQThqJL898EYS4XsUATvgdoOavueA\nroZoLm0g+ZIe/n1t7exSVUaBMQMbp7nVUQnvT1czeucpgKMXeAMQxBtEkNxW\nP16dVzaD60LyKJhoP/GbYvwaKEHtyJH3geuoS2JDGqWwNC6OemlriKhGj9W5\nktugZYyQvaYvNEO1Lu3U2gk4wtO2ePmK6E/1Fim6RrO8PXToyNBNS0fO4QyF\nxJPRm/ogoe2f/RQB96ptZIKt+vaF2ZQi+j50LDdlx4tw1e51BDSTfIcolUgQ\n2vv7g8KoXGynJ52MJ6Kfi/g07GVWi+w7excV51AaocreNUTIekk4j8WSNwV6\ny1bkVr3RukC2+7YDWJMamsCcHBNp+FilCGCw00HvZ0x1gQJ8nV5ONGoFc1ns\nQWogVTAbGDJpcU4EZfSWSJRYQJVi3sws9EJIy51LqnRc4wrPxye+hgUngkkm\nPOz0\r\n=kdgr\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGwxb9va7W7uyWtC59LBtaefl6iQWhBKSyk1UYBn5f8NAiAk/DakEvcWxNY7Z23TKcYbqU8Wb+zTt1P+mSuOhelwTQ=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.0.0-beta.5_1527788925192_0.1820796412034098"
      },
      "_hasShrinkwrap": false
    },
    "1.0.0-beta.5.1": {
      "name": "ava",
      "version": "1.0.0-beta.5.1",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=6.12.3 <7 || >=8.9.4 <9 || >=9.11.1 <10 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo && (cd test/fixture && xo '**' '!{source-map-initial,syntax-error}.js' '!snapshots/test-sourcemaps/build/**')",
        "test": "npm run lint && flow check test/flow-types && tsc --noEmit -p test/ts-types && nyc tap --no-cov --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=300 --jobs=1 test/*.js test/reporters/*.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "index.d.ts"
      ],
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "2.0.0-beta.7",
        "@ava/babel-preset-transform-test-files": "4.0.0-beta.6",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "7.0.0-beta.49",
        "@babel/generator": "7.0.0-beta.49",
        "@babel/plugin-syntax-async-generators": "7.0.0-beta.49",
        "@babel/plugin-syntax-object-rest-spread": "7.0.0-beta.49",
        "@babel/plugin-syntax-optional-catch-binding": "7.0.0-beta.49",
        "@concordance/react": "^1.0.0",
        "ansi-escapes": "^3.1.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^2.0.0",
        "arrify": "^1.0.0",
        "auto-bind": "^1.2.0",
        "bluebird": "^3.5.1",
        "chalk": "^2.4.1",
        "chokidar": "^2.0.3",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-truncate": "^1.1.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^3.0.0",
        "convert-source-map": "^1.5.1",
        "currently-unhandled": "^0.4.1",
        "debug": "^3.1.0",
        "del": "^3.0.0",
        "dot-prop": "^4.2.0",
        "emittery": "^0.3.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^1.0.5",
        "esm": "^3.0.40",
        "figures": "^2.0.0",
        "get-port": "^3.2.0",
        "globby": "^7.1.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^1.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^1.1.0",
        "is-error": "^2.2.1",
        "is-generator-fn": "^1.0.0",
        "is-observable": "^1.1.0",
        "is-plain-object": "^2.0.4",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.3.0",
        "matcher": "^1.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^5.0.0",
        "ms": "^2.1.1",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "ora": "^2.1.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.1.0",
        "plur": "^3.0.1",
        "pretty-ms": "^3.2.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "slash": "^2.0.0",
        "source-map-support": "^0.5.6",
        "stack-utils": "^1.0.1",
        "strip-ansi": "^4.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^5.4.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.5.0"
      },
      "devDependencies": {
        "cli-table2": "^0.2.0",
        "codecov": "^3.0.2",
        "delay": "^3.0.0",
        "execa": "^0.10.0",
        "flow-bin": "^0.73.0",
        "get-stream": "^3.0.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^2.7.0",
        "nyc": "^11.8.0",
        "proxyquire": "^2.0.1",
        "react": "^16.4.0",
        "react-test-renderer": "^16.4.0",
        "replace-string": "^1.1.0",
        "signal-exit": "^3.0.0",
        "sinon": "^5.0.10",
        "source-map-fixtures": "^2.1.0",
        "tap": "^12.0.1",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "typescript": "^2.8.3",
        "xo": "^0.21.1",
        "zen-observable": "^0.8.8"
      },
      "typings": "index.d.ts",
      "xo": {
        "ignores": [
          "media/**"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off",
          "prefer-destructuring": "off",
          "prefer-rest-params": "off",
          "prefer-spread": "off",
          "unicorn/prefer-spread": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "a4f741cfb7b32c92a2031e6d11bfdab71acc1a61",
      "readme": "# [![AVA](media/header.png)](https://ava.li)\n\n> Futuristic test runner\n\n[![Build Status: Linux](https://travis-ci.org/avajs/ava.svg?branch=master)](https://travis-ci.org/avajs/ava) [![Build status: Windows](https://ci.appveyor.com/api/projects/status/e7v91mu2m5x48ehx/branch/master?svg=true)](https://ci.appveyor.com/project/ava/ava/branch/master) [![Coverage Status](https://coveralls.io/repos/github/avajs/ava/badge.svg?branch=master)](https://coveralls.io/github/avajs/ava?branch=master) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo) [![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/ava)\n [![Mentioned in Awesome Node.js](https://awesome.re/mentioned-badge.svg)](https://github.com/sindresorhus/awesome-nodejs)\n\nEven though JavaScript is single-threaded, IO in Node.js can happen in parallel due to its async nature. AVA takes advantage of this and runs your tests concurrently, which is especially beneficial for IO heavy tests. In addition, test files are run in parallel as separate processes, giving you even better performance and an isolated environment for each test file. [Switching](https://github.com/sindresorhus/pageres/commit/663be15acb3dd2eb0f71b1956ef28c2cd3fdeed0) from Mocha to AVA in Pageres brought the test time down from 31 to 11 seconds. Having tests run concurrently forces you to write atomic tests, meaning tests don't depend on global state or the state of other tests, which is a great thing!\n\n![](media/mini-reporter.gif)\n\n*Read our [contributing guide](contributing.md) if you're looking to contribute (issues/PRs/etc).*\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\n**This documentation covers the 1.0 beta releases, which use Babel 7. The last release that uses Babel 6 is [`v0.25.0`](https://github.com/avajs/ava/tree/v0.25.0).**\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Contents\n\n- [Usage](#usage)\n- [CLI Usage](#cli)\n- [Debugging](#debugging)\n- [Reporters](#reporters)\n- [Configuration](#configuration)\n- [Documentation](#documentation)\n- [API](#api)\n- [Assertions](#assertions)\n- [Snapshot testing](#snapshot-testing)\n- [Tips](#tips)\n- [FAQ](#faq)\n- [Recipes](#recipes)\n- [Support](#support)\n- [Related](#related)\n- [Links](#links)\n- [Team](#team)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript & Flow type definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](#process-isolation)\n- [Write your tests using the latest JavaScript syntax](#latest-javascript-support)\n- [Promise support](#promise-support)\n- [Generator function support](#generator-function-support)\n- [Async function support](#async-function-support)\n- [Observable support](#observable-support)\n- [Enhanced assertion messages](#enhanced-assertion-messages)\n- [TAP reporter](#tap-reporter)\n- [Automatic migration from other test runners](https://github.com/avajs/ava-codemods#migrating-to-ava)\n\n\n## Test syntax\n\n```js\nimport test from 'ava';\n\ntest('arrays are equal', t => {\n\tt.deepEqual([1, 2], [1, 2]);\n});\n```\n\n## Usage\n\n### Add AVA to your project\n\nTo install and set up AVA, run:\n\n```console\n$ npx create-ava --next\n```\n\nYour `package.json` will then look like this:\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"1.0.0-beta.4\"\n\t}\n}\n```\n\nInitialization will work with npm and Yarn, but running `npx` requires [`npm@5.2.0`](https://github.com/npm/npm/releases/tag/v5.2.0) or greater to be installed. Otherwise, you'll have to manually install `ava` and configure the `test` script in your `package.json` as per above:\n\n```console\n$ npm install --save-dev --save-exact ava@next\n```\n\nOr if you prefer using Yarn:\n\n```console\n$ yarn add ava@next --dev --exact\n```\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nimport test from 'ava';\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\n\tt.is(await bar, 'bar');\n});\n```\n\n### Run it\n\n```console\n$ npm test\n```\n\n### Watch it\n\n```console\n$ npm test -- --watch\n```\n\nAVA comes with an intelligent watch mode. [Learn more in its recipe](docs/recipes/watch-mode.md).\n\n### Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## CLI\n\n```console\n$ ava --help\n\n  Usage\n    ava [<file|directory|glob> ...]\n\n  Options\n    --watch, -w             Re-run tests when tests and source files change\n    --match, -m             Only run tests with matching title (Can be repeated)\n    --update-snapshots, -u  Update snapshots\n    --fail-fast             Stop after first test failure\n    --timeout, -T           Set global timeout\n    --serial, -s            Run tests serially\n    --concurrency, -c       Max number of test files running at the same time (Default: CPU cores)\n    --verbose, -v           Enable verbose output\n    --tap, -t               Generate TAP output\n    --color                 Force color output\n    --no-color              Disable color output\n\n  Examples\n    ava\n    ava test.js test2.js\n    ava test-*.js\n    ava test\n\n  Default patterns when no arguments:\n  test.js test-*.js test/**/*.js **/__tests__/**/*.js **/*.test.js\n```\n\n*Note that the CLI will use your local install of AVA when available, even when run globally.*\n\nDirectories are recursed, with all `*.js` files being treated as test files. Directories named `fixtures`, `helpers` and `node_modules` are *always* ignored. So are files starting with `_` which allows you to place helpers in the same directory as your test files.\n\nWhen using `npm test`, you can pass positional arguments directly `npm test test2.js`, but flags needs to be passed like `npm test -- --verbose`.\n\n\n## Debugging\n\nAVA runs tests in child processes, so to debug tests, you need to do this workaround:\n\n```console\n$ node --inspect node_modules/ava/profile.js some/test/file.js\n```\n\n### Debugger-specific tips\n\n- [Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Visual Studio Code](docs/recipes/debugging-with-vscode.md)\n\n\n## Reporters\n\n### Mini-reporter\n\nThe mini-reporter is the default reporter.\n\n<img src=\"media/mini-reporter.gif\" width=\"460\">\n\n### Verbose reporter\n\nUse the `--verbose` flag to enable the verbose reporter. This is always used in CI environments unless the [TAP reporter](#tap-reporter) is enabled.\n\n<img src=\"media/verbose-reporter.png\" width=\"294\">\n\n### TAP reporter\n\nAVA supports the TAP format and thus is compatible with [any TAP reporter](https://github.com/sindresorhus/awesome-tap#reporters). Use the `--tap` flag to enable TAP output.\n\n```console\n$ ava --tap | tap-nyan\n```\n\n<img src=\"media/tap-reporter.png\" width=\"420\">\n\nPlease note that the TAP reporter is unavailable when using [watch mode](#watch-it).\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n\n## Configuration\n\nAll of the CLI options can be configured in the `ava` section of either your `package.json` or an `ava.config.js` file. This allows you to modify the default behavior of the `ava` command, so you don't have to repeatedly type the same options on the command prompt.\n\nTo ignore a file or directory, prefix the pattern with an `!` (exclamation mark).\n\n```json\n{\n\t\"ava\": {\n\t\t\"files\": [\n\t\t\t\"my-test-directory/**/*.js\",\n\t\t\t\"!my-test-directory/exclude-this-directory/**/*.js\",\n\t\t\t\"!**/exclude-this-file.js\"\n\t\t],\n\t\t\"sources\": [\n\t\t\t\"**/*.{js,jsx}\",\n\t\t\t\"!dist/**/*\"\n\t\t],\n\t\t\"match\": [\n\t\t\t\"*oo\",\n\t\t\t\"!foo\"\n\t\t],\n\t\t\"cache\": true,\n\t\t\"concurrency\": 5,\n\t\t\"failFast\": true,\n\t\t\"failWithoutAssertions\": false,\n\t\t\"tap\": true,\n\t\t\"compileEnhancements\": false,\n\t\t\"require\": [\n\t\t\t\"@babel/register\"\n\t\t],\n\t\t\"babel\": {\n\t\t\t\"extensions\": [\"jsx\"],\n\t\t\t\"testOptions\": {\n\t\t\t\t\"babelrc\": false\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nArguments passed to the CLI will always take precedence over the configuration in `package.json`.\n\n### Options\n\n- `files`: file & directory paths and glob patterns that select which files AVA will run tests from. Files with an underscore prefix are ignored. All matched files in selected directories are run. By default only selects files with `js` extensions, even if the glob pattern matches other files. Specify `extensions` and `babel.extensions` to allow other file extensions\n- `source`: files that, when changed, cause tests to be re-run in watch mode. See the [watch mode recipe for details](https://github.com/avajs/ava/blob/master/docs/recipes/watch-mode.md#source-files-and-test-files)\n- `match`: not typically useful in the `package.json` configuration, but equivalent to [specifying `--match` on the CLI](#running-tests-with-matching-titles)\n- `cache`: cache compiled test and helper files under `node_modules/.cache/ava`. If `false`, files are cached in a temporary directory instead\n- `failFast`: stop running further tests once a test fails\n- `failWithoutAssertions`: if `false`, does not fail a test if it doesn't run [assertions](#assertions)\n- `tap`: if `true`, enables the [TAP reporter](#tap-reporter)\n- `snapshotDir`: specifies a fixed location for storing snapshot files. Use this if your snapshots are ending up in the wrong location\n- `compileEnhancements`: if `false`, disables [power-assert](https://github.com/power-assert-js/power-assert) — which otherwise helps provide more descriptive error messages — and detection of improper use of the `t.throws()` assertion\n- `extensions`: extensions of test files that are not precompiled using AVA's Babel presets. Note that files are still compiled to enable power-assert and other features, so you may also need to set `compileEnhancements` to `false` if your files are not valid JavaScript. Setting this overrides the default `\"js\"` value, so make sure to include that extension in the list, as long as it's not included in `babel.extensions`\n- `require`: extra modules to require before tests are run. Modules are required in the [worker processes](#process-isolation)\n- `babel`: test file specific Babel options. See our [Babel recipe] for more details\n- `babel.extensions`: extensions of test files that will be precompiled using AVA's Babel presets. Setting this overrides the default `\"js\"` value, so make sure to include that extension in the list\n\nNote that providing files on the CLI overrides the `files` option. If you've configured a glob pattern, for instance `test/**/*.test.js`, you may want to repeat it when using the CLI: `ava 'test/integration/*.test.js'`.\n\n### Using `ava.config.js`\n\nTo use an `ava.config.js` file:\n\n 1. It must be in the same directory as your `package.json`\n 2. Your `package.json` must not contain an `ava` property (or, if it does, it must be an empty object)\n\nThe config file must have a default export, using ES modules. It can either be a plain object or a factory function which returns a plain object:\n\n```js\nexport default {\n\trequire: ['esm']\n};\n```\n\n```js\nexport default function factory() {\n\treturn {\n\t\trequire: ['esm']\n\t};\n};\n```\n\nThe factory function is called with an object containing a `projectDir` property, which you could use to change the returned configuration:\n\n```js\nexport default ({projectDir}) => {\n\tif (projectDir === '/Users/username/projects/my-project') {\n\t\treturn {\n\t\t\t// Config A\n\t\t};\n\t}\n\n\treturn {\n\t\t// Config B\n\t};\n};\n```\n\nNote that the final configuration must not be a promise.\n\n## Documentation\n\nTests are run concurrently. You can specify synchronous and asynchronous tests. Tests are considered synchronous unless you return a promise or [observable](https://github.com/zenparsing/zen-observable).\n\nWe *highly* recommend the use of [async functions](#async-function-support). They make asynchronous code concise and readable, and they implicitly return a promise so you don't have to.\n\nIf you're unable to use promises or observables, you may enable \"callback mode\" by defining your test with `test.cb([title], fn)`. Tests declared this way **must** be manually ended with `t.end()`. This mode is mainly intended for testing callback-style APIs. However, we would strongly recommend [promisifying](https://github.com/sindresorhus/pify) callback-style APIs instead of using \"callback mode\", as this results in more correct and readable tests.\n\nYou must define all tests synchronously. They can't be defined inside `setTimeout`, `setImmediate`, etc.\n\nAVA tries to run test files with their current working directory set to the directory that contains your `package.json` file.\n\n### Creating tests\n\nTo create a test you call the `test` function you imported from AVA. Provide the required title and implementation function. Titles must be unique within each test file. The function will be called when your test is run. It's passed an [execution object](#t) as its first argument.\n\n**Note:** In order for the [enhanced assertion messages](#enhanced-assertion-messages) to behave correctly, the first argument **must** be named `t`.\n\n```js\nimport test from 'ava';\n\ntest('my passing test', t => {\n\tt.pass();\n});\n```\n\n### Assertion planning\n\nAssertion plans ensure tests only pass when a specific number of assertions have been executed. They'll help you catch cases where tests exit too early. They'll also cause tests to fail if too many assertions are executed, which can be useful if you have assertions inside callbacks or loops.\n\nIf you do not specify an assertion plan, your test will still fail if no assertions are executed. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration) to disable this behavior.\n\nNote that, unlike [`tap`](https://www.npmjs.com/package/tap) and [`tape`](https://www.npmjs.com/package/tape), AVA does *not* automatically end a test when the planned assertion count is reached.\n\nThese examples will result in a passed test:\n\n```js\ntest('resolves with 3', t => {\n\tt.plan(1);\n\n\treturn Promise.resolve(3).then(n => {\n\t\tt.is(n, 3);\n\t});\n});\n\ntest.cb('invokes callback', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t\tt.end();\n\t});\n});\n```\n\nThese won't:\n\n```js\ntest('loops twice', t => {\n\tt.plan(2);\n\n\tfor (let i = 0; i < 3; i++) {\n\t\tt.true(i < 3);\n\t}\n}); // Fails, 3 assertions are executed which is too many\n\ntest('invokes callback synchronously', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t});\n}); // Fails, the test ends synchronously before the assertion is executed\n```\n\n### Running tests serially\n\nTests are run concurrently by default, however, sometimes you have to write tests that cannot run concurrently. In these rare cases you can use the `.serial` modifier. It will force those tests to run serially *before* the concurrent ones.\n\n```js\ntest.serial('passes serially', t => {\n\tt.pass();\n});\n```\n\nNote that this only applies to tests within a particular test file. AVA will still run multiple tests files at the same time unless you pass the [`--serial` CLI flag](#cli).\n\nYou can use the `.serial` modifier with all tests, hooks and even `.todo()`, but it's only available on the `test` function.\n\n### Running specific tests\n\nDuring development it can be helpful to only run a few specific tests. This can be accomplished using the `.only` modifier:\n\n```js\ntest('will not be run', t => {\n\tt.fail();\n});\n\ntest.only('will be run', t => {\n\tt.pass();\n});\n```\n\nYou can use the `.only` modifier with all tests. It cannot be used with hooks or `.todo()`.\n\n*Note:* The `.only` modifier applies to the test file it's defined in, so if you run multiple test files, tests in other files will still run. If you want to only run the `test.only` test, provide just that test file to AVA.\n\n### Running tests with matching titles\n\nThe `--match` flag allows you to run just the tests that have a matching title. This is achieved with simple wildcard patterns. Patterns are case insensitive. See [`matcher`](https://github.com/sindresorhus/matcher) for more details.\n\nMatch titles ending with `foo`:\n\n```console\n$ ava --match='*foo'\n```\n\nMatch titles starting with `foo`:\n\n```console\n$ ava --match='foo*'\n```\n\nMatch titles containing `foo`:\n\n```console\n$ ava --match='*foo*'\n```\n\nMatch titles that are *exactly* `foo` (albeit case insensitively):\n\n```console\n$ ava --match='foo'\n```\n\nMatch titles not containing `foo`:\n\n```console\n$ ava --match='!*foo*'\n```\n\nMatch titles starting with `foo` and ending with `bar`:\n\n```console\n$ ava --match='foo*bar'\n```\n\nMatch titles starting with `foo` or ending with `bar`:\n\n```console\n$ ava --match='foo*' --match='*bar'\n```\n\nNote that a match pattern takes precedence over the `.only` modifier. Only tests with an explicit title are matched. Tests without titles or whose title is derived from the implementation function will be skipped when `--match` is used.\n\nHere's what happens when you run AVA with a match pattern of `*oo*` and the following tests:\n\n```js\ntest('foo will run', t => {\n\tt.pass();\n});\n\ntest('moo will also run', t => {\n\tt.pass();\n});\n\ntest.only('boo will run but not exclusively', t => {\n\tt.pass();\n});\n\n// Won't run, no title\ntest(function (t) {\n\tt.fail();\n});\n\n// Won't run, no explicit title\ntest(function foo(t) {\n\tt.fail();\n});\n```\n\n### Skipping tests\n\nSometimes failing tests can be hard to fix. You can tell AVA to skip these tests using the `.skip` modifier. They'll still be shown in the output (as having been skipped) but are never run.\n\n```js\ntest.skip('will not be run', t => {\n\tt.fail();\n});\n```\n\nYou must specify the implementation function. You can use the `.skip` modifier with all tests and hooks, but not with `.todo()`. You can not apply further modifiers to `.skip`.\n\n### Test placeholders (\"todo\")\n\nYou can use the `.todo` modifier when you're planning to write a test. Like skipped tests these placeholders are shown in the output. They only require a title; you cannot specify the implementation function.\n\n```js\ntest.todo('will think about writing this later');\n```\n\nYou can signal that you need to write a serial test:\n\n```js\ntest.serial.todo('will think about writing this later');\n```\n\n### Failing tests\n\nYou can use the `.failing` modifier to document issues with your code that need to be fixed. Failing tests are run just like normal ones, but they are expected to fail, and will not break your build when they do. If a test marked as failing actually passes, it will be reported as an error and fail the build with a helpful message instructing you to remove the `.failing` modifier.\n\nThis allows you to merge `.failing` tests before a fix is implemented without breaking CI. This is a great way to recognize good bug report PR's with a commit credit, even if the reporter is unable to actually fix the problem.\n\n```js\n// See: github.com/user/repo/issues/1234\ntest.failing('demonstrate some bug', t => {\n\tt.fail(); // Test will count as passed\n});\n```\n\n### Before & after hooks\n\nAVA lets you register hooks that are run before and after your tests. This allows you to run setup and/or teardown code.\n\n`test.before()` registers a hook to be run before the first test in your test file. Similarly `test.after()` registers a hook to be run after the last test. Use `test.after.always()` to register a hook that will **always** run once your tests and other hooks complete. `.always()` hooks run regardless of whether there were earlier failures, so they are ideal for cleanup tasks. Note however that uncaught exceptions, unhandled rejections or timeouts will crash your tests, possibly preventing `.always()` hooks from running.\n\n`test.beforeEach()` registers a hook to be run before each test in your test file. Similarly `test.afterEach()` a hook to be run after each test. Use `test.afterEach.always()` to register an after hook that is called even if other test hooks, or the test itself, fail.\n\nIf a test is skipped with the `.skip` modifier, the respective `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks are not run. Likewise, if all tests in a test file are skipped `.before()`, `.after()` and `.after.always()` hooks for the file are not run.\n\nLike `test()` these methods take an optional title and an implementation function. The title is shown if your hook fails to execute. The implementation is called with an [execution object](#t). You can use assertions in your hooks. You can also pass a [macro function](#test-macros) and additional arguments.\n\n`.before()` hooks execute before `.beforeEach()` hooks. `.afterEach()` hooks execute before `.after()` hooks. Within their category the hooks execute in the order they were defined. By default hooks execute concurrently, but you can use `test.serial` to ensure only that single hook is run at a time. Unlike with tests, serial hooks are *not* run before other hooks:\n\n```js\ntest.before(t => {\n\t// This runs before all tests\n});\n\ntest.before(t => {\n\t// This runs concurrently with the above\n});\n\ntest.serial.before(t => {\n\t// This runs after the above\n});\n\ntest.serial.before(t => {\n\t// This too runs after the above, and before tests\n});\n\ntest.after('cleanup', t => {\n\t// This runs after all tests\n});\n\ntest.after.always('guaranteed cleanup', t => {\n\t// This will always run, regardless of earlier failures\n});\n\ntest.beforeEach(t => {\n\t// This runs before each test\n});\n\ntest.afterEach(t => {\n\t// This runs after each test\n});\n\ntest.afterEach.always(t => {\n\t// This runs after each test and other test hooks, even if they failed\n});\n\ntest('title', t => {\n\t// Regular test\n});\n```\n\nHooks can be synchronous or asynchronous, just like tests. To make a hook asynchronous return a promise or observable, use an async function, or enable callback mode via `test.before.cb()`, `test.beforeEach.cb()` etc.\n\n```js\ntest.before(async t => {\n\tawait promiseFn();\n});\n\ntest.after(t => {\n\treturn new Promise(/* ... */);\n});\n\ntest.beforeEach.cb(t => {\n\tsetTimeout(t.end);\n});\n\ntest.afterEach.cb(t => {\n\tsetTimeout(t.end);\n});\n```\n\nKeep in mind that the `.beforeEach()` and `.afterEach()` hooks run just before and after a test is run, and that by default tests run concurrently. This means each multiple `.beforeEach()` hooks may run concurrently. Using `test.serial.beforeEach()` does not change this. If you need to set up global state for each test (like spying on `console.log` [for example](https://github.com/avajs/ava/issues/560)), you'll need to make sure the tests themselves are [run serially](#running-tests-serially).\n\nRemember that AVA runs each test file in its own process. You may not have to clean up global state in a `.after()`-hook since that's only called right before the process exits.\n\n#### Test context\n\nHooks can share context with the test:\n\n```js\ntest.beforeEach(t => {\n\tt.context.data = generateUniqueData();\n});\n\ntest('context data is foo', t => {\n\tt.is(t.context.data + 'bar', 'foobar');\n});\n```\n\nContext created in `.before()` hooks is [cloned](https://www.npmjs.com/package/lodash.clone) before it is passed to `.beforeEach()` hooks and / or tests. The `.after()` and `.after.always()` hooks receive the original context value.\n\nFor `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks the context is *not* shared between different tests, allowing you to set up data such that it will not leak to other tests.\n\nBy default `t.context` is an object but you can reassign it:\n\n```js\ntest.before(t => {\n\tt.context = 'unicorn';\n});\n\ntest('context is unicorn', t => {\n\tt.is(t.context, 'unicorn');\n});\n```\n\n### Test macros\n\nAdditional arguments passed to the test declaration will be passed to the test implementation. This is useful for creating reusable test macros.\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\ntest('2 + 2 = 4', macro, '2 + 2', 4);\ntest('2 * 3 = 6', macro, '2 * 3', 6);\n```\n\nYou can build the test title programmatically by attaching a `title` function to the macro:\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nmacro.title = (providedTitle, input, expected) => `${providedTitle} ${input} = ${expected}`.trim();\n\ntest(macro, '2 + 2', 4);\ntest(macro, '2 * 3', 6);\ntest('providedTitle', macro, '3 * 3', 9);\n```\n\nThe `providedTitle` argument defaults to an empty string if the user does not supply a string title. This allows for easy concatenation without having to worry about `null` / `undefined`. It is worth remembering that the empty string is considered a falsy value, so you can still use `if(providedTitle) {...}`.\n\nYou can also pass arrays of macro functions:\n\n```js\nconst safeEval = require('safe-eval');\n\nfunction evalMacro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nfunction safeEvalMacro(t, input, expected) {\n\tt.is(safeEval(input), expected);\n}\n\ntest([evalMacro, safeEvalMacro], '2 + 2', 4);\ntest([evalMacro, safeEvalMacro], '2 * 3', 6);\n```\n\nWe encourage you to use macros instead of building your own test generators ([here is an example](https://github.com/avajs/ava-codemods/blob/47073b5b58aa6f3fb24f98757be5d3f56218d160/test/ok-to-truthy.js#L7-L9) of code that should be replaced with a macro). Macros are designed to perform static analysis of your code, which can lead to better performance, IDE integration, and linter rules.\n\n### Custom assertions\n\nYou can use any assertion library instead of or in addition to the built-in one, provided it throws exceptions when the assertion fails.\n\nThis won't give you as nice an experience as you'd get with the [built-in assertions](#assertions) though, and you won't be able to use the [assertion planning](#assertion-planning) ([see #25](https://github.com/avajs/ava/issues/25)).\n\nYou'll have to configure AVA to not fail tests if no assertions are executed, because AVA can't tell if custom assertions pass. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration).\n\n```js\nimport assert from 'assert';\n\ntest('custom assertion', t => {\n\tassert(true);\n});\n```\n\n### Latest JavaScript support\n\nAVA uses [Babel 7](https://babeljs.io) so you can use the latest JavaScript syntax in your tests. There is no extra setup required. You don't need to be using Babel in your own project for this to work either.\n\nWe aim support all [finished syntax proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md), as well as all syntax from ratified JavaScript versions (e.g. ES2017). See our [`@ava/stage-4`](https://github.com/avajs/babel-preset-stage-4) preset for the currently supported proposals.\n\nPlease note that we do not add or modify built-ins. For example, if you use [`Object.entries()`](https://github.com/tc39/proposal-object-values-entries) in your tests, they will crash in Node.js 6 which does not implement this method.\n\nYou can disable this syntax support, or otherwise customize AVA's Babel pipeline. See our [Babel recipe] for more details.\n\n### TypeScript support\n\nAVA includes typings for TypeScript. You have to set up transpilation yourself. When you set `module` to `commonjs` in your `tsconfig.json` file, TypeScript will automatically find the type definitions for AVA. You should set `target` to `es2015` to use promises and async functions.\n\nSee AVA's [TypeScript recipe](docs/recipes/typescript.md) for a more detailed explanation.\n\n### Transpiling imported modules\n\nAVA currently only transpiles the tests you ask it to run, as well as test helpers (files starting with `_` or in `helpers` directory) inside the test directory. *It will not transpile modules you `import` from outside of the test.* This may be unexpected but there are workarounds.\n\nIf you use Babel you can use its [require hook](https://babeljs.io/docs/usage/require/) to transpile imported modules on-the-fly. To add it, [configure it in your `package.json`](#configuration).\n\nYou can also transpile your modules in a separate process and refer to the transpiled files rather than the sources from your tests. Example [here](docs/recipes/precompiling-with-webpack.md).\n\n### Promise support\n\nIf you return a promise in the test you don't need to explicitly end the test as it will end when the promise resolves.\n\n```js\ntest('resolves with unicorn', t => {\n\treturn somePromise().then(result => {\n\t\tt.is(result, 'unicorn');\n\t});\n});\n```\n\n### Generator function support\n\nAVA comes with built-in support for [generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*).\n\n```js\ntest(function * (t) {\n\tconst value = yield generatorFn();\n\tt.true(value);\n});\n```\n\n### Async function support\n\nAVA comes with built-in support for [async functions](https://tc39.github.io/ecmascript-asyncawait/) *(async/await)*.\n\n```js\ntest(async function (t) {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n\n// Async arrow function\ntest('promises the truth', async t => {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n```\n\n### Observable support\n\nAVA comes with built-in support for [observables](https://github.com/zenparsing/es-observable). If you return an observable from a test, AVA will automatically consume it to completion before ending the test.\n\n*You do not need to use \"callback mode\" or call `t.end()`.*\n\n```js\ntest('handles observables', t => {\n\tt.plan(3);\n\treturn Observable.of(1, 2, 3, 4, 5, 6)\n\t\t.filter(n => {\n\t\t\t// Only even numbers\n\t\t\treturn n % 2 === 0;\n\t\t})\n\t\t.map(() => t.pass());\n});\n```\n\n### Callback support\n\nAVA supports using `t.end` as the final callback when using node-style error-first callback APIs. AVA will consider any truthy value passed as the first argument to `t.end` to be an error. Note that `t.end` requires \"callback mode\", which can be enabled by using the `test.cb` chain.\n\n```js\ntest.cb('data.txt can be read', t => {\n\t// `t.end` automatically checks for error as first argument\n\tfs.readFile('data.txt', t.end);\n});\n```\n\n### Global timeout\n\nA global timeout can be set via the `--timeout` option. Timeout in AVA behaves differently than in other test frameworks. AVA resets a timer after each test, forcing tests to quit if no new test results were received within the specified timeout. This can be used to handle stalled tests.\n\nYou can set timeouts in a human-readable way:\n\n```console\n$ ava --timeout=10s # 10 seconds\n$ ava --timeout=2m # 2 minutes\n$ ava --timeout=100 # 100 milliseconds\n```\n\n## API\n\n### `test([title], implementation)`\n### `test.serial([title], implementation)`\n### `test.cb([title], implementation)`\n### `test.only([title], implementation)`\n### `test.skip([title], implementation)`\n### `test.todo(title)`\n### `test.failing([title], implementation)`\n### `test.before([title], implementation)`\n### `test.after([title], implementation)`\n### `test.beforeEach([title], implementation)`\n### `test.afterEach([title], implementation)`\n\n#### `title`\n\nType: `string`\n\nTest title.\n\n#### `implementation(t)`\n\nType: `function`\n\nShould contain the actual test.\n\n##### `t`\n\nType: `object`\n\nThe execution object of a particular test. Each test implementation receives a different object. Contains the [assertions](#assertions) as well as `.plan(count)` and `.end()` methods. `t.context` can contain shared state from hooks. `t.title` returns the test's title.\n\n###### `t.plan(count)`\n\nPlan how many assertion there are in the test. The test will fail if the actual assertion count doesn't match the number of planned assertions. See [assertion planning](#assertion-planning).\n\n###### `t.end()`\n\nEnd the test. Only works with `test.cb()`.\n\n###### `t.log(...values)`\n\nLog values contextually alongside the test result instead of immediately printing them to `stdout`. Behaves somewhat like `console.log`, but without support for placeholder tokens.\n\n## Assertions\n\nAssertions are mixed into the [execution object](#t) provided to each test implementation:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy('unicorn'); // Assertion\n});\n```\n\nAssertions are bound to their test so you can assign them to a variable or pass them around:\n\n```js\ntest('unicorns are truthy', t => {\n\tconst truthy = t.truthy;\n\ttruthy('unicorn');\n});\n```\n\nAssertions can be skipped by adding `.skip()`:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy.skip('unicorn');\n});\n```\n\nIf multiple assertion failures are encountered within a single test, AVA will only display the *first* one.\n\n### `.pass([message])`\n\nPassing assertion.\n\n### `.fail([message])`\n\nFailing assertion.\n\n### `.truthy(value, [message])`\n\nAssert that `value` is truthy.\n\n### `.falsy(value, [message])`\n\nAssert that `value` is falsy.\n\n### `.true(value, [message])`\n\nAssert that `value` is `true`.\n\n### `.false(value, [message])`\n\nAssert that `value` is `false`.\n\n### `.is(value, expected, [message])`\n\nAssert that `value` is the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.not(value, expected, [message])`\n\nAssert that `value` is not the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.deepEqual(value, expected, [message])`\n\nAssert that `value` is deeply equal to `expected`. See [Concordance](https://github.com/concordancejs/concordance) for details. Works with [React elements and `react-test-renderer`](https://github.com/concordancejs/react).\n\n### `.notDeepEqual(value, expected, [message])`\n\nAssert that `value` is not deeply equal to `expected`. The inverse of `.deepEqual()`.\n\n### `.throws(thrower, [expected, [message]])`\n\nAssert that an error is thrown. `thrower` can be a function which should throw, or return a promise that should reject, or an observable that should error. Alternatively a promise or observable can be passed directly.\n\nThe thrown value *must* be an error. It is returned so you can run more assertions against it.\n\n`expected` can be a constructor, in which case the thrown error must be an instance of the constructor. It can be a string, which is compared against the thrown error's message, or a regular expression which is matched against this message. You can also specify a matcher object with one or more of the following properties:\n\n* `instanceOf`: a constructor, the thrown error must be an instance of\n* `is`: the thrown error must be strictly equal to `expected.is`\n* `message`: either a string, which is compared against the thrown error's message, or a regular expression, which is matched against this message\n* `name`: the expected `.name` value of the thrown error\n* `code`: the expected `.code` value of the thrown error\n\n`expected` does not need to be specified. If you don't need it but do want to set an assertion message you have to specify `null`.\n\nExample:\n\n```js\nconst fn = () => {\n\tthrow new TypeError('🦄');\n};\n\ntest('throws', t => {\n\tconst error = t.throws(() => {\n\t\tfn();\n\t}, TypeError);\n\n\tt.is(error.message, '🦄');\n});\n```\n\n```js\nconst promise = Promise.reject(new TypeError('🦄'));\n\ntest('rejects', async t => {\n\tconst error = await t.throws(promise);\n\tt.is(error.message, '🦄');\n});\n```\n\nWhen testing an observable or promise you must wait for the assertion to complete:\n\n```js\ntest('rejects', async t => {\n\tawait t.throws(promise);\n});\n```\n\nWhen testing an asynchronous function you must also wait for the assertion to complete:\n\n```js\ntest('throws', async t => {\n\tawait t.throws(async () => {\n\t\tthrow new TypeError('🦄');\n\t}, {instanceOf: TypeError, message: '🦄'});\n});\n```\n\n### `.notThrows(nonThrower, [message])`\n\nAssert that no error is thrown. `thrower` can be a function which shouldn't throw, or return a promise that should resolve, or an observable that should complete. Alternatively a promise or an observable can be passed directly.\n\nLike the `.throws()` assertion, when testing a promise or an observable you must wait for the assertion to complete:\n\n```js\ntest('resolves', async t => {\n\tawait t.notThrows(promise);\n});\n```\n\n### `.regex(contents, regex, [message])`\n\nAssert that `contents` matches `regex`.\n\n### `.notRegex(contents, regex, [message])`\n\nAssert that `contents` does not match `regex`.\n\n### `.snapshot(expected, [message])`\n### `.snapshot(expected, [options], [message])`\n\nCompares the `expected` value with a previously recorded snapshot. Snapshots are stored for each test, so ensure you give your tests unique titles. Alternatively pass an `options` object to select a specific snapshot, for instance `{id: 'my snapshot'}`.\n\nSnapshot assertions cannot be skipped when snapshots are being updated.\n\n## Snapshot testing\n\nAVA supports snapshot testing, [as introduced by Jest](https://facebook.github.io/jest/docs/snapshot-testing.html), through its [Assertions](#assertions) interface. You can snapshot any value as well as React elements:\n\n```js\n// Your component\nconst HelloWorld = () => <h1>Hello World...!</h1>;\n\nexport default HelloWorld;\n```\n\n```js\n// Your test\nimport test from 'ava';\nimport render from 'react-test-renderer';\nimport HelloWorld from '.';\n\ntest('HelloWorld component', t => {\n\tconst tree = render.create(<HelloWorld/>).toJSON();\n\tt.snapshot(tree);\n});\n```\n\n[Try it out in this example project.](https://github.com/avajs/ava-snapshot-example)\n\nSnapshots are stored alongside your test files. If your tests are in a `test` or `tests` folder the snapshots will be stored in a `snapshots` folder. If your tests are in a `__tests__` folder then they they'll be stored in a `__snapshots__` folder.\n\nSay you have `~/project/test/main.js` which contains snapshot assertions. AVA will create two files:\n\n* `~/project/test/snapshots/main.js.snap`\n* `~/project/test/snapshots/main.js.md`\n\nThe first file contains the actual snapshot and is required for future comparisons. The second file contains your *snapshot report*. It's regenerated when you update your snapshots. If you commit it to source control you can diff it to see the changes to your snapshot.\n\nAVA will show why your snapshot assertion failed:\n\n<img src=\"media/snapshot-testing.png\" width=\"1048\">\n\nYou can then check your code. If the change was intentional you can use the `--update-snapshots` (or `-u`) flag to update the snapshots:\n\n```console\n$ ava --update-snapshots\n```\n\nYou can specify a fixed location for storing the snapshot files in AVA's [`package.json` configuration](#configuration):\n\n```json\n{\n\t\"ava\": {\n\t\t\"snapshotDir\": \"custom-directory\"\n\t}\n}\n```\n\nThe snapshot files will be saved in a directory structure that mirrors that of your test files.\n\nIf you are running AVA against precompiled test files, AVA will try and use source maps to determine the location of the original files. Snapshots will be stored next to these files, following the same rules as if AVA had executed the original files directly. This is great if you're writing your tests in TypeScript (see our [TypeScript recipe](docs/recipes/typescript.md)).\n\n### Skipping assertions\n\nAny assertion can be skipped using the `skip` modifier. Skipped assertions are still counted, so there is no need to change your planned assertion count.\n\n```js\ntest('skip assertion', t => {\n\tt.plan(2);\n\tt.is.skip(foo(), 5); // No need to change your plan count when skipping\n\tt.is(1, 1);\n});\n```\n\n### Enhanced assertion messages\n\nAVA comes with [`power-assert`](https://github.com/power-assert-js/power-assert) built-in, giving you more descriptive assertion messages. It reads your test and tries to infer more information from the code.\n\nLet's take this example, using Node's standard [`assert` library](https://nodejs.org/api/assert.html):\n\n```js\nconst a = /foo/;\nconst b = 'bar';\nconst c = 'baz';\nrequire('assert').ok(a.test(b) || b === c);\n```\n\nIf you paste that into a Node REPL it'll return:\n\n```\nAssertionError: false == true\n```\n\nIn AVA however, this test:\n\n```js\ntest('enhanced assertions', t => {\n\tconst a = /foo/;\n\tconst b = 'bar';\n\tconst c = 'baz';\n\tt.true(a.test(b) || b === c);\n});\n```\n\nWill output:\n\n```\nt.true(a.test(b) || b === c)\n       |      |     |     |\n       |      \"bar\" \"bar\" \"baz\"\n       false\n```\n\n## Process isolation\n\nEach test file is run in a separate Node.js process. This allows you to change the global state or overriding a built-in in one test file, without affecting another. It's also great for performance on modern multi-core processors, allowing multiple test files to execute in parallel.\n\nAVA will set `process.env.NODE_ENV` to `test`, unless the `NODE_ENV` environment variable has been set. This is useful if the code you're testing has test defaults (for example when picking what database to connect to, or environment-specific Babel options). It may cause your code or its dependencies to behave differently though. Note that `'NODE_ENV' in process.env` will always be `true`.\n\n## Tips\n\n### Temp files\n\nRunning tests concurrently comes with some challenges, doing file IO is one.\n\nUsually, serial tests create temp directories in the current test directory and clean them up at the end. This won't work when you run tests concurrently as tests will conflict with each other. The correct way to do it is to use a new temp directory for each test. The [`tempfile`](https://github.com/sindresorhus/tempfile) and [`temp-write`](https://github.com/sindresorhus/temp-write) modules can be helpful.\n\n### Code coverage\n\nYou can't use [`istanbul`](https://github.com/gotwarlost/istanbul) for code coverage as AVA [spawns the test files](#process-isolation). You can use [`nyc`](https://github.com/bcoe/nyc) instead, which is basically `istanbul` with support for subprocesses.\n\nAs of version `5.0.0` it uses source maps to report coverage for your actual code, regardless of transpilation. Make sure that the code you're testing includes an inline source map or references a source map file. If you use `babel-register` you can set the `sourceMaps` option in your Babel config to `inline`.\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [/ˈeɪvə/ ay-və](media/pronunciation.m4a?raw=true).\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Flow](docs/recipes/flow.md)\n- [Configuring Babel][Babel recipe]\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [JSPM and SystemJS](docs/recipes/jspm-systemjs.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Precompiling source files with webpack](docs/recipes/precompiling-with-webpack.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n\n## Support\n\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/ava)\n- [Spectrum](https://spectrum.chat/ava)\n- [Twitter](https://twitter.com/ava__js)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) - Lint rules for AVA tests\n- [sublime-ava](https://github.com/avajs/sublime-ava) - Snippets for AVA tests\n- [atom-ava](https://github.com/avajs/atom-ava) - Snippets for AVA tests\n- [vscode-ava](https://github.com/samverschueren/vscode-ava) - Snippets for AVA tests\n- [gulp-ava](https://github.com/avajs/gulp-ava) - Run tests with gulp\n- [grunt-ava](https://github.com/avajs/grunt-ava) - Run tests with grunt\n- [More…](https://github.com/avajs/awesome-ava#packages)\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [AVA Casts](http://avacasts.com)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus) | [![Vadim Demedes](https://github.com/vadimdemedes.png?size=100)](https://github.com/vadimdemedes)\n---|---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](http://sindresorhus.com) | [Vadim Demedes](https://github.com/vadimdemedes)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://ava.li\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n\n[Babel recipe]: docs/recipes/babel.md\n",
      "readmeFilename": "readme.md",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.0.0-beta.5.1",
      "_npmVersion": "6.1.0",
      "_nodeVersion": "10.3.0",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-ylZjm9ZKrcNHc6HZPcrNB8tm1dAIJUg5uq3ZgJ9sZLMSLrl2m5UKyUmtMhz4XpegB4nCXulSdBeQf3fDho5ovw==",
        "shasum": "34320902d44e6ba5109d4d8af3a6555eda4b7e8b",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.0.0-beta.5.1.tgz",
        "fileCount": 51,
        "unpackedSize": 291671,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbEPUHCRA9TVsSAnZWagAAV18P/iSO4yQoc+u8AP9fk7M7\n0ebBsnReyikGRI7o9BpEg4OEBqmtdQMKmJUGVioxNFDeJLaP5Hw7S861v1ks\nleCAESQc4OO9/7GBwmaBPvotb0EJl8wsQYaDRpPSSVqEwkhozDytXjG+1RTb\na9cK84zG9MVrKEFrM8m/MkNCp41DtPS39PBzAK0Z40BJAncg8irstMLYu92j\nP2cY7bDei4ZDAfOGbVCYgnSXzqMwYCHy+GvbgeThKroyCRwwl+kikg0NtsFa\nqoK3wzIH47lp+G1zBZL7wbCRgA0eBIAqCXQxqZWN5pXpr2C13QOLzu+EDlPi\ntOQLwvIIH39QVLX7NpOFWXsDf0jF5rbncnr6FaxH6BCRD2uLctGQQm8Zulwx\njPKDFU8fjve9CKm7IgHCRnarnmZc0/9in9fvvpDlWgyVB8SxGKH5kx6fWHK+\n1+lg7TbZfF7ZeUyUKIirVj/s3KVbfhBjhit2Msd+Z39T1ZmU6KXoBk71G4w8\nU86lJmUkMIJy5cDHqB9Po5DqVqnM0HQtxURjjKApK/lIcL3QrysHTdsoMiGN\nCah53RlnY2PG0Ht0ioxpk1AGPxIUW2NM9jx033LVUGA0xaQW1modg6/AJV3b\n0eyAlslOTsZQL/IY5LkGoSBiior4Dlt/QksarC9sG1i4E4ICv9jWfQJ5/ogl\nN2X5\r\n=QXld\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCjEIh9caRhDcE/TABcKaq5VY+Ju7IqBZZxYGs09jS7lQIhAI6ndaWH8nbRTndpo+7Jp+4fDfuLTctopAtCyVaIrAev"
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.0.0-beta.5.1_1527837958609_0.10191043949374534"
      },
      "_hasShrinkwrap": false
    },
    "1.0.0-beta.6": {
      "name": "ava",
      "version": "1.0.0-beta.6",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=6.12.3 <7 || >=8.9.4 <9 || >=9.11.1 <10 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo && (cd test/fixture && xo '**' '!{source-map-initial,syntax-error}.js' '!snapshots/test-sourcemaps/build/**')",
        "test": "npm run lint && flow check test/flow-types && tsc --noEmit -p test/ts-types && nyc tap --no-cov --timeout=300 --jobs=4 test/*.js test/reporters/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=300 --jobs=1 test/*.js test/reporters/*.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "index.d.ts"
      ],
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "2.0.0-beta.8",
        "@ava/babel-preset-transform-test-files": "4.0.0-beta.7",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "7.0.0-beta.51",
        "@babel/generator": "7.0.0-beta.51",
        "@babel/plugin-syntax-async-generators": "7.0.0-beta.51",
        "@babel/plugin-syntax-object-rest-spread": "7.0.0-beta.51",
        "@babel/plugin-syntax-optional-catch-binding": "7.0.0-beta.51",
        "@concordance/react": "^1.0.0",
        "ansi-escapes": "^3.1.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^2.0.0",
        "arrify": "^1.0.0",
        "auto-bind": "^1.2.0",
        "bluebird": "^3.5.1",
        "chalk": "^2.4.1",
        "chokidar": "^2.0.3",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-truncate": "^1.1.0",
        "co-with-promise": "^4.6.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^3.0.0",
        "convert-source-map": "^1.5.1",
        "currently-unhandled": "^0.4.1",
        "debug": "^3.1.0",
        "del": "^3.0.0",
        "dot-prop": "^4.2.0",
        "emittery": "^0.3.0",
        "empower-core": "^0.6.1",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^1.0.5",
        "esm": "^3.0.40",
        "figures": "^2.0.0",
        "get-port": "^3.2.0",
        "globby": "^7.1.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^1.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^1.1.0",
        "is-error": "^2.2.1",
        "is-generator-fn": "^1.0.0",
        "is-observable": "^1.1.0",
        "is-plain-object": "^2.0.4",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.3.0",
        "matcher": "^1.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^5.0.0",
        "ms": "^2.1.1",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "ora": "^2.1.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.1.0",
        "plur": "^3.0.1",
        "pretty-ms": "^3.2.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "slash": "^2.0.0",
        "source-map-support": "^0.5.6",
        "stack-utils": "^1.0.1",
        "strip-ansi": "^4.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^5.4.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.5.0"
      },
      "devDependencies": {
        "cli-table2": "^0.2.0",
        "codecov": "^3.0.2",
        "delay": "^3.0.0",
        "execa": "^0.10.0",
        "flow-bin": "^0.73.0",
        "get-stream": "^3.0.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^2.7.0",
        "nyc": "^11.8.0",
        "proxyquire": "^2.0.1",
        "react": "^16.4.0",
        "react-test-renderer": "^16.4.0",
        "replace-string": "^1.1.0",
        "signal-exit": "^3.0.0",
        "sinon": "^5.0.10",
        "source-map-fixtures": "^2.1.0",
        "tap": "^12.0.1",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "ts-node": "^6.1.1",
        "typescript": "^2.8.3",
        "xo": "^0.21.1",
        "zen-observable": "^0.8.8"
      },
      "typings": "index.d.ts",
      "xo": {
        "ignores": [
          "media/**"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off",
          "prefer-destructuring": "off",
          "prefer-rest-params": "off",
          "prefer-spread": "off",
          "unicorn/prefer-spread": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "fd73358d9ee85c3623a10acfebb5af88c51d628b",
      "readme": "# [![AVA](media/header.png)](https://ava.li)\n\n> Futuristic test runner\n\n[![Build Status: Linux](https://travis-ci.org/avajs/ava.svg?branch=master)](https://travis-ci.org/avajs/ava) [![Build status: Windows](https://ci.appveyor.com/api/projects/status/e7v91mu2m5x48ehx/branch/master?svg=true)](https://ci.appveyor.com/project/ava/ava/branch/master) [![Coverage Status](https://coveralls.io/repos/github/avajs/ava/badge.svg?branch=master)](https://coveralls.io/github/avajs/ava?branch=master) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo) [![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/ava)\n [![Mentioned in Awesome Node.js](https://awesome.re/mentioned-badge.svg)](https://github.com/sindresorhus/awesome-nodejs)\n\nEven though JavaScript is single-threaded, IO in Node.js can happen in parallel due to its async nature. AVA takes advantage of this and runs your tests concurrently, which is especially beneficial for IO heavy tests. In addition, test files are run in parallel as separate processes, giving you even better performance and an isolated environment for each test file. [Switching](https://github.com/sindresorhus/pageres/commit/663be15acb3dd2eb0f71b1956ef28c2cd3fdeed0) from Mocha to AVA in Pageres brought the test time down from 31 to 11 seconds. Having tests run concurrently forces you to write atomic tests, meaning tests don't depend on global state or the state of other tests, which is a great thing!\n\n![](media/mini-reporter.gif)\n\n*Read our [contributing guide](contributing.md) if you're looking to contribute (issues/PRs/etc).*\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\n**This documentation covers the 1.0 beta releases, which use Babel 7. The last release that uses Babel 6 is [`v0.25.0`](https://github.com/avajs/ava/tree/v0.25.0).**\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Contents\n\n- [Usage](#usage)\n- [CLI Usage](#cli)\n- [Debugging](#debugging)\n- [Reporters](#reporters)\n- [Configuration](#configuration)\n- [Documentation](#documentation)\n- [API](#api)\n- [Assertions](#assertions)\n- [Snapshot testing](#snapshot-testing)\n- [Tips](#tips)\n- [FAQ](#faq)\n- [Recipes](#recipes)\n- [Support](#support)\n- [Related](#related)\n- [Links](#links)\n- [Team](#team)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript & Flow type definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](#process-isolation)\n- [Write your tests using the latest JavaScript syntax](#latest-javascript-support)\n- [Promise support](#promise-support)\n- [Generator function support](#generator-function-support)\n- [Async function support](#async-function-support)\n- [Observable support](#observable-support)\n- [Enhanced assertion messages](#enhanced-assertion-messages)\n- [TAP reporter](#tap-reporter)\n- [Automatic migration from other test runners](https://github.com/avajs/ava-codemods#migrating-to-ava)\n\n\n## Test syntax\n\n```js\nimport test from 'ava';\n\ntest('arrays are equal', t => {\n\tt.deepEqual([1, 2], [1, 2]);\n});\n```\n\n## Usage\n\n### Add AVA to your project\n\nTo install and set up AVA, run:\n\n```console\n$ npx create-ava --next\n```\n\nYour `package.json` will then look like this:\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"1.0.0-beta.4\"\n\t}\n}\n```\n\nInitialization will work with npm and Yarn, but running `npx` requires [`npm@5.2.0`](https://github.com/npm/npm/releases/tag/v5.2.0) or greater to be installed. Otherwise, you'll have to manually install `ava` and configure the `test` script in your `package.json` as per above:\n\n```console\n$ npm install --save-dev --save-exact ava@next\n```\n\nOr if you prefer using Yarn:\n\n```console\n$ yarn add ava@next --dev --exact\n```\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nimport test from 'ava';\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\n\tt.is(await bar, 'bar');\n});\n```\n\n### Run it\n\n```console\n$ npm test\n```\n\n### Watch it\n\n```console\n$ npm test -- --watch\n```\n\nAVA comes with an intelligent watch mode. [Learn more in its recipe](docs/recipes/watch-mode.md).\n\n### Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## CLI\n\n```console\n$ ava --help\n\n  Usage\n    ava [<file|directory|glob> ...]\n\n  Options\n    --watch, -w             Re-run tests when tests and source files change\n    --match, -m             Only run tests with matching title (Can be repeated)\n    --update-snapshots, -u  Update snapshots\n    --fail-fast             Stop after first test failure\n    --timeout, -T           Set global timeout\n    --serial, -s            Run tests serially\n    --concurrency, -c       Max number of test files running at the same time (Default: CPU cores)\n    --verbose, -v           Enable verbose output\n    --tap, -t               Generate TAP output\n    --color                 Force color output\n    --no-color              Disable color output\n\n  Examples\n    ava\n    ava test.js test2.js\n    ava test-*.js\n    ava test\n\n  Default patterns when no arguments:\n  test.js test-*.js test/**/*.js **/__tests__/**/*.js **/*.test.js\n```\n\n*Note that the CLI will use your local install of AVA when available, even when run globally.*\n\nDirectories are recursed, with all `*.js` files being treated as test files. Directories named `fixtures`, `helpers` and `node_modules` are *always* ignored. So are files starting with `_` which allows you to place helpers in the same directory as your test files.\n\nWhen using `npm test`, you can pass positional arguments directly `npm test test2.js`, but flags needs to be passed like `npm test -- --verbose`.\n\n\n## Debugging\n\nAVA runs tests in child processes, so to debug tests, you need to do this workaround:\n\n```console\n$ node --inspect node_modules/ava/profile.js some/test/file.js\n```\n\n### Debugger-specific tips\n\n- [Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Visual Studio Code](docs/recipes/debugging-with-vscode.md)\n\n\n## Reporters\n\n### Mini-reporter\n\nThe mini-reporter is the default reporter.\n\n<img src=\"media/mini-reporter.gif\" width=\"460\">\n\n### Verbose reporter\n\nUse the `--verbose` flag to enable the verbose reporter. This is always used in CI environments unless the [TAP reporter](#tap-reporter) is enabled.\n\n<img src=\"media/verbose-reporter.png\" width=\"294\">\n\n### TAP reporter\n\nAVA supports the TAP format and thus is compatible with [any TAP reporter](https://github.com/sindresorhus/awesome-tap#reporters). Use the `--tap` flag to enable TAP output.\n\n```console\n$ ava --tap | tap-nyan\n```\n\n<img src=\"media/tap-reporter.png\" width=\"420\">\n\nPlease note that the TAP reporter is unavailable when using [watch mode](#watch-it).\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n\n## Configuration\n\nAll of the CLI options can be configured in the `ava` section of either your `package.json` or an `ava.config.js` file. This allows you to modify the default behavior of the `ava` command, so you don't have to repeatedly type the same options on the command prompt.\n\nTo ignore a file or directory, prefix the pattern with an `!` (exclamation mark).\n\n```json\n{\n\t\"ava\": {\n\t\t\"files\": [\n\t\t\t\"my-test-directory/**/*.js\",\n\t\t\t\"!my-test-directory/exclude-this-directory/**/*.js\",\n\t\t\t\"!**/exclude-this-file.js\"\n\t\t],\n\t\t\"sources\": [\n\t\t\t\"**/*.{js,jsx}\",\n\t\t\t\"!dist/**/*\"\n\t\t],\n\t\t\"match\": [\n\t\t\t\"*oo\",\n\t\t\t\"!foo\"\n\t\t],\n\t\t\"cache\": true,\n\t\t\"concurrency\": 5,\n\t\t\"failFast\": true,\n\t\t\"failWithoutAssertions\": false,\n\t\t\"tap\": true,\n\t\t\"compileEnhancements\": false,\n\t\t\"require\": [\n\t\t\t\"@babel/register\"\n\t\t],\n\t\t\"babel\": {\n\t\t\t\"extensions\": [\"jsx\"],\n\t\t\t\"testOptions\": {\n\t\t\t\t\"babelrc\": false\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nArguments passed to the CLI will always take precedence over the configuration in `package.json`.\n\n### Options\n\n- `files`: file & directory paths and glob patterns that select which files AVA will run tests from. Files with an underscore prefix are ignored. All matched files in selected directories are run. By default only selects files with `js` extensions, even if the glob pattern matches other files. Specify `extensions` and `babel.extensions` to allow other file extensions\n- `source`: files that, when changed, cause tests to be re-run in watch mode. See the [watch mode recipe for details](https://github.com/avajs/ava/blob/master/docs/recipes/watch-mode.md#source-files-and-test-files)\n- `match`: not typically useful in the `package.json` configuration, but equivalent to [specifying `--match` on the CLI](#running-tests-with-matching-titles)\n- `cache`: cache compiled test and helper files under `node_modules/.cache/ava`. If `false`, files are cached in a temporary directory instead\n- `failFast`: stop running further tests once a test fails\n- `failWithoutAssertions`: if `false`, does not fail a test if it doesn't run [assertions](#assertions)\n- `tap`: if `true`, enables the [TAP reporter](#tap-reporter)\n- `snapshotDir`: specifies a fixed location for storing snapshot files. Use this if your snapshots are ending up in the wrong location\n- `compileEnhancements`: if `false`, disables [power-assert](https://github.com/power-assert-js/power-assert) — which otherwise helps provide more descriptive error messages — and detection of improper use of the `t.throws()` assertion\n- `extensions`: extensions of test files that are not precompiled using AVA's Babel presets. Note that files are still compiled to enable power-assert and other features, so you may also need to set `compileEnhancements` to `false` if your files are not valid JavaScript. Setting this overrides the default `\"js\"` value, so make sure to include that extension in the list, as long as it's not included in `babel.extensions`\n- `require`: extra modules to require before tests are run. Modules are required in the [worker processes](#process-isolation)\n- `babel`: test file specific Babel options. See our [Babel recipe] for more details\n- `babel.extensions`: extensions of test files that will be precompiled using AVA's Babel presets. Setting this overrides the default `\"js\"` value, so make sure to include that extension in the list\n\nNote that providing files on the CLI overrides the `files` option. If you've configured a glob pattern, for instance `test/**/*.test.js`, you may want to repeat it when using the CLI: `ava 'test/integration/*.test.js'`.\n\n### Using `ava.config.js`\n\nTo use an `ava.config.js` file:\n\n 1. It must be in the same directory as your `package.json`\n 2. Your `package.json` must not contain an `ava` property (or, if it does, it must be an empty object)\n\nThe config file must have a default export, using ES modules. It can either be a plain object or a factory function which returns a plain object:\n\n```js\nexport default {\n\trequire: ['esm']\n};\n```\n\n```js\nexport default function factory() {\n\treturn {\n\t\trequire: ['esm']\n\t};\n};\n```\n\nThe factory function is called with an object containing a `projectDir` property, which you could use to change the returned configuration:\n\n```js\nexport default ({projectDir}) => {\n\tif (projectDir === '/Users/username/projects/my-project') {\n\t\treturn {\n\t\t\t// Config A\n\t\t};\n\t}\n\n\treturn {\n\t\t// Config B\n\t};\n};\n```\n\nNote that the final configuration must not be a promise.\n\n## Documentation\n\nTests are run concurrently. You can specify synchronous and asynchronous tests. Tests are considered synchronous unless you return a promise or [observable](https://github.com/zenparsing/zen-observable).\n\nWe *highly* recommend the use of [async functions](#async-function-support). They make asynchronous code concise and readable, and they implicitly return a promise so you don't have to.\n\nIf you're unable to use promises or observables, you may enable \"callback mode\" by defining your test with `test.cb([title], fn)`. Tests declared this way **must** be manually ended with `t.end()`. This mode is mainly intended for testing callback-style APIs. However, we would strongly recommend [promisifying](https://github.com/sindresorhus/pify) callback-style APIs instead of using \"callback mode\", as this results in more correct and readable tests.\n\nYou must define all tests synchronously. They can't be defined inside `setTimeout`, `setImmediate`, etc.\n\nAVA tries to run test files with their current working directory set to the directory that contains your `package.json` file.\n\n### Creating tests\n\nTo create a test you call the `test` function you imported from AVA. Provide the required title and implementation function. Titles must be unique within each test file. The function will be called when your test is run. It's passed an [execution object](#t) as its first argument.\n\n**Note:** In order for the [enhanced assertion messages](#enhanced-assertion-messages) to behave correctly, the first argument **must** be named `t`.\n\n```js\nimport test from 'ava';\n\ntest('my passing test', t => {\n\tt.pass();\n});\n```\n\n### Assertion planning\n\nAssertion plans ensure tests only pass when a specific number of assertions have been executed. They'll help you catch cases where tests exit too early. They'll also cause tests to fail if too many assertions are executed, which can be useful if you have assertions inside callbacks or loops.\n\nIf you do not specify an assertion plan, your test will still fail if no assertions are executed. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration) to disable this behavior.\n\nNote that, unlike [`tap`](https://www.npmjs.com/package/tap) and [`tape`](https://www.npmjs.com/package/tape), AVA does *not* automatically end a test when the planned assertion count is reached.\n\nThese examples will result in a passed test:\n\n```js\ntest('resolves with 3', t => {\n\tt.plan(1);\n\n\treturn Promise.resolve(3).then(n => {\n\t\tt.is(n, 3);\n\t});\n});\n\ntest.cb('invokes callback', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t\tt.end();\n\t});\n});\n```\n\nThese won't:\n\n```js\ntest('loops twice', t => {\n\tt.plan(2);\n\n\tfor (let i = 0; i < 3; i++) {\n\t\tt.true(i < 3);\n\t}\n}); // Fails, 3 assertions are executed which is too many\n\ntest('invokes callback synchronously', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t});\n}); // Fails, the test ends synchronously before the assertion is executed\n```\n\n### Running tests serially\n\nTests are run concurrently by default, however, sometimes you have to write tests that cannot run concurrently. In these rare cases you can use the `.serial` modifier. It will force those tests to run serially *before* the concurrent ones.\n\n```js\ntest.serial('passes serially', t => {\n\tt.pass();\n});\n```\n\nNote that this only applies to tests within a particular test file. AVA will still run multiple tests files at the same time unless you pass the [`--serial` CLI flag](#cli).\n\nYou can use the `.serial` modifier with all tests, hooks and even `.todo()`, but it's only available on the `test` function.\n\n### Running specific tests\n\nDuring development it can be helpful to only run a few specific tests. This can be accomplished using the `.only` modifier:\n\n```js\ntest('will not be run', t => {\n\tt.fail();\n});\n\ntest.only('will be run', t => {\n\tt.pass();\n});\n```\n\nYou can use the `.only` modifier with all tests. It cannot be used with hooks or `.todo()`.\n\n*Note:* The `.only` modifier applies to the test file it's defined in, so if you run multiple test files, tests in other files will still run. If you want to only run the `test.only` test, provide just that test file to AVA.\n\n### Running tests with matching titles\n\nThe `--match` flag allows you to run just the tests that have a matching title. This is achieved with simple wildcard patterns. Patterns are case insensitive. See [`matcher`](https://github.com/sindresorhus/matcher) for more details.\n\nMatch titles ending with `foo`:\n\n```console\n$ ava --match='*foo'\n```\n\nMatch titles starting with `foo`:\n\n```console\n$ ava --match='foo*'\n```\n\nMatch titles containing `foo`:\n\n```console\n$ ava --match='*foo*'\n```\n\nMatch titles that are *exactly* `foo` (albeit case insensitively):\n\n```console\n$ ava --match='foo'\n```\n\nMatch titles not containing `foo`:\n\n```console\n$ ava --match='!*foo*'\n```\n\nMatch titles starting with `foo` and ending with `bar`:\n\n```console\n$ ava --match='foo*bar'\n```\n\nMatch titles starting with `foo` or ending with `bar`:\n\n```console\n$ ava --match='foo*' --match='*bar'\n```\n\nNote that a match pattern takes precedence over the `.only` modifier. Only tests with an explicit title are matched. Tests without titles or whose title is derived from the implementation function will be skipped when `--match` is used.\n\nHere's what happens when you run AVA with a match pattern of `*oo*` and the following tests:\n\n```js\ntest('foo will run', t => {\n\tt.pass();\n});\n\ntest('moo will also run', t => {\n\tt.pass();\n});\n\ntest.only('boo will run but not exclusively', t => {\n\tt.pass();\n});\n\n// Won't run, no title\ntest(function (t) {\n\tt.fail();\n});\n\n// Won't run, no explicit title\ntest(function foo(t) {\n\tt.fail();\n});\n```\n\n### Skipping tests\n\nSometimes failing tests can be hard to fix. You can tell AVA to skip these tests using the `.skip` modifier. They'll still be shown in the output (as having been skipped) but are never run.\n\n```js\ntest.skip('will not be run', t => {\n\tt.fail();\n});\n```\n\nYou must specify the implementation function. You can use the `.skip` modifier with all tests and hooks, but not with `.todo()`. You can not apply further modifiers to `.skip`.\n\n### Test placeholders (\"todo\")\n\nYou can use the `.todo` modifier when you're planning to write a test. Like skipped tests these placeholders are shown in the output. They only require a title; you cannot specify the implementation function.\n\n```js\ntest.todo('will think about writing this later');\n```\n\nYou can signal that you need to write a serial test:\n\n```js\ntest.serial.todo('will think about writing this later');\n```\n\n### Failing tests\n\nYou can use the `.failing` modifier to document issues with your code that need to be fixed. Failing tests are run just like normal ones, but they are expected to fail, and will not break your build when they do. If a test marked as failing actually passes, it will be reported as an error and fail the build with a helpful message instructing you to remove the `.failing` modifier.\n\nThis allows you to merge `.failing` tests before a fix is implemented without breaking CI. This is a great way to recognize good bug report PR's with a commit credit, even if the reporter is unable to actually fix the problem.\n\n```js\n// See: github.com/user/repo/issues/1234\ntest.failing('demonstrate some bug', t => {\n\tt.fail(); // Test will count as passed\n});\n```\n\n### Before & after hooks\n\nAVA lets you register hooks that are run before and after your tests. This allows you to run setup and/or teardown code.\n\n`test.before()` registers a hook to be run before the first test in your test file. Similarly `test.after()` registers a hook to be run after the last test. Use `test.after.always()` to register a hook that will **always** run once your tests and other hooks complete. `.always()` hooks run regardless of whether there were earlier failures, so they are ideal for cleanup tasks. Note however that uncaught exceptions, unhandled rejections or timeouts will crash your tests, possibly preventing `.always()` hooks from running.\n\n`test.beforeEach()` registers a hook to be run before each test in your test file. Similarly `test.afterEach()` a hook to be run after each test. Use `test.afterEach.always()` to register an after hook that is called even if other test hooks, or the test itself, fail.\n\nIf a test is skipped with the `.skip` modifier, the respective `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks are not run. Likewise, if all tests in a test file are skipped `.before()`, `.after()` and `.after.always()` hooks for the file are not run.\n\nLike `test()` these methods take an optional title and an implementation function. The title is shown if your hook fails to execute. The implementation is called with an [execution object](#t). You can use assertions in your hooks. You can also pass a [macro function](#test-macros) and additional arguments.\n\n`.before()` hooks execute before `.beforeEach()` hooks. `.afterEach()` hooks execute before `.after()` hooks. Within their category the hooks execute in the order they were defined. By default hooks execute concurrently, but you can use `test.serial` to ensure only that single hook is run at a time. Unlike with tests, serial hooks are *not* run before other hooks:\n\n```js\ntest.before(t => {\n\t// This runs before all tests\n});\n\ntest.before(t => {\n\t// This runs concurrently with the above\n});\n\ntest.serial.before(t => {\n\t// This runs after the above\n});\n\ntest.serial.before(t => {\n\t// This too runs after the above, and before tests\n});\n\ntest.after('cleanup', t => {\n\t// This runs after all tests\n});\n\ntest.after.always('guaranteed cleanup', t => {\n\t// This will always run, regardless of earlier failures\n});\n\ntest.beforeEach(t => {\n\t// This runs before each test\n});\n\ntest.afterEach(t => {\n\t// This runs after each test\n});\n\ntest.afterEach.always(t => {\n\t// This runs after each test and other test hooks, even if they failed\n});\n\ntest('title', t => {\n\t// Regular test\n});\n```\n\nHooks can be synchronous or asynchronous, just like tests. To make a hook asynchronous return a promise or observable, use an async function, or enable callback mode via `test.before.cb()`, `test.beforeEach.cb()` etc.\n\n```js\ntest.before(async t => {\n\tawait promiseFn();\n});\n\ntest.after(t => {\n\treturn new Promise(/* ... */);\n});\n\ntest.beforeEach.cb(t => {\n\tsetTimeout(t.end);\n});\n\ntest.afterEach.cb(t => {\n\tsetTimeout(t.end);\n});\n```\n\nKeep in mind that the `.beforeEach()` and `.afterEach()` hooks run just before and after a test is run, and that by default tests run concurrently. This means each multiple `.beforeEach()` hooks may run concurrently. Using `test.serial.beforeEach()` does not change this. If you need to set up global state for each test (like spying on `console.log` [for example](https://github.com/avajs/ava/issues/560)), you'll need to make sure the tests themselves are [run serially](#running-tests-serially).\n\nRemember that AVA runs each test file in its own process. You may not have to clean up global state in a `.after()`-hook since that's only called right before the process exits.\n\n#### Test context\n\nHooks can share context with the test:\n\n```js\ntest.beforeEach(t => {\n\tt.context.data = generateUniqueData();\n});\n\ntest('context data is foo', t => {\n\tt.is(t.context.data + 'bar', 'foobar');\n});\n```\n\nContext created in `.before()` hooks is [cloned](https://www.npmjs.com/package/lodash.clone) before it is passed to `.beforeEach()` hooks and / or tests. The `.after()` and `.after.always()` hooks receive the original context value.\n\nFor `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks the context is *not* shared between different tests, allowing you to set up data such that it will not leak to other tests.\n\nBy default `t.context` is an object but you can reassign it:\n\n```js\ntest.before(t => {\n\tt.context = 'unicorn';\n});\n\ntest('context is unicorn', t => {\n\tt.is(t.context, 'unicorn');\n});\n```\n\n### Test macros\n\nAdditional arguments passed to the test declaration will be passed to the test implementation. This is useful for creating reusable test macros.\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\ntest('2 + 2 = 4', macro, '2 + 2', 4);\ntest('2 * 3 = 6', macro, '2 * 3', 6);\n```\n\nYou can build the test title programmatically by attaching a `title` function to the macro:\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nmacro.title = (providedTitle, input, expected) => `${providedTitle} ${input} = ${expected}`.trim();\n\ntest(macro, '2 + 2', 4);\ntest(macro, '2 * 3', 6);\ntest('providedTitle', macro, '3 * 3', 9);\n```\n\nThe `providedTitle` argument defaults to an empty string if the user does not supply a string title. This allows for easy concatenation without having to worry about `null` / `undefined`. It is worth remembering that the empty string is considered a falsy value, so you can still use `if(providedTitle) {...}`.\n\nYou can also pass arrays of macro functions:\n\n```js\nconst safeEval = require('safe-eval');\n\nfunction evalMacro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nfunction safeEvalMacro(t, input, expected) {\n\tt.is(safeEval(input), expected);\n}\n\ntest([evalMacro, safeEvalMacro], '2 + 2', 4);\ntest([evalMacro, safeEvalMacro], '2 * 3', 6);\n```\n\nWe encourage you to use macros instead of building your own test generators ([here is an example](https://github.com/avajs/ava-codemods/blob/47073b5b58aa6f3fb24f98757be5d3f56218d160/test/ok-to-truthy.js#L7-L9) of code that should be replaced with a macro). Macros are designed to perform static analysis of your code, which can lead to better performance, IDE integration, and linter rules.\n\n### Custom assertions\n\nYou can use any assertion library instead of or in addition to the built-in one, provided it throws exceptions when the assertion fails.\n\nThis won't give you as nice an experience as you'd get with the [built-in assertions](#assertions) though, and you won't be able to use the [assertion planning](#assertion-planning) ([see #25](https://github.com/avajs/ava/issues/25)).\n\nYou'll have to configure AVA to not fail tests if no assertions are executed, because AVA can't tell if custom assertions pass. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration).\n\n```js\nimport assert from 'assert';\n\ntest('custom assertion', t => {\n\tassert(true);\n});\n```\n\n### Latest JavaScript support\n\nAVA uses [Babel 7](https://babeljs.io) so you can use the latest JavaScript syntax in your tests. There is no extra setup required. You don't need to be using Babel in your own project for this to work either.\n\nWe aim support all [finished syntax proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md), as well as all syntax from ratified JavaScript versions (e.g. ES2017). See our [`@ava/stage-4`](https://github.com/avajs/babel-preset-stage-4) preset for the currently supported proposals.\n\nPlease note that we do not add or modify built-ins. For example, if you use [`Object.entries()`](https://github.com/tc39/proposal-object-values-entries) in your tests, they will crash in Node.js 6 which does not implement this method.\n\nYou can disable this syntax support, or otherwise customize AVA's Babel pipeline. See our [Babel recipe] for more details.\n\n### TypeScript support\n\nAVA includes typings for TypeScript. You have to set up transpilation yourself. When you set `module` to `commonjs` in your `tsconfig.json` file, TypeScript will automatically find the type definitions for AVA. You should set `target` to `es2015` to use promises and async functions.\n\nSee AVA's [TypeScript recipe](docs/recipes/typescript.md) for a more detailed explanation.\n\n### Transpiling imported modules\n\nAVA currently only transpiles the tests you ask it to run, as well as test helpers (files starting with `_` or in `helpers` directory) inside the test directory. *It will not transpile modules you `import` from outside of the test.* This may be unexpected but there are workarounds.\n\nIf you use Babel you can use its [require hook](https://babeljs.io/docs/usage/require/) to transpile imported modules on-the-fly. To add it, [configure it in your `package.json`](#configuration).\n\nYou can also transpile your modules in a separate process and refer to the transpiled files rather than the sources from your tests. Example [here](docs/recipes/precompiling-with-webpack.md).\n\n### Promise support\n\nIf you return a promise in the test you don't need to explicitly end the test as it will end when the promise resolves.\n\n```js\ntest('resolves with unicorn', t => {\n\treturn somePromise().then(result => {\n\t\tt.is(result, 'unicorn');\n\t});\n});\n```\n\n### Generator function support\n\nAVA comes with built-in support for [generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*).\n\n```js\ntest(function * (t) {\n\tconst value = yield generatorFn();\n\tt.true(value);\n});\n```\n\n### Async function support\n\nAVA comes with built-in support for [async functions](https://tc39.github.io/ecmascript-asyncawait/) *(async/await)*.\n\n```js\ntest(async function (t) {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n\n// Async arrow function\ntest('promises the truth', async t => {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n```\n\n### Observable support\n\nAVA comes with built-in support for [observables](https://github.com/zenparsing/es-observable). If you return an observable from a test, AVA will automatically consume it to completion before ending the test.\n\n*You do not need to use \"callback mode\" or call `t.end()`.*\n\n```js\ntest('handles observables', t => {\n\tt.plan(3);\n\treturn Observable.of(1, 2, 3, 4, 5, 6)\n\t\t.filter(n => {\n\t\t\t// Only even numbers\n\t\t\treturn n % 2 === 0;\n\t\t})\n\t\t.map(() => t.pass());\n});\n```\n\n### Callback support\n\nAVA supports using `t.end` as the final callback when using node-style error-first callback APIs. AVA will consider any truthy value passed as the first argument to `t.end` to be an error. Note that `t.end` requires \"callback mode\", which can be enabled by using the `test.cb` chain.\n\n```js\ntest.cb('data.txt can be read', t => {\n\t// `t.end` automatically checks for error as first argument\n\tfs.readFile('data.txt', t.end);\n});\n```\n\n### Global timeout\n\nA global timeout can be set via the `--timeout` option. Timeout in AVA behaves differently than in other test frameworks. AVA resets a timer after each test, forcing tests to quit if no new test results were received within the specified timeout. This can be used to handle stalled tests.\n\nYou can set timeouts in a human-readable way:\n\n```console\n$ ava --timeout=10s # 10 seconds\n$ ava --timeout=2m # 2 minutes\n$ ava --timeout=100 # 100 milliseconds\n```\n\n## API\n\n### `test([title], implementation)`\n### `test.serial([title], implementation)`\n### `test.cb([title], implementation)`\n### `test.only([title], implementation)`\n### `test.skip([title], implementation)`\n### `test.todo(title)`\n### `test.failing([title], implementation)`\n### `test.before([title], implementation)`\n### `test.after([title], implementation)`\n### `test.beforeEach([title], implementation)`\n### `test.afterEach([title], implementation)`\n\n#### `title`\n\nType: `string`\n\nTest title.\n\n#### `implementation(t)`\n\nType: `function`\n\nShould contain the actual test.\n\n##### `t`\n\nType: `object`\n\nThe execution object of a particular test. Each test implementation receives a different object. Contains the [assertions](#assertions) as well as `.plan(count)` and `.end()` methods. `t.context` can contain shared state from hooks. `t.title` returns the test's title.\n\n###### `t.plan(count)`\n\nPlan how many assertion there are in the test. The test will fail if the actual assertion count doesn't match the number of planned assertions. See [assertion planning](#assertion-planning).\n\n###### `t.end()`\n\nEnd the test. Only works with `test.cb()`.\n\n###### `t.log(...values)`\n\nLog values contextually alongside the test result instead of immediately printing them to `stdout`. Behaves somewhat like `console.log`, but without support for placeholder tokens.\n\n## Assertions\n\nAssertions are mixed into the [execution object](#t) provided to each test implementation:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy('unicorn'); // Assertion\n});\n```\n\nAssertions are bound to their test so you can assign them to a variable or pass them around:\n\n```js\ntest('unicorns are truthy', t => {\n\tconst truthy = t.truthy;\n\ttruthy('unicorn');\n});\n```\n\nAssertions can be skipped by adding `.skip()`:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy.skip('unicorn');\n});\n```\n\nIf multiple assertion failures are encountered within a single test, AVA will only display the *first* one.\n\n### `.pass([message])`\n\nPassing assertion.\n\n### `.fail([message])`\n\nFailing assertion.\n\n### `.truthy(value, [message])`\n\nAssert that `value` is truthy.\n\n### `.falsy(value, [message])`\n\nAssert that `value` is falsy.\n\n### `.true(value, [message])`\n\nAssert that `value` is `true`.\n\n### `.false(value, [message])`\n\nAssert that `value` is `false`.\n\n### `.is(value, expected, [message])`\n\nAssert that `value` is the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.not(value, expected, [message])`\n\nAssert that `value` is not the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.deepEqual(value, expected, [message])`\n\nAssert that `value` is deeply equal to `expected`. See [Concordance](https://github.com/concordancejs/concordance) for details. Works with [React elements and `react-test-renderer`](https://github.com/concordancejs/react).\n\n### `.notDeepEqual(value, expected, [message])`\n\nAssert that `value` is not deeply equal to `expected`. The inverse of `.deepEqual()`.\n\n### `.throws(thrower, [expected, [message]])`\n\nAssert that an error is thrown. `thrower` can be a function which should throw, or return a promise that should reject, or an observable that should error. Alternatively a promise or observable can be passed directly.\n\nThe thrown value *must* be an error. It is returned so you can run more assertions against it.\n\n`expected` can be a constructor, in which case the thrown error must be an instance of the constructor. It can be a string, which is compared against the thrown error's message, or a regular expression which is matched against this message. You can also specify a matcher object with one or more of the following properties:\n\n* `instanceOf`: a constructor, the thrown error must be an instance of\n* `is`: the thrown error must be strictly equal to `expected.is`\n* `message`: either a string, which is compared against the thrown error's message, or a regular expression, which is matched against this message\n* `name`: the expected `.name` value of the thrown error\n* `code`: the expected `.code` value of the thrown error\n\n`expected` does not need to be specified. If you don't need it but do want to set an assertion message you have to specify `null`.\n\nExample:\n\n```js\nconst fn = () => {\n\tthrow new TypeError('🦄');\n};\n\ntest('throws', t => {\n\tconst error = t.throws(() => {\n\t\tfn();\n\t}, TypeError);\n\n\tt.is(error.message, '🦄');\n});\n```\n\n```js\nconst promise = Promise.reject(new TypeError('🦄'));\n\ntest('rejects', async t => {\n\tconst error = await t.throws(promise);\n\tt.is(error.message, '🦄');\n});\n```\n\nWhen testing an observable or promise you must wait for the assertion to complete:\n\n```js\ntest('rejects', async t => {\n\tawait t.throws(promise);\n});\n```\n\nWhen testing an asynchronous function you must also wait for the assertion to complete:\n\n```js\ntest('throws', async t => {\n\tawait t.throws(async () => {\n\t\tthrow new TypeError('🦄');\n\t}, {instanceOf: TypeError, message: '🦄'});\n});\n```\n\n### `.notThrows(nonThrower, [message])`\n\nAssert that no error is thrown. `thrower` can be a function which shouldn't throw, or return a promise that should resolve, or an observable that should complete. Alternatively a promise or an observable can be passed directly.\n\nLike the `.throws()` assertion, when testing a promise or an observable you must wait for the assertion to complete:\n\n```js\ntest('resolves', async t => {\n\tawait t.notThrows(promise);\n});\n```\n\n### `.regex(contents, regex, [message])`\n\nAssert that `contents` matches `regex`.\n\n### `.notRegex(contents, regex, [message])`\n\nAssert that `contents` does not match `regex`.\n\n### `.snapshot(expected, [message])`\n### `.snapshot(expected, [options], [message])`\n\nCompares the `expected` value with a previously recorded snapshot. Snapshots are stored for each test, so ensure you give your tests unique titles. Alternatively pass an `options` object to select a specific snapshot, for instance `{id: 'my snapshot'}`.\n\nSnapshot assertions cannot be skipped when snapshots are being updated.\n\n## Snapshot testing\n\nAVA supports snapshot testing, [as introduced by Jest](https://facebook.github.io/jest/docs/snapshot-testing.html), through its [Assertions](#assertions) interface. You can snapshot any value as well as React elements:\n\n```js\n// Your component\nconst HelloWorld = () => <h1>Hello World...!</h1>;\n\nexport default HelloWorld;\n```\n\n```js\n// Your test\nimport test from 'ava';\nimport render from 'react-test-renderer';\nimport HelloWorld from '.';\n\ntest('HelloWorld component', t => {\n\tconst tree = render.create(<HelloWorld/>).toJSON();\n\tt.snapshot(tree);\n});\n```\n\n[Try it out in this example project.](https://github.com/avajs/ava-snapshot-example)\n\nSnapshots are stored alongside your test files. If your tests are in a `test` or `tests` folder the snapshots will be stored in a `snapshots` folder. If your tests are in a `__tests__` folder then they they'll be stored in a `__snapshots__` folder.\n\nSay you have `~/project/test/main.js` which contains snapshot assertions. AVA will create two files:\n\n* `~/project/test/snapshots/main.js.snap`\n* `~/project/test/snapshots/main.js.md`\n\nThe first file contains the actual snapshot and is required for future comparisons. The second file contains your *snapshot report*. It's regenerated when you update your snapshots. If you commit it to source control you can diff it to see the changes to your snapshot.\n\nAVA will show why your snapshot assertion failed:\n\n<img src=\"media/snapshot-testing.png\" width=\"1048\">\n\nYou can then check your code. If the change was intentional you can use the `--update-snapshots` (or `-u`) flag to update the snapshots:\n\n```console\n$ ava --update-snapshots\n```\n\nYou can specify a fixed location for storing the snapshot files in AVA's [`package.json` configuration](#configuration):\n\n```json\n{\n\t\"ava\": {\n\t\t\"snapshotDir\": \"custom-directory\"\n\t}\n}\n```\n\nThe snapshot files will be saved in a directory structure that mirrors that of your test files.\n\nIf you are running AVA against precompiled test files, AVA will try and use source maps to determine the location of the original files. Snapshots will be stored next to these files, following the same rules as if AVA had executed the original files directly. This is great if you're writing your tests in TypeScript (see our [TypeScript recipe](docs/recipes/typescript.md)).\n\n### Skipping assertions\n\nAny assertion can be skipped using the `skip` modifier. Skipped assertions are still counted, so there is no need to change your planned assertion count.\n\n```js\ntest('skip assertion', t => {\n\tt.plan(2);\n\tt.is.skip(foo(), 5); // No need to change your plan count when skipping\n\tt.is(1, 1);\n});\n```\n\n### Enhanced assertion messages\n\nAVA comes with [`power-assert`](https://github.com/power-assert-js/power-assert) built-in, giving you more descriptive assertion messages. It reads your test and tries to infer more information from the code.\n\nLet's take this example, using Node's standard [`assert` library](https://nodejs.org/api/assert.html):\n\n```js\nconst a = /foo/;\nconst b = 'bar';\nconst c = 'baz';\nrequire('assert').ok(a.test(b) || b === c);\n```\n\nIf you paste that into a Node REPL it'll return:\n\n```\nAssertionError: false == true\n```\n\nIn AVA however, this test:\n\n```js\ntest('enhanced assertions', t => {\n\tconst a = /foo/;\n\tconst b = 'bar';\n\tconst c = 'baz';\n\tt.true(a.test(b) || b === c);\n});\n```\n\nWill output:\n\n```\nt.true(a.test(b) || b === c)\n       |      |     |     |\n       |      \"bar\" \"bar\" \"baz\"\n       false\n```\n\n## Process isolation\n\nEach test file is run in a separate Node.js process. This allows you to change the global state or overriding a built-in in one test file, without affecting another. It's also great for performance on modern multi-core processors, allowing multiple test files to execute in parallel.\n\nAVA will set `process.env.NODE_ENV` to `test`, unless the `NODE_ENV` environment variable has been set. This is useful if the code you're testing has test defaults (for example when picking what database to connect to, or environment-specific Babel options). It may cause your code or its dependencies to behave differently though. Note that `'NODE_ENV' in process.env` will always be `true`.\n\n## Tips\n\n### Temp files\n\nRunning tests concurrently comes with some challenges, doing file IO is one.\n\nUsually, serial tests create temp directories in the current test directory and clean them up at the end. This won't work when you run tests concurrently as tests will conflict with each other. The correct way to do it is to use a new temp directory for each test. The [`tempfile`](https://github.com/sindresorhus/tempfile) and [`temp-write`](https://github.com/sindresorhus/temp-write) modules can be helpful.\n\n### Code coverage\n\nYou can't use [`istanbul`](https://github.com/gotwarlost/istanbul) for code coverage as AVA [spawns the test files](#process-isolation). You can use [`nyc`](https://github.com/bcoe/nyc) instead, which is basically `istanbul` with support for subprocesses.\n\nAs of version `5.0.0` it uses source maps to report coverage for your actual code, regardless of transpilation. Make sure that the code you're testing includes an inline source map or references a source map file. If you use `babel-register` you can set the `sourceMaps` option in your Babel config to `inline`.\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [/ˈeɪvə/ ay-və](media/pronunciation.m4a?raw=true).\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Flow](docs/recipes/flow.md)\n- [Configuring Babel][Babel recipe]\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [JSPM and SystemJS](docs/recipes/jspm-systemjs.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Precompiling source files with webpack](docs/recipes/precompiling-with-webpack.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n\n## Support\n\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/ava)\n- [Spectrum](https://spectrum.chat/ava)\n- [Twitter](https://twitter.com/ava__js)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) - Lint rules for AVA tests\n- [sublime-ava](https://github.com/avajs/sublime-ava) - Snippets for AVA tests\n- [atom-ava](https://github.com/avajs/atom-ava) - Snippets for AVA tests\n- [vscode-ava](https://github.com/samverschueren/vscode-ava) - Snippets for AVA tests\n- [gulp-ava](https://github.com/avajs/gulp-ava) - Run tests with gulp\n- [grunt-ava](https://github.com/avajs/grunt-ava) - Run tests with grunt\n- [More…](https://github.com/avajs/awesome-ava#packages)\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [AVA Casts](http://avacasts.com)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus) | [![Vadim Demedes](https://github.com/vadimdemedes.png?size=100)](https://github.com/vadimdemedes)\n---|---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](http://sindresorhus.com) | [Vadim Demedes](https://github.com/vadimdemedes)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://ava.li\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n\n[Babel recipe]: docs/recipes/babel.md\n",
      "readmeFilename": "readme.md",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.0.0-beta.6",
      "_npmVersion": "6.1.0",
      "_nodeVersion": "10.4.0",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-QHP8MSrmJYmxW8n0LTNDWLHuW4ck2+0BJZeScxZtC/0c6w39Uq7s+YNpOh8qOE53XQZUUxDqvwWwYP9TGK4rag==",
        "shasum": "99ac5312a75d46c4254bdbe210457998a823065c",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.0.0-beta.6.tgz",
        "fileCount": 51,
        "unpackedSize": 292291,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbIlyBCRA9TVsSAnZWagAADr4P/0WzZ0eKbAfzkM4HMZ+4\nWYXMy6gPlG/AB55a7jsKifydynz5dvgLHL9lpxYdMOF+57sXWi5xuYAQ5+Ws\n710WaIJBnflh9XMa+ezst+IwI5S2D9YrnWYWaHUe3z04KJOBSLamx5PXViRv\nazNN06oqJ26EdlPPeoOeFWe0KkjAEQAyjC8PGvfst8VCSX4S21lrRlSUFPmR\nw9++/8T5gStEeVQNtQFWD77jpOuv7StINK40wLWW3fGV8DgkhBcO3PMYnyxw\n+GhTmtQX1zul7vGn3NUI3OQpVURKI59fahv6b30TtnVB08RNd0ZeYS+ERi9H\nbwtkxdhEIuRSH11C+qJObia//R+N2T0iViiqiwH4gXZdRZ1a9VjMw57RUFMh\n4EsA6pkwlizuZ6UUKXu7Iex4MfRGBspw6b/EoA0Ce68pD0Qc6xiVvwm8WneU\ninUcwWzWM2/6frclmg/k+DF1V748834JXEe5mPyzRsZn+8oabO7hRg6hVKrj\n47FC9SEn5ckUmvb9IF4JWDzh+KDQYGQTS/ROE50RsyU3xBoQAoCRnqdI4CLv\n8kEp1oGZA/xM63cifrBkgjCTD0CMa9KWCQEB/ADP3LzB73gBQImwy41/O90+\nR7t7qnzWqY7VgEx9mp4oPWWy3YfmgRTJ836VvAJq6fhwLNkay7PeGxkuR5qQ\nKq4N\r\n=H6ak\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFb1XLjDpc15HcyLlfeM1q3KhqONyIfeOt5j5y3hHHMaAiA2hh1VHuDPH9hRHUaBl5p18W0OS04TK7GioudxfbS5Ew=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.0.0-beta.6_1528978560536_0.4475794888991904"
      },
      "_hasShrinkwrap": false
    },
    "1.0.0-beta.7": {
      "name": "ava",
      "version": "1.0.0-beta.7",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=6.12.3 <7 || >=8.9.4 <9 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test": "npm run lint && flow check test/flow-types && tsc --noEmit -p test/ts-types && nyc tap --no-cov --timeout=300 test/*.js test/reporters/*.js test/integration/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=300 test/*.js test/reporters/*.js test/integration/*.js"
      },
      "files": [
        "lib",
        "*.js",
        "*.js.flow",
        "index.d.ts"
      ],
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "2.0.0-beta.9",
        "@ava/babel-preset-transform-test-files": "4.0.0-beta.8",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "7.0.0-rc.1",
        "@babel/generator": "7.0.0-rc.1",
        "@babel/plugin-syntax-async-generators": "7.0.0-rc.1",
        "@babel/plugin-syntax-object-rest-spread": "7.0.0-rc.1",
        "@babel/plugin-syntax-optional-catch-binding": "7.0.0-rc.1",
        "@concordance/react": "^1.0.0",
        "ansi-escapes": "^3.1.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^2.0.0",
        "arrify": "^1.0.0",
        "bluebird": "^3.5.1",
        "chalk": "^2.4.1",
        "chokidar": "^2.0.4",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-truncate": "^1.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^3.0.0",
        "convert-source-map": "^1.5.1",
        "currently-unhandled": "^0.4.1",
        "debug": "^3.1.0",
        "del": "^3.0.0",
        "dot-prop": "^4.2.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^1.0.5",
        "esm": "^3.0.74",
        "figures": "^2.0.0",
        "get-port": "^4.0.0",
        "globby": "^7.1.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^1.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^1.1.0",
        "is-error": "^2.2.1",
        "is-observable": "^1.1.0",
        "is-plain-object": "^2.0.4",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.3.0",
        "matcher": "^1.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^5.0.0",
        "ms": "^2.1.1",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "ora": "^3.0.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.1.0",
        "plur": "^3.0.1",
        "pretty-ms": "^3.2.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "slash": "^2.0.0",
        "source-map-support": "^0.5.8",
        "stack-utils": "^1.0.1",
        "strip-ansi": "^4.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^5.4.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.5.0"
      },
      "devDependencies": {
        "cli-table2": "^0.2.0",
        "codecov": "^3.0.4",
        "delay": "^3.0.0",
        "execa": "^0.10.0",
        "flow-bin": "^0.78.0",
        "get-stream": "^4.0.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^2.7.1",
        "nyc": "^12.0.2",
        "proxyquire": "^2.0.1",
        "react": "^16.4.2",
        "react-test-renderer": "^16.4.2",
        "replace-string": "^1.1.0",
        "signal-exit": "^3.0.0",
        "sinon": "^6.1.5",
        "source-map-fixtures": "^2.1.0",
        "tap": "^12.0.1",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "ts-node": "^7.0.0",
        "typescript": "^3.0.1",
        "xo": "^0.22.0",
        "zen-observable": "^0.8.9"
      },
      "typings": "index.d.ts",
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "**/*.ts"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off",
          "prefer-destructuring": "off",
          "prefer-rest-params": "off",
          "prefer-spread": "off",
          "unicorn/prefer-spread": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "f7fce6a81cf8ee77d0e4823e4ff8961d5097da17",
      "readme": "# [![AVA](media/header.png)](https://ava.li)\n\n> Futuristic test runner\n\n[![Build Status: Linux](https://travis-ci.org/avajs/ava.svg?branch=master)](https://travis-ci.org/avajs/ava) [![Build status: Windows](https://ci.appveyor.com/api/projects/status/e7v91mu2m5x48ehx/branch/master?svg=true)](https://ci.appveyor.com/project/ava/ava/branch/master) [![Coverage Status](https://coveralls.io/repos/github/avajs/ava/badge.svg?branch=master)](https://coveralls.io/github/avajs/ava?branch=master) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo) [![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/ava)\n [![Mentioned in Awesome Node.js](https://awesome.re/mentioned-badge.svg)](https://github.com/sindresorhus/awesome-nodejs)\n\nEven though JavaScript is single-threaded, IO in Node.js can happen in parallel due to its async nature. AVA takes advantage of this and runs your tests concurrently, which is especially beneficial for IO heavy tests. In addition, test files are run in parallel as separate processes, giving you even better performance and an isolated environment for each test file. [Switching](https://github.com/sindresorhus/pageres/commit/663be15acb3dd2eb0f71b1956ef28c2cd3fdeed0) from Mocha to AVA in Pageres brought the test time down from 31 to 11 seconds. Having tests run concurrently forces you to write atomic tests, meaning tests don't depend on global state or the state of other tests, which is a great thing!\n\n![](media/mini-reporter.gif)\n\n*Read our [contributing guide](contributing.md) if you're looking to contribute (issues/PRs/etc).*\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\n**This documentation covers the 1.0 beta releases, which use Babel 7. The last release that uses Babel 6 is [`v0.25.0`](https://github.com/avajs/ava/tree/v0.25.0).**\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Contents\n\n- [Usage](#usage)\n- [CLI Usage](#cli)\n- [Debugging](#debugging)\n- [Reporters](#reporters)\n- [Configuration](#configuration)\n- [Documentation](#documentation)\n- [API](#api)\n- [Assertions](#assertions)\n- [Snapshot testing](#snapshot-testing)\n- [Tips](#tips)\n- [FAQ](#faq)\n- [Recipes](#recipes)\n- [Support](#support)\n- [Related](#related)\n- [Links](#links)\n- [Team](#team)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript & Flow type definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](#process-isolation)\n- [Write your tests using the latest JavaScript syntax](#latest-javascript-support)\n- [Promise support](#promise-support)\n- [Async function support](#async-function-support)\n- [Observable support](#observable-support)\n- [Enhanced assertion messages](#enhanced-assertion-messages)\n- [Automatic parallel test runs in CI](#parallel-runs-in-ci)\n- [TAP reporter](#tap-reporter)\n- [Automatic migration from other test runners](https://github.com/avajs/ava-codemods#migrating-to-ava)\n\n\n## Test syntax\n\n```js\nimport test from 'ava';\n\ntest('arrays are equal', t => {\n\tt.deepEqual([1, 2], [1, 2]);\n});\n```\n\n## Usage\n\n### Add AVA to your project\n\nTo install and set up AVA, run:\n\n```console\n$ npx create-ava --next\n```\n\nYour `package.json` will then look like this:\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"1.0.0-beta.4\"\n\t}\n}\n```\n\nInitialization will work with npm and Yarn, but running `npx` requires [`npm@5.2.0`](https://github.com/npm/npm/releases/tag/v5.2.0) or greater to be installed. Otherwise, you'll have to manually install `ava` and configure the `test` script in your `package.json` as per above:\n\n```console\n$ npm install --save-dev --save-exact ava@next\n```\n\nOr if you prefer using Yarn:\n\n```console\n$ yarn add ava@next --dev --exact\n```\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nimport test from 'ava';\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\n\tt.is(await bar, 'bar');\n});\n```\n\n### Run it\n\n```console\n$ npm test\n```\n\n### Watch it\n\n```console\n$ npm test -- --watch\n```\n\nAVA comes with an intelligent watch mode. [Learn more in its recipe](docs/recipes/watch-mode.md).\n\n### Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## CLI\n\n```console\n$ ava --help\n\n  Usage\n    ava [<file|directory|glob> ...]\n\n  Options\n    --watch, -w             Re-run tests when tests and source files change\n    --match, -m             Only run tests with matching title (Can be repeated)\n    --update-snapshots, -u  Update snapshots\n    --fail-fast             Stop after first test failure\n    --timeout, -T           Set global timeout\n    --serial, -s            Run tests serially\n    --concurrency, -c       Max number of test files running at the same time (Default: CPU cores)\n    --verbose, -v           Enable verbose output\n    --tap, -t               Generate TAP output\n    --color                 Force color output\n    --no-color              Disable color output\n\n  Examples\n    ava\n    ava test.js test2.js\n    ava test-*.js\n    ava test\n\n  Default patterns when no arguments:\n  test.js test-*.js test/**/*.js **/__tests__/**/*.js **/*.test.js\n```\n\n*Note that the CLI will use your local install of AVA when available, even when run globally.*\n\nDirectories are recursed, with all `*.js` files being treated as test files. Directories named `fixtures`, `helpers` and `node_modules` are *always* ignored. So are files starting with `_` which allows you to place helpers in the same directory as your test files.\n\nWhen using `npm test`, you can pass positional arguments directly `npm test test2.js`, but flags needs to be passed like `npm test -- --verbose`.\n\n\n## Debugging\n\nAVA runs tests in child processes, so to debug tests, you need to do this workaround:\n\n```console\n$ node --inspect node_modules/ava/profile.js some/test/file.js\n```\n\n### Debugger-specific tips\n\n- [Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Visual Studio Code](docs/recipes/debugging-with-vscode.md)\n\n\n## Reporters\n\n### Mini-reporter\n\nThe mini-reporter is the default reporter.\n\n<img src=\"media/mini-reporter.gif\" width=\"460\">\n\n### Verbose reporter\n\nUse the `--verbose` flag to enable the verbose reporter. This is always used in CI environments unless the [TAP reporter](#tap-reporter) is enabled.\n\n<img src=\"media/verbose-reporter.png\" width=\"294\">\n\n### TAP reporter\n\nAVA supports the TAP format and thus is compatible with [any TAP reporter](https://github.com/sindresorhus/awesome-tap#reporters). Use the `--tap` flag to enable TAP output.\n\n```console\n$ ava --tap | tap-nyan\n```\n\n<img src=\"media/tap-reporter.png\" width=\"420\">\n\nPlease note that the TAP reporter is unavailable when using [watch mode](#watch-it).\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n\n## Configuration\n\nAll of the CLI options can be configured in the `ava` section of either your `package.json` or an `ava.config.js` file. This allows you to modify the default behavior of the `ava` command, so you don't have to repeatedly type the same options on the command prompt.\n\nTo ignore a file or directory, prefix the pattern with an `!` (exclamation mark).\n\n```json\n{\n\t\"ava\": {\n\t\t\"files\": [\n\t\t\t\"my-test-directory/**/*.js\",\n\t\t\t\"!my-test-directory/exclude-this-directory/**/*.js\",\n\t\t\t\"!**/exclude-this-file.js\"\n\t\t],\n\t\t\"sources\": [\n\t\t\t\"**/*.{js,jsx}\",\n\t\t\t\"!dist/**/*\"\n\t\t],\n\t\t\"match\": [\n\t\t\t\"*oo\",\n\t\t\t\"!foo\"\n\t\t],\n\t\t\"cache\": true,\n\t\t\"concurrency\": 5,\n\t\t\"failFast\": true,\n\t\t\"failWithoutAssertions\": false,\n\t\t\"tap\": true,\n\t\t\"compileEnhancements\": false,\n\t\t\"require\": [\n\t\t\t\"@babel/register\"\n\t\t],\n\t\t\"babel\": {\n\t\t\t\"extensions\": [\"jsx\"],\n\t\t\t\"testOptions\": {\n\t\t\t\t\"babelrc\": false\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nArguments passed to the CLI will always take precedence over the configuration in `package.json`.\n\n### Options\n\n- `files`: file & directory paths and glob patterns that select which files AVA will run tests from. Files with an underscore prefix are ignored. All matched files in selected directories are run. By default only selects files with `js` extensions, even if the glob pattern matches other files. Specify `extensions` and `babel.extensions` to allow other file extensions\n- `source`: files that, when changed, cause tests to be re-run in watch mode. See the [watch mode recipe for details](https://github.com/avajs/ava/blob/master/docs/recipes/watch-mode.md#source-files-and-test-files)\n- `match`: not typically useful in the `package.json` configuration, but equivalent to [specifying `--match` on the CLI](#running-tests-with-matching-titles)\n- `cache`: cache compiled test and helper files under `node_modules/.cache/ava`. If `false`, files are cached in a temporary directory instead\n- `failFast`: stop running further tests once a test fails\n- `failWithoutAssertions`: if `false`, does not fail a test if it doesn't run [assertions](#assertions)\n- `tap`: if `true`, enables the [TAP reporter](#tap-reporter)\n- `snapshotDir`: specifies a fixed location for storing snapshot files. Use this if your snapshots are ending up in the wrong location\n- `compileEnhancements`: if `false`, disables [power-assert](https://github.com/power-assert-js/power-assert) — which otherwise helps provide more descriptive error messages — and detection of improper use of the `t.throws()` assertion\n- `extensions`: extensions of test files that are not precompiled using AVA's Babel presets. Note that files are still compiled to enable power-assert and other features, so you may also need to set `compileEnhancements` to `false` if your files are not valid JavaScript. Setting this overrides the default `\"js\"` value, so make sure to include that extension in the list, as long as it's not included in `babel.extensions`\n- `require`: extra modules to require before tests are run. Modules are required in the [worker processes](#process-isolation)\n- `babel`: test file specific Babel options. See our [Babel recipe] for more details\n- `babel.extensions`: extensions of test files that will be precompiled using AVA's Babel presets. Setting this overrides the default `\"js\"` value, so make sure to include that extension in the list\n\nNote that providing files on the CLI overrides the `files` option. If you've configured a glob pattern, for instance `test/**/*.test.js`, you may want to repeat it when using the CLI: `ava 'test/integration/*.test.js'`.\n\n### Using `ava.config.js`\n\nTo use an `ava.config.js` file:\n\n 1. It must be in the same directory as your `package.json`\n 2. Your `package.json` must not contain an `ava` property (or, if it does, it must be an empty object)\n\nThe config file must have a default export, using ES modules. It can either be a plain object or a factory function which returns a plain object:\n\n```js\nexport default {\n\trequire: ['esm']\n};\n```\n\n```js\nexport default function factory() {\n\treturn {\n\t\trequire: ['esm']\n\t};\n};\n```\n\nThe factory function is called with an object containing a `projectDir` property, which you could use to change the returned configuration:\n\n```js\nexport default ({projectDir}) => {\n\tif (projectDir === '/Users/username/projects/my-project') {\n\t\treturn {\n\t\t\t// Config A\n\t\t};\n\t}\n\n\treturn {\n\t\t// Config B\n\t};\n};\n```\n\nNote that the final configuration must not be a promise.\n\n## Documentation\n\nTests are run concurrently. You can specify synchronous and asynchronous tests. Tests are considered synchronous unless you return a promise or [observable](https://github.com/zenparsing/zen-observable).\n\nWe *highly* recommend the use of [async functions](#async-function-support). They make asynchronous code concise and readable, and they implicitly return a promise so you don't have to.\n\nIf you're unable to use promises or observables, you may enable \"callback mode\" by defining your test with `test.cb([title], fn)`. Tests declared this way **must** be manually ended with `t.end()`. This mode is mainly intended for testing callback-style APIs. However, we would strongly recommend [promisifying](https://github.com/sindresorhus/pify) callback-style APIs instead of using \"callback mode\", as this results in more correct and readable tests.\n\nYou must define all tests synchronously. They can't be defined inside `setTimeout`, `setImmediate`, etc.\n\nAVA tries to run test files with their current working directory set to the directory that contains your `package.json` file.\n\n### Creating tests\n\nTo create a test you call the `test` function you imported from AVA. Provide the required title and implementation function. Titles must be unique within each test file. The function will be called when your test is run. It's passed an [execution object](#t) as its first argument.\n\n**Note:** In order for the [enhanced assertion messages](#enhanced-assertion-messages) to behave correctly, the first argument **must** be named `t`.\n\n```js\nimport test from 'ava';\n\ntest('my passing test', t => {\n\tt.pass();\n});\n```\n\n### Assertion planning\n\nAssertion plans ensure tests only pass when a specific number of assertions have been executed. They'll help you catch cases where tests exit too early. They'll also cause tests to fail if too many assertions are executed, which can be useful if you have assertions inside callbacks or loops.\n\nIf you do not specify an assertion plan, your test will still fail if no assertions are executed. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration) to disable this behavior.\n\nNote that, unlike [`tap`](https://www.npmjs.com/package/tap) and [`tape`](https://www.npmjs.com/package/tape), AVA does *not* automatically end a test when the planned assertion count is reached.\n\nThese examples will result in a passed test:\n\n```js\ntest('resolves with 3', t => {\n\tt.plan(1);\n\n\treturn Promise.resolve(3).then(n => {\n\t\tt.is(n, 3);\n\t});\n});\n\ntest.cb('invokes callback', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t\tt.end();\n\t});\n});\n```\n\nThese won't:\n\n```js\ntest('loops twice', t => {\n\tt.plan(2);\n\n\tfor (let i = 0; i < 3; i++) {\n\t\tt.true(i < 3);\n\t}\n}); // Fails, 3 assertions are executed which is too many\n\ntest('invokes callback synchronously', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t});\n}); // Fails, the test ends synchronously before the assertion is executed\n```\n\n### Running tests serially\n\nTests are run concurrently by default, however, sometimes you have to write tests that cannot run concurrently. In these rare cases you can use the `.serial` modifier. It will force those tests to run serially *before* the concurrent ones.\n\n```js\ntest.serial('passes serially', t => {\n\tt.pass();\n});\n```\n\nNote that this only applies to tests within a particular test file. AVA will still run multiple tests files at the same time unless you pass the [`--serial` CLI flag](#cli).\n\nYou can use the `.serial` modifier with all tests, hooks and even `.todo()`, but it's only available on the `test` function.\n\n### Running specific tests\n\nDuring development it can be helpful to only run a few specific tests. This can be accomplished using the `.only` modifier:\n\n```js\ntest('will not be run', t => {\n\tt.fail();\n});\n\ntest.only('will be run', t => {\n\tt.pass();\n});\n```\n\nYou can use the `.only` modifier with all tests. It cannot be used with hooks or `.todo()`.\n\n*Note:* The `.only` modifier applies to the test file it's defined in, so if you run multiple test files, tests in other files will still run. If you want to only run the `test.only` test, provide just that test file to AVA.\n\n### Running tests with matching titles\n\nThe `--match` flag allows you to run just the tests that have a matching title. This is achieved with simple wildcard patterns. Patterns are case insensitive. See [`matcher`](https://github.com/sindresorhus/matcher) for more details.\n\nMatch titles ending with `foo`:\n\n```console\n$ ava --match='*foo'\n```\n\nMatch titles starting with `foo`:\n\n```console\n$ ava --match='foo*'\n```\n\nMatch titles containing `foo`:\n\n```console\n$ ava --match='*foo*'\n```\n\nMatch titles that are *exactly* `foo` (albeit case insensitively):\n\n```console\n$ ava --match='foo'\n```\n\nMatch titles not containing `foo`:\n\n```console\n$ ava --match='!*foo*'\n```\n\nMatch titles starting with `foo` and ending with `bar`:\n\n```console\n$ ava --match='foo*bar'\n```\n\nMatch titles starting with `foo` or ending with `bar`:\n\n```console\n$ ava --match='foo*' --match='*bar'\n```\n\nNote that a match pattern takes precedence over the `.only` modifier. Only tests with an explicit title are matched. Tests without titles or whose title is derived from the implementation function will be skipped when `--match` is used.\n\nHere's what happens when you run AVA with a match pattern of `*oo*` and the following tests:\n\n```js\ntest('foo will run', t => {\n\tt.pass();\n});\n\ntest('moo will also run', t => {\n\tt.pass();\n});\n\ntest.only('boo will run but not exclusively', t => {\n\tt.pass();\n});\n\n// Won't run, no title\ntest(function (t) {\n\tt.fail();\n});\n\n// Won't run, no explicit title\ntest(function foo(t) {\n\tt.fail();\n});\n```\n\n### Skipping tests\n\nSometimes failing tests can be hard to fix. You can tell AVA to skip these tests using the `.skip` modifier. They'll still be shown in the output (as having been skipped) but are never run.\n\n```js\ntest.skip('will not be run', t => {\n\tt.fail();\n});\n```\n\nYou must specify the implementation function. You can use the `.skip` modifier with all tests and hooks, but not with `.todo()`. You can not apply further modifiers to `.skip`.\n\n### Test placeholders (\"todo\")\n\nYou can use the `.todo` modifier when you're planning to write a test. Like skipped tests these placeholders are shown in the output. They only require a title; you cannot specify the implementation function.\n\n```js\ntest.todo('will think about writing this later');\n```\n\nYou can signal that you need to write a serial test:\n\n```js\ntest.serial.todo('will think about writing this later');\n```\n\n### Failing tests\n\nYou can use the `.failing` modifier to document issues with your code that need to be fixed. Failing tests are run just like normal ones, but they are expected to fail, and will not break your build when they do. If a test marked as failing actually passes, it will be reported as an error and fail the build with a helpful message instructing you to remove the `.failing` modifier.\n\nThis allows you to merge `.failing` tests before a fix is implemented without breaking CI. This is a great way to recognize good bug report PR's with a commit credit, even if the reporter is unable to actually fix the problem.\n\n```js\n// See: github.com/user/repo/issues/1234\ntest.failing('demonstrate some bug', t => {\n\tt.fail(); // Test will count as passed\n});\n```\n\n### Before & after hooks\n\nAVA lets you register hooks that are run before and after your tests. This allows you to run setup and/or teardown code.\n\n`test.before()` registers a hook to be run before the first test in your test file. Similarly `test.after()` registers a hook to be run after the last test. Use `test.after.always()` to register a hook that will **always** run once your tests and other hooks complete. `.always()` hooks run regardless of whether there were earlier failures, so they are ideal for cleanup tasks. Note however that uncaught exceptions, unhandled rejections or timeouts will crash your tests, possibly preventing `.always()` hooks from running.\n\n`test.beforeEach()` registers a hook to be run before each test in your test file. Similarly `test.afterEach()` a hook to be run after each test. Use `test.afterEach.always()` to register an after hook that is called even if other test hooks, or the test itself, fail.\n\nIf a test is skipped with the `.skip` modifier, the respective `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks are not run. Likewise, if all tests in a test file are skipped `.before()`, `.after()` and `.after.always()` hooks for the file are not run.\n\nLike `test()` these methods take an optional title and an implementation function. The title is shown if your hook fails to execute. The implementation is called with an [execution object](#t). You can use assertions in your hooks. You can also pass a [macro function](#test-macros) and additional arguments.\n\n`.before()` hooks execute before `.beforeEach()` hooks. `.afterEach()` hooks execute before `.after()` hooks. Within their category the hooks execute in the order they were defined. By default hooks execute concurrently, but you can use `test.serial` to ensure only that single hook is run at a time. Unlike with tests, serial hooks are *not* run before other hooks:\n\n```js\ntest.before(t => {\n\t// This runs before all tests\n});\n\ntest.before(t => {\n\t// This runs concurrently with the above\n});\n\ntest.serial.before(t => {\n\t// This runs after the above\n});\n\ntest.serial.before(t => {\n\t// This too runs after the above, and before tests\n});\n\ntest.after('cleanup', t => {\n\t// This runs after all tests\n});\n\ntest.after.always('guaranteed cleanup', t => {\n\t// This will always run, regardless of earlier failures\n});\n\ntest.beforeEach(t => {\n\t// This runs before each test\n});\n\ntest.afterEach(t => {\n\t// This runs after each test\n});\n\ntest.afterEach.always(t => {\n\t// This runs after each test and other test hooks, even if they failed\n});\n\ntest('title', t => {\n\t// Regular test\n});\n```\n\nHooks can be synchronous or asynchronous, just like tests. To make a hook asynchronous return a promise or observable, use an async function, or enable callback mode via `test.before.cb()`, `test.beforeEach.cb()` etc.\n\n```js\ntest.before(async t => {\n\tawait promiseFn();\n});\n\ntest.after(t => {\n\treturn new Promise(/* ... */);\n});\n\ntest.beforeEach.cb(t => {\n\tsetTimeout(t.end);\n});\n\ntest.afterEach.cb(t => {\n\tsetTimeout(t.end);\n});\n```\n\nKeep in mind that the `.beforeEach()` and `.afterEach()` hooks run just before and after a test is run, and that by default tests run concurrently. This means each multiple `.beforeEach()` hooks may run concurrently. Using `test.serial.beforeEach()` does not change this. If you need to set up global state for each test (like spying on `console.log` [for example](https://github.com/avajs/ava/issues/560)), you'll need to make sure the tests themselves are [run serially](#running-tests-serially).\n\nRemember that AVA runs each test file in its own process. You may not have to clean up global state in a `.after()`-hook since that's only called right before the process exits.\n\n#### Test context\n\nHooks can share context with the test:\n\n```js\ntest.beforeEach(t => {\n\tt.context.data = generateUniqueData();\n});\n\ntest('context data is foo', t => {\n\tt.is(t.context.data + 'bar', 'foobar');\n});\n```\n\nContext created in `.before()` hooks is [cloned](https://www.npmjs.com/package/lodash.clone) before it is passed to `.beforeEach()` hooks and / or tests. The `.after()` and `.after.always()` hooks receive the original context value.\n\nFor `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks the context is *not* shared between different tests, allowing you to set up data such that it will not leak to other tests.\n\nBy default `t.context` is an object but you can reassign it:\n\n```js\ntest.before(t => {\n\tt.context = 'unicorn';\n});\n\ntest('context is unicorn', t => {\n\tt.is(t.context, 'unicorn');\n});\n```\n\n### Test macros\n\nAdditional arguments passed to the test declaration will be passed to the test implementation. This is useful for creating reusable test macros.\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\ntest('2 + 2 = 4', macro, '2 + 2', 4);\ntest('2 * 3 = 6', macro, '2 * 3', 6);\n```\n\nYou can build the test title programmatically by attaching a `title` function to the macro:\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nmacro.title = (providedTitle, input, expected) => `${providedTitle} ${input} = ${expected}`.trim();\n\ntest(macro, '2 + 2', 4);\ntest(macro, '2 * 3', 6);\ntest('providedTitle', macro, '3 * 3', 9);\n```\n\nThe `providedTitle` argument defaults to an empty string if the user does not supply a string title. This allows for easy concatenation without having to worry about `null` / `undefined`. It is worth remembering that the empty string is considered a falsy value, so you can still use `if(providedTitle) {...}`.\n\nYou can also pass arrays of macro functions:\n\n```js\nconst safeEval = require('safe-eval');\n\nfunction evalMacro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nfunction safeEvalMacro(t, input, expected) {\n\tt.is(safeEval(input), expected);\n}\n\ntest([evalMacro, safeEvalMacro], '2 + 2', 4);\ntest([evalMacro, safeEvalMacro], '2 * 3', 6);\n```\n\nWe encourage you to use macros instead of building your own test generators ([here is an example](https://github.com/avajs/ava-codemods/blob/47073b5b58aa6f3fb24f98757be5d3f56218d160/test/ok-to-truthy.js#L7-L9) of code that should be replaced with a macro). Macros are designed to perform static analysis of your code, which can lead to better performance, IDE integration, and linter rules.\n\n### Custom assertions\n\nYou can use any assertion library instead of or in addition to the built-in one, provided it throws exceptions when the assertion fails.\n\nThis won't give you as nice an experience as you'd get with the [built-in assertions](#assertions) though, and you won't be able to use the [assertion planning](#assertion-planning) ([see #25](https://github.com/avajs/ava/issues/25)).\n\nYou'll have to configure AVA to not fail tests if no assertions are executed, because AVA can't tell if custom assertions pass. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration).\n\n```js\nimport assert from 'assert';\n\ntest('custom assertion', t => {\n\tassert(true);\n});\n```\n\n### Latest JavaScript support\n\nAVA uses [Babel 7](https://babeljs.io) so you can use the latest JavaScript syntax in your tests. There is no extra setup required. You don't need to be using Babel in your own project for this to work either.\n\nWe aim support all [finished syntax proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md), as well as all syntax from ratified JavaScript versions (e.g. ES2017). See our [`@ava/stage-4`](https://github.com/avajs/babel-preset-stage-4) preset for the currently supported proposals.\n\nPlease note that we do not add or modify built-ins. For example, if you use [`Object.entries()`](https://github.com/tc39/proposal-object-values-entries) in your tests, they will crash in Node.js 6 which does not implement this method.\n\nYou can disable this syntax support, or otherwise customize AVA's Babel pipeline. See our [Babel recipe] for more details.\n\n### TypeScript support\n\nAVA includes typings for TypeScript. You have to set up transpilation yourself. When you set `module` to `commonjs` in your `tsconfig.json` file, TypeScript will automatically find the type definitions for AVA. You should set `target` to `es2015` to use promises and async functions.\n\nSee AVA's [TypeScript recipe](docs/recipes/typescript.md) for a more detailed explanation.\n\n### Transpiling imported modules\n\nAVA currently only transpiles the tests you ask it to run, as well as test helpers (files starting with `_` or in `helpers` directory) inside the test directory. *It will not transpile modules you `import` from outside of the test.* This may be unexpected but there are workarounds.\n\nIf you use Babel you can use its [require hook](https://babeljs.io/docs/usage/require/) to transpile imported modules on-the-fly. To add it, [configure it in your `package.json`](#configuration).\n\nYou can also transpile your modules in a separate process and refer to the transpiled files rather than the sources from your tests. Example [here](docs/recipes/precompiling-with-webpack.md).\n\n### Promise support\n\nIf you return a promise in the test you don't need to explicitly end the test as it will end when the promise resolves.\n\n```js\ntest('resolves with unicorn', t => {\n\treturn somePromise().then(result => {\n\t\tt.is(result, 'unicorn');\n\t});\n});\n```\n\n### Async function support\n\nAVA comes with built-in support for [async functions](https://tc39.github.io/ecmascript-asyncawait/) *(async/await)*.\n\n```js\ntest(async function (t) {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n\n// Async arrow function\ntest('promises the truth', async t => {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n```\n\n### Observable support\n\nAVA comes with built-in support for [observables](https://github.com/zenparsing/es-observable). If you return an observable from a test, AVA will automatically consume it to completion before ending the test.\n\n*You do not need to use \"callback mode\" or call `t.end()`.*\n\n```js\ntest('handles observables', t => {\n\tt.plan(3);\n\treturn Observable.of(1, 2, 3, 4, 5, 6)\n\t\t.filter(n => {\n\t\t\t// Only even numbers\n\t\t\treturn n % 2 === 0;\n\t\t})\n\t\t.map(() => t.pass());\n});\n```\n\n### Callback support\n\nAVA supports using `t.end` as the final callback when using node-style error-first callback APIs. AVA will consider any truthy value passed as the first argument to `t.end` to be an error. Note that `t.end` requires \"callback mode\", which can be enabled by using the `test.cb` chain.\n\n```js\ntest.cb('data.txt can be read', t => {\n\t// `t.end` automatically checks for error as first argument\n\tfs.readFile('data.txt', t.end);\n});\n```\n\n### Global timeout\n\nA global timeout can be set via the `--timeout` option. Timeout in AVA behaves differently than in other test frameworks. AVA resets a timer after each test, forcing tests to quit if no new test results were received within the specified timeout. This can be used to handle stalled tests.\n\nYou can set timeouts in a human-readable way:\n\n```console\n$ ava --timeout=10s # 10 seconds\n$ ava --timeout=2m # 2 minutes\n$ ava --timeout=100 # 100 milliseconds\n```\n\n### Parallel runs in CI\n\nAVA automatically detects whether your CI environment supports parallel builds. Each build will run a subset of all test files, while still making sure all tests get executed. See the [`ci-parallel-vars`](https://www.npmjs.com/package/ci-parallel-vars) package for a list of supported CI environments.\n\n## API\n\n### `test([title], implementation)`\n### `test.serial([title], implementation)`\n### `test.cb([title], implementation)`\n### `test.only([title], implementation)`\n### `test.skip([title], implementation)`\n### `test.todo(title)`\n### `test.failing([title], implementation)`\n### `test.before([title], implementation)`\n### `test.after([title], implementation)`\n### `test.beforeEach([title], implementation)`\n### `test.afterEach([title], implementation)`\n\n#### `title`\n\nType: `string`\n\nTest title.\n\n#### `implementation(t)`\n\nType: `function`\n\nShould contain the actual test.\n\n##### `t`\n\nType: `object`\n\nThe execution object of a particular test. Each test implementation receives a different object. Contains the [assertions](#assertions) as well as `.plan(count)` and `.end()` methods. `t.context` can contain shared state from hooks. `t.title` returns the test's title.\n\n###### `t.plan(count)`\n\nPlan how many assertion there are in the test. The test will fail if the actual assertion count doesn't match the number of planned assertions. See [assertion planning](#assertion-planning).\n\n###### `t.end()`\n\nEnd the test. Only works with `test.cb()`.\n\n###### `t.log(...values)`\n\nLog values contextually alongside the test result instead of immediately printing them to `stdout`. Behaves somewhat like `console.log`, but without support for placeholder tokens.\n\n## Assertions\n\nAssertions are mixed into the [execution object](#t) provided to each test implementation:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy('unicorn'); // Assertion\n});\n```\n\nAssertions are bound to their test so you can assign them to a variable or pass them around:\n\n```js\ntest('unicorns are truthy', t => {\n\tconst truthy = t.truthy;\n\ttruthy('unicorn');\n});\n```\n\nAssertions can be skipped by adding `.skip()`:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy.skip('unicorn');\n});\n```\n\nIf multiple assertion failures are encountered within a single test, AVA will only display the *first* one.\n\n### `.pass([message])`\n\nPassing assertion.\n\n### `.fail([message])`\n\nFailing assertion.\n\n### `.truthy(value, [message])`\n\nAssert that `value` is truthy.\n\n### `.falsy(value, [message])`\n\nAssert that `value` is falsy.\n\n### `.true(value, [message])`\n\nAssert that `value` is `true`.\n\n### `.false(value, [message])`\n\nAssert that `value` is `false`.\n\n### `.is(value, expected, [message])`\n\nAssert that `value` is the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.not(value, expected, [message])`\n\nAssert that `value` is not the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.deepEqual(value, expected, [message])`\n\nAssert that `value` is deeply equal to `expected`. See [Concordance](https://github.com/concordancejs/concordance) for details. Works with [React elements and `react-test-renderer`](https://github.com/concordancejs/react).\n\n### `.notDeepEqual(value, expected, [message])`\n\nAssert that `value` is not deeply equal to `expected`. The inverse of `.deepEqual()`.\n\n### `.throws(fn, [expected, [message]])`\n\nAssert that an error is thrown. `fn` must be a function which should throw. The thrown value *must* be an error. It is returned so you can run more assertions against it.\n\n`expected` can be a constructor, in which case the thrown error must be an instance of the constructor. It can be a string, which is compared against the thrown error's message, or a regular expression which is matched against this message. You can also specify a matcher object with one or more of the following properties:\n\n* `instanceOf`: a constructor, the thrown error must be an instance of\n* `is`: the thrown error must be strictly equal to `expected.is`\n* `message`: either a string, which is compared against the thrown error's message, or a regular expression, which is matched against this message\n* `name`: the expected `.name` value of the thrown error\n* `code`: the expected `.code` value of the thrown error\n\n`expected` does not need to be specified. If you don't need it but do want to set an assertion message you have to specify `null`.\n\nExample:\n\n```js\nconst fn = () => {\n\tthrow new TypeError('🦄');\n};\n\ntest('throws', t => {\n\tconst error = t.throws(() => {\n\t\tfn();\n\t}, TypeError);\n\n\tt.is(error.message, '🦄');\n});\n```\n\n### `.throwsAsync(thrower, [expected, [message]])`\n\nAssert that an error is thrown. `thrower` can be an async function which should throw, or a promise that should reject. This assertion must be awaited.\n\nThe thrown value *must* be an error. It is returned so you can run more assertions against it.\n\n`expected` can be a constructor, in which case the thrown error must be an instance of the constructor. It can be a string, which is compared against the thrown error's message, or a regular expression which is matched against this message. You can also specify a matcher object with one or more of the following properties:\n\n* `instanceOf`: a constructor, the thrown error must be an instance of\n* `is`: the thrown error must be strictly equal to `expected.is`\n* `message`: either a string, which is compared against the thrown error's message, or a regular expression, which is matched against this message\n* `name`: the expected `.name` value of the thrown error\n* `code`: the expected `.code` value of the thrown error\n\n`expected` does not need to be specified. If you don't need it but do want to set an assertion message you have to specify `null`.\n\nExample:\n\n```js\ntest('throws', async t => {\n\tawait t.throwsAsync(async () => {\n\t\tthrow new TypeError('🦄');\n\t}, {instanceOf: TypeError, message: '🦄'});\n});\n```\n\n```js\nconst promise = Promise.reject(new TypeError('🦄'));\n\ntest('rejects', async t => {\n\tconst error = await t.throwsAsync(promise);\n\tt.is(error.message, '🦄');\n});\n```\n\n### `.notThrows(fn, [message])`\n\nAssert that no error is thrown. `fn` must be a function which shouldn't throw.\n\n### `.notThrowsAsync(nonThrower, [message])`\n\nAssert that no error is thrown. `nonThrower` can be an async function which shouldn't throw, or a promise that should resolve.\n\nLike the `.throwsAsync()` assertion, you must wait for the assertion to complete:\n\n```js\ntest('resolves', async t => {\n\tawait t.notThrowsAsync(promise);\n});\n```\n\n### `.regex(contents, regex, [message])`\n\nAssert that `contents` matches `regex`.\n\n### `.notRegex(contents, regex, [message])`\n\nAssert that `contents` does not match `regex`.\n\n### `.snapshot(expected, [message])`\n### `.snapshot(expected, [options], [message])`\n\nCompares the `expected` value with a previously recorded snapshot. Snapshots are stored for each test, so ensure you give your tests unique titles. Alternatively pass an `options` object to select a specific snapshot, for instance `{id: 'my snapshot'}`.\n\nSnapshot assertions cannot be skipped when snapshots are being updated.\n\n## Snapshot testing\n\nAVA supports snapshot testing, [as introduced by Jest](https://facebook.github.io/jest/docs/snapshot-testing.html), through its [Assertions](#assertions) interface. You can snapshot any value as well as React elements:\n\n```js\n// Your component\nconst HelloWorld = () => <h1>Hello World...!</h1>;\n\nexport default HelloWorld;\n```\n\n```js\n// Your test\nimport test from 'ava';\nimport render from 'react-test-renderer';\nimport HelloWorld from '.';\n\ntest('HelloWorld component', t => {\n\tconst tree = render.create(<HelloWorld/>).toJSON();\n\tt.snapshot(tree);\n});\n```\n\n[Try it out in this example project.](https://github.com/avajs/ava-snapshot-example)\n\nSnapshots are stored alongside your test files. If your tests are in a `test` or `tests` folder the snapshots will be stored in a `snapshots` folder. If your tests are in a `__tests__` folder then they they'll be stored in a `__snapshots__` folder.\n\nSay you have `~/project/test/main.js` which contains snapshot assertions. AVA will create two files:\n\n* `~/project/test/snapshots/main.js.snap`\n* `~/project/test/snapshots/main.js.md`\n\nThe first file contains the actual snapshot and is required for future comparisons. The second file contains your *snapshot report*. It's regenerated when you update your snapshots. If you commit it to source control you can diff it to see the changes to your snapshot.\n\nAVA will show why your snapshot assertion failed:\n\n<img src=\"media/snapshot-testing.png\" width=\"1048\">\n\nYou can then check your code. If the change was intentional you can use the `--update-snapshots` (or `-u`) flag to update the snapshots:\n\n```console\n$ ava --update-snapshots\n```\n\nYou can specify a fixed location for storing the snapshot files in AVA's [`package.json` configuration](#configuration):\n\n```json\n{\n\t\"ava\": {\n\t\t\"snapshotDir\": \"custom-directory\"\n\t}\n}\n```\n\nThe snapshot files will be saved in a directory structure that mirrors that of your test files.\n\nIf you are running AVA against precompiled test files, AVA will try and use source maps to determine the location of the original files. Snapshots will be stored next to these files, following the same rules as if AVA had executed the original files directly. This is great if you're writing your tests in TypeScript (see our [TypeScript recipe](docs/recipes/typescript.md)).\n\n### Skipping assertions\n\nAny assertion can be skipped using the `skip` modifier. Skipped assertions are still counted, so there is no need to change your planned assertion count.\n\n```js\ntest('skip assertion', t => {\n\tt.plan(2);\n\tt.is.skip(foo(), 5); // No need to change your plan count when skipping\n\tt.is(1, 1);\n});\n```\n\n### Enhanced assertion messages\n\nAVA comes with [`power-assert`](https://github.com/power-assert-js/power-assert) built-in, giving you more descriptive assertion messages. It reads your test and tries to infer more information from the code.\n\nLet's take this example, using Node's standard [`assert` library](https://nodejs.org/api/assert.html):\n\n```js\nconst a = /foo/;\nconst b = 'bar';\nconst c = 'baz';\nrequire('assert').ok(a.test(b) || b === c);\n```\n\nIf you paste that into a Node REPL it'll return:\n\n```\nAssertionError: false == true\n```\n\nIn AVA however, this test:\n\n```js\ntest('enhanced assertions', t => {\n\tconst a = /foo/;\n\tconst b = 'bar';\n\tconst c = 'baz';\n\tt.true(a.test(b) || b === c);\n});\n```\n\nWill output:\n\n```\nt.true(a.test(b) || b === c)\n       |      |     |     |\n       |      \"bar\" \"bar\" \"baz\"\n       false\n```\n\n## Process isolation\n\nEach test file is run in a separate Node.js process. This allows you to change the global state or overriding a built-in in one test file, without affecting another. It's also great for performance on modern multi-core processors, allowing multiple test files to execute in parallel.\n\nAVA will set `process.env.NODE_ENV` to `test`, unless the `NODE_ENV` environment variable has been set. This is useful if the code you're testing has test defaults (for example when picking what database to connect to, or environment-specific Babel options). It may cause your code or its dependencies to behave differently though. Note that `'NODE_ENV' in process.env` will always be `true`.\n\n## Tips\n\n### Temp files\n\nRunning tests concurrently comes with some challenges, doing file IO is one.\n\nUsually, serial tests create temp directories in the current test directory and clean them up at the end. This won't work when you run tests concurrently as tests will conflict with each other. The correct way to do it is to use a new temp directory for each test. The [`tempfile`](https://github.com/sindresorhus/tempfile) and [`temp-write`](https://github.com/sindresorhus/temp-write) modules can be helpful.\n\n### Code coverage\n\nYou can't use [`istanbul`](https://github.com/gotwarlost/istanbul) for code coverage as AVA [spawns the test files](#process-isolation). You can use [`nyc`](https://github.com/bcoe/nyc) instead, which is basically `istanbul` with support for subprocesses.\n\nAs of version `5.0.0` it uses source maps to report coverage for your actual code, regardless of transpilation. Make sure that the code you're testing includes an inline source map or references a source map file. If you use `babel-register` you can set the `sourceMaps` option in your Babel config to `inline`.\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [/ˈeɪvə/ ay-və](media/pronunciation.m4a?raw=true).\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Flow](docs/recipes/flow.md)\n- [Configuring Babel][Babel recipe]\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [JSPM and SystemJS](docs/recipes/jspm-systemjs.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Precompiling source files with webpack](docs/recipes/precompiling-with-webpack.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n\n## Support\n\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/ava)\n- [Spectrum](https://spectrum.chat/ava)\n- [Twitter](https://twitter.com/ava__js)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) - Lint rules for AVA tests\n- [sublime-ava](https://github.com/avajs/sublime-ava) - Snippets for AVA tests\n- [atom-ava](https://github.com/avajs/atom-ava) - Snippets for AVA tests\n- [vscode-ava](https://github.com/samverschueren/vscode-ava) - Snippets for AVA tests\n- [gulp-ava](https://github.com/avajs/gulp-ava) - Run tests with gulp\n- [grunt-ava](https://github.com/avajs/grunt-ava) - Run tests with grunt\n- [More…](https://github.com/avajs/awesome-ava#packages)\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [AVA Casts](http://avacasts.com)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus) | [![Vadim Demedes](https://github.com/vadimdemedes.png?size=100)](https://github.com/vadimdemedes)\n---|---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](http://sindresorhus.com) | [Vadim Demedes](https://github.com/vadimdemedes)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://ava.li\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n\n[Babel recipe]: docs/recipes/babel.md\n",
      "readmeFilename": "readme.md",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.0.0-beta.7",
      "_npmVersion": "6.3.0",
      "_nodeVersion": "10.8.0",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-ScJqYWLPDyqSBdwWF2ZELqFLGECmWC+6OKXUQ6R8cuJG50xaJhJ3XegRelbjdLu2ARDhhL5S0JRz/q0GNPH9Aw==",
        "shasum": "6164c8983e610bbbe0e8ec4b819e57046d27f40b",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.0.0-beta.7.tgz",
        "fileCount": 51,
        "unpackedSize": 288121,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbcFV5CRA9TVsSAnZWagAArWAP/j6ULwCH/iV7SWF5oAQr\nuAde6za/eOIUjYbeZZr+c1qFTBoHRhnA6t5dAFfcdICAxsRc2AObsmK8L1dK\nUrsjUkE1XZsbk4Dy7sIAQQgKPw07T50jn3XeBhtzv3SV439RfXSS2Zs6nd5s\nhTTmf9EtNawaDqSeBr8hi/p2t6IoVb3AOKQYGFzs+JwZevNuJgnU9jSQqOd1\n11VaCBgUna1uBuCx6Q0kCxSvHJENl5z62l4JBmTHJIkH2H/A5jYf2AKFAUJ7\ncPhtJ+jBBISIwP1u+SqF6HWIUH8rxc/IXUcEVBinXC0YhatYWKuZbdGGLpwB\nQiC7+CXClKuHu2yfoIL1m85fyQexqqgM1Cw/LWJEEWj3vJvuVS02BqrqFyhD\ntN0ZLGqi+7u8darnxh3AyZt/t5r/3PCF52ZJTs/iYDKuEN+rFSVYyh2wwxw6\ncjMaZZ1OgqnpvQbuma4r3/bRy8pU+VjWaQa4QOJvu3n8JTyRJH5pLJvC2PIC\nZJb0r3GE3jnLa3s6/hMJ+uqmRdKIjBPval8zm5EXWxvO7Hfls1kpevrlqV6S\nRAm1R4LeefGv7vwdaVziRXn4/ToKd01XnNtUd8zHJvki4ycNL75QeCxgco9B\n89miwKbqkh69QAk+/iqXnHbPeD5e3O3na9ATApI/Wms58SmnkJedMCkFmC8M\nLGNo\r\n=t7uz\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDrVe6tz9swQFrj35SpnjHik01dZ6RJ9Vq6rMa+ShxigwIhAKfAsbk/plqUUbydq43EGPGprpZSQzxSI+5/EkVWgHSu"
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.0.0-beta.7_1534088568625_0.052293765735988984"
      },
      "_hasShrinkwrap": false
    },
    "1.0.0-beta.8": {
      "name": "ava",
      "version": "1.0.0-beta.8",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=6.12.3 <7 || >=8.9.4 <9 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test": "npm run lint && flow check test/flow-types && tsc --noEmit -p test/ts-types && nyc tap --no-cov --timeout=300 test/*.js test/reporters/*.js test/integration/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=300 test/*.js test/reporters/*.js test/integration/*.js"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^2.0.0",
        "@ava/babel-preset-transform-test-files": "4.0.0-beta.9",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "^7.0.0",
        "@babel/generator": "^7.0.0",
        "@babel/plugin-syntax-async-generators": "^7.0.0",
        "@babel/plugin-syntax-object-rest-spread": "^7.0.0",
        "@babel/plugin-syntax-optional-catch-binding": "^7.0.0",
        "@concordance/react": "^1.0.0",
        "ansi-escapes": "^3.1.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^2.0.0",
        "arrify": "^1.0.0",
        "bluebird": "^3.5.1",
        "chalk": "^2.4.1",
        "chokidar": "^2.0.4",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-truncate": "^1.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^3.0.0",
        "convert-source-map": "^1.5.1",
        "currently-unhandled": "^0.4.1",
        "debug": "^3.1.0",
        "del": "^3.0.0",
        "dot-prop": "^4.2.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^1.0.5",
        "esm": "^3.0.80",
        "figures": "^2.0.0",
        "get-port": "^4.0.0",
        "globby": "^7.1.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^1.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^1.2.0",
        "is-error": "^2.2.1",
        "is-observable": "^1.1.0",
        "is-plain-object": "^2.0.4",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.3.0",
        "matcher": "^1.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^5.0.0",
        "ms": "^2.1.1",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "ora": "^3.0.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.1.0",
        "plur": "^3.0.1",
        "pretty-ms": "^3.2.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "slash": "^2.0.0",
        "source-map-support": "^0.5.9",
        "stack-utils": "^1.0.1",
        "strip-ansi": "^4.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^5.5.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.5.0"
      },
      "devDependencies": {
        "cli-table2": "^0.2.0",
        "codecov": "^3.0.4",
        "delay": "^3.1.0",
        "execa": "^1.0.0",
        "flow-bin": "^0.79.1",
        "get-stream": "^4.0.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^2.7.1",
        "nyc": "^12.0.2",
        "proxyquire": "^2.1.0",
        "react": "^16.4.2",
        "react-test-renderer": "^16.4.2",
        "replace-string": "^1.1.0",
        "signal-exit": "^3.0.0",
        "sinon": "^6.1.5",
        "source-map-fixtures": "^2.1.0",
        "tap": "^12.0.1",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "ts-node": "^7.0.1",
        "typescript": "^3.0.1",
        "xo": "^0.22.0",
        "zen-observable": "^0.8.9"
      },
      "typings": "index.d.ts",
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "**/*.ts"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off",
          "prefer-destructuring": "off",
          "prefer-rest-params": "off",
          "prefer-spread": "off",
          "unicorn/prefer-spread": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "e6e40adfdd12d5c7ced16dda6b9eb99edf063601",
      "readme": "# [![AVA](media/header.png)](https://ava.li)\n\n> Futuristic test runner\n\n[![Build Status: Linux](https://travis-ci.org/avajs/ava.svg?branch=master)](https://travis-ci.org/avajs/ava) [![Build status: Windows](https://ci.appveyor.com/api/projects/status/e7v91mu2m5x48ehx/branch/master?svg=true)](https://ci.appveyor.com/project/ava/ava/branch/master) [![Coverage Status](https://coveralls.io/repos/github/avajs/ava/badge.svg?branch=master)](https://coveralls.io/github/avajs/ava?branch=master) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo) [![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/ava)\n [![Mentioned in Awesome Node.js](https://awesome.re/mentioned-badge.svg)](https://github.com/sindresorhus/awesome-nodejs)\n\nEven though JavaScript is single-threaded, IO in Node.js can happen in parallel due to its async nature. AVA takes advantage of this and runs your tests concurrently, which is especially beneficial for IO heavy tests. In addition, test files are run in parallel as separate processes, giving you even better performance and an isolated environment for each test file. [Switching](https://github.com/sindresorhus/pageres/commit/663be15acb3dd2eb0f71b1956ef28c2cd3fdeed0) from Mocha to AVA in Pageres brought the test time down from 31 to 11 seconds. Having tests run concurrently forces you to write atomic tests, meaning tests don't depend on global state or the state of other tests, which is a great thing!\n\n![](media/mini-reporter.gif)\n\n*Read our [contributing guide](contributing.md) if you're looking to contribute (issues/PRs/etc).*\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\n**This documentation covers the 1.0 beta releases, which use Babel 7. The last release that uses Babel 6 is [`v0.25.0`](https://github.com/avajs/ava/tree/v0.25.0).**\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Contents\n\n- [Usage](#usage)\n- [CLI Usage](#cli)\n- [Debugging](#debugging)\n- [Reporters](#reporters)\n- [Configuration](#configuration)\n- [Documentation](#documentation)\n- [API](#api)\n- [Assertions](#assertions)\n- [Snapshot testing](#snapshot-testing)\n- [Tips](#tips)\n- [FAQ](#faq)\n- [Recipes](#recipes)\n- [Support](#support)\n- [Related](#related)\n- [Links](#links)\n- [Team](#team)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript & Flow type definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](#process-isolation)\n- [Write your tests using the latest JavaScript syntax](#latest-javascript-support)\n- [Promise support](#promise-support)\n- [Async function support](#async-function-support)\n- [Observable support](#observable-support)\n- [Enhanced assertion messages](#enhanced-assertion-messages)\n- [Automatic parallel test runs in CI](#parallel-runs-in-ci)\n- [TAP reporter](#tap-reporter)\n- [Automatic migration from other test runners](https://github.com/avajs/ava-codemods#migrating-to-ava)\n\n\n## Test syntax\n\n```js\nimport test from 'ava';\n\ntest('arrays are equal', t => {\n\tt.deepEqual([1, 2], [1, 2]);\n});\n```\n\n## Usage\n\n### Add AVA to your project\n\nTo install and set up AVA, run:\n\n```console\n$ npx create-ava --next\n```\n\nYour `package.json` will then look like this:\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"1.0.0-beta.4\"\n\t}\n}\n```\n\nInitialization will work with npm and Yarn, but running `npx` requires [`npm@5.2.0`](https://github.com/npm/npm/releases/tag/v5.2.0) or greater to be installed. Otherwise, you'll have to manually install `ava` and configure the `test` script in your `package.json` as per above:\n\n```console\n$ npm install --save-dev --save-exact ava@next\n```\n\nOr if you prefer using Yarn:\n\n```console\n$ yarn add ava@next --dev --exact\n```\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nimport test from 'ava';\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\n\tt.is(await bar, 'bar');\n});\n```\n\n### Run it\n\n```console\n$ npm test\n```\n\n### Watch it\n\n```console\n$ npm test -- --watch\n```\n\nAVA comes with an intelligent watch mode. [Learn more in its recipe](docs/recipes/watch-mode.md).\n\n### Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## CLI\n\n```console\n$ ava --help\n\n  Usage\n    ava [<file|directory|glob> ...]\n\n  Options\n    --watch, -w             Re-run tests when tests and source files change\n    --match, -m             Only run tests with matching title (Can be repeated)\n    --update-snapshots, -u  Update snapshots\n    --fail-fast             Stop after first test failure\n    --timeout, -T           Set global timeout\n    --serial, -s            Run tests serially\n    --concurrency, -c       Max number of test files running at the same time (Default: CPU cores)\n    --verbose, -v           Enable verbose output\n    --tap, -t               Generate TAP output\n    --color                 Force color output\n    --no-color              Disable color output\n\n  Examples\n    ava\n    ava test.js test2.js\n    ava test-*.js\n    ava test\n\n  Default patterns when no arguments:\n  test.js test-*.js test/**/*.js **/__tests__/**/*.js **/*.test.js\n```\n\n*Note that the CLI will use your local install of AVA when available, even when run globally.*\n\nDirectories are recursed, with all `*.js` files being treated as test files. Directories named `fixtures`, `helpers` and `node_modules` are *always* ignored. So are files starting with `_` which allows you to place helpers in the same directory as your test files.\n\nWhen using `npm test`, you can pass positional arguments directly `npm test test2.js`, but flags needs to be passed like `npm test -- --verbose`.\n\n\n## Debugging\n\nAVA runs tests in child processes, so to debug tests, you need to do this workaround:\n\n```console\n$ node --inspect node_modules/ava/profile.js some/test/file.js\n```\n\n### Debugger-specific tips\n\n- [Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Visual Studio Code](docs/recipes/debugging-with-vscode.md)\n\n\n## Reporters\n\n### Mini-reporter\n\nThe mini-reporter is the default reporter.\n\n<img src=\"media/mini-reporter.gif\" width=\"460\">\n\n### Verbose reporter\n\nUse the `--verbose` flag to enable the verbose reporter. This is always used in CI environments unless the [TAP reporter](#tap-reporter) is enabled.\n\n<img src=\"media/verbose-reporter.png\" width=\"294\">\n\n### TAP reporter\n\nAVA supports the TAP format and thus is compatible with [any TAP reporter](https://github.com/sindresorhus/awesome-tap#reporters). Use the `--tap` flag to enable TAP output.\n\n```console\n$ ava --tap | tap-nyan\n```\n\n<img src=\"media/tap-reporter.png\" width=\"420\">\n\nPlease note that the TAP reporter is unavailable when using [watch mode](#watch-it).\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n\n## Configuration\n\nAll of the CLI options can be configured in the `ava` section of either your `package.json` or an `ava.config.js` file. This allows you to modify the default behavior of the `ava` command, so you don't have to repeatedly type the same options on the command prompt.\n\nTo ignore a file or directory, prefix the pattern with an `!` (exclamation mark).\n\n```json\n{\n\t\"ava\": {\n\t\t\"files\": [\n\t\t\t\"my-test-directory/**/*.js\",\n\t\t\t\"!my-test-directory/exclude-this-directory/**/*.js\",\n\t\t\t\"!**/exclude-this-file.js\"\n\t\t],\n\t\t\"sources\": [\n\t\t\t\"**/*.{js,jsx}\",\n\t\t\t\"!dist/**/*\"\n\t\t],\n\t\t\"match\": [\n\t\t\t\"*oo\",\n\t\t\t\"!foo\"\n\t\t],\n\t\t\"cache\": true,\n\t\t\"concurrency\": 5,\n\t\t\"failFast\": true,\n\t\t\"failWithoutAssertions\": false,\n\t\t\"tap\": true,\n\t\t\"verbose\": true,\n\t\t\"compileEnhancements\": false,\n\t\t\"require\": [\n\t\t\t\"@babel/register\"\n\t\t],\n\t\t\"babel\": {\n\t\t\t\"extensions\": [\"jsx\"],\n\t\t\t\"testOptions\": {\n\t\t\t\t\"babelrc\": false\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nArguments passed to the CLI will always take precedence over the configuration in `package.json`.\n\n### Options\n\n- `files`: file & directory paths and glob patterns that select which files AVA will run tests from. Files with an underscore prefix are ignored. All matched files in selected directories are run. By default only selects files with `js` extensions, even if the glob pattern matches other files. Specify `extensions` and `babel.extensions` to allow other file extensions\n- `source`: files that, when changed, cause tests to be re-run in watch mode. See the [watch mode recipe for details](https://github.com/avajs/ava/blob/master/docs/recipes/watch-mode.md#source-files-and-test-files)\n- `match`: not typically useful in the `package.json` configuration, but equivalent to [specifying `--match` on the CLI](#running-tests-with-matching-titles)\n- `cache`: cache compiled test and helper files under `node_modules/.cache/ava`. If `false`, files are cached in a temporary directory instead\n- `failFast`: stop running further tests once a test fails\n- `failWithoutAssertions`: if `false`, does not fail a test if it doesn't run [assertions](#assertions)\n- `tap`: if `true`, enables the [TAP reporter](#tap-reporter)\n- `verbose`: if `true`, enables verbose output\n- `snapshotDir`: specifies a fixed location for storing snapshot files. Use this if your snapshots are ending up in the wrong location\n- `compileEnhancements`: if `false`, disables [power-assert](https://github.com/power-assert-js/power-assert) — which otherwise helps provide more descriptive error messages — and detection of improper use of the `t.throws()` assertion\n- `extensions`: extensions of test files that are not precompiled using AVA's Babel presets. Note that files are still compiled to enable power-assert and other features, so you may also need to set `compileEnhancements` to `false` if your files are not valid JavaScript. Setting this overrides the default `\"js\"` value, so make sure to include that extension in the list, as long as it's not included in `babel.extensions`\n- `require`: extra modules to require before tests are run. Modules are required in the [worker processes](#process-isolation)\n- `babel`: test file specific Babel options. See our [Babel recipe] for more details\n- `babel.extensions`: extensions of test files that will be precompiled using AVA's Babel presets. Setting this overrides the default `\"js\"` value, so make sure to include that extension in the list\n\nNote that providing files on the CLI overrides the `files` option. If you've configured a glob pattern, for instance `test/**/*.test.js`, you may want to repeat it when using the CLI: `ava 'test/integration/*.test.js'`.\n\n### Using `ava.config.js`\n\nTo use an `ava.config.js` file:\n\n 1. It must be in the same directory as your `package.json`\n 2. Your `package.json` must not contain an `ava` property (or, if it does, it must be an empty object)\n\nThe config file must have a default export, using ES modules. It can either be a plain object or a factory function which returns a plain object:\n\n```js\nexport default {\n\trequire: ['esm']\n};\n```\n\n```js\nexport default function factory() {\n\treturn {\n\t\trequire: ['esm']\n\t};\n};\n```\n\nThe factory function is called with an object containing a `projectDir` property, which you could use to change the returned configuration:\n\n```js\nexport default ({projectDir}) => {\n\tif (projectDir === '/Users/username/projects/my-project') {\n\t\treturn {\n\t\t\t// Config A\n\t\t};\n\t}\n\n\treturn {\n\t\t// Config B\n\t};\n};\n```\n\nNote that the final configuration must not be a promise.\n\n## Documentation\n\nTests are run concurrently. You can specify synchronous and asynchronous tests. Tests are considered synchronous unless you return a promise or [observable](https://github.com/zenparsing/zen-observable).\n\nWe *highly* recommend the use of [async functions](#async-function-support). They make asynchronous code concise and readable, and they implicitly return a promise so you don't have to.\n\nIf you're unable to use promises or observables, you may enable \"callback mode\" by defining your test with `test.cb([title], fn)`. Tests declared this way **must** be manually ended with `t.end()`. This mode is mainly intended for testing callback-style APIs. However, we would strongly recommend [promisifying](https://github.com/sindresorhus/pify) callback-style APIs instead of using \"callback mode\", as this results in more correct and readable tests.\n\nYou must define all tests synchronously. They can't be defined inside `setTimeout`, `setImmediate`, etc.\n\nAVA tries to run test files with their current working directory set to the directory that contains your `package.json` file.\n\n### Creating tests\n\nTo create a test you call the `test` function you imported from AVA. Provide the required title and implementation function. Titles must be unique within each test file. The function will be called when your test is run. It's passed an [execution object](#t) as its first argument.\n\n**Note:** In order for the [enhanced assertion messages](#enhanced-assertion-messages) to behave correctly, the first argument **must** be named `t`.\n\n```js\nimport test from 'ava';\n\ntest('my passing test', t => {\n\tt.pass();\n});\n```\n\n### Assertion planning\n\nAssertion plans ensure tests only pass when a specific number of assertions have been executed. They'll help you catch cases where tests exit too early. They'll also cause tests to fail if too many assertions are executed, which can be useful if you have assertions inside callbacks or loops.\n\nIf you do not specify an assertion plan, your test will still fail if no assertions are executed. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration) to disable this behavior.\n\nNote that, unlike [`tap`](https://www.npmjs.com/package/tap) and [`tape`](https://www.npmjs.com/package/tape), AVA does *not* automatically end a test when the planned assertion count is reached.\n\nThese examples will result in a passed test:\n\n```js\ntest('resolves with 3', t => {\n\tt.plan(1);\n\n\treturn Promise.resolve(3).then(n => {\n\t\tt.is(n, 3);\n\t});\n});\n\ntest.cb('invokes callback', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t\tt.end();\n\t});\n});\n```\n\nThese won't:\n\n```js\ntest('loops twice', t => {\n\tt.plan(2);\n\n\tfor (let i = 0; i < 3; i++) {\n\t\tt.true(i < 3);\n\t}\n}); // Fails, 3 assertions are executed which is too many\n\ntest('invokes callback synchronously', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t});\n}); // Fails, the test ends synchronously before the assertion is executed\n```\n\n### Running tests serially\n\nTests are run concurrently by default, however, sometimes you have to write tests that cannot run concurrently. In these rare cases you can use the `.serial` modifier. It will force those tests to run serially *before* the concurrent ones.\n\n```js\ntest.serial('passes serially', t => {\n\tt.pass();\n});\n```\n\nNote that this only applies to tests within a particular test file. AVA will still run multiple tests files at the same time unless you pass the [`--serial` CLI flag](#cli).\n\nYou can use the `.serial` modifier with all tests, hooks and even `.todo()`, but it's only available on the `test` function.\n\n### Running specific tests\n\nDuring development it can be helpful to only run a few specific tests. This can be accomplished using the `.only` modifier:\n\n```js\ntest('will not be run', t => {\n\tt.fail();\n});\n\ntest.only('will be run', t => {\n\tt.pass();\n});\n```\n\nYou can use the `.only` modifier with all tests. It cannot be used with hooks or `.todo()`.\n\n*Note:* The `.only` modifier applies to the test file it's defined in, so if you run multiple test files, tests in other files will still run. If you want to only run the `test.only` test, provide just that test file to AVA.\n\n### Running tests with matching titles\n\nThe `--match` flag allows you to run just the tests that have a matching title. This is achieved with simple wildcard patterns. Patterns are case insensitive. See [`matcher`](https://github.com/sindresorhus/matcher) for more details.\n\nMatch titles ending with `foo`:\n\n```console\n$ ava --match='*foo'\n```\n\nMatch titles starting with `foo`:\n\n```console\n$ ava --match='foo*'\n```\n\nMatch titles containing `foo`:\n\n```console\n$ ava --match='*foo*'\n```\n\nMatch titles that are *exactly* `foo` (albeit case insensitively):\n\n```console\n$ ava --match='foo'\n```\n\nMatch titles not containing `foo`:\n\n```console\n$ ava --match='!*foo*'\n```\n\nMatch titles starting with `foo` and ending with `bar`:\n\n```console\n$ ava --match='foo*bar'\n```\n\nMatch titles starting with `foo` or ending with `bar`:\n\n```console\n$ ava --match='foo*' --match='*bar'\n```\n\nNote that a match pattern takes precedence over the `.only` modifier. Only tests with an explicit title are matched. Tests without titles or whose title is derived from the implementation function will be skipped when `--match` is used.\n\nHere's what happens when you run AVA with a match pattern of `*oo*` and the following tests:\n\n```js\ntest('foo will run', t => {\n\tt.pass();\n});\n\ntest('moo will also run', t => {\n\tt.pass();\n});\n\ntest.only('boo will run but not exclusively', t => {\n\tt.pass();\n});\n\n// Won't run, no title\ntest(function (t) {\n\tt.fail();\n});\n\n// Won't run, no explicit title\ntest(function foo(t) {\n\tt.fail();\n});\n```\n\n### Skipping tests\n\nSometimes failing tests can be hard to fix. You can tell AVA to skip these tests using the `.skip` modifier. They'll still be shown in the output (as having been skipped) but are never run.\n\n```js\ntest.skip('will not be run', t => {\n\tt.fail();\n});\n```\n\nYou must specify the implementation function. You can use the `.skip` modifier with all tests and hooks, but not with `.todo()`. You can not apply further modifiers to `.skip`.\n\n### Test placeholders (\"todo\")\n\nYou can use the `.todo` modifier when you're planning to write a test. Like skipped tests these placeholders are shown in the output. They only require a title; you cannot specify the implementation function.\n\n```js\ntest.todo('will think about writing this later');\n```\n\nYou can signal that you need to write a serial test:\n\n```js\ntest.serial.todo('will think about writing this later');\n```\n\n### Failing tests\n\nYou can use the `.failing` modifier to document issues with your code that need to be fixed. Failing tests are run just like normal ones, but they are expected to fail, and will not break your build when they do. If a test marked as failing actually passes, it will be reported as an error and fail the build with a helpful message instructing you to remove the `.failing` modifier.\n\nThis allows you to merge `.failing` tests before a fix is implemented without breaking CI. This is a great way to recognize good bug report PR's with a commit credit, even if the reporter is unable to actually fix the problem.\n\n```js\n// See: github.com/user/repo/issues/1234\ntest.failing('demonstrate some bug', t => {\n\tt.fail(); // Test will count as passed\n});\n```\n\n### Before & after hooks\n\nAVA lets you register hooks that are run before and after your tests. This allows you to run setup and/or teardown code.\n\n`test.before()` registers a hook to be run before the first test in your test file. Similarly `test.after()` registers a hook to be run after the last test. Use `test.after.always()` to register a hook that will **always** run once your tests and other hooks complete. `.always()` hooks run regardless of whether there were earlier failures, so they are ideal for cleanup tasks. Note however that uncaught exceptions, unhandled rejections or timeouts will crash your tests, possibly preventing `.always()` hooks from running.\n\n`test.beforeEach()` registers a hook to be run before each test in your test file. Similarly `test.afterEach()` a hook to be run after each test. Use `test.afterEach.always()` to register an after hook that is called even if other test hooks, or the test itself, fail.\n\nIf a test is skipped with the `.skip` modifier, the respective `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks are not run. Likewise, if all tests in a test file are skipped `.before()`, `.after()` and `.after.always()` hooks for the file are not run.\n\nLike `test()` these methods take an optional title and an implementation function. The title is shown if your hook fails to execute. The implementation is called with an [execution object](#t). You can use assertions in your hooks. You can also pass a [macro function](#test-macros) and additional arguments.\n\n`.before()` hooks execute before `.beforeEach()` hooks. `.afterEach()` hooks execute before `.after()` hooks. Within their category the hooks execute in the order they were defined. By default hooks execute concurrently, but you can use `test.serial` to ensure only that single hook is run at a time. Unlike with tests, serial hooks are *not* run before other hooks:\n\n```js\ntest.before(t => {\n\t// This runs before all tests\n});\n\ntest.before(t => {\n\t// This runs concurrently with the above\n});\n\ntest.serial.before(t => {\n\t// This runs after the above\n});\n\ntest.serial.before(t => {\n\t// This too runs after the above, and before tests\n});\n\ntest.after('cleanup', t => {\n\t// This runs after all tests\n});\n\ntest.after.always('guaranteed cleanup', t => {\n\t// This will always run, regardless of earlier failures\n});\n\ntest.beforeEach(t => {\n\t// This runs before each test\n});\n\ntest.afterEach(t => {\n\t// This runs after each test\n});\n\ntest.afterEach.always(t => {\n\t// This runs after each test and other test hooks, even if they failed\n});\n\ntest('title', t => {\n\t// Regular test\n});\n```\n\nHooks can be synchronous or asynchronous, just like tests. To make a hook asynchronous return a promise or observable, use an async function, or enable callback mode via `test.before.cb()`, `test.beforeEach.cb()` etc.\n\n```js\ntest.before(async t => {\n\tawait promiseFn();\n});\n\ntest.after(t => {\n\treturn new Promise(/* ... */);\n});\n\ntest.beforeEach.cb(t => {\n\tsetTimeout(t.end);\n});\n\ntest.afterEach.cb(t => {\n\tsetTimeout(t.end);\n});\n```\n\nKeep in mind that the `.beforeEach()` and `.afterEach()` hooks run just before and after a test is run, and that by default tests run concurrently. This means each multiple `.beforeEach()` hooks may run concurrently. Using `test.serial.beforeEach()` does not change this. If you need to set up global state for each test (like spying on `console.log` [for example](https://github.com/avajs/ava/issues/560)), you'll need to make sure the tests themselves are [run serially](#running-tests-serially).\n\nRemember that AVA runs each test file in its own process. You may not have to clean up global state in a `.after()`-hook since that's only called right before the process exits.\n\n#### Test context\n\nHooks can share context with the test:\n\n```js\ntest.beforeEach(t => {\n\tt.context.data = generateUniqueData();\n});\n\ntest('context data is foo', t => {\n\tt.is(t.context.data + 'bar', 'foobar');\n});\n```\n\nContext created in `.before()` hooks is [cloned](https://www.npmjs.com/package/lodash.clone) before it is passed to `.beforeEach()` hooks and / or tests. The `.after()` and `.after.always()` hooks receive the original context value.\n\nFor `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks the context is *not* shared between different tests, allowing you to set up data such that it will not leak to other tests.\n\nBy default `t.context` is an object but you can reassign it:\n\n```js\ntest.before(t => {\n\tt.context = 'unicorn';\n});\n\ntest('context is unicorn', t => {\n\tt.is(t.context, 'unicorn');\n});\n```\n\n### Test macros\n\nAdditional arguments passed to the test declaration will be passed to the test implementation. This is useful for creating reusable test macros.\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\ntest('2 + 2 = 4', macro, '2 + 2', 4);\ntest('2 * 3 = 6', macro, '2 * 3', 6);\n```\n\nYou can build the test title programmatically by attaching a `title` function to the macro:\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nmacro.title = (providedTitle, input, expected) => `${providedTitle} ${input} = ${expected}`.trim();\n\ntest(macro, '2 + 2', 4);\ntest(macro, '2 * 3', 6);\ntest('providedTitle', macro, '3 * 3', 9);\n```\n\nThe `providedTitle` argument defaults to an empty string if the user does not supply a string title. This allows for easy concatenation without having to worry about `null` / `undefined`. It is worth remembering that the empty string is considered a falsy value, so you can still use `if(providedTitle) {...}`.\n\nYou can also pass arrays of macro functions:\n\n```js\nconst safeEval = require('safe-eval');\n\nfunction evalMacro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nfunction safeEvalMacro(t, input, expected) {\n\tt.is(safeEval(input), expected);\n}\n\ntest([evalMacro, safeEvalMacro], '2 + 2', 4);\ntest([evalMacro, safeEvalMacro], '2 * 3', 6);\n```\n\nWe encourage you to use macros instead of building your own test generators ([here is an example](https://github.com/avajs/ava-codemods/blob/47073b5b58aa6f3fb24f98757be5d3f56218d160/test/ok-to-truthy.js#L7-L9) of code that should be replaced with a macro). Macros are designed to perform static analysis of your code, which can lead to better performance, IDE integration, and linter rules.\n\n### Custom assertions\n\nYou can use any assertion library instead of or in addition to the built-in one, provided it throws exceptions when the assertion fails.\n\nThis won't give you as nice an experience as you'd get with the [built-in assertions](#assertions) though, and you won't be able to use the [assertion planning](#assertion-planning) ([see #25](https://github.com/avajs/ava/issues/25)).\n\nYou'll have to configure AVA to not fail tests if no assertions are executed, because AVA can't tell if custom assertions pass. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration).\n\n```js\nimport assert from 'assert';\n\ntest('custom assertion', t => {\n\tassert(true);\n});\n```\n\n### Latest JavaScript support\n\nAVA uses [Babel 7](https://babeljs.io) so you can use the latest JavaScript syntax in your tests. There is no extra setup required. You don't need to be using Babel in your own project for this to work either.\n\nWe aim support all [finished syntax proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md), as well as all syntax from ratified JavaScript versions (e.g. ES2017). See our [`@ava/stage-4`](https://github.com/avajs/babel-preset-stage-4) preset for the currently supported proposals.\n\nPlease note that we do not add or modify built-ins. For example, if you use [`Object.entries()`](https://github.com/tc39/proposal-object-values-entries) in your tests, they will crash in Node.js 6 which does not implement this method.\n\nYou can disable this syntax support, or otherwise customize AVA's Babel pipeline. See our [Babel recipe] for more details.\n\n### TypeScript support\n\nAVA includes typings for TypeScript. You have to set up transpilation yourself. When you set `module` to `commonjs` in your `tsconfig.json` file, TypeScript will automatically find the type definitions for AVA. You should set `target` to `es2015` to use promises and async functions.\n\nSee AVA's [TypeScript recipe](docs/recipes/typescript.md) for a more detailed explanation.\n\n### Transpiling imported modules\n\nAVA currently only transpiles the tests you ask it to run, as well as test helpers (files starting with `_` or in `helpers` directory) inside the test directory. *It will not transpile modules you `import` from outside of the test.* This may be unexpected but there are workarounds.\n\nIf you use Babel you can use its [require hook](https://babeljs.io/docs/usage/require/) to transpile imported modules on-the-fly. To add it, [configure it in your `package.json`](#configuration).\n\nYou can also transpile your modules in a separate process and refer to the transpiled files rather than the sources from your tests. Example [here](docs/recipes/precompiling-with-webpack.md).\n\n### Promise support\n\nIf you return a promise in the test you don't need to explicitly end the test as it will end when the promise resolves.\n\n```js\ntest('resolves with unicorn', t => {\n\treturn somePromise().then(result => {\n\t\tt.is(result, 'unicorn');\n\t});\n});\n```\n\n### Async function support\n\nAVA comes with built-in support for [async functions](https://tc39.github.io/ecmascript-asyncawait/) *(async/await)*.\n\n```js\ntest(async function (t) {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n\n// Async arrow function\ntest('promises the truth', async t => {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n```\n\n### Observable support\n\nAVA comes with built-in support for [observables](https://github.com/zenparsing/es-observable). If you return an observable from a test, AVA will automatically consume it to completion before ending the test.\n\n*You do not need to use \"callback mode\" or call `t.end()`.*\n\n```js\ntest('handles observables', t => {\n\tt.plan(3);\n\treturn Observable.of(1, 2, 3, 4, 5, 6)\n\t\t.filter(n => {\n\t\t\t// Only even numbers\n\t\t\treturn n % 2 === 0;\n\t\t})\n\t\t.map(() => t.pass());\n});\n```\n\n### Callback support\n\nAVA supports using `t.end` as the final callback when using node-style error-first callback APIs. AVA will consider any truthy value passed as the first argument to `t.end` to be an error. Note that `t.end` requires \"callback mode\", which can be enabled by using the `test.cb` chain.\n\n```js\ntest.cb('data.txt can be read', t => {\n\t// `t.end` automatically checks for error as first argument\n\tfs.readFile('data.txt', t.end);\n});\n```\n\n### Global timeout\n\nA global timeout can be set via the `--timeout` option. Timeout in AVA behaves differently than in other test frameworks. AVA resets a timer after each test, forcing tests to quit if no new test results were received within the specified timeout. This can be used to handle stalled tests.\n\nYou can set timeouts in a human-readable way:\n\n```console\n$ ava --timeout=10s # 10 seconds\n$ ava --timeout=2m # 2 minutes\n$ ava --timeout=100 # 100 milliseconds\n```\n\n### Parallel runs in CI\n\nAVA automatically detects whether your CI environment supports parallel builds. Each build will run a subset of all test files, while still making sure all tests get executed. See the [`ci-parallel-vars`](https://www.npmjs.com/package/ci-parallel-vars) package for a list of supported CI environments.\n\n## API\n\n### `test([title], implementation)`\n### `test.serial([title], implementation)`\n### `test.cb([title], implementation)`\n### `test.only([title], implementation)`\n### `test.skip([title], implementation)`\n### `test.todo(title)`\n### `test.failing([title], implementation)`\n### `test.before([title], implementation)`\n### `test.after([title], implementation)`\n### `test.beforeEach([title], implementation)`\n### `test.afterEach([title], implementation)`\n\n#### `title`\n\nType: `string`\n\nTest title.\n\n#### `implementation(t)`\n\nType: `function`\n\nShould contain the actual test.\n\n##### `t`\n\nType: `object`\n\nThe execution object of a particular test. Each test implementation receives a different object. Contains the [assertions](#assertions) as well as `.plan(count)` and `.end()` methods. `t.context` can contain shared state from hooks. `t.title` returns the test's title.\n\n###### `t.plan(count)`\n\nPlan how many assertion there are in the test. The test will fail if the actual assertion count doesn't match the number of planned assertions. See [assertion planning](#assertion-planning).\n\n###### `t.end()`\n\nEnd the test. Only works with `test.cb()`.\n\n###### `t.log(...values)`\n\nLog values contextually alongside the test result instead of immediately printing them to `stdout`. Behaves somewhat like `console.log`, but without support for placeholder tokens.\n\n## Assertions\n\nAssertions are mixed into the [execution object](#t) provided to each test implementation:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy('unicorn'); // Assertion\n});\n```\n\nAssertions are bound to their test so you can assign them to a variable or pass them around:\n\n```js\ntest('unicorns are truthy', t => {\n\tconst truthy = t.truthy;\n\ttruthy('unicorn');\n});\n```\n\nAssertions can be skipped by adding `.skip()`:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy.skip('unicorn');\n});\n```\n\nIf multiple assertion failures are encountered within a single test, AVA will only display the *first* one.\n\n### `.pass([message])`\n\nPassing assertion.\n\n### `.fail([message])`\n\nFailing assertion.\n\n### `.truthy(value, [message])`\n\nAssert that `value` is truthy.\n\n### `.falsy(value, [message])`\n\nAssert that `value` is falsy.\n\n### `.true(value, [message])`\n\nAssert that `value` is `true`.\n\n### `.false(value, [message])`\n\nAssert that `value` is `false`.\n\n### `.is(value, expected, [message])`\n\nAssert that `value` is the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.not(value, expected, [message])`\n\nAssert that `value` is not the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.deepEqual(value, expected, [message])`\n\nAssert that `value` is deeply equal to `expected`. See [Concordance](https://github.com/concordancejs/concordance) for details. Works with [React elements and `react-test-renderer`](https://github.com/concordancejs/react).\n\n### `.notDeepEqual(value, expected, [message])`\n\nAssert that `value` is not deeply equal to `expected`. The inverse of `.deepEqual()`.\n\n### `.throws(fn, [expected, [message]])`\n\nAssert that an error is thrown. `fn` must be a function which should throw. The thrown value *must* be an error. It is returned so you can run more assertions against it.\n\n`expected` can be a constructor, in which case the thrown error must be an instance of the constructor. It can be a string, which is compared against the thrown error's message, or a regular expression which is matched against this message. You can also specify a matcher object with one or more of the following properties:\n\n* `instanceOf`: a constructor, the thrown error must be an instance of\n* `is`: the thrown error must be strictly equal to `expected.is`\n* `message`: either a string, which is compared against the thrown error's message, or a regular expression, which is matched against this message\n* `name`: the expected `.name` value of the thrown error\n* `code`: the expected `.code` value of the thrown error\n\n`expected` does not need to be specified. If you don't need it but do want to set an assertion message you have to specify `null`.\n\nExample:\n\n```js\nconst fn = () => {\n\tthrow new TypeError('🦄');\n};\n\ntest('throws', t => {\n\tconst error = t.throws(() => {\n\t\tfn();\n\t}, TypeError);\n\n\tt.is(error.message, '🦄');\n});\n```\n\n### `.throwsAsync(thrower, [expected, [message]])`\n\nAssert that an error is thrown. `thrower` can be an async function which should throw, or a promise that should reject. This assertion must be awaited.\n\nThe thrown value *must* be an error. It is returned so you can run more assertions against it.\n\n`expected` can be a constructor, in which case the thrown error must be an instance of the constructor. It can be a string, which is compared against the thrown error's message, or a regular expression which is matched against this message. You can also specify a matcher object with one or more of the following properties:\n\n* `instanceOf`: a constructor, the thrown error must be an instance of\n* `is`: the thrown error must be strictly equal to `expected.is`\n* `message`: either a string, which is compared against the thrown error's message, or a regular expression, which is matched against this message\n* `name`: the expected `.name` value of the thrown error\n* `code`: the expected `.code` value of the thrown error\n\n`expected` does not need to be specified. If you don't need it but do want to set an assertion message you have to specify `null`.\n\nExample:\n\n```js\ntest('throws', async t => {\n\tawait t.throwsAsync(async () => {\n\t\tthrow new TypeError('🦄');\n\t}, {instanceOf: TypeError, message: '🦄'});\n});\n```\n\n```js\nconst promise = Promise.reject(new TypeError('🦄'));\n\ntest('rejects', async t => {\n\tconst error = await t.throwsAsync(promise);\n\tt.is(error.message, '🦄');\n});\n```\n\n### `.notThrows(fn, [message])`\n\nAssert that no error is thrown. `fn` must be a function which shouldn't throw.\n\n### `.notThrowsAsync(nonThrower, [message])`\n\nAssert that no error is thrown. `nonThrower` can be an async function which shouldn't throw, or a promise that should resolve.\n\nLike the `.throwsAsync()` assertion, you must wait for the assertion to complete:\n\n```js\ntest('resolves', async t => {\n\tawait t.notThrowsAsync(promise);\n});\n```\n\n### `.regex(contents, regex, [message])`\n\nAssert that `contents` matches `regex`.\n\n### `.notRegex(contents, regex, [message])`\n\nAssert that `contents` does not match `regex`.\n\n### `.snapshot(expected, [message])`\n### `.snapshot(expected, [options], [message])`\n\nCompares the `expected` value with a previously recorded snapshot. Snapshots are stored for each test, so ensure you give your tests unique titles. Alternatively pass an `options` object to select a specific snapshot, for instance `{id: 'my snapshot'}`.\n\nSnapshot assertions cannot be skipped when snapshots are being updated.\n\n## Snapshot testing\n\nAVA supports snapshot testing, [as introduced by Jest](https://facebook.github.io/jest/docs/snapshot-testing.html), through its [Assertions](#assertions) interface. You can snapshot any value as well as React elements:\n\n```js\n// Your component\nconst HelloWorld = () => <h1>Hello World...!</h1>;\n\nexport default HelloWorld;\n```\n\n```js\n// Your test\nimport test from 'ava';\nimport render from 'react-test-renderer';\nimport HelloWorld from '.';\n\ntest('HelloWorld component', t => {\n\tconst tree = render.create(<HelloWorld/>).toJSON();\n\tt.snapshot(tree);\n});\n```\n\n[Try it out in this example project.](https://github.com/avajs/ava-snapshot-example)\n\nSnapshots are stored alongside your test files. If your tests are in a `test` or `tests` folder the snapshots will be stored in a `snapshots` folder. If your tests are in a `__tests__` folder then they they'll be stored in a `__snapshots__` folder.\n\nSay you have `~/project/test/main.js` which contains snapshot assertions. AVA will create two files:\n\n* `~/project/test/snapshots/main.js.snap`\n* `~/project/test/snapshots/main.js.md`\n\nThe first file contains the actual snapshot and is required for future comparisons. The second file contains your *snapshot report*. It's regenerated when you update your snapshots. If you commit it to source control you can diff it to see the changes to your snapshot.\n\nAVA will show why your snapshot assertion failed:\n\n<img src=\"media/snapshot-testing.png\" width=\"1048\">\n\nYou can then check your code. If the change was intentional you can use the `--update-snapshots` (or `-u`) flag to update the snapshots:\n\n```console\n$ ava --update-snapshots\n```\n\nYou can specify a fixed location for storing the snapshot files in AVA's [`package.json` configuration](#configuration):\n\n```json\n{\n\t\"ava\": {\n\t\t\"snapshotDir\": \"custom-directory\"\n\t}\n}\n```\n\nThe snapshot files will be saved in a directory structure that mirrors that of your test files.\n\nIf you are running AVA against precompiled test files, AVA will try and use source maps to determine the location of the original files. Snapshots will be stored next to these files, following the same rules as if AVA had executed the original files directly. This is great if you're writing your tests in TypeScript (see our [TypeScript recipe](docs/recipes/typescript.md)).\n\n### Skipping assertions\n\nAny assertion can be skipped using the `skip` modifier. Skipped assertions are still counted, so there is no need to change your planned assertion count.\n\n```js\ntest('skip assertion', t => {\n\tt.plan(2);\n\tt.is.skip(foo(), 5); // No need to change your plan count when skipping\n\tt.is(1, 1);\n});\n```\n\n### Enhanced assertion messages\n\nAVA comes with [`power-assert`](https://github.com/power-assert-js/power-assert) built-in, giving you more descriptive assertion messages. It reads your test and tries to infer more information from the code.\n\nLet's take this example, using Node's standard [`assert` library](https://nodejs.org/api/assert.html):\n\n```js\nconst a = /foo/;\nconst b = 'bar';\nconst c = 'baz';\nrequire('assert').ok(a.test(b) || b === c);\n```\n\nIf you paste that into a Node REPL it'll return:\n\n```\nAssertionError: false == true\n```\n\nIn AVA however, this test:\n\n```js\ntest('enhanced assertions', t => {\n\tconst a = /foo/;\n\tconst b = 'bar';\n\tconst c = 'baz';\n\tt.true(a.test(b) || b === c);\n});\n```\n\nWill output:\n\n```\nt.true(a.test(b) || b === c)\n       |      |     |     |\n       |      \"bar\" \"bar\" \"baz\"\n       false\n```\n\n## Process isolation\n\nEach test file is run in a separate Node.js process. This allows you to change the global state or overriding a built-in in one test file, without affecting another. It's also great for performance on modern multi-core processors, allowing multiple test files to execute in parallel.\n\nAVA will set `process.env.NODE_ENV` to `test`, unless the `NODE_ENV` environment variable has been set. This is useful if the code you're testing has test defaults (for example when picking what database to connect to, or environment-specific Babel options). It may cause your code or its dependencies to behave differently though. Note that `'NODE_ENV' in process.env` will always be `true`.\n\n## Tips\n\n### Temp files\n\nRunning tests concurrently comes with some challenges, doing file IO is one.\n\nUsually, serial tests create temp directories in the current test directory and clean them up at the end. This won't work when you run tests concurrently as tests will conflict with each other. The correct way to do it is to use a new temp directory for each test. The [`tempfile`](https://github.com/sindresorhus/tempfile) and [`temp-write`](https://github.com/sindresorhus/temp-write) modules can be helpful.\n\n### Code coverage\n\nYou can't use [`istanbul`](https://github.com/gotwarlost/istanbul) for code coverage as AVA [spawns the test files](#process-isolation). You can use [`nyc`](https://github.com/bcoe/nyc) instead, which is basically `istanbul` with support for subprocesses.\n\nAs of version `5.0.0` it uses source maps to report coverage for your actual code, regardless of transpilation. Make sure that the code you're testing includes an inline source map or references a source map file. If you use `babel-register` you can set the `sourceMaps` option in your Babel config to `inline`.\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [/ˈeɪvə/ ay-və](media/pronunciation.m4a?raw=true).\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Flow](docs/recipes/flow.md)\n- [Configuring Babel][Babel recipe]\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [JSPM and SystemJS](docs/recipes/jspm-systemjs.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Precompiling source files with webpack](docs/recipes/precompiling-with-webpack.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n\n## Support\n\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/ava)\n- [Spectrum](https://spectrum.chat/ava)\n- [Twitter](https://twitter.com/ava__js)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) - Lint rules for AVA tests\n- [sublime-ava](https://github.com/avajs/sublime-ava) - Snippets for AVA tests\n- [atom-ava](https://github.com/avajs/atom-ava) - Snippets for AVA tests\n- [vscode-ava](https://github.com/samverschueren/vscode-ava) - Snippets for AVA tests\n- [gulp-ava](https://github.com/avajs/gulp-ava) - Run tests with gulp\n- [grunt-ava](https://github.com/avajs/grunt-ava) - Run tests with grunt\n- [More…](https://github.com/avajs/awesome-ava#packages)\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [AVA Casts](http://avacasts.com)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus) | [![Vadim Demedes](https://github.com/vadimdemedes.png?size=100)](https://github.com/vadimdemedes)\n---|---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](http://sindresorhus.com) | [Vadim Demedes](https://github.com/vadimdemedes)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://ava.li\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n\n[Babel recipe]: docs/recipes/babel.md\n",
      "readmeFilename": "readme.md",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.0.0-beta.8",
      "_npmVersion": "6.4.0",
      "_nodeVersion": "10.9.0",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-aEG/JoBOP/iMC+0vGbfFnvQzTUKgpYm5i17j+VRLEy/qnGmynQJfPW4Hot/Cv1VaiRbpZ/S52O4BAI4N2HHpbA==",
        "shasum": "e6e225405be478476610161138db220f91dca460",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.0.0-beta.8.tgz",
        "fileCount": 51,
        "unpackedSize": 289988,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbhb5oCRA9TVsSAnZWagAA1TsQAIEE/Qf0RaUz4++tWjGa\np8jE1yggmRUK2nFpjZaWlTIkis0mBlFoF/KvhXDGo/F7FxGDobJYGbSi/iSo\nK0am7CbgSPgmNN44FH3nhwkIdHe86y3JfMYGD+Wv0p0HIk8vqENs5s4lAm5l\nt7wy5L+2IcuHNGLU2++xu6AbE7RzAuAcPBdnqfzY1jcbnWL2f0SyUBJ3vabC\ng5AZc7oNTi2iNfGsai+YwrJJj1hnFZQiPs+/6COk8SGArMqRlaSlQYdFn9Wz\nFTe5cGvNcXUsP+jnca9tPPExE5int0uNA7MDra41v2BkVE71gjmFTipkPl3v\nXhe2EzRu+0pYaTlbUR/8lg814FD1vldcqgDI5k/Oqr9LIMk/fIIAEeoY8Yr0\nSZKCEPYnbqt6T7crwUuVmPJoESbWYxY1DytQpe2U4SNsCaPC5SLkXONRkg+f\nJh8pkmBAt836w/eS1nGeIQi3BzC11cZ7sXoBIfUfDIpokuCYLSJy3S/kU9AK\n2KmEJeqNBK+e7ZcClra42JKAIHxWgY19sjxv/pdQHoV9IMhFvHpIRQ/4Wbn6\ndDDQaU4VD48VqE5kUTRZDWNyoMYnVg621s5j1XkUsDWsSekQlf3ou59Se4H0\nlqEE5PU8JMvO3bCv3d705w5LRH97pRRxRSbt1n9M69vVjy3SWy3KnWYQrBk1\nnwgb\r\n=HBlj\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQChXhm8hKVK2J40f3MVBqkkYDh6cesEu21VoOmtRzcJEQIhANO13IYooSyVA2AX/qVrEpy12ZTo6yp7y9mLqkFcxSa9"
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.0.0-beta.8_1535491687286_0.8299104873892946"
      },
      "_hasShrinkwrap": false
    },
    "1.0.0-rc.1": {
      "name": "ava",
      "version": "1.0.0-rc.1",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=6.12.3 <7 || >=8.9.4 <9 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test": "npm run lint && flow check test/flow-types && tsc --noEmit -p test/ts-types && nyc tap --no-cov --timeout=300 test/*.js test/reporters/*.js test/integration/*.js",
        "test-win": "tap --no-cov --reporter=classic --timeout=300 test/*.js test/reporters/*.js test/integration/*.js"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^2.0.0",
        "@ava/babel-preset-transform-test-files": "^4.0.0",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "^7.1.2",
        "@babel/generator": "^7.1.3",
        "@babel/plugin-syntax-async-generators": "^7.0.0",
        "@babel/plugin-syntax-object-rest-spread": "^7.0.0",
        "@babel/plugin-syntax-optional-catch-binding": "^7.0.0",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^3.1.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^2.0.0",
        "arrify": "^1.0.0",
        "bluebird": "^3.5.2",
        "chalk": "^2.4.1",
        "chokidar": "^2.0.4",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^1.1.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-truncate": "^1.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.0",
        "del": "^3.0.0",
        "dot-prop": "^4.2.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^1.0.5",
        "esm": "^3.0.84",
        "figures": "^2.0.0",
        "find-up": "^3.0.0",
        "get-port": "^4.0.0",
        "globby": "^7.1.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^2.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^1.2.1",
        "is-error": "^2.2.1",
        "is-observable": "^1.1.0",
        "is-plain-object": "^2.0.4",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.3.0",
        "matcher": "^1.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^5.0.0",
        "ms": "^2.1.1",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "ora": "^3.0.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.1.0",
        "plur": "^3.0.1",
        "pretty-ms": "^4.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "slash": "^2.0.0",
        "source-map-support": "^0.5.9",
        "stack-utils": "^1.0.1",
        "strip-ansi": "^5.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^5.5.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.5.0"
      },
      "devDependencies": {
        "cli-table3": "^0.5.1",
        "codecov": "^3.1.0",
        "delay": "^4.1.0",
        "execa": "^1.0.0",
        "flow-bin": "^0.83.0",
        "get-stream": "^4.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^3.0.0",
        "nyc": "^13.1.0",
        "proxyquire": "^2.1.0",
        "react": "^16.5.2",
        "react-test-renderer": "^16.5.2",
        "replace-string": "^1.1.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.0.0",
        "source-map-fixtures": "^2.1.0",
        "tap": "^12.0.1",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "ts-node": "^7.0.1",
        "typescript": "^3.1.3",
        "xo": "^0.23.0",
        "zen-observable": "^0.8.9"
      },
      "typings": "index.d.ts",
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "**/*.ts",
          "test/flow-types/*"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off",
          "prefer-destructuring": "off",
          "prefer-rest-params": "off",
          "prefer-spread": "off",
          "unicorn/prefer-spread": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "a9758eef389b74016fb3b7ab6d651bf918e60b89",
      "readme": "# [![AVA](media/header.png)](https://ava.li)\n\n> Futuristic test runner\n\n[![Build Status: Linux](https://travis-ci.org/avajs/ava.svg?branch=master)](https://travis-ci.org/avajs/ava) [![Build status: Windows](https://ci.appveyor.com/api/projects/status/e7v91mu2m5x48ehx/branch/master?svg=true)](https://ci.appveyor.com/project/ava/ava/branch/master) [![Coverage Status](https://codecov.io/gh/avajs/ava/branch/master/graph/badge.svg)](https://codecov.io/gh/avajs/ava/branch/master) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo) [![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/ava)\n [![Mentioned in Awesome Node.js](https://awesome.re/mentioned-badge.svg)](https://github.com/sindresorhus/awesome-nodejs)\n\nEven though JavaScript is single-threaded, IO in Node.js can happen in parallel due to its async nature. AVA takes advantage of this and runs your tests concurrently, which is especially beneficial for IO heavy tests. In addition, test files are run in parallel as separate processes, giving you even better performance and an isolated environment for each test file. [Switching](https://github.com/sindresorhus/pageres/commit/663be15acb3dd2eb0f71b1956ef28c2cd3fdeed0) from Mocha to AVA in Pageres brought the test time down from 31 to 11 seconds. Having tests run concurrently forces you to write atomic tests, meaning tests don't depend on global state or the state of other tests, which is a great thing!\n\n![](media/mini-reporter.gif)\n\n*Read our [contributing guide](contributing.md) if you're looking to contribute (issues/PRs/etc).*\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\n**This documentation covers the 1.0 beta releases, which use Babel 7. The last release that uses Babel 6 is [`v0.25.0`](https://github.com/avajs/ava/tree/v0.25.0).**\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Contents\n\n- [Usage](#usage)\n- [CLI Usage](#cli)\n- [Debugging](#debugging)\n- [Reporters](#reporters)\n- [Configuration](#configuration)\n- [Documentation](#documentation)\n- [API](#api)\n- [Assertions](#assertions)\n- [Snapshot testing](#snapshot-testing)\n- [Tips](#tips)\n- [FAQ](#faq)\n- [Recipes](#recipes)\n- [Support](#support)\n- [Related](#related)\n- [Links](#links)\n- [Team](#team)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript & Flow type definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](#process-isolation)\n- [Write your tests using the latest JavaScript syntax](#latest-javascript-support)\n- [Promise support](#promise-support)\n- [Async function support](#async-function-support)\n- [Observable support](#observable-support)\n- [Enhanced assertion messages](#enhanced-assertion-messages)\n- [Automatic parallel test runs in CI](#parallel-runs-in-ci)\n- [TAP reporter](#tap-reporter)\n- [Automatic migration from other test runners](https://github.com/avajs/ava-codemods#migrating-to-ava)\n\n\n## Test syntax\n\n```js\nimport test from 'ava';\n\ntest('arrays are equal', t => {\n\tt.deepEqual([1, 2], [1, 2]);\n});\n```\n\n## Usage\n\n### Add AVA to your project\n\nTo install and set up AVA, run:\n\n```console\n$ npx create-ava --next\n```\n\nYour `package.json` will then look like this:\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"1.0.0-beta.4\"\n\t}\n}\n```\n\nInitialization will work with npm and Yarn, but running `npx` requires [`npm@5.2.0`](https://github.com/npm/npm/releases/tag/v5.2.0) or greater to be installed. Otherwise, you'll have to manually install `ava` and configure the `test` script in your `package.json` as per above:\n\n```console\n$ npm install --save-dev --save-exact ava@next\n```\n\nOr if you prefer using Yarn:\n\n```console\n$ yarn add ava@next --dev --exact\n```\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nimport test from 'ava';\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\n\tt.is(await bar, 'bar');\n});\n```\n\n### Run it\n\n```console\n$ npm test\n```\n\n### Watch it\n\n```console\n$ npm test -- --watch\n```\n\nAVA comes with an intelligent watch mode. [Learn more in its recipe](docs/recipes/watch-mode.md).\n\n### Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## CLI\n\n```console\n$ ava --help\n\n  Usage\n    ava [<file|directory|glob> ...]\n\n  Options\n    --watch, -w             Re-run tests when tests and source files change\n    --match, -m             Only run tests with matching title (Can be repeated)\n    --update-snapshots, -u  Update snapshots\n    --fail-fast             Stop after first test failure\n    --timeout, -T           Set global timeout\n    --serial, -s            Run tests serially\n    --concurrency, -c       Max number of test files running at the same time (Default: CPU cores)\n    --verbose, -v           Enable verbose output\n    --tap, -t               Generate TAP output\n    --color                 Force color output\n    --no-color              Disable color output\n    --reset-cache           Reset AVA's compilation cache and exit\n\n  Examples\n    ava\n    ava test.js test2.js\n    ava test-*.js\n    ava test\n\n  Default patterns when no arguments:\n  test.js test-*.js test/**/*.js **/__tests__/**/*.js **/*.test.js\n```\n\n*Note that the CLI will use your local install of AVA when available, even when run globally.*\n\nDirectories are recursed, with all `*.js` files being treated as test files. Directories named `fixtures`, `helpers` and `node_modules` are *always* ignored. So are files starting with `_` which allows you to place helpers in the same directory as your test files.\n\nWhen using `npm test`, you can pass positional arguments directly `npm test test2.js`, but flags needs to be passed like `npm test -- --verbose`.\n\n\n## Debugging\n\nAVA runs tests in child processes, so to debug tests, you need to do this workaround:\n\n```console\n$ node --inspect node_modules/ava/profile.js some/test/file.js\n```\n\n### Debugger-specific tips\n\n- [Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Visual Studio Code](docs/recipes/debugging-with-vscode.md)\n\n\n## Reporters\n\n### Mini-reporter\n\nThe mini-reporter is the default reporter.\n\n<img src=\"media/mini-reporter.gif\" width=\"460\">\n\n### Verbose reporter\n\nUse the `--verbose` flag to enable the verbose reporter. This is always used in CI environments unless the [TAP reporter](#tap-reporter) is enabled.\n\n<img src=\"media/verbose-reporter.png\" width=\"294\">\n\n### TAP reporter\n\nAVA supports the TAP format and thus is compatible with [any TAP reporter](https://github.com/sindresorhus/awesome-tap#reporters). Use the `--tap` flag to enable TAP output.\n\n```console\n$ ava --tap | tap-nyan\n```\n\n<img src=\"media/tap-reporter.png\" width=\"420\">\n\nPlease note that the TAP reporter is unavailable when using [watch mode](#watch-it).\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n\n## Configuration\n\nAll of the CLI options can be configured in the `ava` section of either your `package.json` or an `ava.config.js` file. This allows you to modify the default behavior of the `ava` command, so you don't have to repeatedly type the same options on the command prompt.\n\nTo ignore a file or directory, prefix the pattern with an `!` (exclamation mark).\n\n**`package.json`:**\n\n```json\n{\n\t\"ava\": {\n\t\t\"files\": [\n\t\t\t\"my-test-directory/**/*.js\",\n\t\t\t\"!my-test-directory/exclude-this-directory/**/*.js\",\n\t\t\t\"!**/exclude-this-file.js\"\n\t\t],\n\t\t\"sources\": [\n\t\t\t\"**/*.{js,jsx}\",\n\t\t\t\"!dist/**/*\"\n\t\t],\n\t\t\"match\": [\n\t\t\t\"*oo\",\n\t\t\t\"!foo\"\n\t\t],\n\t\t\"cache\": true,\n\t\t\"concurrency\": 5,\n\t\t\"failFast\": true,\n\t\t\"failWithoutAssertions\": false,\n\t\t\"tap\": true,\n\t\t\"verbose\": true,\n\t\t\"compileEnhancements\": false,\n\t\t\"require\": [\n\t\t\t\"@babel/register\"\n\t\t],\n\t\t\"babel\": {\n\t\t\t\"extensions\": [\"jsx\"],\n\t\t\t\"testOptions\": {\n\t\t\t\t\"babelrc\": false\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nArguments passed to the CLI will always take precedence over the configuration in `package.json`.\n\n### Options\n\n- `files`: file & directory paths and glob patterns that select which files AVA will run tests from. Files with an underscore prefix are ignored. All matched files in selected directories are run. By default only selects files with `js` extensions, even if the glob pattern matches other files. Specify `extensions` and `babel.extensions` to allow other file extensions\n- `source`: files that, when changed, cause tests to be re-run in watch mode. See the [watch mode recipe for details](https://github.com/avajs/ava/blob/master/docs/recipes/watch-mode.md#source-files-and-test-files)\n- `match`: not typically useful in the `package.json` configuration, but equivalent to [specifying `--match` on the CLI](#running-tests-with-matching-titles)\n- `cache`: cache compiled test and helper files under `node_modules/.cache/ava`. If `false`, files are cached in a temporary directory instead\n- `failFast`: stop running further tests once a test fails\n- `failWithoutAssertions`: if `false`, does not fail a test if it doesn't run [assertions](#assertions)\n- `tap`: if `true`, enables the [TAP reporter](#tap-reporter)\n- `verbose`: if `true`, enables verbose output\n- `snapshotDir`: specifies a fixed location for storing snapshot files. Use this if your snapshots are ending up in the wrong location\n- `compileEnhancements`: if `false`, disables [power-assert](https://github.com/power-assert-js/power-assert) — which otherwise helps provide more descriptive error messages — and detection of improper use of the `t.throws()` assertion\n- `extensions`: extensions of test files that are not precompiled using AVA's Babel presets. Note that files are still compiled to enable power-assert and other features, so you may also need to set `compileEnhancements` to `false` if your files are not valid JavaScript. Setting this overrides the default `\"js\"` value, so make sure to include that extension in the list, as long as it's not included in `babel.extensions`\n- `require`: extra modules to require before tests are run. Modules are required in the [worker processes](#process-isolation)\n- `babel`: test file specific Babel options. See our [Babel recipe] for more details\n- `babel.extensions`: extensions of test files that will be precompiled using AVA's Babel presets. Setting this overrides the default `\"js\"` value, so make sure to include that extension in the list\n\nNote that providing files on the CLI overrides the `files` option. If you've configured a glob pattern, for instance `test/**/*.test.js`, you may want to repeat it when using the CLI: `ava 'test/integration/*.test.js'`.\n\n### Using `ava.config.js`\n\nTo use an `ava.config.js` file:\n\n 1. It must be in the same directory as your `package.json`\n 2. Your `package.json` must not contain an `ava` property (or, if it does, it must be an empty object)\n\nThe config file must have a default export, using ES modules. It can either be a plain object or a factory function which returns a plain object:\n\n```js\nexport default {\n\trequire: ['esm']\n};\n```\n\n```js\nexport default function factory() {\n\treturn {\n\t\trequire: ['esm']\n\t};\n};\n```\n\nThe factory function is called with an object containing a `projectDir` property, which you could use to change the returned configuration:\n\n```js\nexport default ({projectDir}) => {\n\tif (projectDir === '/Users/username/projects/my-project') {\n\t\treturn {\n\t\t\t// Config A\n\t\t};\n\t}\n\n\treturn {\n\t\t// Config B\n\t};\n};\n```\n\nNote that the final configuration must not be a promise.\n\n### Resetting AVA's cache\n\nAVA caches the compiled test and helper files. It automatically recompiles these files when you change them. AVA tries its best to detect changes to your Babel configuration files, plugins and presets. If it seems like your latest Babel configuration isn't being applied, however, you can run AVA with the `--reset-cache` flag to reset AVA's cache. If set, all files in the `node_modules/.cache/ava` directory are deleted. Run AVA as normal to apply your new Babel configuration.\n\n## Documentation\n\nTests are run concurrently. You can specify synchronous and asynchronous tests. Tests are considered synchronous unless you return a promise or [observable](https://github.com/zenparsing/zen-observable).\n\nWe *highly* recommend the use of [async functions](#async-function-support). They make asynchronous code concise and readable, and they implicitly return a promise so you don't have to.\n\nIf you're unable to use promises or observables, you may enable \"callback mode\" by defining your test with `test.cb([title], fn)`. Tests declared this way **must** be manually ended with `t.end()`. This mode is mainly intended for testing callback-style APIs. However, we would strongly recommend [promisifying](https://github.com/sindresorhus/pify) callback-style APIs instead of using \"callback mode\", as this results in more correct and readable tests.\n\nYou must define all tests synchronously. They can't be defined inside `setTimeout`, `setImmediate`, etc.\n\nAVA tries to run test files with their current working directory set to the directory that contains your `package.json` file.\n\n### Creating tests\n\nTo create a test you call the `test` function you imported from AVA. Provide the required title and implementation function. Titles must be unique within each test file. The function will be called when your test is run. It's passed an [execution object](#t) as its first argument.\n\n**Note:** In order for the [enhanced assertion messages](#enhanced-assertion-messages) to behave correctly, the first argument **must** be named `t`.\n\n```js\nimport test from 'ava';\n\ntest('my passing test', t => {\n\tt.pass();\n});\n```\n\n### Assertion planning\n\nAssertion plans ensure tests only pass when a specific number of assertions have been executed. They'll help you catch cases where tests exit too early. They'll also cause tests to fail if too many assertions are executed, which can be useful if you have assertions inside callbacks or loops.\n\nIf you do not specify an assertion plan, your test will still fail if no assertions are executed. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration) to disable this behavior.\n\nNote that, unlike [`tap`](https://www.npmjs.com/package/tap) and [`tape`](https://www.npmjs.com/package/tape), AVA does *not* automatically end a test when the planned assertion count is reached.\n\nThese examples will result in a passed test:\n\n```js\ntest('resolves with 3', t => {\n\tt.plan(1);\n\n\treturn Promise.resolve(3).then(n => {\n\t\tt.is(n, 3);\n\t});\n});\n\ntest.cb('invokes callback', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t\tt.end();\n\t});\n});\n```\n\nThese won't:\n\n```js\ntest('loops twice', t => {\n\tt.plan(2);\n\n\tfor (let i = 0; i < 3; i++) {\n\t\tt.true(i < 3);\n\t}\n}); // Fails, 3 assertions are executed which is too many\n\ntest('invokes callback synchronously', t => {\n\tt.plan(1);\n\n\tsomeAsyncFunction(() => {\n\t\tt.pass();\n\t});\n}); // Fails, the test ends synchronously before the assertion is executed\n```\n\n### Running tests serially\n\nTests are run concurrently by default, however, sometimes you have to write tests that cannot run concurrently. In these rare cases you can use the `.serial` modifier. It will force those tests to run serially *before* the concurrent ones.\n\n```js\ntest.serial('passes serially', t => {\n\tt.pass();\n});\n```\n\nNote that this only applies to tests within a particular test file. AVA will still run multiple tests files at the same time unless you pass the [`--serial` CLI flag](#cli).\n\nYou can use the `.serial` modifier with all tests, hooks and even `.todo()`, but it's only available on the `test` function.\n\n### Running specific tests\n\nDuring development it can be helpful to only run a few specific tests. This can be accomplished using the `.only` modifier:\n\n```js\ntest('will not be run', t => {\n\tt.fail();\n});\n\ntest.only('will be run', t => {\n\tt.pass();\n});\n```\n\nYou can use the `.only` modifier with all tests. It cannot be used with hooks or `.todo()`.\n\n*Note:* The `.only` modifier applies to the test file it's defined in, so if you run multiple test files, tests in other files will still run. If you want to only run the `test.only` test, provide just that test file to AVA.\n\n### Running tests with matching titles\n\nThe `--match` flag allows you to run just the tests that have a matching title. This is achieved with simple wildcard patterns. Patterns are case insensitive. See [`matcher`](https://github.com/sindresorhus/matcher) for more details.\n\nMatch titles ending with `foo`:\n\n```console\n$ ava --match='*foo'\n```\n\nMatch titles starting with `foo`:\n\n```console\n$ ava --match='foo*'\n```\n\nMatch titles containing `foo`:\n\n```console\n$ ava --match='*foo*'\n```\n\nMatch titles that are *exactly* `foo` (albeit case insensitively):\n\n```console\n$ ava --match='foo'\n```\n\nMatch titles not containing `foo`:\n\n```console\n$ ava --match='!*foo*'\n```\n\nMatch titles starting with `foo` and ending with `bar`:\n\n```console\n$ ava --match='foo*bar'\n```\n\nMatch titles starting with `foo` or ending with `bar`:\n\n```console\n$ ava --match='foo*' --match='*bar'\n```\n\nNote that a match pattern takes precedence over the `.only` modifier. Only tests with an explicit title are matched. Tests without titles or whose title is derived from the implementation function will be skipped when `--match` is used.\n\nHere's what happens when you run AVA with a match pattern of `*oo*` and the following tests:\n\n```js\ntest('foo will run', t => {\n\tt.pass();\n});\n\ntest('moo will also run', t => {\n\tt.pass();\n});\n\ntest.only('boo will run but not exclusively', t => {\n\tt.pass();\n});\n\n// Won't run, no title\ntest(function (t) {\n\tt.fail();\n});\n\n// Won't run, no explicit title\ntest(function foo(t) {\n\tt.fail();\n});\n```\n\n### Skipping tests\n\nSometimes failing tests can be hard to fix. You can tell AVA to skip these tests using the `.skip` modifier. They'll still be shown in the output (as having been skipped) but are never run.\n\n```js\ntest.skip('will not be run', t => {\n\tt.fail();\n});\n```\n\nYou must specify the implementation function. You can use the `.skip` modifier with all tests and hooks, but not with `.todo()`. You can not apply further modifiers to `.skip`.\n\n### Test placeholders (\"todo\")\n\nYou can use the `.todo` modifier when you're planning to write a test. Like skipped tests these placeholders are shown in the output. They only require a title; you cannot specify the implementation function.\n\n```js\ntest.todo('will think about writing this later');\n```\n\nYou can signal that you need to write a serial test:\n\n```js\ntest.serial.todo('will think about writing this later');\n```\n\n### Failing tests\n\nYou can use the `.failing` modifier to document issues with your code that need to be fixed. Failing tests are run just like normal ones, but they are expected to fail, and will not break your build when they do. If a test marked as failing actually passes, it will be reported as an error and fail the build with a helpful message instructing you to remove the `.failing` modifier.\n\nThis allows you to merge `.failing` tests before a fix is implemented without breaking CI. This is a great way to recognize good bug report PR's with a commit credit, even if the reporter is unable to actually fix the problem.\n\n```js\n// See: github.com/user/repo/issues/1234\ntest.failing('demonstrate some bug', t => {\n\tt.fail(); // Test will count as passed\n});\n```\n\n### Before & after hooks\n\nAVA lets you register hooks that are run before and after your tests. This allows you to run setup and/or teardown code.\n\n`test.before()` registers a hook to be run before the first test in your test file. Similarly `test.after()` registers a hook to be run after the last test. Use `test.after.always()` to register a hook that will **always** run once your tests and other hooks complete. `.always()` hooks run regardless of whether there were earlier failures, so they are ideal for cleanup tasks. Note however that uncaught exceptions, unhandled rejections or timeouts will crash your tests, possibly preventing `.always()` hooks from running.\n\n`test.beforeEach()` registers a hook to be run before each test in your test file. Similarly `test.afterEach()` a hook to be run after each test. Use `test.afterEach.always()` to register an after hook that is called even if other test hooks, or the test itself, fail.\n\nIf a test is skipped with the `.skip` modifier, the respective `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks are not run. Likewise, if all tests in a test file are skipped `.before()`, `.after()` and `.after.always()` hooks for the file are not run.\n\nLike `test()` these methods take an optional title and an implementation function. The title is shown if your hook fails to execute. The implementation is called with an [execution object](#t). You can use assertions in your hooks. You can also pass a [macro function](#test-macros) and additional arguments.\n\n`.before()` hooks execute before `.beforeEach()` hooks. `.afterEach()` hooks execute before `.after()` hooks. Within their category the hooks execute in the order they were defined. By default hooks execute concurrently, but you can use `test.serial` to ensure only that single hook is run at a time. Unlike with tests, serial hooks are *not* run before other hooks:\n\n```js\ntest.before(t => {\n\t// This runs before all tests\n});\n\ntest.before(t => {\n\t// This runs concurrently with the above\n});\n\ntest.serial.before(t => {\n\t// This runs after the above\n});\n\ntest.serial.before(t => {\n\t// This too runs after the above, and before tests\n});\n\ntest.after('cleanup', t => {\n\t// This runs after all tests\n});\n\ntest.after.always('guaranteed cleanup', t => {\n\t// This will always run, regardless of earlier failures\n});\n\ntest.beforeEach(t => {\n\t// This runs before each test\n});\n\ntest.afterEach(t => {\n\t// This runs after each test\n});\n\ntest.afterEach.always(t => {\n\t// This runs after each test and other test hooks, even if they failed\n});\n\ntest('title', t => {\n\t// Regular test\n});\n```\n\nHooks can be synchronous or asynchronous, just like tests. To make a hook asynchronous return a promise or observable, use an async function, or enable callback mode via `test.before.cb()`, `test.beforeEach.cb()` etc.\n\n```js\ntest.before(async t => {\n\tawait promiseFn();\n});\n\ntest.after(t => {\n\treturn new Promise(/* ... */);\n});\n\ntest.beforeEach.cb(t => {\n\tsetTimeout(t.end);\n});\n\ntest.afterEach.cb(t => {\n\tsetTimeout(t.end);\n});\n```\n\nKeep in mind that the `.beforeEach()` and `.afterEach()` hooks run just before and after a test is run, and that by default tests run concurrently. This means each multiple `.beforeEach()` hooks may run concurrently. Using `test.serial.beforeEach()` does not change this. If you need to set up global state for each test (like spying on `console.log` [for example](https://github.com/avajs/ava/issues/560)), you'll need to make sure the tests themselves are [run serially](#running-tests-serially).\n\nRemember that AVA runs each test file in its own process. You may not have to clean up global state in a `.after()`-hook since that's only called right before the process exits.\n\n#### Test context\n\nHooks can share context with the test:\n\n```js\ntest.beforeEach(t => {\n\tt.context.data = generateUniqueData();\n});\n\ntest('context data is foo', t => {\n\tt.is(t.context.data + 'bar', 'foobar');\n});\n```\n\nContext created in `.before()` hooks is [cloned](https://www.npmjs.com/package/lodash.clone) before it is passed to `.beforeEach()` hooks and / or tests. The `.after()` and `.after.always()` hooks receive the original context value.\n\nFor `.beforeEach()`, `.afterEach()` and `.afterEach.always()` hooks the context is *not* shared between different tests, allowing you to set up data such that it will not leak to other tests.\n\nBy default `t.context` is an object but you can reassign it:\n\n```js\ntest.before(t => {\n\tt.context = 'unicorn';\n});\n\ntest('context is unicorn', t => {\n\tt.is(t.context, 'unicorn');\n});\n```\n\n### Test macros\n\nAdditional arguments passed to the test declaration will be passed to the test implementation. This is useful for creating reusable test macros.\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\ntest('2 + 2 = 4', macro, '2 + 2', 4);\ntest('2 * 3 = 6', macro, '2 * 3', 6);\n```\n\nYou can build the test title programmatically by attaching a `title` function to the macro:\n\n```js\nfunction macro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nmacro.title = (providedTitle, input, expected) => `${providedTitle} ${input} = ${expected}`.trim();\n\ntest(macro, '2 + 2', 4);\ntest(macro, '2 * 3', 6);\ntest('providedTitle', macro, '3 * 3', 9);\n```\n\nThe `providedTitle` argument defaults to an empty string if the user does not supply a string title. This allows for easy concatenation without having to worry about `null` / `undefined`. It is worth remembering that the empty string is considered a falsy value, so you can still use `if(providedTitle) {...}`.\n\nYou can also pass arrays of macro functions:\n\n```js\nconst safeEval = require('safe-eval');\n\nfunction evalMacro(t, input, expected) {\n\tt.is(eval(input), expected);\n}\n\nfunction safeEvalMacro(t, input, expected) {\n\tt.is(safeEval(input), expected);\n}\n\ntest([evalMacro, safeEvalMacro], '2 + 2', 4);\ntest([evalMacro, safeEvalMacro], '2 * 3', 6);\n```\n\nWe encourage you to use macros instead of building your own test generators ([here is an example](https://github.com/avajs/ava-codemods/blob/47073b5b58aa6f3fb24f98757be5d3f56218d160/test/ok-to-truthy.js#L7-L9) of code that should be replaced with a macro). Macros are designed to perform static analysis of your code, which can lead to better performance, IDE integration, and linter rules.\n\n### Custom assertions\n\nYou can use any assertion library instead of or in addition to the built-in one, provided it throws exceptions when the assertion fails.\n\nThis won't give you as nice an experience as you'd get with the [built-in assertions](#assertions) though, and you won't be able to use the [assertion planning](#assertion-planning) ([see #25](https://github.com/avajs/ava/issues/25)).\n\nYou'll have to configure AVA to not fail tests if no assertions are executed, because AVA can't tell if custom assertions pass. Set the `failWithoutAssertions` option to `false` in AVA's [`package.json` configuration](#configuration).\n\n```js\nimport assert from 'assert';\n\ntest('custom assertion', t => {\n\tassert(true);\n});\n```\n\n### Latest JavaScript support\n\nAVA uses [Babel 7](https://babeljs.io) so you can use the latest JavaScript syntax in your tests. There is no extra setup required. You don't need to be using Babel in your own project for this to work either.\n\nWe aim support all [finished syntax proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md), as well as all syntax from ratified JavaScript versions (e.g. ES2017). See our [`@ava/stage-4`](https://github.com/avajs/babel-preset-stage-4) preset for the currently supported proposals.\n\nPlease note that we do not add or modify built-ins. For example, if you use [`Object.entries()`](https://github.com/tc39/proposal-object-values-entries) in your tests, they will crash in Node.js 6 which does not implement this method.\n\nYou can disable this syntax support, or otherwise customize AVA's Babel pipeline. See our [Babel recipe] for more details.\n\n### TypeScript support\n\nAVA includes typings for TypeScript. You have to set up transpilation yourself. When you set `module` to `commonjs` in your `tsconfig.json` file, TypeScript will automatically find the type definitions for AVA. You should set `target` to `es2015` to use promises and async functions.\n\nSee AVA's [TypeScript recipe](docs/recipes/typescript.md) for a more detailed explanation.\n\n### Transpiling imported modules\n\nAVA currently only transpiles the tests you ask it to run, as well as test helpers (files starting with `_` or in `helpers` directory) inside the test directory. *It will not transpile modules you `import` from outside of the test.* This may be unexpected but there are workarounds.\n\nIf you use Babel you can use its [require hook](https://babeljs.io/docs/usage/require/) to transpile imported modules on-the-fly. To add it, [configure it in your `package.json`](#configuration).\n\nYou can also transpile your modules in a separate process and refer to the transpiled files rather than the sources from your tests. Example [here](docs/recipes/precompiling-with-webpack.md).\n\n### Promise support\n\nIf you return a promise in the test you don't need to explicitly end the test as it will end when the promise resolves.\n\n```js\ntest('resolves with unicorn', t => {\n\treturn somePromise().then(result => {\n\t\tt.is(result, 'unicorn');\n\t});\n});\n```\n\n### Async function support\n\nAVA comes with built-in support for [async functions](https://tc39.github.io/ecmascript-asyncawait/) *(async/await)*.\n\n```js\ntest(async function (t) {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n\n// Async arrow function\ntest('promises the truth', async t => {\n\tconst value = await promiseFn();\n\tt.true(value);\n});\n```\n\n### Observable support\n\nAVA comes with built-in support for [observables](https://github.com/zenparsing/es-observable). If you return an observable from a test, AVA will automatically consume it to completion before ending the test.\n\n*You do not need to use \"callback mode\" or call `t.end()`.*\n\n```js\ntest('handles observables', t => {\n\tt.plan(3);\n\treturn Observable.of(1, 2, 3, 4, 5, 6)\n\t\t.filter(n => {\n\t\t\t// Only even numbers\n\t\t\treturn n % 2 === 0;\n\t\t})\n\t\t.map(() => t.pass());\n});\n```\n\n### Callback support\n\nAVA supports using `t.end` as the final callback when using node-style error-first callback APIs. AVA will consider any truthy value passed as the first argument to `t.end` to be an error. Note that `t.end` requires \"callback mode\", which can be enabled by using the `test.cb` chain.\n\n```js\ntest.cb('data.txt can be read', t => {\n\t// `t.end` automatically checks for error as first argument\n\tfs.readFile('data.txt', t.end);\n});\n```\n\n### Global timeout\n\nA global timeout can be set via the `--timeout` option. Timeout in AVA behaves differently than in other test frameworks. AVA resets a timer after each test, forcing tests to quit if no new test results were received within the specified timeout. This can be used to handle stalled tests.\n\nYou can set timeouts in a human-readable way:\n\n```console\n$ ava --timeout=10s # 10 seconds\n$ ava --timeout=2m # 2 minutes\n$ ava --timeout=100 # 100 milliseconds\n```\n\n### Parallel runs in CI\n\nAVA automatically detects whether your CI environment supports parallel builds. Each build will run a subset of all test files, while still making sure all tests get executed. See the [`ci-parallel-vars`](https://www.npmjs.com/package/ci-parallel-vars) package for a list of supported CI environments.\n\n## API\n\n### `test([title], implementation)`\n### `test.serial([title], implementation)`\n### `test.cb([title], implementation)`\n### `test.only([title], implementation)`\n### `test.skip([title], implementation)`\n### `test.todo(title)`\n### `test.failing([title], implementation)`\n### `test.before([title], implementation)`\n### `test.after([title], implementation)`\n### `test.beforeEach([title], implementation)`\n### `test.afterEach([title], implementation)`\n\n#### `title`\n\nType: `string`\n\nTest title.\n\n#### `implementation(t)`\n\nType: `function`\n\nShould contain the actual test.\n\n##### `t`\n\nType: `object`\n\nThe execution object of a particular test. Each test implementation receives a different object. Contains the [assertions](#assertions) as well as `.plan(count)` and `.end()` methods. `t.context` can contain shared state from hooks. `t.title` returns the test's title.\n\n###### `t.plan(count)`\n\nPlan how many assertion there are in the test. The test will fail if the actual assertion count doesn't match the number of planned assertions. See [assertion planning](#assertion-planning).\n\n###### `t.end()`\n\nEnd the test. Only works with `test.cb()`.\n\n###### `t.log(...values)`\n\nLog values contextually alongside the test result instead of immediately printing them to `stdout`. Behaves somewhat like `console.log`, but without support for placeholder tokens.\n\n## Assertions\n\nAssertions are mixed into the [execution object](#t) provided to each test implementation:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy('unicorn'); // Assertion\n});\n```\n\nAssertions are bound to their test so you can assign them to a variable or pass them around:\n\n```js\ntest('unicorns are truthy', t => {\n\tconst truthy = t.truthy;\n\ttruthy('unicorn');\n});\n```\n\nAssertions can be skipped by adding `.skip()`:\n\n```js\ntest('unicorns are truthy', t => {\n\tt.truthy.skip('unicorn');\n});\n```\n\nIf multiple assertion failures are encountered within a single test, AVA will only display the *first* one.\n\n### `.pass([message])`\n\nPassing assertion.\n\n### `.fail([message])`\n\nFailing assertion.\n\n### `.truthy(value, [message])`\n\nAssert that `value` is truthy.\n\n### `.falsy(value, [message])`\n\nAssert that `value` is falsy.\n\n### `.true(value, [message])`\n\nAssert that `value` is `true`.\n\n### `.false(value, [message])`\n\nAssert that `value` is `false`.\n\n### `.is(value, expected, [message])`\n\nAssert that `value` is the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.not(value, expected, [message])`\n\nAssert that `value` is not the same as `expected`. This is based on [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\n### `.deepEqual(value, expected, [message])`\n\nAssert that `value` is deeply equal to `expected`. See [Concordance](https://github.com/concordancejs/concordance) for details. Works with [React elements and `react-test-renderer`](https://github.com/concordancejs/react).\n\n### `.notDeepEqual(value, expected, [message])`\n\nAssert that `value` is not deeply equal to `expected`. The inverse of `.deepEqual()`.\n\n### `.throws(fn, [expected, [message]])`\n\nAssert that an error is thrown. `fn` must be a function which should throw. The thrown value *must* be an error. It is returned so you can run more assertions against it.\n\n`expected` can be a constructor, in which case the thrown error must be an instance of the constructor. It can be a string, which is compared against the thrown error's message, or a regular expression which is matched against this message. You can also specify a matcher object with one or more of the following properties:\n\n* `instanceOf`: a constructor, the thrown error must be an instance of\n* `is`: the thrown error must be strictly equal to `expected.is`\n* `message`: either a string, which is compared against the thrown error's message, or a regular expression, which is matched against this message\n* `name`: the expected `.name` value of the thrown error\n* `code`: the expected `.code` value of the thrown error\n\n`expected` does not need to be specified. If you don't need it but do want to set an assertion message you have to specify `null`.\n\nExample:\n\n```js\nconst fn = () => {\n\tthrow new TypeError('🦄');\n};\n\ntest('throws', t => {\n\tconst error = t.throws(() => {\n\t\tfn();\n\t}, TypeError);\n\n\tt.is(error.message, '🦄');\n});\n```\n\n### `.throwsAsync(thrower, [expected, [message]])`\n\nAssert that an error is thrown. `thrower` can be an async function which should throw, or a promise that should reject. This assertion must be awaited.\n\nThe thrown value *must* be an error. It is returned so you can run more assertions against it.\n\n`expected` can be a constructor, in which case the thrown error must be an instance of the constructor. It can be a string, which is compared against the thrown error's message, or a regular expression which is matched against this message. You can also specify a matcher object with one or more of the following properties:\n\n* `instanceOf`: a constructor, the thrown error must be an instance of\n* `is`: the thrown error must be strictly equal to `expected.is`\n* `message`: either a string, which is compared against the thrown error's message, or a regular expression, which is matched against this message\n* `name`: the expected `.name` value of the thrown error\n* `code`: the expected `.code` value of the thrown error\n\n`expected` does not need to be specified. If you don't need it but do want to set an assertion message you have to specify `null`.\n\nExample:\n\n```js\ntest('throws', async t => {\n\tawait t.throwsAsync(async () => {\n\t\tthrow new TypeError('🦄');\n\t}, {instanceOf: TypeError, message: '🦄'});\n});\n```\n\n```js\nconst promise = Promise.reject(new TypeError('🦄'));\n\ntest('rejects', async t => {\n\tconst error = await t.throwsAsync(promise);\n\tt.is(error.message, '🦄');\n});\n```\n\n### `.notThrows(fn, [message])`\n\nAssert that no error is thrown. `fn` must be a function which shouldn't throw.\n\n### `.notThrowsAsync(nonThrower, [message])`\n\nAssert that no error is thrown. `nonThrower` can be an async function which shouldn't throw, or a promise that should resolve.\n\nLike the `.throwsAsync()` assertion, you must wait for the assertion to complete:\n\n```js\ntest('resolves', async t => {\n\tawait t.notThrowsAsync(promise);\n});\n```\n\n### `.regex(contents, regex, [message])`\n\nAssert that `contents` matches `regex`.\n\n### `.notRegex(contents, regex, [message])`\n\nAssert that `contents` does not match `regex`.\n\n### `.snapshot(expected, [message])`\n### `.snapshot(expected, [options], [message])`\n\nCompares the `expected` value with a previously recorded snapshot. Snapshots are stored for each test, so ensure you give your tests unique titles. Alternatively pass an `options` object to select a specific snapshot, for instance `{id: 'my snapshot'}`.\n\nSnapshot assertions cannot be skipped when snapshots are being updated.\n\n## Snapshot testing\n\nAVA supports snapshot testing, [as introduced by Jest](https://facebook.github.io/jest/docs/snapshot-testing.html), through its [Assertions](#assertions) interface. You can snapshot any value as well as React elements:\n\n```js\n// Your component\nconst HelloWorld = () => <h1>Hello World...!</h1>;\n\nexport default HelloWorld;\n```\n\n```js\n// Your test\nimport test from 'ava';\nimport render from 'react-test-renderer';\nimport HelloWorld from '.';\n\ntest('HelloWorld component', t => {\n\tconst tree = render.create(<HelloWorld/>).toJSON();\n\tt.snapshot(tree);\n});\n```\n\n[Try it out in this example project.](https://github.com/avajs/ava-snapshot-example)\n\nSnapshots are stored alongside your test files. If your tests are in a `test` or `tests` folder the snapshots will be stored in a `snapshots` folder. If your tests are in a `__tests__` folder then they they'll be stored in a `__snapshots__` folder.\n\nSay you have `~/project/test/main.js` which contains snapshot assertions. AVA will create two files:\n\n* `~/project/test/snapshots/main.js.snap`\n* `~/project/test/snapshots/main.js.md`\n\nThe first file contains the actual snapshot and is required for future comparisons. The second file contains your *snapshot report*. It's regenerated when you update your snapshots. If you commit it to source control you can diff it to see the changes to your snapshot.\n\nAVA will show why your snapshot assertion failed:\n\n<img src=\"media/snapshot-testing.png\" width=\"1048\">\n\nYou can then check your code. If the change was intentional you can use the `--update-snapshots` (or `-u`) flag to update the snapshots:\n\n```console\n$ ava --update-snapshots\n```\n\nYou can specify a fixed location for storing the snapshot files in AVA's [`package.json` configuration](#configuration):\n\n**`package.json`:**\n\n```json\n{\n\t\"ava\": {\n\t\t\"snapshotDir\": \"custom-directory\"\n\t}\n}\n```\n\nThe snapshot files will be saved in a directory structure that mirrors that of your test files.\n\nIf you are running AVA against precompiled test files, AVA will try and use source maps to determine the location of the original files. Snapshots will be stored next to these files, following the same rules as if AVA had executed the original files directly. This is great if you're writing your tests in TypeScript (see our [TypeScript recipe](docs/recipes/typescript.md)).\n\n### Skipping assertions\n\nAny assertion can be skipped using the `skip` modifier. Skipped assertions are still counted, so there is no need to change your planned assertion count.\n\n```js\ntest('skip assertion', t => {\n\tt.plan(2);\n\tt.is.skip(foo(), 5); // No need to change your plan count when skipping\n\tt.is(1, 1);\n});\n```\n\n### Enhanced assertion messages\n\nAVA comes with [`power-assert`](https://github.com/power-assert-js/power-assert) built-in, giving you more descriptive assertion messages. It reads your test and tries to infer more information from the code.\n\nLet's take this example, using Node's standard [`assert` library](https://nodejs.org/api/assert.html):\n\n```js\nconst a = /foo/;\nconst b = 'bar';\nconst c = 'baz';\nrequire('assert').ok(a.test(b) || b === c);\n```\n\nIf you paste that into a Node REPL it'll return:\n\n```\nAssertionError: false == true\n```\n\nIn AVA however, this test:\n\n```js\ntest('enhanced assertions', t => {\n\tconst a = /foo/;\n\tconst b = 'bar';\n\tconst c = 'baz';\n\tt.true(a.test(b) || b === c);\n});\n```\n\nWill output:\n\n```\nt.true(a.test(b) || b === c)\n       |      |     |     |\n       |      \"bar\" \"bar\" \"baz\"\n       false\n```\n\n## Process isolation\n\nEach test file is run in a separate Node.js process. This allows you to change the global state or overriding a built-in in one test file, without affecting another. It's also great for performance on modern multi-core processors, allowing multiple test files to execute in parallel.\n\nAVA will set `process.env.NODE_ENV` to `test`, unless the `NODE_ENV` environment variable has been set. This is useful if the code you're testing has test defaults (for example when picking what database to connect to, or environment-specific Babel options). It may cause your code or its dependencies to behave differently though. Note that `'NODE_ENV' in process.env` will always be `true`.\n\n## Tips\n\n### Temp files\n\nRunning tests concurrently comes with some challenges, doing file IO is one.\n\nUsually, serial tests create temp directories in the current test directory and clean them up at the end. This won't work when you run tests concurrently as tests will conflict with each other. The correct way to do it is to use a new temp directory for each test. The [`tempfile`](https://github.com/sindresorhus/tempfile) and [`temp-write`](https://github.com/sindresorhus/temp-write) modules can be helpful.\n\n### Code coverage\n\nYou can't use [`istanbul`](https://github.com/gotwarlost/istanbul) for code coverage as AVA [spawns the test files](#process-isolation). You can use [`nyc`](https://github.com/bcoe/nyc) instead, which is basically `istanbul` with support for subprocesses.\n\nAs of version `5.0.0` it uses source maps to report coverage for your actual code, regardless of transpilation. Make sure that the code you're testing includes an inline source map or references a source map file. If you use `@babel/register` you can set the `sourceMaps` option in your Babel config to `inline`.\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [/ˈeɪvə/ ay-və](media/pronunciation.m4a?raw=true).\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Flow](docs/recipes/flow.md)\n- [Configuring Babel][Babel recipe]\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [JSPM and SystemJS](docs/recipes/jspm-systemjs.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Precompiling source files with webpack](docs/recipes/precompiling-with-webpack.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n\n## Support\n\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/ava)\n- [Spectrum](https://spectrum.chat/ava)\n- [Twitter](https://twitter.com/ava__js)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) - Lint rules for AVA tests\n- [sublime-ava](https://github.com/avajs/sublime-ava) - Snippets for AVA tests\n- [atom-ava](https://github.com/avajs/atom-ava) - Snippets for AVA tests\n- [vscode-ava](https://github.com/samverschueren/vscode-ava) - Snippets for AVA tests\n- [gulp-ava](https://github.com/avajs/gulp-ava) - Run tests with gulp\n- [grunt-ava](https://github.com/avajs/grunt-ava) - Run tests with grunt\n- [More…](https://github.com/avajs/awesome-ava#packages)\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [AVA Casts](http://avacasts.com)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus) | [![Vadim Demedes](https://github.com/vadimdemedes.png?size=100)](https://github.com/vadimdemedes)\n---|---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](http://sindresorhus.com) | [Vadim Demedes](https://github.com/vadimdemedes)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://ava.li\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n\n[Babel recipe]: docs/recipes/babel.md\n",
      "readmeFilename": "readme.md",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.0.0-rc.1",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "10.12.0",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-tyHTMP7frwiewEvRUON4ikDneTg56981bnXzJe882sgL0BVxvUPH8jdiKKOtzZPZncGaTA/YXyDzYhjV71YRCg==",
        "shasum": "4c1b585defcf18b90ba0c3f3716c4899ebf1c049",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.0.0-rc.1.tgz",
        "fileCount": 51,
        "unpackedSize": 294892,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbw15MCRA9TVsSAnZWagAAG6IP/0ScRYOAHWYr4Y1mb0WF\ncKZkIVyBmkrKjNCVsYoRaP0LAj/2cNkhRqiMbKncXzQM2oP4A0Og5MH7fV/O\nP7IC1qt6g+u/qmDFcs1xIcXgLPWjVr7TB1i+0tT9QllryQQW7NLxdCSHbtIg\nM6vdAkEkVPO+d2RHh4DuY22FLrTWKXfXdQlaVOK1JhYs6ztquqlVTCOF1UY6\n/d9l1ZHUWm68vB0z6AdPC8tjRxcabVuFQcWNm3t/TTVkljdz+TXLKabL8gGR\nT2HDDLPeTYQO893YtyYYrvsUGp/AgokGqyhWlV+YNNU6WHUw4tv5FKWTVkf9\nCRmrOThWTf2yxfzdyR/PL9cVxm6DhHN3g3xIx+6Wg7oZbUMO63tHHfXcGuwI\nIL1qHKYumv3SY3aCEr1NpOXW4b1RrvXkNmLWNrHhJaLtLpqYL0X+G65grr7k\npvFSb1JLtHeMNc0TDPOOo8E0TALa2L498PlhclMoMkCHrb3KbMD+//7RRkUy\n6939G9ScdhXCY3bPjeupjHaECnT8dZVXg85Q7RjK19X/YV857KXFDUp5dtPq\n9szmE4QXPV1efqV1f7PCgezHWGkpPQG/FztQVtyS7YYNHr14dpkb/5vruHEP\ny49AghYuHA0TDP9tKnVLWwUBFkTlWd4iHAniUaRs+0yH55aTi81ov7DX/UZb\nmO2Y\r\n=89V5\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGVfPqocGiDqW2SCb1NPdE5nZJImM3LhU/bwA0pRIF2yAiEAoKaeTZdYNhLTVnkQLp6K5KDmYCW0eUjC9c2qlSadIkE="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.0.0-rc.1_1539530315682_0.26152681077843476"
      },
      "_hasShrinkwrap": false
    },
    "1.0.0-rc.2": {
      "name": "ava",
      "version": "1.0.0-rc.2",
      "description": "Futuristic test runner 🚀",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=6.12.3 <7 || >=8.9.4 <9 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test:flow": "flow check test/flow-types",
        "test:tap": "tap --no-cov --reporter=classic --timeout=300 --jobs=2 test/*.js test/reporters/*.js test/integration/*.js",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:flow && npm run test:typescript && nyc npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^2.0.0",
        "@ava/babel-preset-transform-test-files": "^4.0.0",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "^7.1.5",
        "@babel/generator": "^7.1.5",
        "@babel/plugin-syntax-async-generators": "^7.0.0",
        "@babel/plugin-syntax-object-rest-spread": "^7.0.0",
        "@babel/plugin-syntax-optional-catch-binding": "^7.0.0",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^3.1.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^2.0.0",
        "arrify": "^1.0.0",
        "bluebird": "^3.5.3",
        "chalk": "^2.4.1",
        "chokidar": "^2.0.4",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.0.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-truncate": "^1.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.0",
        "del": "^3.0.0",
        "dot-prop": "^4.2.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^1.0.5",
        "esm": "^3.0.84",
        "figures": "^2.0.0",
        "find-up": "^3.0.0",
        "get-port": "^4.0.0",
        "globby": "^7.1.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^2.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^1.2.1",
        "is-error": "^2.2.1",
        "is-observable": "^1.1.0",
        "is-plain-object": "^2.0.4",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.3.0",
        "matcher": "^1.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^5.0.0",
        "ms": "^2.1.1",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "ora": "^3.0.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.1.0",
        "plur": "^3.0.1",
        "pretty-ms": "^4.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "slash": "^2.0.0",
        "source-map-support": "^0.5.9",
        "stack-utils": "^1.0.1",
        "strip-ansi": "^5.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^5.5.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.5.0"
      },
      "devDependencies": {
        "cli-table3": "^0.5.1",
        "codecov": "^3.1.0",
        "delay": "^4.1.0",
        "execa": "^1.0.0",
        "flow-bin": "^0.86.0",
        "get-stream": "^4.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^3.0.0",
        "nyc": "^13.1.0",
        "proxyquire": "^2.1.0",
        "react": "^16.6.1",
        "react-test-renderer": "^16.6.1",
        "replace-string": "^2.0.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.1.1",
        "source-map-fixtures": "^2.1.0",
        "tap": "^12.0.1",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "ts-node": "^7.0.1",
        "typescript": "^3.1.6",
        "xo": "^0.23.0",
        "zen-observable": "^0.8.11"
      },
      "typings": "index.d.ts",
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "**/*.ts",
          "test/flow-types/*"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off",
          "prefer-destructuring": "off",
          "prefer-rest-params": "off",
          "prefer-spread": "off",
          "unicorn/prefer-spread": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "readme": "# [![AVA](media/header.png)](https://ava.li)\n\n> Futuristic test runner\n\n[![Build Status](https://travis-ci.org/avajs/ava.svg?branch=master)](https://travis-ci.org/avajs/ava)  [![Coverage Status](https://codecov.io/gh/avajs/ava/branch/master/graph/badge.svg)](https://codecov.io/gh/avajs/ava/branch/master) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo) [![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/ava)\n [![Mentioned in Awesome Node.js](https://awesome.re/mentioned-badge.svg)](https://github.com/sindresorhus/awesome-nodejs)\n\nEven though JavaScript is single-threaded, IO in Node.js can happen in parallel due to its async nature. AVA takes advantage of this and runs your tests concurrently, which is especially beneficial for IO heavy tests. In addition, test files are run in parallel as separate processes, giving you even better performance and an isolated environment for each test file. [Switching](https://github.com/sindresorhus/pageres/commit/663be15acb3dd2eb0f71b1956ef28c2cd3fdeed0) from Mocha to AVA in Pageres brought the test time down from 31 to 11 seconds. Having tests run concurrently forces you to write atomic tests, meaning tests don't depend on global state or the state of other tests, which is a great thing!\n\n![](media/mini-reporter.gif)\n\n*Read our [contributing guide](contributing.md) if you're looking to contribute (issues/PRs/etc).*\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\n**This documentation covers the 1.0 beta releases, which use Babel 7. The last release that uses Babel 6 is [`v0.25.0`](https://github.com/avajs/ava/tree/v0.25.0).**\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript & Flow type definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](./docs/01-writing-tests.md#process-isolation)\n- [Write your tests using the latest JavaScript syntax](#latest-javascript-support)\n- [Promise support](./docs/01-writing-tests.md#promise-support)\n- [Async function support](./docs/01-writing-tests.md#async-function-support)\n- [Observable support](./docs/01-writing-tests.md#observable-support)\n- [Enhanced assertion messages](./docs/03-assertions.md#enhanced-assertion-messages)\n- [Automatic parallel test runs in CI](#parallel-runs-in-ci)\n- [TAP reporter](./docs/05-command-line.md#tap-reporter)\n\n\n## Usage\n\nTo install and set up AVA, run:\n\n```console\nnpx create-ava --next\n```\n\nYour `package.json` will then look like this (exact version notwithstanding):\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"1.0.0-beta.4\"\n\t}\n}\n```\n\nOr if you prefer using Yarn:\n\n```console\nyarn add ava@next --dev --exact\n```\n\nAlternatively you can install `ava` manually:\n\n```console\nnpm install --save-dev --save-exact ava@next\n```\n\nDon't forget to configure the `test` script in your `package.json` as per above.\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nimport test from 'ava';\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\tt.is(await bar, 'bar');\n});\n```\n\n### Running your tests\n\n```console\nnpm test\n```\n\nOr with `npx`:\n\n```console\nnpx ava\n```\n\nRun with the `--watch` flag to enable AVA's [watch mode](docs/recipes/watch-mode.md):\n\n```console\nnpx ava --watch\n```\n\n## Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## Highlights\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n### Latest JavaScript support\n\nAVA uses [Babel 7](https://babeljs.io) so you can use the latest JavaScript syntax in your tests. There is no extra setup required. You don't need to be using Babel in your own project for this to work either.\n\nWe aim support all [finished syntax proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md), as well as all syntax from ratified JavaScript versions (e.g. ES2017). See our [`@ava/stage-4`](https://github.com/avajs/babel-preset-stage-4) preset for the currently supported proposals.\n\nPlease note that we do not add or modify built-ins. For example, if you use [`Object.entries()`](https://github.com/tc39/proposal-object-values-entries) in your tests, they will crash in Node.js 6 which does not implement this method.\n\nYou can disable this syntax support, or otherwise customize AVA's Babel pipeline. See our [Babel recipe] for more details.\n\n### Parallel runs in CI\n\nAVA automatically detects whether your CI environment supports parallel builds. Each build will run a subset of all test files, while still making sure all tests get executed. See the [`ci-parallel-vars`](https://www.npmjs.com/package/ci-parallel-vars) package for a list of supported CI environments.\n\n## Documentation\n\nPlease see the [files in the `docs` directory](./docs):\n\n* [Writing tests](./docs/01-writing-tests.md)\n* [Execution context](./docs/02-execution-context.md)\n* [Assertions](./docs/03-assertions.md)\n* [Snapshot testing](./docs/04-snapshot-testing.md)\n* [Command line (CLI)](./docs/05-command-line.md)\n* [Configuration](./docs/06-configuration.md)\n* [Test timeouts](./docs/07-test-timeouts.md)\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/08-common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n### Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Flow](docs/recipes/flow.md)\n- [Configuring Babel][Babel recipe]\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [JSPM and SystemJS](docs/recipes/jspm-systemjs.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n- [Testing web apps using Puppeteer](docs/recipes/puppeteer.md)\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [/ˈeɪvə/ ay-və](media/pronunciation.m4a?raw=true).\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Support\n\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/ava)\n- [Spectrum](https://spectrum.chat/ava)\n- [Twitter](https://twitter.com/ava__js)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) - Lint rules for AVA tests\n- [sublime-ava](https://github.com/avajs/sublime-ava) - Snippets for AVA tests\n- [atom-ava](https://github.com/avajs/atom-ava) - Snippets for AVA tests\n- [vscode-ava](https://github.com/samverschueren/vscode-ava) - Snippets for AVA tests\n- [gulp-ava](https://github.com/avajs/gulp-ava) - Run tests with gulp\n- [grunt-ava](https://github.com/avajs/grunt-ava) - Run tests with grunt\n- [More…](https://github.com/avajs/awesome-ava#packages)\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [AVA Casts](http://avacasts.com)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus) | [![Vadim Demedes](https://github.com/vadimdemedes.png?size=100)](https://github.com/vadimdemedes)\n---|---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](http://sindresorhus.com) | [Vadim Demedes](https://github.com/vadimdemedes)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://ava.li\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n\n[Babel recipe]: docs/recipes/babel.md\n",
      "readmeFilename": "readme.md",
      "gitHead": "0e82b044a1a5af35286df344275ef779431aac3a",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.0.0-rc.2",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "10.12.0",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-MxCW+bY+ddID5SrZZHbkuCiwsLup3Dn/bAgnrl6BzHYRI4RF9Yk5zv6S2L1TjqUF1LvRS8RiqZBrD+G6db+fEg==",
        "shasum": "a2f63211d2ad1924fa4671ff3b29212b1da656af",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.0.0-rc.2.tgz",
        "fileCount": 51,
        "unpackedSize": 261019,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb6FvvCRA9TVsSAnZWagAAPgEP/jTRiEJeUx4Z+Q+Fbbn2\nRx7277YrrmrTCb9iPStcYTFDD8XRYLpyYjCxNoUeLDlHhr7tylvmcnqaI/ro\nLIMjwhfY4SluOrAoDtLnZEKsV0KsGN1aCGr2KeK6l6bMfpvqwy1nibZ1U0Bv\nR1EK1Rh+0MLmO5C5/95rYBO9fmrTCI/SzQKAmXifGd3WL7eOziF1CHoCGEJV\nrcx6dV2Dzr7ynccD0jKJSmMeULS0+w+0U9OeEdRYnSQe/IMrzQl/8YbNhSZa\nsSJc0Bb53JO/aXeBD0uTMPcVWHS0PQzYxDR9H2caWKN0+4uX66HYvit24FWn\nqsa9UzfLPUpqNISwaR7ViX17JMCI2Si5zrYgQis97QIgLoruQMhct60Az5QS\ng4gk5GOvou25ywh8mHDJYfas2619D0VAbyyWn8/lLm4Nz2B0bJpIjHV2YBjp\n6gGno7sf04lZbV0VRa8SWVkN8KzOZcHEJc0YgUagZ5fwJcrxPcigKkE9vt8r\npAYLsOa5i3kvThSqSl7/40FlIFommz9VTichXupR+tvuaRJxwKY3MQVmeWOd\nQgtgkFWsBzacJ1orlp3sr/LyVJoM+Q/pBz9EB2vrl2SR4h5vJ85+sboBfwif\nJ6UXck1sFv0Qk3Fd0OY94v0KYMyvULcVhePr69SJfD77/qVxD/dJUGejTIl5\ngS9B\r\n=IF5y\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIBNGDdgUAPEPN1cfxg7uCHWQjdj9b+zEYiP/GihudkpLAiAiD0PXFvhwK1WD0YWCVCA5BxOj3/G5Rld4RsIfoeEtAg=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.0.0-rc.2_1541954542594_0.17227868818097813"
      },
      "_hasShrinkwrap": false
    },
    "1.0.1": {
      "name": "ava",
      "version": "1.0.1",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=6.12.3 <7 || >=8.9.4 <9 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test:flow": "flow check test/flow-types",
        "test:tap": "tap --no-cov --reporter=classic --timeout=300 --jobs=2 test/*.js test/reporters/*.js test/integration/*.js",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:flow && npm run test:typescript && nyc npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^2.0.0",
        "@ava/babel-preset-transform-test-files": "^4.0.0",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "^7.2.2",
        "@babel/generator": "^7.2.2",
        "@babel/plugin-syntax-async-generators": "^7.2.0",
        "@babel/plugin-syntax-object-rest-spread": "^7.2.0",
        "@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^3.1.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^2.0.0",
        "arrify": "^1.0.0",
        "bluebird": "^3.5.3",
        "chalk": "^2.4.1",
        "chokidar": "^2.0.4",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.0.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-truncate": "^1.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.0",
        "del": "^3.0.0",
        "dot-prop": "^4.2.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^1.0.5",
        "esm": "^3.0.84",
        "figures": "^2.0.0",
        "find-up": "^3.0.0",
        "get-port": "^4.0.0",
        "globby": "^7.1.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^2.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.1",
        "is-observable": "^1.1.0",
        "is-plain-object": "^2.0.4",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.3.0",
        "matcher": "^1.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^5.0.0",
        "ms": "^2.1.1",
        "multimatch": "^2.1.0",
        "observable-to-promise": "^0.5.0",
        "ora": "^3.0.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.1.0",
        "plur": "^3.0.1",
        "pretty-ms": "^4.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "slash": "^2.0.0",
        "source-map-support": "^0.5.9",
        "stack-utils": "^1.0.2",
        "strip-ansi": "^5.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^5.5.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.5.0"
      },
      "devDependencies": {
        "cli-table3": "^0.5.1",
        "codecov": "^3.1.0",
        "delay": "^4.1.0",
        "execa": "^1.0.0",
        "flow-bin": "^0.89.0",
        "get-stream": "^4.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^3.0.0",
        "nyc": "^13.1.0",
        "proxyquire": "^2.1.0",
        "react": "^16.6.3",
        "react-test-renderer": "^16.6.3",
        "replace-string": "^2.0.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.2.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^12.1.1",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "ts-node": "^7.0.1",
        "typescript": "^3.2.2",
        "xo": "^0.23.0",
        "zen-observable": "^0.8.11"
      },
      "typings": "index.d.ts",
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "**/*.ts",
          "test/flow-types/*"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off",
          "prefer-destructuring": "off",
          "prefer-rest-params": "off",
          "prefer-spread": "off",
          "unicorn/prefer-spread": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "783944f2a0609c654c6e0f4762f1be965448a17a",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.0.1",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "10.14.0",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-wTb9D14fytTeSOyNu+if6nzSni+MyEn9xgpJki2V5MiTbwMVtt4Svh40gCIos3k5Jqp1wXPCTZLIGKLpI965fQ==",
        "shasum": "04be9a12ba60c55cfc869350ec04520ba3c94698",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.0.1.tgz",
        "fileCount": 51,
        "unpackedSize": 260359,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcFPpnCRA9TVsSAnZWagAA0IMP/2ahJu2lx+Ol9gI1o619\njH+NNWpsjD/Sn5cTanM3pvCTV1s6h2ZHjI99wZB1bMxQDxkQZevrx6K/DdUv\n1aYcsfuFWijEYq+ULaArGTG1p+YnMQuXLeqmO0XtOH9eQ4JhIkjeXiSbnR0t\nMhH1JD+2XkBPThg5wl/5OwASA93G9JNRnZ9MZfFkDuvCsQqaeEK4ggbcOZfa\ny0wjCM7hNFqZRr+NHN5y7rsoG3a02H3PhJCnaD1zoVuGVD8abO2U48j2+w1/\nb4cCVHvZ7i+OdfbhOeu7VxFblRb/LueOERBobUU/2VAEAH8oxormzTtzk09l\nhcNAcAgaF3nX6WZKQPXOwzSimZd/Czr3Chg8ezCAH3Z1WSlW8tq2Qx7YGjJc\nlJI+QwvYfMveyvlB4LVlaFO1FQbtRRmPlAd1yxCB3peBdsmlIb0twyY+RX5D\nIh1BVwU9DFuiBKic5XX97Kr43lKxOPueh7vsmWkc1k/e3NpvFAw6lpFZIWYs\nWHl2sR7TOvAI2TsNpEnXwBkjwNRrAs/6whoKc7bGc14mI1kwAopNvX0l1QOk\nUVYtJgfehD2+DxeaXY80fPSlve2RVRY/11W93YnipOjwcdjPNfH6GcLw4bTq\n0dHVmouFocRHgQ9vY+Fh1u7XxBSjZalDJwZZ1ZZOvtNOZNcCMFh/L7anHLM6\neuTE\r\n=wf6L\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEWzIZjatx4tIWa2J8NIaxX4Ubg61Lkf0sin0YUF+UF2AiEAlRr6qPB2u16kIp1AgmIG7gfwKeeeVSPJ3VdklZfEbbI="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.0.1_1544878693193_0.9416185481758781"
      },
      "_hasShrinkwrap": false
    },
    "1.1.0": {
      "name": "ava",
      "version": "1.1.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=6.12.3 <7 || >=8.9.4 <9 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test:flow": "flow check test/flow-types",
        "test:tap": "tap --no-cov --reporter=classic --timeout=300 --jobs=2 test/*.js test/reporters/*.js test/integration/*.js",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:flow && npm run test:typescript && nyc npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^2.0.0",
        "@ava/babel-preset-transform-test-files": "^4.0.1",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "^7.2.2",
        "@babel/generator": "^7.2.2",
        "@babel/plugin-syntax-async-generators": "^7.2.0",
        "@babel/plugin-syntax-object-rest-spread": "^7.2.0",
        "@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^3.1.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^2.0.0",
        "arrify": "^1.0.0",
        "bluebird": "^3.5.3",
        "chalk": "^2.4.2",
        "chokidar": "^2.0.4",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.0.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-truncate": "^1.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^3.0.0",
        "dot-prop": "^4.2.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^1.0.5",
        "esm": "^3.0.84",
        "figures": "^2.0.0",
        "find-up": "^3.0.0",
        "get-port": "^4.1.0",
        "globby": "^7.1.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^2.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.1",
        "is-observable": "^1.1.0",
        "is-plain-object": "^2.0.4",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.3.0",
        "matcher": "^1.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^5.0.0",
        "ms": "^2.1.1",
        "multimatch": "^3.0.0",
        "observable-to-promise": "^0.5.0",
        "ora": "^3.0.0",
        "package-hash": "^2.0.0",
        "pkg-conf": "^2.1.0",
        "plur": "^3.0.1",
        "pretty-ms": "^4.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "slash": "^2.0.0",
        "source-map-support": "^0.5.10",
        "stack-utils": "^1.0.2",
        "strip-ansi": "^5.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^6.1.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.5.0"
      },
      "devDependencies": {
        "cli-table3": "^0.5.1",
        "codecov": "^3.1.0",
        "delay": "^4.1.0",
        "execa": "^1.0.0",
        "flow-bin": "^0.89.0",
        "get-stream": "^4.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^3.0.0",
        "nyc": "^13.1.0",
        "proxyquire": "^2.1.0",
        "react": "^16.7.0",
        "react-test-renderer": "^16.7.0",
        "replace-string": "^2.0.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.2.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^12.1.1",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "ts-node": "^7.0.1",
        "typescript": "^3.2.2",
        "xo": "^0.23.0",
        "zen-observable": "^0.8.11"
      },
      "typings": "index.d.ts",
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "**/*.ts",
          "test/flow-types/*"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "a28094a3e87fd8c2a5e66d261a35676a6b1d0c29",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.1.0",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "10.14.0",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-DVUsqzheRu3P0olLgZVWekAmJmO/a8bseest+vTBEGTm/lbrRdAjggzy7Vsj1+C7SCUn8GRXrmjZi1zvqaWb/A==",
        "shasum": "94364161abbaa401331ea48d349331df230745c0",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.1.0.tgz",
        "fileCount": 51,
        "unpackedSize": 260735,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcO2y3CRA9TVsSAnZWagAAvMAP/2hWW/s++m1h3755aqra\nVJI8CF8uoNKAOqp0XDqYoHP1ZiyocTQvwJcA67rpzhUq0G2trqC9heFfDd1+\n10XyhFC0vZwzWJevIETaz6Wc6eme7UdmXqcPtndNW3e9bR6P4ecrzpP1zhIh\n41f0RWxPSLp2XOdqXxnPUQ0FpdIe2A/gvEQKIwiglwFc2y6UVIL4SiQcDc2c\nzpIuD0fs8Cl/1WLGjCl8NeWrvGduG1WrWGd9l+1Gz/IyRh1farMZGAKt4S8h\nmGc7vXwavgU90dnsD7ZpYto6eofss3Dg9T7CHVUsYXVC/U6aOPv3p4oUL0ny\nIwrxwqOn8viKWAVnKpTbdSBtZFXZdHkqIm9+LFFOqsizeSFBnNUgxXabujaA\nTPmI6bnIbaoAhhIHWVEyePtwCJhOuK60HBD4NI4FDTaGLxZBdkAY0N3JK4uS\nnkjVJ5RWoJ8JP3VOLZBDY1GYKQRa4/rwe5+8/GKuxrIWs2zR2Xq+bVtjtKZ2\nmYKiSGWciVga9hWv+HymgxtOSdMiwxS06xKyZc11L7nRpR1EKdMR70Yz2SpV\nOC1NLBDSrwIkCLN9LH22/UZirAyssc+5Amv0UCCw18GzMI0CCrBkRSjvCXfV\nL29zqPDufB1Nldcfs3sYkG5NxTW2LBqfIvuBjR+BaPvogd48U6HS/qysHZXv\nIC2Y\r\n=2OWj\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIF/IDmZbDwfPHyhKgRh+s/HWBJzJ4m3Y44TLYM4B3p8/AiAzHGAx2dTO8qoZmMb2dHoHEQ5+enoMDsB8DXiF7qchJA=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.1.0_1547398326462_0.2608119192653626"
      },
      "_hasShrinkwrap": false
    },
    "1.2.0": {
      "name": "ava",
      "version": "1.2.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=6.12.3 <7 || >=8.9.4 <9 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test:flow": "flow check test/flow-types",
        "test:tap": "tap --no-cov --reporter=classic --timeout=300 --jobs=2 test/*.js test/reporters/*.js test/integration/*.js",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:flow && npm run test:typescript && nyc npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^2.0.0",
        "@ava/babel-preset-transform-test-files": "^4.0.1",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "^7.2.2",
        "@babel/generator": "^7.3.0",
        "@babel/plugin-syntax-async-generators": "^7.2.0",
        "@babel/plugin-syntax-object-rest-spread": "^7.2.0",
        "@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^3.1.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^2.0.0",
        "arrify": "^1.0.0",
        "bluebird": "^3.5.3",
        "chalk": "^2.4.2",
        "chokidar": "^2.0.4",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.0.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-truncate": "^1.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^3.0.0",
        "dot-prop": "^4.2.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^1.0.5",
        "esm": "^3.1.3",
        "figures": "^2.0.0",
        "find-up": "^3.0.0",
        "get-port": "^4.1.0",
        "globby": "^7.1.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^2.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.1",
        "is-observable": "^1.1.0",
        "is-plain-object": "^2.0.4",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.3.0",
        "matcher": "^1.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^5.0.0",
        "ms": "^2.1.1",
        "multimatch": "^3.0.0",
        "observable-to-promise": "^0.5.0",
        "ora": "^3.0.0",
        "package-hash": "^3.0.0",
        "pkg-conf": "^2.1.0",
        "plur": "^3.0.1",
        "pretty-ms": "^4.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "slash": "^2.0.0",
        "source-map-support": "^0.5.10",
        "stack-utils": "^1.0.2",
        "strip-ansi": "^5.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^6.1.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.5.0"
      },
      "devDependencies": {
        "cli-table3": "^0.5.1",
        "codecov": "^3.1.0",
        "delay": "^4.1.0",
        "execa": "^1.0.0",
        "flow-bin": "^0.91.0",
        "get-stream": "^4.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^3.0.0",
        "nyc": "^13.1.0",
        "proxyquire": "^2.1.0",
        "react": "^16.7.0",
        "react-test-renderer": "^16.7.0",
        "replace-string": "^2.0.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.2.3",
        "source-map-fixtures": "^2.1.0",
        "tap": "^12.4.0",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "ts-node": "^8.0.2",
        "typescript": "^3.2.4",
        "xo": "^0.24.0",
        "zen-observable": "^0.8.13"
      },
      "typings": "index.d.ts",
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "**/*.ts",
          "test/flow-types/*"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "010914b9e5232312d2b611695776919084a65717",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.2.0",
      "_npmVersion": "6.5.0",
      "_nodeVersion": "10.15.0",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-lLfHKB2CRTKdo6OJ2HQ92w5c7EE+Fa1q3XfVbxiCQCHsraypbwAJS9X1zKHtY7yr+uqjnJba4l+VbtU5/9I7yA==",
        "shasum": "dbd087623199f985fcf2c2a52f83c402cc9ab628",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.2.0.tgz",
        "fileCount": 51,
        "unpackedSize": 264375,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcTeItCRA9TVsSAnZWagAATtIP/2x0rYttc4pVoWVXDa8r\nY+K/PjXIkzRSv/K6mSjES+pPW2K11UG6TxvXDsgeTtjsvHf0F42QTHMcVRjE\n5Qb4r+wcjpd0LRdM3btP7yxTWdb6kzgFvqy5kDrOhfDXXh5VcdLrU+tlYCki\n+jsx1Lb1vxd1t4B/iAuNjoWo4ZmgOVygCE5L3oAtKhw5dtPgXP8lIdSMSZOq\nKMDyPEn20Ru5bIEy7/Y5doJmtzl0vSf1NA7ciatBl7dOHsX+WZG+8OewC78k\nqpbcBshWjQ35VS904B6tTJHcn1dds9hrjfSfWuQdigtY/KuB6yAcU6/GsM2b\nArv3o5DjVOxmCyU/3S/rb5RCrLXDQNnkRQxhtprF0yRbRCgKaU4z5LlryjIU\nWnFVbkSic2r+7MqOW5TEBwG4E/qzytqH1wPiJBBVJB2ncD9s1PtXt+SxapKg\nBWJIKqZ4PAgLM4oBttrN1yDM+B3jslpo/NO1LsIh1C/qPiy8W66o8RhePMlO\niZPoWCK0KYgFyq0tHKp+8A3Chk0x0LGyW0PlsjGfboP3y4ME2hMdfsSJ0m7x\npkGIckkCMl26nBEjgCkj6RaIkT4N7TQibD2HhR3T3IQT7tGASSLn2dt6QxND\nPgveTTtwnjlfjFuD99jtIm32C/vqCKkYSGsQN0pShdDNdWfPBfEhJ0ilhX4d\nrbYn\r\n=BOjy\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIAdVZzUnOhNHAusQLCMoAo+jtPRPbqCPmfHkLYXPPL2RAiAazCw2qU6uc3y5sS5I7BepmU4dUI0thdBCgCQ2eYwzRQ=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.2.0_1548608045171_0.2673774687967738"
      },
      "_hasShrinkwrap": false
    },
    "1.2.1": {
      "name": "ava",
      "version": "1.2.1",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=6.12.3 <7 || >=8.9.4 <9 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test:flow": "flow check test/flow-types",
        "test:tap": "tap --no-cov --reporter=classic --timeout=300 --jobs=2 test/*.js test/reporters/*.js test/integration/*.js",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:flow && npm run test:typescript && nyc npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^2.0.0",
        "@ava/babel-preset-transform-test-files": "^4.0.1",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "^7.2.2",
        "@babel/generator": "^7.3.0",
        "@babel/plugin-syntax-async-generators": "^7.2.0",
        "@babel/plugin-syntax-object-rest-spread": "^7.2.0",
        "@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^3.1.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^2.0.0",
        "arrify": "^1.0.0",
        "bluebird": "^3.5.3",
        "chalk": "^2.4.2",
        "chokidar": "^2.0.4",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.0.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-truncate": "^1.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^3.0.0",
        "dot-prop": "^4.2.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^1.0.5",
        "esm": "^3.1.3",
        "figures": "^2.0.0",
        "find-up": "^3.0.0",
        "get-port": "^4.1.0",
        "globby": "^7.1.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^2.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.1",
        "is-observable": "^1.1.0",
        "is-plain-object": "^2.0.4",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^1.3.0",
        "matcher": "^1.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^5.0.0",
        "ms": "^2.1.1",
        "multimatch": "^3.0.0",
        "observable-to-promise": "^0.5.0",
        "ora": "^3.0.0",
        "package-hash": "^3.0.0",
        "pkg-conf": "^2.1.0",
        "plur": "^3.0.1",
        "pretty-ms": "^4.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "slash": "^2.0.0",
        "source-map-support": "^0.5.10",
        "stack-utils": "^1.0.2",
        "strip-ansi": "^5.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^6.1.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.5.0"
      },
      "devDependencies": {
        "cli-table3": "^0.5.1",
        "codecov": "^3.1.0",
        "delay": "^4.1.0",
        "execa": "^1.0.0",
        "flow-bin": "^0.91.0",
        "get-stream": "^4.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^3.0.0",
        "nyc": "^13.1.0",
        "proxyquire": "^2.1.0",
        "react": "^16.7.0",
        "react-test-renderer": "^16.7.0",
        "replace-string": "^2.0.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.2.3",
        "source-map-fixtures": "^2.1.0",
        "tap": "^12.4.0",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "ts-node": "^8.0.2",
        "typescript": "^3.2.4",
        "xo": "^0.24.0",
        "zen-observable": "^0.8.13"
      },
      "typings": "index.d.ts",
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "**/*.ts",
          "test/flow-types/*"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "65133a85ecbc881f9610df78feffd498474bcc8c",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.2.1",
      "_npmVersion": "6.5.0",
      "_nodeVersion": "10.15.0",
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "dist": {
        "integrity": "sha512-EHqbPGdd8aNvlvRNL7liD1J9Auf9kByHj5Zi7zF7Z5ukn2ZStZgVBf7LSqirKIOWScB3XZzFQbO59SnTvzD5kA==",
        "shasum": "c9b55fda5663fbfad88df37d5cdac56f29347c1b",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.2.1.tgz",
        "fileCount": 51,
        "unpackedSize": 264972,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcWU+xCRA9TVsSAnZWagAAr/4P/jv29hJ9jtv9UmeZqU7V\nohlmb0IZ3z4DkmHbVkoBIju2+CM3sZOnLhhi0pgsnxRZas2Phem1WLT8R1hv\nonZeH7vXo3uzZLi3clyrl7HyeNYQzJH/KLHNXee9lSokmUoKRRR5EO8j3VuF\nftmqHlNvT6SzWPyw1euwsrgBuagFOqhw6SqookNIxEElmXQllNzyn4tBBk+W\nh/nbnFd0s5HyYYaI0KqFq5YI1W4Am0OD3tP1Y9r4DjkCmLSOU1s/znsWG/EB\nt6KsSBYLYMT+KBU0ubVSuR4wUoiHAudh7x7NdIe9jHJ+9R7bu2gaLJFE2Kw9\nfyE0xpeHlrU87mojyyQNazIMCqazjQBxLilvWU5VkdlWD+j5BUoXCaTPtx58\nNu/d5C5IR8EJLE2bNO0Dywm3I8U8NrzBeRkNcBTLk+/1e2j2EBaQJhEN1Usz\nsbvjvpC5SDHJspF34BKrXaa6rRvamD9ZoFWrBXozyRJin4oEUa67Fl3jX1oS\n4ZLJq8BEypLKarGBj4BVkc3xkfBpDKt776+onujX7GoKDyEFUyFTZOcMQvD1\ntUPRjstlhQiXalqZ8KtVJdIRbrOwsNXTTpgvi0qmBQsoc8WqhgLphPXBzTan\nQfJSIm4ciFazoZO0bT4yLY3ewBC2vKWhUmWXFlAODz+9wSZ0ZimV64oaCf1w\necye\r\n=z1Xr\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEuLNaNv8sI+j4CwkEWw4OAfZ7kZzh0ZaZAWrScIqpkUAiEA9m14MJmno42xeCT+g8bbCluFpfOufEjqTphaBD3aAck="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.2.1_1549356976546_0.4769119523338159"
      },
      "_hasShrinkwrap": false
    },
    "1.3.0": {
      "name": "ava",
      "version": "1.3.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=6.12.3 <7 || >=8.9.4 <9 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test:flow": "flow check test/flow-types",
        "test:tap": "tap --no-cov --reporter=classic --timeout=300 --jobs=2 test/*.js test/reporters/*.js test/integration/*.js",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:flow && npm run test:typescript && nyc npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^2.0.0",
        "@ava/babel-preset-transform-test-files": "^4.0.1",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "^7.3.4",
        "@babel/generator": "^7.3.4",
        "@babel/plugin-syntax-async-generators": "^7.2.0",
        "@babel/plugin-syntax-object-rest-spread": "^7.2.0",
        "@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^3.2.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^2.0.0",
        "arrify": "^1.0.0",
        "bluebird": "^3.5.3",
        "chalk": "^2.4.2",
        "chokidar": "^2.1.2",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.0.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-truncate": "^1.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^4.0.0",
        "dot-prop": "^4.2.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^1.0.5",
        "esm": "^3.2.10",
        "figures": "^2.0.0",
        "find-up": "^3.0.0",
        "get-port": "^4.2.0",
        "globby": "^7.1.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^2.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.1",
        "is-observable": "^1.1.0",
        "is-plain-object": "^2.0.4",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^2.1.0",
        "matcher": "^1.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^5.0.0",
        "ms": "^2.1.1",
        "multimatch": "^3.0.0",
        "observable-to-promise": "^0.5.0",
        "ora": "^3.2.0",
        "package-hash": "^3.0.0",
        "pkg-conf": "^3.0.0",
        "plur": "^3.0.1",
        "pretty-ms": "^4.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "slash": "^2.0.0",
        "source-map-support": "^0.5.10",
        "stack-utils": "^1.0.2",
        "strip-ansi": "^5.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^6.1.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.5.0"
      },
      "devDependencies": {
        "cli-table3": "^0.5.1",
        "codecov": "^3.2.0",
        "delay": "^4.1.0",
        "execa": "^1.0.0",
        "flow-bin": "^0.94.0",
        "get-stream": "^4.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^3.1.0",
        "nyc": "^13.3.0",
        "proxyquire": "^2.1.0",
        "react": "^16.8.3",
        "react-test-renderer": "^16.8.3",
        "replace-string": "^2.0.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.2.7",
        "source-map-fixtures": "^2.1.0",
        "tap": "~12.4.1",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "ts-node": "^8.0.2",
        "typescript": "^3.3.3333",
        "xo": "^0.24.0",
        "zen-observable": "^0.8.13"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts",
          "test/flow-types/*"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "b0fadb47fb7d70f60264fe27d38cd7fd5652e741",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.3.0",
      "_nodeVersion": "10.15.0",
      "_npmVersion": "6.8.0",
      "dist": {
        "integrity": "sha512-5M1qguGEeguvwtvSgUo/G0YN3cL9wbMpLotygF9lqDqfPkcpCY8NikSlP2kORrwEExEUxU7B4lLx2PhOQDTC4g==",
        "shasum": "935b4c51386321be421a3dcc2db7fdadbaaf4990",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.3.0.tgz",
        "fileCount": 51,
        "unpackedSize": 265228,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcfqEJCRA9TVsSAnZWagAABJEQAJOfA4DaB6zh8qsn+GcC\nnvtKVOvk1MFvC/0d8Aa+o/GaqGLThkS+OqZBri3kTE5oc/j0bXQvrxtiy/dv\neWYiShsC6F/BOt40cuNdxqBrF2owpulFlNgPLQTIlY0PXZ94JSjKHVwYan/T\nI/rMfFtdYPEidJ6HmO2zYc9aEyDGVO1VIR4x7ovH1b60K12TRqCsZauUr30T\ndfju5ugLbwVcgrDHHRAi1Ro8kkrMfNfoI32A3zobk4z25mOcCreOxpYFa97U\nVivLBLHjF0AHAI/aP5aSJrG4PI/CBDUJ/qxKPiIAy9T5kfROhWgPMDBVQHof\nJyykLFB/l7LvZsFkjsCs0BjpUaoDe7BpPPp3oHGy60EDZAoPu1VNVeeJvPlR\nKoJROo/C+j+E8Me1T4xvZSdYmXXpeVw98Wkl0d6bBGoUkkQOnKnavBdvAM5S\nBdlXHDiUvOcLHeF1CWAQM4kKlqmezEXFuCw2nOiz+cnp7MwqREYH26gbqxES\nW57EcVURX3z5EE37HKgbiMAG1gh4TxhofsBvTTWgCJFyhZ0eGtutdyBkFsFm\nzKWJSrI0YKBHgdmPO/NqvRdXTK0kkxZvwJTEM/NDPcKe8RUfIDQh7gSMemTu\nyBOGeiG4YWM5k/OI3PzKIbksWL3CWqFaw4DiExCX2c+Pl2qRSKeRA/zqC+j3\neNO6\r\n=bhtL\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICOuuiEBP1oJoGdVHiut3Qc/+iQzkFy/KMyG9ZQDqLh4AiBF8IrJIAg+c4RtCrgFxUIs1roS5f6N8du1/FIHrzrypA=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.3.0_1551802632239_0.9326201925599289"
      },
      "_hasShrinkwrap": false
    },
    "1.3.1": {
      "name": "ava",
      "version": "1.3.1",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=6.12.3 <7 || >=8.9.4 <9 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test:flow": "flow check test/flow-types",
        "test:tap": "tap --no-cov --reporter=classic --timeout=300 --jobs=2 test/*.js test/reporters/*.js test/integration/*.js",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:flow && npm run test:typescript && nyc npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^2.0.0",
        "@ava/babel-preset-transform-test-files": "^4.0.1",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "^7.3.4",
        "@babel/generator": "^7.3.4",
        "@babel/plugin-syntax-async-generators": "^7.2.0",
        "@babel/plugin-syntax-object-rest-spread": "^7.2.0",
        "@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^3.2.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^2.0.0",
        "arrify": "^1.0.0",
        "bluebird": "^3.5.3",
        "chalk": "^2.4.2",
        "chokidar": "^2.1.2",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.0.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-truncate": "^1.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^4.0.0",
        "dot-prop": "^4.2.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^1.0.5",
        "esm": "^3.2.10",
        "figures": "^2.0.0",
        "find-up": "^3.0.0",
        "get-port": "^4.2.0",
        "globby": "^7.1.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^2.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.1",
        "is-observable": "^1.1.0",
        "is-plain-object": "^2.0.4",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^2.1.0",
        "matcher": "^1.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^5.0.0",
        "ms": "^2.1.1",
        "multimatch": "^3.0.0",
        "observable-to-promise": "^0.5.0",
        "ora": "^3.2.0",
        "package-hash": "^3.0.0",
        "pkg-conf": "^3.0.0",
        "plur": "^3.0.1",
        "pretty-ms": "^4.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "slash": "^2.0.0",
        "source-map-support": "^0.5.10",
        "stack-utils": "^1.0.2",
        "strip-ansi": "^5.0.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^6.1.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.5.0"
      },
      "devDependencies": {
        "cli-table3": "^0.5.1",
        "codecov": "^3.2.0",
        "delay": "^4.1.0",
        "execa": "^1.0.0",
        "flow-bin": "^0.94.0",
        "get-stream": "^4.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^3.1.0",
        "nyc": "^13.3.0",
        "proxyquire": "^2.1.0",
        "react": "^16.8.3",
        "react-test-renderer": "^16.8.3",
        "replace-string": "^2.0.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.2.7",
        "source-map-fixtures": "^2.1.0",
        "tap": "~12.4.1",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "ts-node": "^8.0.2",
        "typescript": "^3.3.3333",
        "xo": "^0.24.0",
        "zen-observable": "^0.8.13"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts",
          "test/flow-types/*"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "960f4cd27097a07ecce5b9028f6c0cf321100158",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.3.1",
      "_nodeVersion": "10.15.0",
      "_npmVersion": "6.8.0",
      "dist": {
        "integrity": "sha512-peXne6s798phYkbsf09tJXBT2ahWtc1V12TnvxUkBwVNay8GFwYzd6vgnklV9YNP4YHnHj5av8op4SZd4hJ4Xw==",
        "shasum": "264111acc1745f665cc0615610f42a36d1089703",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.3.1.tgz",
        "fileCount": 51,
        "unpackedSize": 265272,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcfqVWCRA9TVsSAnZWagAAwLAP/jTwBL4Co3eHprDCyk7O\njETkI2vSQHM32zyBVlhaukgz++R6O6LzPjxe6Q91DOvc0DKloN3sNbelyg4t\nqOJFVMMiuLQPSGWgCGzB8Yexj7OvUEiKJzNWlLQHTU/SyKIjC9IceizWDNpF\nG+Uisv8azf031HrGRrmHXffL/v1hYl6c2Wanqn1kUtBZtWgcug2GOuHXQtKb\n5Hecad+yDndgydWdgnskDUV6F9h28cRB1hUxBjWzYS304gDM5/lEU2wBmSM9\nbuIpz+zGDZ+nSYGrk13qoVJYlYlLoW02ATo9mUDpydip3rvm6jYr26tP6wfu\nFPFZXJHGLC8Ln6ekSYTqH8dzwn9201A/jkFRK8SLNmWZAlxx5CnSFzmQ9XIn\n0NY5dO5cQ2ottZSmXx380CmiOOfxfY+u04O3/Mb7ibulAMbO/p+6QHWjLQcF\nknLqQNNoMubfjCUOCc26s0lCHHfPPtkcveVAvJ85gIM8K2QVE4O6vCnR7Brm\nHrOQpJuQ+gPuxjHCHYo6qlRSW6spoS8j9dhQpT5tE75I7eZkgwfaHPYEGiio\neZeA4qzuvbu3ybzqgZLRhZbuo9WYz+9m8M0RziMOp09W1VAOhY0JvX0U9b6j\nLXP6lBXSsjX/m5leMYjc3hSjVTZYT+iWr8GhHPi1THkPK51MpcMXQGAWuwBc\ncPkZ\r\n=SU5A\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCokJUDMkOOjyApZFh1grkS6stcp2XO5m7LWGpuyqxeqQIhAOP9CJy93xVy1g0utSG13+VG4zFhX/ksE4bis87aAhN6"
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.3.1_1551803733591_0.9201502759145841"
      },
      "_hasShrinkwrap": false
    },
    "1.4.0": {
      "name": "ava",
      "version": "1.4.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=6.12.3 <7 || >=8.9.4 <9 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test:flow": "flow check test/flow-types",
        "test:tap": "tap --no-esm --no-cov --reporter=classic --timeout=300 --jobs=2 test/*.js test/reporters/*.js test/integration/*.js",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:flow && npm run test:typescript && nyc npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^2.0.0",
        "@ava/babel-preset-transform-test-files": "^5.0.0",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "^7.4.0",
        "@babel/generator": "^7.4.0",
        "@babel/plugin-syntax-async-generators": "^7.2.0",
        "@babel/plugin-syntax-object-rest-spread": "^7.2.0",
        "@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^3.2.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^2.0.0",
        "arrify": "^1.0.0",
        "bluebird": "^3.5.3",
        "chalk": "^2.4.2",
        "chokidar": "^2.1.5",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.0.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-truncate": "^1.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^4.0.0",
        "dot-prop": "^4.2.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^1.0.5",
        "esm": "^3.2.20",
        "figures": "^2.0.0",
        "find-up": "^3.0.0",
        "get-port": "^4.2.0",
        "globby": "^7.1.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^2.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.1",
        "is-observable": "^1.1.0",
        "is-plain-object": "^2.0.4",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^2.1.0",
        "matcher": "^1.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^5.0.0",
        "ms": "^2.1.1",
        "multimatch": "^3.0.0",
        "observable-to-promise": "^0.5.0",
        "ora": "^3.2.0",
        "package-hash": "^3.0.0",
        "pkg-conf": "^3.0.0",
        "plur": "^3.0.1",
        "pretty-ms": "^4.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "slash": "^2.0.0",
        "source-map-support": "^0.5.11",
        "stack-utils": "^1.0.2",
        "strip-ansi": "^5.2.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^6.1.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.5.0"
      },
      "devDependencies": {
        "cli-table3": "^0.5.1",
        "codecov": "^3.2.0",
        "delay": "^4.1.0",
        "execa": "^1.0.0",
        "flow-bin": "^0.95.1",
        "get-stream": "^4.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^3.1.0",
        "nyc": "^13.3.0",
        "proxyquire": "^2.1.0",
        "react": "^16.8.5",
        "react-test-renderer": "^16.8.5",
        "replace-string": "^2.0.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.3.0",
        "source-map-fixtures": "^2.1.0",
        "tap": "^12.6.1",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "ts-node": "^8.0.3",
        "typescript": "^3.3.4000",
        "xo": "^0.24.0",
        "zen-observable": "^0.8.13"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts",
          "test/flow-types/*"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "20db474961ae1eec0ebf52861d47082d9517cf14",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.4.0",
      "_nodeVersion": "10.15.3",
      "_npmVersion": "6.9.0",
      "dist": {
        "integrity": "sha512-0k0YzgIhRWPibh4guIe1XdmJw985EQ86haALTosN8fRWEUDjWe3h2f7brTYfS7OsvKrHalO2p5AhaMwIFGY5/A==",
        "shasum": "acd5149bdf7eadfcc9fb82fb33d2e658d1303ae0",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.4.0.tgz",
        "fileCount": 51,
        "unpackedSize": 266364,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcl7LZCRA9TVsSAnZWagAAHlsQAKFNMlqPUHb4kqKvevj2\nRoII8Y5/1CDcyL68WBuVG0qx2Hly88bH4sbqekRzfdxWJGfztee13+F4KcpM\n0THlYCVXSrQIt5LtOKqK6oLDGC9lD5gdI8lFK079rLBo9+IFU8IsvVbWb3Gg\npskg5ZlN5EvGy1modFxHHlWvBNGjqpTCuUSrUunLaTgvsMsq5ACi1XxRKaWt\n5AyP2KlyFDf2iBfu9hKLi+gV6eWysR+XXfnTydnDo5om4k8FR2Vgl+z5mNC/\nB7iBMaTIoxi6bpibtTu/YLH58G+YMh9/1523t7PMKgvut0Ma8chQDoA3HnZ+\n2kg/RrzjGy11ZcWe4r9hkbpTpOa5My2DT+2rEh5N1QPR8iUvZjl02kuR3EBt\niSgcAAv7y1Lk2BXt8l0+gfiHwjF34fcnQHhIEZxUyxOAj+DmMqqTh9c906hV\nxn1WlcgEQyQU5vjmoVvEA/SzPKxwq3r+WG4etA4B2Nd5kKe7ksV3qvez27o2\nFxPreVrLgOgj7/ozWmIc3sSsG2x2s9qsOmVVjo6A4eXM/1jRUVUzKo8PXwTj\nPimpOBMH+LfWNffjvv5wZN3exv+ntSeqTfQ4RrDXDRyrEeO4Bb/R9iHgqnFD\nFAcw7cgy8vRc/7GmIk/+GwCCPXJcIXnLuK3Rde7VmNGqOxI4zgAu+BADpOfA\nVpdB\r\n=Uiou\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAPjyMIcCZ8ZhZu0668cYoyBgmQce5g7YKCEFelYMvfyAiEAvDyPA6gM55hJO2es45CC0iYLiGr/pu6SvywP4gmVb30="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.4.0_1553445593072_0.1902995167762449"
      },
      "_hasShrinkwrap": false
    },
    "1.4.1": {
      "name": "ava",
      "version": "1.4.1",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=6.12.3 <7 || >=8.9.4 <9 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test:flow": "flow check test/flow-types",
        "test:tap": "tap --no-esm --no-cov --reporter=classic --timeout=300 --jobs=2 test/*.js test/reporters/*.js test/integration/*.js",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:flow && npm run test:typescript && nyc npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript",
        "flow"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^2.0.0",
        "@ava/babel-preset-transform-test-files": "^5.0.0",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "^7.4.0",
        "@babel/generator": "^7.4.0",
        "@babel/plugin-syntax-async-generators": "^7.2.0",
        "@babel/plugin-syntax-object-rest-spread": "^7.2.0",
        "@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^3.2.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^1.0.1",
        "array-uniq": "^2.0.0",
        "arrify": "^1.0.0",
        "bluebird": "^3.5.3",
        "chalk": "^2.4.2",
        "chokidar": "^2.1.5",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.0.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^2.1.0",
        "cli-truncate": "^1.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^4.0.0",
        "dot-prop": "^4.2.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^1.0.5",
        "esm": "^3.2.20",
        "figures": "^2.0.0",
        "find-up": "^3.0.0",
        "get-port": "^4.2.0",
        "globby": "^7.1.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^2.0.0",
        "indent-string": "^3.2.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.1",
        "is-observable": "^1.1.0",
        "is-plain-object": "^2.0.4",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^1.2.0",
        "make-dir": "^2.1.0",
        "matcher": "^1.1.1",
        "md5-hex": "^2.0.0",
        "meow": "^5.0.0",
        "ms": "^2.1.1",
        "multimatch": "^3.0.0",
        "observable-to-promise": "^0.5.0",
        "ora": "^3.2.0",
        "package-hash": "^3.0.0",
        "pkg-conf": "^3.0.0",
        "plur": "^3.0.1",
        "pretty-ms": "^4.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "slash": "^2.0.0",
        "source-map-support": "^0.5.11",
        "stack-utils": "^1.0.2",
        "strip-ansi": "^5.2.0",
        "strip-bom-buf": "^1.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^6.1.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.5.0"
      },
      "devDependencies": {
        "cli-table3": "^0.5.1",
        "codecov": "^3.2.0",
        "delay": "^4.1.0",
        "execa": "^1.0.0",
        "flow-bin": "^0.95.1",
        "get-stream": "^4.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^3.1.0",
        "nyc": "^13.3.0",
        "proxyquire": "^2.1.0",
        "react": "^16.8.5",
        "react-test-renderer": "^16.8.5",
        "replace-string": "^2.0.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.3.0",
        "source-map-fixtures": "^2.1.0",
        "tap": "^12.6.1",
        "temp-write": "^3.4.0",
        "touch": "^3.1.0",
        "ts-node": "^8.0.3",
        "typescript": "^3.3.4000",
        "xo": "^0.24.0",
        "zen-observable": "^0.8.13"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts",
          "test/flow-types/*"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        }
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "9ef456bf1a07d35c02906b663af9fe41bb7d1fb9",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@1.4.1",
      "_nodeVersion": "10.15.3",
      "_npmVersion": "6.9.0",
      "dist": {
        "integrity": "sha512-wKpgOPTL7hJSBWpfbU4SA8rlsTZrph9g9g7qYDV7M6uK1rKeW8oCUJWRwCd8B24S4N0Y5myf6cTEnA66WIk0sA==",
        "shasum": "4a59289e0c9728e492ec3a5be21d1072636be172",
        "tarball": "https://registry.npmjs.org/ava/-/ava-1.4.1.tgz",
        "fileCount": 51,
        "unpackedSize": 267222,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcm129CRA9TVsSAnZWagAADZIP+wZJRzcao4sBcsslZZhy\nQZRqP9E7JAi85ElqxgMHsdGTqJtTud7YGUJI6uHBV69kRUAfTfmVHQmcJi5/\np1rPKaG+BGRvrQUtaQWsuaT+r/WWOmPquK9Z5afVyGYl+hBl1j7Cb5xKqTmv\n5pPdaEcahO5TO3I85vrVdAZH6o/6DqCOvtKotgRrFN1N28pS5RHhfLKbeRzo\nF6EC5xJ9oqvfjp47zcwAjunGkt0hxU/EwSRnCj1snws6Ptx2ECA1fmej5kNT\n1OCqrnnGRPaWsG3c1sg7cU9eMJrwPbdhxqd3Gr+koPAGkeBRExQP+RztA/Ez\nLF3gn0rneC1V8vEBaDK1zNoqZASzVlKDw2S7sLqDc/IhGZmjyBRez2ChaDjb\niWQTSVQUa+rh+w4OQ3XD2N0o4RSi0QDrV8MLggZq9eKhvS0K3QPRXHOnMH7o\nlWTKHwWCKfQ1yLGbqqtQeX6dUqEPI2+Ux4fJGw0wyO2e8WWpFc+SAUffDp3G\n79IP0bsV9xupL7GXzQHGJRcOw4c0E9qWvAPaqRRY79IOHIlejTUvdjezb4Q+\n6AZ8OoKsm2TL2sF+Ua59YQCTLj+TqWnB11+sTJWfFPN3Wl7SVjop9Ow/AOin\nGEVGKD983dUY8DKGtamh8zlg/jYTATBm2c01nqsEUf/2tPuiu0FlR0AhLQBQ\nYpEo\r\n=4qew\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFc0sm0QwbWlxqGcwZBVh4E7/ZBoWO03EVvCT2e8dGaIAiB4T9fPlUQAAWmG0EOF5IDScuo71f5gk/oB2QO7ono12Q=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_1.4.1_1553685948627_0.5444600784934273"
      },
      "_hasShrinkwrap": false
    },
    "2.0.0-beta.1": {
      "name": "ava",
      "version": "2.0.0-beta.1",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://ava.li",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=8.9.4 <9 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test:tap": "tap --no-esm --no-cov --reporter=classic --timeout=300 --jobs=2 test/*.js test/reporters/*.js test/integration/*.js",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:typescript && nyc npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^3.0.0",
        "@ava/babel-preset-transform-test-files": "^5.0.0",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "^7.4.4",
        "@babel/generator": "^7.4.4",
        "@babel/plugin-syntax-async-generators": "^7.2.0",
        "@babel/plugin-syntax-object-rest-spread": "^7.2.0",
        "@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^4.1.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^2.1.0",
        "array-uniq": "^2.1.0",
        "arrify": "^2.0.1",
        "bluebird": "^3.5.4",
        "chalk": "^2.4.2",
        "chokidar": "^2.1.5",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.1.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.0.0",
        "cli-truncate": "^1.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^4.1.1",
        "dot-prop": "^5.0.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^2.0.0",
        "esm": "^3.2.20",
        "figures": "^3.0.0",
        "find-up": "^3.0.0",
        "get-port": "^5.0.0",
        "globby": "^9.2.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^2.0.0",
        "indent-string": "^4.0.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.2",
        "is-observable": "^1.1.0",
        "is-plain-object": "^2.0.4",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^2.1.0",
        "make-dir": "^3.0.0",
        "matcher": "^2.0.0",
        "md5-hex": "^2.0.0",
        "meow": "^5.0.0",
        "micromatch": "^4.0.2",
        "ms": "^2.1.1",
        "observable-to-promise": "^0.5.0",
        "ora": "^3.4.0",
        "package-hash": "^4.0.0",
        "pkg-conf": "^3.1.0",
        "plur": "^3.1.1",
        "pretty-ms": "^5.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^2.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.12",
        "stack-utils": "^1.0.2",
        "strip-ansi": "^5.2.0",
        "strip-bom-buf": "^2.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^6.1.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^2.5.0"
      },
      "devDependencies": {
        "cli-table3": "^0.5.1",
        "codecov": "^3.3.0",
        "delay": "^4.2.0",
        "execa": "^1.0.0",
        "get-stream": "^5.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^4.0.1",
        "nyc": "^13.3.0",
        "proxyquire": "^2.1.0",
        "react": "^16.8.6",
        "react-test-renderer": "^16.8.6",
        "replace-string": "^3.0.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.3.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^12.6.1",
        "temp-write": "^4.0.0",
        "touch": "^3.1.0",
        "ts-node": "^8.1.0",
        "typescript": "^3.4.5",
        "xo": "^0.24.0",
        "zen-observable": "^0.8.14"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts",
          "test/flow-types/*"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        },
        "overrides": [
          {
            "files": "test/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          }
        ]
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "readme": "# [![AVA](media/header.png)](https://ava.li)\n\n[![Build Status](https://travis-ci.org/avajs/ava.svg?branch=master)](https://travis-ci.org/avajs/ava)  [![Coverage Status](https://codecov.io/gh/avajs/ava/branch/master/graph/badge.svg)](https://codecov.io/gh/avajs/ava/branch/master) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo) [![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/ava)\n[![Mentioned in Awesome Node.js](https://awesome.re/mentioned-badge.svg)](https://github.com/sindresorhus/awesome-nodejs)\n\nTesting can be a drag. AVA helps you get it done. AVA is a test runner for Node.js with a concise API, detailed error output, embrace of new language features and process isolation that let you write tests more effectively. So you can ship more awesome code. 🚀\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\nRead our [contributing guide](contributing.md) if you're looking to contribute (issues / PRs / etc).\n\n![](media/mini-reporter.gif)\n\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript & Flow type definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](./docs/01-writing-tests.md#process-isolation)\n- [Write your tests using the latest JavaScript syntax](#latest-javascript-support)\n- [Promise support](./docs/01-writing-tests.md#promise-support)\n- [Async function support](./docs/01-writing-tests.md#async-function-support)\n- [Observable support](./docs/01-writing-tests.md#observable-support)\n- [Enhanced assertion messages](./docs/03-assertions.md#enhanced-assertion-messages)\n- [Automatic parallel test runs in CI](#parallel-runs-in-ci)\n- [TAP reporter](./docs/05-command-line.md#tap-reporter)\n\n\n## Usage\n\nTo install and set up AVA, run:\n\n```console\nnpm init ava\n```\n\nYour `package.json` will then look like this (exact version notwithstanding):\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"^1.0.0\"\n\t}\n}\n```\n\nOr if you prefer using Yarn:\n\n```console\nyarn add ava --dev\n```\n\nAlternatively you can install `ava` manually:\n\n```console\nnpm install --save-dev ava\n```\n\nDon't forget to configure the `test` script in your `package.json` as per above.\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nimport test from 'ava';\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\tt.is(await bar, 'bar');\n});\n```\n\n### Running your tests\n\n```console\nnpm test\n```\n\nOr with `npx`:\n\n```console\nnpx ava\n```\n\nRun with the `--watch` flag to enable AVA's [watch mode](docs/recipes/watch-mode.md):\n\n```console\nnpx ava --watch\n```\n\n## Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## Highlights\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n### Latest JavaScript support\n\nAVA uses [Babel 7](https://babeljs.io) so you can use the latest JavaScript syntax in your tests. There is no extra setup required. You don't need to be using Babel in your own project for this to work either.\n\nWe aim support all [finished syntax proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md), as well as all syntax from ratified JavaScript versions (e.g. ES2017). See our [`@ava/stage-4`](https://github.com/avajs/babel-preset-stage-4) preset for the currently supported proposals.\n\nPlease note that we do not add or modify built-ins. For example, if you use [`Object.fromEntries()`](https://github.com/tc39/proposal-object-from-entries) in your tests, they will crash in Node.js 10 which does not implement this method.\n\nYou can disable this syntax support, or otherwise customize AVA's Babel pipeline. See our [Babel recipe] for more details.\n\n### Parallel runs in CI\n\nAVA automatically detects whether your CI environment supports parallel builds. Each build will run a subset of all test files, while still making sure all tests get executed. See the [`ci-parallel-vars`](https://www.npmjs.com/package/ci-parallel-vars) package for a list of supported CI environments.\n\n## Documentation\n\nPlease see the [files in the `docs` directory](./docs):\n\n* [Writing tests](./docs/01-writing-tests.md)\n* [Execution context](./docs/02-execution-context.md)\n* [Assertions](./docs/03-assertions.md)\n* [Snapshot testing](./docs/04-snapshot-testing.md)\n* [Command line (CLI)](./docs/05-command-line.md)\n* [Configuration](./docs/06-configuration.md)\n* [Test timeouts](./docs/07-test-timeouts.md)\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/08-common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n### Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Flow](docs/recipes/flow.md)\n- [Configuring Babel][Babel recipe]\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [JSPM and SystemJS](docs/recipes/jspm-systemjs.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n- [Testing web apps using Puppeteer](docs/recipes/puppeteer.md)\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [`/ˈeɪvə/`](media/pronunciation.m4a?raw=true): Ay (f**a**ce, m**a**de) V (**v**ie, ha**v**e) A (comm**a**, **a**go)\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Support\n\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/ava)\n- [Spectrum](https://spectrum.chat/ava)\n- [Twitter](https://twitter.com/ava__js)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) - Lint rules for AVA tests\n- [sublime-ava](https://github.com/avajs/sublime-ava) - Snippets for AVA tests\n- [atom-ava](https://github.com/avajs/atom-ava) - Snippets for AVA tests\n- [vscode-ava](https://github.com/samverschueren/vscode-ava) - Snippets for AVA tests\n- [gulp-ava](https://github.com/avajs/gulp-ava) - Run tests with gulp\n- [grunt-ava](https://github.com/avajs/grunt-ava) - Run tests with grunt\n- [More…](https://github.com/avajs/awesome-ava#packages)\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [AVA Casts](http://avacasts.com)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus) | [![Vadim Demedes](https://github.com/vadimdemedes.png?size=100)](https://github.com/vadimdemedes)\n---|---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](http://sindresorhus.com) | [Vadim Demedes](https://github.com/vadimdemedes)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://ava.li\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n\n[Babel recipe]: docs/recipes/babel.md\n",
      "readmeFilename": "readme.md",
      "gitHead": "e60c54e330fadd48f872fc947f1fb6b834ba6d31",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@2.0.0-beta.1",
      "_nodeVersion": "10.15.3",
      "_npmVersion": "6.9.0",
      "dist": {
        "integrity": "sha512-41hnyjNz6PEWRndDOYjuePrAz5JjlqvMOU+Tvk14PdJ0LzYSNowow6UdoRLDhjxcxB0sEqkX0I2PQTBDAHlCTw==",
        "shasum": "1890cccd5189166039f50691ffb37efdd6d63c43",
        "tarball": "https://registry.npmjs.org/ava/-/ava-2.0.0-beta.1.tgz",
        "fileCount": 49,
        "unpackedSize": 232701,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcxvmsCRA9TVsSAnZWagAArq4P/0ooIyPtFlDqZJtZbEE/\nUL3iI0OxFFQapAjOakWd0oMVmVn3jY4Cjzjp/PosCA/CfouI0lWyhpKEQgZt\npg2xOkdiBQumSxzCFkpJ9R+9dAgxXbN9jlmgPcu/Bi6j+/6ZRxD8ACCMjeAd\n4lZUNaJU56yZM4BxNrwHg1yzFMFSiXMuoVVQa3Y6QPreON+/EN/DWWQ0CkKa\nZiFNI/kSp/ubdac9SXAeWlK2t7Nu7fyRFUYR66/KcooPXsNh6ukzc1wKr8G2\nxSoyZz4lm3gTx2IdFnkNzr9OOxtZASLKh5qK0SZbWbvtoe45HY7UE93TzSqT\nJ+m/sB/Uahe2xLKO79hlUaf+x3oCO0KMBAjQiWHN8qcxmQZ0BX2WT67s1j7c\nhs1oV7NS5JUQqo1E3KYCWP6T4i0VUnJOsm1NtzN9uY/09LX3ykz3wHfZdSf6\nCbENNg6Xxsrdl40nXudI9R01W12x35O/PJDBXF4gbEpqDAivAtt68ex2unVh\nn7tDB6a9gQMDOpMKP7XXENNgmoISHGZM1VN1ndNn20t1opDTRByLa8zCvIA+\n/BLX3pt/+jsXfhiupu0H/sVJ9rVY8yFnFNUzy1n9oJslp/2/gV6p8gcU2hIq\nxHX6v6B2GEu/0ir6EroplpPK5NYZqTVn0rjBDECEbfdySfFYUEPnCZ/El3z9\nL83+\r\n=yKA8\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIC7LQNwJH8tKpRgbLVBpiKgR2/GvLQuOJ0NKWb1Zh8ZkAiEA2yHJ3gLDeinKk6jyCrL1paNcGjeVIwb6gEP+AM+u+hM="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_2.0.0-beta.1_1556543915406_0.7316012922557489"
      },
      "_hasShrinkwrap": false
    },
    "2.0.0-beta.2": {
      "name": "ava",
      "version": "2.0.0-beta.2",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=8.9.4 <9 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test:tap": "tap --no-esm --no-cov --reporter=classic --timeout=300 --jobs=2 test/*.js test/reporters/*.js test/integration/*.js",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:typescript && nyc npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^3.0.0",
        "@ava/babel-preset-transform-test-files": "^5.0.0",
        "@ava/write-file-atomic": "^2.2.0",
        "@babel/core": "^7.4.4",
        "@babel/generator": "^7.4.4",
        "@babel/plugin-syntax-async-generators": "^7.2.0",
        "@babel/plugin-syntax-object-rest-spread": "^7.2.0",
        "@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^4.1.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^2.1.0",
        "array-uniq": "^2.1.0",
        "arrify": "^2.0.1",
        "bluebird": "^3.5.4",
        "chalk": "^2.4.2",
        "chokidar": "^3.0.0",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.1.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.0.0",
        "cli-truncate": "^1.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^4.1.1",
        "dot-prop": "^5.0.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^2.0.0",
        "esm": "^3.2.25",
        "figures": "^3.0.0",
        "find-up": "^4.0.0",
        "get-port": "^5.0.0",
        "globby": "^9.2.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^2.0.0",
        "indent-string": "^4.0.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.2",
        "is-observable": "^1.1.0",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^2.1.0",
        "make-dir": "^3.0.0",
        "matcher": "^2.0.0",
        "md5-hex": "^3.0.0",
        "meow": "^5.0.0",
        "micromatch": "^4.0.2",
        "ms": "^2.1.1",
        "observable-to-promise": "^0.5.0",
        "ora": "^3.4.0",
        "package-hash": "^4.0.0",
        "pkg-conf": "^3.1.0",
        "plur": "^3.1.1",
        "pretty-ms": "^5.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.12",
        "stack-utils": "^1.0.2",
        "strip-ansi": "^5.2.0",
        "strip-bom-buf": "^2.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^6.1.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^3.0.0"
      },
      "devDependencies": {
        "cli-table3": "^0.5.1",
        "codecov": "^3.5.0",
        "delay": "^4.2.0",
        "execa": "^1.0.0",
        "get-stream": "^5.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^4.0.1",
        "nyc": "^14.1.1",
        "proxyquire": "^2.1.0",
        "react": "^16.8.6",
        "react-test-renderer": "^16.8.6",
        "replace-string": "^3.0.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.3.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^12.6.1",
        "temp-write": "^4.0.0",
        "touch": "^3.1.0",
        "ts-node": "^8.1.0",
        "typescript": "^3.4.5",
        "xo": "^0.24.0",
        "zen-observable": "^0.8.14"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts",
          "test/flow-types/*"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        },
        "overrides": [
          {
            "files": "test/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          }
        ]
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "f26634b1a82f1edc92d75935c833c6a8cad7cb93",
      "readme": "# <img src=\"media/header.png\" title=\"AVA\" alt=\"AVA logo\" width=\"530\">\n\n[![Build Status](https://travis-ci.org/avajs/ava.svg?branch=master)](https://travis-ci.org/avajs/ava)  [![Coverage Status](https://codecov.io/gh/avajs/ava/branch/master/graph/badge.svg)](https://codecov.io/gh/avajs/ava/branch/master) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo) [![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/ava)\n[![Mentioned in Awesome Node.js](https://awesome.re/mentioned-badge.svg)](https://github.com/sindresorhus/awesome-nodejs)\n\nTesting can be a drag. AVA helps you get it done. AVA is a test runner for Node.js with a concise API, detailed error output, embrace of new language features and process isolation that let you write tests more effectively. So you can ship more awesome code. 🚀\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\nRead our [contributing guide](contributing.md) if you're looking to contribute (issues / PRs / etc).\n\n![](media/mini-reporter.gif)\n\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript & Flow type definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](./docs/01-writing-tests.md#process-isolation)\n- [Write your tests using the latest JavaScript syntax](#latest-javascript-support)\n- [Promise support](./docs/01-writing-tests.md#promise-support)\n- [Async function support](./docs/01-writing-tests.md#async-function-support)\n- [Observable support](./docs/01-writing-tests.md#observable-support)\n- [Enhanced assertion messages](./docs/03-assertions.md#enhanced-assertion-messages)\n- [Automatic parallel test runs in CI](#parallel-runs-in-ci)\n- [TAP reporter](./docs/05-command-line.md#tap-reporter)\n\n\n## Usage\n\nTo install and set up AVA, run:\n\n```console\nnpm init ava\n```\n\nYour `package.json` will then look like this (exact version notwithstanding):\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"^1.0.0\"\n\t}\n}\n```\n\nOr if you prefer using Yarn:\n\n```console\nyarn add ava --dev\n```\n\nAlternatively you can install `ava` manually:\n\n```console\nnpm install --save-dev ava\n```\n\nDon't forget to configure the `test` script in your `package.json` as per above.\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nimport test from 'ava';\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\tt.is(await bar, 'bar');\n});\n```\n\n### Running your tests\n\n```console\nnpm test\n```\n\nOr with `npx`:\n\n```console\nnpx ava\n```\n\nRun with the `--watch` flag to enable AVA's [watch mode](docs/recipes/watch-mode.md):\n\n```console\nnpx ava --watch\n```\n\n## Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## Highlights\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n### Latest JavaScript support\n\nAVA uses [Babel 7](https://babeljs.io) so you can use the latest JavaScript syntax in your tests. There is no extra setup required. You don't need to be using Babel in your own project for this to work either.\n\nWe aim support all [finished syntax proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md), as well as all syntax from ratified JavaScript versions (e.g. ES2017). See our [`@ava/stage-4`](https://github.com/avajs/babel-preset-stage-4) preset for the currently supported proposals.\n\nPlease note that we do not add or modify built-ins. For example, if you use [`Object.fromEntries()`](https://github.com/tc39/proposal-object-from-entries) in your tests, they will crash in Node.js 10 which does not implement this method.\n\nYou can disable this syntax support, or otherwise customize AVA's Babel pipeline. See our [Babel recipe] for more details.\n\n### Parallel runs in CI\n\nAVA automatically detects whether your CI environment supports parallel builds. Each build will run a subset of all test files, while still making sure all tests get executed. See the [`ci-parallel-vars`](https://www.npmjs.com/package/ci-parallel-vars) package for a list of supported CI environments.\n\n## Documentation\n\nPlease see the [files in the `docs` directory](./docs):\n\n* [Writing tests](./docs/01-writing-tests.md)\n* [Execution context](./docs/02-execution-context.md)\n* [Assertions](./docs/03-assertions.md)\n* [Snapshot testing](./docs/04-snapshot-testing.md)\n* [Command line (CLI)](./docs/05-command-line.md)\n* [Configuration](./docs/06-configuration.md)\n* [Test timeouts](./docs/07-test-timeouts.md)\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/08-common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n### Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Flow](docs/recipes/flow.md)\n- [Configuring Babel][Babel recipe]\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [JSPM and SystemJS](docs/recipes/jspm-systemjs.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n- [Testing web apps using Puppeteer](docs/recipes/puppeteer.md)\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [`/ˈeɪvə/`](media/pronunciation.m4a?raw=true): Ay (f**a**ce, m**a**de) V (**v**ie, ha**v**e) A (comm**a**, **a**go)\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Support\n\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/ava)\n- [Spectrum](https://spectrum.chat/ava)\n- [Twitter](https://twitter.com/ava__js)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) - Lint rules for AVA tests\n- [sublime-ava](https://github.com/avajs/sublime-ava) - Snippets for AVA tests\n- [atom-ava](https://github.com/avajs/atom-ava) - Snippets for AVA tests\n- [vscode-ava](https://github.com/samverschueren/vscode-ava) - Snippets for AVA tests\n- [gulp-ava](https://github.com/avajs/gulp-ava) - Run tests with gulp\n- [grunt-ava](https://github.com/avajs/grunt-ava) - Run tests with grunt\n- [More…](https://github.com/avajs/awesome-ava#packages)\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [AVA Casts](http://avacasts.com)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus) | [![Vadim Demedes](https://github.com/vadimdemedes.png?size=100)](https://github.com/vadimdemedes)\n---|---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](http://sindresorhus.com) | [Vadim Demedes](https://github.com/vadimdemedes)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://ava.li\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n\n[Babel recipe]: docs/recipes/babel.md\n",
      "readmeFilename": "readme.md",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@2.0.0-beta.2",
      "_nodeVersion": "10.15.3",
      "_npmVersion": "6.9.0",
      "dist": {
        "integrity": "sha512-D8F8f0J8SJ3ptFG50OKwHODrsFrtoYw9ZXQ6sj9lltqCW3g+o6viKr4ubBboIAe7fQfOqTsVhBWTYNJChdvXUw==",
        "shasum": "cd0a5060a507daeaa7f8d8e588aa0e31db232d00",
        "tarball": "https://registry.npmjs.org/ava/-/ava-2.0.0-beta.2.tgz",
        "fileCount": 49,
        "unpackedSize": 235939,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc4WrVCRA9TVsSAnZWagAAcUYP/RsFAIDKg20k4zdXpYDW\nBZTGTWl7BZDqzyxnRLpAIxGXIm5D2koUfQCKuU5wZlK8WpFy4VirLWdTwAZR\nbVF/1CCZSzDiQtxjGkEgGvkdfCRLFCUQjk41ZB42PYBJbIPrcCr4xDPimSZ2\nGdb/ZSeBwsPebLf5swh7GgWB2M5W7OxeQPBYj2gxeIYQ/T4oVNw4Zll8QL2X\nDp0YNoM4mQL+m4WKrdZDZM1KzO+pFGRpbipndiqs/Q95N6QbI/dmQ6YKIfP8\nnmZ/1fYkfwCXgbiEUtACWjrfLXXKxJvW43V7D8s/Ve8Kpbt3pLsByfxu5MBB\nbrsUJbTAar/KR6rm3aTaN+hOJAG2pAIm//FFLxyhRCJX8q7UOxE7sgeM99t+\nzs+P94QcEscB1P+BZG3YdXbaw0SrK4waMKgoEcHuOrQaGweB7zSzlDftlXnK\nWIeia+TVl4zECb9XsinHujotSLga7SrkKsQOsQHRM6nGSd2xWMbIZG78+G8d\nerjsBYVaVvazcGMCsIch5R8K3UFxtV4jcK5x1GjaLqHPBD/5Eic1BSElB12w\n7nhM0Khce+1IxwtHRoBmbPmfDQ3Edz/N1bTEDC1y8Jtl8r2Z7qmr1CI63ZKw\nCQyLfx/xJbv7/QdDnYud5W456gapJsgnuti6yooZsrIrpU6W3pCr0QRrhXRY\nYVN0\r\n=FwAu\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIC+EXaV2lGjIm6dk1JxtIa16p00CTk/F8Wc2hzPU0TXbAiEA7za5ASmaMfVEX2wv2p6nF4LFAzRy7WZguSzqc6a7CL8="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_2.0.0-beta.2_1558276821153_0.8882954152439309"
      },
      "_hasShrinkwrap": false
    },
    "2.0.0-rc.1": {
      "name": "ava",
      "version": "2.0.0-rc.1",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=8.9.4 <9 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test:tap": "tap --no-esm --no-cov --reporter=classic --timeout=300 --jobs=2 test/*.js test/reporters/*.js test/integration/*.js",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:typescript && nyc npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^3.0.0",
        "@ava/babel-preset-transform-test-files": "^5.0.0",
        "@babel/core": "^7.4.5",
        "@babel/generator": "^7.4.4",
        "@babel/plugin-syntax-async-generators": "^7.2.0",
        "@babel/plugin-syntax-object-rest-spread": "^7.2.0",
        "@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^4.1.0",
        "ansi-styles": "^3.2.1",
        "arr-flatten": "^1.1.0",
        "array-union": "^2.1.0",
        "array-uniq": "^2.1.0",
        "arrify": "^2.0.1",
        "bluebird": "^3.5.5",
        "chalk": "^2.4.2",
        "chokidar": "^3.0.0",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.1.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.0.0",
        "cli-truncate": "^1.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^4.1.1",
        "dot-prop": "^5.0.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^2.0.0",
        "esm": "^3.2.25",
        "figures": "^3.0.0",
        "find-up": "^4.0.0",
        "get-port": "^5.0.0",
        "globby": "^9.2.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^2.0.0",
        "indent-string": "^4.0.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.2",
        "is-observable": "^1.1.0",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash.clone": "^4.5.0",
        "lodash.clonedeep": "^4.5.0",
        "lodash.clonedeepwith": "^4.5.0",
        "lodash.debounce": "^4.0.3",
        "lodash.difference": "^4.3.0",
        "lodash.flatten": "^4.2.0",
        "loud-rejection": "^2.1.0",
        "make-dir": "^3.0.0",
        "matcher": "^2.0.0",
        "md5-hex": "^3.0.0",
        "meow": "^5.0.0",
        "micromatch": "^4.0.2",
        "ms": "^2.1.1",
        "observable-to-promise": "^0.5.0",
        "ora": "^3.4.0",
        "package-hash": "^4.0.0",
        "pkg-conf": "^3.1.0",
        "plur": "^3.1.1",
        "pretty-ms": "^5.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.12",
        "stack-utils": "^1.0.2",
        "strip-ansi": "^5.2.0",
        "strip-bom-buf": "^2.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^6.1.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^3.0.0",
        "write-file-atomic": "^3.0.0"
      },
      "devDependencies": {
        "cli-table3": "^0.5.1",
        "codecov": "^3.5.0",
        "delay": "^4.2.0",
        "execa": "^1.0.0",
        "get-stream": "^5.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^4.0.1",
        "nyc": "^14.1.1",
        "proxyquire": "^2.1.0",
        "react": "^16.8.6",
        "react-test-renderer": "^16.8.6",
        "replace-string": "^3.0.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.3.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^12.6.1",
        "temp-write": "^4.0.0",
        "touch": "^3.1.0",
        "ts-node": "^8.2.0",
        "typescript": "^3.4.5",
        "xo": "^0.24.0",
        "zen-observable": "^0.8.14"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts",
          "test/flow-types/*"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        },
        "overrides": [
          {
            "files": "test/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          }
        ]
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "readme": "# <img src=\"media/header.png\" title=\"AVA\" alt=\"AVA logo\" width=\"530\">\n\n[![Build Status](https://travis-ci.org/avajs/ava.svg?branch=master)](https://travis-ci.org/avajs/ava)  [![Coverage Status](https://codecov.io/gh/avajs/ava/branch/master/graph/badge.svg)](https://codecov.io/gh/avajs/ava/branch/master) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo) [![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/ava)\n[![Mentioned in Awesome Node.js](https://awesome.re/mentioned-badge.svg)](https://github.com/sindresorhus/awesome-nodejs)\n\nTesting can be a drag. AVA helps you get it done. AVA is a test runner for Node.js with a concise API, detailed error output, embrace of new language features and process isolation that let you write tests more effectively. So you can ship more awesome code. 🚀\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\nRead our [contributing guide](contributing.md) if you're looking to contribute (issues / PRs / etc).\n\n![](media/mini-reporter.gif)\n\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript & Flow type definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](./docs/01-writing-tests.md#process-isolation)\n- [Write your tests using the latest JavaScript syntax](#latest-javascript-support)\n- [Promise support](./docs/01-writing-tests.md#promise-support)\n- [Async function support](./docs/01-writing-tests.md#async-function-support)\n- [Observable support](./docs/01-writing-tests.md#observable-support)\n- [Enhanced assertion messages](./docs/03-assertions.md#enhanced-assertion-messages)\n- [Automatic parallel test runs in CI](#parallel-runs-in-ci)\n- [TAP reporter](./docs/05-command-line.md#tap-reporter)\n\n\n## Usage\n\nTo install and set up AVA, run:\n\n```console\nnpm init ava\n```\n\nYour `package.json` will then look like this (exact version notwithstanding):\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"^1.0.0\"\n\t}\n}\n```\n\nOr if you prefer using Yarn:\n\n```console\nyarn add ava --dev\n```\n\nAlternatively you can install `ava` manually:\n\n```console\nnpm install --save-dev ava\n```\n\nDon't forget to configure the `test` script in your `package.json` as per above.\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nimport test from 'ava';\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\tt.is(await bar, 'bar');\n});\n```\n\n### Running your tests\n\n```console\nnpm test\n```\n\nOr with `npx`:\n\n```console\nnpx ava\n```\n\nRun with the `--watch` flag to enable AVA's [watch mode](docs/recipes/watch-mode.md):\n\n```console\nnpx ava --watch\n```\n\n## Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## Highlights\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n### Latest JavaScript support\n\nAVA uses [Babel 7](https://babeljs.io) so you can use the latest JavaScript syntax in your tests. There is no extra setup required. You don't need to be using Babel in your own project for this to work either.\n\nWe aim support all [finished syntax proposals](https://github.com/tc39/proposals/blob/master/finished-proposals.md), as well as all syntax from ratified JavaScript versions (e.g. ES2017). See our [`@ava/stage-4`](https://github.com/avajs/babel-preset-stage-4) preset for the currently supported proposals.\n\nPlease note that we do not add or modify built-ins. For example, if you use [`Object.fromEntries()`](https://github.com/tc39/proposal-object-from-entries) in your tests, they will crash in Node.js 10 which does not implement this method.\n\nYou can disable this syntax support, or otherwise customize AVA's Babel pipeline. See our [Babel recipe] for more details.\n\n### Parallel runs in CI\n\nAVA automatically detects whether your CI environment supports parallel builds. Each build will run a subset of all test files, while still making sure all tests get executed. See the [`ci-parallel-vars`](https://www.npmjs.com/package/ci-parallel-vars) package for a list of supported CI environments.\n\n## Documentation\n\nPlease see the [files in the `docs` directory](./docs):\n\n* [Writing tests](./docs/01-writing-tests.md)\n* [Execution context](./docs/02-execution-context.md)\n* [Assertions](./docs/03-assertions.md)\n* [Snapshot testing](./docs/04-snapshot-testing.md)\n* [Command line (CLI)](./docs/05-command-line.md)\n* [Configuration](./docs/06-configuration.md)\n* [Test timeouts](./docs/07-test-timeouts.md)\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/08-common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n### Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Flow](docs/recipes/flow.md)\n- [Configuring Babel][Babel recipe]\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [JSPM and SystemJS](docs/recipes/jspm-systemjs.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n- [Testing web apps using Puppeteer](docs/recipes/puppeteer.md)\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [`/ˈeɪvə/`](media/pronunciation.m4a?raw=true): Ay (f**a**ce, m**a**de) V (**v**ie, ha**v**e) A (comm**a**, **a**go)\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Support\n\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/ava)\n- [Spectrum](https://spectrum.chat/ava)\n- [Twitter](https://twitter.com/ava__js)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) - Lint rules for AVA tests\n- [sublime-ava](https://github.com/avajs/sublime-ava) - Snippets for AVA tests\n- [atom-ava](https://github.com/avajs/atom-ava) - Snippets for AVA tests\n- [vscode-ava](https://github.com/samverschueren/vscode-ava) - Snippets for AVA tests\n- [gulp-ava](https://github.com/avajs/gulp-ava) - Run tests with gulp\n- [grunt-ava](https://github.com/avajs/grunt-ava) - Run tests with grunt\n- [More…](https://github.com/avajs/awesome-ava#packages)\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [AVA Casts](http://avacasts.com)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus) | [![Vadim Demedes](https://github.com/vadimdemedes.png?size=100)](https://github.com/vadimdemedes)\n---|---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](http://sindresorhus.com) | [Vadim Demedes](https://github.com/vadimdemedes)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://ava.li\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n\n[Babel recipe]: docs/recipes/babel.md\n",
      "readmeFilename": "readme.md",
      "gitHead": "626e58c4e50b90c5279fcf8b33154d3b5eec37f6",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@2.0.0-rc.1",
      "_nodeVersion": "10.15.3",
      "_npmVersion": "6.9.0",
      "dist": {
        "integrity": "sha512-pCpbg5OqWuU+s6UVFqhEBOO3QI8WWKmlPIcrXmlltyjarq4i9z6rLGqZ5kgISZuzaMA8bBiM0cwz5rlcIcaM8g==",
        "shasum": "5e0a380f3b469c61d3173578fcc74293b72291de",
        "tarball": "https://registry.npmjs.org/ava/-/ava-2.0.0-rc.1.tgz",
        "fileCount": 50,
        "unpackedSize": 237411,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc7NypCRA9TVsSAnZWagAAZNgP/AkSUWmt9DN9JUUfSceE\nyy2tZ0UFfAk/dPAj08HXVXBkWPPeDMDOzDd+EGegAykYYQ0Y7fgVsB/IOwOE\nO0w2dN/eUE1g95Z5J0XUC/wXup3HFwRbatufTKmXgnDPiZi/ku41V1q8tO8L\nVsqDhQHfGJUM+cUF+u/iDUr2lEuB783oP02kQCQrJtYANgkJq8YLFx62EjHG\nNK+u9Y0OKolMZzFDb8Zieq/cTZi+pJi9SP/fY1KwGgCEGPNNfUPG2Q4GlN2O\n0BMrtxMZHcuGbk3YGxFfoyzZiZntc4xtv9gUBWfJGQZFwVxDDfjiadZJte3v\ns5dWhXOJEiLE7CJOgrxC36SsBtkG2pzr8OgNOw46F2b+vuLpbnsqfjMxyn21\nF9iknOjkuj1BGn3Qr4RpVpoa0PYWuseLGQpMo4vKfp3AfaZ3Py+X8IGwXQ2J\nj0PeosqRwqgY6TyoLIGLQz1UmuLSFQKcs6QDSgp4VP0+gYcLaRi6GhEhUzA/\n1RiXqtpmwGw6ZX3UExGfArCxfrAVvgeKPXSnpJo0glXlw+z1jGQr5y3v1zBM\nYkBlPJc6Q3xBgPg2pSLAb+7NqaoRyV2i9qpw0P+9Nob8jgaTjpGn1ajSSmJy\nvof6OqlyTMScNAX+C2cx+YMICarq2Y969UR+G5o6ioEXUE1s4jBiILnReF5M\n7o4z\r\n=J5sT\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIE7WcRguXROts7P6L5GjzorJ7s4AD0LQvMPYM98mg+GSAiAFkYAa/l2sL+Po18AuqQvX4QWxOp78aquMtgDC8G1V5A=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_2.0.0-rc.1_1559026856149_0.012870538430590939"
      },
      "_hasShrinkwrap": false
    },
    "2.0.0": {
      "name": "ava",
      "version": "2.0.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=8.9.4 <9 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test:tap": "tap --no-esm --no-cov --reporter=classic --timeout=300 --jobs=2 test/*.js test/reporters/*.js test/integration/*.js",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:typescript && nyc npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^3.0.0",
        "@ava/babel-preset-transform-test-files": "^5.0.0",
        "@babel/core": "^7.4.5",
        "@babel/generator": "^7.4.4",
        "@babel/plugin-syntax-async-generators": "^7.2.0",
        "@babel/plugin-syntax-object-rest-spread": "^7.2.0",
        "@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^4.1.0",
        "ansi-styles": "^4.0.0",
        "arr-flatten": "^1.1.0",
        "array-union": "^2.1.0",
        "array-uniq": "^2.1.0",
        "arrify": "^2.0.1",
        "bluebird": "^3.5.5",
        "chalk": "^2.4.2",
        "chokidar": "^3.0.0",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.1.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.0.0",
        "cli-truncate": "^1.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^4.1.1",
        "dot-prop": "^5.0.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^2.0.0",
        "esm": "^3.2.25",
        "figures": "^3.0.0",
        "find-up": "^4.0.0",
        "get-port": "^5.0.0",
        "globby": "^9.2.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^2.0.0",
        "indent-string": "^4.0.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.2",
        "is-observable": "^2.0.0",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.11",
        "loud-rejection": "^2.1.0",
        "make-dir": "^3.0.0",
        "matcher": "^2.0.0",
        "md5-hex": "^3.0.0",
        "meow": "^5.0.0",
        "micromatch": "^4.0.2",
        "ms": "^2.1.1",
        "observable-to-promise": "^1.0.0",
        "ora": "^3.4.0",
        "package-hash": "^4.0.0",
        "pkg-conf": "^3.1.0",
        "plur": "^3.1.1",
        "pretty-ms": "^5.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.12",
        "stack-utils": "^1.0.2",
        "strip-ansi": "^5.2.0",
        "strip-bom-buf": "^2.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^6.1.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^3.0.0",
        "write-file-atomic": "^3.0.0"
      },
      "devDependencies": {
        "cli-table3": "^0.5.1",
        "codecov": "^3.5.0",
        "delay": "^4.2.0",
        "execa": "^1.0.0",
        "get-stream": "^5.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^4.0.1",
        "nyc": "^14.1.1",
        "proxyquire": "^2.1.0",
        "react": "^16.8.6",
        "react-test-renderer": "^16.8.6",
        "replace-string": "^3.0.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.3.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^12.6.1",
        "temp-write": "^4.0.0",
        "touch": "^3.1.0",
        "ts-node": "^8.2.0",
        "typescript": "^3.5.1",
        "xo": "^0.24.0",
        "zen-observable": "^0.8.14"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts",
          "test/flow-types/*"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        },
        "overrides": [
          {
            "files": "test/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          }
        ]
      },
      "nyc": {
        "reporter": [
          "html",
          "lcov",
          "text"
        ]
      },
      "gitHead": "e1572d9f66fecfaf4ceb2a84814181b02c8d142e",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@2.0.0",
      "_nodeVersion": "12.3.1",
      "_npmVersion": "6.9.0",
      "dist": {
        "integrity": "sha512-tOfO3yQhKiSECIjST8Xi99l7Bja9EG5hgZFKc92xNZh/6pnct97vWDKENyATBvZIXpdCClSMtGgOX2UaGq+OJA==",
        "shasum": "265f9a094f83d0a78c05654e37302645d59ca1fa",
        "tarball": "https://registry.npmjs.org/ava/-/ava-2.0.0.tgz",
        "fileCount": 51,
        "unpackedSize": 238044,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc8mgHCRA9TVsSAnZWagAAlWEP/Av1b35cYt8+azZxmrNj\nPCgq4WtaEhNg6lEBU2BRGYNtcJzNyeBFr9+6+dodAl2/92/iwVn0VboYOO2B\nud1DskTszEgZT4MqVcpNptwR6fV0FbGeUlRoPy1KaD1GhZG8qVYQFmwwy/An\nOYLmjHGwlUpdsyQEkdfSilO66XkMCLd5jZxr5XqUHjY3sYQ6wG4x2AwrpUHo\nUIfTME3PIpYIaNaDcQYoyPUEMDvVOXUuhpR9BZm0TdCRT6f6jU2w51QgVImh\nhGgH8WsQDRfCalNte748GZpD2A5uWYxz6GX6Xd9cbwF3+3YpOqF5aw0E+F6T\n9AscEVCcts1XWtHNzgzBK7Eg4LyqwvuciajqzqFvQzGIW1xLmICVrwvjnk3m\nrsa9oE+54lHA0WTUUQQxmyzcn3dFcNRp/jmoum4DS9IWUP/Qd42BxifjpJce\nsA56otvfEz9IAiawLkDhOLbAN61qsIACG5FQWgiCD4r25jQI7TyExfYteS1o\nFs6EC4gM7DWqrx0orpjiioSz1MbMkrSldRDIoyv9HLXJviclwjNSTFCO3Uo0\nok2+NI9A+IRcdEWNuGTeZ51zkgW3rbBKCRNjfdFED8qm5BGKLGvFgG7LtA2T\nxsdycYW+RnesPhFGJHtUAR/gF258H4JM2V6OtMmilvKoxAx+Io36uWeu9nfz\nX7nS\r\n=ahP5\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIBTrQ7V6EUEFK94ifM+1rnqWhWGoSyoODNI0iwmq5QL5AiAzIUZl3luoCjkMDqT8VkUKK1w2il0J91HdZJ/d6WnIGw=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_2.0.0_1559390214949_0.9784575476276001"
      },
      "_hasShrinkwrap": false
    },
    "2.1.0": {
      "name": "ava",
      "version": "2.1.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=8.9.4 <9 || >=10.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test:tap": "tap --no-esm",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:typescript && npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^3.0.0",
        "@ava/babel-preset-transform-test-files": "^5.0.0",
        "@babel/core": "^7.4.5",
        "@babel/generator": "^7.4.4",
        "@babel/plugin-syntax-async-generators": "^7.2.0",
        "@babel/plugin-syntax-object-rest-spread": "^7.2.0",
        "@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^4.1.0",
        "ansi-styles": "^4.0.0",
        "arr-flatten": "^1.1.0",
        "array-union": "^2.1.0",
        "array-uniq": "^2.1.0",
        "arrify": "^2.0.1",
        "bluebird": "^3.5.5",
        "chalk": "^2.4.2",
        "chokidar": "^3.0.1",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.1.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.0.0",
        "cli-truncate": "^1.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^4.1.1",
        "dot-prop": "^5.0.1",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^2.0.0",
        "esm": "^3.2.25",
        "figures": "^3.0.0",
        "find-up": "^4.0.0",
        "get-port": "^5.0.0",
        "globby": "^9.2.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^2.0.0",
        "indent-string": "^4.0.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.2",
        "is-observable": "^2.0.0",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.11",
        "loud-rejection": "^2.1.0",
        "make-dir": "^3.0.0",
        "matcher": "^2.0.0",
        "md5-hex": "^3.0.0",
        "meow": "^5.0.0",
        "micromatch": "^4.0.2",
        "ms": "^2.1.2",
        "observable-to-promise": "^1.0.0",
        "ora": "^3.4.0",
        "package-hash": "^4.0.0",
        "pkg-conf": "^3.1.0",
        "plur": "^3.1.1",
        "pretty-ms": "^5.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.12",
        "stack-utils": "^1.0.2",
        "strip-ansi": "^5.2.0",
        "strip-bom-buf": "^2.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^6.1.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^3.0.0",
        "write-file-atomic": "^3.0.0"
      },
      "devDependencies": {
        "@types/node": "^10.14.8",
        "cli-table3": "^0.5.1",
        "codecov": "^3.5.0",
        "delay": "^4.2.0",
        "execa": "^1.0.0",
        "get-stream": "^5.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^4.1.0",
        "proxyquire": "^2.1.0",
        "react": "^16.8.6",
        "react-test-renderer": "^16.8.6",
        "replace-string": "^3.0.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.3.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.2.2",
        "temp-write": "^4.0.0",
        "touch": "^3.1.0",
        "ts-node": "^8.2.0",
        "typescript": "^3.5.1",
        "xo": "^0.24.0",
        "zen-observable": "^0.8.14"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts",
          "test/flow-types/*"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        },
        "overrides": [
          {
            "files": "test/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          }
        ]
      },
      "tap": {
        "browser": false,
        "coverage-report": [
          "html",
          "lcov",
          "text"
        ],
        "esm": false,
        "files": [
          "test/*.js",
          "test/reporters/*.js",
          "test/integration/*.js"
        ],
        "flow": false,
        "jobs": 2,
        "jsx": false,
        "timeout": 300,
        "ts": false
      },
      "gitHead": "00d9517aa4f45d2951eae7580518be9f9dee6749",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@2.1.0",
      "_nodeVersion": "12.4.0",
      "_npmVersion": "6.9.0",
      "dist": {
        "integrity": "sha512-IaS+l1KfYtFpJlDZXrNG0M6SGr/DUvwJmTiaTaW2lMdEezCAJc5J/hNAQWIKigkmxIOURYT29atD/qyp+zq+wg==",
        "shasum": "158c5cdf48d1556caf0a9fdf96b61af9e566c153",
        "tarball": "https://registry.npmjs.org/ava/-/ava-2.1.0.tgz",
        "fileCount": 51,
        "unpackedSize": 238915,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc/nc6CRA9TVsSAnZWagAAhZ8P/2hzgsvToW1ctA2Clm1i\nS39LTkEG5uMv5MHvtTVSBSjTK4XY3zgpv4Y4XCa5as2MaLvAwaYbyLIfQt16\ns84mDITKQZLPsSFFNs4bFzrD3denZ5I9ujFiKPejTfn1MaQHWpC6ry/AEPH0\nLHEgFtPOKYgbEBR/nUD8uO9JpXX4p/wyJ2hVl6lo0bXyPxDf1lbLB1RXS8qr\noKlLZ0cChhNtHdSWFOByXJxpR+fNGTnJe7O2NxdnXXH+uMhogFbNhOBcVqlo\n8umuzpCb0wvrWnhkXf79xdcRhsIa69L0Vxyrh2Pdk7/wLREhC2NuJJliXP9L\nAFz/TGUXJzwMmlO6HNkCLC1jF21DSse+K5KyZUwQ9P/tXifXkkcs5oh0O2XT\nXHUKC3J2yB/3H9ycANByDy1yg0ZeWeCs0OsRyuv5tRczdP0WXO3e6NL+01Qp\nrO4OfNgBok2NgU+RFMhq7MpBBEeASw+1aVZ1aZBtvmzZs6W9bJyouQmztE1w\ncoy5sOtg7sfclZonShmpl1o73yYcHq+Lfl++DzT/AwOe6xyvTL7mwWwORXV3\noobU3xe/S15+Oh+hBOnhkUGFL3TZdIGvJbKPnurhyPBagPcKVdzDXk6CUSxm\nZF60F9ca3mOmG4acWP8eGH5UFKWwoDL+tSRZ5WFU9zij4MxsQdm3q4ByV/xE\nwnOF\r\n=8i+a\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCxZJabItmtBGCZ1jgOBkP9nHGDIlx/ZnEDGphI440KwAIgO+VOh9bj41AG+D86f+VFpgr46hQur+7VIs1G9Q3MneY="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_2.1.0_1560180537660_0.6921543642696648"
      },
      "_hasShrinkwrap": false
    },
    "2.2.0": {
      "name": "ava",
      "version": "2.2.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=8.9.4 <9 || >=10.0.0 <11 || >=12.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test:tap": "tap --no-esm",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:typescript && npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^3.0.0",
        "@ava/babel-preset-transform-test-files": "^5.0.0",
        "@babel/core": "^7.5.0",
        "@babel/generator": "^7.5.0",
        "@babel/plugin-syntax-async-generators": "^7.2.0",
        "@babel/plugin-syntax-object-rest-spread": "^7.2.0",
        "@babel/plugin-syntax-optional-catch-binding": "^7.2.0",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^4.2.0",
        "ansi-styles": "^4.0.0",
        "arr-flatten": "^1.1.0",
        "array-union": "^2.1.0",
        "array-uniq": "^2.1.0",
        "arrify": "^2.0.1",
        "bluebird": "^3.5.5",
        "chalk": "^2.4.2",
        "chokidar": "^3.0.2",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.1.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.0.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^4.1.1",
        "dot-prop": "^5.1.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^2.0.0",
        "esm": "^3.2.25",
        "figures": "^3.0.0",
        "find-up": "^4.1.0",
        "get-port": "^5.0.0",
        "globby": "^10.0.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.1",
        "indent-string": "^4.0.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.2",
        "is-observable": "^2.0.0",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.11",
        "loud-rejection": "^2.1.0",
        "make-dir": "^3.0.0",
        "matcher": "^2.0.0",
        "md5-hex": "^3.0.0",
        "meow": "^5.0.0",
        "micromatch": "^4.0.2",
        "ms": "^2.1.2",
        "observable-to-promise": "^1.0.0",
        "ora": "^3.4.0",
        "package-hash": "^4.0.0",
        "pkg-conf": "^3.1.0",
        "plur": "^3.1.1",
        "pretty-ms": "^5.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.12",
        "stack-utils": "^1.0.2",
        "strip-ansi": "^5.2.0",
        "strip-bom-buf": "^2.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^7.0.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^3.0.1",
        "write-file-atomic": "^3.0.0"
      },
      "devDependencies": {
        "@types/node": "^10.14.12",
        "cli-table3": "^0.5.1",
        "codecov": "^3.5.0",
        "delay": "^4.3.0",
        "execa": "^2.0.3",
        "get-stream": "^5.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^4.1.0",
        "proxyquire": "^2.1.0",
        "react": "^16.8.6",
        "react-test-renderer": "^16.8.6",
        "replace-string": "^3.0.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.3.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.4.1",
        "temp-write": "^4.0.0",
        "touch": "^3.1.0",
        "ts-node": "^8.3.0",
        "typescript": "^3.5.2",
        "xo": "^0.24.0",
        "zen-observable": "^0.8.14"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        },
        "overrides": [
          {
            "files": "test/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          }
        ]
      },
      "tap": {
        "browser": false,
        "coverage-report": [
          "html",
          "lcov",
          "text"
        ],
        "esm": false,
        "files": [
          "test/*.js",
          "test/reporters/*.js",
          "test/integration/*.js"
        ],
        "flow": false,
        "jobs": 2,
        "jsx": false,
        "timeout": 300,
        "ts": false
      },
      "gitHead": "245148417817ffeaf1754cbb22ccf0adc83f8d1b",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@2.2.0",
      "_nodeVersion": "12.6.0",
      "_npmVersion": "6.10.0",
      "dist": {
        "integrity": "sha512-lROj3eQ8L4ZjfiN5P8UGekEQLfKmseGMtat6pUOHgJLEb2K1kT0ZpR/IlWwuytjvwO6nZpzpD+QsTW/XiayIgg==",
        "shasum": "5a7d799c2c8cc5926f95d2b76bdfe6081fe9a4f8",
        "tarball": "https://registry.npmjs.org/ava/-/ava-2.2.0.tgz",
        "fileCount": 52,
        "unpackedSize": 240695,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdI55HCRA9TVsSAnZWagAAYtwP/2qj+dQ1Bg++an/Yl34W\nt32miIOyOCBZ/MnduXKZpcZYjrb19qmE5IByc/FXwk6K9gBcPGPKKax+6AzW\nPsW4BqPWzj0Y7P03SMxUK52LMrtRTDZPwMfu6/zf6b0dreZIbAMpanuh1NEt\nFW/ZmqQ8Ui/bxTtII7ej8C24EnESJgB7+6Nc5VK3v92LBIyulXpDIcaDerNn\n0fchDo9/EnIuBUqrjzxfV/0xTYVw+V9Ak60ZI4DsBsIEzdbLx4rG9wgd/BL/\nY3HQuoZPO5evaF0OGi0e97J7f1C/rDwGX14ggRFrb/o7rDudNTLQil+CF276\nAZFTCqMnaTQh04cu8iwUQA5hMfQlnxpO94yEc330v9ff4vSUGLf4ZcD5BOOu\nG+McpHuqK6/kZ4t223bJLUyIbRrbidl8d/YGm+NOU+7FWvKPTPIVbxYcIP3s\nTc7d2r+uk19sn6ai/+Wj+EjarszvQm7/Bp3RBp1HFty5WMTQsL0m8tJ9/tBg\n5VQEoXuwWlo5RoWnC342rxlRWCTCWZdmUlbW7Ch2iHTw8YjFWuS8LrXEBmts\nN6hb5Qd4BdZ9LhMQFDjWHWL+Bq2iH881YDhdQx7i49YK7fwaYZg18uXzCGDO\nKSCtW4TE/u5eKEi61J9sIBMTYwGg8uqmvbBlIIOaPxa0U7DN2sXvHDT7xGlZ\nqfYQ\r\n=VThA\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFGIfhFkniDl4+SGb6DBPEyzH/4YfOUkptRrnQBIdFTdAiAAzvgLA0JJ9tesuDo70GM8COq01XwEaNH28M/YZ9nIIw=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_2.2.0_1562615366166_0.49031095706823313"
      },
      "_hasShrinkwrap": false
    },
    "2.3.0": {
      "name": "ava",
      "version": "2.3.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=8.9.4 <9 || >=10.0.0 <11 || >=12.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test:tap": "tap --no-esm",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:typescript && npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^4.0.0",
        "@ava/babel-preset-transform-test-files": "^6.0.0",
        "@babel/core": "^7.5.5",
        "@babel/generator": "^7.5.5",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^4.2.1",
        "ansi-styles": "^4.0.0",
        "arr-flatten": "^1.1.0",
        "array-union": "^2.1.0",
        "array-uniq": "^2.1.0",
        "arrify": "^2.0.1",
        "bluebird": "^3.5.5",
        "chalk": "^2.4.2",
        "chokidar": "^3.0.2",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.2.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.0.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^4.1.1",
        "dot-prop": "^5.1.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^2.0.0",
        "esm": "^3.2.25",
        "figures": "^3.0.0",
        "find-up": "^4.1.0",
        "get-port": "^5.0.0",
        "globby": "^10.0.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.2",
        "is-observable": "^2.0.0",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.15",
        "loud-rejection": "^2.1.0",
        "make-dir": "^3.0.0",
        "matcher": "^2.0.0",
        "md5-hex": "^3.0.1",
        "meow": "^5.0.0",
        "micromatch": "^4.0.2",
        "ms": "^2.1.2",
        "observable-to-promise": "^1.0.0",
        "ora": "^3.4.0",
        "package-hash": "^4.0.0",
        "pkg-conf": "^3.1.0",
        "plur": "^3.1.1",
        "pretty-ms": "^5.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.13",
        "stack-utils": "^1.0.2",
        "strip-ansi": "^5.2.0",
        "strip-bom-buf": "^2.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^7.0.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^3.0.1",
        "write-file-atomic": "^3.0.0"
      },
      "devDependencies": {
        "@types/node": "^10.14.15",
        "cli-table3": "^0.5.1",
        "codecov": "^3.5.0",
        "delay": "^4.3.0",
        "execa": "^2.0.3",
        "get-stream": "^5.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^3.0.0",
        "lolex": "^4.2.0",
        "proxyquire": "^2.1.2",
        "react": "^16.9.0",
        "react-test-renderer": "^16.9.0",
        "replace-string": "^3.0.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.4.1",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.6.1",
        "temp-write": "^4.0.0",
        "touch": "^3.1.0",
        "ts-node": "^8.3.0",
        "typescript": "^3.5.3",
        "xo": "^0.24.0",
        "zen-observable": "^0.8.14"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        },
        "overrides": [
          {
            "files": "test/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          }
        ]
      },
      "tap": {
        "browser": false,
        "coverage-report": [
          "html",
          "lcov",
          "text"
        ],
        "esm": false,
        "files": [
          "test/*.js",
          "test/reporters/*.js",
          "test/integration/*.js"
        ],
        "flow": false,
        "jobs": 2,
        "jsx": false,
        "timeout": 300,
        "ts": false
      },
      "gitHead": "1c81c4bf37dc419be68be6875c2e663d2103f164",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@2.3.0",
      "_nodeVersion": "12.8.0",
      "_npmVersion": "6.10.3",
      "dist": {
        "integrity": "sha512-4VaaSnl13vpTZmqW3aMqioSolT0/ozRkjQxTLi3p8wtyRONuX/uLKL3uF0j50w2BNRoLsJqztnkX2h8xeVp2lg==",
        "shasum": "cac4d7f0a30077a852c6bf5bc7c0bc78c3021e63",
        "tarball": "https://registry.npmjs.org/ava/-/ava-2.3.0.tgz",
        "fileCount": 52,
        "unpackedSize": 242344,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdWUD1CRA9TVsSAnZWagAAE7UP/3h+yk2tFN6HBlw7787k\nOSvVVvOTZaO5sThaK3c6cI9qu80YFT7JQosSqzdONQDjyzEH3Fy358Q4Qa87\nvUnL+AsB3TKvkNOij7UoRV+JcAA5RNrX0K6vBDWSKRvodxjZZ3jSYbuC5J47\nZJxuzCcaF9YNH/kGKiN45x5vRy60zWdw+yRX+k6x54JqJsTDzORcC+KKk93E\nF34Sw210TfwYpAL+38TZvLVwn0qLLCu4+/wplVSMX+pRtIQPQbttnnq20HB7\nFdznVdnfNH7uy5+sssnq2zLr0DYC/NGrbE20xQu+sj+Ck11i43qiwvfFGMzs\nYUeLTnYtavJSJZZHx+SkD3bsBZi593f2qO8MRoijpoNw/S2/ssH5cj+t0A86\nvbPWiT6txPqOxjQX0TlQkLrWpctuPplCHrD6IETBmDPnOiHUx8PVHk8+lSpT\nv5cp7zC5hTD4YIajmiXhVXCzlCOKfs0xmfTNaH6P2GaEJ9rJykYKQFst4FOb\nFHRkcBJC8oUHO8Xm9LAaEeY6ELx9oYZyksgJIEex/1+xq0ExjnaSE3YvOaq5\nfpjm9XnsrIY4nVIW1k1zhLNFUMaaWn2iChvEAvCTej98apyXTxpXfN746B5M\nokwCh8R1nhk+PM7/XVBxskKhbaefH0M+FGIypuvxmExHJG9aXcxGjF1xcY87\nkIL1\r\n=DTyt\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCjbnEpBGund5qsLGoPbE4ISv8ofjLWDeTuNjTxUBcUNAIgFCirIDwNkxOXfhFvjH3k9t7ps921H6873+NAiOG7sYw="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_2.3.0_1566130420105_0.760683254524807"
      },
      "_hasShrinkwrap": false
    },
    "2.4.0": {
      "name": "ava",
      "version": "2.4.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=8.9.4 <9 || >=10.0.0 <11 || >=12.0.0"
      },
      "scripts": {
        "lint": "xo",
        "test:tap": "tap",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:typescript && npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@ava/babel-preset-stage-4": "^4.0.0",
        "@ava/babel-preset-transform-test-files": "^6.0.0",
        "@babel/core": "^7.6.0",
        "@babel/generator": "^7.6.0",
        "@concordance/react": "^2.0.0",
        "ansi-escapes": "^4.2.1",
        "ansi-styles": "^4.1.0",
        "arr-flatten": "^1.1.0",
        "array-union": "^2.1.0",
        "array-uniq": "^2.1.0",
        "arrify": "^2.0.1",
        "bluebird": "^3.5.5",
        "chalk": "^2.4.2",
        "chokidar": "^3.0.2",
        "chunkd": "^1.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.2.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.0.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^1.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.6.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^4.1.1",
        "dot-prop": "^5.1.0",
        "emittery": "^0.4.1",
        "empower-core": "^1.2.0",
        "equal-length": "^1.0.0",
        "escape-string-regexp": "^2.0.0",
        "esm": "^3.2.25",
        "figures": "^3.0.0",
        "find-up": "^4.1.0",
        "get-port": "^5.0.0",
        "globby": "^10.0.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.2",
        "is-observable": "^2.0.0",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.15",
        "loud-rejection": "^2.1.0",
        "make-dir": "^3.0.0",
        "matcher": "^2.0.0",
        "md5-hex": "^3.0.1",
        "meow": "^5.0.0",
        "micromatch": "^4.0.2",
        "ms": "^2.1.2",
        "observable-to-promise": "^1.0.0",
        "ora": "^3.4.0",
        "package-hash": "^4.0.0",
        "pkg-conf": "^3.1.0",
        "plur": "^3.1.1",
        "pretty-ms": "^5.0.0",
        "require-precompiled": "^0.1.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.13",
        "stack-utils": "^1.0.2",
        "strip-ansi": "^5.2.0",
        "strip-bom-buf": "^2.0.0",
        "supertap": "^1.0.0",
        "supports-color": "^7.0.0",
        "trim-off-newlines": "^1.0.1",
        "trim-right": "^1.0.1",
        "unique-temp-dir": "^1.0.0",
        "update-notifier": "^3.0.1",
        "write-file-atomic": "^3.0.0"
      },
      "devDependencies": {
        "@types/node": "^10.14.18",
        "cli-table3": "^0.5.1",
        "delay": "^4.3.0",
        "execa": "^2.0.4",
        "get-stream": "^5.1.0",
        "git-branch": "^2.0.1",
        "has-ansi": "^4.0.0",
        "lolex": "^4.2.0",
        "proxyquire": "^2.1.3",
        "react": "^16.9.0",
        "react-test-renderer": "^16.9.0",
        "replace-string": "^3.0.0",
        "signal-exit": "^3.0.0",
        "sinon": "^7.4.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.6.4",
        "temp-write": "^4.0.0",
        "touch": "^3.1.0",
        "ts-node": "^8.3.0",
        "typescript": "^3.6.3",
        "xo": "^0.24.0",
        "zen-observable": "^0.8.14"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        },
        "overrides": [
          {
            "files": "test/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          }
        ]
      },
      "tap": {
        "browser": false,
        "coverage-report": [
          "html",
          "lcov",
          "text"
        ],
        "esm": false,
        "files": [
          "test/*.js",
          "test/reporters/*.js",
          "test/integration/*.js"
        ],
        "flow": false,
        "jobs": 2,
        "jsx": false,
        "timeout": 300,
        "ts": false
      },
      "gitHead": "05f077e805bd1b3d58aa1e539d7e1e6a3f5c7042",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@2.4.0",
      "_nodeVersion": "12.9.0",
      "_npmVersion": "6.11.3",
      "dist": {
        "integrity": "sha512-CQWtzZZZeU2g4StojRv6MO9RIRi4sLxGSB9+3C3hv0ttUEG1tkJLTLyrBQeFS4WEeK12Z4ovE3f2iPVhSy8elA==",
        "shasum": "a3bd8b0e01d8826004c91de375eb2313ba5237c3",
        "tarball": "https://registry.npmjs.org/ava/-/ava-2.4.0.tgz",
        "fileCount": 53,
        "unpackedSize": 252851,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdfzWRCRA9TVsSAnZWagAAWgwP+gOlGEPcwKislFhjcaOR\nlkTgAS2aRmOqbXtRwebuJ2aJFm76DdvCo6RVYLC9gIESYmgArwF/cI7QBEgZ\ndsfySd+Hwjgs4WT3GduepRP8kcYLglrW/uG7aZb6C9Q2xfb0yZe/MDXahHpG\nheAcDXHLOHG9APoDlrYkjc1w6oCj4jwrw4I7X+7Mc4g+LSOQtG3ZMZzEBkQ5\n3uRPTuF8h+KyyKU78xewrD0JQxw9CN/JfSgRYmQzT2E269x6jYIGrWe/br3r\neYo2rbm21AXRdBPBDmgGoDmXqqD6IaZUkoSREbyfBjDDxMyjsl95vKVIAB/u\nf1nDw5zMBuGO8TTkXUg7YpZUZwd8OyxwQO21eCgDlGPs7LpcZnQ4zcFBkJ1o\njL/GoSmaAVm/UmAyKJ3gnSrCEhlpnHSgslbbbo42cSV8Pq1OaGst+wju3iI8\nJL1z7kMCADC/OJjc6HNbTsFtrYtnJke0VSKSKrJJBft0lSINQ1e9RcImwlU+\nFOIkjJdYKsFxsgBX48QkPD4wSCVRolPpQFk3oPV4D1QfGgjLmPtvujjcBHB1\neunFIpfjqdsUr5m3mKoHpCDS9oIw2VgU0gPmJ5q9E0IOWzCFdC6ugSWfUmLJ\n1Cs4jrIynftxpEv8GWT9D7uwaIiYe9C5WceMBpB9BG2u6+m10yn46wzqMzyU\niWvm\r\n=mcwx\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQC63Ss54Q2nOVNmkExXVaEsAXDp4Uhw5GwmEAHvRoY16gIgDeNw1sbCfPseijff3dfhJw+UwZy3r/q4KoPhqBXMhz4="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_2.4.0_1568617873341_0.2726275649524239"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0-beta.1": {
      "name": "ava",
      "version": "3.0.0-beta.1",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=13.5.0"
      },
      "scripts": {
        "lint": "xo",
        "test:tap": "tap",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:typescript && npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "ansi-styles": "^4.2.1",
        "arrify": "^2.0.1",
        "chalk": "^3.0.0",
        "chokidar": "^3.3.1",
        "chunkd": "^2.0.1",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.2.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^3.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.5.1",
        "equal-length": "^1.0.0",
        "figures": "^3.1.0",
        "globby": "^10.0.1",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.15",
        "matcher": "^2.1.0",
        "md5-hex": "^3.0.1",
        "ms": "^2.1.2",
        "ora": "^4.0.3",
        "p-map": "^3.0.0",
        "picomatch": "~2.1.1",
        "pkg-conf": "^3.1.0",
        "plur": "^3.1.1",
        "pretty-ms": "^5.1.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.16",
        "stack-utils": "^2.0.1",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.0.0",
        "write-file-atomic": "^3.0.1",
        "yargs": "^15.1.0"
      },
      "devDependencies": {
        "@ava/babel": "^0.7.0",
        "@types/node": "^10.17.13",
        "ansi-escapes": "^4.3.0",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.0",
        "get-stream": "^5.1.0",
        "lolex": "^5.1.2",
        "proxyquire": "^2.1.3",
        "react": "^16.12.0",
        "react-test-renderer": "^16.12.0",
        "replace-string": "^3.0.0",
        "sinon": "^8.0.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.5",
        "temp-write": "^4.0.0",
        "tempy": "^0.3.0",
        "touch": "^3.1.0",
        "ts-node": "^8.5.4",
        "typescript": "^3.7.4",
        "xo": "^0.25.3",
        "zen-observable": "^0.8.15"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        },
        "overrides": [
          {
            "files": "test/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          },
          {
            "files": "test/fixture/**/*.js",
            "rules": {
              "import/no-extraneous-dependencies": "off"
            }
          }
        ]
      },
      "tap": {
        "browser": false,
        "coverage-report": [
          "html",
          "lcov",
          "text"
        ],
        "esm": false,
        "files": [
          "test/*.js",
          "test/reporters/*.js",
          "test/integration/*.js"
        ],
        "flow": false,
        "jobs": 2,
        "jsx": false,
        "timeout": 300,
        "ts": false
      },
      "readme": "# <img src=\"media/header.png\" title=\"AVA\" alt=\"AVA logo\" width=\"530\">\n\n[![Build Status](https://travis-ci.org/avajs/ava.svg?branch=master)](https://travis-ci.org/avajs/ava)  [![Coverage Status](https://codecov.io/gh/avajs/ava/branch/master/graph/badge.svg)](https://codecov.io/gh/avajs/ava/branch/master) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo) [![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/ava)\n[![Mentioned in Awesome Node.js](https://awesome.re/mentioned-badge.svg)](https://github.com/sindresorhus/awesome-nodejs)\n\nTesting can be a drag. AVA helps you get it done. AVA is a test runner for Node.js with a concise API, detailed error output, embrace of new language features and process isolation that let you write tests more effectively. So you can ship more awesome code. 🚀\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\nRead our [contributing guide](contributing.md) if you're looking to contribute (issues / PRs / etc).\n\n![](media/mini-reporter.gif)\n\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](./docs/01-writing-tests.md#process-isolation)\n- [Write your tests using the latest JavaScript syntax](https://github.com/avajs/babel)\n- [Promise support](./docs/01-writing-tests.md#promise-support)\n- [Async function support](./docs/01-writing-tests.md#async-function-support)\n- [Observable support](./docs/01-writing-tests.md#observable-support)\n- [Enhanced assertion messages](./docs/03-assertions.md#enhanced-assertion-messages)\n- [Automatic parallel test runs in CI](#parallel-runs-in-ci)\n- [TAP reporter](./docs/05-command-line.md#tap-reporter)\n\n\n## Usage\n\nTo install and set up AVA, run:\n\n```console\nnpm init ava\n```\n\nYour `package.json` will then look like this (exact version notwithstanding):\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"^1.0.0\"\n\t}\n}\n```\n\nOr if you prefer using Yarn:\n\n```console\nyarn add ava --dev\n```\n\nAlternatively you can install `ava` manually:\n\n```console\nnpm install --save-dev ava\n```\n\nDon't forget to configure the `test` script in your `package.json` as per above.\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nconst test = require('ava');\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\tt.is(await bar, 'bar');\n});\n```\n\n### Running your tests\n\n```console\nnpm test\n```\n\nOr with `npx`:\n\n```console\nnpx ava\n```\n\nRun with the `--watch` flag to enable AVA's [watch mode](docs/recipes/watch-mode.md):\n\n```console\nnpx ava --watch\n```\n\n## Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## Highlights\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n### Parallel runs in CI\n\nAVA automatically detects whether your CI environment supports parallel builds. Each build will run a subset of all test files, while still making sure all tests get executed. See the [`ci-parallel-vars`](https://www.npmjs.com/package/ci-parallel-vars) package for a list of supported CI environments.\n\n## Documentation\n\nPlease see the [files in the `docs` directory](./docs):\n\n* [Writing tests](./docs/01-writing-tests.md)\n* [Execution context](./docs/02-execution-context.md)\n* [Assertions](./docs/03-assertions.md)\n* [Snapshot testing](./docs/04-snapshot-testing.md)\n* [Command line (CLI)](./docs/05-command-line.md)\n* [Configuration](./docs/06-configuration.md)\n* [Test timeouts](./docs/07-test-timeouts.md)\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/08-common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n### Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Flow](docs/recipes/flow.md)\n- [Configuring Babel](https://github.com/avajs/babel)\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [JSPM and SystemJS](docs/recipes/jspm-systemjs.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with VSCode](docs/recipes/debugging-with-vscode.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n- [Testing web apps using Puppeteer](docs/recipes/puppeteer.md)\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [`/ˈeɪvə/`](media/pronunciation.m4a?raw=true): Ay (f**a**ce, m**a**de) V (**v**ie, ha**v**e) A (comm**a**, **a**go)\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Support\n\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/ava)\n- [Spectrum](https://spectrum.chat/ava)\n- [Twitter](https://twitter.com/ava__js)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) - Lint rules for AVA tests\n- [sublime-ava](https://github.com/avajs/sublime-ava) - Snippets for AVA tests\n- [atom-ava](https://github.com/avajs/atom-ava) - Snippets for AVA tests\n- [vscode-ava](https://github.com/samverschueren/vscode-ava) - Snippets for AVA tests\n- [gulp-ava](https://github.com/avajs/gulp-ava) - Run tests with gulp\n- [grunt-ava](https://github.com/avajs/grunt-ava) - Run tests with grunt\n- [More…](https://github.com/avajs/awesome-ava#packages)\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [AVA Casts](http://avacasts.com)\n- [Do you like AVA? Donate here!](https://opencollective.com/ava)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus) | [![Vadim Demedes](https://github.com/vadimdemedes.png?size=100)](https://github.com/vadimdemedes)\n---|---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](http://sindresorhus.com) | [Vadim Demedes](https://github.com/vadimdemedes)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://ava.li\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n",
      "readmeFilename": "readme.md",
      "gitHead": "7c352db5b929ac9e59daf9dd12f6387d38639d1a",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.0.0-beta.1",
      "_nodeVersion": "12.14.0",
      "_npmVersion": "6.13.4",
      "dist": {
        "integrity": "sha512-LWb0QzbOpDbYr41Gvrn3BCwJ/bs+1Vlmfc4hvSo54Fy76KpsltDpDdWeQOkMOKbly5J509bgE3hXRpcYscQfdA==",
        "shasum": "807155f11f72ec7ff32c6748684c63d6b8fe6aff",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.0.0-beta.1.tgz",
        "fileCount": 44,
        "unpackedSize": 235455,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeEhUjCRA9TVsSAnZWagAAEvYP/2QQ/WpSP22wFWFx/TbT\nMpLsKxsuXmSENtfjodBX5jen5ezc2+i8sHn4HyTbr80EulNXGk8MispB6wrE\ntFODbLP7iT1LnTkWHeVBuN9JRrPONNRt35a/taNUjryawSyn0+wmu/qWgUaD\nQ+Hl4a7yB8kOB3DG8w33L8YX0PpV6S2AZulGJz4B9Pa/2cROsMcMBL527yIM\nyCr1Sk0ocyUfY8Mv4492Kfs/9dddnjdU0D2KYCSKUGnOUvvtNL+CLh2c/Kl9\n0L9fNJp2kgD5kmB4nPfkjDeB3O5U3JRMuyrrtphamYnBR7MAeu0c3CNWVWU4\nj89G1RZ7mroWLYjNBLfSfv6bdPgOYzZFVpn1RzEdaCsMDhe2/Fnt6AzXNTiC\n8iXQ39o9J6tjyQCggnebobJHY9DbRpIQ2q9MEzYRTkmFvTwba6DzbjeFntCG\nYzAH5y7UDtMZd/GqhcKc6aQgXqHNeNNujaT3RuSnPzUVAzfFPd4c5CqYcHDB\nOr1E6CEw2auUYiIGiki/6jPjCWAWhMIG2valjclfC6JEsP/Tw8OvO9EAmpB3\nQJdIRJyx3PurDTkQl9tODxF47WX+msq/mwXiXuSkUmtdHMPlx6bLh9XBUGld\nLHIjQD1LMTaX0m2oVJCxJEelSvjuFpha4epIbIQswtUnsSAOgZLc1s3gBbZE\npsoj\r\n=dvlQ\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFnE7POukpSL9o+7Q6D/gg0PrZmxYybVwpCUo9iY1WlYAiBK1EOOWsqUFJKdzR/B/579MJB6VCIbkDgkr4BvXfsKEA=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.0.0-beta.1_1578243363518_0.6790373970006462"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0-beta.2": {
      "name": "ava",
      "version": "3.0.0-beta.2",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=13.5.0"
      },
      "scripts": {
        "lint": "xo",
        "test:tap": "tap",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:typescript && npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "ansi-styles": "^4.2.1",
        "arrify": "^2.0.1",
        "chalk": "^3.0.0",
        "chokidar": "^3.3.1",
        "chunkd": "^2.0.1",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.2.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^3.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.5.1",
        "equal-length": "^1.0.0",
        "figures": "^3.1.0",
        "globby": "^11.0.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.15",
        "matcher": "^2.1.0",
        "md5-hex": "^3.0.1",
        "ms": "^2.1.2",
        "ora": "^4.0.3",
        "p-map": "^3.0.0",
        "picomatch": "^2.2.1",
        "pkg-conf": "^3.1.0",
        "plur": "^3.1.1",
        "pretty-ms": "^5.1.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.16",
        "stack-utils": "^2.0.1",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.0.0",
        "write-file-atomic": "^3.0.1",
        "yargs": "^15.1.0"
      },
      "devDependencies": {
        "@ava/babel": "^0.7.0",
        "@types/node": "^10.17.13",
        "ansi-escapes": "^4.3.0",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.0",
        "get-stream": "^5.1.0",
        "lolex": "^5.1.2",
        "proxyquire": "^2.1.3",
        "react": "^16.12.0",
        "react-test-renderer": "^16.12.0",
        "replace-string": "^3.0.0",
        "sinon": "^8.0.4",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.5",
        "temp-write": "^4.0.0",
        "tempy": "^0.3.0",
        "touch": "^3.1.0",
        "ts-node": "^8.6.1",
        "typescript": "^3.7.4",
        "xo": "^0.25.3",
        "zen-observable": "^0.8.15"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        },
        "overrides": [
          {
            "files": "test/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          },
          {
            "files": "test/fixture/**/*.js",
            "rules": {
              "import/no-extraneous-dependencies": "off"
            }
          }
        ]
      },
      "tap": {
        "browser": false,
        "coverage-report": [
          "html",
          "lcov",
          "text"
        ],
        "esm": false,
        "files": [
          "test/*.js",
          "test/reporters/*.js",
          "test/integration/*.js"
        ],
        "flow": false,
        "jobs": 2,
        "jsx": false,
        "timeout": 300,
        "ts": false
      },
      "readme": "# <img src=\"media/header.png\" title=\"AVA\" alt=\"AVA logo\" width=\"530\">\n\n[![Build Status](https://travis-ci.org/avajs/ava.svg?branch=master)](https://travis-ci.org/avajs/ava)  [![Coverage Status](https://codecov.io/gh/avajs/ava/branch/master/graph/badge.svg)](https://codecov.io/gh/avajs/ava/branch/master) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo) [![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/ava)\n[![Mentioned in Awesome Node.js](https://awesome.re/mentioned-badge.svg)](https://github.com/sindresorhus/awesome-nodejs)\n\nTesting can be a drag. AVA helps you get it done. AVA is a test runner for Node.js with a concise API, detailed error output, embrace of new language features and process isolation that let you write tests more effectively. So you can ship more awesome code. 🚀\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\nRead our [contributing guide](contributing.md) if you're looking to contribute (issues / PRs / etc).\n\n![](media/mini-reporter.gif)\n\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](./docs/01-writing-tests.md#process-isolation)\n- [Write your tests using the latest JavaScript syntax](https://github.com/avajs/babel)\n- [Promise support](./docs/01-writing-tests.md#promise-support)\n- [Async function support](./docs/01-writing-tests.md#async-function-support)\n- [Observable support](./docs/01-writing-tests.md#observable-support)\n- [Enhanced assertion messages](./docs/03-assertions.md#enhanced-assertion-messages)\n- [Automatic parallel test runs in CI](#parallel-runs-in-ci)\n- [TAP reporter](./docs/05-command-line.md#tap-reporter)\n\n\n## Usage\n\nTo install and set up AVA, run:\n\n```console\nnpm init ava\n```\n\nYour `package.json` will then look like this (exact version notwithstanding):\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"^1.0.0\"\n\t}\n}\n```\n\nOr if you prefer using Yarn:\n\n```console\nyarn add ava --dev\n```\n\nAlternatively you can install `ava` manually:\n\n```console\nnpm install --save-dev ava\n```\n\nDon't forget to configure the `test` script in your `package.json` as per above.\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nconst test = require('ava');\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\tt.is(await bar, 'bar');\n});\n```\n\n### Running your tests\n\n```console\nnpm test\n```\n\nOr with `npx`:\n\n```console\nnpx ava\n```\n\nRun with the `--watch` flag to enable AVA's [watch mode](docs/recipes/watch-mode.md):\n\n```console\nnpx ava --watch\n```\n\n## Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## Highlights\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n### Parallel runs in CI\n\nAVA automatically detects whether your CI environment supports parallel builds. Each build will run a subset of all test files, while still making sure all tests get executed. See the [`ci-parallel-vars`](https://www.npmjs.com/package/ci-parallel-vars) package for a list of supported CI environments.\n\n## Documentation\n\nPlease see the [files in the `docs` directory](./docs):\n\n* [Writing tests](./docs/01-writing-tests.md)\n* [Execution context](./docs/02-execution-context.md)\n* [Assertions](./docs/03-assertions.md)\n* [Snapshot testing](./docs/04-snapshot-testing.md)\n* [Command line (CLI)](./docs/05-command-line.md)\n* [Configuration](./docs/06-configuration.md)\n* [Test timeouts](./docs/07-test-timeouts.md)\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/08-common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n### Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Flow](docs/recipes/flow.md)\n- [Configuring Babel](https://github.com/avajs/babel)\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [JSPM and SystemJS](docs/recipes/jspm-systemjs.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with VSCode](docs/recipes/debugging-with-vscode.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n- [Testing web apps using Puppeteer](docs/recipes/puppeteer.md)\n- [Testing web apps using Selenium WebDriverJS](docs/recipes/testing-with-selenium-webdriverjs.md)\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [`/ˈeɪvə/`](media/pronunciation.m4a?raw=true): Ay (f**a**ce, m**a**de) V (**v**ie, ha**v**e) A (comm**a**, **a**go)\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Support\n\n- [Stack Overflow](https://stackoverflow.com/questions/tagged/ava)\n- [Spectrum](https://spectrum.chat/ava)\n- [Twitter](https://twitter.com/ava__js)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) - Lint rules for AVA tests\n- [sublime-ava](https://github.com/avajs/sublime-ava) - Snippets for AVA tests\n- [atom-ava](https://github.com/avajs/atom-ava) - Snippets for AVA tests\n- [vscode-ava](https://github.com/samverschueren/vscode-ava) - Snippets for AVA tests\n- [gulp-ava](https://github.com/avajs/gulp-ava) - Run tests with gulp\n- [grunt-ava](https://github.com/avajs/grunt-ava) - Run tests with grunt\n- [More…](https://github.com/avajs/awesome-ava#packages)\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [AVA Casts](http://avacasts.com)\n- [Do you like AVA? Donate here!](https://opencollective.com/ava)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus) | [![Vadim Demedes](https://github.com/vadimdemedes.png?size=100)](https://github.com/vadimdemedes)\n---|---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](http://sindresorhus.com) | [Vadim Demedes](https://github.com/vadimdemedes)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://ava.li\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n",
      "readmeFilename": "readme.md",
      "gitHead": "ad27246dd0938a24974eaccc76189fe3ee7a8d18",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.0.0-beta.2",
      "_nodeVersion": "12.14.1",
      "_npmVersion": "6.13.6",
      "dist": {
        "integrity": "sha512-EicEIg4N/t/wTSY3goARwZESRIeqWv1pNbeehgd0QizLlHL8unWwh1o9mSF3qyMLdI9iVZDIJJHnRhi1LMz4QA==",
        "shasum": "69d385ea1c0507d1bb9619cc6f34f059f12bfaa9",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.0.0-beta.2.tgz",
        "fileCount": 44,
        "unpackedSize": 235773,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeGzzcCRA9TVsSAnZWagAAwVEP/3u7fb9fDFC/MMgWJdbT\nPPNdcDw2Ad6lTXt6yD7s2qgopARirNFUkjXIemhQavzPqX/vr5CmHw4Ivj7+\n3X6OtCLRDWPB1QUDkt1X/+F3ak5JjF371kBXpXbbp3KheOM/74fpIk8NKCMN\nHkGJ+c8XevZN4vfqRXdwQ3XlKBSVJY4etQDnkdhIqsT7GTF4Hceq4/zz2PPn\nNAeOn35MuTb5ZMRf85QV8uSAWIZ0LAj9WPj6uC3mI71ybXn0sFBgo7jTkVO9\nKCaoFDWWL22wn83Y2SLPEitO2WNiH3gUI2EBb/yj7/BOnXGoI8jzW2Zn0ZFi\nVlJ52IG2JEPK5ZHwQM1W6u6vcnNJar0j8RGdlVwoUz28UcDSgx96mHWLD0JE\nI1E11IGR7xfa8UU9aZS7LlMOPH4tO6HfLjS5NZA6PiqqzNGtwfZfegDm3ZU/\naRHRQmIColhkyauO1/dh6+ONjfwycOc43QnIH33A9RQL83IU+3PpOpcXdygW\nzv23BOiJKNA5r4dNIyo74qJVCw3jK4h78vd6lLevbgjeS2Fkub28xbycNCvz\numUgcJaMKs2ursWrNxBbhuKsWw8CTwRHdPRwmfm99HmXv4ro2ecOgkjhm+QV\nBFEOLns94+mkG0jSQ6nt13lwauCVZ4XI81pcJZItuLH1fSCqqCXakroOSMUm\n0KDj\r\n=fj1h\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCcF0oUBaYit7SFvuGkOUvvTBEGCg0QmVlNIUulHjBuLAIhAJqCvTso/tDXVVX6Pf0d6fr+hagVEfycK67jn7fRacRr"
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.0.0-beta.2_1578843355921_0.6302055037497654"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0": {
      "name": "ava",
      "version": "3.0.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=13.5.0"
      },
      "scripts": {
        "lint": "xo",
        "test:tap": "tap",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:typescript && npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "chalk": "^3.0.0",
        "chokidar": "^3.3.1",
        "chunkd": "^2.0.1",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.2.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^3.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.5.1",
        "equal-length": "^1.0.0",
        "figures": "^3.1.0",
        "globby": "^11.0.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.15",
        "matcher": "^2.1.0",
        "md5-hex": "^3.0.1",
        "ms": "^2.1.2",
        "ora": "^4.0.3",
        "p-map": "^3.0.0",
        "picomatch": "^2.2.1",
        "pkg-conf": "^3.1.0",
        "plur": "^3.1.1",
        "pretty-ms": "^5.1.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.16",
        "stack-utils": "^2.0.1",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.0.0",
        "write-file-atomic": "^3.0.1",
        "yargs": "^15.1.0"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.0",
        "@types/node": "^10.17.13",
        "ansi-escapes": "^4.3.0",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.0",
        "get-stream": "^5.1.0",
        "lolex": "^5.1.2",
        "p-event": "^4.1.0",
        "proxyquire": "^2.1.3",
        "react": "^16.12.0",
        "react-test-renderer": "^16.12.0",
        "replace-string": "^3.0.0",
        "sinon": "^8.1.0",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.6",
        "temp-write": "^4.0.0",
        "tempy": "^0.3.0",
        "touch": "^3.1.0",
        "ts-node": "^8.6.2",
        "typescript": "^3.7.5",
        "xo": "^0.25.3",
        "zen-observable": "^0.8.15"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        },
        "overrides": [
          {
            "files": "test/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          },
          {
            "files": "test/fixture/**/*.js",
            "rules": {
              "import/no-extraneous-dependencies": "off"
            }
          }
        ]
      },
      "tap": {
        "browser": false,
        "coverage-report": [
          "html",
          "lcov",
          "text"
        ],
        "esm": false,
        "files": [
          "test/*.js",
          "test/reporters/*.js",
          "test/integration/*.js"
        ],
        "flow": false,
        "jobs": 2,
        "jsx": false,
        "timeout": 300,
        "ts": false
      },
      "gitHead": "b4cfc8dd9b74a0899a1186b749c380da01245985",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.0.0",
      "_nodeVersion": "12.14.1",
      "_npmVersion": "6.13.6",
      "dist": {
        "integrity": "sha512-ev72DZrWJRdZbvDDjbAwrfzJ0KEX5cDM5XNtIrgQjJmMR6yLM/T/WJ2jWF21ylrRdMbdG6E3Wrpa+psvzqC4OA==",
        "shasum": "1a80da2d8298d26f0f255964c1791b83b6f4979d",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.0.0.tgz",
        "fileCount": 45,
        "unpackedSize": 236662,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeJGxuCRA9TVsSAnZWagAAUvcP+wdgQSoWVXXcni930fjX\n0/cZuKrANJq8wavVZgHrxJwcIpvfIzPBA4/LYftUMyCuwgWsV3UUWOcpE2LY\n0vlynLy9RYuxpqIpZem3sQY8U20fcNbS0uM18w3pJ3t4yFYw5n89zQDK6yRq\nCMux7bbgPTO4YoY+ki+Jqln5WW+8Y/RgWfFky3ik0CucypjY/QrBz1sN6CVx\nutcT49RLZLZdlZOkNw5/jbzM8gZTDfJbCnBfJe2eEGi9lqVNC95y9GsIIyEY\nRVP+lgzVlbg7ItxXxlTUxdZeSSvgMz9fbFixSRZD9uef6nWme3+y3HK08sO5\n2yrzZfflNRywjEUq7LLKXefxpFXEp9WcUyQx38u0GzB1qlsNjvl57ppeYCan\nWZClIajNbHuSE3Y0W3vzMvDHLsho+I1LRtahMsSIMT24bKSl1T3PmG+KwJpv\nUjzduHhWuubLyY0jEwpsbSTyo8/VhCqGc3WNH5DqFMIbmgQQwABwjUIY5dP+\nCTvJoXpW1TLHcL5JBGhCZ37iemPpXnRhXlrZ2yDt53hvGYjks0Ux6xFjNgUG\n/51s+xYBQMuc5CrzdOMBiGlme2r8E1A0//PmiurZN1yUgCSjjO0xvL7xdWwj\nMUueoanUG2Zm77VR48xvEfX9AYDpeMpFPC2aeClcYb7HpfGrfVKW7SLNtBX1\nnBWW\r\n=GbNH\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHAZZQMmH+SvgpqWobkKmRN6dH1BtEDRdEDCMGuzyAj0AiEAqgDT9lQcShNXLAUN4Fry9GVjGL08ewGyY6Onutcq1VM="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.0.0_1579445357647_0.21518849429998488"
      },
      "_hasShrinkwrap": false
    },
    "3.1.0": {
      "name": "ava",
      "version": "3.1.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=13.5.0"
      },
      "scripts": {
        "lint": "xo",
        "test:tap": "tap",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:typescript && npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "chalk": "^3.0.0",
        "chokidar": "^3.3.1",
        "chunkd": "^2.0.1",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.2.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^3.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.5.1",
        "equal-length": "^1.0.0",
        "figures": "^3.1.0",
        "globby": "^11.0.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.15",
        "matcher": "^2.1.0",
        "md5-hex": "^3.0.1",
        "ms": "^2.1.2",
        "ora": "^4.0.3",
        "p-map": "^3.0.0",
        "picomatch": "^2.2.1",
        "pkg-conf": "^3.1.0",
        "plur": "^3.1.1",
        "pretty-ms": "^5.1.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.16",
        "stack-utils": "^2.0.1",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.0.0",
        "write-file-atomic": "^3.0.1",
        "yargs": "^15.1.0"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.0",
        "@types/node": "^10.17.13",
        "ansi-escapes": "^4.3.0",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.0",
        "get-stream": "^5.1.0",
        "lolex": "^5.1.2",
        "p-event": "^4.1.0",
        "proxyquire": "^2.1.3",
        "react": "^16.12.0",
        "react-test-renderer": "^16.12.0",
        "replace-string": "^3.0.0",
        "sinon": "^8.1.0",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.6",
        "temp-write": "^4.0.0",
        "tempy": "^0.3.0",
        "touch": "^3.1.0",
        "ts-node": "^8.6.2",
        "typescript": "^3.7.5",
        "xo": "^0.25.3",
        "zen-observable": "^0.8.15"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        },
        "overrides": [
          {
            "files": "test/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          },
          {
            "files": "test/fixture/**/*.js",
            "rules": {
              "import/no-extraneous-dependencies": "off"
            }
          }
        ]
      },
      "tap": {
        "browser": false,
        "coverage-report": [
          "html",
          "lcov",
          "text"
        ],
        "esm": false,
        "files": [
          "test/*.js",
          "test/reporters/*.js",
          "test/integration/*.js"
        ],
        "flow": false,
        "jobs": 2,
        "jsx": false,
        "timeout": 300,
        "ts": false
      },
      "gitHead": "56338dcb77246b5eca3c01e24d1cb6d66da8f71f",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.1.0",
      "_nodeVersion": "12.14.1",
      "_npmVersion": "6.13.6",
      "dist": {
        "integrity": "sha512-SWMJT/CiS4KAenKRtgwBFGmHSxqI/1ANqYXTDCif9uyOjspJm3wLleqgdoyyr6N8S2E/T2ALSpUIbrqEcKsJgA==",
        "shasum": "20d4a434a7150ffaf34a2b5b45f223b3d115e164",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.1.0.tgz",
        "fileCount": 45,
        "unpackedSize": 237687,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeLaqzCRA9TVsSAnZWagAA6o0P/3yzFJ2LZPVB9Tp8x/QO\n8Zod+pwEvqrYwKERM/jLLAU8F2XgzBQKBuzvKvPcVexn93jh/xWrYvo+XBhd\nK3JiPQ1oBdtGFdwFgisBEBE0WJv7BVzXOXe057wBdn0irRFsyxSkCOyEL8TE\nDKDIXY3GzFf1eRdREeETYIDThQE4EHfJ2c1P/KE1xT4UazUgYzI7mqAxLsDW\ncR0XsaYbENX1iyeRxDevrGEU53AkISRbEglUJqw+89GQiSF2ltOTMzaGF0KQ\nhkJDgUNA9SBdKSG28Ta+fTwmPw2WJo/UntafZDmErUPSakXuKJV7Q5Ttf83m\npB8xrr/8jnwIxcDfW3nsViJaQJYI1lNu6eVGoN1tQmeAX30CLrpZVNAZI53D\nrtI+A6vvyyulV6IMnB7TSnIFQPXpOSp3lavpcNBhwhaOyoptfzJbjFpNvp6+\n6E94CVgVj1m2RrtHdiJ97A63QWzZRh/OzaqPWTUaPNm8WjCzpDTFmn+7UEr3\nJTmh+2BU3uBBy7+uAqtfutpV6SnhoQQTF+kZn4RzzoZFr6Tw8GEEM2eEAx5L\nzWBwUxaG2472NwDtax3iTJDMcJUj1G/JO3Zq44J0ccUv5/JzcGOST/cDDpNM\nO012pPwYwKy8KAcafc4L4I4UoGGnRAAksTIL/HGJRQWqxW3FfhBiazSMQB7A\ntbuV\r\n=obBC\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHXZATkk6CLvd1l5p5eZLJLs3QvozGY+SYC/DIUicEaHAiEA1lRp3R/ORI5z2/CbJPx8rp1dWY7mI46rjwJn5vAVt3s="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.1.0_1580051122048_0.34935568826641306"
      },
      "_hasShrinkwrap": false
    },
    "3.2.0": {
      "name": "ava",
      "version": "3.2.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=13.5.0"
      },
      "scripts": {
        "lint": "xo",
        "test:tap": "tap",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:typescript && npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "chalk": "^3.0.0",
        "chokidar": "^3.3.1",
        "chunkd": "^2.0.1",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.2.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^3.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.5.1",
        "equal-length": "^1.0.0",
        "figures": "^3.1.0",
        "globby": "^11.0.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.15",
        "matcher": "^2.1.0",
        "md5-hex": "^3.0.1",
        "ms": "^2.1.2",
        "ora": "^4.0.3",
        "p-map": "^3.0.0",
        "picomatch": "^2.2.1",
        "pkg-conf": "^3.1.0",
        "plur": "^3.1.1",
        "pretty-ms": "^5.1.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.16",
        "stack-utils": "^2.0.1",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.0.0",
        "write-file-atomic": "^3.0.1",
        "yargs": "^15.1.0"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.0",
        "@types/node": "^10.17.13",
        "ansi-escapes": "^4.3.0",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.0",
        "get-stream": "^5.1.0",
        "lolex": "^5.1.2",
        "p-event": "^4.1.0",
        "proxyquire": "^2.1.3",
        "react": "^16.12.0",
        "react-test-renderer": "^16.12.0",
        "replace-string": "^3.0.0",
        "sinon": "^8.1.0",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.6",
        "temp-write": "^4.0.0",
        "tempy": "^0.3.0",
        "touch": "^3.1.0",
        "ts-node": "^8.6.2",
        "typescript": "^3.7.5",
        "xo": "^0.25.3",
        "zen-observable": "^0.8.15"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        },
        "overrides": [
          {
            "files": "test/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          },
          {
            "files": "test/fixture/**/*.js",
            "rules": {
              "import/no-extraneous-dependencies": "off"
            }
          }
        ]
      },
      "tap": {
        "browser": false,
        "coverage-report": [
          "html",
          "lcov",
          "text"
        ],
        "esm": false,
        "files": [
          "test/*.js",
          "test/reporters/*.js",
          "test/integration/*.js"
        ],
        "flow": false,
        "jobs": 2,
        "jsx": false,
        "timeout": 300,
        "ts": false
      },
      "gitHead": "ea05758c84a11b3111efb5db2351156179e139db",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.2.0",
      "_nodeVersion": "12.14.1",
      "_npmVersion": "6.13.6",
      "dist": {
        "integrity": "sha512-Jf2DlzrDp83f8OcyN0fNcT6QX1ORk3E/bCxBrwPxbh3Szg8eA03QjK/ZYjAa6OHIEWBxZuuT7x7kupgrUo7HVQ==",
        "shasum": "ab019f211c24f5d732b26babb7c75635012d3b83",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.2.0.tgz",
        "fileCount": 45,
        "unpackedSize": 239163,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeNvvPCRA9TVsSAnZWagAAdhgP/2BgmFqGYG+t/lzRQXjy\n8Fbm6ZqE5DqJL9VTDlV3j0ktq7bsYLn3HmfPrhTffoOh5bIjGp7KvqhGnqn7\nBQaNndZMuple5UvTU1kG38Qqxp+8HYgIQHx3C//hkXliUuWA+wFS9ps/BK1d\nHQ/0dQI4GaNMisDQcceK5uYz7cmGTryw1fbDNEHxwJjeE1CWBvLOwHZ1Brn4\nOWD1vJ7zUfJi726CSeJLX5RXdWDoUQsbcLmIweEH7UjNnHYvAl5sHAFq8Pab\ngb7po1bvUtrOFpeJ6q3+evhRgkcKUSpmN0JXds/Qi3xY8KSC1fcEpjNSkSa0\nnzcK1V2rBBuMumoOkovTppzPO+Pxm/EqSWqz3cInaGk0McQCXhTLjwf4gH8F\nCWiBY1CUhteQKOe9QlyZU+7634veGYCiXusReXH3kaS7RMJCko0Yd07+rZGs\n6Z5FAW9kKyIMeCXEeI5qcPTHZKvkvQ2bo/iIEg+VaS/m93TCm9f/ZHZx+FM4\nREqbPP+2CqBVZDYfUetLgoo44w2OAE3CodyFcI8QiCFalkBr3U23wb6y+8Lw\nh35fq/Jv4fFJjwznBofBLWmDwGfuYVi1ZJGyM2FpyeJHhTN5xkjgAu2BdqB1\ntl3JrmVUsDUU5hLgVP7oqzRflDLIuZpY7IguxmB93GM3ZqwGP3UQ5koSYZgM\ny7FP\r\n=o/Ws\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQClXyFjp11eNGD1fPvkQJ/ppJHOZfEdm4qdYTR0cRZz/wIhALhhSr/6KnqGDdRmReQwj6iyhStjQebNARARxFIdwpE6"
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.2.0_1580661711111_0.8462914399607935"
      },
      "_hasShrinkwrap": false
    },
    "3.3.0": {
      "name": "ava",
      "version": "3.3.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=13.5.0"
      },
      "scripts": {
        "lint": "xo",
        "test:tap": "tap",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:typescript && npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "chalk": "^3.0.0",
        "chokidar": "^3.3.1",
        "chunkd": "^2.0.1",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.2.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^3.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.5.1",
        "equal-length": "^1.0.0",
        "figures": "^3.1.0",
        "globby": "^11.0.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.15",
        "matcher": "^2.1.0",
        "md5-hex": "^3.0.1",
        "ms": "^2.1.2",
        "ora": "^4.0.3",
        "p-map": "^3.0.0",
        "picomatch": "^2.2.1",
        "pkg-conf": "^3.1.0",
        "plur": "^3.1.1",
        "pretty-ms": "^5.1.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.16",
        "stack-utils": "^2.0.1",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.0.0",
        "write-file-atomic": "^3.0.1",
        "yargs": "^15.1.0"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@types/node": "^10.17.13",
        "ansi-escapes": "^4.3.0",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.0",
        "get-stream": "^5.1.0",
        "lolex": "^5.1.2",
        "p-event": "^4.1.0",
        "proxyquire": "^2.1.3",
        "react": "^16.12.0",
        "react-test-renderer": "^16.12.0",
        "replace-string": "^3.0.0",
        "sinon": "^8.1.0",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.6",
        "temp-write": "^4.0.0",
        "tempy": "^0.3.0",
        "touch": "^3.1.0",
        "ts-node": "^8.6.2",
        "typescript": "^3.7.5",
        "xo": "^0.25.3",
        "zen-observable": "^0.8.15"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        },
        "overrides": [
          {
            "files": "test/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          },
          {
            "files": "test/fixture/**/*.js",
            "rules": {
              "import/no-extraneous-dependencies": "off"
            }
          }
        ]
      },
      "tap": {
        "browser": false,
        "coverage-report": [
          "html",
          "lcov",
          "text"
        ],
        "esm": false,
        "files": [
          "test/*.js",
          "test/reporters/*.js",
          "test/integration/*.js"
        ],
        "flow": false,
        "jobs": 2,
        "jsx": false,
        "timeout": 300,
        "ts": false
      },
      "gitHead": "c166e050ac9f2d1267c0dfa76c11d8451a3f361c",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.3.0",
      "_nodeVersion": "12.14.1",
      "_npmVersion": "6.13.6",
      "dist": {
        "integrity": "sha512-RaH6jpiS/9ZdIuP1QkyhHvhprk0h38LVdkkpL7Mw25XR3z/6w1N3Nq9O2qm3awnw38CfIztmipzkv+671nWH2w==",
        "shasum": "f95d9630e0811e7c03cbd1fa1316a9c8a872c6bb",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.3.0.tgz",
        "fileCount": 46,
        "unpackedSize": 239768,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeQCoiCRA9TVsSAnZWagAA1nsP/2v21/PS6AFZD4LQvlJW\nLkGMyU3vTzaSw97ly7lfJ4C6z/7WRIO6e3ffcgJ17dFs+KLEZDpc9plf4eOH\n1kMHFocvE89rH1NL1gPjwHhE10v4ARvKYAVqA9zQpYNinolhUzrUVp4uFCH6\nsBWqfqNmbkoxlRvlVc7q43GTKEKin38uWLPNlKh3I9HYOclt+mlyaOHXTGT7\nLjX1DWHCJO1pitenOaBRnRHOFEI93TjHhuhrsSLkCf104jtik8m42FQzh7n9\nwS+8k39QQjAEcvtZ/JCQ3IO8awvyzK49DMMUypms+YMdP3GWsF8T27mv0E2Q\n9Mbj7rILd+9e1y3Xcn0ShGej9k2YXTa89+EOc4B3d5SCtCxPQdgEAkiqqQ4I\nv5bxjKAKWpaXBxKzDHFZbYonzPZQWMzTAnK0sU7ug/peTAOgprptz0ByIpqx\nBAn4sXK6KFSB5XRILp5/gsjKN/EUn2fk/8vxKybPb0RbNiP0MET5wJq6Sd9U\nwxyZ6/2Ub/P3ZYtq78W69FLpNhs+X7bIiHC+Hp1DvsUMlYah94y5okMJbS8l\nm77YjszLhQTHUGnIXn961/V30D9nZKbB9W7QU0rcarY30YZS6U8YiU0Tnow2\n4e6mFWNKpx+lGAH04P8KfqLADJUnmtNRa+pHamd7NLsxgUI4u+RAfzXwJ6Sm\nqVNa\r\n=HXX2\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDF8J8UPbBx4jM1z9+1jififuUFj6zkHhTArWyIJ8mXoAIgX0J8RZgumT+qUWlcUexGzL62qGkQyj+lBsdBmev0vmA="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.3.0_1581263393506_0.9666393133454623"
      },
      "_hasShrinkwrap": false
    },
    "3.4.0": {
      "name": "ava",
      "version": "3.4.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=13.5.0"
      },
      "scripts": {
        "lint": "xo",
        "test:tap": "tap",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:typescript && npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "chalk": "^3.0.0",
        "chokidar": "^3.3.1",
        "chunkd": "^2.0.1",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.2.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^3.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.5.1",
        "equal-length": "^1.0.0",
        "figures": "^3.1.0",
        "globby": "^11.0.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.15",
        "matcher": "^2.1.0",
        "md5-hex": "^3.0.1",
        "ms": "^2.1.2",
        "ora": "^4.0.3",
        "p-map": "^3.0.0",
        "picomatch": "^2.2.1",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^6.0.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.16",
        "stack-utils": "^2.0.1",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.0",
        "write-file-atomic": "^3.0.1",
        "yargs": "^15.1.0"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@sinonjs/fake-timers": "^6.0.0",
        "ansi-escapes": "^4.3.0",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.0",
        "get-stream": "^5.1.0",
        "p-event": "^4.1.0",
        "proxyquire": "^2.1.3",
        "react": "^16.12.0",
        "react-test-renderer": "^16.12.0",
        "replace-string": "^3.0.0",
        "sinon": "^8.1.1",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.6",
        "temp-write": "^4.0.0",
        "tempy": "^0.4.0",
        "touch": "^3.1.0",
        "ts-node": "^8.6.2",
        "typescript": "^3.7.5",
        "xo": "^0.26.1",
        "zen-observable": "^0.8.15"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        },
        "overrides": [
          {
            "files": "test/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          },
          {
            "files": "test/fixture/**/*.js",
            "rules": {
              "import/no-extraneous-dependencies": "off"
            }
          }
        ]
      },
      "tap": {
        "browser": false,
        "coverage-report": [
          "html",
          "lcov",
          "text"
        ],
        "esm": false,
        "files": [
          "test/*.js",
          "test/reporters/*.js",
          "test/integration/*.js"
        ],
        "flow": false,
        "jobs": 2,
        "jsx": false,
        "timeout": 300,
        "ts": false
      },
      "gitHead": "863063680061a39a98dcf04ebf10da5f03e1af0b",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.4.0",
      "_nodeVersion": "12.14.1",
      "_npmVersion": "6.13.6",
      "dist": {
        "integrity": "sha512-Y32CkzR8mrAmn0A9sWhq36kc9GR4eunZ4LZYoFi1VImhNfRh2zmI+8RcNdL/SYdQI1wIklK08rvDdCI58YQQEA==",
        "shasum": "0d082eb645e52e07fce03e3345ba5660891227aa",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.4.0.tgz",
        "fileCount": 45,
        "unpackedSize": 238492,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeUp93CRA9TVsSAnZWagAAlEAP/AkGxTOcxlGpoYNfDB0Y\nkpkTgRPNNFkDOvnlcfKYGsO1O/isKKNq0DVMRaGXTntaOM3KTmomWf3gX4zG\nYRFaEALTsKhtXEmq+ltxJJaZaiqSy19skKWO8c4mg5SdNayNa14YAgQU5FSo\nfkhegTEw9h7So9IT2w+eTtsr45lWgRW3jZtG5DtLrDvJK14Vqgz0I4ymdma2\nb2nesTSVutGfnkh9v5surR8zuwRGS/zq6h51U7Mo6P+ZqRq53RXzAB1KVvM3\nBDu3cS0w8Q7NzmGh0rnuhbKPaZFavyJgYX5wD7RdHuArxWKmY2KjkhnIpnRY\nKjA7gAg0zssNPhJeZzG4zjfAW38KG8v9M8Kb1XjxgS+5Ov8pjj7aZkbWoKX6\nJ27UZd2+jfr1uVSCIavxj+p0wpGQEaGjHeBafsd/e5ztgOCPCxSeIcBOCDIA\nU8nhpbx6Vg4Jrh3ONBnBuE/44BUvv/9lW6CY0b//3pYMic1xFXP/pvo7pnVd\nFvuXMU2lkgkeDF5o2n5VzKokkgR6xQD03VA8Sg/m4xR6WGSqKN65oH8TMQJb\nCf/6cINbm1Bn5hr+pEhdZwEBbnzqNcB2UGOXX1SPiZGYMuwzHJT9fMPhhBcN\nthPMp7A0YwsThd36yfR33a0k/I+M/tM7zByClMO9kotfa5ctLgPSODS7Tnnh\nsp1e\r\n=s0sK\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDWPEqjdjCwmJbOms9Y+uY+/EchQ8SxkSQHVXmlmtvB0gIgGzH1MM/U2XOe5NrWp88iNp/wM2SK6Z1bgrvDr2hCSvw="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.4.0_1582473078514_0.524849035062543"
      },
      "_hasShrinkwrap": false
    },
    "3.5.0": {
      "name": "ava",
      "version": "3.5.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=13.5.0"
      },
      "scripts": {
        "lint": "xo",
        "test:tap": "tap",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:typescript && npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "chalk": "^3.0.0",
        "chokidar": "^3.3.1",
        "chunkd": "^2.0.1",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.2.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^3.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.5.1",
        "equal-length": "^1.0.0",
        "figures": "^3.1.0",
        "globby": "^11.0.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-ci": "^2.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.15",
        "matcher": "^2.1.0",
        "md5-hex": "^3.0.1",
        "ms": "^2.1.2",
        "ora": "^4.0.3",
        "p-map": "^3.0.0",
        "picomatch": "^2.2.1",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^6.0.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.16",
        "stack-utils": "^2.0.1",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.0",
        "write-file-atomic": "^3.0.1",
        "yargs": "^15.1.0"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@sinonjs/fake-timers": "^6.0.0",
        "ansi-escapes": "^4.3.0",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.0",
        "get-stream": "^5.1.0",
        "p-event": "^4.1.0",
        "proxyquire": "^2.1.3",
        "react": "^16.12.0",
        "react-test-renderer": "^16.12.0",
        "replace-string": "^3.0.0",
        "sinon": "^8.1.1",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.6",
        "temp-write": "^4.0.0",
        "tempy": "^0.4.0",
        "touch": "^3.1.0",
        "ts-node": "^8.6.2",
        "typescript": "^3.7.5",
        "xo": "^0.26.1",
        "zen-observable": "^0.8.15"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        },
        "overrides": [
          {
            "files": "test/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          },
          {
            "files": "test/fixture/**/*.js",
            "rules": {
              "import/no-extraneous-dependencies": "off"
            }
          }
        ]
      },
      "tap": {
        "browser": false,
        "coverage-report": [
          "html",
          "lcov",
          "text"
        ],
        "esm": false,
        "files": [
          "test/*.js",
          "test/reporters/*.js",
          "test/integration/*.js"
        ],
        "flow": false,
        "jobs": 2,
        "jsx": false,
        "timeout": 300,
        "ts": false
      },
      "gitHead": "b6a46bd7b38a0eb1ce52e552230d066988f0402a",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.5.0",
      "_nodeVersion": "12.14.1",
      "_npmVersion": "6.13.6",
      "dist": {
        "integrity": "sha512-o+xq1RgAZrQ7GX5nddTNeYbUDogwlBoa/Hnt+b1ciCLLxSOj5U6ZFblLNBSKwHtP1X/8R06bmzvX47jmlVu9KQ==",
        "shasum": "589f0f35f51e6ab67eb230a9057fd2442807c62f",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.5.0.tgz",
        "fileCount": 45,
        "unpackedSize": 238675,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeW+1MCRA9TVsSAnZWagAArU4P/3Y4Ef3G5E8fupdxAXf8\na20vG3ku7XZbLULW839qBl7NwDa0xE3NYvg3uNWAjZ3Jy+D1HlybtwDKCf6O\nwoTWFYRNjuUc0X//F7Oa03pTRQsefAHJyxUBZPIDF1iwhHyV22WDa+MxfiuX\nGsQvWqEZZWvukKibFjerhKYGAzIf7GDSX8Ieu1KZJHZSwlTgLphbXKUPb2bc\nvItIG4FqWazMMxNLDnfzzSDT64SD+ADSuLCW0gmRY8R+Hrc2IYhkoAdQ4kNG\nvckAdFz37dN0YfVlvVaM7uwi7ZQ4fWMNgGNzaHyJFVFZJEpXFmYxbJOaYQqX\nUPCLfE43To93xjoV7RwPAhOxpBZza5mdBxjRTPrsMWZLaParyouB72gdX99M\nadBSNmpqYkv+Z7Hvavp+/P7w+XP2AJnK2U3MoReEoKqCb5KnuV9mgVJMYaob\nTaYb2Ie35Tg+UVo/V958rAMWGKsPQyGRqtd+jPcT2QkxGSeA3ODTjc3xas5Q\ns43UQLn5hohhAXDrXK/wEdOz3T+9lnD1u/IZOO08513Q4CtM8Scll9YCDd7s\nDi50JkI+dbkT+0zPCZ4K3CcP4u64CX/RG7SNidQfs9kSAKEEGcvYz8O+BC16\nSwVmZQtAlbBY4cCmu+VwZoHHYPpg1w4+X1z93GzYCs/ZQtJCWqAHc8pj0PEe\nuacX\r\n=5FDC\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDTPtAfSPMBJN0k7JBzCfjWmAsuG3Xa2eVbUjNnxiPbrwIhAKBjAqGDnrL7wBdk8XlMNJ1/KADlzdtydOGZTxHt2GRq"
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.5.0_1583082828092_0.9663406493978142"
      },
      "_hasShrinkwrap": false
    },
    "3.5.1": {
      "name": "ava",
      "version": "3.5.1",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=13.5.0"
      },
      "scripts": {
        "lint": "xo",
        "test:tap": "tap",
        "test:typescript": "tsc --noEmit -p test/ts-types",
        "test": "npm run lint && npm run test:typescript && npm run test:tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "chalk": "^3.0.0",
        "chokidar": "^3.3.1",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.2.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^3.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.5.1",
        "equal-length": "^1.0.0",
        "figures": "^3.1.0",
        "globby": "^11.0.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.15",
        "matcher": "^2.1.0",
        "md5-hex": "^3.0.1",
        "ms": "^2.1.2",
        "ora": "^4.0.3",
        "p-map": "^3.0.0",
        "picomatch": "^2.2.1",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^6.0.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.16",
        "stack-utils": "^2.0.1",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.0",
        "write-file-atomic": "^3.0.1",
        "yargs": "^15.1.0"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@sinonjs/fake-timers": "^6.0.0",
        "ansi-escapes": "^4.3.0",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.0",
        "get-stream": "^5.1.0",
        "p-event": "^4.1.0",
        "proxyquire": "^2.1.3",
        "react": "^16.12.0",
        "react-test-renderer": "^16.12.0",
        "replace-string": "^3.0.0",
        "sinon": "^8.1.1",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.6",
        "temp-write": "^4.0.0",
        "tempy": "^0.4.0",
        "touch": "^3.1.0",
        "ts-node": "^8.6.2",
        "typescript": "^3.7.5",
        "xo": "^0.26.1",
        "zen-observable": "^0.8.15"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test/fixture/ava-paths/target/test.js",
          "test/fixture/{source-map-initial,syntax-error}.js",
          "test/fixture/snapshots/test-sourcemaps/build/**",
          "test/fixture/power-assert.js",
          "**/*.ts"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off"
        },
        "overrides": [
          {
            "files": "test/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          },
          {
            "files": "test/fixture/**/*.js",
            "rules": {
              "import/no-extraneous-dependencies": "off"
            }
          }
        ]
      },
      "tap": {
        "browser": false,
        "coverage-report": [
          "html",
          "lcov",
          "text"
        ],
        "esm": false,
        "files": [
          "test/*.js",
          "test/reporters/*.js",
          "test/integration/*.js"
        ],
        "flow": false,
        "jobs": 2,
        "jsx": false,
        "timeout": 300,
        "ts": false
      },
      "gitHead": "5d791707bff5586aaeffbf47fa36fd60a0bacf61",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.5.1",
      "_nodeVersion": "12.14.1",
      "_npmVersion": "6.13.6",
      "dist": {
        "integrity": "sha512-gde/nh438C6cj6/pKntjoPmGg1VSsZlRjyuYTjp0ixsNDj+1YNVeASrlzI+NgvcUmbx17G8uOgByt7lDu8ddXA==",
        "shasum": "6dde079621606824495957c78f95c8485639bc14",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.5.1.tgz",
        "fileCount": 46,
        "unpackedSize": 238841,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJed1dvCRA9TVsSAnZWagAAUiIP/AtUf/dcOsVuXGeW8rhD\nmmCImhL1tqSXzk9XT3ydv8H+9yJHXeRBTkn9dxB/JYYTEDUBTYcuJlg9Q60H\nO51PgZBny2NWBSQk1U62xOdELZswBfZqRGmSCeDIZrM3CNAf9mOnQY8tCQE/\nY+DPhlhnY/Mb+NMlSAmmznmAy9awtYaZRK6UW7EQWkwsLT9bySiPJzvuf6YP\nvY7relVL9RhHeZDjdkuDhAZugHvPjZp41m+ovXbzfvWnIjru38HQfPwIzD7M\netZMd6b4CzUQ4Hx44BROh53qKoZ8oz5azL3aAT5iJVV+FKgCdH/sqT+pa2Jb\nSSCM9aGNqMIwO7V57RaI/kMzP7q5teswiqK5ugExDRuFI939419bKMs4t+HE\nB0EnPUaJnbJW2p5t/gIZ0dcwx3cCNoCzI7osDtQ9roTWA03wp79q7FAx2kmg\n5t4cl6FRyEkuVXJllnl7g5cbS9zsUbowoEKmcE7wgHPtMlK+S7lIWnxQzOuV\n12Skt0KngY/CyOqFY5QSHXh7aOlmDu7mF2G/OYuiAee7r0hqRAmBcyr6bWPN\nwaYnWh22r+G1aygVvhX6POkINuI7yu+84ho1vS+0XRjZTLnESOQ4iuhqyAXi\nFVbfz/sWTWYVoypGv9GWsOlg5Pkupx2r9eT6ZdA92l2b96pJ+YqJEZBhRCcP\nDN/Y\r\n=edmL\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIH5kd5bWK3qguzr/1APvwPbv3fI24bOFRVmHpsaDbfFFAiA/S7/04Asu33FGLeiWXysOi2AaycqZVkLm9KhYeDM3LQ=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.5.1_1584879471448_0.6447918601534515"
      },
      "_hasShrinkwrap": false
    },
    "3.5.2": {
      "name": "ava",
      "version": "3.5.2",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=13.5.0"
      },
      "scripts": {
        "test": "xo && tsd && nyc tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "chalk": "^3.0.0",
        "chokidar": "^3.3.1",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.2.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^3.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.5.1",
        "equal-length": "^1.0.0",
        "figures": "^3.1.0",
        "globby": "^11.0.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.15",
        "matcher": "^2.1.0",
        "md5-hex": "^3.0.1",
        "ms": "^2.1.2",
        "ora": "^4.0.3",
        "p-map": "^3.0.0",
        "picomatch": "^2.2.1",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^6.0.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.16",
        "stack-utils": "^2.0.1",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.0",
        "write-file-atomic": "^3.0.1",
        "yargs": "^15.1.0"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@sinonjs/fake-timers": "^6.0.0",
        "ansi-escapes": "^4.3.0",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.0",
        "get-stream": "^5.1.0",
        "lolex": "^5.1.2",
        "nyc": "^15.0.0",
        "p-event": "^4.1.0",
        "proxyquire": "^2.1.3",
        "react": "^16.12.0",
        "react-test-renderer": "^16.12.0",
        "replace-string": "^3.0.0",
        "sinon": "^8.1.1",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.6",
        "temp-write": "^4.0.0",
        "tempy": "^0.4.0",
        "touch": "^3.1.0",
        "ts-node": "^8.6.2",
        "tsd": "^0.11.0",
        "typescript": "^3.7.5",
        "xo": "^0.28.1",
        "zen-observable": "^0.8.15"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test-tap/fixture/ava-paths/target/test.js",
          "test-tap/fixture/{source-map-initial,syntax-error}.js",
          "test-tap/fixture/snapshots/test-sourcemaps/build/**",
          "test-tap/fixture/power-assert.js"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off",
          "@typescript-eslint/no-var-requires": "off"
        },
        "overrides": [
          {
            "files": "*.d.ts",
            "rules": {
              "@typescript-eslint/member-ordering": "off",
              "@typescript-eslint/prefer-function-type": "off",
              "@typescript-eslint/unified-signatures": "off"
            }
          },
          {
            "files": "test-d/*.ts",
            "rules": {
              "@typescript-eslint/explicit-function-return-type": "off",
              "@typescript-eslint/no-empty-function": "off",
              "@typescript-eslint/no-unused-vars": "off",
              "no-unused-vars": "off"
            }
          },
          {
            "files": "test-tap/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          },
          {
            "files": "test-tap/fixture/**/*.js",
            "rules": {
              "import/no-extraneous-dependencies": "off"
            }
          }
        ]
      },
      "gitHead": "4c3e791d853faa396a2135668d6fa10d1f98520d",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.5.2",
      "_nodeVersion": "12.14.1",
      "_npmVersion": "6.13.6",
      "dist": {
        "integrity": "sha512-4MYpx0D7VQwzvqCOQsbnPK2Dmg7lipWe2k/n75i0cuFwuosq9MYIWc9MnmCZ1GIlPQ70qOP1DgQcD0ScH/W79Q==",
        "shasum": "9a37305c03840c4b63eb53edae29741d8414633e",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.5.2.tgz",
        "fileCount": 46,
        "unpackedSize": 239829,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJegbDQCRA9TVsSAnZWagAAwRIQAJlZAB+yWQWMpuVdSfi6\nGIviLUHoRPBjRTxjIMxmCYAXBcAUq3GU79n4O5q/D49zYGu8rtPBAV6jMsli\nPw0AW4SOkZIYZhQvnjDvO/TryI2WOwjdSIpwWmwnIce/FeZux3mmoG6JFytB\nM73qPjPdRfbixBk4cmaryENCxLJpP6z15lVEDnte91HENZQu8YfxY8l4lyv/\n3KTJkcmgyt+AKeWWcVrals2YNkxHLJ7HjeiRR6RrbcRxHJ8LAhwgPCkyE5Nw\n4pSeA5X5vyPrgalQlXdkBbY7ReRe1RRO2NQftQHVVQ3KK5Ad2HuWMZ2EZUGa\nqyo/VnqK+nB/4LzKC59StmghDb4ECXH/IjLDLv8snAspbns6VIlhcr17nE2L\nlLFwwoVj8/NnEQiO/SV44Z7HOyjjcmW3R/uSriSDZUm9UvinXGSgDqz0xhWf\nH6NT0Cx15l7cGIuaJ32UZlErHOICIDzh/t66oy7IwIioHg67vxlHxsAblUIS\nB9LtYfOsK0Yg3vo+bYN5fHY2lFWf/tbYnBfLOtzxWBFI28bB1TPIHWz8QOwY\nhZSp4lhPt5o5IPE4dZg1WPOs0D3B7yRxZxkdoZGDhFcSs/aD9+TK57+mmGJ8\nzr3rTdydKDKcNaqj2B/E8R1DijX5bXKpc47jAJf2hug29LPj7FdDvmNKBCLx\n40Wp\r\n=2BKA\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDXmYo2jCMB45HVA3OgBXa+Oa2MpxrpHwOSlhbLrfmyYQIhAMGaV/Tb7u/bXlLKLKmD7iYJIAsz7sBnju8kPZuVD+yl"
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.5.2_1585557711736_0.4002205218934145"
      },
      "_hasShrinkwrap": false
    },
    "3.6.0": {
      "name": "ava",
      "version": "3.6.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=13.5.0"
      },
      "scripts": {
        "test": "xo && tsd && nyc tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "chalk": "^4.0.0",
        "chokidar": "^3.3.1",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.2.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^3.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.6.0",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.15",
        "matcher": "^2.1.0",
        "md5-hex": "^3.0.1",
        "ms": "^2.1.2",
        "ora": "^4.0.3",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^6.0.1",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.16",
        "stack-utils": "^2.0.1",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.0",
        "write-file-atomic": "^3.0.3",
        "yargs": "^15.3.1"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@sinonjs/fake-timers": "^6.0.1",
        "ansi-escapes": "^4.3.1",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.0",
        "get-stream": "^5.1.0",
        "nyc": "^15.0.1",
        "p-event": "^4.1.0",
        "proxyquire": "^2.1.3",
        "react": "^16.13.1",
        "react-test-renderer": "^16.13.1",
        "replace-string": "^3.0.0",
        "sinon": "^9.0.1",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.7",
        "temp-write": "^4.0.0",
        "tempy": "^0.5.0",
        "touch": "^3.1.0",
        "tsd": "^0.11.0",
        "typescript": "^3.7.5",
        "xo": "^0.28.2",
        "zen-observable": "^0.8.15"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test-tap/fixture/ava-paths/target/test.js",
          "test-tap/fixture/{source-map-initial,syntax-error}.js",
          "test-tap/fixture/snapshots/test-sourcemaps/build/**",
          "test-tap/fixture/power-assert.js"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off",
          "@typescript-eslint/no-var-requires": "off"
        },
        "overrides": [
          {
            "files": "*.d.ts",
            "rules": {
              "@typescript-eslint/member-ordering": "off",
              "@typescript-eslint/prefer-function-type": "off",
              "@typescript-eslint/unified-signatures": "off"
            }
          },
          {
            "files": "test-d/*.ts",
            "rules": {
              "@typescript-eslint/explicit-function-return-type": "off",
              "@typescript-eslint/no-empty-function": "off",
              "@typescript-eslint/no-unused-vars": "off",
              "no-unused-vars": "off"
            }
          },
          {
            "files": "test-tap/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          },
          {
            "files": "test-tap/fixture/**/*.js",
            "rules": {
              "import/no-extraneous-dependencies": "off"
            }
          }
        ]
      },
      "gitHead": "447d37153b5af9139c45cf5b0fd97ad92bea0c14",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.6.0",
      "_nodeVersion": "12.14.1",
      "_npmVersion": "6.13.6",
      "dist": {
        "integrity": "sha512-cp+oK06JTFK9m4EhLq0APPSi6aTpwUOK0aKH5pCzIhU8AHFLXis0HNarfIr/EeBe9GzQKouuIsnlVedY7Lg0Cw==",
        "shasum": "1fa57f8601a81d11b4771ba701428d9972659dfd",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.6.0.tgz",
        "fileCount": 46,
        "unpackedSize": 239947,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeief0CRA9TVsSAnZWagAAXSUP/3LkpM/8xVMMABZzUbCW\nyLY8QAE3knX+0dGyi7n/pA6r1OvzM4au4aAnsg030BKMs4oPqMejLV0Z5P3j\nNX4ewrrEnxfzIhoUo3nbJzsBKjpgoN7BaJVh3IgcEW+eDWzYLEHMNKnWr5Pf\nSZzcah0py+a6Kj7BjnGftGY0dd3ZgAsgCuh/s+BD5W8kL1M/5FdKJr+pYg/E\niANTDBRo55Efu7Yce+nQ2J2pJpKYzk3VwNVNM5ThD63cwJd7fPVsehduO05g\nPQIRGoz6MScGPH72vByvjJowsGUl2tnAyoz5lZlyXW7aEjBwwpGV2qyv7eOz\nT6XDR9CSFAMg8ym6egOzFdhvVH+V3xIbec9dPa56y0JWt+ZRJSHWgm81kkcq\nVkfKb/O1xzeOg1xbGExF1ORW0wZMl+p3O1UCUnUeSNoL1HC8wej0I5iwGh1s\n66MR2MFhUQTMdU9exuXl+PJ4tbssTi/iCAdBRHjDKDiI4TyC1/mRlZhQk5Fc\nCydhwMwEp7IBCPtzUh0+qiwYepAQ7pEzE6+dYO+FNHmqzO66PRl6PXNp89/D\nEZAZbsgyi2RfdIdU1s2Tvb6jAU9f/UfBbwtZsEvPLSpttIt8A/sJ8AZD9rWR\n9NhS37AdE1OU2OrzP3Yw4OxaB6c4aWwWBw7p5M6cZWahncBcW+sAnWFS48q4\nN+4K\r\n=S2xW\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCqH6TeF0j3H1dmeWbB4vuu/6xOSSLQNbRmkEKE5KfDrwIgWwZ+OlLwlDG9+/K7INpvXREjVQpRuil1cB13OaA8IAY="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.6.0_1586096116148_0.13929132375777487"
      },
      "_hasShrinkwrap": false
    },
    "3.7.0": {
      "name": "ava",
      "version": "3.7.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=13.5.0"
      },
      "scripts": {
        "test": "xo && tsd && nyc tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "chalk": "^4.0.0",
        "chokidar": "^3.3.1",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.2.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^3.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.6.0",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.15",
        "matcher": "^2.1.0",
        "md5-hex": "^3.0.1",
        "mem": "^6.1.0",
        "ms": "^2.1.2",
        "ora": "^4.0.3",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^6.0.1",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.16",
        "stack-utils": "^2.0.1",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.0",
        "write-file-atomic": "^3.0.3",
        "yargs": "^15.3.1"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@sinonjs/fake-timers": "^6.0.1",
        "ansi-escapes": "^4.3.1",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.0",
        "get-stream": "^5.1.0",
        "nyc": "^15.0.1",
        "p-event": "^4.1.0",
        "proxyquire": "^2.1.3",
        "react": "^16.13.1",
        "react-test-renderer": "^16.13.1",
        "replace-string": "^3.0.0",
        "sinon": "^9.0.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.7",
        "temp-write": "^4.0.0",
        "tempy": "^0.5.0",
        "touch": "^3.1.0",
        "tsd": "^0.11.0",
        "typescript": "^3.8.3",
        "xo": "^0.29.1",
        "zen-observable": "^0.8.15"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test-tap/fixture/ava-paths/target/test.js",
          "test-tap/fixture/{source-map-initial,syntax-error}.js",
          "test-tap/fixture/snapshots/test-sourcemaps/build/**",
          "test-tap/fixture/power-assert.js"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off",
          "@typescript-eslint/no-var-requires": "off"
        },
        "overrides": [
          {
            "files": "*.d.ts",
            "rules": {
              "@typescript-eslint/member-ordering": "off",
              "@typescript-eslint/prefer-readonly-parameter-types": "off",
              "@typescript-eslint/prefer-function-type": "off",
              "@typescript-eslint/unified-signatures": "off"
            }
          },
          {
            "files": "test-{d,tap}/**/*.ts",
            "rules": {
              "@typescript-eslint/explicit-function-return-type": "off",
              "@typescript-eslint/no-empty-function": "off",
              "@typescript-eslint/no-unsafe-call": "off",
              "@typescript-eslint/no-unsafe-member-access": "off",
              "@typescript-eslint/no-unsafe-return": "off",
              "@typescript-eslint/no-unused-vars": "off",
              "@typescript-eslint/prefer-readonly-parameter-types": "off",
              "no-unused-vars": "off"
            }
          },
          {
            "files": "test-tap/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          },
          {
            "files": "test-tap/fixture/**/*.js",
            "rules": {
              "import/no-extraneous-dependencies": "off"
            }
          }
        ]
      },
      "gitHead": "18aeac64db2711d37853175b5e8dc1fd72c66d2a",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.7.0",
      "_nodeVersion": "12.14.1",
      "_npmVersion": "6.13.6",
      "dist": {
        "integrity": "sha512-SV1oqRpZ00qevETsNzcqTqaTnspJZZ1wBGOjyQzcLOMChnUF+17/RS4YiieClaV0eCFULLU/roICpJoQlNLHZw==",
        "shasum": "86869f831628de31e817fe00d46b350849295092",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.7.0.tgz",
        "fileCount": 46,
        "unpackedSize": 240356,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJelGjQCRA9TVsSAnZWagAAmZgP+wZ+Wy8jB+muGyU+p+b7\nBpq2D5flFjeUhh1BRIbQEu71bAA7dTenw1riAnbqLx4EHRaLi+gfYvuvybcN\nGsaIcn+SFAKSO5LHGeOEKOSLEwvRvJZ9qQwJxcZnxSIkLfuSeEScgBEn3+L4\n5nLKgRUhqnqT8Uy5ZiGXxK0HhKOPl7ju9KvD3qZk4DceL4Kgy81nqkTG3l5t\nTXGy48R/xv+AURdv20539HKzdzQL1KgIfHeQNWJylk3xNYy0HVSImquXmF81\n4JZMgEqdUqG5znDTrrI3ylL/XZjTO4QbqzZoiQZRsAtbiJRjlq93tl9Luxzj\n7AU3hbM7+apg445wLlfrm8Gthiz8u3SN2MrN5DrqTuZ6wTwFyeFboAyVInFa\nymoqFaadXWVQu5UvJtidMOtyizBynMAxW6oZ/3GpslicNZC9PKxYKl33sZwK\n35YBw/TAMDtBPLrCRpluAikP96mQc8Eq9tRMDeekrUpi5JYWKVGZEbkaf8I2\nFM4+97DBccq0YGZraNYGNFjVeMyXsMJK3mF7vg+n+8gzk/yfcF7igrU2CogS\n2TEENI1+fUgNS+YZkDeezqQk/cjvijWzb2HG/HZRLX8p+W/Agvmw8oex8oBj\nXCeaNffoCyx8RB/kdYgLVmtlpfUJhUryfmP57GFasAe5nlTT70axCR1H3HT7\ngm6M\r\n=6kQB\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCx85w6fJIlkrCPxe0lPnt5ARubCuVoM2mr3+S5AcLWKQIgAX2gOsJ5K+du+tx8aZEhTAgrcJhpJOeBKRY4f2Okw6s="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.7.0_1586784463468_0.12320368470368237"
      },
      "_hasShrinkwrap": false
    },
    "3.7.1": {
      "name": "ava",
      "version": "3.7.1",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=13.5.0"
      },
      "scripts": {
        "test": "xo && tsd && nyc tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "chalk": "^4.0.0",
        "chokidar": "^3.3.1",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-stack": "^2.2.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^3.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.6.0",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.0",
        "is-promise": "^2.1.0",
        "lodash": "^4.17.15",
        "matcher": "^2.1.0",
        "md5-hex": "^3.0.1",
        "mem": "^6.1.0",
        "ms": "^2.1.2",
        "ora": "^4.0.3",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^6.0.1",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.16",
        "stack-utils": "^2.0.1",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.0",
        "write-file-atomic": "^3.0.3",
        "yargs": "^15.3.1"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@sinonjs/fake-timers": "^6.0.1",
        "ansi-escapes": "^4.3.1",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.0",
        "get-stream": "^5.1.0",
        "nyc": "^15.0.1",
        "p-event": "^4.1.0",
        "proxyquire": "^2.1.3",
        "react": "^16.13.1",
        "react-test-renderer": "^16.13.1",
        "replace-string": "^3.0.0",
        "sinon": "^9.0.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.7",
        "temp-write": "^4.0.0",
        "tempy": "^0.5.0",
        "touch": "^3.1.0",
        "tsd": "^0.11.0",
        "typescript": "^3.8.3",
        "xo": "^0.29.1",
        "zen-observable": "^0.8.15"
      },
      "xo": {
        "ignores": [
          "media/**",
          "test-tap/fixture/ava-paths/target/test.js",
          "test-tap/fixture/{source-map-initial,syntax-error}.js",
          "test-tap/fixture/snapshots/test-sourcemaps/build/**",
          "test-tap/fixture/power-assert.js"
        ],
        "rules": {
          "no-use-extend-native/no-use-extend-native": "off",
          "@typescript-eslint/no-var-requires": "off"
        },
        "overrides": [
          {
            "files": "*.d.ts",
            "rules": {
              "@typescript-eslint/member-ordering": "off",
              "@typescript-eslint/prefer-readonly-parameter-types": "off",
              "@typescript-eslint/prefer-function-type": "off",
              "@typescript-eslint/unified-signatures": "off"
            }
          },
          {
            "files": "test-{d,tap}/**/*.ts",
            "rules": {
              "@typescript-eslint/explicit-function-return-type": "off",
              "@typescript-eslint/no-empty-function": "off",
              "@typescript-eslint/no-unsafe-call": "off",
              "@typescript-eslint/no-unsafe-member-access": "off",
              "@typescript-eslint/no-unsafe-return": "off",
              "@typescript-eslint/no-unused-vars": "off",
              "@typescript-eslint/prefer-readonly-parameter-types": "off",
              "no-unused-vars": "off"
            }
          },
          {
            "files": "test-tap/**/*.js",
            "rules": {
              "promise/prefer-await-to-then": "off"
            }
          },
          {
            "files": "test-tap/fixture/**/*.js",
            "rules": {
              "import/no-extraneous-dependencies": "off"
            }
          }
        ]
      },
      "gitHead": "3c0fc03cf3374a718dd26cc03fd6468319ac6d03",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.7.1",
      "_nodeVersion": "13.13.0",
      "_npmVersion": "6.14.4",
      "dist": {
        "integrity": "sha512-UX7RSenUgFPhxe866doqOJy6tQZAXAVAU4yufYeBAcnEjnS/plIcG6lE2yGIqgjk5cIMpSi+sP4f6EsornlsuA==",
        "shasum": "7baba69820242e0efcbfb4ab2060b500ec745421",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.7.1.tgz",
        "fileCount": 46,
        "unpackedSize": 240546,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJenHOfCRA9TVsSAnZWagAA1LIQAJrJG3pn3QNTdy53bgYT\npABHyLN6fIEXfdpxuq+643OhqDqifbXF/6RbBSDs4qiWGzB4f6i+AVLyJ/RD\ngTEYJGRACX1+XBptxrISOlnJQPxbSfsT8irl1Xz9Mfzdux4Njl8V1QaCJyN7\nx4iVHh8wp8YA7Stye22Gz1aiJxQV4ftIoKfOqwpDQySDUxH42jTKj5hWsA+O\n3YBjt00/nIsy59LTDnY34eZqveMTcSZq63qZOU7zEDRTVEUZEbh992fQ7bGC\nmz1NOUFtodn4LPJVyDxWUWR7TFrQzTUgV/HLdZxCuUu0tWMHD443gKpBcp1l\nWGBPLGXm9BJMLw+KZG+rSkPgvvJuonysjLwJwkRLLOGX/YYTd4qbasCPOgwC\nGuZ0mvPOzY4sXKmC/ALBFiBrbcs05CXcGLTjI8wMNqwLK3gYTPmVx5eqpreD\npM9nI/cZgnaYCtgPRz5SQiI5oG8vjgzVfBO5qCeeeVjQ8JGt84g2ilPCx/gw\nr6n8jawmJxm8KW7sOcH5ceeKhUTgxrfuWB5Lj8RNdJM+JOa/e6R9YPxFlJv6\nmGzcxVJ7IRoNet3SIHsSJXjH/RAx9dd7BS4oaJDEzP8zp9Ie8SHyGzzoPELd\nhvztvCzIzWhoIRf3BCLXJB+hJWsU83FIRR+ytn3VeFqUIiV05q+6g7kvGbSh\nbdDH\r\n=gw8R\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFS2sdXV1GB2e29wfK7Vzy5xGxiCrubbkZC7F146/9YfAiEA1Rpxh6jE1FNQy9tvyjtBXzlP/raKuwABl0mzqzY/KLY="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.7.1_1587311518638_0.7966324228728079"
      },
      "_hasShrinkwrap": false
    },
    "3.8.0": {
      "name": "ava",
      "version": "3.8.0",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=13.5.0 <14 || >=14.0.0"
      },
      "scripts": {
        "test": "xo && tsd && c8 tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "acorn": "^7.1.1",
        "acorn-walk": "^7.1.1",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "callsites": "^3.1.0",
        "chalk": "^4.0.0",
        "chokidar": "^3.4.0",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^3.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.6.0",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.0",
        "is-promise": "^3.0.0",
        "lodash": "^4.17.15",
        "matcher": "^2.1.0",
        "md5-hex": "^3.0.1",
        "mem": "^6.1.0",
        "ms": "^2.1.2",
        "ora": "^4.0.4",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^6.0.1",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.19",
        "stack-utils": "^2.0.1",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.0",
        "write-file-atomic": "^3.0.3",
        "yargs": "^15.3.1"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@babel/plugin-proposal-do-expressions": "^7.8.3",
        "@sinonjs/fake-timers": "^6.0.1",
        "ansi-escapes": "^4.3.1",
        "c8": "^7.1.0",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.0",
        "get-stream": "^5.1.0",
        "p-event": "^4.1.0",
        "proxyquire": "^2.1.3",
        "react": "^16.13.1",
        "react-test-renderer": "^16.13.1",
        "replace-string": "^3.0.0",
        "sinon": "^9.0.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.7",
        "temp-write": "^4.0.0",
        "tempy": "^0.5.0",
        "touch": "^3.1.0",
        "tsd": "^0.11.0",
        "typescript": "^3.8.3",
        "xo": "^0.30.0",
        "zen-observable": "^0.8.15"
      },
      "gitHead": "b669efadfff6c03226087b3b7d706a54834500e4",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.8.0",
      "_nodeVersion": "14.0.0",
      "_npmVersion": "6.14.4",
      "dist": {
        "integrity": "sha512-zpWqj0n1PvSzUmGHr0y7YLbS3U61vgRvBHxl7L/1pRQ+MSCgDuK/3vOruJ+SkT4p1Up8nlRbg84ve1LN4e1nRg==",
        "shasum": "2429e2aa275a7ab0137e085606387fdb64e2c4e5",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.8.0.tgz",
        "fileCount": 48,
        "unpackedSize": 249619,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJepac/CRA9TVsSAnZWagAAwtcQAIXzg3fAWooAfpADexcF\naq1WM8d8skL55Du847MgkxWYcut6krckAjbnhehEyPTMkahrSmSjTs0h/HhR\nPT3WOPzt7GJvy9p9i/N9XLhcpCOwgS5nsUlL47WM2t7eU+0ca02G1AvDj4rY\nmwnVqI+tlC/NBgc98hBuxEDPQoeDrYZZxb9FRQ+XOUvAtECHUhsu0Jl/8VVP\n4HVNdd3UDIA26XgMgggluSoCUf5+uwWgFYpHQw9fOzE8JnPySS0TjAd/I6IW\nEYQDHCCxONdhOzrpbZGS/cWbsGNFBq8dyCqYQhy0uKH//N+iHNjC5UZh28Vw\n6JTjw7dP6lsC6kUn3fvDlVpg7GB62R/85zwi6fdAxjNWqwBFRoQDNx3fHeNS\nabQJHBRnJ5i5aQb0262h1SSWhwYUPgNMX4L6owte903N49RHTPzRHQxQrGjQ\nzj0dx7OwZaZ93m+8B2MGcVgwFllzLNguOazHOFC+bb+PtYkjlMJgXA5VL1Rr\nZTaV9b65hr3oCUAIuRoaKOS//OXg1hbnpzxJvOniO+SHmC0pGz8wIXZO3TKC\nm3ikFopGqGv6epJpiVVJxrowVvJllU017bV4iah0xU9v9nyjMXs5lmGCrnw+\nK/Zr3eyf1VDiOEaD5h0TJu0RuZYedoKagobSlc9afjGpgx/xHFcU+U6g0T4U\nWgo+\r\n=mh8p\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCdzntl6rOP32iD1gqu9jauApH1ViKxu0cIn+A1qiDrSgIgHq5Ncd2T5PD7gRY6WAKifzrrWrBpR7JxlpyEdhwlZaw="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.8.0_1587914558493_0.7581792393030335"
      },
      "_hasShrinkwrap": false
    },
    "3.8.1": {
      "name": "ava",
      "version": "3.8.1",
      "description": "Testing can be a drag. AVA helps you get it done.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=13.5.0 <14 || >=14.0.0"
      },
      "scripts": {
        "test": "xo && tsd && c8 tap"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "acorn": "^7.1.1",
        "acorn-walk": "^7.1.1",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "callsites": "^3.1.0",
        "chalk": "^4.0.0",
        "chokidar": "^3.4.0",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^3.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.6.0",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.0",
        "is-promise": "^3.0.0",
        "lodash": "^4.17.15",
        "matcher": "^3.0.0",
        "md5-hex": "^3.0.1",
        "mem": "^6.1.0",
        "ms": "^2.1.2",
        "ora": "^4.0.4",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^6.0.1",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.19",
        "stack-utils": "^2.0.1",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.0",
        "write-file-atomic": "^3.0.3",
        "yargs": "^15.3.1"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@babel/plugin-proposal-do-expressions": "^7.8.3",
        "@sinonjs/fake-timers": "^6.0.1",
        "ansi-escapes": "^4.3.1",
        "c8": "^7.1.0",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.0",
        "get-stream": "^5.1.0",
        "p-event": "^4.1.0",
        "proxyquire": "^2.1.3",
        "react": "^16.13.1",
        "react-test-renderer": "^16.13.1",
        "replace-string": "^3.0.0",
        "sinon": "^9.0.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.7",
        "temp-write": "^4.0.0",
        "tempy": "^0.5.0",
        "touch": "^3.1.0",
        "tsd": "^0.11.0",
        "typescript": "^3.8.3",
        "xo": "^0.30.0",
        "zen-observable": "^0.8.15"
      },
      "gitHead": "7df43970951544987bb2d5db5b693cd013c22212",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.8.1",
      "_nodeVersion": "14.0.0",
      "_npmVersion": "6.14.4",
      "dist": {
        "integrity": "sha512-OPWrTxcf1EbtAaGGFQPLbx4AaVqPrFMumKOKn2SzIRo+RTKb33lF2aoVnWqBeZaJ68uSc9R6jqIE7qkG6O33uQ==",
        "shasum": "ec50814f8e6c769b8ed0dcc64bca990cd06bb2d1",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.8.1.tgz",
        "fileCount": 48,
        "unpackedSize": 249619,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJepseTCRA9TVsSAnZWagAAz7YQAIdwcvGXd5+4DXoGll7V\nu7vJ1/D5i2hMetUEmAx/SMAQ6C/PgwcRFRhDmvnnwYO5kzqtrZxAfCyLU034\nf3v818uHpdhXPLKd3qyqHVmpdOi1cokuf9W/Iu0115Hf+6fDfeVwQKINq2sW\nXpRBkJNUHfFR/ze2BL3FNTH6MOxTKlYg3ge4l7xJK6wMzV5sLwpb4lYLBQ3T\n+C1THh2Ds/iv3v50zt+fKCRN8THaNJtcFQ1q3m+K27aFZUWJV5eWsLDaDwOK\n56qKCGZ8gcUyRNqbG59SCoDLvdp+O5BDUHdxO16eZn110+yN8vitXkauLVb7\nR/XfgLYv5a1Lz72VPM3bvsIYrGL1Aw3Ctf3f9HcFJZzUEGbnDdD9NjpD5Nvh\n6DHsPGXKLIOWdvTss0PFUz67C0dUTti62ruDdbuufRZes4tYnwx6mAkE8SHL\np+GMTPDFxceHtfpnwYfYCu5Vhs5iOWsLi8oi/mFoWokQkS+RtGl/P0xxwmZV\n6IMiTHlwACnxHVK6pES+o8xqqni2sZIqTWs2ELe0rQ9sY0RrBZZkxL7DIwyZ\n2YQOt+gMaPDdIAe/Be7C3Ld26sjOkkTTlNHV2YQIkE8kfeqSe5hgOXtQFsZP\nSDyOxAolPFIoPnbd23jEzK/WvgJJ6J7KuNWJJVcvtJcURA1aD7dMO9aaYpxt\nviNc\r\n=TZnA\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIB0aJLv/nC/ScN0N0D6Cngc2TuxufV74tUnWzk271pp5AiEAlShiYQ+iuh2g+7YROX+97inNK8oKHWUjfSt91Urnta0="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.8.1_1587988370702_0.7341556418297366"
      },
      "_hasShrinkwrap": false
    },
    "3.8.2": {
      "name": "ava",
      "version": "3.8.2",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <12.16.0 || >=12.16.0 <13 || >=13.5.0 <14 || >=14.0.0"
      },
      "scripts": {
        "test": "xo && tsd && c8 --report=none tap && c8 --report=none --no-clean test-ava && c8 report"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "acorn": "^7.1.1",
        "acorn-walk": "^7.1.1",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "callsites": "^3.1.0",
        "chalk": "^4.0.0",
        "chokidar": "^3.4.0",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^3.0.0",
        "concordance": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.6.0",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.0",
        "ignore-by-default": "^1.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.0",
        "is-promise": "^4.0.0",
        "lodash": "^4.17.15",
        "matcher": "^3.0.0",
        "md5-hex": "^3.0.1",
        "mem": "^6.1.0",
        "ms": "^2.1.2",
        "ora": "^4.0.4",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^7.0.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.19",
        "stack-utils": "^2.0.2",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.0",
        "write-file-atomic": "^3.0.3",
        "yargs": "^15.3.1"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@ava/test": "github:avajs/test",
        "@babel/plugin-proposal-do-expressions": "^7.8.3",
        "@sinonjs/fake-timers": "^6.0.1",
        "ansi-escapes": "^4.3.1",
        "c8": "^7.1.2",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.0",
        "get-stream": "^5.1.0",
        "p-event": "^4.1.0",
        "proxyquire": "^2.1.3",
        "react": "^16.13.1",
        "react-test-renderer": "^16.13.1",
        "replace-string": "^3.0.0",
        "sinon": "^9.0.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.7",
        "temp-write": "^4.0.0",
        "tempy": "^0.5.0",
        "touch": "^3.1.0",
        "tsd": "^0.11.0",
        "typescript": "^3.8.3",
        "xo": "^0.30.0",
        "zen-observable": "^0.8.15"
      },
      "gitHead": "dace9767b0de5181825c709e3be82dd2ab0e66d0",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.8.2",
      "_nodeVersion": "14.0.0",
      "_npmVersion": "6.14.4",
      "dist": {
        "integrity": "sha512-sph3oUsVTGsq4qbgeWys03QKCmXjkZUO3oPnFWXEW6g1SReCY9vuONGghMgw1G6VOzkg1k+niqJsOzwfO8h9Ng==",
        "shasum": "877c9eb861763a185bbabd54f359e1fbe57d1754",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.8.2.tgz",
        "fileCount": 48,
        "unpackedSize": 249921,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJetU0SCRA9TVsSAnZWagAAdKsQAIirXGRTkrCk85RZz5/P\ngFzmswkUH/QR3gVzTvmmA8iPbePcudJtqXgA/eoCYQufhADHVQznGQvO+q0O\nVYQsKil5kTKQYSX5aAA9JOaJ+YN73cAhoeC3prQYUwnZ4shxuNdgAjP9s9vz\nBer7kfg5C1I8ZpL+LhgMoRiyVlEctGqJ8eNvdgT7JtT4n9UtWSZe5uxuUGye\nrZT6piBSvIaVGr3AIgC1u9HVadRkHE7A1SU7vShrf+xXtAj2BgFXYLYl4GIp\nmZZRyNwml29NxlKMSf4cz4IPo2MI2dIXRPfWpIcZqFlTdnHMVgY7r7owWjIT\nlre4MuaJiRD/sB5ai1MrdX8tvpDhBCtYtevV1j2vmnWu4ZYhPjeP44aag1BZ\nkFp0nCJE7v9E3CiAvchWZds+k9BRom9q+6vuC4tvcHA8LqPFhSMJBJT2LYNc\nNJyY5EvtHG3EEP69uWYHITGmJtJAf33eXunkxacavBHKta6DzL4eUAREsFv8\ntBz7PTucIu992LPOVv68TKaT889Tz9zRVfTaq2PM4kYz+CvrDyN2idZbu+ZN\ngrUmDJUOYWWvS/NM+FkUBc2GH5ehuRGk6yHy3HHGT1P/dde20DYWjUQQuHdw\n1IOt/J/qDmb42MyznNx8Qpk51UJ4MqUpkpgcTan/m7mMfWzl6bu1nfmEXp0e\nO2TF\r\n=IQsb\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCjnXQbMANbM6r+6QKGCd7xK8CnNOUCbHYxKciiZA9qWwIgQNnNChYzp80D2KFuRo/LpKV6RWnq6cQArZ4mRYIcx9Y="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.8.2_1588940049993_0.17971915824383156"
      },
      "_hasShrinkwrap": false
    },
    "3.9.0": {
      "name": "ava",
      "version": "3.9.0",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <12.17.0 || >=12.17.0 <13 || >=14.0.0"
      },
      "scripts": {
        "test": "xo && tsd && c8 --report=none tap && c8 --report=none --no-clean test-ava && c8 report"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "acorn": "^7.3.1",
        "acorn-walk": "^7.1.1",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "callsites": "^3.1.0",
        "chalk": "^4.1.0",
        "chokidar": "^3.4.0",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.0",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^2.1.1",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.7.0",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.1",
        "ignore-by-default": "^2.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.0",
        "is-promise": "^4.0.0",
        "lodash": "^4.17.15",
        "matcher": "^3.0.0",
        "md5-hex": "^3.0.1",
        "mem": "^6.1.0",
        "ms": "^2.1.2",
        "ora": "^4.0.4",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^7.0.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.19",
        "stack-utils": "^2.0.2",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.0",
        "write-file-atomic": "^3.0.3",
        "yargs": "^15.3.1"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@ava/test": "github:avajs/test",
        "@babel/plugin-proposal-do-expressions": "^7.10.1",
        "@sinonjs/fake-timers": "^6.0.1",
        "ansi-escapes": "^4.3.1",
        "c8": "^7.2.0",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.2",
        "get-stream": "^5.1.0",
        "p-event": "^4.2.0",
        "proxyquire": "^2.1.3",
        "react": "^16.13.1",
        "react-test-renderer": "^16.13.1",
        "replace-string": "^3.1.0",
        "sinon": "^9.0.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.7",
        "temp-write": "^4.0.0",
        "tempy": "^0.5.0",
        "touch": "^3.1.0",
        "tsd": "^0.11.0",
        "typescript": "^3.9.5",
        "xo": "^0.32.0",
        "zen-observable": "^0.8.15"
      },
      "gitHead": "78cfaa17fec615a1979a9aaa9855f6cc8eeeb4d8",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.9.0",
      "_nodeVersion": "14.4.0",
      "_npmVersion": "6.14.5",
      "dist": {
        "integrity": "sha512-EnK5I/AX1U5nF4X1YG3QQYg2+jWnpvMW3z2y096DBvbwITkq9rB7Gu1j5clWcuizAJUlYbvcX6YfP+zkRFgC8Q==",
        "shasum": "ac91eac980555fcc6c1b91872ac6923ff4c0ffae",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.9.0.tgz",
        "fileCount": 48,
        "unpackedSize": 242468,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe5jbFCRA9TVsSAnZWagAA7+oQAINEoyoCUvl8Xc2mIyWF\nPJKg9JkYvEvyfwgQscBVSwS1XmFSYBqu+AnamFpWUAntPGu1xcFEL/rbSpzT\n2cuaw5n0Qq0GkkcSgDlPpj/830SOIynuP6epe1zWnYWOMdsn7Xztjb9j2bOo\nqUpFp0Wh5WC1fFWTpGr1U1Tr31ZKt6CQTk0wvlegsvi6oqJ8qfcjKT/ZI7os\nSELKP5ofxY6wyh57CqyqR2dRdL2NJnps7KjSIYX4j1fuuLArEEe5PpMdkIlF\ndBii8V/G83uBM10szsJhx+GV41Rw3dZYtD/DEtrmgXjYdcKa7nl2xW3beIFF\nBVMyAMBDhEni47rMWve219qlaaH7Ah/06HJh+K8lYK0gqloshdCoH2AopT2I\n5XyOqDyjdBjhvXTyrjEMuAapRdvODy8uE6OZ8BBauZ2HHGOCSRtsvuegwgRi\nXva0HxYnDtpSjz8B+i0X9dMiNUJUS6XBNyYDsmrX0qv/qdp0u9hVz51Nd5GQ\nywL01c+Lw9/jOBSWgcGLeEq5oQ9f0oBXoVqDyxY/yJP/9TP37dy3WLhrFGEs\n669p/wAFLqu/hD/f9JhAcvzAr9k3WnV7nq1kp5I3i6qDNJdU4G56dc8XHtJt\nOErPst4N5OWuAmZSHZGFEP7Qey76SVU1X45LtN0dEwsPLaoUvKeCfl1oQFxR\nqNzC\r\n=cVdi\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDE7b+s52jSYUAFms5f+2xAYQpPiWXOIYhkZom9hJlM3AiEAiuXliE0/TKeTpVDWfeo2Bq6TwDF0hM6Cl2EJR6ESjB0="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.9.0_1592145605221_0.3311996714727332"
      },
      "_hasShrinkwrap": false
    },
    "3.10.0": {
      "name": "ava",
      "version": "3.10.0",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <12.17.0 || >=12.17.0 <13 || >=14.0.0"
      },
      "scripts": {
        "test": "xo && tsd && c8 --report=none tap && c8 --report=none --no-clean test-ava && c8 report"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "acorn": "^7.3.1",
        "acorn-walk": "^7.2.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "callsites": "^3.1.0",
        "chalk": "^4.1.0",
        "chokidar": "^3.4.0",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^3.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.7.0",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.1",
        "ignore-by-default": "^2.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.1",
        "is-promise": "^4.0.0",
        "lodash": "^4.17.15",
        "matcher": "^3.0.0",
        "md5-hex": "^3.0.1",
        "mem": "^6.1.0",
        "ms": "^2.1.2",
        "ora": "^4.0.4",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^7.0.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.19",
        "stack-utils": "^2.0.2",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.0",
        "write-file-atomic": "^3.0.3",
        "yargs": "^15.4.0"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@ava/test": "github:avajs/test",
        "@babel/plugin-proposal-do-expressions": "^7.10.4",
        "@sinonjs/fake-timers": "^6.0.1",
        "ansi-escapes": "^4.3.1",
        "c8": "^7.2.0",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.2",
        "get-stream": "^5.1.0",
        "p-event": "^4.2.0",
        "proxyquire": "^2.1.3",
        "react": "^16.13.1",
        "react-test-renderer": "^16.13.1",
        "replace-string": "^3.1.0",
        "sinon": "^9.0.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.7",
        "temp-write": "^4.0.0",
        "tempy": "^0.5.0",
        "touch": "^3.1.0",
        "tsd": "^0.13.1",
        "typescript": "^3.9.6",
        "xo": "^0.32.1",
        "zen-observable": "^0.8.15"
      },
      "gitHead": "38686110df1113cee1a8f40cddb1cc08a2eb3452",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.10.0",
      "_nodeVersion": "14.5.0",
      "_npmVersion": "6.14.5",
      "dist": {
        "integrity": "sha512-CxcYQYeE39pcLWrN2/TASMpnqH/SoaX+W61+4m3saETU041PIDcoP9LLNWPAE/yJZXjp0M1RWTohSkmGqJZKww==",
        "shasum": "ed1a53986435fc1cd8c15978cd8ff81217c34831",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.10.0.tgz",
        "fileCount": 48,
        "unpackedSize": 245008,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfAfmUCRA9TVsSAnZWagAAQyIQAJ1CYF4SO4jrIiz1ktCE\nzGSGXyoasbb88QRMcHDvx6CHDdBt65X0Ik3uHenJpD/UZlYU+ZJKaIn63bQG\nl+3jKfZczNDdMc5DJ6gft0fR53D37R6g324WUH7dnWS7WnDCnt5i+RhrNbLF\nSWAFavAb58bO09PVzF2/T9L9fkKVAyw0oaTMmUPlaQUtbL3NBlaxEVd9RHK3\nnDnE6KQg5mv+Q99Cii9t/Ct2UJh4d+7bNHvy0NzT9+/Vt9skluVnlqwGUtp0\nGyj8MI+yZ7gCwulwg49L+d23YpAIu9VC1T0W+L/h0FZkhyJKRfn+CFeKaBeF\n6A10KSH21BLxiOB57f1X+tIvBnl+a6LGOMb+MKMTreBp3IV+FxEhQ0Lr2oQK\nnZsMLvclFjvxuruBOkG0C+EAFrG7hEI1iURkyclHDfw/4AwWSIOK8KLOUIYc\nL1jnpb0m6WJp8RghfPit7IbLKyiKLebK2q9Q74lMgwwEH16/AXndLLjKgS7Z\nAcETbzLmO1aL78rG6w4ufzfxKxKHuFfrlVHMbtgVUEXf28KDSf16PpFcqQDY\n8n9jjvh8g2q3BadrrYIXXPGR7Z47x55NjvJmCwGDr03Sq693E2Os9MQyDEjI\nd1YDSt4eTS1lklXErpPE7LL39ewG70ed+Oam35k5tpIoI3xZvyQ7Mbge5wnc\nkAYY\r\n=suAu\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDqvXGVLd2+/kK3+8r3NnxNvE5OHrc0ac9sNvVmA+nY5wIhAOHN83d0MQ831koBrxLXpiTPDh4vI/xZNJ7A53cswogM"
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.10.0_1593964947748_0.30574596308500057"
      },
      "_hasShrinkwrap": false
    },
    "3.10.1": {
      "name": "ava",
      "version": "3.10.1",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <12.17.0 || >=12.17.0 <13 || >=14.0.0"
      },
      "scripts": {
        "test": "xo && tsd && c8 --report=none tap && c8 --report=none --no-clean test-ava && c8 report"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "acorn": "^7.3.1",
        "acorn-walk": "^7.2.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "callsites": "^3.1.0",
        "chalk": "^4.1.0",
        "chokidar": "^3.4.0",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^3.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.7.0",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.1",
        "ignore-by-default": "^2.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^3.0.1",
        "is-promise": "^4.0.0",
        "lodash": "^4.17.15",
        "matcher": "^3.0.0",
        "md5-hex": "^3.0.1",
        "mem": "^6.1.0",
        "ms": "^2.1.2",
        "ora": "^4.0.4",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^7.0.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.19",
        "stack-utils": "^2.0.2",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.0",
        "write-file-atomic": "^3.0.3",
        "yargs": "^15.4.0"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@ava/test": "github:avajs/test",
        "@babel/plugin-proposal-do-expressions": "^7.10.4",
        "@sinonjs/fake-timers": "^6.0.1",
        "ansi-escapes": "^4.3.1",
        "c8": "^7.2.0",
        "delay": "^4.3.0",
        "esm": "^3.2.25",
        "execa": "^4.0.2",
        "get-stream": "^5.1.0",
        "p-event": "^4.2.0",
        "proxyquire": "^2.1.3",
        "react": "^16.13.1",
        "react-test-renderer": "^16.13.1",
        "replace-string": "^3.1.0",
        "sinon": "^9.0.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.7",
        "temp-write": "^4.0.0",
        "tempy": "^0.5.0",
        "touch": "^3.1.0",
        "tsd": "^0.13.1",
        "typescript": "^3.9.6",
        "xo": "^0.32.1",
        "zen-observable": "^0.8.15"
      },
      "gitHead": "07602f5bedd4d1363d3998d5e4508d1e094dff4f",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.10.1",
      "_nodeVersion": "12.18.0",
      "_npmVersion": "6.14.4",
      "dist": {
        "integrity": "sha512-+w86ZHyFHIGCABi7NUrn/WJMyC+fDj0BSIlFNVS45WDKAD5vxbIiDWeclctxOOc2KDPfQD7tFOURSBz0FBLD0A==",
        "shasum": "a4e68b1a2bb248fa0d96529d23dd83f57082e944",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.10.1.tgz",
        "fileCount": 48,
        "unpackedSize": 244665,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfBJpACRA9TVsSAnZWagAAUBMP/i+UnWC2GipoBgLVBAoe\n79pi4Qn1wQ6oN8lsflgAtM8yppV9BFxFoe9X0NNkSnCQo3K6OhfUQK3ESxTO\nNa8A4849qaDElrOHsNozI5S+3/OdlW+5XthUyLzKyc570Sw1bGGjRsY66w3U\np/p1y7Hdv/nVH9JRFMrR7A7bCgnNN7QxBjyNirsgXcA7/A0LBCakvPofgIwm\nahzYkl+d5ArHKdSbl+9z39uI3mNSi4dvZ0FFUf32BjUQUT6ieYFhiVat/beA\nZDgpCDIUXaotL73vulf4NW8/8lA+dFcZ0+U/soyS7+PrSz1KGRmmJC8gT77/\n31lJsQnFC+MGevdG28eIIgnpm1Rv4dXiJQ6tEFxZtK1ftNn7dSv+OqenTKew\nGD+Xu4QDgkkI+oDjaQU10IHh5ouDDMGpvAES3hCMfT9WqHmkNgpitO6UMAH6\nYiggca3+X0kYlmwO53aMX9viaYEyVztJ+fdOv0ZQHEgHqDdbLkqFD6i+MZjx\nVFbGnEModA1cyCErtc9gQn6bN/ynd4mhShOFYhgAvFb0ak6TDE2OyAxwb41q\nj/YzbDZ6YcvWZsA+C22ugDLfudSKqBR7f8Ipf15GXCNYASg1Hrhaj+94nZ4b\n41HCQJaAvU5Ob5eMyYQGqHQwYeF5eFd4QvgE/U2CJGEWk8VwjcbMGa1Y1u2f\nGpgs\r\n=QD54\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEoyxTPHnbPegW54yDYdys+a5md65N8PSltC5TXRaArQAiEA4+TGKtF1NktNZ7kH12oPWwNvLi+qcKEvLxyyTX0n4rw="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.10.1_1594137152135_0.7826403676635403"
      },
      "_hasShrinkwrap": false
    },
    "3.11.0": {
      "name": "ava",
      "version": "3.11.0",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <12.17.0 || >=12.17.0 <13 || >=14.0.0"
      },
      "scripts": {
        "test": "xo && tsd && c8 --report=none tap && c8 --report=none --no-clean test-ava && c8 report"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "acorn": "^7.3.1",
        "acorn-walk": "^7.2.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "callsites": "^3.1.0",
        "chalk": "^4.1.0",
        "chokidar": "^3.4.1",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^3.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.7.1",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.1",
        "ignore-by-default": "^2.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^4.1.1",
        "is-promise": "^4.0.0",
        "lodash": "^4.17.19",
        "matcher": "^3.0.0",
        "md5-hex": "^3.0.1",
        "mem": "^6.1.0",
        "ms": "^2.1.2",
        "ora": "^4.0.5",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^7.0.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.19",
        "stack-utils": "^2.0.2",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.0",
        "write-file-atomic": "^3.0.3",
        "yargs": "^15.4.1"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@ava/test": "github:avajs/test",
        "@babel/plugin-proposal-do-expressions": "^7.10.4",
        "@sinonjs/fake-timers": "^6.0.1",
        "ansi-escapes": "^4.3.1",
        "c8": "^7.2.1",
        "delay": "^4.4.0",
        "esm": "^3.2.25",
        "execa": "^4.0.3",
        "get-stream": "^5.1.0",
        "p-event": "^4.2.0",
        "proxyquire": "^2.1.3",
        "react": "^16.13.1",
        "react-test-renderer": "^16.13.1",
        "replace-string": "^3.1.0",
        "sinon": "^9.0.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.8",
        "temp-write": "^4.0.0",
        "tempy": "^0.6.0",
        "touch": "^3.1.0",
        "tsd": "^0.13.1",
        "typescript": "^3.9.7",
        "xo": "^0.32.1",
        "zen-observable": "^0.8.15"
      },
      "gitHead": "8d03e1dfddab7de44553a5b6c4bae0b5e4136951",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.11.0",
      "_nodeVersion": "14.6.0",
      "_npmVersion": "6.14.7",
      "dist": {
        "integrity": "sha512-y5U8BGeSRjs/OypsC4CJxr+L1KtLKU5kUyHr5hcghXn7HNr2f4LE/4gvl0Q5lNkLX1obdRW1oODphNdU/glwmA==",
        "shasum": "484f25efa7cf6ec354defd75f19c3cc28fcf0141",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.11.0.tgz",
        "fileCount": 48,
        "unpackedSize": 245356,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfHom6CRA9TVsSAnZWagAA+N4QAKO8oJF7Wy+RGWOend+E\nrlNJOgXDrHUXDC14tsLf+R+70aUgFfUn+U1vJy1+ZSUgD+7DShCHME6vZehJ\n06B0ymXp5xCn/GXOpm0A5BXGQFZOden6Cs3EvKs2GodUe0q8BkKchbaAy7wh\nQFath9ruqwy7Vz+TW+q0CIH5hlIMAXtK+ymZY1RnEZCFbx2r1xxSx67EAVKS\nJbjFKOuAGIRa5ZYhoI0om9trVi/RPH8wLLlkGm78fhcxVwCMb1ntPw80PXhP\nrznJwlLAGDicxc5p++ZhBt1OD0iPpIhs1QpHMIdm762WUP4mjufVL82zEa5v\nGzAeS9pHHUBJXTs+yh5zi2vat1DkqMNhqEs2mh5AoNj3QyaBs2E2UGxXGqRG\nnyK7sP5kUTTw0XsqiZTVSg3vtkSnpb+vQqg84GyNuQAEEJipyyYlpO4JFPZJ\nFW9yvHeLknctV1BRzeG+WQqtWQPPjeNwbzURikBlGUHr9BnM8bb5EWSEKraD\n3OW7AsqS5Bc0mdTuJkfmBBbQUUYn3WSiJyR8Ai2Mj/Sa5bbO4cznLeo3lGgl\nnKDVqG0rb7ew2KY4ID0X5W4ovcJA5kLtRNAkE4y9crlUonzDWzqwCDSlZcYW\nV3LdRhZQqeC0MC5613Y1tl6g/lMUtOKS9HF6iMMrR1eAgFcGIw333vAA1lmQ\nvifR\r\n=aKwS\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCP8aAszFR538FJ+216/vL9cYBoO8VuzxweQsNM0yQvjwIgXU/85gAdUuIfa/MWbMOcjgQHKVZjlel+Iu2N2PeDOQw="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.11.0_1595836858353_0.9019429331945739"
      },
      "_hasShrinkwrap": false
    },
    "3.11.1": {
      "name": "ava",
      "version": "3.11.1",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <12.17.0 || >=12.17.0 <13 || >=14.0.0"
      },
      "scripts": {
        "test": "xo && tsd && c8 --report=none tap && c8 --report=none --no-clean test-ava && c8 report"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "acorn": "^7.3.1",
        "acorn-walk": "^7.2.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "callsites": "^3.1.0",
        "chalk": "^4.1.0",
        "chokidar": "^3.4.1",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^3.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.0",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.7.1",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.1",
        "ignore-by-default": "^2.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^4.1.1",
        "is-promise": "^4.0.0",
        "lodash": "^4.17.19",
        "matcher": "^3.0.0",
        "md5-hex": "^3.0.1",
        "mem": "^6.1.0",
        "ms": "^2.1.2",
        "ora": "^4.0.5",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^7.0.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.19",
        "stack-utils": "^2.0.2",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.0",
        "write-file-atomic": "^3.0.3",
        "yargs": "^15.4.1"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@ava/test": "github:avajs/test",
        "@babel/plugin-proposal-do-expressions": "^7.10.4",
        "@sinonjs/fake-timers": "^6.0.1",
        "ansi-escapes": "^4.3.1",
        "c8": "^7.2.1",
        "delay": "^4.4.0",
        "esm": "^3.2.25",
        "execa": "^4.0.3",
        "get-stream": "^5.1.0",
        "p-event": "^4.2.0",
        "proxyquire": "^2.1.3",
        "react": "^16.13.1",
        "react-test-renderer": "^16.13.1",
        "replace-string": "^3.1.0",
        "sinon": "^9.0.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.8",
        "temp-write": "^4.0.0",
        "tempy": "^0.6.0",
        "touch": "^3.1.0",
        "tsd": "^0.13.1",
        "typescript": "^3.9.7",
        "xo": "^0.32.1",
        "zen-observable": "^0.8.15"
      },
      "gitHead": "0483b8cb9f06b5035cb9527933407085e749d8d8",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.11.1",
      "_nodeVersion": "12.18.0",
      "_npmVersion": "6.14.6",
      "dist": {
        "integrity": "sha512-yGPD0msa5Qronw7GHDNlLaB7oU5zryYtXeuvny40YV6TMskSghqK7Ky3NisM/sr+aqI3DY7sfmORx8dIWQgMoQ==",
        "shasum": "580bfc974b858fb13f7ce948b9651da4e5b17bc8",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.11.1.tgz",
        "fileCount": 47,
        "unpackedSize": 245693,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfJ7PMCRA9TVsSAnZWagAAL3MQAJxiZUV/GUjddfTdDxRl\n5IiZXD4OQ63Dbkbciy+wdkWt1Xel3TCGz8XIWDcd3ztaHXcxcDHnRS/BAlny\nJAHqplVjGND9Jr1rPAausWYemcqXQOtwk//ijIoOOrKqzxuutzBl/Y5DXha0\n+CD/lPynjBPOc8TBCVZYqsXtUgoNLT1TT9fT6Pz0+EyfDupDD9PvklxiAG5i\nfUNDyMGg61UGJBVmRYaALqVyMiAdfgHtZEWdZNg+bdNQNaRg9gza3iScI0Gy\n3dRvI9zbcmMA9q7ZEFfgcPY1chHUc/nEtbSL2CN1Vb/saezxr1aMqvnJx/3F\nU1028Aqxr7w4+8e70mAZDVHEp53qzlSDtoDbtAsbgYevplFYeZXTQWdC1s20\nMxm9wDBMxbJ5nGddrowO6/rYhjQN9VFtuoWlB/7CdHRI0zl0Lkp8I6dZF/Mr\neyVYPe6jpFwxl5MBI5SAl0eG8ifsEbu2d1nglMwGjXVSJxMOUt0gwx2Y8Xxf\n6A6YJxSqX6MYvTxhVi5zUXJMkVHgEay2Q3eyMrLYw5pqdyG0JS27KLr9Jrqu\nnCJu28rn667BBz1OAC0NxNJk6l+1JOjCseixsxxDks6rq2yxMtcZEr8kllIk\nvaxIhezvf0nULPQG7qubAiKGnEmuxTryHxJ4CpVSgUw0Od/LT1PrOl66zdt2\n8Num\r\n=WL4C\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDP5Za195/h0+dU22odE5LmIvFOhnD/2GkiZ+CmPNUY5AIgWKC7GiIcf9cmSyCBep2G/XIf9ihz0RWzbz2Pj2laCBY="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.11.1_1596437451895_0.37957770264660584"
      },
      "_hasShrinkwrap": false
    },
    "3.12.0": {
      "name": "ava",
      "version": "3.12.0",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <12.17.0 || >=12.17.0 <13 || >=14.0.0"
      },
      "scripts": {
        "test": "xo && tsd && c8 --report=none tap && c8 --report=none --no-clean test-ava && c8 report"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "acorn": "^8.0.1",
        "acorn-walk": "^8.0.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "callsites": "^3.1.0",
        "chalk": "^4.1.0",
        "chokidar": "^3.4.2",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^3.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.1",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.7.1",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.1",
        "ignore-by-default": "^2.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^4.1.1",
        "is-promise": "^4.0.0",
        "lodash": "^4.17.20",
        "matcher": "^3.0.0",
        "md5-hex": "^3.0.1",
        "mem": "^6.1.0",
        "ms": "^2.1.2",
        "ora": "^5.0.0",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^7.0.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.19",
        "stack-utils": "^2.0.2",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.1",
        "write-file-atomic": "^3.0.3",
        "yargs": "^15.4.1"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@ava/test": "github:avajs/test",
        "@babel/plugin-proposal-do-expressions": "^7.10.4",
        "@sinonjs/fake-timers": "^6.0.1",
        "ansi-escapes": "^4.3.1",
        "c8": "^7.3.0",
        "delay": "^4.4.0",
        "esm": "^3.2.25",
        "execa": "^4.0.3",
        "get-stream": "^6.0.0",
        "p-event": "^4.2.0",
        "proxyquire": "^2.1.3",
        "react": "^16.13.1",
        "react-test-renderer": "^16.13.1",
        "replace-string": "^3.1.0",
        "sinon": "^9.0.3",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.8",
        "temp-write": "^4.0.0",
        "tempy": "^0.6.0",
        "touch": "^3.1.0",
        "tsd": "^0.13.1",
        "typescript": "^3.9.7",
        "xo": "^0.33.0",
        "zen-observable": "^0.8.15"
      },
      "gitHead": "76941715e38f328026a2dde1a3791feec5696100",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.12.0",
      "_nodeVersion": "14.8.0",
      "_npmVersion": "6.14.7",
      "dist": {
        "integrity": "sha512-NRzhU/w4lIzZqJ2sLYZ6C91ZNl5v6JOWC6gb89/9NaN05vXMQylJPbVFMF3aIah5e6Lo4Ub86aey0wZ+uL+FiQ==",
        "shasum": "82c837cfcd3bec980f491cabb7ca1e2b071a16c7",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.12.0.tgz",
        "fileCount": 49,
        "unpackedSize": 249072,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfQsXiCRA9TVsSAnZWagAA1g8P/R4Aq/34ao1xEZ0mM/nU\nzrBN6CKwBiX9QGp3daBoGzcL3zoREyp0IV/n5iURI6MPq6tB8MXnQxT2NKbx\nb8DX+msCDEWOE4DzFJXp4mnpxBxzyhSYuXN5BanmeTWml5qEXImnx78OMgUC\n1A+VlS4rrE3IpwisJWTD63qXef6douMZPVusOydQ5wjNO66j/bjk8Z5shcAc\nFPJ4hdZuURNAuPED68BLa9JANNtDrE1ujTalj+d2HexU4bDt0UmcvTbdG4T/\nmIn+9EHDw9BzTEZ9rBSRlBNQnJKSVdiEJyYnDyqfknsSHsVtdCx4Pai0Wbf3\naTqsNjyoysHd6R/GbAHRKsTVZSU/7kCfnOfEYqbig8/iyc2pmWoSCEzmfGsQ\nYEmnX7yC/GenqSPzLDBbrL53Vu8DuNeTMiNP6WncN7mek5Gt6NkMm5Oy8Ugz\nL5lAbLlJvvTOnjDb3TwYHcwfBzGRLW65bQsP1TfQLkbtC8gQLdDjGtUqzvqh\nmqZZY/rWIEL5Iwl4GsyI9ORlAdoUBVxhDejHYl9B5TCV3V3/Mb0PBJxnk3F+\nRv0vT4E90Ewzjn4gp90nxcFni9cbiGBy5xDM00kLwvzo3X6LgeLz14RsJ2eC\nrM/Zw3cOASE6nMLNC/ir4gO1tBw9RSntVdsTJWgmOqaDIHmq+1lUnx84EJmF\nSVfq\r\n=5fam\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFrPokL3LOzR0i8h/41rugBvBk+Phv8je302ag3hDWvxAiA72KYzmglG766oc+oOVgibkvIQwJsM7N02kN85C9DeYw=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.12.0_1598211554463_0.7995361822321714"
      },
      "_hasShrinkwrap": false
    },
    "3.12.1": {
      "name": "ava",
      "version": "3.12.1",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <12.17.0 || >=12.17.0 <13 || >=14.0.0"
      },
      "scripts": {
        "test": "xo && tsd && c8 --report=none tap && c8 --report=none --no-clean test-ava && c8 report"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "acorn": "^8.0.1",
        "acorn-walk": "^8.0.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "callsites": "^3.1.0",
        "chalk": "^4.1.0",
        "chokidar": "^3.4.2",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^3.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.1",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.1.1",
        "del": "^5.1.0",
        "emittery": "^0.7.1",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.1",
        "ignore-by-default": "^2.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^4.1.1",
        "is-promise": "^4.0.0",
        "lodash": "^4.17.20",
        "matcher": "^3.0.0",
        "md5-hex": "^3.0.1",
        "mem": "^6.1.0",
        "ms": "^2.1.2",
        "ora": "^5.0.0",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^7.0.0",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.19",
        "stack-utils": "^2.0.2",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.1",
        "write-file-atomic": "^3.0.3",
        "yargs": "^15.4.1"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@ava/test": "github:avajs/test",
        "@babel/plugin-proposal-do-expressions": "^7.10.4",
        "@sinonjs/fake-timers": "^6.0.1",
        "ansi-escapes": "^4.3.1",
        "c8": "^7.3.0",
        "delay": "^4.4.0",
        "esm": "^3.2.25",
        "execa": "^4.0.3",
        "get-stream": "^6.0.0",
        "p-event": "^4.2.0",
        "proxyquire": "^2.1.3",
        "react": "^16.13.1",
        "react-test-renderer": "^16.13.1",
        "replace-string": "^3.1.0",
        "sinon": "^9.0.3",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.8",
        "temp-write": "^4.0.0",
        "tempy": "^0.6.0",
        "touch": "^3.1.0",
        "tsd": "^0.13.1",
        "typescript": "^3.9.7",
        "xo": "^0.33.0",
        "zen-observable": "^0.8.15"
      },
      "gitHead": "ac2ae0548d204340c6dd57dff45b43c80689e3fc",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.12.1",
      "_nodeVersion": "12.18.0",
      "_npmVersion": "6.14.6",
      "dist": {
        "integrity": "sha512-cS41+X+UfrcPed+CIgne/YV/6eWxaUjHEPH+W8WvNSqWTWku5YitjZGE5cMHFuJxwHELdR541xTBRn8Uwi4PSw==",
        "shasum": "0181b5ca10d178539a0d503e0fc9244146303717",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.12.1.tgz",
        "fileCount": 48,
        "unpackedSize": 247672,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfQ5AdCRA9TVsSAnZWagAAUP4P/RBIgJR6qU6lffaZwLOo\n2a4tmewRfVXGwh5zaE8MUbiLesr7bjc3/VdjryahjuIMDWrjTt9Y/jvHo5NX\nulwejPuAgOe9Dt1XFsTqaytOrntcV75NF9Yr//Zj7KPaeNzBIbvH+7bX03ID\ni9MEFi3JlE1OeIOYBEhlF6o70hD+ccJB4Hitt76LWx+OI8EdC0SW3YJ/YI+u\nM4m/pyoZN5g00exsXnmrTmH1a/Olp9csbRqILFLYs91U43kyECL9CgcU3Zw4\nMAbRI98pq+pCZRh9u1gjNP11mj81Q/UFGiCndTStXQIV4m7VfIHcV7boyxsY\nkcAjj/wU4+RojmcCtVQbWLaI8IZGOm34jJNHtQBEpEFrvyGe8YojoqCf/sY4\n6R/IQMP4kL9GTfmwteV1iG3Crsox010U/p8iqD0noWWdW0f3Ozd7Y4HC2ZoI\n9S59PeyG/nobpPWnM677285AL6RribhDcD5EuQicMXAl5eLzu7D4s/4mQrXX\nGrCTDxxNtO1GVJ3sWf6XroZUHNZB5f927jmNdgG7vTuubWNr4krLy5zT74Ly\nMMRj6I+ASBKW/UcK5YHT199kTjzNIGfCFiIsMVVwoRhl34MpfC4x0b0+Uakp\nfmWOlBj0CXXB0POLJ9l2xMPi4dQAxVnvcUYTppPUCt2eJX6ScPxfdhOyF+o9\nUsLz\r\n=FoHO\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIF2EKnzUepJScpyuATBLx06QaZZOrNfr5JUxQW1SDbmoAiAyUDMhLB3TVtRCPIrWOAEULOw+/pC7cuWxvhgqGMlwDw=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "mark@novemberborn.net",
          "name": "novemberborn"
        },
        {
          "email": "sindresorhus@gmail.com",
          "name": "sindresorhus"
        },
        {
          "email": "vdemedes@gmail.com",
          "name": "vdemedes"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.12.1_1598263324668_0.3331551198850906"
      },
      "_hasShrinkwrap": false
    },
    "3.13.0": {
      "name": "ava",
      "version": "3.13.0",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <12.17.0 || >=12.17.0 <13 || >=14.0.0"
      },
      "scripts": {
        "test": "xo && tsd && c8 --report=none tap && c8 --report=none --no-clean test-ava && c8 report"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "acorn": "^8.0.1",
        "acorn-walk": "^8.0.0",
        "ansi-styles": "^4.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "callsites": "^3.1.0",
        "chalk": "^4.1.0",
        "chokidar": "^3.4.2",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^3.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.1",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.2.0",
        "del": "^6.0.0",
        "emittery": "^0.7.1",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.1",
        "ignore-by-default": "^2.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "lodash": "^4.17.20",
        "matcher": "^3.0.0",
        "md5-hex": "^3.0.1",
        "mem": "^6.1.1",
        "ms": "^2.1.2",
        "ora": "^5.1.0",
        "p-event": "^4.2.0",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^7.0.1",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.19",
        "stack-utils": "^2.0.2",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^4.1.1",
        "write-file-atomic": "^3.0.3",
        "yargs": "^16.0.3"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@ava/test": "github:avajs/test",
        "@babel/plugin-proposal-do-expressions": "^7.10.4",
        "@sinonjs/fake-timers": "^6.0.1",
        "ansi-escapes": "^4.3.1",
        "c8": "^7.3.1",
        "delay": "^4.4.0",
        "esm": "^3.2.25",
        "execa": "^4.0.3",
        "get-stream": "^6.0.0",
        "it-first": "^1.0.4",
        "proxyquire": "^2.1.3",
        "react": "^16.13.1",
        "react-test-renderer": "^16.13.1",
        "replace-string": "^3.1.0",
        "sinon": "^9.0.3",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.10.8",
        "temp-write": "^4.0.0",
        "tempy": "^0.7.1",
        "touch": "^3.1.0",
        "tsd": "^0.13.1",
        "typescript": "^4.0.3",
        "xo": "^0.33.1",
        "zen-observable": "^0.8.15"
      },
      "gitHead": "fd4da2f280679eb5fdb903bac17b2cb4431773b6",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.13.0",
      "_nodeVersion": "14.10.1",
      "_npmVersion": "6.14.8",
      "dist": {
        "integrity": "sha512-yzky+gark5PdsFFlZ4CnBVxm/OgBUWtn9vAsSSnuooVJNOk5ER17HJXVeUzy63LIt06Zy34oThcn+2ZqgMs7SA==",
        "shasum": "df789d71ace66db99b213395338288d6d4322690",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.13.0.tgz",
        "fileCount": 54,
        "unpackedSize": 271847,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfcLE/CRA9TVsSAnZWagAA0/AP/0Ibj+HGKcZw5a5dYndh\nNAtmJ81iYbk9HW43wvgK9TyBlwa8RHDRG16LYLw++0kGScQSwwi20vNU3kt0\najT4QvGDrqRMI1dhB/dr+BTo82buuhe4cD/REvtY0a2+H4FiUbLyTa8TlNeA\ndZoft9UjJL+MPlJAi2cmlrg+5HmGFSPmIjw/8zW1DZ60uKFSaKXUv5oPnUK9\n48Ri+x2egb6ZheB0EwSJ2dFrx0MG0ohq8GicuEmEzfxXXHHaoNZpxsXy3hJV\nsaZpgOwPhkyVhKNQlLgJ0+Idg2rgTw2LZH7qVfVLbclPagSN1u3c17H/nnki\nuOfHnji49XdOSje6bOHt7QrgD71jBVrmX2mwvx4Pbbv+H/fAL9R+b7vz9iFG\nKXQcLBIAKci482xRP2YOJoJ2QMPO+QACXvNAJQ/+cQAd29JgqhnUQ23VfFOd\nNTegrcLO1CjKYJCPCn4TR4l3fj33mUoPvAW/w1vxsKwQMVTuP+rvOZlxxEj9\nyKJDK6KckFgAk+C9lAifB6nYLhvxS8jZnAwgnKxYpli5yu00lhkDdIXUl6Sq\nR+JtYLf34dK9qvISDDywtVFW2iwBbau/vRlvBdtvM0CuVkdkFgJSxNSgxhpv\nkDaQL3ioxzMsO1GGuFzNgNjqvD9dezeYw3UmT5ELWGIdd9IOgRMZDzGWFK0X\nBlEs\r\n=ho1k\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBU1uzvDrzgEQDr7NYOAxdJuRwyczdixoWrQDDKD1oTCAiEA9AAW7FYo6CQ6z2SNj9YQ3M2sLmLfUz1DGkBBCzEQJW0="
          }
        ]
      },
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.13.0_1601220927048_0.7033477827351149"
      },
      "_hasShrinkwrap": false
    },
    "3.14.0": {
      "name": "ava",
      "version": "3.14.0",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <12.17.0 || >=12.17.0 <13 || >=14.0.0 <15 || >=15"
      },
      "scripts": {
        "test": "xo && tsd && c8 --report=none tap && c8 --report=none --no-clean test-ava && c8 report"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "acorn": "^8.0.4",
        "acorn-walk": "^8.0.0",
        "ansi-styles": "^5.0.0",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "callsites": "^3.1.0",
        "chalk": "^4.1.0",
        "chokidar": "^3.4.3",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^3.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.1",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.1",
        "del": "^6.0.0",
        "emittery": "^0.7.2",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.1",
        "ignore-by-default": "^2.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "lodash": "^4.17.20",
        "matcher": "^3.0.0",
        "md5-hex": "^3.0.1",
        "mem": "^8.0.0",
        "ms": "^2.1.2",
        "ora": "^5.1.0",
        "p-event": "^4.2.0",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^7.0.1",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.19",
        "stack-utils": "^2.0.3",
        "strip-ansi": "^6.0.0",
        "supertap": "^1.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^5.0.1",
        "write-file-atomic": "^3.0.3",
        "yargs": "^16.2.0"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@ava/test": "github:avajs/test",
        "@babel/plugin-proposal-do-expressions": "^7.12.1",
        "@sinonjs/fake-timers": "^6.0.1",
        "ansi-escapes": "^4.3.1",
        "c8": "^7.3.5",
        "delay": "^4.4.0",
        "esm": "^3.2.25",
        "execa": "^5.0.0",
        "get-stream": "^6.0.0",
        "it-first": "^1.0.4",
        "proxyquire": "^2.1.3",
        "react": "^16.14.0",
        "react-test-renderer": "^16.14.0",
        "replace-string": "^3.1.0",
        "sinon": "^9.2.1",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.11.0",
        "temp-write": "^4.0.0",
        "tempy": "^1.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.14.0",
        "typescript": "^4.1.2",
        "xo": "^0.35.0",
        "zen-observable": "^0.8.15"
      },
      "gitHead": "5d3b2006111a91253e0f7474ae278e41c1240820",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.14.0",
      "_nodeVersion": "12.19.0",
      "_npmVersion": "6.14.8",
      "dist": {
        "integrity": "sha512-AkXNi3DBXZE8A1z1JiNvdK6WmpN8oJQcZLkaWU24C3knCN9WVaxoDy90IVQlwjjPySeyQFqWDrsW9KomSNlRmQ==",
        "shasum": "d519bc9abce9a44ead34c86b98bbe72771a6bd81",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.14.0.tgz",
        "fileCount": 54,
        "unpackedSize": 272935,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfzfElCRA9TVsSAnZWagAAPhkP/0FLdV9WSJmweJ8Z4fZY\nrkLzU/+lGz00XQJNxWxSum9BHinkUOWdkZV8Y7LGHRafGiWViFJB7gMn1zbF\nBNNPnyKQ9QM+P8jxrg+BpiseuP9BTRpr1Q6M1T5ErIohy8mfHY/T7uqzwruG\nenJdcFkvx//quTV11YL38XbE+uaoV+UfLDfmlv9NRW0eU+UHV0dqcYw3exN+\n+SKQsLHul4bQ0U9meSljA5m9D+7a6fWGaNnktiCDVGO9WAhWuw3yUV+q0Goc\nJBWPq1zEwK7e2GDJLdN+/V0Ya83qP7YeLtQ73sovlYNs3+BLsSwf1buE5SBX\n9uvNjPUlrQUb/BDUTdsct/BW/vw48SlTuD9goQMVqs3ml3WrKWnz7fDrgX6k\nQM3GJhJTEMjJ4d7GC9yb2ITM3xLpRvw5abBYo3vRPr/yGCMwjaZPPOcQJjrD\ndC2sYVc4EP5pp/x1CjD6G2nNlB0w2uisAznhyFgl76rR9U04Jclw30SaNZkX\nHG/Y7TujDQRbpAA3INNyL4B3SS8951oOhMZoL9vzLxCrnjY4bfg69U6F2n5S\nOJnWATY/NI2N+VTorPsT/Gbxmm9HoQymD3mXlElIKJ0FcyPTZD2YMefiIOD4\neOYcQmBNGTOZMufnLbpRZn7OrdMsPKp52sDNdQkxLJAGK3iGvbwNvUOkyWXK\n7xOi\r\n=15JI\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQD5ZvA1NEOQAfv5KRMYbh0iKxrUDmfBJkqL8Aj9++x99QIgL40DA1s86zuQtVvKPgBykdGnbriyyTCETe8Afimh3Wc="
          }
        ]
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        },
        {
          "name": "vdemedes",
          "email": "vdemedes@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.14.0_1607332133082_0.23624170806968658"
      },
      "_hasShrinkwrap": false
    },
    "3.15.0": {
      "name": "ava",
      "version": "3.15.0",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <12.17.0 || >=12.17.0 <13 || >=14.0.0 <15 || >=15"
      },
      "scripts": {
        "cover": "c8 --report=none tap && c8 --report=none --no-clean test-ava && c8 report",
        "test": "xo && tsd && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "acorn": "^8.0.4",
        "acorn-walk": "^8.0.0",
        "ansi-styles": "^5.0.0",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "callsites": "^3.1.0",
        "chalk": "^4.1.0",
        "chokidar": "^3.4.3",
        "chunkd": "^2.0.1",
        "ci-info": "^2.0.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^3.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.1",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.1",
        "del": "^6.0.0",
        "emittery": "^0.8.0",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.1",
        "ignore-by-default": "^2.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "lodash": "^4.17.20",
        "matcher": "^3.0.0",
        "md5-hex": "^3.0.1",
        "mem": "^8.0.0",
        "ms": "^2.1.3",
        "ora": "^5.2.0",
        "p-event": "^4.2.0",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^7.0.1",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.19",
        "stack-utils": "^2.0.3",
        "strip-ansi": "^6.0.0",
        "supertap": "^2.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^5.0.1",
        "write-file-atomic": "^3.0.3",
        "yargs": "^16.2.0"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@ava/test": "github:avajs/test",
        "@babel/plugin-proposal-do-expressions": "^7.12.1",
        "@sinonjs/fake-timers": "^6.0.1",
        "ansi-escapes": "^4.3.1",
        "c8": "^7.4.0",
        "delay": "^4.4.0",
        "esm": "^3.2.25",
        "execa": "^5.0.0",
        "fs-extra": "^9.0.1",
        "get-stream": "^6.0.0",
        "it-first": "^1.0.4",
        "proxyquire": "^2.1.3",
        "react": "^16.14.0",
        "react-test-renderer": "^16.14.0",
        "replace-string": "^3.1.0",
        "sinon": "^9.2.2",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.11.0",
        "temp-write": "^4.0.0",
        "tempy": "^1.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.14.0",
        "typescript": "^4.1.3",
        "xo": "^0.36.1",
        "zen-observable": "^0.8.15"
      },
      "gitHead": "32c5425353cc58422f0a196bb0c06a4095a33825",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@3.15.0",
      "_nodeVersion": "12.20.0",
      "_npmVersion": "6.14.10",
      "dist": {
        "integrity": "sha512-HGAnk1SHPk4Sx6plFAUkzV/XC1j9+iQhOzt4vBly18/yo0AV8Oytx7mtJd/CR8igCJ5p160N/Oo/cNJi2uSeWA==",
        "shasum": "a239658ab1de8a29a243cc902e6b42e4574de2f0",
        "tarball": "https://registry.npmjs.org/ava/-/ava-3.15.0.tgz",
        "fileCount": 54,
        "unpackedSize": 280919,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf70p5CRA9TVsSAnZWagAA4/4P+gP+ApZiPehfso2zoi4W\ncumXifTuzeYNfzWjjg1dlCWQGzcRoZAfKcR6gbDhZaWxoJvWS04RV3ml7NPy\nBJd5t7M1G2hMoUFFKEZ1rqEbOFJAq8ry3lrk1YvlJ5MZDaMVsyhDoTscdVl9\n5fTkx79bOXyJ34ymAwZ03qCnCC96oV9AGWopby6m4a/+pEcMnqd0E8iiGNjc\naz5UeiJEdMqZsqOX1wyf011xEKvNNImp1NdH/7vsv7oJHWkUteqPmMw39EXT\ng1jKvT2RaSLMjqUdY04V5sLIP9D8DdSQ0c2/clbcdFje2VZNGmMLFjwyl9Cy\nvq54jB/Od4WjvpjT8EQDIM05zrG15xg+v0/pM6gqDQlvOLmXGF5hEOl0cxiz\ny/AVJ+0CDofggpqT1wZLL/Krh/MTSUN20Wb/tRYSPj/xSLzQlLIP5wNruQwe\ngxjEl64FG/yVVfAl5gl+PEiB3r0+BD4V0mFFpA3G5SHoYGvSLNT5eGUGDpBL\nKkUEr2a9XEsYOzghnP4Ah926/5FcryhI0zcyo86UqwOFbIY5rne4ePjym29u\ndIB6sT0NIvkMUXJQ18klbsdwaB3zmNUJoBZy09fL7maE3ENEz6snf1UpXLu4\no1e1T1vKbKirwu5H9E7MUgU0XbC7Dzby0tsAgzNvgmLI2z5mFEflb1EYs+sT\nf2A+\r\n=3TBL\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDwrlBp0d96MX3TWT7ntkMW5HYPjN4ymFZYhrkK0dnnSAiEAzWJsYngVQ2r6pJX2Z7w2K3NrD67kllCXPcPZtOIN6O4="
          }
        ]
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        },
        {
          "name": "vdemedes",
          "email": "vadimdemedes@hey.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_3.15.0_1609517688989_0.21304280562895217"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-alpha.1": {
      "name": "ava",
      "version": "4.0.0-alpha.1",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "cli.js"
      },
      "engines": {
        "node": ">=12.20 <13 || >=14.15 <15 || >=15"
      },
      "scripts": {
        "cover": "c8 --report=none tap && c8 --report=none --no-clean test-ava && c8 report",
        "test": "xo && tsd && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "acorn": "^8.1.0",
        "acorn-walk": "^8.0.2",
        "ansi-styles": "^5.1.0",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "callsites": "^3.1.0",
        "cbor": "^7.0.3",
        "chalk": "^4.1.0",
        "chokidar": "^3.5.1",
        "chunkd": "^2.0.1",
        "ci-info": "^3.1.1",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^3.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.1",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.1",
        "del": "^6.0.0",
        "emittery": "^0.8.1",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.2",
        "ignore-by-default": "^2.0.0",
        "import-local": "^3.0.2",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "lodash": "^4.17.20",
        "matcher": "^3.0.0",
        "mem": "^8.0.0",
        "ms": "^2.1.3",
        "ora": "^5.3.0",
        "p-event": "^4.2.0",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^7.0.1",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.19",
        "stack-utils": "^2.0.3",
        "strip-ansi": "^6.0.0",
        "supertap": "^2.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^5.1.0",
        "write-file-atomic": "^3.0.3",
        "yargs": "^16.2.0"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@ava/test": "github:avajs/test",
        "@babel/plugin-proposal-do-expressions": "^7.12.13",
        "@sinonjs/fake-timers": "^7.0.2",
        "ansi-escapes": "^4.3.1",
        "c8": "^7.6.0",
        "delay": "^5.0.0",
        "execa": "^5.0.0",
        "fs-extra": "^9.1.0",
        "get-stream": "^6.0.0",
        "it-first": "^1.0.6",
        "proxyquire": "^2.1.3",
        "replace-string": "^3.1.0",
        "sinon": "^9.2.4",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.11.0",
        "temp-write": "^4.0.0",
        "tempy": "^1.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.14.0",
        "typescript": "^4.2.3",
        "xo": "^0.38.2",
        "zen-observable": "^0.8.15"
      },
      "peerDependencies": {
        "@ava/babel": "*",
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/babel": {
          "optional": true
        },
        "@ava/typescript": {
          "optional": true
        }
      },
      "readme": "# <img src=\"media/header.png\" title=\"AVA\" alt=\"AVA logo\" width=\"530\">\n\nAVA is a test runner for Node.js with a concise API, detailed error output, embrace of new language features and process isolation that lets you develop with confidence 🚀\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\nRead our [contributing guide](.github/CONTRIBUTING.md) if you're looking to contribute (issues / PRs / etc).\n\n![](media/mini-reporter.gif)\n\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](./docs/01-writing-tests.md#process-isolation)\n- [Write your tests using the latest JavaScript syntax](https://github.com/avajs/babel)\n- [Promise support](./docs/01-writing-tests.md#promise-support)\n- [Async function support](./docs/01-writing-tests.md#async-function-support)\n- [Observable support](./docs/01-writing-tests.md#observable-support)\n- [Enhanced assertion messages](./docs/03-assertions.md#enhanced-assertion-messages)\n- [Automatic parallel test runs in CI](#parallel-runs-in-ci)\n- [TAP reporter](./docs/05-command-line.md#tap-reporter)\n\n\n## Usage\n\nTo install and set up AVA, run:\n\n```console\nnpm init ava\n```\n\nYour `package.json` will then look like this (exact version notwithstanding):\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"^1.0.0\"\n\t}\n}\n```\n\nOr if you prefer using Yarn:\n\n```console\nyarn add ava --dev\n```\n\nAlternatively you can install `ava` manually:\n\n```console\nnpm install --save-dev ava\n```\n\nDon't forget to configure the `test` script in your `package.json` as per above.\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nconst test = require('ava');\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\tt.is(await bar, 'bar');\n});\n```\n\n### Running your tests\n\n```console\nnpm test\n```\n\nOr with `npx`:\n\n```console\nnpx ava\n```\n\nRun with the `--watch` flag to enable AVA's [watch mode](docs/recipes/watch-mode.md):\n\n```console\nnpx ava --watch\n```\n\n## Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## Highlights\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n### Parallel runs in CI\n\nAVA automatically detects whether your CI environment supports parallel builds. Each build will run a subset of all test files, while still making sure all tests get executed. See the [`ci-parallel-vars`](https://www.npmjs.com/package/ci-parallel-vars) package for a list of supported CI environments.\n\n## Documentation\n\nPlease see the [files in the `docs` directory](./docs):\n\n* [Writing tests](./docs/01-writing-tests.md)\n* [Execution context](./docs/02-execution-context.md)\n* [Assertions](./docs/03-assertions.md)\n* [Snapshot testing](./docs/04-snapshot-testing.md)\n* [Command line (CLI)](./docs/05-command-line.md)\n* [Configuration](./docs/06-configuration.md)\n* [Test timeouts](./docs/07-test-timeouts.md)\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/08-common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n### Recipes\n\n- [Shared workers](docs/recipes/shared-workers.md)\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Configuring Babel](https://github.com/avajs/babel)\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with VSCode](docs/recipes/debugging-with-vscode.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n- [Testing web apps using Puppeteer](docs/recipes/puppeteer.md)\n- [Testing web apps using Selenium WebDriverJS](docs/recipes/testing-with-selenium-webdriverjs.md)\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [`/ˈeɪvə/`](media/pronunciation.m4a?raw=true): Ay (f**a**ce, m**a**de) V (**v**ie, ha**v**e) A (comm**a**, **a**go)\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Support\n\n- [GitHub Discussions](https://github.com/avajs/ava/discussions)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) - Lint rules for AVA tests\n- [sublime-ava](https://github.com/avajs/sublime-ava) - Snippets for AVA tests\n- [atom-ava](https://github.com/avajs/atom-ava) - Snippets for AVA tests\n- [vscode-ava](https://github.com/samverschueren/vscode-ava) - Snippets for AVA tests\n- [gulp-ava](https://github.com/avajs/gulp-ava) - Run tests with gulp\n- [grunt-ava](https://github.com/avajs/grunt-ava) - Run tests with grunt\n- [More…](https://github.com/avajs/awesome-ava#packages)\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [Do you like AVA? Donate here!](https://opencollective.com/ava)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus)\n---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](https://sindresorhus.com)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n- [Vadim Demedes](https://github.com/vadimdemedes)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://avajs.dev\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n",
      "readmeFilename": "readme.md",
      "gitHead": "f5b970cca61c89c98e816099cb008abfdde5a4e2",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@4.0.0-alpha.1",
      "_nodeVersion": "14.15.4",
      "_npmVersion": "7.6.3",
      "dist": {
        "integrity": "sha512-lHpL6WwQcBUrxgiGax4XmWuhokaFFdJ+tsClDqx/3A9rN+OsxgluoHcIXlmVrH2mCr4kOJvICEm4lViJDVRoeQ==",
        "shasum": "26741600028d2d39fdcb501ec3437d8254f585e7",
        "tarball": "https://registry.npmjs.org/ava/-/ava-4.0.0-alpha.1.tgz",
        "fileCount": 56,
        "unpackedSize": 266388,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgV38oCRA9TVsSAnZWagAAdokP/ApnGBt56BSNmHubHtBo\nm9B9zMeFcIv/9IpoMkwJBgRlRlDxBPWFU7yQW2HNRuI4niV/4O8GGhJvTdej\n322x6Qa5vkOL/YiDUzLaibhN4cy5HZBjpWu+7j/F2fSKFfLMFd3awKgjW4AA\negyymYIiWCm4LKUyUDScobgXjZd2beTEtgQ74uExflxSEM27OwE9cBf6dR0T\ncqhyWTCXb+3yQjOKUuHbD0NEYwX+CWogqAg1Le2t2TBrHt2fzEFwnUVG1urj\nsbMiCdV/i7CDb4ALOAYN3chOHWB/VpiufsTGw9m5Q5oc3E34rDUpLaCutPsI\nRkFrwx1KhJmYWRrNsTd8kzDV4GkhQYShfJrV30wxjyouHzzn3gJKfmEo9DZ+\nXliirVjtd7dRa6SfeGqszydoLS6pj1LPsFdyIgydFeSePuCh4Bz6aCE4yY79\n+imcRamCHI1fnnC2Hz7GFbHMWVgT+0n8ouYWiT0bCQL6FvzH6MmuME+05PBy\nIue7i8XBcr6Azq8iC3U8ZYlXo1E2umwsm6zrDpnWCCuI3isXYx+iRQCm+oBB\n0jngK14sQpbRRlhOm3ohKuM6ZrJcXu0FJRpfHHezCnQ9UV2gwlp6MYTp6ZxI\nEM53YOcQswJyDmdRTyEUIHuCg3qVqknTogClXXra4Lih3+oMOfehKRAYm2Ml\n3pIp\r\n=Qwj7\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCICoJuoYtCP99NJE5ELcbAfctKX1gmNiwv83r/XTMJSU4AiEA5Xxb4M012ofJOTzO6soOr/WxLXPY+NJNcHDLCQR6inY="
          }
        ]
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_4.0.0-alpha.1_1616346919593_0.703955634088735"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-alpha.2": {
      "name": "ava",
      "version": "4.0.0-alpha.2",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": "./entrypoints/main.mjs",
          "require": "./entrypoints/main.cjs"
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": "./entrypoints/plugin.mjs",
          "require": "./entrypoints/plugin.cjs"
        }
      },
      "engines": {
        "node": ">=12.20 <13 || >=14.15 <15 || >=15"
      },
      "scripts": {
        "cover": "c8 --report=none tap && c8 --report=none --no-clean test-ava && c8 report",
        "test": "xo && tsd && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "babel",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@concordance/react": "^2.0.0",
        "acorn": "^8.1.0",
        "acorn-walk": "^8.0.2",
        "ansi-styles": "^5.1.0",
        "arrgv": "^1.0.2",
        "arrify": "^2.0.1",
        "callsites": "^3.1.0",
        "cbor": "^7.0.3",
        "chalk": "^4.1.0",
        "chokidar": "^3.5.1",
        "chunkd": "^2.0.1",
        "ci-info": "^3.1.1",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-cursor": "^3.1.0",
        "cli-truncate": "^2.1.0",
        "code-excerpt": "^3.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.1",
        "convert-source-map": "^1.7.0",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.1",
        "del": "^6.0.0",
        "emittery": "^0.8.1",
        "equal-length": "^1.0.0",
        "figures": "^3.2.0",
        "globby": "^11.0.2",
        "ignore-by-default": "^2.0.0",
        "indent-string": "^4.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "lodash": "^4.17.20",
        "matcher": "^3.0.0",
        "mem": "^8.0.0",
        "ms": "^2.1.3",
        "ora": "^5.3.0",
        "p-event": "^4.2.0",
        "p-map": "^4.0.0",
        "picomatch": "^2.2.2",
        "pkg-conf": "^3.1.0",
        "plur": "^4.0.0",
        "pretty-ms": "^7.0.1",
        "read-pkg": "^5.2.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "source-map-support": "^0.5.19",
        "stack-utils": "^2.0.3",
        "strip-ansi": "^6.0.0",
        "supertap": "^2.0.0",
        "temp-dir": "^2.0.0",
        "trim-off-newlines": "^1.0.1",
        "update-notifier": "^5.1.0",
        "write-file-atomic": "^3.0.3",
        "yargs": "^16.2.0"
      },
      "devDependencies": {
        "@ava/babel": "^1.0.1",
        "@ava/test": "github:avajs/test",
        "@babel/plugin-proposal-do-expressions": "^7.12.13",
        "@sinonjs/fake-timers": "^7.0.2",
        "ansi-escapes": "^4.3.1",
        "c8": "^7.6.0",
        "delay": "^5.0.0",
        "execa": "^5.0.0",
        "fs-extra": "^9.1.0",
        "get-stream": "^6.0.0",
        "it-first": "^1.0.6",
        "proxyquire": "^2.1.3",
        "replace-string": "^3.1.0",
        "sinon": "^9.2.4",
        "source-map-fixtures": "^2.1.0",
        "tap": "^14.11.0",
        "temp-write": "^4.0.0",
        "tempy": "^1.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.14.0",
        "typescript": "^4.2.3",
        "xo": "^0.38.2",
        "zen-observable": "^0.8.15"
      },
      "peerDependencies": {
        "@ava/babel": "*",
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/babel": {
          "optional": true
        },
        "@ava/typescript": {
          "optional": true
        }
      },
      "readme": "# <img src=\"media/header.png\" title=\"AVA\" alt=\"AVA logo\" width=\"530\">\n\nAVA is a test runner for Node.js with a concise API, detailed error output, embrace of new language features and process isolation that lets you develop with confidence 🚀\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\nRead our [contributing guide](.github/CONTRIBUTING.md) if you're looking to contribute (issues / PRs / etc).\n\n![](media/mini-reporter.gif)\n\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](./docs/01-writing-tests.md#process-isolation)\n- [Write your tests using the latest JavaScript syntax](https://github.com/avajs/babel)\n- [Promise support](./docs/01-writing-tests.md#promise-support)\n- [Async function support](./docs/01-writing-tests.md#async-function-support)\n- [Observable support](./docs/01-writing-tests.md#observable-support)\n- [Enhanced assertion messages](./docs/03-assertions.md#enhanced-assertion-messages)\n- [Automatic parallel test runs in CI](#parallel-runs-in-ci)\n- [TAP reporter](./docs/05-command-line.md#tap-reporter)\n\n\n## Usage\n\nTo install and set up AVA, run:\n\n```console\nnpm init ava\n```\n\nYour `package.json` will then look like this (exact version notwithstanding):\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"^1.0.0\"\n\t}\n}\n```\n\nOr if you prefer using Yarn:\n\n```console\nyarn add ava --dev\n```\n\nAlternatively you can install `ava` manually:\n\n```console\nnpm install --save-dev ava\n```\n\nDon't forget to configure the `test` script in your `package.json` as per above.\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nconst test = require('ava');\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\tt.is(await bar, 'bar');\n});\n```\n\n### Running your tests\n\n```console\nnpm test\n```\n\nOr with `npx`:\n\n```console\nnpx ava\n```\n\nRun with the `--watch` flag to enable AVA's [watch mode](docs/recipes/watch-mode.md):\n\n```console\nnpx ava --watch\n```\n\n## Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## Highlights\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n### Parallel runs in CI\n\nAVA automatically detects whether your CI environment supports parallel builds. Each build will run a subset of all test files, while still making sure all tests get executed. See the [`ci-parallel-vars`](https://www.npmjs.com/package/ci-parallel-vars) package for a list of supported CI environments.\n\n## Documentation\n\nPlease see the [files in the `docs` directory](./docs):\n\n* [Writing tests](./docs/01-writing-tests.md)\n* [Execution context](./docs/02-execution-context.md)\n* [Assertions](./docs/03-assertions.md)\n* [Snapshot testing](./docs/04-snapshot-testing.md)\n* [Command line (CLI)](./docs/05-command-line.md)\n* [Configuration](./docs/06-configuration.md)\n* [Test timeouts](./docs/07-test-timeouts.md)\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/08-common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n### Recipes\n\n- [Shared workers](docs/recipes/shared-workers.md)\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Configuring Babel](https://github.com/avajs/babel)\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with VSCode](docs/recipes/debugging-with-vscode.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n- [Testing web apps using Puppeteer](docs/recipes/puppeteer.md)\n- [Testing web apps using Selenium WebDriverJS](docs/recipes/testing-with-selenium-webdriverjs.md)\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [`/ˈeɪvə/`](media/pronunciation.m4a?raw=true): Ay (f**a**ce, m**a**de) V (**v**ie, ha**v**e) A (comm**a**, **a**go)\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Support\n\n- [GitHub Discussions](https://github.com/avajs/ava/discussions)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) - Lint rules for AVA tests\n- [sublime-ava](https://github.com/avajs/sublime-ava) - Snippets for AVA tests\n- [atom-ava](https://github.com/avajs/atom-ava) - Snippets for AVA tests\n- [vscode-ava](https://github.com/samverschueren/vscode-ava) - Snippets for AVA tests\n- [gulp-ava](https://github.com/avajs/gulp-ava) - Run tests with gulp\n- [grunt-ava](https://github.com/avajs/grunt-ava) - Run tests with grunt\n- [More…](https://github.com/avajs/awesome-ava#packages)\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [Do you like AVA? Donate here!](https://opencollective.com/ava)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus)\n---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](https://sindresorhus.com)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n- [Vadim Demedes](https://github.com/vadimdemedes)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://avajs.dev\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n",
      "readmeFilename": "readme.md",
      "gitHead": "97525a97c0f1e1fc609c980f6a4e66758c26480a",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@4.0.0-alpha.2",
      "_nodeVersion": "14.15.4",
      "_npmVersion": "7.6.3",
      "dist": {
        "integrity": "sha512-7ePbJ00F/W4+traX8uxjA0dQu+6m8AE90BCOloFuH/zvCoqTKu7kChdWoxTPOlGZJnBHk/qCyI3nkMsEFJiDDg==",
        "shasum": "26badd3e202ec4d38713c113761b54a9c88e28ce",
        "tarball": "https://registry.npmjs.org/ava/-/ava-4.0.0-alpha.2.tgz",
        "fileCount": 58,
        "unpackedSize": 264597,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgbIlkCRA9TVsSAnZWagAA/cYP/14jOBeDIlf+W1mQAv8/\noNMiiFH/avn6B85YXxpNeKmMDedNkn+jVBVIaXQW5xFiTxnv5yZ7Qvowv+vq\nS4rh25Ej84Y2pyTQ00tw5dUfgMG7ATlTlK0SBmg8PFtkMP8PKng2SHieskfO\n+bNMlYHklAMoIEfQb1FO9HG9tSdrwM5GmLPIUUHOSyTHICOuQVk/dEUO7mx0\n/pYtAVoWavB3YNFCDFUhz7PT1NXLmrrBorXKK6fR6dbrizFa+K6h1/UVR5kt\noIq34pCNfOtuBiMUjyiyAWJuuYZqFFb4ttbWCE/98wqcRN7uepBWMkT9SyWZ\nyn/1X+sQawUvqvZRkUItp8pAoO/LcAZtlONZrdt86nrJSLAH3MOCX8w/4Tbe\nl1aEeuyT0ZOO7/HnKYjdoE+di1PGlIrUqnZXBZTMF7sZzWEJoHOAWF5KuHFX\nbpxte4NcI/TTZkt5qqEGel/uV65HA0ALZkhZ/CRZxV3LKhN1fVyW5zejxfQO\nNRSq/VoEDEpZJfCM/r12nO+yzxtL6XNjlOwDzyrAY7vGBXoGgQ69PUKkeIvz\nFQj0ow8WZJOaIsaxsKiZhvl43ETC0V//00tKAinOOGJJ6XTByyPbIot6/CdP\nRMFJGjtcGAu75wnsBbJxnGkJ27IL/NdyVjzglEgLb9TUHMnqmBE0IAb73N/g\naNy1\r\n=IrgH\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHIvwbJsd/vwrE+IF7FpsgL+0uaZ3Xq4FKI9AIrv389OAiBgRbEoCTObBbaHxFMCXZXYY+xz20qWv39pv+m39fRIwQ=="
          }
        ]
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_4.0.0-alpha.2_1617725795528_0.5632611922936037"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-rc.1": {
      "name": "ava",
      "version": "4.0.0-rc.1",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": "./entrypoints/main.mjs",
          "require": "./entrypoints/main.cjs"
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": "./entrypoints/plugin.mjs",
          "require": "./entrypoints/plugin.cjs"
        }
      },
      "type": "module",
      "engines": {
        "node": ">=12.22 <13 || >=14.17 <15 || >=16.4 <17 || >=17"
      },
      "scripts": {
        "cover": "c8 --report=none test-ava && c8 --report=none --no-clean tap && c8 report",
        "test": "xo && tsd && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "acorn": "^8.5.0",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.1.0",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.0.2",
        "chalk": "^4.1.2",
        "chokidar": "^3.5.2",
        "chunkd": "^2.0.1",
        "ci-info": "^3.2.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^3.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.2",
        "del": "^6.0.0",
        "emittery": "^0.10.0",
        "equal-length": "^1.0.1",
        "figures": "^4.0.0",
        "globby": "^12.0.2",
        "ignore-by-default": "^2.0.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.1",
        "ms": "^2.1.3",
        "p-event": "^4.2.0",
        "p-map": "^5.2.0",
        "picomatch": "^2.3.0",
        "pkg-conf": "^4.0.0",
        "plur": "^4.0.0",
        "pretty-ms": "^7.0.1",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3",
        "strip-ansi": "^7.0.1",
        "supertap": "^2.0.0",
        "temp-dir": "^2.0.0",
        "write-file-atomic": "^3.0.3",
        "yargs": "^17.2.1"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^2.0.0",
        "@sinonjs/fake-timers": "^8.0.1",
        "ansi-escapes": "^5.0.0",
        "c8": "^7.10.0",
        "delay": "^5.0.0",
        "execa": "^5.1.1",
        "fs-extra": "^10.0.0",
        "get-stream": "^6.0.1",
        "replace-string": "^4.0.0",
        "sinon": "^11.1.2",
        "tap": "^15.0.10",
        "temp-write": "^5.0.0",
        "tempy": "^2.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.18.0",
        "typescript": "^4.4.4",
        "xo": "^0.46.3",
        "zen-observable": "^0.8.15"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "types": "./index.d.ts",
      "readme": "# <img src=\"media/header.png\" title=\"AVA\" alt=\"AVA logo\" width=\"530\">\n\nAVA is a test runner for Node.js with a concise API, detailed error output, embrace of new language features and process isolation that lets you develop with confidence 🚀\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\nRead our [contributing guide](.github/CONTRIBUTING.md) if you're looking to contribute (issues / PRs / etc).\n\n![](media/mini-reporter.gif)\n\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/master/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/master/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/master/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/master/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/master/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/master/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/master/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](./docs/01-writing-tests.md#process-isolation)\n- [Promise support](./docs/01-writing-tests.md#promise-support)\n- [Async function support](./docs/01-writing-tests.md#async-function-support)\n- [Observable support](./docs/01-writing-tests.md#observable-support)\n- [Enhanced assertion messages](./docs/03-assertions.md#enhanced-assertion-messages)\n- [Automatic parallel test runs in CI](#parallel-runs-in-ci)\n- [TAP reporter](./docs/05-command-line.md#tap-reporter)\n\n\n## Usage\n\nTo install and set up AVA, run:\n\n```console\nnpm init ava\n```\n\nYour `package.json` will then look like this (exact version notwithstanding):\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"^1.0.0\"\n\t}\n}\n```\n\nOr if you prefer using Yarn:\n\n```console\nyarn add ava --dev\n```\n\nAlternatively you can install `ava` manually:\n\n```console\nnpm install --save-dev ava\n```\n\nDon't forget to configure the `test` script in your `package.json` as per above.\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nconst test = require('ava');\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\tt.is(await bar, 'bar');\n});\n```\n\n### Running your tests\n\n```console\nnpm test\n```\n\nOr with `npx`:\n\n```console\nnpx ava\n```\n\nRun with the `--watch` flag to enable AVA's [watch mode](docs/recipes/watch-mode.md):\n\n```console\nnpx ava --watch\n```\n\n## Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## Highlights\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n### Parallel runs in CI\n\nAVA automatically detects whether your CI environment supports parallel builds. Each build will run a subset of all test files, while still making sure all tests get executed. See the [`ci-parallel-vars`](https://www.npmjs.com/package/ci-parallel-vars) package for a list of supported CI environments.\n\n## Documentation\n\nPlease see the [files in the `docs` directory](./docs):\n\n* [Writing tests](./docs/01-writing-tests.md)\n* [Execution context](./docs/02-execution-context.md)\n* [Assertions](./docs/03-assertions.md)\n* [Snapshot testing](./docs/04-snapshot-testing.md)\n* [Command line (CLI)](./docs/05-command-line.md)\n* [Configuration](./docs/06-configuration.md)\n* [Test timeouts](./docs/07-test-timeouts.md)\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/08-common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n### Recipes\n\n- [Shared workers](docs/recipes/shared-workers.md)\n- [Test setup](docs/recipes/test-setup.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Using ES modules](docs/recipes/es-modules.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Testing React components](docs/recipes/react.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with VSCode](docs/recipes/debugging-with-vscode.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n- [Testing web apps using Puppeteer](docs/recipes/puppeteer.md)\n- [Testing web apps using Selenium WebDriverJS](docs/recipes/testing-with-selenium-webdriverjs.md)\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [`/ˈeɪvə/`](media/pronunciation.m4a?raw=true): Ay (f**a**ce, m**a**de) V (**v**ie, ha**v**e) A (comm**a**, **a**go)\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Support\n\n- [GitHub Discussions](https://github.com/avajs/ava/discussions)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) — Lint rules for AVA tests\n- [@ava/typescript](https://github.com/avajs/typescript) — Test TypeScript projects\n- [@ava/babel](https://github.com/avajs/babel) — Compile test files using Babel, for AVA 3\n- [@ava/cooperate](https://github.com/avajs/cooperate) — Low-level primitives to enable cooperation between test files\n- [@ava/get-port](https://github.com/avajs/get-port) — Reserve a port while testing\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [Do you like AVA? Donate here!](https://opencollective.com/ava)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus)\n---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](https://sindresorhus.com)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n- [Vadim Demedes](https://github.com/vadimdemedes)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://avajs.dev\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n",
      "readmeFilename": "readme.md",
      "gitHead": "5cdeb9d44c709deb979a6e49e26e7e5e0ab1a3fa",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@4.0.0-rc.1",
      "_nodeVersion": "16.13.0",
      "_npmVersion": "8.1.2",
      "dist": {
        "integrity": "sha512-ibYMBSeG0z2L0My3yJtxK0NNMcP5uN/TMZnNJ2FvHa3rGg6UpLglVh/2wjWvuc1kTGPy32liwoneFITQ85wbbg==",
        "shasum": "208066586782c2b0992b701c50b69d3e6d5fda3c",
        "tarball": "https://registry.npmjs.org/ava/-/ava-4.0.0-rc.1.tgz",
        "fileCount": 66,
        "unpackedSize": 257987,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHPJclitiSSd1hGGeI53JztFXhMtBTPu3huebjLWozB4AiBa5yYxMi11+tf3NEt3wmsIH3SXx6BDWqc0op1IyqtZEQ=="
          }
        ]
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_4.0.0-rc.1_1635785709259_0.8973533007757251"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0": {
      "name": "ava",
      "version": "4.0.0",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": "./entrypoints/main.mjs",
          "require": "./entrypoints/main.cjs"
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": "./entrypoints/plugin.mjs",
          "require": "./entrypoints/plugin.cjs"
        }
      },
      "type": "module",
      "engines": {
        "node": ">=12.22 <13 || >=14.17 <15 || >=16.4 <17 || >=17"
      },
      "scripts": {
        "cover": "c8 --report=none test-ava && c8 --report=none --no-clean tap && c8 report",
        "test": "xo && tsd && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "acorn": "^8.7.0",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.1.0",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.1.0",
        "chalk": "^5.0.0",
        "chokidar": "^3.5.2",
        "chunkd": "^2.0.1",
        "ci-info": "^3.3.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^3.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.3",
        "del": "^6.0.0",
        "emittery": "^0.10.0",
        "figures": "^4.0.0",
        "globby": "^12.0.2",
        "ignore-by-default": "^2.0.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.1",
        "ms": "^2.1.3",
        "p-event": "^5.0.1",
        "p-map": "^5.3.0",
        "picomatch": "^2.3.0",
        "pkg-conf": "^4.0.0",
        "plur": "^5.1.0",
        "pretty-ms": "^7.0.1",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.5",
        "strip-ansi": "^7.0.1",
        "supertap": "^2.0.0",
        "temp-dir": "^2.0.0",
        "write-file-atomic": "^3.0.3",
        "yargs": "^17.3.1"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^3.0.1",
        "@sinonjs/fake-timers": "^8.1.0",
        "ansi-escapes": "^5.0.0",
        "c8": "^7.11.0",
        "delay": "^5.0.0",
        "execa": "^6.0.0",
        "fs-extra": "^10.0.0",
        "get-stream": "^6.0.1",
        "replace-string": "^4.0.0",
        "sinon": "^12.0.1",
        "tap": "^15.1.5",
        "temp-write": "^5.0.0",
        "tempy": "^2.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.19.1",
        "typescript": "^4.4.4",
        "xo": "^0.47.0",
        "zen-observable": "^0.8.15"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "types": "./index.d.ts",
      "gitHead": "9bc615e2c93b264b98bac009a897c09d59f72bc4",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@4.0.0",
      "_nodeVersion": "16.13.0",
      "_npmVersion": "8.1.2",
      "dist": {
        "integrity": "sha512-XEVx8EE/ZseJ3nz3nfVG+UoT4aGyUmD5s6SZFs5Aqi04Yr77DZAx7ItyW5hThtYywkOLdsM68as/u6P5fmb52Q==",
        "shasum": "9df5f8da7ece86869a66186f139259897aeb2fbf",
        "tarball": "https://registry.npmjs.org/ava/-/ava-4.0.0.tgz",
        "fileCount": 66,
        "unpackedSize": 258589,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh0zc8CRA9TVsSAnZWagAAtSIP/RK/Dl1sROKjaZyI+lgx\ng9Txhs3XOcpDP5fjzKavfobA/eiTw7/xZEne0BoQGIAAp0oViRWUSf8KqQem\n/IleYKIPWmakuD7iFjyyE8l+OMGuKnMLhf3V2Wh6AX0Cpnkne/YJJNrNEbZZ\nqMqhguY9nq62aomzPBK954JUnRYnGJVRmB8U1GHEbkZiPhd2ql+pJzLVn/0s\n5QjCd/jNDvaQtOe/Ji+2QRr1enN3HFesH/hQH/EfZ+4H2B6070agvGJs6taA\nJgSQ/A/554NNxHltt/ucepkiEwhPu23+t2M64cB0lgyVp5vbc5OJue33cWrz\n7n3VBYNtp5cU+cIY1+hDeuku3XaATlqrUqi9HlxEJ7F1szgUXMsOO7r5OCO4\n9PToq+SVXGuiaoRUr9nOANrtn2beamKZVXS4jP99f7DLbjVaqM0W4sjOCT2f\n6WvK7jxbBx/UBa676egBlUqJn0mk8udBh4cnfBSNrl9ti9UhjJGX6oeCGDpz\n0TDYnQrIFbE0jm+bQ3fEJEiOP46s1HMKfo3TbK/LpM4a0MOV0Kk0Ccs1GqTQ\n2k5OkkeJGFkNydhHigh5JxnIZ2t7jSZnQiizj/K3oc72DlETpADNpu8gqRiD\n9c7yTrR4zdYOb/OplN3z6TqgwbCZut3YvvpSz6iHMnP/XgkXT/SwOLWjxYLQ\n1/IF\r\n=8+SJ\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQC2cZf2LkyN8KLtB35t+43Ig01O9m+SOZ2sg8c9AuBRMQIgXuml6qEFK/1nsFKnkY8WVVSk11Umi9cKPCAw8MNpEJs="
          }
        ]
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_4.0.0_1641232188080_0.8246259147718815"
      },
      "_hasShrinkwrap": false
    },
    "4.0.1": {
      "name": "ava",
      "version": "4.0.1",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": "./entrypoints/main.mjs",
          "require": "./entrypoints/main.cjs"
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": "./entrypoints/plugin.mjs",
          "require": "./entrypoints/plugin.cjs"
        }
      },
      "type": "module",
      "engines": {
        "node": ">=12.22 <13 || >=14.17 <15 || >=16.4 <17 || >=17"
      },
      "scripts": {
        "cover": "c8 --report=none test-ava && c8 --report=none --no-clean tap && c8 report",
        "test": "xo && tsd && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "acorn": "^8.7.0",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.1.0",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.1.0",
        "chalk": "^5.0.0",
        "chokidar": "^3.5.2",
        "chunkd": "^2.0.1",
        "ci-info": "^3.3.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^3.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.3",
        "del": "^6.0.0",
        "emittery": "^0.10.0",
        "figures": "^4.0.0",
        "globby": "^12.0.2",
        "ignore-by-default": "^2.0.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.1",
        "ms": "^2.1.3",
        "p-event": "^5.0.1",
        "p-map": "^5.3.0",
        "picomatch": "^2.3.0",
        "pkg-conf": "^4.0.0",
        "plur": "^5.1.0",
        "pretty-ms": "^7.0.1",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.5",
        "strip-ansi": "^7.0.1",
        "supertap": "^2.0.0",
        "temp-dir": "^2.0.0",
        "write-file-atomic": "^3.0.3",
        "yargs": "^17.3.1"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^3.0.1",
        "@sinonjs/fake-timers": "^8.1.0",
        "ansi-escapes": "^5.0.0",
        "c8": "^7.11.0",
        "delay": "^5.0.0",
        "execa": "^6.0.0",
        "fs-extra": "^10.0.0",
        "get-stream": "^6.0.1",
        "replace-string": "^4.0.0",
        "sinon": "^12.0.1",
        "tap": "^15.1.5",
        "temp-write": "^5.0.0",
        "tempy": "^2.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.19.1",
        "typescript": "^4.4.4",
        "xo": "^0.47.0",
        "zen-observable": "^0.8.15"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "types": "./index.d.ts",
      "gitHead": "6b63b1bc14a1aaa7d4ee4f2201f901624419c677",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@4.0.1",
      "_nodeVersion": "16.13.0",
      "_npmVersion": "8.1.2",
      "dist": {
        "integrity": "sha512-+12A/JDWyShBCZAKISEEPyM2dwkUrrAfPILqXi4LI4Aa58d92PzjY829hmuoSeACPNqrn2Wlbnja8c/n7bKV6Q==",
        "shasum": "dadc24ff5f41f48ff8d5cd9b80a9de9d1ffdf016",
        "tarball": "https://registry.npmjs.org/ava/-/ava-4.0.1.tgz",
        "fileCount": 66,
        "unpackedSize": 258664,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh2Zw9CRA9TVsSAnZWagAArToP/jGdgTFCcHcEXtFe76Bx\nBtvOieNtyzlbxD1J79QxxPZQ3C3dcqQYrxfMmW/L2b08HvbDDBi8sJi2xVBy\nadBltvf266dHRjhumgtmQwp3Ix8r+s+I6NKkLxs4kf0nD7iE714hUsT0aXhP\nKR6MZR+G02TKCsHV/Odv25ZHzuYHZzKkR75sOUGZGCaeZXVy5cWLkMY70Bc9\noD2CxRWVNKn7SWROj4B0LMls6xwvwwdFl+xMZdCLr2yQe4YwPhw3cJemoz1N\nxw9m0TpyQX2B+/X8sLpnLI+hzvcdPw8SGs4NfBTGBBbDBJ072lT8LUIZSzKj\nej3ZMyx3L5gJKQSlkTFl9W7Z155/Syf0DK34TTkEYOLK9tFw+VTlPHh3eY6s\nDWYbW42S7jdpA62lXbLspePnG9YuEk/5HYrq7EJ01BxHeLCRY02XkjWwfVnw\n3S5svBirdMCdPuiSt9DRkXo8fIBa/TW5BPJC8pu312x2xr3il+cBr+JsXXUW\n3YGolb3tmSdyQxleVEZcknGU7ao4yFQydf1llBdurxNhfOOqX5A21ARfACXm\nPNj13SMkKNCwrujNT+9n18qQ5W9ow8O0hT9wGJggd/ttS+D4Dn0tTwvRiIuV\nm/9EXAl2RRKpKDbvylGdfMsEOVTJzlvhUou5iSPToAV7LU9moR2lDZM1JKeh\ngw2Z\r\n=5Hgl\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCSsDLqYKzm4A7DtAYbS7fBpJnwFSO5ry7x6NySTJEM7gIhAMIrlMkwFNnFcs+TrC2BshU59hnud/4+5lfmX1cVkHg4"
          }
        ]
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_4.0.1_1641651261742_0.5156648453979247"
      },
      "_hasShrinkwrap": false
    },
    "4.1.0": {
      "name": "ava",
      "version": "4.1.0",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": "./entrypoints/main.mjs",
          "require": "./entrypoints/main.cjs"
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": "./entrypoints/plugin.mjs",
          "require": "./entrypoints/plugin.cjs"
        }
      },
      "type": "module",
      "engines": {
        "node": ">=12.22 <13 || >=14.17 <15 || >=16.4 <17 || >=17"
      },
      "scripts": {
        "cover": "c8 --report=none test-ava && c8 --report=none --no-clean tap && c8 report",
        "test": "xo && tsd && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "acorn": "^8.7.0",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.1.0",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.1.0",
        "chalk": "^5.0.0",
        "chokidar": "^3.5.3",
        "chunkd": "^2.0.1",
        "ci-info": "^3.3.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.3",
        "del": "^6.0.0",
        "emittery": "^0.10.1",
        "figures": "^4.0.0",
        "globby": "^13.1.1",
        "ignore-by-default": "^2.0.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.2",
        "ms": "^2.1.3",
        "p-event": "^5.0.1",
        "p-map": "^5.3.0",
        "picomatch": "^2.3.1",
        "pkg-conf": "^4.0.0",
        "plur": "^5.1.0",
        "pretty-ms": "^7.0.1",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.5",
        "strip-ansi": "^7.0.1",
        "supertap": "^3.0.1",
        "temp-dir": "^2.0.0",
        "write-file-atomic": "^4.0.1",
        "yargs": "^17.3.1"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^3.0.1",
        "@sinonjs/fake-timers": "^9.1.1",
        "ansi-escapes": "^5.0.0",
        "c8": "^7.11.0",
        "delay": "^5.0.0",
        "execa": "^6.1.0",
        "fs-extra": "^10.0.1",
        "get-stream": "^6.0.1",
        "replace-string": "^4.0.0",
        "sinon": "^13.0.1",
        "tap": "^16.0.0",
        "temp-write": "^5.0.0",
        "tempy": "^2.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.19.1",
        "typescript": "^4.6.2",
        "xo": "^0.48.0",
        "zen-observable": "^0.8.15"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "types": "./index.d.ts",
      "gitHead": "4f14c6b6dbdf9dc6487f88d2737b290dff65d5f0",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@4.1.0",
      "_nodeVersion": "17.6.0",
      "_npmVersion": "8.5.1",
      "dist": {
        "integrity": "sha512-QD6MBWHzagAwb9vxduXzVWx6Q77DUHLxvIebSY6+enL+Ri6KzSZYj0IBOFifA26wfpJPZnWKLUh3vwx1LyVh/g==",
        "shasum": "a8e2fb84f17ff7b2b40b389103f677edf11351b9",
        "tarball": "https://registry.npmjs.org/ava/-/ava-4.1.0.tgz",
        "fileCount": 66,
        "unpackedSize": 260722,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiJNq4ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmquHw//ehlokwr90itP8Lxla+oXNfnjqR9vJkxcMqxZnnHH5h37Pj+n\r\n+cnS2R2B3pIuWRpLjBuV3jTCbmaNLgBM4gxgchMWPkkFJC57Gz/06PbWOcHv\r\ngkSdCFMnwWSK+znJMtomzaPoaugeorrELWYGeeIfz81rwuBxBrv38qz2dY1Z\r\nowNJ/jO4cy1reqdqmbZiuO45zC7n8+ZFQERvdhJ2Qo4BUQ54vsXu2rCwZkLz\r\nEY8O9wfAwub4jSS6VYA2RbBTdj6wMybGW++/rkNowtzZfZvqQ0UevEYAOZSV\r\nCGZJ7njpHsUzWufuQMBwtsKikgDW7B5QixLUGhnyEXVXl+Wt9AxpX6BDSi9q\r\nj9/13obyWqV+y/DSdfQvumdwsmuhWBkR1AwFnPS/KQcvYdvY8/SH0twhutCu\r\nY0sZcG9ysFwROiuWqMiLVVG1ZOCEtqrRain2VeHaqr8QtAWOJJhpqOkzxIbZ\r\nGHVOs6OAEl1b4/3CDDqDsUxcPx2Ft0peGj62pNZl5+V6uAaVTg3GuyqUgKl2\r\nzLZKWY7EEKnFioeJ+clvtfaNFutRAqFm8oUGXPYJyvWIMEFJCS0vKVp6+qCF\r\nlpM/EGkxXsFtYF1CK0KE4et6sHy5/f/0xaLrfT+v4KnVGicqqjTY5wuVal8/\r\nUfIBcW09C1Hgb8Y+3WnEVuKPJBQ1X9VT2r0=\r\n=4MMI\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHKxoh9o0Xsc6+eLbwAZmaVu4MJnWiAcs9tL2rHJilktAiB8Iqy7MiqQoH1S09PobGmoWdwi+PN9aGB7h0Md3sP+Zg=="
          }
        ]
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_4.1.0_1646582455825_0.2361870653913385"
      },
      "_hasShrinkwrap": false
    },
    "4.2.0": {
      "name": "ava",
      "version": "4.2.0",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": "./entrypoints/main.mjs",
          "require": "./entrypoints/main.cjs"
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": "./entrypoints/plugin.mjs",
          "require": "./entrypoints/plugin.cjs"
        }
      },
      "type": "module",
      "engines": {
        "node": ">=12.22 <13 || >=14.17 <15 || >=16.4 <17 || >=17"
      },
      "scripts": {
        "cover": "c8 --report=none test-ava && c8 --report=none --no-clean tap && c8 report",
        "test": "xo && tsd && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "acorn": "^8.7.0",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.1.0",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.1.0",
        "chalk": "^5.0.0",
        "chokidar": "^3.5.3",
        "chunkd": "^2.0.1",
        "ci-info": "^3.3.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.3",
        "del": "^6.0.0",
        "emittery": "^0.10.1",
        "figures": "^4.0.0",
        "globby": "^13.1.1",
        "ignore-by-default": "^2.0.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.2",
        "ms": "^2.1.3",
        "p-event": "^5.0.1",
        "p-map": "^5.3.0",
        "picomatch": "^2.3.1",
        "pkg-conf": "^4.0.0",
        "plur": "^5.1.0",
        "pretty-ms": "^7.0.1",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.5",
        "strip-ansi": "^7.0.1",
        "supertap": "^3.0.1",
        "temp-dir": "^2.0.0",
        "write-file-atomic": "^4.0.1",
        "yargs": "^17.3.1"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^3.0.1",
        "@sinonjs/fake-timers": "^9.1.1",
        "ansi-escapes": "^5.0.0",
        "c8": "^7.11.0",
        "delay": "^5.0.0",
        "execa": "^6.1.0",
        "fs-extra": "^10.0.1",
        "get-stream": "^6.0.1",
        "replace-string": "^4.0.0",
        "sinon": "^13.0.1",
        "tap": "^16.0.0",
        "temp-write": "^5.0.0",
        "tempy": "^2.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.19.1",
        "typescript": "^4.6.2",
        "xo": "^0.48.0",
        "zen-observable": "^0.8.15"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "types": "./index.d.ts",
      "gitHead": "843644b10fa2d3a9e6449f6022c40119c22fc9cf",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@4.2.0",
      "_nodeVersion": "16.14.2",
      "_npmVersion": "8.5.1",
      "dist": {
        "integrity": "sha512-96N/rH2ZlBjoh18CsjH3zfo/rzukkRoqNK7R/Z3MLRrqu6cRRf+i4Zwna7ZRYEIl55yF1BKh/nSPCZWqoXfPJA==",
        "shasum": "50c954cb32fd433b01d1e8245ea2f5cfb6e4412d",
        "tarball": "https://registry.npmjs.org/ava/-/ava-4.2.0.tgz",
        "fileCount": 66,
        "unpackedSize": 260948,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCICXWd12x2UhPYLC+nyJYxsmK7i6Grr9QQnTVKUbHg2GMAiEAmbadmq6uJkvOM9m9ymjk6l1TGO0SDxoCLdXh/9rGepU="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiUwumACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmorVxAAmx4Tp6OCdabAkapWJBLRiyW5+9W95/cmMwYiBeIjLANVVCJh\r\nW79jFGSF24VqkWwS3ePhXsCWsRIVLvqtWHi6nf7lZyPrsFZ/VGLwqwu35yEY\r\nVfhUrDrHr9RMmfga4WD+7TfswlOvtl74ANxg6iSm/VZ0YZ/fCEJ9eeqjuQ5O\r\ngR5hDO6YKGnsdgA4A5Fxh8SxScVEC2UYGRL66b1WyZB9yYwT8eXyw6EvlRVL\r\n7am7AB9x/2fTDAWO7iAgn4Rsxyuh/oQB4eKn5jim+9QNA62dU9kX3YnPxPqq\r\n/18PcEJxGxoRxDg1gu5y35A34V//gclZsj8Bw0eQgzswntbOKHY04SIBCP+H\r\nPGLLTLr/Ay9FxsjzM7Gt39eQCjXpLUGCEZlquFRFE07067hToFa+u1IutnKr\r\n6dpzGIO2kKR/zPQIceAgH2ZvQNqnzdliFJa5d9x6gAbq6DwaPERWzcdjX4ec\r\n58Zgl0b9m1Xm6wwGDn0TLHWhNWImED1rrfwwYlnbO+av2kXPPB/QAoYY/P8f\r\n8MgDXNDjAsK3aCPlMZoeWfw0IltSxICM0O24H8kn9f79U50FXf5dnRoSD36H\r\nRPfXXzCcNvlvL/LTAMxOECUlJg2VAkAXrO1QL/UzYc22LfLOfXmPUVJ2Hp0W\r\n/PRurxipJKYJJhiyT2RgfUlgtXw2pxEGSZs=\r\n=ucT9\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_4.2.0_1649609637918_0.31939301710706647"
      },
      "_hasShrinkwrap": false
    },
    "4.3.0": {
      "name": "ava",
      "version": "4.3.0",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": {
            "types": "./index.d.ts",
            "default": "./entrypoints/main.mjs"
          },
          "require": {
            "types": "./entrypoints/index.d.cts",
            "default": "./entrypoints/main.cjs"
          }
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": {
            "types": "./plugin.d.ts",
            "default": "./entrypoints/plugin.mjs"
          },
          "require": {
            "types": "./entrypoints/plugin.d.cts",
            "default": "./entrypoints/plugin.cjs"
          }
        }
      },
      "type": "module",
      "engines": {
        "node": ">=12.22 <13 || >=14.17 <15 || >=16.4 <17 || >=18"
      },
      "scripts": {
        "cover": "c8 --report=none test-ava && c8 --report=none --no-clean tap && c8 report",
        "test": "xo && tsd && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "acorn": "^8.7.1",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.1.0",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.1.0",
        "chalk": "^5.0.1",
        "chokidar": "^3.5.3",
        "chunkd": "^2.0.1",
        "ci-info": "^3.3.1",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "del": "^6.1.1",
        "emittery": "^0.11.0",
        "figures": "^4.0.1",
        "globby": "^13.1.1",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.2",
        "ms": "^2.1.3",
        "p-event": "^5.0.1",
        "p-map": "^5.4.0",
        "picomatch": "^2.3.1",
        "pkg-conf": "^4.0.0",
        "plur": "^5.1.0",
        "pretty-ms": "^7.0.1",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.5",
        "strip-ansi": "^7.0.1",
        "supertap": "^3.0.1",
        "temp-dir": "^2.0.0",
        "write-file-atomic": "^4.0.1",
        "yargs": "^17.5.1"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^3.0.1",
        "@sinonjs/fake-timers": "^9.1.2",
        "ansi-escapes": "^5.0.0",
        "c8": "^7.11.3",
        "delay": "^5.0.0",
        "execa": "^6.1.0",
        "fs-extra": "^10.1.0",
        "get-stream": "^6.0.1",
        "replace-string": "^4.0.0",
        "sinon": "^13.0.2",
        "tap": "^16.2.0",
        "temp-write": "^5.0.0",
        "tempy": "^2.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.20.0",
        "typescript": "^4.7.2",
        "xo": "^0.49.0",
        "zen-observable": "^0.8.15"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "volta": {
        "node": "18.3.0",
        "npm": "8.12.0"
      },
      "types": "./index.d.ts",
      "gitHead": "a24dc9b4e72ee403287fc264d72d69227c04ab2e",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@4.3.0",
      "_nodeVersion": "18.3.0",
      "_npmVersion": "8.12.0",
      "dist": {
        "integrity": "sha512-Ap0u8rp8wOBN6CxshgxrPSe191e8g52RWGoXeDB57ubo4fyZyStfI6OxQi/bl0yxIDEOYHhCiGwihbzlMNJw3Q==",
        "shasum": "e9466990caba63789eac3a0013714ea76dd82463",
        "tarball": "https://registry.npmjs.org/ava/-/ava-4.3.0.tgz",
        "fileCount": 68,
        "unpackedSize": 261588,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIB1o1oBm3q1Nc0RClg/FB25MONimPCNS/c3F8gIG+C6tAiEArHYKPDZJbvS6SKDYYPJDZYc9YkJgpsgYPjE1v3QJDEs="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJimMs0ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpM6w/8DHDwtRC5egLtJLAqu5DTif0EeCDdukIEMzMppuI7aAlXK9Dz\r\nTwTtNa5UDSKL2TAaJBE8YAaMWza6lqIguIJeyVIxIPBNCx4t/8fflXbX8Z9H\r\nxYSeNfkeERyUjCMH65nRnfyTIb7RvxkVpGYzomDy/IPXJUZ2qQZtlJz/ZJQU\r\np47I+HQBxkj8BTXO7BGvRCo+lF8yzPKVxmLjo6koSOdBHqB4cJR+9f2InLjy\r\n3GFZuiMRLemhldq0PvqzT0yfLraDYk0kSwkmn3m9K/ZbvbJ9ROTYz85Y+f+K\r\neZBERP9UI+0rXYaIujPRJAzaLuX2K2lKgVBJWupcpHllqH/F21IcVMDxiAvO\r\n/na9QV+lRGN3/wR11j20jEaj7p21JG4LFDLi3kQoObeepbqcGru2DgiYh3FQ\r\nGAxBJuCMrOr15d7sedHHljYpSJXdBw66c1FU6t0oNUzxAUxZiD7G4GMPpmTH\r\noRmQ1a3a1JYrGTLiaFXhJ5tHUVhfJTig0cfaRFYG893ZpoH0W34RmTVqZCVO\r\nvaOx3BOKHRADLZLYmPspgIEi0k02PHJbvAgMPoyVYggy/iH+6ACo9twejduz\r\nPJPym84Rrh6aJXJuqt+YIN6K23sRnZUxAD+Y+Cpd7ufLz4X1uSzH7KCDK9ek\r\nyFgrwpoDDncX884yvnTvIedGde+86Jg9VEc=\r\n=QZcs\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_4.3.0_1654180660038_0.3432828530071639"
      },
      "_hasShrinkwrap": false
    },
    "4.3.1": {
      "name": "ava",
      "version": "4.3.1",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": {
            "types": "./index.d.ts",
            "default": "./entrypoints/main.mjs"
          },
          "require": {
            "types": "./entrypoints/index.d.cts",
            "default": "./entrypoints/main.cjs"
          }
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": {
            "types": "./plugin.d.ts",
            "default": "./entrypoints/plugin.mjs"
          },
          "require": {
            "types": "./entrypoints/plugin.d.cts",
            "default": "./entrypoints/plugin.cjs"
          }
        }
      },
      "type": "module",
      "engines": {
        "node": ">=12.22 <13 || >=14.17 <15 || >=16.4 <17 || >=18"
      },
      "scripts": {
        "cover": "c8 --report=none test-ava && c8 --report=none --no-clean tap && c8 report",
        "test": "xo && tsd && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "acorn": "^8.7.1",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.1.0",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.1.0",
        "chalk": "^5.0.1",
        "chokidar": "^3.5.3",
        "chunkd": "^2.0.1",
        "ci-info": "^3.3.1",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "del": "^6.1.1",
        "emittery": "^0.11.0",
        "figures": "^4.0.1",
        "globby": "^13.1.1",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.2",
        "ms": "^2.1.3",
        "p-event": "^5.0.1",
        "p-map": "^5.4.0",
        "picomatch": "^2.3.1",
        "pkg-conf": "^4.0.0",
        "plur": "^5.1.0",
        "pretty-ms": "^7.0.1",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.5",
        "strip-ansi": "^7.0.1",
        "supertap": "^3.0.1",
        "temp-dir": "^2.0.0",
        "write-file-atomic": "^4.0.1",
        "yargs": "^17.5.1"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^3.0.1",
        "@sinonjs/fake-timers": "^9.1.2",
        "ansi-escapes": "^5.0.0",
        "c8": "^7.11.3",
        "delay": "^5.0.0",
        "execa": "^6.1.0",
        "fs-extra": "^10.1.0",
        "get-stream": "^6.0.1",
        "replace-string": "^4.0.0",
        "sinon": "^13.0.2",
        "tap": "^16.2.0",
        "temp-write": "^5.0.0",
        "tempy": "^2.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.20.0",
        "typescript": "^4.7.2",
        "xo": "^0.49.0",
        "zen-observable": "^0.8.15"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "volta": {
        "node": "18.3.0",
        "npm": "8.12.0"
      },
      "types": "./index.d.ts",
      "gitHead": "53e570998bcbee584701c271aa7478825895c35b",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@4.3.1",
      "_nodeVersion": "18.3.0",
      "_npmVersion": "8.12.0",
      "dist": {
        "integrity": "sha512-zdSp9QxRTmN5hJeGmg+ZjUKL5yHFLMcP/0KBla8GH25XD8Xm7Uc34CDFlwqGL6JXtjNbVkJ0Zw+DqcTf4ggCCA==",
        "shasum": "376a788a5a863c39a9dd2dab9fcbbbcf94bf6c38",
        "tarball": "https://registry.npmjs.org/ava/-/ava-4.3.1.tgz",
        "fileCount": 68,
        "unpackedSize": 262017,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCkKNFOYyREFqGsnHa4QSpqEhMQakcK9jcetZkTvSCMNgIhALHNpX6bU8MdfYlqvUho26Dk74mJRcATkAxyQgJZIDGe"
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiyv2UACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqnGg/+PhJbBhMZqdnGaJJqkmPuT9xdmcX5wbgWN8Y7Mn78S+gvMoUp\r\nOoIeQ9cxekVeRgsGmpQ6c19nsTG+WgBF+td0lECv93+yo6PkV35yfWa9L+bn\r\npNpPXyQTNDnsPpFErogiCZkgn9PIkOv/qmbYKo5HhGvncUXRZq4hfbodrdP6\r\nb35bIsLYnpERbPqVkliD5DXukHvMt4LtMgQc7W/uk4Zr7bZAcZYCJusbGWbJ\r\nYEGRXVkQLpQhiaQdphaBBHrZBC2nf7PngmEt2FD0ERF4uZFElEkAaqUOZYRI\r\nARNSiEt4QvxOYB4UHNRimVQwuLmOUWFk6XVWD2k1zl1knxqPXOyEXM2vFoXk\r\n8pX47X3mAX+9DDvGM2Gsx0mF5OI42LPxn41AnKytiFg623MnnXHDeX3/t0PK\r\nghcYnZ/+e4mhHgreLIi7h8252AEiP/i7YehMwEN2veOoGqL7iV/h/ArRmXDO\r\nSHqYOiCH9ETFL3kJdDGxNR1f+QjCBVgBoC4clLtBGXaniaEPTfY2V8zqK+t3\r\nszXNg/z/AXaIhOWF8vpwyzQRBGWD5xE7G08IWsD0A8/TyMmGxBa8SNfmEw7U\r\nzJnup6CQL2K20jGjaIvhhEVKNxLam+kV9SRiPN7SXIA8EMCxErwYatlhtBn8\r\nBdecdBZWpsjU5j7n5+Z3DOOyl71UiXiRZ5k=\r\n=KxgG\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_4.3.1_1657470356748_0.570189934287946"
      },
      "_hasShrinkwrap": false
    },
    "4.3.2": {
      "name": "ava",
      "version": "4.3.2",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": {
            "types": "./index.d.ts",
            "default": "./entrypoints/main.mjs"
          },
          "require": {
            "types": "./entrypoints/index.d.cts",
            "default": "./entrypoints/main.cjs"
          }
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": {
            "types": "./plugin.d.ts",
            "default": "./entrypoints/plugin.mjs"
          },
          "require": {
            "types": "./entrypoints/plugin.d.cts",
            "default": "./entrypoints/plugin.cjs"
          }
        }
      },
      "type": "module",
      "engines": {
        "node": ">=12.22 <13 || >=14.17 <15 || >=16.4 <17 || >=18"
      },
      "scripts": {
        "cover": "c8 --report=none test-ava && c8 --report=none --no-clean tap && c8 report",
        "test": "xo && tsd && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "acorn": "^8.7.1",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.1.0",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.1.0",
        "chalk": "^5.0.1",
        "chokidar": "^3.5.3",
        "chunkd": "^2.0.1",
        "ci-info": "^3.3.1",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "del": "^6.1.1",
        "emittery": "^0.11.0",
        "figures": "^4.0.1",
        "globby": "^13.1.1",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.2",
        "ms": "^2.1.3",
        "p-event": "^5.0.1",
        "p-map": "^5.4.0",
        "picomatch": "^2.3.1",
        "pkg-conf": "^4.0.0",
        "plur": "^5.1.0",
        "pretty-ms": "^7.0.1",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.5",
        "strip-ansi": "^7.0.1",
        "supertap": "^3.0.1",
        "temp-dir": "^2.0.0",
        "write-file-atomic": "^4.0.1",
        "yargs": "^17.5.1"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^3.0.1",
        "@sinonjs/fake-timers": "^9.1.2",
        "ansi-escapes": "^5.0.0",
        "c8": "^7.11.3",
        "delay": "^5.0.0",
        "execa": "^6.1.0",
        "fs-extra": "^10.1.0",
        "get-stream": "^6.0.1",
        "replace-string": "^4.0.0",
        "sinon": "^13.0.2",
        "tap": "^16.2.0",
        "temp-write": "^5.0.0",
        "tempy": "^2.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.20.0",
        "typescript": "^4.7.2",
        "xo": "^0.49.0",
        "zen-observable": "^0.8.15"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "volta": {
        "node": "18.3.0",
        "npm": "8.12.0"
      },
      "types": "./index.d.ts",
      "gitHead": "6d93de52854df88d8ab82ec574b313017f2c8bf2",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@4.3.2",
      "_nodeVersion": "18.3.0",
      "_npmVersion": "8.12.0",
      "dist": {
        "integrity": "sha512-JdS6Dtt08WNHeWbhVSHwJ2qovRZ5pTG9gAt86GVOCXzhy/LmfJBwIyuitn2FBcroMH4yiCjylTD2GI0jHQxKFg==",
        "shasum": "4678f9c38b7f0f64b34cdbdf876963a7cca3180b",
        "tarball": "https://registry.npmjs.org/ava/-/ava-4.3.2.tgz",
        "fileCount": 68,
        "unpackedSize": 262219,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCT3UnB/a1h71kBHKou2ewVY/R230dXgwN3RdJzRu9DTAIhAI8MRdv3K15NugDs2zMu4NAR3VYk+/9j01nDfsydDeSS"
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjB3NpACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqZ8w/+OBeGGdtgaf1+tpoJFI6GmSgi6mlTGKEhSl82+relCoy9MBnr\r\np7wcz/kGAOZYx07PmJQCXZHOs+OrUEfPwM4rm5ZJECSaZkIze9Z9LUGKVgkx\r\nf6hgai5esWrmETd31MC15DeBE1cBE8SpPp6adkTVLSSqwzwAkbF9xzvU39zm\r\nXr9DxhB1manZbmLAtCshVzRNCZL01cFiazQ0B7/D7xQKJx1pe0LLyRMYfdQz\r\nXYDurpkq/+CV6slzsl82YuDHcfxFSZtJ5iv5cu8u1nyJonmnS9obUPwSHbSx\r\no2IwflRleanAjdLCGx4w6/lynNqCiE5y3Ig6+yx9pR8pwtr7F83pX2lEP9Eh\r\ndC9J/DICTJ0ncId8wf6+yXA1afFTQsvs/0KNroiBKEoBlbu+UctpiW5vjEwD\r\nFOI7qi19yGZWq5QmbwodWB1NsBzb6LUNj/VnO8OcKyFauhItHtanfpX+UTCs\r\nNz9wCwzi2UvjnqholerpCJdPsz6D0j2NyUJ49tKhGgytXAQ4ry9dJx2sd11a\r\n4M71yDR0mowHH4HC2uFsdVzIYgjjnfKDyBfAmMj1qvt6zYQ4o/3U0E8rx1y1\r\nojkIVKPwaCZQND2dh1klLB4C6MCMDiI7kWeAW/A2dPTmdUHqTo8KpevJVtLi\r\nyJ/QKKex0ax06PbbZX9rSrukzALgM77MxJU=\r\n=m2y2\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_4.3.2_1661432680875_0.24024304375511552"
      },
      "_hasShrinkwrap": false
    },
    "4.3.3": {
      "name": "ava",
      "version": "4.3.3",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": {
            "types": "./index.d.ts",
            "default": "./entrypoints/main.mjs"
          },
          "require": {
            "types": "./entrypoints/index.d.cts",
            "default": "./entrypoints/main.cjs"
          }
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": {
            "types": "./plugin.d.ts",
            "default": "./entrypoints/plugin.mjs"
          },
          "require": {
            "types": "./entrypoints/plugin.d.cts",
            "default": "./entrypoints/plugin.cjs"
          }
        }
      },
      "type": "module",
      "engines": {
        "node": ">=12.22 <13 || >=14.17 <15 || >=16.4 <17 || >=18"
      },
      "scripts": {
        "cover": "c8 --report=none test-ava && c8 --report=none --no-clean tap && c8 report",
        "test": "xo && tsd && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "acorn": "^8.7.1",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.1.0",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.1.0",
        "chalk": "^5.0.1",
        "chokidar": "^3.5.3",
        "chunkd": "^2.0.1",
        "ci-info": "^3.3.1",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "del": "^6.1.1",
        "emittery": "^0.11.0",
        "figures": "^4.0.1",
        "globby": "^13.1.1",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.2",
        "ms": "^2.1.3",
        "p-event": "^5.0.1",
        "p-map": "^5.4.0",
        "picomatch": "^2.3.1",
        "pkg-conf": "^4.0.0",
        "plur": "^5.1.0",
        "pretty-ms": "^7.0.1",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.5",
        "strip-ansi": "^7.0.1",
        "supertap": "^3.0.1",
        "temp-dir": "^2.0.0",
        "write-file-atomic": "^4.0.1",
        "yargs": "^17.5.1"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^3.0.1",
        "@sinonjs/fake-timers": "^9.1.2",
        "ansi-escapes": "^5.0.0",
        "c8": "^7.11.3",
        "delay": "^5.0.0",
        "execa": "^6.1.0",
        "fs-extra": "^10.1.0",
        "get-stream": "^6.0.1",
        "replace-string": "^4.0.0",
        "sinon": "^13.0.2",
        "tap": "^16.2.0",
        "temp-write": "^5.0.0",
        "tempy": "^2.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.20.0",
        "typescript": "^4.7.2",
        "xo": "^0.49.0",
        "zen-observable": "^0.8.15"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "volta": {
        "node": "18.3.0",
        "npm": "8.12.0"
      },
      "types": "./index.d.ts",
      "gitHead": "a1347a58f3b9ab4faf595b86e65790e6b6ec127b",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@4.3.3",
      "_nodeVersion": "18.3.0",
      "_npmVersion": "8.12.0",
      "dist": {
        "integrity": "sha512-9Egq/d9R74ExrWohHeqUlexjDbgZJX5jA1Wq4KCTqc3wIfpGEK79zVy4rBtofJ9YKIxs4PzhJ8BgbW5PlAYe6w==",
        "shasum": "4ddcb650ed059e4e999a4b640de53ff00f4a008b",
        "tarball": "https://registry.npmjs.org/ava/-/ava-4.3.3.tgz",
        "fileCount": 68,
        "unpackedSize": 262452,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIF7zLe5kQQHRZupDBA3biqC4NF0GH81w6aC5wxvL9HfZAiEAyimnrh7S/foKH6xOB7Ol1FCIGWlxmaADmcVhP39dKoo="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjB3c8ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpyXRAAjLUQnrhkZhIaTWCw1+YNGnDCRbfeFDuztdTWzWOd8gLQNN7o\r\nKO8jh/teqy0sF/8aSquVZFDJZ4i2JeA4MFRrMJo1E/nZEfv+Purmzr64kM9S\r\nL5e3Si5ZYSeYPVqq+uULGbnWBBCe3nYYRuR9tFZ0TZRUZdqXuLuaFUGlznOD\r\n3QYycs4dQT+QSZM0GixsIrknrzjRDXfDSL61sgYCes8NtL+G7SVkFwwsK7nP\r\nveVZ9SJN/qKPXYTENkMtZHiaP2+e9EbEHzNRkvjXTXRW3VUJmcPMpBe4CMY9\r\nsNes/2Ds96nEXYcyE6YxmJkhDTcVOIVI3pjRW0IXWu/2ueUrsPXfc/5jO63o\r\nH4Zy8EqQGoNy8KgW1SaZNVDgpTzNc0y7SFTw5YFFkm5pIPr5Xez/tvzg0KxQ\r\nUmAECl2YeA0Z9jKyxHI5x5lhOa7h3YVraOFrkZpzv8nYZaug7S3Qh1QJS4VB\r\n+YocfwHwiX7Zz3gNQVMBZHML3FNSvusNXOAZFk6ixJ+Wm0Pq5Eg8SSF0laXi\r\nQZN+PSSce5eTSjKDD3V/1XF9WPqJx/nZA7D1jt+GbMUZ6upSymK2RxkZRpWJ\r\n3kEfy1a/vhwSsFIx9idYiTGp03t6DQthSFMHBhB2XmGRhYNf2SgG4tQiZeTn\r\n/DwBhlCjMgSyqlOr9cdIIFlciKOIEJ33dXg=\r\n=KRN8\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_4.3.3_1661433660252_0.5349877820516438"
      },
      "_hasShrinkwrap": false
    },
    "5.0.0": {
      "name": "ava",
      "version": "5.0.0",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": {
            "types": "./entrypoints/main.d.ts",
            "default": "./entrypoints/main.mjs"
          },
          "require": {
            "types": "./entrypoints/main.d.cts",
            "default": "./entrypoints/main.cjs"
          }
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": {
            "types": "./entrypoints/plugin.d.ts",
            "default": "./entrypoints/plugin.mjs"
          },
          "require": {
            "types": "./entrypoints/plugin.d.cts",
            "default": "./entrypoints/plugin.cjs"
          }
        }
      },
      "type": "module",
      "engines": {
        "node": ">=14.19 <15 || >=16.15 <17 || >=18"
      },
      "scripts": {
        "cover": "c8 --report=none test-ava && c8 --report=none --no-clean tap && c8 report",
        "test": "xo && tsc --noEmit && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "acorn": "^8.8.0",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.1.0",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.1.0",
        "chalk": "^5.0.1",
        "chokidar": "^3.5.3",
        "chunkd": "^2.0.1",
        "ci-info": "^3.3.2",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "del": "^7.0.0",
        "emittery": "^0.13.1",
        "figures": "^5.0.0",
        "globby": "^13.1.2",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.2",
        "ms": "^2.1.3",
        "p-event": "^5.0.1",
        "p-map": "^5.5.0",
        "picomatch": "^2.3.1",
        "pkg-conf": "^4.0.0",
        "plur": "^5.1.0",
        "pretty-ms": "^8.0.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.5",
        "strip-ansi": "^7.0.1",
        "supertap": "^3.0.1",
        "temp-dir": "^2.0.0",
        "write-file-atomic": "^4.0.2",
        "yargs": "^17.5.1"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^3.0.1",
        "@sindresorhus/tsconfig": "^3.0.1",
        "@sinonjs/fake-timers": "^9.1.2",
        "ansi-escapes": "^5.0.0",
        "c8": "^7.12.0",
        "delay": "^5.0.0",
        "execa": "^6.1.0",
        "fs-extra": "^10.1.0",
        "get-stream": "^6.0.1",
        "replace-string": "^4.0.0",
        "sinon": "^14.0.0",
        "tap": "^16.3.0",
        "temp-write": "^5.0.0",
        "tempy": "^3.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.22.0",
        "typescript": "^4.7.3",
        "xo": "^0.52.2",
        "zen-observable": "^0.8.15"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "volta": {
        "node": "18.8.0",
        "npm": "8.18.0"
      },
      "readme": "[![SWUbanner](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg)](https://vshymanskyy.github.io/StandWithUkraine/)\n\n# <img src=\"media/header.png\" title=\"AVA\" alt=\"AVA logo\" width=\"530\">\n\nAVA is a test runner for Node.js with a concise API, detailed error output, embrace of new language features and process isolation that lets you develop with confidence 🚀\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\nRead our [contributing guide](.github/CONTRIBUTING.md) if you're looking to contribute (issues / PRs / etc).\n\n![](media/verbose-reporter.png)\n\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/main/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/main/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/main/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/main/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/main/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/main/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/main/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/main/zh_CN/readme.md)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](./docs/01-writing-tests.md#process-isolation)\n- [Promise support](./docs/01-writing-tests.md#promise-support)\n- [Async function support](./docs/01-writing-tests.md#async-function-support)\n- [Observable support](./docs/01-writing-tests.md#observable-support)\n- [Enhanced assertion messages](./docs/03-assertions.md#enhanced-assertion-messages)\n- [Automatic parallel test runs in CI](#parallel-runs-in-ci)\n- [TAP reporter](./docs/05-command-line.md#tap-reporter)\n\n\n## Usage\n\nTo install and set up AVA, run:\n\n```console\nnpm init ava\n```\n\nYour `package.json` will then look like this (exact version notwithstanding):\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"^1.0.0\"\n\t}\n}\n```\n\nOr if you prefer using Yarn:\n\n```console\nyarn add ava --dev\n```\n\nAlternatively you can install `ava` manually:\n\n```console\nnpm install --save-dev ava\n```\n\n*Make sure to install AVA locally. As of AVA 4 it can no longer be run globally.*\n\nDon't forget to configure the `test` script in your `package.json` as per above.\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nimport test from 'ava';\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\tt.is(await bar, 'bar');\n});\n```\n\n### Running your tests\n\n```console\nnpm test\n```\n\nOr with `npx`:\n\n```console\nnpx ava\n```\n\nRun with the `--watch` flag to enable AVA's [watch mode](docs/recipes/watch-mode.md):\n\n```console\nnpx ava --watch\n```\n\n## Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## Highlights\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n### Parallel runs in CI\n\nAVA automatically detects whether your CI environment supports parallel builds. Each build will run a subset of all test files, while still making sure all tests get executed. See the [`ci-parallel-vars`](https://www.npmjs.com/package/ci-parallel-vars) package for a list of supported CI environments.\n\n## Documentation\n\nPlease see the [files in the `docs` directory](./docs):\n\n* [Writing tests](./docs/01-writing-tests.md)\n* [Execution context](./docs/02-execution-context.md)\n* [Assertions](./docs/03-assertions.md)\n* [Snapshot testing](./docs/04-snapshot-testing.md)\n* [Command line (CLI)](./docs/05-command-line.md)\n* [Configuration](./docs/06-configuration.md)\n* [Test timeouts](./docs/07-test-timeouts.md)\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/08-common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n### Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Shared workers](docs/recipes/shared-workers.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Splitting tests in CI](docs/recipes/splitting-tests-ci.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with VSCode](docs/recipes/debugging-with-vscode.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n- [Testing web apps using Puppeteer](docs/recipes/puppeteer.md)\n- [Testing web apps using Selenium WebDriverJS](docs/recipes/testing-with-selenium-webdriverjs.md)\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [`/ˈeɪvə/`](media/pronunciation.m4a?raw=true): Ay (f**a**ce, m**a**de) V (**v**ie, ha**v**e) A (comm**a**, **a**go)\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Support\n\n- [GitHub Discussions](https://github.com/avajs/ava/discussions)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) — Lint rules for AVA tests\n- [@ava/typescript](https://github.com/avajs/typescript) — Test TypeScript projects\n- [@ava/cooperate](https://github.com/avajs/cooperate) — Low-level primitives to enable cooperation between test files\n- [@ava/get-port](https://github.com/avajs/get-port) — Reserve a port while testing\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [Do you like AVA? Donate here!](https://opencollective.com/ava)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus)\n---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](https://sindresorhus.com)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n- [Vadim Demedes](https://github.com/vadimdemedes)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://avajs.dev\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n",
      "readmeFilename": "readme.md",
      "gitHead": "d84dbc1c8ce9ba9138530f32550d99d3c963de50",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@5.0.0",
      "_nodeVersion": "18.8.0",
      "_npmVersion": "8.18.0",
      "dist": {
        "integrity": "sha512-7+FdXBKCSeec7+wDSDiWPq79br8tn97YUQkSFS8Iw/xIhKFpvca6IYswf6hL45pDTkHmnkZoKQ2m81YJUbHsFw==",
        "shasum": "d8826928ae5dceff7ea26b31636ab754b7da40e8",
        "tarball": "https://registry.npmjs.org/ava/-/ava-5.0.0.tgz",
        "fileCount": 68,
        "unpackedSize": 264775,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIA6L60XltqD5dhqePmEnIaHCXsRNTp91wq8SbdlGfxbXAiEAr1aTmMBBmlUtaj+TpxX3vqhovOCa8sxN7Dx6ef/5bOw="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjFLz6ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoSVhAAgIhWOUNH62IcDeamYKEI/zVfKaNJSKNumgVwWAsq+K0lTViM\r\n7WiRATvBxJh5m8mPeUalGHc2VbXWfHpKboPl+C6G8yQiZicfph1RLkrQi7cB\r\nk9dE/3OECQ13sSJbpNcK7kcExpbsoyam899uhgekJ8GFUJN8OyHq9PP330yX\r\nuGNF77PjWRgGHXIzh+mpD9uHwoPeIvM5/nWAQVpoHUbEDLcKsOhPjBblotLh\r\nqsgK8ZxTWLgTvvciyN378sGVnLWz6BHm6LwrE6No9vHSl/ox1JMB+IufUxdL\r\nkIyVNpPR9d3/bxIHACUiGuA1xvtGpsTt7/Bn1rSV413fcNGddOuVHcnfrAus\r\n9sxUPfQETLweP7dP4rlvpzdSRmlIWrx9MYsCb0M/RxtI9aJPz4JzrsDnBQGb\r\nNSW3DFsQFt3707ugVAapFB7dxXbrJjTspb3d3cwS9L/zf4WM+o0RgiAigdtN\r\nZ673SwnUGV4jaFQNMTuLOJFTy9fFYhk7fBFy/c41anO1fjzq3CyRjbJc6Rkb\r\n+44p60TiAxIqMBGP3bqRCu6NWKqCgeD0n+Vlf8lcG74xR9WrEIuhJiKxATqu\r\nV62KcnpXLj75YcLxCErwhoJefVcoNekeUESyNTx9I46Am5x/Jw0AAi54QKwX\r\np05zoJe/e7gjFe6AvqeAqm3Pkdjro2/YFxg=\r\n=J0kj\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_5.0.0_1662303482503_0.6176552417762182"
      },
      "_hasShrinkwrap": false
    },
    "5.0.1": {
      "name": "ava",
      "version": "5.0.1",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": {
            "types": "./entrypoints/main.d.ts",
            "default": "./entrypoints/main.mjs"
          },
          "require": {
            "types": "./entrypoints/main.d.cts",
            "default": "./entrypoints/main.cjs"
          }
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": {
            "types": "./entrypoints/plugin.d.ts",
            "default": "./entrypoints/plugin.mjs"
          },
          "require": {
            "types": "./entrypoints/plugin.d.cts",
            "default": "./entrypoints/plugin.cjs"
          }
        }
      },
      "type": "module",
      "engines": {
        "node": ">=14.19 <15 || >=16.15 <17 || >=18"
      },
      "scripts": {
        "cover": "c8 --report=none test-ava && c8 --report=none --no-clean tap && c8 report",
        "test": "xo && tsc --noEmit && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "acorn": "^8.8.0",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.1.1",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.1.0",
        "chalk": "^5.0.1",
        "chokidar": "^3.5.3",
        "chunkd": "^2.0.1",
        "ci-info": "^3.4.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "del": "^7.0.0",
        "emittery": "^1.0.0",
        "figures": "^5.0.0",
        "globby": "^13.1.2",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.2",
        "ms": "^2.1.3",
        "p-event": "^5.0.1",
        "p-map": "^5.5.0",
        "picomatch": "^2.3.1",
        "pkg-conf": "^4.0.0",
        "plur": "^5.1.0",
        "pretty-ms": "^8.0.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.5",
        "strip-ansi": "^7.0.1",
        "supertap": "^3.0.1",
        "temp-dir": "^2.0.0",
        "write-file-atomic": "^4.0.2",
        "yargs": "^17.5.1"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^3.0.1",
        "@sindresorhus/tsconfig": "^3.0.1",
        "@sinonjs/fake-timers": "^9.1.2",
        "ansi-escapes": "^6.0.0",
        "c8": "^7.12.0",
        "delay": "^5.0.0",
        "execa": "^6.1.0",
        "fs-extra": "^10.1.0",
        "get-stream": "^6.0.1",
        "replace-string": "^4.0.0",
        "sinon": "^14.0.0",
        "tap": "^16.3.0",
        "temp-write": "^5.0.0",
        "tempy": "^3.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.24.1",
        "typescript": "^4.8.3",
        "xo": "^0.52.3",
        "zen-observable": "^0.8.15"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "volta": {
        "node": "18.8.0",
        "npm": "8.18.0"
      },
      "types": "./index.d.ts",
      "readme": "[![SWUbanner](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg)](https://vshymanskyy.github.io/StandWithUkraine/)\n\n# <img src=\"media/header.png\" title=\"AVA\" alt=\"AVA logo\" width=\"530\">\n\nAVA is a test runner for Node.js with a concise API, detailed error output, embrace of new language features and process isolation that lets you develop with confidence 🚀\n\nFollow the [AVA Twitter account](https://twitter.com/ava__js) for updates.\n\nRead our [contributing guide](.github/CONTRIBUTING.md) if you're looking to contribute (issues / PRs / etc).\n\n![](media/verbose-reporter.png)\n\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/main/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/main/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/main/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/main/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/main/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/main/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/main/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/main/zh_CN/readme.md)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](./docs/01-writing-tests.md#process-isolation)\n- [Promise support](./docs/01-writing-tests.md#promise-support)\n- [Async function support](./docs/01-writing-tests.md#async-function-support)\n- [Observable support](./docs/01-writing-tests.md#observable-support)\n- [Enhanced assertion messages](./docs/03-assertions.md#enhanced-assertion-messages)\n- [Automatic parallel test runs in CI](#parallel-runs-in-ci)\n- [TAP reporter](./docs/05-command-line.md#tap-reporter)\n\n\n## Usage\n\nTo install and set up AVA, run:\n\n```console\nnpm init ava\n```\n\nYour `package.json` will then look like this (exact version notwithstanding):\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"^1.0.0\"\n\t}\n}\n```\n\nOr if you prefer using Yarn:\n\n```console\nyarn add ava --dev\n```\n\nAlternatively you can install `ava` manually:\n\n```console\nnpm install --save-dev ava\n```\n\n*Make sure to install AVA locally. As of AVA 4 it can no longer be run globally.*\n\nDon't forget to configure the `test` script in your `package.json` as per above.\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory:\n\n```js\nimport test from 'ava';\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\tt.is(await bar, 'bar');\n});\n```\n\n### Running your tests\n\n```console\nnpm test\n```\n\nOr with `npx`:\n\n```console\nnpx ava\n```\n\nRun with the `--watch` flag to enable AVA's [watch mode](docs/recipes/watch-mode.md):\n\n```console\nnpx ava --watch\n```\n\n## Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## Highlights\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n### Parallel runs in CI\n\nAVA automatically detects whether your CI environment supports parallel builds. Each build will run a subset of all test files, while still making sure all tests get executed. See the [`ci-parallel-vars`](https://www.npmjs.com/package/ci-parallel-vars) package for a list of supported CI environments.\n\n## Documentation\n\nPlease see the [files in the `docs` directory](./docs):\n\n* [Writing tests](./docs/01-writing-tests.md)\n* [Execution context](./docs/02-execution-context.md)\n* [Assertions](./docs/03-assertions.md)\n* [Snapshot testing](./docs/04-snapshot-testing.md)\n* [Command line (CLI)](./docs/05-command-line.md)\n* [Configuration](./docs/06-configuration.md)\n* [Test timeouts](./docs/07-test-timeouts.md)\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/08-common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n### Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Shared workers](docs/recipes/shared-workers.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Splitting tests in CI](docs/recipes/splitting-tests-ci.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with VSCode](docs/recipes/debugging-with-vscode.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n- [Testing web apps using Puppeteer](docs/recipes/puppeteer.md)\n- [Testing web apps using Selenium WebDriverJS](docs/recipes/testing-with-selenium-webdriverjs.md)\n\n## FAQ\n\n### Why not `mocha`, `tape`, `tap`?\n\nMocha requires you to use implicit globals like `describe` and `it` with the default interface (which most people use). It's not very opinionated and executes tests serially without process isolation, making it slow.\n\nTape and tap are pretty good. AVA is highly inspired by their syntax. They too execute tests serially. Their default [TAP](https://testanything.org) output isn't very user-friendly though so you always end up using an external tap reporter.\n\nIn contrast AVA is highly opinionated and runs tests concurrently, with a separate process for each test file. Its default reporter is easy on the eyes and yet AVA still supports TAP output through a CLI flag.\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [`/ˈeɪvə/`](media/pronunciation.m4a?raw=true): Ay (f**a**ce, m**a**de) V (**v**ie, ha**v**e) A (comm**a**, **a**go)\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Support\n\n- [GitHub Discussions](https://github.com/avajs/ava/discussions)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) — Lint rules for AVA tests\n- [@ava/typescript](https://github.com/avajs/typescript) — Test TypeScript projects\n- [@ava/cooperate](https://github.com/avajs/cooperate) — Low-level primitives to enable cooperation between test files\n- [@ava/get-port](https://github.com/avajs/get-port) — Reserve a port while testing\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [Do you like AVA? Donate here!](https://opencollective.com/ava)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus)\n---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](https://sindresorhus.com)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n- [Vadim Demedes](https://github.com/vadimdemedes)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://avajs.dev\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n",
      "readmeFilename": "readme.md",
      "gitHead": "7007f13411cb476d134a161d46c5d0185c1495c0",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@5.0.1",
      "_nodeVersion": "18.8.0",
      "_npmVersion": "8.18.0",
      "dist": {
        "integrity": "sha512-nS1eK3HhWaC+eGHtteF5j4yZMjaIE+q2o+oyqD75xsmS87R5sGlxADYWkFIGyB28jrDmAATZAAx+s3JhYsnhNw==",
        "shasum": "5cae4ca89b0f05b63aa45331fe983e87e0e59dbe",
        "tarball": "https://registry.npmjs.org/ava/-/ava-5.0.1.tgz",
        "fileCount": 71,
        "unpackedSize": 266289,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBjGtx/oCfl0hNLRMzfT1n3kJlwhSIhkWrMt3A3K+y/7AiEAoDInP9sd4M59sAHp7VkTMo1WPF6tG2NbEqqZP0pfjHw="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjMG8QACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo3xxAAi4mE7164vjCc49UdpjvkAeCNH20bn7m3Xqfs5KImwKVLO8Iu\r\nUzvuEbJlMoFX9B74ekMpcSW6H6aJJ9jhmJNLlO/sgJhofHuRSp2Tu7RiQ7JD\r\njMaolzNmCBFlfD5572n5ULXudyaztZXYSZ0Y4XYJ/VxQYNU9xAf5QekWR0NK\r\nxrcTGDuGAzOOv/wGeFo5u5fTc5znT2AQFJz0ELmfpCJRZSBIw/5jLt0CFOVR\r\n1F09mL9oa3g/Xy+Bn3g4ZDKB2Ug1wpbFLz6hEnR0bchnwNd4jRaOdiIWXA5s\r\nfAwtmxZBUrzYK3/CQCbfOUAkJgKtvY8kV8NB0ZGpYY0iWtBK2/kCcpCk/kGU\r\nqDm035RBPKReso5kgNi0rOksKIzHPyEovPe4x9wpE4FVNrZjat13KQ9srwrq\r\nZhk5fSt9D6W8FtML7OdYZLyl7gFwx+hQK30OvZIvNCVN1npbjSx1+i+NhDBQ\r\nn7HCXMN1cn9QDKQpUB13ZQu3qcY01QoBdVudZKRryioVW4OWj9kcTN+Fv0R4\r\nU+eqIOirohMwOMpGAd/v5aXDqqQtZn5nqGVEFeH4NaHKjzvLMfVsVUmhDl4b\r\nfEN6x1yt2G3ka83bzh0d/gQHXlruWqOYZ8cmLHRASKoMNyVDYMqNkrcLKxp+\r\nw8JakXD1zjaCxb1m7eTDYW1ImCSmjJKsekc=\r\n=vEcQ\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_5.0.1_1664118544498_0.054794170614614224"
      },
      "_hasShrinkwrap": false
    },
    "5.1.0": {
      "name": "ava",
      "version": "5.1.0",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": {
            "types": "./entrypoints/main.d.ts",
            "default": "./entrypoints/main.mjs"
          },
          "require": {
            "types": "./entrypoints/main.d.cts",
            "default": "./entrypoints/main.cjs"
          }
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": {
            "types": "./entrypoints/plugin.d.ts",
            "default": "./entrypoints/plugin.mjs"
          },
          "require": {
            "types": "./entrypoints/plugin.d.cts",
            "default": "./entrypoints/plugin.cjs"
          }
        }
      },
      "type": "module",
      "engines": {
        "node": ">=14.19 <15 || >=16.15 <17 || >=18"
      },
      "scripts": {
        "cover": "c8 --report=none test-ava && c8 --report=none --no-clean tap && c8 report",
        "test": "xo && tsc --noEmit && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "acorn": "^8.8.1",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.1.0",
        "chalk": "^5.1.2",
        "chokidar": "^3.5.3",
        "chunkd": "^2.0.1",
        "ci-info": "^3.6.1",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "del": "^7.0.0",
        "emittery": "^1.0.1",
        "figures": "^5.0.0",
        "globby": "^13.1.2",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.2",
        "ms": "^2.1.3",
        "p-event": "^5.0.1",
        "p-map": "^5.5.0",
        "picomatch": "^2.3.1",
        "pkg-conf": "^4.0.0",
        "plur": "^5.1.0",
        "pretty-ms": "^8.0.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.6",
        "strip-ansi": "^7.0.1",
        "supertap": "^3.0.1",
        "temp-dir": "^3.0.0",
        "write-file-atomic": "^5.0.0",
        "yargs": "^17.6.2"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^3.0.1",
        "@sindresorhus/tsconfig": "^3.0.1",
        "@sinonjs/fake-timers": "^10.0.0",
        "ansi-escapes": "^6.0.0",
        "c8": "^7.12.0",
        "delay": "^5.0.0",
        "execa": "^6.1.0",
        "fs-extra": "^10.1.0",
        "get-stream": "^6.0.1",
        "replace-string": "^4.0.0",
        "sinon": "^14.0.2",
        "tap": "^16.3.0",
        "temp-write": "^5.0.0",
        "tempy": "^3.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.24.1",
        "typescript": "^4.8.4",
        "xo": "^0.52.4",
        "zen-observable": "^0.9.0"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "volta": {
        "node": "18.8.0",
        "npm": "8.18.0"
      },
      "types": "./index.d.ts",
      "gitHead": "4ecfe7d822785c800f80bbcc2b4b3460f339a84e",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@5.1.0",
      "_nodeVersion": "18.8.0",
      "_npmVersion": "8.18.0",
      "dist": {
        "integrity": "sha512-e5VFrSQ0WBPyZJWRXVrO7RFOizFeNM0t2PORwrPvWtApgkORI6cvGnY3GX1G+lzpd0HjqNx5Jus22AhxVnUMNA==",
        "shasum": "98c4aac86a427c9843d3af13f25552b71014bff7",
        "tarball": "https://registry.npmjs.org/ava/-/ava-5.1.0.tgz",
        "fileCount": 71,
        "unpackedSize": 267219,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCQ1IlTWZo5yzP73JoyfB+aWHNy+rD/BAs56WzwaE9C2wIgE30qC2f20Y/2gD/UQ9VG99gk81IJsvDscH8pvRNZLa8="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjckw8ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpVnhAAjGAiwC3S7X+6wHBfNauqce13hEdadHD0/TiINmS3i4M3SnbG\r\nKxZY485I0LuPjI48EPXOwWD7yK+lkY1+EJmf/S2rj6mk+8Kd3UfbyPI+Zmda\r\ngbIKMonWqr5jL6xLwvlt/odKnuFZBdR2bY/V2gBCIWai5dUqJJxUQ7xXYjJ/\r\np9CSWm8UlZfvCaFrIExlJHSaGvQanh9ALdFxjatgo0ot5J76hr4Gh1ep/Q0K\r\nGG3z+Vuq3oJHjYbih17cAnyPO1jShpnql2wWPJAQT1AbdFjrhb7H3Q+w7Oun\r\nCPht04EUOI1JhzLysFdnEVfOe7pq5RfMwCRKoty9XieKq3VpmrVSU5rrw66d\r\nIMkKfPzywvm5O5mkYrpXjV0UaHVn74AyNBuyFPGiWnegW93P7wiO1zCqq34G\r\naZyiYBqvOre5U4RFqsUQjMr0xK8yDF3mrk5fnUY3ukPmREmPsgBu4vBoUKpr\r\nP9OnhNAtGCRvws11ArPG7VtB+Fp12xMDlhAVcuY3w4XBP2TiaVchDhPEwEUL\r\nHmDxsrBPwF4cpFvbnYRMDf0O4a7uVnDSHtwEOR1AaQVJ2RaetplHSZhHo6iV\r\nTaW4tsvjrR0FMbkzwrIfTdeM+a/i4IG0WKoasHntur/4PTI3d0zRTDR+oW7p\r\nuejE4IPUhfqNYVz6DrEISQJMD8PBPeEJ5kQ=\r\n=CeXt\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_5.1.0_1668435004261_0.7120429344849495"
      },
      "_hasShrinkwrap": false
    },
    "5.1.1": {
      "name": "ava",
      "version": "5.1.1",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": {
            "types": "./entrypoints/main.d.ts",
            "default": "./entrypoints/main.mjs"
          },
          "require": {
            "types": "./entrypoints/main.d.cts",
            "default": "./entrypoints/main.cjs"
          }
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": {
            "types": "./entrypoints/plugin.d.ts",
            "default": "./entrypoints/plugin.mjs"
          },
          "require": {
            "types": "./entrypoints/plugin.d.cts",
            "default": "./entrypoints/plugin.cjs"
          }
        }
      },
      "type": "module",
      "engines": {
        "node": ">=14.19 <15 || >=16.15 <17 || >=18"
      },
      "scripts": {
        "cover": "c8 --report=none test-ava && c8 --report=none --no-clean tap && c8 report",
        "test": "xo && tsc --noEmit && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "acorn": "^8.8.1",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.1.0",
        "chalk": "^5.2.0",
        "chokidar": "^3.5.3",
        "chunkd": "^2.0.1",
        "ci-info": "^3.7.1",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "del": "^7.0.0",
        "emittery": "^1.0.1",
        "figures": "^5.0.0",
        "globby": "^13.1.3",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.2",
        "ms": "^2.1.3",
        "p-event": "^5.0.1",
        "p-map": "^5.5.0",
        "picomatch": "^2.3.1",
        "pkg-conf": "^4.0.0",
        "plur": "^5.1.0",
        "pretty-ms": "^8.0.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.6",
        "strip-ansi": "^7.0.1",
        "supertap": "^3.0.1",
        "temp-dir": "^3.0.0",
        "write-file-atomic": "^5.0.0",
        "yargs": "^17.6.2"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^3.0.1",
        "@sindresorhus/tsconfig": "^3.0.1",
        "ansi-escapes": "^6.0.0",
        "c8": "^7.12.0",
        "delay": "^5.0.0",
        "execa": "^6.1.0",
        "fs-extra": "^11.1.0",
        "get-stream": "^6.0.1",
        "replace-string": "^4.0.0",
        "sinon": "^15.0.1",
        "tap": "^16.3.3",
        "temp-write": "^5.0.0",
        "tempy": "^3.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.25.0",
        "typescript": "^4.9.4",
        "xo": "^0.53.1",
        "zen-observable": "^0.10.0"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "volta": {
        "node": "18.13.0",
        "npm": "9.3.0"
      },
      "types": "./index.d.ts",
      "gitHead": "c74934853db1d387c46ed1f953970c777feed6a0",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@5.1.1",
      "_nodeVersion": "18.13.0",
      "_npmVersion": "9.3.0",
      "dist": {
        "integrity": "sha512-od1CWgWVIKZSdEc1dhQWhbsd6KBs0EYjek7eqZNGPvy+NyC9Q1bXixcadlgOXwDG9aM0zLMQZwRXfe9gMb1LQQ==",
        "shasum": "41b1e1f60965b0701aca3a48bc63cb4c94f7ee6d",
        "tarball": "https://registry.npmjs.org/ava/-/ava-5.1.1.tgz",
        "fileCount": 71,
        "unpackedSize": 267759,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFj9BB5gO7Ae9RmyvcuM7GctBmdsSHdh+Qg0xuhXUNb6AiEA0TLteDvhdaJz1uBw0hod45YBu1paDKzRtSHPHMk8CE4="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjxGmEACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqsbRAAkly9mmoe9ZOdgzNlrtf20FMhZ0+LJ9OV11ITtqVwg5iX+zVN\r\nfKfTFcb5o8oipRL6zcs82oWK0HPcveN1XZpysimLMn51j3M3r5nvv2Va/RB3\r\n0g3fIRQ9Dgtt23a5y3XrtlFSpJqeVezSXm690NMr+NhuvMQy659mgT7/pSft\r\ncB2zOee6n9KSrDbpehMJAfJNmqzlM2Jbn6AgQTAq2tjjSRb55osGalge/Z+A\r\nVVnlD+7RYlrnJlIfKfUXXvL7CWbIUrHh8UU6HzHzP0zxkRq1Yrimw0X8nli8\r\nr/Fn+EVdhOFyE/yZnbmBBIUDC6mHqx0TdeaPTqcA5KpQWtp+1xHch6cufHkW\r\nOQU2/FH1ME0JF5DvY+izWwKjY1auLCEre7cYT0+2XGpqWjT74hBOa1dh3vda\r\nPfmJCQhSC/eXyooRhdRUyNRASoiZeBvvau52jY1iREwb43TfUi0bKB7u6SxK\r\neTgU+kJQJecx9tm22KaL4VEhwn6opCLZhpU006LmVuU/9Nm0j7PMzszCbKJA\r\nOw4cf0Hh+8AYJXmpwuMkv5YxZv1f87jIkBaInMvqjktqmat1heN0ULtUiztK\r\nhhiGyE0562o7Av2GCwcmG0a0EK5fWHDWlbtIKYfp5EDnMtCP9Vu1p7QB41so\r\n82nGOPnKCfQe42BptHitbyeWwg5P9k2WU5k=\r\n=1xt0\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_5.1.1_1673816452544_0.06620963430214122"
      },
      "_hasShrinkwrap": false
    },
    "5.2.0": {
      "name": "ava",
      "version": "5.2.0",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": {
            "types": "./entrypoints/main.d.ts",
            "default": "./entrypoints/main.mjs"
          },
          "require": {
            "types": "./entrypoints/main.d.cts",
            "default": "./entrypoints/main.cjs"
          }
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": {
            "types": "./entrypoints/plugin.d.ts",
            "default": "./entrypoints/plugin.mjs"
          },
          "require": {
            "types": "./entrypoints/plugin.d.cts",
            "default": "./entrypoints/plugin.cjs"
          }
        }
      },
      "type": "module",
      "engines": {
        "node": ">=14.19 <15 || >=16.15 <17 || >=18"
      },
      "scripts": {
        "cover": "c8 --report=none test-ava && c8 --report=none --no-clean tap && c8 report",
        "test": "xo && tsc --noEmit && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "acorn": "^8.8.1",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.1.0",
        "chalk": "^5.2.0",
        "chokidar": "^3.5.3",
        "chunkd": "^2.0.1",
        "ci-info": "^3.7.1",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "del": "^7.0.0",
        "emittery": "^1.0.1",
        "figures": "^5.0.0",
        "globby": "^13.1.3",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.2",
        "ms": "^2.1.3",
        "p-event": "^5.0.1",
        "p-map": "^5.5.0",
        "picomatch": "^2.3.1",
        "pkg-conf": "^4.0.0",
        "plur": "^5.1.0",
        "pretty-ms": "^8.0.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.6",
        "strip-ansi": "^7.0.1",
        "supertap": "^3.0.1",
        "temp-dir": "^3.0.0",
        "write-file-atomic": "^5.0.0",
        "yargs": "^17.6.2"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^3.0.1",
        "@sindresorhus/tsconfig": "^3.0.1",
        "ansi-escapes": "^6.0.0",
        "c8": "^7.12.0",
        "delay": "^5.0.0",
        "execa": "^6.1.0",
        "fs-extra": "^11.1.0",
        "get-stream": "^6.0.1",
        "replace-string": "^4.0.0",
        "sinon": "^15.0.1",
        "tap": "^16.3.3",
        "temp-write": "^5.0.0",
        "tempy": "^3.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.25.0",
        "typescript": "^4.9.4",
        "xo": "^0.53.1",
        "zen-observable": "^0.10.0"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "volta": {
        "node": "18.13.0",
        "npm": "9.3.0"
      },
      "types": "./index.d.ts",
      "gitHead": "1353b08ae5c3be0af96d2197e593be12f9eaab6b",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@5.2.0",
      "_nodeVersion": "18.13.0",
      "_npmVersion": "9.3.0",
      "dist": {
        "integrity": "sha512-W8yxFXJr/P68JP55eMpQIa6AiXhCX3VeuajM8nolyWNExcMDD6rnIWKTjw0B/+GkFHBIaN6Jd0LtcMThcoqVfg==",
        "shasum": "0fae0a987872df1859391a658f2374f5f16d6d29",
        "tarball": "https://registry.npmjs.org/ava/-/ava-5.2.0.tgz",
        "fileCount": 71,
        "unpackedSize": 268381,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCf9s30uAW1kYEpNsAhE/lX8zjPtDPNjZEkhL+x/x5JqwIgD9CNQNxEVRKY+y58x8fleWAeub95DC+N98kDy+P0ZUU="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj4WX/ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoyHw//SOH6IVwuX7ByO5KD9VTb2TfQBr0oFUipeN5SPj6F1IRcfchR\r\naBzfncmn2kdENzs7AlabhfvtvhUybwQ0LzQmxaXOf72d+R4EdGsoHtuI8hxB\r\nIHWHHi5AVH17Pd4GltCboQpdBAQXtvHnjjJEGHMjTOA9whzzo+bPiHo6YmKf\r\n7ELCLVuIYRvFmsT5uSH18Ptpc+Z3/4UF6piRokeUIPHgIzYEV1wR7wgPgvU8\r\nvpbAjmt1XXkC2md/FplUhvq6z+mx5Hi6m1HFhHCRvIb5ciw0YwpVVb02UKjR\r\n1PdATYaVgtQpTpZR2AtrWen0jkhhoNuUxE9y/awKpTZpCilfBc+hOAe97shP\r\nhO4ALiSMCX7VQDr3aWhGiXCBSFrz6lkmJdEz5pSS+mdXWh2k+WhaC1D1eCpY\r\nHenc2EHpTQhc90Fvh2FJcb9s+B5j7MW3F7tsiyywWw7hsvZWKxQdrPU12psV\r\nDkjVr1Xk6Ggi0OF/tse0VIDOR3a41QCxrFD0L9USEP+1kpgmfGTaCWdDdU/o\r\nJW9zA/HOCeSFLmHv1qv/2zwwy11pGSwrw/He4Ng552wxZnp/tHr2OXRHpnq0\r\n1qxWAsbOUfjitVcD6LLQuabzNQK1ofQ6mwmbn/DW3+wO1iC4myswdegnURsT\r\n/KWMFfF7je9UUgsMB6x5a0ir8856pSdEWjQ=\r\n=YaGq\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_5.2.0_1675716095635_0.9085624303485036"
      },
      "_hasShrinkwrap": false
    },
    "5.3.0": {
      "name": "ava",
      "version": "5.3.0",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": {
            "types": "./entrypoints/main.d.ts",
            "default": "./entrypoints/main.mjs"
          },
          "require": {
            "types": "./entrypoints/main.d.cts",
            "default": "./entrypoints/main.cjs"
          }
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": {
            "types": "./entrypoints/plugin.d.ts",
            "default": "./entrypoints/plugin.mjs"
          },
          "require": {
            "types": "./entrypoints/plugin.d.cts",
            "default": "./entrypoints/plugin.cjs"
          }
        }
      },
      "type": "module",
      "engines": {
        "node": ">=14.19 <15 || >=16.15 <17 || >=18"
      },
      "scripts": {
        "cover": "c8 --report=none test-ava && c8 --report=none --no-clean tap && c8 report",
        "test": "xo && tsc --noEmit && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "acorn": "^8.8.2",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.1.0",
        "chalk": "^5.2.0",
        "chokidar": "^3.5.3",
        "chunkd": "^2.0.1",
        "ci-info": "^3.8.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "emittery": "^1.0.1",
        "figures": "^5.0.0",
        "globby": "^13.1.4",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.2",
        "ms": "^2.1.3",
        "p-event": "^5.0.1",
        "p-map": "^5.5.0",
        "picomatch": "^2.3.1",
        "pkg-conf": "^4.0.0",
        "plur": "^5.1.0",
        "pretty-ms": "^8.0.0",
        "resolve-cwd": "^3.0.0",
        "stack-utils": "^2.0.6",
        "strip-ansi": "^7.0.1",
        "supertap": "^3.0.1",
        "temp-dir": "^3.0.0",
        "write-file-atomic": "^5.0.1",
        "yargs": "^17.7.2"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^4.0.0",
        "@sindresorhus/tsconfig": "^3.0.1",
        "ansi-escapes": "^6.2.0",
        "c8": "^7.13.0",
        "delay": "^5.0.0",
        "execa": "^7.1.1",
        "expect": "^29.5.0",
        "fs-extra": "^11.1.1",
        "get-stream": "^6.0.1",
        "replace-string": "^4.0.0",
        "sinon": "^15.1.0",
        "tap": "^16.3.4",
        "temp-write": "^5.0.0",
        "tempy": "^3.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.28.1",
        "typescript": "^4.9.5",
        "xo": "^0.54.2",
        "zen-observable": "^0.10.0"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "volta": {
        "node": "20.2.0"
      },
      "types": "./index.d.ts",
      "gitHead": "568fe40c987dd6c593dfbcf4144d1d1627955d46",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@5.3.0",
      "_nodeVersion": "20.2.0",
      "_npmVersion": "9.6.6",
      "dist": {
        "integrity": "sha512-QYvBdyygl1LGX13IuYsC4bkwVCzZeovMGbxYkD73i7DVJxNlWnFa06YgrBOTbjw2QvSKUl5fOJ92Kj5WK9hSeg==",
        "shasum": "b5c9e6b92f97cb0d4f9bf09be51daa4101ff21cf",
        "tarball": "https://registry.npmjs.org/ava/-/ava-5.3.0.tgz",
        "fileCount": 72,
        "unpackedSize": 271202,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDk1Qe3uL7jf40I2vFef8YmKo3KxCwDmg4yrDT88GtbxQIhAN5nTZ8obh611dhVoGLIOse/n8RQE2nDHUrq5xtujB4Q"
          }
        ]
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_5.3.0_1684998103212_0.30596053481556273"
      },
      "_hasShrinkwrap": false
    },
    "5.3.1": {
      "name": "ava",
      "version": "5.3.1",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": {
            "types": "./entrypoints/main.d.ts",
            "default": "./entrypoints/main.mjs"
          },
          "require": {
            "types": "./entrypoints/main.d.cts",
            "default": "./entrypoints/main.cjs"
          }
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": {
            "types": "./entrypoints/plugin.d.ts",
            "default": "./entrypoints/plugin.mjs"
          },
          "require": {
            "types": "./entrypoints/plugin.d.cts",
            "default": "./entrypoints/plugin.cjs"
          }
        }
      },
      "type": "module",
      "engines": {
        "node": ">=14.19 <15 || >=16.15 <17 || >=18"
      },
      "scripts": {
        "cover": "c8 --report=none test-ava && c8 --report=none --no-clean tap && c8 report",
        "test": "xo && tsc --noEmit && npm run -s cover"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "acorn": "^8.8.2",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.1.0",
        "chalk": "^5.2.0",
        "chokidar": "^3.5.3",
        "chunkd": "^2.0.1",
        "ci-info": "^3.8.0",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "emittery": "^1.0.1",
        "figures": "^5.0.0",
        "globby": "^13.1.4",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.2",
        "ms": "^2.1.3",
        "p-event": "^5.0.1",
        "p-map": "^5.5.0",
        "picomatch": "^2.3.1",
        "pkg-conf": "^4.0.0",
        "plur": "^5.1.0",
        "pretty-ms": "^8.0.0",
        "resolve-cwd": "^3.0.0",
        "stack-utils": "^2.0.6",
        "strip-ansi": "^7.0.1",
        "supertap": "^3.0.1",
        "temp-dir": "^3.0.0",
        "write-file-atomic": "^5.0.1",
        "yargs": "^17.7.2"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^4.0.0",
        "@sindresorhus/tsconfig": "^3.0.1",
        "ansi-escapes": "^6.2.0",
        "c8": "^7.13.0",
        "delay": "^5.0.0",
        "execa": "^7.1.1",
        "expect": "^29.5.0",
        "fs-extra": "^11.1.1",
        "get-stream": "^6.0.1",
        "replace-string": "^4.0.0",
        "sinon": "^15.1.0",
        "tap": "^16.3.4",
        "temp-write": "^5.0.0",
        "tempy": "^3.0.0",
        "touch": "^3.1.0",
        "tsd": "^0.28.1",
        "typescript": "^4.9.5",
        "xo": "^0.54.2",
        "zen-observable": "^0.10.0"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "volta": {
        "node": "20.2.0"
      },
      "types": "./index.d.ts",
      "gitHead": "306e37c3d87e711a0a6f548b5efcb22fb424925d",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_id": "ava@5.3.1",
      "_nodeVersion": "20.2.0",
      "_npmVersion": "9.6.6",
      "dist": {
        "integrity": "sha512-Scv9a4gMOXB6+ni4toLuhAm9KYWEjsgBglJl+kMGI5+IVDt120CCDZyB5HNU9DjmLI2t4I0GbnxGLmmRfGTJGg==",
        "shasum": "335737dd963b7941b90214836cea2e8de1f4d5f4",
        "tarball": "https://registry.npmjs.org/ava/-/ava-5.3.1.tgz",
        "fileCount": 72,
        "unpackedSize": 271614,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCID+00hZf9VzJZIQMVaCaVn1Bg/kZpQFTQl7QfUNpfoqWAiEAhe9S02swVfoZPG3QtixBDxH9or6091xBgHrDSVTGKWc="
          }
        ]
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_5.3.1_1686933689274_0.2370179121665652"
      },
      "_hasShrinkwrap": false
    },
    "6.0.0": {
      "name": "ava",
      "version": "6.0.0",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": {
            "types": "./entrypoints/main.d.mts",
            "default": "./entrypoints/main.mjs"
          },
          "require": {
            "types": "./entrypoints/main.d.cts",
            "default": "./entrypoints/main.cjs"
          }
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": {
            "types": "./entrypoints/plugin.d.mts",
            "default": "./entrypoints/plugin.mjs"
          },
          "require": {
            "types": "./entrypoints/plugin.d.cts",
            "default": "./entrypoints/plugin.cjs"
          }
        },
        "./internal": {
          "types": "./entrypoints/internal.d.mts"
        }
      },
      "type": "module",
      "engines": {
        "node": "^18.18 || ^20.8 || ^21"
      },
      "scripts": {
        "test": "./scripts/test.sh"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@vercel/nft": "^0.24.4",
        "acorn": "^8.11.2",
        "acorn-walk": "^8.3.0",
        "ansi-styles": "^6.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.1.0",
        "cbor": "^9.0.1",
        "chalk": "^5.3.0",
        "chunkd": "^2.0.1",
        "ci-info": "^4.0.0",
        "ci-parallel-vars": "^1.0.1",
        "cli-truncate": "^4.0.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "emittery": "^1.0.1",
        "figures": "^6.0.1",
        "globby": "^14.0.0",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "memoize": "^10.0.0",
        "ms": "^2.1.3",
        "p-map": "^6.0.0",
        "package-config": "^5.0.0",
        "picomatch": "^3.0.1",
        "plur": "^5.1.0",
        "pretty-ms": "^8.0.0",
        "resolve-cwd": "^3.0.0",
        "stack-utils": "^2.0.6",
        "strip-ansi": "^7.1.0",
        "supertap": "^3.0.1",
        "temp-dir": "^3.0.0",
        "write-file-atomic": "^5.0.1",
        "yargs": "^17.7.2"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^4.1.0",
        "@sindresorhus/tsconfig": "^5.0.0",
        "@types/node": "^20.10.3",
        "ansi-escapes": "^6.2.0",
        "c8": "^8.0.1",
        "execa": "^8.0.1",
        "expect": "^29.7.0",
        "sinon": "^17.0.1",
        "tap": "^18.6.1",
        "tempy": "^3.1.0",
        "tsd": "^0.29.0",
        "typescript": "~5.3.2",
        "xo": "^0.56.0",
        "zen-observable": "^0.10.0"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "volta": {
        "node": "20.10.0"
      },
      "_id": "ava@6.0.0",
      "gitHead": "cf7a2886bf2717cbb599d195279501be703998de",
      "types": "./index.d.ts",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_nodeVersion": "20.10.0",
      "_npmVersion": "10.2.3",
      "dist": {
        "integrity": "sha512-sgruhDqX9QwW3iuivRgvHNZsE/3oc2yMpANUms2WIN3YGLmhng6aFoDDEFFtwKaaw2H7KteAOuNzv9ml1UO2QQ==",
        "shasum": "264b4b8cd3f90b91480652a002d37e0d31273d81",
        "tarball": "https://registry.npmjs.org/ava/-/ava-6.0.0.tgz",
        "fileCount": 74,
        "unpackedSize": 279350,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDVE2V5y13w3tunPW9eQrA7vUUMFVI5ym3GOwlLBzP1hwIgKjvGeQiVnwDVCeqNDsktS2DmRLCa3c6zzECWSdTbb/I="
          }
        ]
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_6.0.0_1701725514361_0.4452187643280261"
      },
      "_hasShrinkwrap": false
    },
    "6.0.1": {
      "name": "ava",
      "version": "6.0.1",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": {
            "types": "./entrypoints/main.d.mts",
            "default": "./entrypoints/main.mjs"
          },
          "require": {
            "types": "./entrypoints/main.d.cts",
            "default": "./entrypoints/main.cjs"
          }
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": {
            "types": "./entrypoints/plugin.d.mts",
            "default": "./entrypoints/plugin.mjs"
          },
          "require": {
            "types": "./entrypoints/plugin.d.cts",
            "default": "./entrypoints/plugin.cjs"
          }
        },
        "./internal": {
          "types": "./entrypoints/internal.d.mts"
        }
      },
      "type": "module",
      "engines": {
        "node": "^18.18 || ^20.8 || ^21"
      },
      "scripts": {
        "test": "./scripts/test.sh"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@vercel/nft": "^0.24.4",
        "acorn": "^8.11.2",
        "acorn-walk": "^8.3.0",
        "ansi-styles": "^6.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.1.0",
        "cbor": "^9.0.1",
        "chalk": "^5.3.0",
        "chunkd": "^2.0.1",
        "ci-info": "^4.0.0",
        "ci-parallel-vars": "^1.0.1",
        "cli-truncate": "^4.0.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "emittery": "^1.0.1",
        "figures": "^6.0.1",
        "globby": "^14.0.0",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "memoize": "^10.0.0",
        "ms": "^2.1.3",
        "p-map": "^6.0.0",
        "package-config": "^5.0.0",
        "picomatch": "^3.0.1",
        "plur": "^5.1.0",
        "pretty-ms": "^8.0.0",
        "resolve-cwd": "^3.0.0",
        "stack-utils": "^2.0.6",
        "strip-ansi": "^7.1.0",
        "supertap": "^3.0.1",
        "temp-dir": "^3.0.0",
        "write-file-atomic": "^5.0.1",
        "yargs": "^17.7.2"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^4.1.0",
        "@sindresorhus/tsconfig": "^5.0.0",
        "@types/node": "^20.10.3",
        "ansi-escapes": "^6.2.0",
        "c8": "^8.0.1",
        "execa": "^8.0.1",
        "expect": "^29.7.0",
        "sinon": "^17.0.1",
        "tap": "^18.6.1",
        "tempy": "^3.1.0",
        "tsd": "^0.29.0",
        "typescript": "~5.3.2",
        "xo": "^0.56.0",
        "zen-observable": "^0.10.0"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "volta": {
        "node": "20.10.0"
      },
      "_id": "ava@6.0.1",
      "gitHead": "5975b602b771e0dc02382d24b65c5561bd5fc7ee",
      "types": "./index.d.ts",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_nodeVersion": "20.10.0",
      "_npmVersion": "10.2.3",
      "dist": {
        "integrity": "sha512-9zR0wOwlcJdOWwHOKnpi0GrPRLTlxDFapGalP4rGD0oQRKxDVoucBBWvxVQ/2cPv10Hx1PkDXLJH5iUzhPn0/g==",
        "shasum": "3746f921e1349e6e700000bbda9269a751aaf983",
        "tarball": "https://registry.npmjs.org/ava/-/ava-6.0.1.tgz",
        "fileCount": 74,
        "unpackedSize": 279362,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAM7Vu4iuK2yazNnk2gCsPyqPP6SJKrh3z5IuAtVn1qmAiEA51qg/LTJgylhENxptRcfbMCihWkCi2O7lABmOfQGRlA="
          }
        ]
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_6.0.1_1701897566627_0.1900087429235977"
      },
      "_hasShrinkwrap": false
    },
    "6.1.0": {
      "name": "ava",
      "version": "6.1.0",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": {
            "types": "./entrypoints/main.d.mts",
            "default": "./entrypoints/main.mjs"
          },
          "require": {
            "types": "./entrypoints/main.d.cts",
            "default": "./entrypoints/main.cjs"
          }
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": {
            "types": "./entrypoints/plugin.d.mts",
            "default": "./entrypoints/plugin.mjs"
          },
          "require": {
            "types": "./entrypoints/plugin.d.cts",
            "default": "./entrypoints/plugin.cjs"
          }
        },
        "./internal": {
          "types": "./entrypoints/internal.d.mts"
        }
      },
      "type": "module",
      "engines": {
        "node": "^18.18 || ^20.8 || ^21"
      },
      "scripts": {
        "test": "./scripts/test.sh"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@vercel/nft": "^0.24.4",
        "acorn": "^8.11.2",
        "acorn-walk": "^8.3.0",
        "ansi-styles": "^6.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.1.0",
        "cbor": "^9.0.1",
        "chalk": "^5.3.0",
        "chunkd": "^2.0.1",
        "ci-info": "^4.0.0",
        "ci-parallel-vars": "^1.0.1",
        "cli-truncate": "^4.0.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "emittery": "^1.0.1",
        "figures": "^6.0.1",
        "globby": "^14.0.0",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "memoize": "^10.0.0",
        "ms": "^2.1.3",
        "p-map": "^6.0.0",
        "package-config": "^5.0.0",
        "picomatch": "^3.0.1",
        "plur": "^5.1.0",
        "pretty-ms": "^8.0.0",
        "resolve-cwd": "^3.0.0",
        "stack-utils": "^2.0.6",
        "strip-ansi": "^7.1.0",
        "supertap": "^3.0.1",
        "temp-dir": "^3.0.0",
        "write-file-atomic": "^5.0.1",
        "yargs": "^17.7.2"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^4.1.0",
        "@sindresorhus/tsconfig": "^5.0.0",
        "@types/node": "^20.10.3",
        "ansi-escapes": "^6.2.0",
        "c8": "^8.0.1",
        "execa": "^8.0.1",
        "expect": "^29.7.0",
        "sinon": "^17.0.1",
        "tap": "^18.6.1",
        "tempy": "^3.1.0",
        "tsd": "^0.29.0",
        "typescript": "~5.3.2",
        "xo": "^0.56.0",
        "zen-observable": "^0.10.0"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "volta": {
        "node": "20.10.0"
      },
      "_id": "ava@6.1.0",
      "gitHead": "aae39b20ba3ef80e5bedb1e5882432a3cd7c44eb",
      "types": "./index.d.ts",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_nodeVersion": "20.10.0",
      "_npmVersion": "10.2.3",
      "dist": {
        "integrity": "sha512-0fOQIWMHT9DYelzTYc3TI/4fmmmJ5LdvRWd6F43CppYfg84VrM5EO+hmlv2cPujMJAWuVesUWVloUu9PIwrgTA==",
        "shasum": "13d2eeffed03525caa15557375377a993752676a",
        "tarball": "https://registry.npmjs.org/ava/-/ava-6.1.0.tgz",
        "fileCount": 75,
        "unpackedSize": 280006,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCIV8bplazzaI4eDE/DigOC3N9JWx0XgAvpJT6e06fFxAIgNC17WibVuQwGWDm+aWBwMAKHUOfb5NhlRVcQH0CFBdY="
          }
        ]
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_6.1.0_1705867404378_0.759535594774722"
      },
      "_hasShrinkwrap": false
    },
    "6.1.1": {
      "name": "ava",
      "version": "6.1.1",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": {
            "types": "./entrypoints/main.d.mts",
            "default": "./entrypoints/main.mjs"
          },
          "require": {
            "types": "./entrypoints/main.d.cts",
            "default": "./entrypoints/main.cjs"
          }
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": {
            "types": "./entrypoints/plugin.d.mts",
            "default": "./entrypoints/plugin.mjs"
          },
          "require": {
            "types": "./entrypoints/plugin.d.cts",
            "default": "./entrypoints/plugin.cjs"
          }
        },
        "./internal": {
          "types": "./entrypoints/internal.d.mts"
        }
      },
      "type": "module",
      "engines": {
        "node": "^18.18 || ^20.8 || ^21"
      },
      "scripts": {
        "test": "./scripts/test.sh"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@vercel/nft": "^0.26.2",
        "acorn": "^8.11.3",
        "acorn-walk": "^8.3.2",
        "ansi-styles": "^6.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.1.0",
        "cbor": "^9.0.1",
        "chalk": "^5.3.0",
        "chunkd": "^2.0.1",
        "ci-info": "^4.0.0",
        "ci-parallel-vars": "^1.0.1",
        "cli-truncate": "^4.0.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "emittery": "^1.0.1",
        "figures": "^6.0.1",
        "globby": "^14.0.0",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "memoize": "^10.0.0",
        "ms": "^2.1.3",
        "p-map": "^7.0.1",
        "package-config": "^5.0.0",
        "picomatch": "^3.0.1",
        "plur": "^5.1.0",
        "pretty-ms": "^9.0.0",
        "resolve-cwd": "^3.0.0",
        "stack-utils": "^2.0.6",
        "strip-ansi": "^7.1.0",
        "supertap": "^3.0.1",
        "temp-dir": "^3.0.0",
        "write-file-atomic": "^5.0.1",
        "yargs": "^17.7.2"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^4.1.0",
        "@sindresorhus/tsconfig": "^5.0.0",
        "@types/node": "^20.11.10",
        "ansi-escapes": "^6.2.0",
        "c8": "^9.1.0",
        "execa": "^8.0.1",
        "expect": "^29.7.0",
        "sinon": "^17.0.1",
        "tap": "^18.7.0",
        "tempy": "^3.1.0",
        "tsd": "^0.30.4",
        "typescript": "~5.3.3",
        "xo": "^0.56.0",
        "zen-observable": "^0.10.0"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "volta": {
        "node": "20.10.0"
      },
      "_id": "ava@6.1.1",
      "gitHead": "2e0c2b1cef779e1c092eb60f0a9558bb9cf4c848",
      "types": "./index.d.ts",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_nodeVersion": "20.10.0",
      "_npmVersion": "10.2.3",
      "dist": {
        "integrity": "sha512-A+DG0Ag0e5zvt262Ze0pG5QH7EBmhn+DB9uK7WkUtJVAtGjZFeKTpUOKx339DMGn53+FB24pCJC5klX2WU4VOw==",
        "shasum": "76910bbd567cbe1e09345d7873e7116ae9b54153",
        "tarball": "https://registry.npmjs.org/ava/-/ava-6.1.1.tgz",
        "fileCount": 75,
        "unpackedSize": 280054,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQC3gHO3pBsCidbFklepXS64NF2OUylPiW/3gNWXh0YdNgIgQzsc2394b5De4vUzpqB9OZT9jkM8zz96FRBFrUCqXNY="
          }
        ]
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_6.1.1_1706562398713_0.22565359281451602"
      },
      "_hasShrinkwrap": false
    },
    "6.1.2": {
      "name": "ava",
      "version": "6.1.2",
      "description": "Node.js test runner that lets you develop with confidence.",
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/avajs/ava.git"
      },
      "homepage": "https://avajs.dev",
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "exports": {
        ".": {
          "import": {
            "types": "./entrypoints/main.d.mts",
            "default": "./entrypoints/main.mjs"
          },
          "require": {
            "types": "./entrypoints/main.d.cts",
            "default": "./entrypoints/main.cjs"
          }
        },
        "./eslint-plugin-helper": "./entrypoints/eslint-plugin-helper.cjs",
        "./plugin": {
          "import": {
            "types": "./entrypoints/plugin.d.mts",
            "default": "./entrypoints/plugin.mjs"
          },
          "require": {
            "types": "./entrypoints/plugin.d.cts",
            "default": "./entrypoints/plugin.cjs"
          }
        },
        "./internal": {
          "types": "./entrypoints/internal.d.mts"
        }
      },
      "type": "module",
      "engines": {
        "node": "^18.18 || ^20.8 || ^21"
      },
      "scripts": {
        "test": "./scripts/test.sh"
      },
      "keywords": [
        "🦄",
        "test",
        "runner",
        "testing",
        "ava",
        "concurrent",
        "parallel",
        "fast",
        "tdd",
        "cli-app",
        "cli",
        "jest",
        "mocha",
        "tape",
        "tap",
        "qunit",
        "jasmine",
        "assert",
        "assertion",
        "promise",
        "promises",
        "async",
        "function",
        "await",
        "generator",
        "generators",
        "yield",
        "observable",
        "observables",
        "unit",
        "snapshot",
        "expect",
        "typescript"
      ],
      "dependencies": {
        "@vercel/nft": "^0.26.2",
        "acorn": "^8.11.3",
        "acorn-walk": "^8.3.2",
        "ansi-styles": "^6.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.1.0",
        "cbor": "^9.0.1",
        "chalk": "^5.3.0",
        "chunkd": "^2.0.1",
        "ci-info": "^4.0.0",
        "ci-parallel-vars": "^1.0.1",
        "cli-truncate": "^4.0.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "emittery": "^1.0.1",
        "figures": "^6.0.1",
        "globby": "^14.0.0",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "memoize": "^10.0.0",
        "ms": "^2.1.3",
        "p-map": "^7.0.1",
        "package-config": "^5.0.0",
        "picomatch": "^3.0.1",
        "plur": "^5.1.0",
        "pretty-ms": "^9.0.0",
        "resolve-cwd": "^3.0.0",
        "stack-utils": "^2.0.6",
        "strip-ansi": "^7.1.0",
        "supertap": "^3.0.1",
        "temp-dir": "^3.0.0",
        "write-file-atomic": "^5.0.1",
        "yargs": "^17.7.2"
      },
      "devDependencies": {
        "@ava/test": "github:avajs/test",
        "@ava/typescript": "^4.1.0",
        "@sindresorhus/tsconfig": "^5.0.0",
        "@types/node": "^20.11.10",
        "ansi-escapes": "^6.2.0",
        "c8": "^9.1.0",
        "execa": "^8.0.1",
        "expect": "^29.7.0",
        "sinon": "^17.0.1",
        "tap": "^18.7.0",
        "tempy": "^3.1.0",
        "tsd": "^0.30.4",
        "typescript": "~5.3.3",
        "xo": "^0.57.0",
        "zen-observable": "^0.10.0"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      },
      "volta": {
        "node": "20.10.0"
      },
      "_id": "ava@6.1.2",
      "gitHead": "5d48c953e5915064adbb9e3222c441833ffdf9fb",
      "types": "./index.d.ts",
      "bugs": {
        "url": "https://github.com/avajs/ava/issues"
      },
      "_nodeVersion": "20.10.0",
      "_npmVersion": "10.2.3",
      "dist": {
        "integrity": "sha512-WcpxJ8yZ7mk9ABTinD0IAjcemovSeVGjuuwZx0JS9johREWFeLTl8UP6wd7l6nmnrWqkKZdwaD71a/ocH4qPKw==",
        "shasum": "fe4f107177b8bf511135827bfcd0a4e6f82d457a",
        "tarball": "https://registry.npmjs.org/ava/-/ava-6.1.2.tgz",
        "fileCount": 75,
        "unpackedSize": 280076,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC+J4MU3wNJgJ2xw2gO95cw8vNSGEiUN6LQn0nq6nNx1gIhAIMxZYCUNMEnYkafMccbQmNfLAw6cA38B+8YA7pjoGO6"
          }
        ]
      },
      "_npmUser": {
        "name": "novemberborn",
        "email": "mark@novemberborn.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "sindresorhus",
          "email": "sindresorhus@gmail.com"
        },
        {
          "name": "novemberborn",
          "email": "mark@novemberborn.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ava_6.1.2_1709153688872_0.48087933650727366"
      },
      "_hasShrinkwrap": false
    }
  },
  "readme": "*[Please support our friend Vadim Demedes and the people in Ukraine.](https://stand-with-ukraine.pp.ua/)*\n\n---\n\n# <img src=\"media/header.png\" title=\"AVA\" alt=\"AVA logo\" width=\"530\">\n\nAVA is a test runner for Node.js with a concise API, detailed error output, embrace of new language features and thread isolation that lets you develop with confidence 🚀\n\nWatch this repository and follow the [Discussions](https://github.com/avajs/ava/discussions) for updates.\n\nRead our [contributing guide](.github/CONTRIBUTING.md) if you're looking to contribute (issues / PRs / etc).\n\n![](media/verbose-reporter.png)\n\n\nTranslations: [Español](https://github.com/avajs/ava-docs/blob/main/es_ES/readme.md), [Français](https://github.com/avajs/ava-docs/blob/main/fr_FR/readme.md), [Italiano](https://github.com/avajs/ava-docs/blob/main/it_IT/readme.md), [日本語](https://github.com/avajs/ava-docs/blob/main/ja_JP/readme.md), [한국어](https://github.com/avajs/ava-docs/blob/main/ko_KR/readme.md), [Português](https://github.com/avajs/ava-docs/blob/main/pt_BR/readme.md), [Русский](https://github.com/avajs/ava-docs/blob/main/ru_RU/readme.md), [简体中文](https://github.com/avajs/ava-docs/blob/main/zh_CN/readme.md)\n\n\n## Why AVA?\n\n- Minimal and fast\n- Simple test syntax\n- Runs tests concurrently\n- Enforces writing atomic tests\n- No implicit globals\n- Includes TypeScript definitions\n- [Magic assert](#magic-assert)\n- [Isolated environment for each test file](./docs/01-writing-tests.md#test-isolation)\n- [Promise support](./docs/01-writing-tests.md#promise-support)\n- [Async function support](./docs/01-writing-tests.md#async-function-support)\n- [Observable support](./docs/01-writing-tests.md#observable-support)\n- [Enhanced assertion messages](./docs/03-assertions.md#enhanced-assertion-messages)\n- [Automatic parallel test runs in CI](#parallel-runs-in-ci)\n- [TAP reporter](./docs/05-command-line.md#tap-reporter)\n\n\n## Usage\n\nTo install and set up AVA, run:\n\n```console\nnpm init ava\n```\n\nYour `package.json` will then look like this (exact version notwithstanding):\n\n```json\n{\n\t\"name\": \"awesome-package\",\n\t\"type\": \"module\",\n\t\"scripts\": {\n\t\t\"test\": \"ava\"\n\t},\n\t\"devDependencies\": {\n\t\t\"ava\": \"^5.0.0\"\n\t}\n}\n```\n\nOr if you prefer using Yarn:\n\n```console\nyarn add ava --dev\n```\n\nAlternatively you can install `ava` manually:\n\n```console\nnpm install --save-dev ava\n```\n\n*Make sure to install AVA locally. AVA cannot be run globally.*\n\nDon't forget to configure the `test` script in your `package.json` as per above.\n\n### Create your test file\n\nCreate a file named `test.js` in the project root directory.\n\n_Note that AVA's documentation assumes you're using ES modules._\n\n```js\nimport test from 'ava';\n\ntest('foo', t => {\n\tt.pass();\n});\n\ntest('bar', async t => {\n\tconst bar = Promise.resolve('bar');\n\tt.is(await bar, 'bar');\n});\n```\n\n### Running your tests\n\n```console\nnpm test\n```\n\nOr with `npx`:\n\n```console\nnpx ava\n```\n\nRun with the `--watch` flag to enable AVA's [watch mode](docs/recipes/watch-mode.md):\n\n```console\nnpx ava --watch\n```\n\n## Supported Node.js versions\n\nAVA supports the latest release of any major version that [is supported by Node.js itself](https://github.com/nodejs/Release#release-schedule). Read more in our [support statement](docs/support-statement.md).\n\n## Highlights\n\n### Magic assert\n\nAVA adds code excerpts and clean diffs for actual and expected values. If values in the assertion are objects or arrays, only a diff is displayed, to remove the noise and focus on the problem. The diff is syntax-highlighted too! If you are comparing strings, both single and multi line, AVA displays a different kind of output, highlighting the added or missing characters.\n\n![](media/magic-assert-combined.png)\n\n### Clean stack traces\n\nAVA automatically removes unrelated lines in stack traces, allowing you to find the source of an error much faster, as seen above.\n\n### Parallel runs in CI\n\nAVA automatically detects whether your CI environment supports parallel builds. Each build will run a subset of all test files, while still making sure all tests get executed. See the [`ci-parallel-vars`](https://www.npmjs.com/package/ci-parallel-vars) package for a list of supported CI environments.\n\n## Documentation\n\nPlease see the [files in the `docs` directory](./docs):\n\n* [Writing tests](./docs/01-writing-tests.md)\n* [Execution context](./docs/02-execution-context.md)\n* [Assertions](./docs/03-assertions.md)\n* [Snapshot testing](./docs/04-snapshot-testing.md)\n* [Command line (CLI)](./docs/05-command-line.md)\n* [Configuration](./docs/06-configuration.md)\n* [Test timeouts](./docs/07-test-timeouts.md)\n\n### Common pitfalls\n\nWe have a growing list of [common pitfalls](docs/08-common-pitfalls.md) you may experience while using AVA. If you encounter any issues you think are common, comment in [this issue](https://github.com/avajs/ava/issues/404).\n\n### Recipes\n\n- [Test setup](docs/recipes/test-setup.md)\n- [TypeScript](docs/recipes/typescript.md)\n- [Shared workers](docs/recipes/shared-workers.md)\n- [Watch mode](docs/recipes/watch-mode.md)\n- [When to use `t.plan()`](docs/recipes/when-to-use-plan.md)\n- [Passing arguments to your test files](docs/recipes/passing-arguments-to-your-test-files.md)\n- [Splitting tests in CI](docs/recipes/splitting-tests-ci.md)\n- [Code coverage](docs/recipes/code-coverage.md)\n- [Endpoint testing](docs/recipes/endpoint-testing.md)\n- [Browser testing](docs/recipes/browser-testing.md)\n- [Testing Vue.js components](docs/recipes/vue.md)\n- [Debugging tests with Chrome DevTools](docs/recipes/debugging-with-chrome-devtools.md)\n- [Debugging tests with VSCode](docs/recipes/debugging-with-vscode.md)\n- [Debugging tests with WebStorm](docs/recipes/debugging-with-webstorm.md)\n- [Isolated MongoDB integration tests](docs/recipes/isolated-mongodb-integration-tests.md)\n- [Testing web apps using Puppeteer](docs/recipes/puppeteer.md)\n- [Testing web apps using Selenium WebDriverJS](docs/recipes/testing-with-selenium-webdriverjs.md)\n\n## FAQ\n\n### How is the name written and pronounced?\n\nAVA, not Ava or ava. Pronounced [`/ˈeɪvə/`](media/pronunciation.m4a?raw=true): Ay (f**a**ce, m**a**de) V (**v**ie, ha**v**e) A (comm**a**, **a**go)\n\n### What is the header background?\n\nIt's the [Andromeda galaxy](https://simple.wikipedia.org/wiki/Andromeda_galaxy).\n\n### What is the difference between concurrency and parallelism?\n\n[Concurrency is not parallelism. It enables parallelism.](https://stackoverflow.com/q/1050222)\n\n## Support\n\n- [GitHub Discussions](https://github.com/avajs/ava/discussions)\n\n## Related\n\n- [eslint-plugin-ava](https://github.com/avajs/eslint-plugin-ava) — Lint rules for AVA tests\n- [@ava/typescript](https://github.com/avajs/typescript) — Test TypeScript projects\n- [@ava/cooperate](https://github.com/avajs/cooperate) — Low-level primitives to enable cooperation between test files\n- [@ava/get-port](https://github.com/avajs/get-port) — Reserve a port while testing\n\n## Links\n\n- [AVA stickers, t-shirts, etc](https://www.redbubble.com/people/sindresorhus/works/30330590-ava-logo)\n- [Awesome list](https://github.com/avajs/awesome-ava)\n- [Do you like AVA? Donate here!](https://opencollective.com/ava)\n- [More…](https://github.com/avajs/awesome-ava)\n\n## Team\n\n[![Mark Wubben](https://github.com/novemberborn.png?size=100)](https://github.com/novemberborn) | [![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://github.com/sindresorhus)\n---|---\n[Mark Wubben](https://novemberborn.net) | [Sindre Sorhus](https://sindresorhus.com)\n\n###### Former\n\n- [Kevin Mårtensson](https://github.com/kevva)\n- [James Talmage](https://github.com/jamestalmage)\n- [Juan Soto](https://github.com/sotojuan)\n- [Jeroen Engels](https://github.com/jfmengels)\n- [Vadim Demedes](https://github.com/vadimdemedes)\n\n\n<div align=\"center\">\n\t<br>\n\t<br>\n\t<br>\n\t<a href=\"https://avajs.dev\">\n\t\t<img src=\"media/logo.svg\" width=\"200\" alt=\"AVA\">\n\t</a>\n\t<br>\n\t<br>\n</div>\n",
  "maintainers": [
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    },
    {
      "name": "novemberborn",
      "email": "mark@novemberborn.net"
    }
  ],
  "time": {
    "modified": "2024-02-28T20:54:49.549Z",
    "created": "2014-07-05T01:26:00.496Z",
    "0.0.1": "2014-07-05T01:26:00.496Z",
    "0.0.2": "2014-07-06T12:17:17.349Z",
    "0.0.3": "2014-07-06T12:20:51.947Z",
    "0.0.4": "2014-08-17T18:35:27.248Z",
    "0.1.0": "2015-08-28T09:22:09.127Z",
    "0.2.0": "2015-09-10T09:56:33.558Z",
    "0.3.0": "2015-10-25T10:17:53.911Z",
    "0.4.0": "2015-11-07T13:07:20.177Z",
    "0.4.1": "2015-11-08T06:19:53.611Z",
    "0.4.2": "2015-11-08T14:44:11.975Z",
    "0.5.0": "2015-11-16T13:04:44.673Z",
    "0.6.0": "2015-11-24T09:41:58.950Z",
    "0.6.1": "2015-11-24T22:33:23.947Z",
    "0.7.0": "2015-11-30T06:41:48.346Z",
    "0.8.0": "2015-12-14T21:25:02.075Z",
    "0.9.0": "2015-12-29T11:58:20.540Z",
    "0.9.1": "2015-12-29T13:36:31.899Z",
    "0.9.2": "2016-01-14T21:56:55.276Z",
    "0.10.0": "2016-01-15T05:30:11.907Z",
    "0.11.0": "2016-01-23T12:33:10.113Z",
    "0.12.0": "2016-02-18T10:18:51.944Z",
    "0.13.0": "2016-03-10T15:35:28.824Z",
    "0.14.0": "2016-04-07T01:56:55.841Z",
    "1.0.0": "2016-04-14T17:31:20.958Z",
    "0.15.0": "2016-05-25T03:41:30.100Z",
    "0.15.1": "2016-05-26T00:43:52.580Z",
    "0.15.2": "2016-06-04T09:06:27.302Z",
    "0.16.0": "2016-08-06T15:10:26.295Z",
    "0.17.0": "2016-11-17T08:52:08.005Z",
    "0.18.0": "2017-02-02T16:24:12.374Z",
    "0.18.1": "2017-02-03T22:53:09.781Z",
    "0.18.2": "2017-02-18T17:14:20.709Z",
    "0.19.0": "2017-04-05T16:32:17.597Z",
    "0.19.1": "2017-04-10T08:33:58.645Z",
    "0.20.0": "2017-06-28T14:04:48.619Z",
    "0.21.0": "2017-07-13T14:25:44.141Z",
    "0.22.0": "2017-08-15T07:37:45.950Z",
    "0.23.0": "2017-10-24T16:07:50.399Z",
    "0.24.0": "2017-11-27T17:45:00.891Z",
    "0.25.0": "2018-01-26T14:27:01.771Z",
    "1.0.0-beta.1": "2018-01-31T18:03:30.192Z",
    "1.0.0-beta.2": "2018-02-14T16:24:07.265Z",
    "1.0.0-beta.3": "2018-02-15T16:41:56.312Z",
    "1.0.0-beta.4": "2018-04-14T15:37:46.289Z",
    "1.0.0-beta.5": "2018-05-31T17:48:45.274Z",
    "1.0.0-beta.5.1": "2018-06-01T07:25:58.701Z",
    "1.0.0-beta.6": "2018-06-14T12:16:00.855Z",
    "1.0.0-beta.7": "2018-08-12T15:42:48.793Z",
    "1.0.0-beta.8": "2018-08-28T21:28:07.532Z",
    "1.0.0-rc.1": "2018-10-14T15:18:35.938Z",
    "1.0.0-rc.2": "2018-11-11T16:42:22.825Z",
    "1.0.1": "2018-12-15T12:58:13.347Z",
    "1.1.0": "2019-01-13T16:52:06.667Z",
    "1.2.0": "2019-01-27T16:54:05.287Z",
    "1.2.1": "2019-02-05T08:56:16.741Z",
    "1.3.0": "2019-03-05T16:17:12.430Z",
    "1.3.1": "2019-03-05T16:35:33.745Z",
    "1.4.0": "2019-03-24T16:39:53.266Z",
    "1.4.1": "2019-03-27T11:25:48.800Z",
    "2.0.0-beta.1": "2019-04-29T13:18:35.533Z",
    "2.0.0-beta.2": "2019-05-19T14:40:21.310Z",
    "2.0.0-rc.1": "2019-05-28T07:00:56.342Z",
    "2.0.0": "2019-06-01T11:56:55.062Z",
    "2.1.0": "2019-06-10T15:28:57.819Z",
    "2.2.0": "2019-07-08T19:49:26.363Z",
    "2.3.0": "2019-08-18T12:13:40.411Z",
    "2.4.0": "2019-09-16T07:11:13.461Z",
    "3.0.0-beta.1": "2020-01-05T16:56:03.660Z",
    "3.0.0-beta.2": "2020-01-12T15:35:56.063Z",
    "3.0.0": "2020-01-19T14:49:17.798Z",
    "3.1.0": "2020-01-26T15:05:22.693Z",
    "3.2.0": "2020-02-02T16:41:51.338Z",
    "3.3.0": "2020-02-09T15:49:53.663Z",
    "3.4.0": "2020-02-23T15:51:18.718Z",
    "3.5.0": "2020-03-01T17:13:48.213Z",
    "3.5.1": "2020-03-22T12:17:51.547Z",
    "3.5.2": "2020-03-30T08:41:51.897Z",
    "3.6.0": "2020-04-05T14:15:16.275Z",
    "3.7.0": "2020-04-13T13:27:43.615Z",
    "3.7.1": "2020-04-19T15:51:58.756Z",
    "3.8.0": "2020-04-26T15:22:38.621Z",
    "3.8.1": "2020-04-27T11:52:50.849Z",
    "3.8.2": "2020-05-08T12:14:10.097Z",
    "3.9.0": "2020-06-14T14:40:05.499Z",
    "3.10.0": "2020-07-05T16:02:27.955Z",
    "3.10.1": "2020-07-07T15:52:32.334Z",
    "3.11.0": "2020-07-27T08:00:58.660Z",
    "3.11.1": "2020-08-03T06:50:52.132Z",
    "3.12.0": "2020-08-23T19:39:14.595Z",
    "3.12.1": "2020-08-24T10:02:04.874Z",
    "3.13.0": "2020-09-27T15:35:27.285Z",
    "3.14.0": "2020-12-07T09:08:53.231Z",
    "3.15.0": "2021-01-01T16:14:49.173Z",
    "4.0.0-alpha.1": "2021-03-21T17:15:19.768Z",
    "4.0.0-alpha.2": "2021-04-06T16:16:35.823Z",
    "4.0.0-rc.1": "2021-11-01T16:55:09.457Z",
    "4.0.0": "2022-01-03T17:49:48.293Z",
    "4.0.1": "2022-01-08T14:14:21.915Z",
    "4.1.0": "2022-03-06T16:00:56.000Z",
    "4.2.0": "2022-04-10T16:53:58.187Z",
    "4.3.0": "2022-06-02T14:37:40.239Z",
    "4.3.1": "2022-07-10T16:25:56.923Z",
    "4.3.2": "2022-08-25T13:04:41.053Z",
    "4.3.3": "2022-08-25T13:21:00.434Z",
    "5.0.0": "2022-09-04T14:58:02.768Z",
    "5.0.1": "2022-09-25T15:09:04.706Z",
    "5.1.0": "2022-11-14T14:10:04.475Z",
    "5.1.1": "2023-01-15T21:00:52.750Z",
    "5.2.0": "2023-02-06T20:41:35.846Z",
    "5.3.0": "2023-05-25T07:01:43.411Z",
    "5.3.1": "2023-06-16T16:41:29.487Z",
    "6.0.0": "2023-12-04T21:31:54.601Z",
    "6.0.1": "2023-12-06T21:19:26.904Z",
    "6.1.0": "2024-01-21T20:03:24.638Z",
    "6.1.1": "2024-01-29T21:06:38.890Z",
    "6.1.2": "2024-02-28T20:54:49.114Z"
  },
  "homepage": "https://avajs.dev",
  "keywords": [
    "🦄",
    "test",
    "runner",
    "testing",
    "ava",
    "concurrent",
    "parallel",
    "fast",
    "tdd",
    "cli-app",
    "cli",
    "jest",
    "mocha",
    "tape",
    "tap",
    "qunit",
    "jasmine",
    "assert",
    "assertion",
    "promise",
    "promises",
    "async",
    "function",
    "await",
    "generator",
    "generators",
    "yield",
    "observable",
    "observables",
    "unit",
    "snapshot",
    "expect",
    "typescript"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/avajs/ava.git"
  },
  "bugs": {
    "url": "https://github.com/avajs/ava/issues"
  },
  "license": "MIT",
  "readmeFilename": "readme.md",
  "users": {
    "285858315": true,
    "samar": true,
    "maxrimue": true,
    "ecowden": true,
    "rsp": true,
    "canercandan": true,
    "jiku": true,
    "monolithed": true,
    "itonyyo": true,
    "max_devjs": true,
    "travm": true,
    "eerne": true,
    "markscripter": true,
    "ubi": true,
    "darlanalves": true,
    "iddar": true,
    "yatsu": true,
    "qmmr": true,
    "abdul": true,
    "hugojosefson": true,
    "novemberborn": true,
    "recursion_excursion": true,
    "shujianbu": true,
    "justgage": true,
    "rnbwd": true,
    "eirikbirkeland": true,
    "arttse": true,
    "preco21": true,
    "markthethomas": true,
    "abhisekp": true,
    "hain": true,
    "shanewholloway": true,
    "shahor": true,
    "meadowcottage": true,
    "freaktechnik": true,
    "rochejul": true,
    "deadcoder0904": true,
    "knoja4": true,
    "langri-sha": true,
    "jerrywu": true,
    "quocnguyen": true,
    "shakakira": true,
    "seangenabe": true,
    "princetoad": true,
    "rmanalan": true,
    "hecto932": true,
    "mrzmmr": true,
    "glebec": true,
    "daizch": true,
    "davidascher": true,
    "gregh": true,
    "erikvold": true,
    "saravntbe": true,
    "axelrindle": true,
    "heartnett": true,
    "sopov": true,
    "ferchoriverar": true,
    "ricardogobbosouza": true,
    "rubiadias": true,
    "sharper": true,
    "kakaman": true,
    "softdev-zeus": true,
    "nicknaso": true,
    "cocorax": true,
    "tangweikun": true,
    "davidnyhuis": true,
    "leejefon": true,
    "gyaresu": true,
    "nickleefly": true,
    "dwqs": true,
    "hitalos": true,
    "clementoh": true,
    "yeming": true,
    "yuya-m": true,
    "sgiant": true,
    "kodekracker": true,
    "tjfwalker": true,
    "ncrosby": true,
    "azusa0127": true,
    "iceriver2": true,
    "cfleschhut": true,
    "adrian.arroyocalle": true,
    "flftfqwxf": true,
    "goliatone": true,
    "luiscauro": true,
    "bsdprojects": true,
    "gggauravgandhi": true,
    "luckyulin": true,
    "danhodkinson": true,
    "stdarg": true,
    "mdedirudianto": true,
    "willwolffmyren": true,
    "olegkorol": true,
    "shuoshubao": true,
    "jherax": true,
    "amiziara": true,
    "app.romanysoft": true,
    "jmiziolek": true,
    "joelyustiz": true,
    "leonzhao": true,
    "hexagon6": true,
    "dozierjack": true,
    "dgmike": true,
    "flumpus-dev": true
  }
}