{
  "_id": "@opentelemetry/api-metrics",
  "_rev": "82-db51de109add705d1325175b25c1f3c8",
  "name": "@opentelemetry/api-metrics",
  "dist-tags": {
    "latest": "0.33.0",
    "canary": "0.25.1-alpha.13",
    "next": "1.0.0"
  },
  "versions": {
    "0.15.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.15.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^0.15.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.0",
        "@types/node": "14.14.12",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "2.0.2",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.12",
        "ts-mocha": "8.0.0",
        "typescript": "3.9.7",
        "webpack": "4.44.2"
      },
      "gitHead": "960b868f5b7686eabbf49190071b8463551e5d8f",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.15.0",
      "_nodeVersion": "14.8.0",
      "_npmVersion": "lerna/3.22.1/node@v14.8.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-leC14QKqusuZxq67suspqfe4Qjj3GEww0X9c964vWvE8zjii4itW8TucaEAC6s4gQ4y8z+arFkvX/dlItRVGoQ==",
        "shasum": "6ad85e786ec73ce78766698afb3f6d0699e5eab1",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.15.0.tgz",
        "fileCount": 57,
        "unpackedSize": 74017,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgCf4OCRA9TVsSAnZWagAA8O4P+wf2M0KvTboHB7eGMMWC\nzfXlA2NF9Z28VLQm2Je+uRJVx2+nQ3DPj5Q044K/kqOrgNHceqW4Rv3iwEnh\nC/q1+rdU7KrUfpW+urI3VuxLv2UIr9nEoL+KCooB+a8CMT2dADSyyQcP/e30\ngY8ZKZe0Y6LIOCV44Ft6HEoYOy2F8EBPobmBMlvNr0e1tbdfHgT+9yYLy/0J\nEHvFtRdeBGMqeX5akjsYLINXNhQczyVKz4eqcX3uXXwvBqR9qKyEgs9WUCCQ\nkd53MdIJIbV8lq/7DDQvJG8k/K9xRxvQD5TI1Jsw7qyQEGAkVv0tZj0YJ9/Y\nQEpTfm8Wq2yFlttsZJDOd/wlGxj6L4gGAzIbFKUA1J6bWPzZu7UlD7EKI3jc\nT59aham/pwbW9ElbC8IEeN2qGMX6kVCblTYt6ybS4Pdzu4F7ThoBN0vRGwRK\naFzlq09kcqxC7ycqSIIEu3RddDovJs9CckYbXFLT1kRxCccUqZ8lEJonjDVc\nntfOYSj1Oa90T2UWMoq729iQVEg9sQbiyskDmOEJrknffzUeuJqjIHcT2n0C\nGJADpIn++HUKGZXdCjDW/BtXY+vK1rOg5Z9YFcJV0dAF8kT/lNdrP5LpoNqP\nwQVsOLAHTNNxLhRJ5K+pAXOBO60wi7ipttNM39Kx33lNVOaXapWOw1M72Nws\nu5hb\r\n=rSVv\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDZ23k3ZnbGZVfK45FGDQainI6Co4d75vttv9ppItEuxAIgHJbRDVAsdwn02wrhMpLZiSLFtIh3viQar45iMDPVKXc="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.15.0_1611267598045_0.8973753879625628"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.16.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.16.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^0.16.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.0",
        "@types/node": "14.14.12",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "2.0.2",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.12",
        "ts-mocha": "8.0.0",
        "typescript": "3.9.7",
        "webpack": "4.44.2"
      },
      "gitHead": "e68863f8e63854b08ad13fb54677294ac6d6b681",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.16.0",
      "_nodeVersion": "12.19.0",
      "_npmVersion": "lerna/3.22.1/node@v12.19.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-Wzq2q+ebXNCYbDg3NCTFK9LrqOGYWwl8t6uWyGPRP+YtD6nrxD20QO1EY5DJ8F4Udw4IWfda/gv9G7FoyCpIyg==",
        "shasum": "c9aae4b2ac1df11ff8671263739b5e1759b43434",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.16.0.tgz",
        "fileCount": 57,
        "unpackedSize": 73844,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgGIGyCRA9TVsSAnZWagAA33wP/RFieN1/o+H3FEJDXoQe\n+VPxgkxbzy9il9XENDQMbSUwdQGOea5v3hyDN2xwOyZBzo6wZvCnXM0OnrsE\nEtJ/M7y23yDvPjrvXnC2z+a1UVIuVJWqcqUCSzhkxCIj4zhwv3IR0K8JgwdC\nLORHIZFOH/W4TpUnWx2uCbMQqU8vGAKOaciFCELAzYRcp9kNxBmO99WstjpF\nEWomu8gk9T19AQC5iixOJZiz6qiZvJuW0/uZkKUdEI1WuuJKgU5rRNKaZYuo\nXKvHld+FZLu55EXiPjyUeb08z8Yoh/S8lyG2CAWqEUAgJeP/rPsOK8te7dVd\n7PecVK2MQQNsHlYM1eSBK/nyecGvMR1mBr7LGDjKxI2Zmt+v3rlPtMdLxMNx\nCEQLbReSj8PVIzW6tEEFeGypSt81hPZ/9r7SeJvAQdANtmH/uDrqH6C3s7K1\nBv1Ao+UG2DDdNufDZn9rulB03GWAXHm66eFT72lZ/FnjdgKjYyxyOq0aMV9N\n8UOTzKYKrCiO11N+K/USRJnOCY1UupOPGoU9S0BknKwPYL5D51DZQqX/DWUH\ntvq0pLDyUBqKGtv6PwFYhDZraYOKJgAetUeN2BjnC+2VzJkHsNbQmy2d7hW9\nGtk+ffiiPLy/v327HPQcxTt0LUU8Fe9LhVkGM79qiX+J/U3bpz70A62ItUh9\n82z3\r\n=fYGO\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHBCMJWVV17TepaPTF6rcR8NqAZAmXvBCg9vn68Z0lWBAiEA/tBACQaXu+u/St7J++PmvdcP9UMc4qeSxMwPNfBrao8="
          }
        ]
      },
      "_npmUser": {
        "name": "obecny",
        "email": "bobecny@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.16.0_1612218802234_0.3607283254608271"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.16.1-alpha.11": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.16.1-alpha.11",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^0.16.1-alpha.11+70a128ff"
      },
      "devDependencies": {
        "@types/mocha": "8.2.0",
        "@types/node": "14.14.12",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.12",
        "ts-mocha": "8.0.0",
        "typescript": "4.1.3",
        "webpack": "4.44.2"
      },
      "gitHead": "70a128ff5dca16060ca7c2cff943369ae9999c34",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.16.1-alpha.11",
      "_nodeVersion": "14.15.4",
      "_npmVersion": "lerna/3.22.1/node@v14.15.4+x64 (linux)",
      "dist": {
        "integrity": "sha512-CTTKAKcaWG3m4hyUSBe1nVU4dz0kuzYP7Av95pXdbCJw3DLqk/2k07wt/Y37ivfeHdsaM1yJI0OMhMGVm75UHA==",
        "shasum": "60f84ae2d9c8992d82ebf68042bfefb9e0237aa8",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.16.1-alpha.11.tgz",
        "fileCount": 57,
        "unpackedSize": 73995,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgIWQsCRA9TVsSAnZWagAA8j4P/jkUvM6fHZ0YdCJXEAdg\nMFP5TNgk6mJafq7sCpxt/3nDGxWREJ3e+fz072c5Xd7N8AqmkC8+YA3Yw+ip\n+vgNxY1EOanjws3E/vwFuV/km6hAzp2Dlu7hVVtkv+zTmbBNJ4+0sXumzuhi\nIwDGxpjTb2M07qjTlyQmHS6yLXdcZbnDftG9qzFQ8RdyfFxusOm4jIIrY2m5\n14AoKnMjJ1+wTLVLtaqPofA0oMqBusEjAgK2rNBUQ7xcf+/icifFxD3ptyii\nqMVsRIKIrEJzwVqgrc48CzUJHQxvZdsagq73Y3neh10yKooK673l6lFgsmhj\nk2XNbwQYDyTUo4fZ1B07GEA9lQK5gOf62/Gk5zhfJNdUJygRFgbhLs8v4Mxw\ntNwOGeuW3gzpxz4KZ7hzG7yo8wOeoiAwS9d2KdnryXafqCQlsZo+E5b63xAD\n8NmFeLrmIEG1OC25CoTI9QQIxP9Uaob7aGiCiieLU2cRMswSnOKwG2CrZ24P\nY6qYBWQqAu7PRIVz+YdALVcbYzomoOWXZ6p0E4ACrLZWclWqDtzb5yVB/hNI\nZZA11ziw1tDAUP4oo4IqJ6J7Wp955fjmuGMaaLzQaPNE9XS0KZ0sJoz50E0h\nB5dqvf5k2o7OyBldEEKMzV1nw47JcO4QJTGxzYuZhnD3aSgnAPRtGsj0N57I\n6H11\r\n=+Hhx\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAQLCnVAhb8ixbIfWJOaixMHHgwMIfwVZbuG3V0poXCYAiEAhZfyQpFUFLFe9ZzURR0FjAWo/G4NaxDENS7BUjzudg4="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.16.1-alpha.11_1612801068146_0.022569480014915877"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.16.1-alpha.14": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.16.1-alpha.14",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^0.16.1-alpha.14+000a8ac0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.0",
        "@types/node": "14.14.12",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.12",
        "ts-mocha": "8.0.0",
        "typescript": "4.1.3",
        "webpack": "4.44.2"
      },
      "gitHead": "000a8ac099a3848a9a3c66f4bdd4826b4cff987a",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.16.1-alpha.14",
      "_nodeVersion": "14.15.4",
      "_npmVersion": "lerna/3.22.1/node@v14.15.4+x64 (linux)",
      "dist": {
        "integrity": "sha512-uEpcgGPTADG0DYSaGoBr31pYAQmb8MlTEVifxvSW6NgMNFhNN6eTpJmn3l3msEC0UeMV5dZIZVuUlUcFstwl0Q==",
        "shasum": "0887b5f9e84ca91ba319f6731524beedc569b564",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.16.1-alpha.14.tgz",
        "fileCount": 57,
        "unpackedSize": 73995,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgJARhCRA9TVsSAnZWagAADkAP/RMdPQWfp8ETZKqADA9K\no6dXypCn+RvFgbOmATUCom2MVZD0boUT7TIKi3v1xl0hTLRpk/Bo7olCIUks\nWvrWybRVF25+rwTRqwat94VneX6FVnW+FH6fkXWJ5HxOx0wtuATJ4DSWH1Cf\nfD4WSPzCSa0cKMUPBzro1Xe+UJCOewKIYZrZ4CcWEPDXmUUuS7DJWM7xKYqZ\nIBVOfvkOJSOy4EHnlr08NzgnuWNpn8Vv4YEjxV3FAghYjQFMs7pFTNefOxdB\n85qnsHseGANgoEwv94oTJhal/uouUGBarbotBoywDrYSlK95iRHv8BLaghpc\ny1bK1PbIWo12hXHilNPnD9HygqpA683eFLiN6FYTHhnoYhNdGB3FSVYlFQjC\n+vKb9/wbrteEDNr8P+EZ1VYZpyzHyFVSJkERy4+g7kKpf2mNC/nOHxy+ZMcu\nIn05sDLZH+jeiecmaYVi0hx+kdVNBQ0hDfVK+T8WkSBWvTy1w1UpW2d6jeO0\nUq4LdNArs1HM8p6el76Dqors8ZnMtsaoi7NyFxOi0PL89cV1crFxcgfT0295\nvC8W/58zmzImww4xJ6EXpKTmVe7wfTMLMwnbYknArQMJDovLI73/Vq2rX2lw\nNWDNISOmJzKAOAXptHMZfhbxFzRVMlK7cQXdc7XiKedcMgbGcgfPC6Dvz9V7\nD67l\r\n=MYNd\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCICQhRGufdxaevZcTjh2/UlLUW3yo5BVI6S+88V7aKOTwAiEAj3VTPHyQEzIobke0Qyqh/UCNdVxd0VZIlDgjm6kwU+4="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.16.1-alpha.14_1612973153182_0.38618654160619714"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.16.1-alpha.15": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.16.1-alpha.15",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^0.16.1-alpha.15+1d682c2f"
      },
      "devDependencies": {
        "@types/mocha": "8.2.0",
        "@types/node": "14.14.12",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.12",
        "ts-mocha": "8.0.0",
        "typescript": "4.1.3",
        "webpack": "4.44.2"
      },
      "gitHead": "1d682c2f75f9d11265cfc1692fa822174594d4b0",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.16.1-alpha.15",
      "_nodeVersion": "14.15.4",
      "_npmVersion": "lerna/3.22.1/node@v14.15.4+x64 (linux)",
      "dist": {
        "integrity": "sha512-r89RY1f5k8GOt1HzENGxVonAMFKU3pDP7THJ9wT8uX5C7jV/uVOlTjf3jh+JsxVXdGZ+MnRGpbMEKcXtQm4mrw==",
        "shasum": "b6a56db59a96a6c8ed5fe1837639a951916e892d",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.16.1-alpha.15.tgz",
        "fileCount": 57,
        "unpackedSize": 73995,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgJFuWCRA9TVsSAnZWagAAECAP/i2pxnztMXqO0azCXL81\nWSBKOlf8hkRQCAVx+koC/d2+n9g054lHHypt3qO9gwMRCg8C3Ljnt//zlJxI\n2APJTwxFeTINZtGtYzuLtL/7QiDEXxz8CBaslTmbnifyyq5LB+wgd1DMO/J0\n0bDFRW3JOgBWgzTkOwl6vMavvlxvoNUaiGkkMTmMPpWu7a/dGNIrOB5Vmhcr\n5ugaJ47X1jVGw4lu0h2zXW0j1quYhwqsJ7/LgkSEn/yLdUd6i3eUu+cOxlz7\nKQHl4IAVxK1X0HXbdgpELSp2/OcydDubCXIBVP/yO7YEVMBQpWAad+Lje63x\ngaJnu45AiPT7Cisbxi7LWVIF9fcXyR/FjaO2L33t2S4XdEnODljb4Q3bzAPD\nHc8vK2KeFXpEFaP6J1hNw3t3R+V3G5P2NUQUHYjHB+bK9lRESraGokS1JxKp\nQRiGGgmKLw+EoSoMmKeUgu3rcEdBn4aDpyI8Cg06XSO59xniktu4NX5MbRtN\nqOkwB2lWhvv82XBC9XM9deL/OHH8pu4F31mJZ2Qh/OLnGyyLxfaar7ez+Laf\nj11crLxhfjXDXKd0EYIbtlxfejp0IPP9PTxOVZpH6RIafYGEov0yYZkzT1O6\npF1G0R9xx8haFI8NMolSUzLYV4NedLlauTjNuXHYANlF7OANHu0QtfZ45yWq\nFGpN\r\n=LvM8\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDXbR4kGo6ZRPWavXbuRd7Vu3QCB3GCMS6+XC+IPVVLuQIgOLPnRfHZIAwnwnt+bV/pUX98F71NZpNel4mBkr9/iM8="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.16.1-alpha.15_1612995477758_0.9200758016973398"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.16.1-alpha.20": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.16.1-alpha.20",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^0.16.1-alpha.20+62f8695d"
      },
      "devDependencies": {
        "@types/mocha": "8.2.0",
        "@types/node": "14.14.12",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.12",
        "ts-mocha": "8.0.0",
        "typescript": "4.1.3",
        "webpack": "4.44.2"
      },
      "gitHead": "62f8695d3fe5309c62418a1043bc6e8a176bc11f",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.16.1-alpha.20",
      "_nodeVersion": "14.15.4",
      "_npmVersion": "lerna/3.22.1/node@v14.15.4+x64 (linux)",
      "dist": {
        "integrity": "sha512-+UOpRRIbz4ZZiM8hU7eLROOgN+G9Iaus3YiCLA7w1oyaO6f9M5tqbHi98SvbY6pbHgQP/QlqcZgbOfA7rNgK8g==",
        "shasum": "012ebb2d5eb532e17e745a95e44eec84eb17f844",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.16.1-alpha.20.tgz",
        "fileCount": 57,
        "unpackedSize": 73818,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgLYHjCRA9TVsSAnZWagAA6LoP/ia5Y7vLQoQRV+Au4V2H\nGCxf14m0YUF3awWAlcfLAzPheI8o/RmwLebK4lmjG57jvPiNafDkknJpvmEr\nAX/OUFiPO9UdDwTDwsTCLMRLVedugTYOGMCYvkJ85V3jfg/jf5gQ8V5YSALW\nJBtMvGbcLsDd+vaVRgJDB7f7nBIA0EzJevoXbC0RPJaVz6dQFA1IQCcgHweo\nxh0quLTeLIlHZYop2xuMG/UN5weQdwi+AuR+XP6fGjR8hRKxLibYj68tAUaz\n7lhEu+LCYWc8spO52OjnuPnbhLg506Qx7xaDIW7QsaDzxmmA0JLE7MV5YitY\nTxWYwSGx9A3MHmJJfDmKyO9sAK6ARJXDhMMUXs6jHhjFWLf0cKbEukROwgSI\n+JrqYDyPiNb3CA22QsIGzsFqoEGCdvI30MQc4hGALyapg35ExQDpOE6jHJC/\nKAiXAjgduhOxmZeSN8sGz2EoTBo/HB+2dZTZD4uvg82KLCcAcBoEdYGUGc1q\nxBKWnCsVmWj0zVQeGSov2oLV4oeIdEp5lP3HE1N9rhC46IP3q6GS9odBbQI+\n/qq6WeDnIEKkok+pVOix+vatXO+JVjErJq+HQwCAHmcwtBboqPctsI9Z4uIP\n2H5Psgx8ow1KVuao2YpeBqeKorm93CROARDSAUgHe0f160yyTzGQV7oReIDt\nTwMD\r\n=Xq/d\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCLX11dms28c2u5VfOUXcLpvnvBlBXzHm82OhMx38ADEwIgJxylqFcQpXcHWd5/lVUIp1m+DadINPxLvdLdrEnz+PU="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.16.1-alpha.20_1613595107343_0.23570468664893274"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.17.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.17.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^0.17.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.0",
        "@types/node": "14.14.12",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.12",
        "ts-mocha": "8.0.0",
        "typescript": "4.1.3",
        "webpack": "4.44.2"
      },
      "gitHead": "a91ea7617f288af632934334d0c8ecece318ce73",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.17.0",
      "_nodeVersion": "14.8.0",
      "_npmVersion": "lerna/3.22.1/node@v14.8.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-DVLuIl15/0tPuy9urqaTt3XnwQkfkohyM6m//EhfEYcMPBz86O9ZhMEBad29gCF7lda4ZiYFJsg/P2FsfHnHow==",
        "shasum": "41bcf8865a263e946c6c0f8f57281c429725478e",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.17.0.tgz",
        "fileCount": 57,
        "unpackedSize": 73782,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgLYeRCRA9TVsSAnZWagAAKP4P/2/0q6vc2cLwx66ignKZ\n/XmNA6etx+ZA9XDvH6NTKtUnoqUSwt030zYUPHYooHlRj+htdpYHlSmtJLdZ\nAfsqBmZjmORp+PAXg3EGvqUwzLBZdK/3HJgNuokv+82TRsJZe2yTRnJm+Anr\ni4Pmo8nLx42ZgGEtrnVAt/s0lms+dRkcgFUNO3DBqebK8/gqgk2R45fzsGs9\nzVOzJaliRWqS/XlxQ6Gd4AqKsa6nTgcNEtIaL6KWuuZK5KvwEK78QVlEREfI\nvciIZ5pRMQfoAt9EVFLF61olWYhrpNQfpKWCMimT5FD4pV9QTjP+cDb2Irj0\nxNW9IA6fxI671VuBmoI41n3lZ/fdj3eRzKGgMMFFMpx35sGLspdKxveWsIl9\nkA6pZCaTdCzVG0/jK6XFvvrJhnPwlzSJxFgYC2A+yoPMpMdywIMxOnR6PiSu\nfzbNdF++N9QuoWrXdZbNJBf8YUDkMK39qPlYXRRdhY8Osh5yMBG0LVLGfstJ\n8bq+LDPtoH7WgUFIr1Y0+pm50CtMSAWnOvs2sA5z7OUCC4kb7bXYQnsD8tHs\nfo+FPse1VYhEFRLk/24PH4uls1RrnfZdbyWVTdyOkXe4BW2wnjV15Kpt1BzD\nEJhEEUwudFW8aH9NvcrSkxjU+0xX5yE1yegpG4Xiob4PA0nF3/XT8lL4yJkE\n/d9r\r\n=UQYr\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCICwOvVZCwyfJ+50IU/WvjBEk1ID4Y7cF8LaexgHWG01wAiEAym3BqZ4PcydibVICJMwh8vWBLVQMTJq1ASuZawVezt4="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.17.0_1613596560808_0.8391993623610292"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.17.1-alpha.21": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.17.1-alpha.21",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^0.17.1-alpha.21+a91ea761"
      },
      "devDependencies": {
        "@types/mocha": "8.2.0",
        "@types/node": "14.14.12",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.12",
        "ts-mocha": "8.0.0",
        "typescript": "4.1.3",
        "webpack": "4.44.2"
      },
      "gitHead": "a91ea7617f288af632934334d0c8ecece318ce73",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.17.1-alpha.21",
      "_nodeVersion": "14.15.4",
      "_npmVersion": "lerna/3.22.1/node@v14.15.4+x64 (linux)",
      "dist": {
        "integrity": "sha512-3mKxqb3tx9YY+DnTs9rhbmcVT+iVh4dJE+IeGHPTkFMQvZJ6GB2oKVuPORxEy9p/yQyq8nEWGnnxWQG8I54EVg==",
        "shasum": "820edb2a5d50f5a08139e518c00732e90078ebbe",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.17.1-alpha.21.tgz",
        "fileCount": 57,
        "unpackedSize": 73818,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgLYe2CRA9TVsSAnZWagAArooP/iwGaOhaBv0V3xBIKkQ5\n9gpG9yk71ggEIgLwI1YcBHMgZMGKinDAqLj8Nhk09z0fOKAEC8RyFYqpJifW\ns8Ia39cVmmM/Zn6dJdQfNSRLTcafrqA029zlOgwyof+q0zdcJVeQ7JYEjCfH\nqRf90TRBVLUOm5BFVInpXqaNnNKmwjxyrFDATOs7yr9sM5WkSB4CF+DEuDDy\nCYZfOAoSVU1xdSq9clDiZ+VM0jrYuhXdpIVlDFxNUejT9+vhEXInL9s4JaoX\nsS2oXYJSO/D3zlrWr+ve9GgHkKe7N32lkTNJVJxzPKX4WVR4Jc1qLC2y3SKl\ngocdThg5aLmdNSirW7p9F97lFUZdtl0Jiu9CjDZnNEDiVS0w9kd+vG8OW0DT\nsKeLbbeyqtFpVS1XkCKD90C84+9rCZRe5AfvtsEyU1X4Il0rbpgR84955W1+\na/GLbyeNPpf74nsXvOTMZdktCqAdYNcGmyC2Oyz1LjFze1ZSDoXhVplZ38Hs\ntLmVaET614+o2tCo5ImiVZiBzms+mO62ko97REJSVzEzs7n6n/7z7KCmDHWr\nHP8ddwD9jydvZKw89O5B+UYRaGfaOl2g5tz1QbbCODJdQoJBWJYaJyfiXhey\nP+WJ5/0UwUmOAoepE1CuvtVyeLdZGT0WcZP0D1AdYAzEL4ZWRBLAs5Yi5y78\nlPIe\r\n=y85Q\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGT1xZ/6cbqXUi92PhtvS9RAq4FAhEBJblzEhW9l7kJKAiAPZhw8StFAM71RjAQM2IsQO+/PqMX6e4XMowKE75dBng=="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.17.1-alpha.21_1613596597902_0.28272861264467153"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.17.1-alpha.5": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.17.1-alpha.5",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^0.17.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.0",
        "@types/node": "14.14.12",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.12",
        "ts-mocha": "8.0.0",
        "typescript": "4.1.3",
        "webpack": "4.44.2"
      },
      "gitHead": "36ae1bd89abc2e2cc7f64e4a35a94d7e75a81d0d",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.17.1-alpha.5",
      "_nodeVersion": "14.15.5",
      "_npmVersion": "lerna/3.22.1/node@v14.15.5+x64 (linux)",
      "dist": {
        "integrity": "sha512-kWCrGYoHJTQ0xAzkUuRM2aXwD/X2Wdi3unwqGM0Z7uFyN9SLo3t6hULRrB0+WV7zHCe4+6gHKnFSYzQVa02nGg==",
        "shasum": "c0a31f023bba500c4be94a43f1f9c88289e8ce23",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.17.1-alpha.5.tgz",
        "fileCount": 57,
        "unpackedSize": 73799,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgNoqdCRA9TVsSAnZWagAArJAQAIzmHmOyJCOMfkg2o4Ns\nCJ7cel6rM5oc75TsqW8MkVjmTrKKY5ZiCAMroXIqns4394BHT2n/hVZ5MXWJ\nO75jq0fxSEYFN3Ym/IB+guBw0ANDDYhSaJ5iO4OqRkrKiyRS4/X8q/8TNla2\nUwo6j0y0EY7FT+2zb7tO5YDLQht3JxyGpnhLUR19vcjES/+e/nC0pnaytfnQ\n927zXoF2z30YcIHbVIn7QZoKbI4Tngc09Pm/p/RoKbDpKzOGB1YV5jkSwyQ0\n5wjhYmbcIiwdmJlAMbqaw4AB3rfzu0eK7TA4UVHxD6TtQ7JtRFQWOHcaK7it\nxpbouXGpiICGYN3WDFvcNHGFDre1wSoXyH/9lg5YaVOpPbPHn25IEp9fQrBK\nHgy0cDn+g1yjrzPpkMTSrXOHrdkQtP+uqe87oC1Fq0WkWo8VUTXEi0bDcdYE\nGaJdHxqEwWAIj8Loxh3swFAen/Nsh/a99PF8Q+b0PcgbK+wwQjU+OGRVFEN0\nKAaD+F2yvd11rYS7Gqdw9XV3hhV2tTQSJ0ZiaTQiF5BD2SgXosVNBwqHE7Xs\nH1WLhFD6cyxVv/B9yF/ol/B97Dk+7kH6qwvEoviAG2SUycS+vqpsIY+VD57U\nMTG5yY5ZrJHtSupQ2S6m/+DnC7swk/eNUTCVwQmWwCm/xhMK0khfri2t+CRv\naEbH\r\n=nAoA\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIChwIjb+//w9WckTWkbRvyauQlVUH6jU6gSET5VLOHZtAiEA+kxmil5mg7e88sw9kTgQwWEUAso5+6YK6HEaHTfYzmg="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.17.1-alpha.5_1614187165455_0.4785977208153054"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.17.1-alpha.8": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.17.1-alpha.8",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^0.18.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.0",
        "@types/node": "14.14.12",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.12",
        "ts-mocha": "8.0.0",
        "typescript": "4.1.3",
        "webpack": "4.44.2"
      },
      "gitHead": "67f7e70a3de005484d3e110b06f6bbee75b6f8a6",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.17.1-alpha.8",
      "_nodeVersion": "14.15.5",
      "_npmVersion": "lerna/3.22.1/node@v14.15.5+x64 (linux)",
      "dist": {
        "integrity": "sha512-o1NFXwtHf+WMavRkKqzgBIJmY7F3R9N2uafUOzI7115oLy2O3o8Vqi4yDZ2KHwnes956VKLwpBXNc9XKm8LOHQ==",
        "shasum": "6fdb93cb048117b1c7cdbbf6e35cdf407c9c42fc",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.17.1-alpha.8.tgz",
        "fileCount": 57,
        "unpackedSize": 73799,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgPO4yCRA9TVsSAnZWagAA+UMP+QHZ4MtXcUbSOQEqY2VT\nCGBo8+uU+wUQG0uxJ7AkhrCzLl3u6lRILsBcdnR224ZZG/JRLHHtHDiwS1uB\nU2pdYRAkmiJLdJ43v3C2bMFd/LF1GHcHQ5XUBPFqiG7o3aQcGk7ugN9lExgy\nMYCS7Bls71z+SFre18vNRgUQRrix3lk1d8k0Hf9JkPDrvzHDBFH+iKL4ntr5\nmm2l+I4EIYrW/jQwgK/ECQ32J4vlWoLrDmyLJTESsqcnRAdEYg/RgiFtI2m8\n3eZuDvkWZlmsVd0E8hLdgCr2QnNNvSLLTFdj1BgJCJHZ6OVaZASEH0I0ahdm\n8oXa1Yxlior4nniBfkYkb5WReGFYpUujA0SATJVyPO3952zOERfDAZYY9d4g\n9+oFuz4hlAJOi6Zw9s54/hP8RMbLjQ6Dl7VwuQsCIZvg9Y8VcyPiQeijhyPZ\nbyBTOEUN47jHvNIn2UUPCWOxoxRx+4pUJDHJ4gtPS9yqtxgOD1xhNb5Zhtbg\nkiaw/yMVeP36BpAcljTniv4BMlFRgpCJ8pdh/IBtTiUEH4tAKmunPKw7TBEx\n5c1Kasg4m9guo3JAH4Z1YfUSifc7+GE0epOByHLXc+ZMpCy+cqVvvcuzNs3+\nutsP79iVmQXvGCZB32jafBdmJGEbg3EBpVqrCr/CE6rh41ZkhoQqikwHxngE\n7vSP\r\n=Pj7o\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDaheDn0YBf5pu9b+a/c8oYyoBouJx9pwzMGlgq5Jwc6QIgSU6/HKVwvJvjWQLR91iBvuHlFC5BAjEXiwLCfnOSMfA="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.17.1-alpha.8_1614605874148_0.7734831863891347"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.18.1-alpha.12": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.18.1-alpha.12",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^0.18.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.0",
        "@types/node": "14.14.12",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.12",
        "ts-mocha": "8.0.0",
        "typescript": "4.1.3",
        "webpack": "4.44.2"
      },
      "gitHead": "6540b54a8bd49746e164ab730269188237f89b1c",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.18.1-alpha.12",
      "_nodeVersion": "14.15.5",
      "_npmVersion": "lerna/3.22.1/node@v14.15.5+x64 (linux)",
      "dist": {
        "integrity": "sha512-nPKkeD48Pla/oB3LPdHXR79LQrk3qBqMy59fou3NIRNarj6Ui6HdHMU/6pHiQOH87xtmh5jm2aaY7ttXIqC5Yw==",
        "shasum": "1ad8841bcdcb06692d376f582e9d27e4c1e9d380",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.18.1-alpha.12.tgz",
        "fileCount": 57,
        "unpackedSize": 73800,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgPkNjCRA9TVsSAnZWagAAqIcP/1QiHTJm/YHMW8dNmQkC\nQ1eW4d/o6HseZffMvw4ugpgObneAHWKsiG0SNDu82zlitk8pwTe9sVHmOeSt\nMhj1ER5uC+JxPz1YQSEMnB2A6sVTbeWEKFJSk0+ibJ/wc/7F0b+3v6pmWnn/\nQqdIIEDG7AyhhQL1h4r3LhvT+4qkEkG3EwuSBioLR/hRWP8VKGte/qv1n2WU\nTr9lyNM4fgjXaJXGAhsKs/UDtd4IbHLUuEBXFO2r2zJfskr/m7iDy6sLVNwq\nFxUxPv+v8CyNYPyP4bmZFAh2eKzezicPylWME09PqSPE4QuyAPSgCzytZMMt\nn33palN0tDHu+nMHuCFnqSyo7QYw0Jfno68v/nnG4TNbXD0suf/CYk0vs0IX\nUrfUtd0wElDt/xhE+XLeIVJDDtyVtxo8X9l0tfLoxHFHGuZT5jbuN8v2+iBf\nXbTFBC0Px9OT6XbT9YuAaNCNpAcxRg5ipTST5/CaMRTEF4JMncqZFRmkUDkk\nK/CZfFJAu+JO4fbGb3QEJtYTi4mNv9zYbAAIBhrOuEyxjDdcFXEQ3SBjwcok\nc0YiGPS7IQjyGgNwUpP0zNTxw9TB/omF20TCps3PfeXxtJYUCRzTzwWaqG+A\nBPoAW2Lfh9TFCynNZeXNxcF6UDfsqDP3fMyzRJfot91EwxQ7q8JfgzwEanfQ\nfEQ2\r\n=WCxl\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCUAmtIWOLhQp1c+5T4XO7TD5d1d9h9vY/sJ+FrlLu37AIhAL0bHj9RG8nvdItciPE0Dzi9gBBY+lfHcj77u9qUfYdJ"
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.18.1-alpha.12_1614693219262_0.01723941748794733"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.18.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.18.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^0.18.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.0",
        "@types/node": "14.14.12",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.12",
        "ts-mocha": "8.0.0",
        "typescript": "4.1.3",
        "webpack": "4.44.2"
      },
      "gitHead": "6540b54a8bd49746e164ab730269188237f89b1c",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.18.0",
      "_nodeVersion": "14.8.0",
      "_npmVersion": "lerna/3.22.1/node@v14.8.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-5MGIP1Bb97yiRBLeHdfgDaMnoKE5+IOhUvE3FGRqiTMjun0cDt35gY4k5+w5pmqpcHFkt0/ih25YTKjF0tJLHg==",
        "shasum": "347b3efc5b34d5ee2565df99300b97c064043daa",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.18.0.tgz",
        "fileCount": 57,
        "unpackedSize": 73782,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgPkUaCRA9TVsSAnZWagAAutgP/jesvGlbAHMyyKacBTq6\nMcK3SxkV+fJFVRU1Wbqty2TTpUgYSTOdH6C0X7cdScAgbapkuKHGqs42o+wM\nIfdR3wVi7pRdB9wnyr2BBbiRgNB6Elkr1TGrlT1FOBsDvG/XAhlfe5LXz5JG\nWKd5/NJbMr9IaXPW4U/E83/iGYzNdD5dQDBNGC1gjaeDGGsgbOOeKKNCM8PL\n1Xn124DQetPpkrxXDJyLE95SMSaXHQP+UICLO+DsKzJD8uFlQNQSf/XaHj1m\nPZ48YGVxQE7ZhRpSRnKxvGaJVY2N21H0SbEmz4YhCadBlFrQx2aOpS85sv/s\nuS6/OblZI7oovUGoGpL33AR+CIdzDlcAE82b2nopZve9XjJwbkhXZPUjEPXN\n8bxJ3FrwuOnKax/wnL3KQsWSVZIgzi43vsAcj9iQP7FRQyIAb9HB2b7z44NK\n3nQkuR0P34TfHfrlQ7q0iglU/g3V6+pB4+o0rVyf/WXGz0fzdHY1SjcatJUT\ngdmxjcpMh9HRRPt51gFPnRV4o9yXaezIJkRO6L3Zrkg3vqw2D9ccF7GJ5dLW\ngGESecjJ41OhdeO3AeaLo5fIeda6B4bmWTR+GdubyLGJ+guM18HaB/WTO8O6\nkTDzY1bcTek8pgulNASrYfcRcyv9dWNNJsfULfF+i7K1hcNm24tbblwHlY55\nh+8v\r\n=njQj\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAmIFlMiEjLfkzq0CtABr5zJjtD0hMFIPjyDAfG316pQAiEA4ziACaGh04ChUf9j3HHLL5OojnOZ7EQuKJ1ULQfb37I="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.18.0_1614693658119_0.3528044078612924"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.18.1-alpha.20": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.18.1-alpha.20",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^0.18.1"
      },
      "devDependencies": {
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.35",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.18",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.3",
        "webpack": "4.46.0"
      },
      "gitHead": "24bcfe82340e02e605c5c722b0f955da50bf82cf",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.18.1-alpha.20",
      "_nodeVersion": "14.16.0",
      "_npmVersion": "lerna/3.22.1/node@v14.16.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-tDDCfU2fSDqEpIyUt41SrOgRj+xFtYy5FIdyY1UWM2v694DU7a6IEY61wKT9bd5NYEDGoYsN5WnoNWVetKJaqw==",
        "shasum": "18872f21761c5b48eeab20f26983e59039412f92",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.18.1-alpha.20.tgz",
        "fileCount": 57,
        "unpackedSize": 73971,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgWzpOCRA9TVsSAnZWagAAzy4P/01PnWQUsnZ6PwFRPKI5\nrskIxbGmUEmb/8oVD0jqmQkbTGPcOhej1G7W/Jou3VWPcnSE0hOZmxnFO4wS\n/3XK5C74XBp24InxbNGxGrWOnaPiWU7n/4+4wuOSRSVQ4yGeeVUmlcyA5itT\nWu5UDZV/he9nDKjInXCHIEZxx4/GGfRXZl99oOOSJ2RGBJjLjRYrn+oK1UWU\naqhZsTI/BDL0I2veZALhBbybmleMAhUAL2GNz25P+d4bQQlqiFj2URJpqN9r\ndRBFLjSV407nJBl3s6eolS085xBy7bCdzSk79xTE3FCbdK3OgplDILo/1wgt\nYmisR41HVoZeanXFdKPFa05cROucrL34tPCTUpx5tgdj7P1R6bDXUcuFlFXO\nc9ReeYrSXnMd2N1zyfSBJIvB7CYsnQenioTjinF8vll2Dni53Ze6kBWjuahS\nmGagEnFu4b8S+PooV8I+/P2NPXQ4U2i2yPtUNHJRUxgzJPAO7hyHPt9wy8Qy\nhW3bpAtWFnCA+iTgxwzMt+3btVUhhllijqsVknsjRqgscwV/TsOlFLptC3RL\nUXVjZVttxsP3kq9nEn1GUMeDKm1aRTWZ5fxRBPYDeTsCSo/Z7isXR6uaStyh\nASVpCqouleU/88XRnO8nbwlywngQKHaMB5vTuwQ6QJDRwXDtDj/kafUhV3fK\ncMhP\r\n=XTzg\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQD7bgCjCeJE/WaBJZmjiuCQQsWAwvfA8ZwonyT6erfP8gIgdB14uQC20i3zNb+i7wG9trlWXHmlNY0LR6Iuvft2NRc="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.18.1-alpha.20_1616591437725_0.19635786777079733"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.18.1-alpha.21": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.18.1-alpha.21",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.35",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.18",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.3",
        "webpack": "4.46.0"
      },
      "gitHead": "8010ac2fcd0c658c0a4184cb0f5d8108db3632e5",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.18.1-alpha.21",
      "_nodeVersion": "14.16.0",
      "_npmVersion": "lerna/3.22.1/node@v14.16.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-/YEP2qMcdC6e8BWiJmPD+eRc4UHgDpswmfs/5tYI+98+pfz7HeM0vJyUaM1tKSfhh+um+8jCBJvFn+lxpSx29w==",
        "shasum": "1e70b848a0bd16901601cf918433975f6d4ec86f",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.18.1-alpha.21.tgz",
        "fileCount": 57,
        "unpackedSize": 73975,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgW0jQCRA9TVsSAnZWagAAcd4P/0QrIV2O0ySDDnpe6GaO\nJMyOsHwY+Z2rjvQHZVkVwWs7OJSiAfMkWXsYugFsADzt0fpYQsHn3NrELNW+\nCHkoASpgMWS3nvfvH698ORjcujs8nJnoLK3ZqYn2vUunhAnlgAKZPr7Tm5MI\nzuXPciN7MUVB23EoADQm9Hjzgx+ozJVzWWaOZA/sGXhXgC6xj7Ztpt+Rl2WN\nq43LVvTVnD2ZjKvc8IphEBRrSM1TA2bGqsGG6G0wkPd86CSggZn4Mbnxb5ac\nQ42/b3btWq7wickPwXlpuusZI4lrXjfU3JA+pQPgiK1DH1bBKOzFzkg3SAzv\nWmeKsNHW3Qiuxb1PlSNAetnLbdt5KRTSYC3poJKNwLI7tAjkXyEHW2G9O8Ct\nme3C+7TZ+eSKGuhvy/w9Nd4muZCors+Sjrb6ZEyc2yy2CDXk0yTSjTN9tb2R\n2J5yWathlfMTuPk07ZuJ3EguTsFAIEts+DpKaTPRp5k965Si7Xr1vAWBq31i\nfeKKhwCfTLGfUhjuWirq1/dR6sx49Flj47SDa0wLpii2wstJbp+lhcCH4tXf\nLF8QDUk+gSe2zwQEiwBImYl7EV/Q36GdpXROceKCUYcLV22fn725QfZousYh\nxT1uq5JObrq/0MX7vAGAUVwSzJ7YqBdhQw/N8Mbq1efOplQsoQ5B+ZqBONXe\nh9jC\r\n=6SYk\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICSREClkNoXhIXOOE0Z3FMgrOtVAvaIDL/Fs0HLp89bIAiA7tIJwmZsypBbI0hucOk1qK3Ma/pK2ibBu7rxgSJYaww=="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.18.1-alpha.21_1616595151946_0.3795729425481993"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.18.1-alpha.24": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.18.1-alpha.24",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.35",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.18",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.3",
        "webpack": "4.46.0"
      },
      "gitHead": "69f2d3c264497bfdefa2126d0865ca56ad5f22a3",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.18.1-alpha.24",
      "_nodeVersion": "14.16.0",
      "_npmVersion": "lerna/3.22.1/node@v14.16.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-xxxL9s551+XWXcyEMdnmYdrB5lGOkZDRjAIHT6ezIlgKIBPDYFW/qsSz4Fpme3bces6jmnRs3Yv4326vR1xueg==",
        "shasum": "8b3da8f852216a97f1af6f8438568cd7df3023a7",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.18.1-alpha.24.tgz",
        "fileCount": 57,
        "unpackedSize": 74030,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgW5UtCRA9TVsSAnZWagAAei0P/3nctkZojvnaxjxObncg\nOkPbiiXthp9gJA05PWs7vnjtmhJtqAJb3sTJalU6PAWIvUwYv7UUe+Yrh5HN\njoMxmpf+TyAehV1EkLmLH45py8BlKg2IYgAIRoJaxCfebrhWp0BwyJPz8gFo\nfowvAdDycB5XquyLTRBs6aUikxeE0hRuGtBZ5Bq/IBTPo3BTz7ATbbNKVIMR\n0svuwjm+PdYovkAKuRVqL8j4pE/70eFhAv1kCM+GmMh2ELmiV6hLIQOSZJgU\ngVabmOYYyCkekGNHMJTqd75HmxfWI834zHFlkinKUTQZqnxbn2FuNhTuXplp\n0ojZUNyYVnZ5SUhWEXwv4iFulzpHnmLD2jZvJC4S72kmJwyf6Oyq9sakfO5J\nFZeWts3+zjHAetFl9ocK0uwHV3HgiuGf0uLFuL7HEO4UwBZYf50Z2Kndh7Cu\nY3kWJZ8gSaXvl4xG2c7N9IUirzZZjStuwQDz50lCdSGbzU1wAtcxS1yy7laG\nn9nuIFMsgeeL1lJARBkMHAbKqBMtVnGUH+SmorNweTpqddbEAgwIRJksTA4K\ncyeEXHUP9+KbnlG7enJ8eFrXDNxgjqfdKA95FlEFA4vWI4Q8EOboVisxWJyl\n2TierV5s1BPrzybjnan/H5tnS1xYBdXJbt+mkqwgmKi5+/5ULHBhyCVm5g0L\nru7i\r\n=36sk\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDjlxOPRMWMJwKCMygL+Cx/t40SyCBYBZF92WuO3W3OGQIgEHvld3VllYb9APDUw3SX43l5rzXq28qdAlFYaaDPGt4="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.18.1-alpha.24_1616614700577_0.38047827764131625"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.18.2-alpha.81": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.18.2-alpha.81",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.35",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.18",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.3",
        "webpack": "4.46.0"
      },
      "gitHead": "e369035cd228a5c8781069a99322c5b938061d20",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.18.2-alpha.81",
      "_nodeVersion": "14.16.0",
      "_npmVersion": "lerna/3.22.1/node@v14.16.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-aUgZpg9RaxRwZke9ShDudGFxHPjpJGHzVlEbxVUekpUSBqxPnowm03UqyNjUr0+pSHkasdSZ6mOLEGNr2QoaMQ==",
        "shasum": "6ed8c3a57f3620d56551aa76e0e1f9967e7a8d3a",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.18.2-alpha.81.tgz",
        "fileCount": 57,
        "unpackedSize": 74030,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgYi/JCRA9TVsSAnZWagAAsGQP+wQayAiQwcam0s6WDo90\nVPvwxRHk4Vb7wAFaXRoPX+wDBPSTePB5l6snb9YBwSyXJ4R21EO1QzJ0nIaU\nfzxr3b1C9HjLdH0S/q9qUdy0hVpa9x4+R3bHforqJW3tcevdyDXdEqaMBMah\n8PiGyQUAfxUe8IRubdjEz4obvEaosNcA6OURB8SjI0JWKjmUC9vSkwqThu2+\n85uF3Md3maNH1svcyUfYHJ7TL48U2B9eiUfhBeIgFF78aFKLyiLfH+9/weyF\nCjYwlEKBqOiMVtz+Im3D75UMDTIiTO8ZIfE0R1W7lMrF77vt0uGNTlUrwZPy\n25BJTyz87vVnwTD+Ed2GRw+d86r8ublDHTAjIgE/aaJpM60/aGdLW1NFYh80\n/PN4hfk+hBbv9IyNXlHJnGXRveMELT1YONaQpzgwI9/yEOC/J1ai8jDnK7y2\nz9pZhPmYCZ99grnE7deAYlaeIBJlLJjnDym0xSo/TRgfI+qAiKXjxC2v1+t1\nQti/eyocr974TJG+XCWUpiEMHL7Yb0faT3YZ6aUB6e9HJEUkTOh2Ys4L0DVm\n8JUlwhGqkSBe3pq60sJkN8kWM6B7JqsT6RQ3UmhHFb9eklTmJBvFG3b8OlDk\nLeo6SsSN2jcszHF6E3ZMFrNhGyR1+whW6zBmzE89RBE1n4BtWEttNKoPKMua\nxwGn\r\n=8nQO\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQC37TEpKRZsReox8rAtTOqCLDx/E3r3G3VCvUpLH8F69wIgdOQFggKFfk3ieW5CkZSeWJL5HGUsKsKhyHQTtdDKt3s="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.18.2-alpha.81_1617047496818_0.8901866309754805"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.18.1": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.18.1",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.35",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.18",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.3",
        "webpack": "4.46.0"
      },
      "gitHead": "e369035cd228a5c8781069a99322c5b938061d20",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.18.1",
      "_nodeVersion": "14.8.0",
      "_npmVersion": "lerna/3.22.1/node@v14.8.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-zuGLE9lwMzq+F0RG+W8A1EixBWpBpftD6f53M6T9XOwqcEtgsMcrfiLBd7qz7CgmjrEM1D8zZKwuft610N+FOw==",
        "shasum": "aa5e0c1e1d68abfb0a82f4840bec34f0dbe1cdce",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.18.1.tgz",
        "fileCount": 57,
        "unpackedSize": 74012,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgYjKnCRA9TVsSAnZWagAAvzIP/2/u2uGzrjkscZLf42D9\nPVH+NVUn8OHsJvG0C3hkGihpeEFHVOZpd1OEZCVh/DnA0woeE+WVx5n9M1bC\nAbTDcwcJiXNOTuuz60dOL2aNoBCayXV7HK3iEx1/RSCU2ShioQoGHiEk1qcI\n+WZEcY+EH1d6Lwruv81iavIkfjKL5wqk5HVSUTV0g4gTT99zzr+uaFw1EeFI\nZ+33lt9RJmmUrZ2oW5Z4G7hSFgWvdboNGbh7gVGRwKDNxA7jIVa37ZWUfQZG\nCjKMS9q5Clq1bsFhPETjHeBHrhf6S54OOiVpECklO5iDwFO1nSYQmemtB/Zu\nN3PeT+VpKL5MU6/8PmRPnIZPp5Lozc/5FJM3A6gtYeq4/QVukMzkQgl+NJk2\nuKgmHPBdYia+FJrEYU8NR/vijWYpUF7J7G3EQAO4TqnGLsQh7fewH/KLjsqP\ns6eTWRoUQuBcGUqruaUTwTk8di4rBwPJEhu1vpEDCOESMqcrT29BPOvYALxk\nKzgoh5wxfZKVdx/cNjozlguCvxt5MU018J5lDlxN7RxvCHMiVVV894Ctz4BL\npGDEOTZcAfv/PU4do947ef38sWEBDXiEa5P+jrJuC7bGYA/aYnbAYFMCOGyz\nbwL78a1VJoMZQL7Pyv3fIHv9m86usjbdMRzICRaxyYra4Fmv+Me2TqaPczg1\nRxOj\r\n=f8uy\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDir4Z3vkC6Gg+Gg+cT7WUqgyy/15KZtllJBjM7JZV2cAiEAnkw13oEVryUoYG1YY2UGNs/BhxlHRY9rvzZLTkd/Fak="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.18.1_1617048231225_0.8986792762236042"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.18.2-alpha.1": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.18.2-alpha.1",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^0.18.1"
      },
      "devDependencies": {
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.35",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.18",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.3",
        "webpack": "4.46.0"
      },
      "gitHead": "54857c012414c05bc83b4a8da224492c98abfd46",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.18.2-alpha.1",
      "_nodeVersion": "14.16.0",
      "_npmVersion": "lerna/3.22.1/node@v14.16.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-Nekgaehgfll410HiatDdXQyFQzuF4FRza1j1quM1dlBY9w64AXIFhhVN9W6rxYHhp0Hhlm/eyidEJ4OC5di5ZA==",
        "shasum": "68263f9b09ea69f6dc9cbf08f99029231656c1e8",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.18.2-alpha.1.tgz",
        "fileCount": 57,
        "unpackedSize": 74025,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgYyIwCRA9TVsSAnZWagAA4wUP/Ro3pP4vLRfd7oMoYsSe\nKY4AMWk0L5YW76AaTf+xDVRVUVBjcIzmGGhm7GfC0X++cE83IhCPzZblbG9o\nwcwxBAfTbz0M85ls7iRWh6HmP9T1k+a6Ix3xfAstlYkWuWQXVLeZQnxYsu6/\nZJhE34lNrOVobdnkj3HE3N4Mc8tGljSWlXqKq6f4QOjo33phKAwVA9B+Nf8L\nsKufxnsNs9AkaQjsbkLan4JOJQhIDRnKua5odQfs20GF48DYdwL1zoCKZ9Ll\nHbukKsGC79fca3IPvrSWwBdyyQ7cc8ov3tVcwPKXvwjmTjTbnD5AdIldmvo/\nsIq/is6zknuGEBy2m8Ewd51mrpgl3LxNwPAun6ThJ3Fiwb7gas4XALqxMfTr\nJUNDTtlGLnUVg/LuNAWf1duhGfeROJaYzdpesn5P6sHAStcDmwPIBK6yrzzh\n5dvDmD01JEjSvpInYec3xTojEk/Zkv4Kvo9NA96mXQaGLd9q/AzIxMW/Y/c2\nwu3l3nwZBLTnoPRCdQ5Kw823zMv7/xcpTUnF8ErvF9OGxq/5y74Chy5Me+nv\nfl+dYMULlmUu0pCoz95XRCq/CL4sVMQPrlrXhb6YXuE7jw6xf0QFFJsb7fo8\n4UwGO3lMz1qiQWRFN0+/YkZOIcrcqeSe507Pw2PJ8Hzqfm1egov1JCq9c9A9\njO+U\r\n=Dhu/\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCpzby4g3H7imUvEfXqi86dlcpnl4swh8ZVuw/15eDziQIgWNdnPy1cxfS62CqwxrCjxBXLlcHeS94AI0sOzXCRuEo="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.18.2-alpha.1_1617109551631_0.6143284471988029"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.18.3-alpha.2": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.18.3-alpha.2",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^0.18.1"
      },
      "devDependencies": {
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.35",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.18",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.3",
        "webpack": "4.46.0"
      },
      "gitHead": "2409f1cdddd92c23548c18c055a6a36efe36349f",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.18.3-alpha.2",
      "_nodeVersion": "14.16.0",
      "_npmVersion": "lerna/3.22.1/node@v14.16.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-uEvkxYEEVoJaruXpcrAePZtZBS8OSnzQfWl/aSjS6ordccsYfbeNo7I7tRp+PzEbk3D878O0wmQ606A2OPzEsA==",
        "shasum": "b32c07b50dbb4b9a07ea1878bb1af681c91acb5a",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.18.3-alpha.2.tgz",
        "fileCount": 57,
        "unpackedSize": 74025,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgY0M4CRA9TVsSAnZWagAAw0sQAJ6r39iKm2k3/Q8XkFS+\nIg26MVCTp1JT7tOv+6cOK/6JDqPoErd2Cex/GzjmLyaoCFllTjSsH7mWcZEp\nOrRiR+Oe3l+DIebgE9jvatsaURMSrrJ2AnLl46e1G1ZeMhi4TMKwgfcWG1l9\ntmllgTpUWXgZ4IlZ5s8cDYm0Mkk3i8WM5i9YxvxipVhrzcheq2jTQOnetGo2\n6wTla/LbNr1xqGK1bxJ7PYxFd4WxXXwx7jcUnEr5mIq1SO27TbQYjFR7qC63\nUhVJjobMRMo6eTRAh+tAjcyst2n5o83KTuObn8/St8F9xU8Z8pkFLTNBu07D\nELqyRltl9XYxkmkQ1BPVyTtpA80TsC6xqKZ1tp4b4Xgn4B/MY7b+A1pPyAEj\nzJDvMk42hGsQhpMNggTsd/NcCDLSclJ4F5JnKfdRI/+pUpayq2/fAl56++Jt\nO6YJcQ/TwImFtIF3LZnrYM2WUeiw0g89qhT+Lfh4CaIMf/TZ7PHP+DcK1w4/\ntPXk9Ny7fCq1fQ5wkqXZ9DmrYOw31F4SZV0ITnWw1943ib6hKVxFTOJZtg26\nJIanEBIPVyeVwGtNdnkl7I59C5IGzfIEU4/k297p3ChvrNRzkLc1ftSOybgH\nvoDFrU0OoJObs4VoZnFskrRQfHXbpI64nrjQ0xvCHw8C1YIS/TBBlaxe+Hps\nzj0i\r\n=HXuu\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIClBiZE0WhImADW+7KeVZ15wnbp242+nGP6595tdISleAiAYsjZoQqxeEeqVKVVd+NiZ4SlkQCnzxFA+eIv3PsQP/g=="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.18.3-alpha.2_1617118008414_0.06313990764612054"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.18.2": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.18.2",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^0.18.1"
      },
      "devDependencies": {
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.35",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.0.18",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.3",
        "webpack": "4.46.0"
      },
      "gitHead": "2409f1cdddd92c23548c18c055a6a36efe36349f",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.18.2",
      "_nodeVersion": "14.8.0",
      "_npmVersion": "lerna/3.22.1/node@v14.8.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-yoC1Bg3GRAf2xXAVsE6Wf54rs351XO694PsnvWGRXITJQq84yLru7Qq12w6w3N5TTyGzW6oZtqXpGWe5Im/dNQ==",
        "shasum": "12ad987cb785e142508e6df3772b8908f2edd8de",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.18.2.tgz",
        "fileCount": 57,
        "unpackedSize": 74008,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgY06tCRA9TVsSAnZWagAA4iYQAIYEsDLNf5ZcZrILPiAJ\nulHMiOmyP+ywjNZTTJlxNbJpmgIzCfmiJaoiObQDHvnfcBSWPlCA1/yec6Dj\nWX3jyRJcgWayYsnsGnFlzKAXW2m6juU5oQRuTpikYRY2+AspRJI6XK0wITuI\nTkXJWZ3gHcKKhmgTi7LE9FsfB9q5KBfcekWTWz9oJBXBbsylS7K7100lFNJX\n+P2I9K8Z0Khrb4mifFGn2N0vgh1Sa8RaCZYZeRw9DyoODV2VB2DkrIpHzOR2\nGjuJ4FBahx6GD8BGhAF5P1Brp5BkxwJP0Lr62XiHLSdQ+PkwuGeG7OX5lKQL\nduIloW8SNZarm+YlZeHQoq+wT9HjnLx6crTbaEvfvF3EGTz9pMUVRff/DJSi\nI7jx6ihUPn5au0g0WGic8uz1RuPLsIrlFapPSbotx9RZXc+2SKZx1JT9lRxY\nVqnibU/BLG31gbBMmI7C8ezTsx6CehZlCwKVhpWVSzSh2bKqR53zd0B+FuvM\nznrf5fxOobl5Ht7GhGx34b/oeMZqvrGjyVpd4nbz4AFYXbkMXbFpPel1fcun\njy9IF4cYEQ/B3tAbM/Q2Bd0h+na7F8rbCB+XqLKeaG7LU4hsX7qvUGT+bf4y\n4XLNQtsxOmxxAJ9v+Mzq4D51kcsXepp3rtWHNaAZVqhClYzI1r3Ahpk6kfnz\ngqJj\r\n=KUs1\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGVCgoNtymCFVgizruZSC1J0DyWJPu7MZZ9zhis9ii0NAiEArSfqjjYEd0bakTEM6vxJg5XpRYGwF/O7H3CSRHVUTUE="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.18.2_1617120941131_0.037023698079218015"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.18.3-alpha.1": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.18.3-alpha.1",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^0.18.1"
      },
      "devDependencies": {
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.37",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.1.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.3",
        "webpack": "4.46.0"
      },
      "gitHead": "cabf8630cf2e295ac2e7e5f44d6efd1ae911cbe4",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.18.3-alpha.1",
      "_nodeVersion": "14.16.0",
      "_npmVersion": "lerna/3.22.1/node@v14.16.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-98BytX22bS7BfruXcTWuyk3oBYaA5erNZujFc4N6nN8+6IcM9JhNp2T6YWiowD7uHv/U7+iBKSnbHSCRnXU5zw==",
        "shasum": "027932445281a5f96de3c8da11c6427490b7358f",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.18.3-alpha.1.tgz",
        "fileCount": 57,
        "unpackedSize": 74024,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgY1/sCRA9TVsSAnZWagAAzccP/RnqTx30fbd7pmSlOs43\nQ3QOouSVCfdkVLYnAZZ+TVLOe84TP8tXZqe6MGYdbaveA9hKUImGv0zMoQmu\nCzveevLvm3c0/07BPgxzxsZAdtZSdNoaI9lzyDmHbJ0LGmNOW2RqXxq9urJj\nmu0nrKs60XFpU+ofXj2OvpoZeLCEL6qjnMzr20WBvJXm16WY3xl6dDvOUZI2\niyqbg6vDz+DQtDup3PTFavE9vt1v2RCr+Y7VnrR/Vq99fTzezx8Zx4l1BsXY\nLvQzlnbjKIXKnhbv36FWzfPG9DazBjnZC66u+ti817wSmCWbOWaC14FsAu4g\nZ664Tp9AZJAj8spIf9O7y8WVuQpXKZ8zDbqSY1L8WJk/Sah4/uv4L1nf7RoN\nfHhsqwveVhvtNmnDRDZIXuG8MDykE1FXLgHoNeLiXNI8uKHDAghMJU3zOgg/\nRyE16Q3zzKXsR9eJfzyHnaDnG8DiYfd3WaBhh8v7Cjq9+HKxWne0FoTcbhT3\nUxjYD6DXQOJovKQv54bcVA9CwTnui5yAZxa54qtZFQ+kBqjOSlso+6lignkL\nNmGP++f+IkwSe+oxOdeoSQT7nCAwtEBQbBHKOPdgpojF4GrAyglA3CN5IoHC\nxz0Q4A42XhzVmUrpfT9gDD37GbZAv95Dz4kOcJQ6/he15PfdKm3Z04tk9bs6\nqBGP\r\n=lWjw\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCycQV2hxpVwQQbu6Avxxfq2DaEDgW58ly4gLb1NYMMCAIgK+HwE/V62IMo9AcvP55+IElmHajhNPupbJglJrae0yY="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.18.3-alpha.1_1617125356253_0.3364519672542998"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.18.3-alpha.4": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.18.3-alpha.4",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.37",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.1.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.3",
        "webpack": "4.46.0"
      },
      "gitHead": "02175dfafde72898d7ab40d8078b0e1b6576e82a",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.18.3-alpha.4",
      "_nodeVersion": "14.16.0",
      "_npmVersion": "lerna/3.22.1/node@v14.16.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-5hE0XQjuce3DK/45ssGpvWq4g5cVePb4osEbUIFjymtrHdHuKjollJ5dE4gA/J25Yj7SGDmaHnLfoy3MrB0d5A==",
        "shasum": "878e2680a6c65b15e1340dc6744804691b2355bc",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.18.3-alpha.4.tgz",
        "fileCount": 57,
        "unpackedSize": 74028,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgazzOCRA9TVsSAnZWagAAuGgP/17ckQk5mmu8UnpFAQJo\nqHoyn8r5SfQw+4p2r0i9j3DZ5CbfyrTBcVQXh7soZ9dg3XIR0fioSf6HZiCB\nCQ5VbguALXl3L/96zJyeBTUhV0Ywst5GTOGHTqD9OcF0ChFTg4BwRgkK6/N1\nCOsynRcSB/cNn5jk7/Kl2NZSj4sYpsHbp06R/wl/7rhXVFKu4FZ1lmP8D43r\n7yPvagGJ1thlLxyTPkcKjzhab3GvxgYHFoLrt1rkynwZe2cGMF0bTzOkcH0B\nAivLxjqmd0goaxh7fub9GPuwPPsjXbZ0G31JLuEd6eTWpn9LeDfthICveFzV\n+OCSGsJfVDhqA5y3bseMdQtdKPCkOMPZC/0k3hu8Q/p0vU7BsDyW2jakKHBK\nemO4TPV/iQlA2CBY8nVXYKdXC5JbBZSPgInenjWUUkNnJtca/Qwy+rQF9XhY\nQpZHRcRcRG2yIdhjAso3zPCU8NMHAdrXAg/Y+CdeZISyUl8TxJcx9hma0hag\ngxE7Aq7yA352CUmQ3SCSIP1OjGcY2MsUR0qBWRSfO9B/S4hyriY2e9p/VPge\nwJOx6WZFbMqlGVBdJnULdh2uBXOmRAgPNr0IxPM8qRqgK1F/pcsLY5Z2f2Gh\n/WTK3SsA01ARGUupwSLHPth+ZsfoZjFubFr80wZqpHqTGlVoweNYkbqGuIBg\n5CYx\r\n=AoJK\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDMBKsmMgFabekLXX4/r2iPvPGI7kvwD1PlUQFeB+wPQAiEA3hqrK+1IQlNnOrzP0e8PpNnF0Q1YOrBiN3P8h6f+8Io="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.18.3-alpha.4_1617640653571_0.1691523387601781"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.18.3-alpha.5": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.18.3-alpha.5",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.37",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.1.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.3",
        "webpack": "4.46.0"
      },
      "gitHead": "8e2e2a9653bdb648849a0ac64df55cbe3ff0c503",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.18.3-alpha.5",
      "_nodeVersion": "14.16.0",
      "_npmVersion": "lerna/3.22.1/node@v14.16.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-3xMqzVguj/PuiyhkeIbTV1p2Ol43JntbeGXEPXm3LmVPVoBAE99Ich67OdpSzaVv9eWz5jWU6rsxjRVvYONiJQ==",
        "shasum": "9c344782dfe278b4e2d9aa7d5e3aafa8b3200b2d",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.18.3-alpha.5.tgz",
        "fileCount": 57,
        "unpackedSize": 74073,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJga06/CRA9TVsSAnZWagAAUR8P/RqjeGUmNTRFY65roBK+\nwVWut1PTFWnMh1qnaJlY1JFszg9sbruzYgAPOv+PDJrQMPJITonPLPM0zqIL\n0C3FBZkh/DaJyZyH2ukmMmUbHf9nZtmRVjtw9Mls02SRJ+Rp5TLci6yqp1iE\nW5Cqme5nfqHUx0kB5BwPkmSLOSWwfDpJsmoW7QkzxJoqaHUEmS2152g2HGfp\nr10uO/D0lU0DqP/SpWhEG0J/sckegIqDene+D1OToH6FvPSs8szjV3thfKur\nDsqJ72ZIjO8mnRrD0DrPP1SDpLMcf2+R/P2wf2EV3quhNboOHA1iQSmnnv7o\nWUDY3Fe2Kn9U8zDpEwyqv2IznL51u8n5TprcyqmjZteIMHMs16222Bdeb3fV\nrHfnhjTOlsVUcOivCvOCT/CmcDnK273qAgQXlxbXd4Ra1hf0XAl3p3GWl6w9\nwh+0CL+FGsWTKUND6KdKekAGfCeJQz1boq0OiAtRsZehH59+u3Q887HtTIBv\nO9XUVcIDScVHq3x+I6edT/zyBKmq3bFcdFMZupCl+BBpJ0mdZ4jhwKbhvS58\np33unDYBs3rz985U0dpFt9uBR7+baR0ytrNvR1OexOHqW3OXERT3Zy+pRMFe\ncDqV2Hmv/3jfDcvGGL0aG15gTsnlIuIcN4xKpFLam4hH8XRgWikmZf9QrMZ5\ncmZB\r\n=YpJN\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCICuIUjgRrQycP8bVqkf+DSQu+BZpwNYQO5Om+dRczrGkAiEAolbeXIxr1DIfyTwqiDJ+aS61hADSR/RmGbWh2RkQ230="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.18.3-alpha.5_1617645247317_0.2514399752017349"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.18.3-alpha.7": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.18.3-alpha.7",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.37",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "5.0.0",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.1.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.3",
        "webpack": "4.46.0"
      },
      "gitHead": "897c35f497363ee3f3ea4c1e5ad1628e09ec9041",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.18.3-alpha.7",
      "_nodeVersion": "14.16.0",
      "_npmVersion": "lerna/3.22.1/node@v14.16.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-NQia5/xQ0/2ok09HDDRrMyKKnidExhAy4L6XkdtfX6VAh7tiyyAXjrNCvu/W9JUL0hh/XXYrFgo4DQEl+7O/yQ==",
        "shasum": "53a0cd8de0c387cec9a7c7e7542f2b9b0fadf340",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.18.3-alpha.7.tgz",
        "fileCount": 57,
        "unpackedSize": 74073,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgbdnWCRA9TVsSAnZWagAAA5gQAIpoPw2X3tCkYyaPEDwr\noD4jFIVyKNx8nCsWqioz29BgT4ft9xI8D1KaZTgWtTGkjdZNqOlDmijtBPDF\ni801nE/NpCKBoOQARUexegYkMBsT+q++DwY+thJg9YyX2m1VMzwOTXLhAHqN\n9fI9B1PetyMQeDfv38vEGFVoljsVQm35Moh37Qt93izCkZPXfvCHTLsQZ798\niAr6mzmqmtsHFUdYEivJeBwte8S7cyZzpoyBgY4Dkz94EOQkh2g2w5qO3DAH\n0hRnmkfSCaQCxc95CVPA+C8BSS95lh73WQBA/99B9biyXAjQHpAdN0z0MRvN\neKJaaSQOYI7sZgcSMybQ+njN9/8yEl0wP5zimjISQk9463+qCTYjtC5kwnEl\nGmBbCLTakHe9n2VgPnretBe9C/0nmY9/FQV+LfqnC6WBGsIeKbQmpVIYBmmj\nw7wTSYAXX2k/TNQS0/GE7V0QeEUOTGfJSYmgDw4aj/X1SZJhb0R4a5LW55ya\nyPaZr34AUc+O2McxT16We98JVx/A1+bzqiAKksPpeLFqL1VrSQZ0RMIW/dFL\noNlQbtkjTXihqnNGaDLCb6G/rlB63tn4WG0N0wmuR+ahvEP725sexzEPxNSF\nqAfmorSRHB84DhXc9qLcQiDyaDXtljgSrvNm1+6Wk6uFbyzc8ODKMsGVaOkg\n4CHN\r\n=gR19\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCJmdp9iQ+WTnuvxYhI36gL4UjKIu8Lc4C5e8XZkTbAhQIhALSXXUlA91v9lZtWkdnaY+qPxQlV31zBaqeaq67ovnSh"
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.18.3-alpha.7_1617811926075_0.8037492947980915"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.18.3-alpha.25": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.18.3-alpha.25",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.37",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "5.0.0",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.1.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.4",
        "webpack": "4.46.0"
      },
      "gitHead": "4ef22cae74b9c976f969151ebcc3ae3d931cf9c6",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.18.3-alpha.25",
      "_nodeVersion": "14.16.0",
      "_npmVersion": "lerna/3.22.1/node@v14.16.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-QurI1KjTqU763lSpNKw8S7biPudsph+2oQM6OKw+hk8wZjDsRzR3TIqggHm5aSjm5+17iJDMG/TyVyNrBhPtHA==",
        "shasum": "fadd57a84a0fdd81de5deed9ed1489e8c40b658e",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.18.3-alpha.25.tgz",
        "fileCount": 57,
        "unpackedSize": 74074,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgdKKXCRA9TVsSAnZWagAAViIP/1JkOGDXKPpsRZsugewE\nsnxENCVlJlwd6i9qTKIjv8HtMJmDdPcG8yHaq8ac+TE1f/2WvAgyEzUdP9qZ\nsceXDjX6b/b98I1mkJaQcImha/3ZSfBB7LJoCdv+zLTO4EePvC4Ln5mzD3F6\nu1rez8yw0MpeMh09vc7MPj/vvpxlQTlY2v14GKxCXKtUn7h6hGWjajM2zIbI\ngY7bR1Dkv7l7kxm8PMRMRZ1vdYvygfx21mmmkt6O7meJS6oQPfzYRXx2Fjh8\nXY50LZWBeRQJYh8ZHOpiBmvD+H8Apprfc96qxSfZD7UpxlkyQQDftZuic0Vg\nKBSsmg9B7yzq/0Xfkdts7nnD7gBHci+OFbf2RG0qoXMoCG+0/wf2oXXel6KY\n1Z46V6IiWJC2uG5nFaxu/lYDkNzh/mIvnwT+2sK5mc4sGwHKoBpYZyIxBrxU\niEuyQakTTjqicMBHOMd1hE1o49i72F7o8M8IBIoqT1+CtU1H1tHhZuDzyafv\nWr5h1AHLKeGys+QMo07SGLGnm+ma0zFIrwFATOkH4CCk9NiXLzp8UBvX71Cu\nUABvlJSuGs8o+0G5lfTWQHt5R7rcRprJfDYqR5MdV3ZAcqhqe+eQe9V+kmcV\ntKFLXWlXPRfIfOnUXTOiqU1O52GMrvLhCPHVGR8bTSUg86lT04WPf1EzDcGK\nlDKb\r\n=YBxd\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCaOcbiwTry9977sBpShYfhmbeEqlt8MxQi9CGI7l1YUQIgGLK82VuwV81i5An0Fp8vVUSrYxKroqy/jdSNt5MLhg4="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.18.3-alpha.25_1618256534785_0.3465322481687909"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.19.1-alpha.36": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.19.1-alpha.36",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.37",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "5.0.0",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.1.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.4",
        "webpack": "4.46.0"
      },
      "gitHead": "0c15999dccd377294a03cf7d36085216d6e8c5c1",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.19.1-alpha.36",
      "_nodeVersion": "14.16.1",
      "_npmVersion": "lerna/3.22.1/node@v14.16.1+x64 (linux)",
      "dist": {
        "integrity": "sha512-Fi8NAp3reln3bOEQHVyzYYB4CTgMvhdeon4SMkm+EbTgC5rLGDYFc8nWTnbQHH3/+rocYNCKFYKR2pSaXOE+Ow==",
        "shasum": "dd3d41edce3500fa508f5cbd314665c000450863",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.19.1-alpha.36.tgz",
        "fileCount": 57,
        "unpackedSize": 74074,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJggWnVCRA9TVsSAnZWagAA0okP+wfjTAsJuicW6qVrvr31\nft0O5B/Ykqh1JaCTDkxw8zV6xTy5UUJPz4gSg7fWGMVyLVJkQ+VJepVm1aqx\nOB1ItvL8xq4P1RgRGL0IfWfy+3R3WvqwQzEAIYAMoIYyiK1209AOGP5yB4S4\n8eIXmSgBzSPqXIAU3uOsE2SlxscUYlR7OEDQEEdGzypGfu+j6/yTemWdA1rt\nT/53ca71XYl6Jp6qZGRtInpjKmFvgCGJ09l0ClnbS6OeEknwncE6mR9cMdeu\nYoU/XCr5yUEMrpxpCqg7luyvTL7BfnK5gCvv5nWct1kdM/DITAGnORCpur4p\ndybdEyJADfKmUt3CbDmRE/y7ODeeg/TyOKIgo1UrmHp1n0E6Jsa+M6JxnRCs\nkLpLgjq63oXCmdTVMq3Mt4NwRwCE/eHcwaMbTjAjpavF5TO5SwENGWb3yGNx\nuLzhDmdhHwLietyzkiKVjzZzUe21f+7ewiO6X93nuq2VbTMqJ+Gmi6P3GCwk\nYa95M+m/JmoQPWjY236KntsVekCAnRJO0gEMDaaV69zBHAzHeCgXVEDAvOjT\nE5X3sXM/RnarrDncAAggaJZ1JVqxJMeWtV+0KLiWwBt6fTNd/MyRmCrxv1r8\nyUBAIE8b8w3aAx/d/8m0F7WzBGE2HwWjCGqkiSwY0xAY0TM9U6LddpR5s3gz\nWoDE\r\n=D8js\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFpzJ73G5x+KhHY6mcx2BTsGUYF0NIqcdkxc1H1s9u2TAiEAw6f3a+kE1BXY1J9cgmNP7JhB5PsJr/jr/9oZDuC6a7I="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.19.1-alpha.36_1619093972561_0.5421259513917804"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.19.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.19.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.37",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "5.0.0",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.1.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.4",
        "webpack": "4.46.0"
      },
      "gitHead": "0c15999dccd377294a03cf7d36085216d6e8c5c1",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.19.0",
      "_nodeVersion": "14.8.0",
      "_npmVersion": "lerna/3.22.1/node@v14.8.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-1JpnkwCkYgZvbcHkF0nNK6RkMqoEx7zxM3oyMEkFNT7F4nh4tFMDHJ+BRelMk8kzeYtnyZ0YCshhO9xS3SXSHQ==",
        "shasum": "3b5944ce86f4551cbff1afdc1d064adf18a2db68",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.19.0.tgz",
        "fileCount": 57,
        "unpackedSize": 74056,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJggWv5CRA9TVsSAnZWagAAi44P/0F7JD1Q2VS+w0N4OKkC\n+rsV2ZUgmT3tXaYEc4jatAPxP+2Wc8zxv406aYga6Esy66hQ/OTw0IgVp7P6\nSVFCJXDQXXb5KntcfcViUSGwF+WzP9eNGJE7pbsXOrA8sf+cSkBYkuW+oOiE\nAY83Oa4GmTktS92BcbV0Kt0iDww4oSrYsNEpNPBcdR/9Fs/wxjWF2n3gL/+D\nbTJE1rMPmBqMu2a0Xvephsar7FW1CDBFht6JGAChRFtUiKBuafmDSUgadmr8\nlyLTsdFT/NdluNoxgaUWtPPBJr63qGMNfyzr/DlMVZXuyb5D9x2tlxmSQM17\nTs/qFkcYcPFFghQIe14VLA6e/9jP2mLwTb0vAfUnjjU/Rbq4nCyJk4JfbyJa\nnE/j5jz03KiJ7+8ZbFdKZYJ12qt6KwBzSddGsdq7mU2tQbemDG68DiQKdsKE\n1WuuUwYJfrqj+v+B7ILyJe6qsugkKb4Fo/stu14MDDoXcCCYWd3W0eEX2EIa\nQDfRvL1mqHuGh+5HgkRzxDUDZ9dByyZX1a5ogijR2O6CdhNNGFwE99sjkXOO\n/qnuz5aTNirBGvnaOhNkcGO97XfN8VVVYmCdFYJ8gtQB6/qr9eezkghYUzti\n4D5UUfHLN/jNqL5myLzv+N79jqxpg7dgDL7zpnc87en6BPE7rgGzCWXo85Wp\n7+ar\r\n=0aGp\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGnmolPW5DTpgyTwMqgwv7i/3JroPoerY25iHd14LBexAiBHV9R8aKg3MteUWD3YljyAQWogwI+d8rdZD54OfmLlVQ=="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.19.0_1619094520735_0.7141463296194757"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.19.1-alpha.37": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.19.1-alpha.37",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build",
        "clean": "tsc --build --clean",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.41",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "5.0.0",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.1.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.4",
        "webpack": "4.46.0"
      },
      "gitHead": "a0385c45376a86d396cb364feda2b4afebd836d1",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.19.1-alpha.37",
      "_nodeVersion": "14.16.1",
      "_npmVersion": "lerna/3.22.1/node@v14.16.1+x64 (linux)",
      "dist": {
        "integrity": "sha512-EFWZX6jTG6qiHZBRLxukCVPzrahw0bKOSfcCX/H5IWK7kiU6DHDG0iRqpEEj0vLiDlwmBDULLkiE/6oxaDuvqw==",
        "shasum": "a5d5c79c1fb19f47a60f347fa849e065e3c6cbd6",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.19.1-alpha.37.tgz",
        "fileCount": 57,
        "unpackedSize": 74074,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJggb1KCRA9TVsSAnZWagAAYE4P/Rnp+SggItWvT9FV99RA\nOQeve5jRq8uaWSGZ2IO5U9WJIBOyCxykm9EUZJGPmaFOSA8JSWeRpc00GkPB\np9AY+B4UbESTZgmPv0F/74fjJ2trsiYa6MBbs8HM7wRxRsMQNPU4vt7MuXcW\nsd80zODeokC9cjRbNJPJeAVzSz48uFtu7J/HNOKV5DbZDRFZ8wDdAHZchBVJ\nqtaBx4Pf+bzvSFIlPzv5Nbcm9oJ+AP2X9phnqS4/HvgDSLI2q05exJW2I69k\nAqBXVgKCz5UR65RzHrIz8cIowKyhrCa7zzIc4wORYYqvIdsY1nZjHhFr8JH/\n9I+5vCwdWbf+chq1OryeeHQqF2alMy3ouKJVu3/x+M5InMYE1wT11En+aU14\nIgsgNKBAxBF9h7suo1yPuiEydvd6x2j8Ui2joJrU7poKSB775a+7bEAUL8dG\n9gVR3fUY9F7i7jB0f16U3czvl/EVYziLYgtGg1ZLxP/IDSiwEv/k5oAqK86M\nDThyxyHCz/qLY8vdDZDk9FokAMX38mJppX/WKtIC30KtjqlOErCA6yqxXniC\nayvueJ5EWx/m8kQikl7tUlsDlo08YFk4VFoxMtXhcZJ22b+x8TNRAvFZXI9f\nBTQg3XvJLjTvYzy5OKPZcEDMOzc/YWhf4yhQD5ziubYS4r1n/0j+JU1bW3Va\ni472\r\n=Bu8D\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDj9SYVLEfxLOBneXbVRm3SVQyQAKjP24kYI30qx67uWgIgW34meDbQL8oGcRkmK5zz4qC7+jweGmlhbrQ6ICqeXwE="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.19.1-alpha.37_1619115338290_0.4109524934272073"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.19.1-alpha.39": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.19.1-alpha.39",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.41",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "5.0.0",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.1.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.4",
        "webpack": "4.46.0"
      },
      "gitHead": "23ba4bfdc77c8bf594bf0c817320a31f59ca0bd4",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.19.1-alpha.39",
      "_nodeVersion": "14.16.1",
      "_npmVersion": "lerna/3.22.1/node@v14.16.1+x64 (linux)",
      "dist": {
        "integrity": "sha512-RE3dl3cuju5YHo9wXN6VzwTlDfoTn21xaPBKxLXhW1+kQP8WZTuZNpiztJWvohI7Y1pdiAeDoBr+JVcIZxUf0A==",
        "shasum": "257ac6604062b7834163bed7eb6c99afa530914b",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.19.1-alpha.39.tgz",
        "fileCount": 111,
        "unpackedSize": 123883,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJggcQiCRA9TVsSAnZWagAAwL0P/jIn1JffIQdtaKWxBudu\n8IH8c5rnS+ai2VObbFHhpTyC0+43fTqCAUJprBi4ntWjTZiT4chqv0C7XNzE\ni9h8RBfF2e3Z5+TlCrkhcg8TJEzVlhZUAPwBxmGT4LodT1GwCc03g0iqyFOG\nogYglZUHRStLJ04hCnbnAdI2IwyTMrwotYs566m5DiPBdZoiFnfDpG+C8Iad\n8yCMmpryxjRA6qLWntsC4CuDqfkjIckWQMmSg/aNSzAU3F9rYWwkaQPwWTuC\n/X8naQUupTCESFjpNYkjxTGSctjNrh6X4LQoeFXu097hgeWoAr25uzLaXT/5\nUFPWaJr6Y7xYDvzxCGU8WcT6W8OxgvT9U8EGi7W0RCTHy5xe9zXWSItFyPkN\nsY6MzmQfVRvAIeqbyD2KspRU7ZKM1x6inP/wyzJqvpyAC9N44c/FS7/hh4PO\nXhfiXpv8RzwU5xKn13Hqy27o/PlA2uLV+Pf9NCN8DYRpm013bgLTMvPIevai\nXGXSyN6RzlSdQlrVQgE0DXZCkS+3pML+1ciXLttPWnaotfJB8BAFtxpZnXvr\n86R2rDBToO6VxO99H2I0Pa8m8UuawJrbLlbfZ+ayv1qIFvShky4bcCp1O5Xe\nqCiABJdNz+xUwgxbsAwTG3PgmZmzA6W65+bVYvq6XFa7GycIsjf+4vhrTKiB\n0Ifm\r\n=RsxW\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBBpivO9Es/Yj8ENxhfgquQ0XPFTxO9MsYj3eX5Wwd3iAiEAy2seeGNgYM8ZEIE8XKD+2hQHIORbGMJq4bcjwjIgupE="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.19.1-alpha.39_1619117089603_0.7601930278913676"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.19.1-alpha.42": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.19.1-alpha.42",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.41",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "5.0.0",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.1.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.4",
        "webpack": "4.46.0"
      },
      "gitHead": "b9c842613c4439435f1644c8c8e288d1fd0e384c",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.19.1-alpha.42",
      "_nodeVersion": "14.16.1",
      "_npmVersion": "lerna/3.22.1/node@v14.16.1+x64 (linux)",
      "dist": {
        "integrity": "sha512-vHS1hVOSMu9+rBrbq69UNQI3fmKpub3Xd/+1XjmYggS3l06RAWqj3O8M/QRMt+iAKNP/pBKJYnMSoh9Fbkwixw==",
        "shasum": "026f394d30acb9e4f7f4363af1665a2f3395723c",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.19.1-alpha.42.tgz",
        "fileCount": 111,
        "unpackedSize": 125997,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJghw3UCRA9TVsSAnZWagAAfskP/16vs7lHhhdJxTpeBZCm\nn62KQpbCGzmxQBj0uKXg9G//KFX+QHvXkGBm2in9I9A53tUan9DKqQRCcL7u\niSt0Q4GiuI/GVYKVsoPZPCdGILawExy/nZZwBj9CLm655ALuYY8pLUth0HN+\nOY0MZghUAWJf3XzYAkJckLf0PT53cLjndI3srIm9mdjyNmWdUNZEsjHtkcRA\nUmeBG6q1M5I1rPFUu2CGGoRbiunfgLyufEX0nc2J4aeaeCm0xl0XIgKdSLAH\nqk3cuvGLv9+yGmEE/wqRa3a/pfNF33kLq10Z045Qlb6YrmTSodkRACxDcyKD\nut1UyrqXWk9qMJ2belOrv1xocEM7weFk8cohEZaNw2kioFN3q5rHzG63wBeJ\nbCz4t4vDnYX5MdPruINcavVapm0waBLt3Dc+eTRQWKc60jAPJdFUmE+SsgKy\nxm2wuPVCmOxE1J3sYzi+IP+88vjkS5AYvxVDA1jQWFs1nCbvn0YpOCJk7zcO\n0NbYdKz+aybviKmyQYTW1Ljan5y1xMtQEiVDU/rSgQHX1NYIsxuk9nZi7SqA\nllVQHjC/aHImSYEfl44gfeL4debMp2PEJvOGKxEvuQN47omGHlw2JZyfUZ9+\ntI+U0AIJBcvyRdRvNsaGc+9lgr13g3dMHOB3gbftDze64WozF4D2pVXx+Ijq\nKpHb\r\n=tdiq\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQD0Biwe7bGaYC5960jJuw500CZNic6K8uXCqMeVfEIxgQIgAPqQqFWcsRmH6QQqM19AjdwDHGjS4sqfe+w9D//li1Y="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.19.1-alpha.42_1619463635923_0.7833756717189593"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.19.1-alpha.11": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.19.1-alpha.11",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.43",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "gts": "3.1.0",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "5.0.0",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.2.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.4",
        "webpack": "4.46.0"
      },
      "gitHead": "2afcc7c90d93bac4fa9180f4fd312ed01370b2b5",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.19.1-alpha.11",
      "_nodeVersion": "14.16.1",
      "_npmVersion": "lerna/3.22.1/node@v14.16.1+x64 (linux)",
      "dist": {
        "integrity": "sha512-FZZ6w91umcf6sK6jcxw+3XZ2U+4+MYp95cO1qO4z+dBSf09jT/UEo1koQcKsql3AvJvrtcMgNChGc6/nENZZKQ==",
        "shasum": "5b2f0d474948c043d279b86aa33d36239a9b7489",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.19.1-alpha.11.tgz",
        "fileCount": 111,
        "unpackedSize": 125997,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgix/tCRA9TVsSAnZWagAAAmcP/0IgFs94AbaayUK775fm\nSI4q2enkUJZRbg9srpvI+COxuLF3uAIqbyFSIZC0LHInQRajOiRnINRB3Og5\n+QQ1VUHP+C7icSMEOJnP2I/ztfzS/YL7LZKHLHvXuJUaATtV/Fc72zmNEHKg\nkrrxYAHUmbwRXJa5N4442G8FYkhge5Zsqk+uOxU6++GDfMar1KF2r5Y22HH2\nTKJBOgWFvcFqvyN/M6LODhtBPR+xYa1Zlwb97oY0Vxxz2KlVMYkpYxiKRuBU\n4mv90XW1O+ngQqYXXE+XD3m3r2lyp6+lYKdZeSPo4deHX0Izc1SEdBa1PfPX\nVWSCIJIyTVRYoWT4zqOPDIfVIK8af4JXhAOgQFcLts6FjMFqMU3S2HvlVqdr\nkjNBNCb0XjOJjaHWAUo/52Gu34J7CVd5knyBwFTDqcn+TbIg1h2l2eUTSwlw\noQDo2wyIpgo5um89dO46i5ewRJxzCpvcpIfoaeYLgx8jvi//p4QcKzUhGw0m\nY/HlSiKsC9GMCAbwx2nDRwzuQawnVJu6dbkfiCWuKXxzpY/QcZkKgZ+OgW9r\nCQZLy3AF1ERpctDz4aegbgMoRRzMzidbQSS9tqJylkn54ohZF6EPCeFwyjPE\nKZJqnErxFMByJcTa8DmWyexnfSfecYPv5Xt7/oVaIX3vtCJIhp+PTiJ0saWm\nVxDI\r\n=XQVr\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD7ZwVGrwjZ+ugVIFWTw3ZtsUo02ApyGpqvariQyvzY2gIhAJe7h3lkD/jkp4XlEaolG+Fal/oOvKMaqtbhwH1GLUVJ"
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.19.1-alpha.11_1619730412867_0.3787553973833595"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.19.1-alpha.31": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.19.1-alpha.31",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.0-rc.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.43",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "5.0.0",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.2.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.2.4",
        "webpack": "4.46.0"
      },
      "gitHead": "24adbd61062759f9d9d57420fd97e50f4d8c3b16",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.19.1-alpha.31",
      "_nodeVersion": "14.16.1",
      "_npmVersion": "lerna/3.22.1/node@v14.16.1+x64 (linux)",
      "dist": {
        "integrity": "sha512-bT9XJzw95ZpnVg3nAkIYBL2rnNIuVvxeei23YUE5xngFrAx0ZSLG0rkHFj/pbobl9lqSGj9gIlnUBo/WZnQrFg==",
        "shasum": "5a7285be2f9355d1cb789086206acad93c890eb3",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.19.1-alpha.31.tgz",
        "fileCount": 111,
        "unpackedSize": 125977,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgpVOxCRA9TVsSAnZWagAA48EQAIxTudyFoccxKcaZsQtJ\n41KrQa9m4oynfyY7vos+tnL3K1ESWHrkS7SmSH31o0poGO9JtLl2mvegiFW/\n+THq8U1TeWSLhVjzhn+zSabL6Bqhl/wLO1OVgqPJLqe7pgyyMB5VCHDEGVj2\n3eeDyYgXRrrbAbx9Qy6HMTmV3UjRP8Zrcc3iYRLt08FwHMXbZc5tDKSTr13V\nRrNwYp0zjy+wwyimfeUwUm9X4Iw+t5iS4yM2kaWWOxRvJAXAOYhpex4929nn\nA3qE1ykn5e4LK3v5dClt6AkHpXbS6hGa4691pk1vtQgx4ZaYs77i54HKyoQ6\nDBUgfmRNd1Fg3fUXR1DM01QVKh9pVNdCDqqjFt/dRdbxgv9DXcPgxoYonZPv\nsVQPl2TXIcsu6/2OusrvbwPsdCvCD4+6v8uZx1fOIMMEBc379LTCowCEN+OT\nynPQRzoOrrBNqb8AAHPimsCPXErBiBhKvwtPsQkRkSPXlTD1UtUpNFcZ4lHB\nYW4HnPNco0vNIA0vLjTOSWVv2ocvR421glTLO+lj++CPLLEGXR/j3FJUJfmh\ny6CeTxTfy2vgotwdfBQ73A8OkMB+f3z3XEHz00nwK4TieIwnHQBP1uhSbHNO\nco4814af9DNiRdYknyUevKGB3HSOd6Cx5dwWaRS8ngBVXRv0TERUkmA9Hp1q\nuFsK\r\n=/m3U\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIA3DtMxZsP81kdpiRSvDtFc50bPV9EfFtdv6aS1EQPysAiBJ51dm0nrA5XcPGWv/I0KrqzOV2zPEmL1obZfv9guk8g=="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.19.1-alpha.31_1621447600691_0.614348818478019"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.19.1-alpha.43": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.19.1-alpha.43",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^0.20.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^0.20.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.43",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.2.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.2",
        "webpack": "4.46.0"
      },
      "gitHead": "d5517812b31d9206131bf1df4f8a3b5183ab07fb",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.19.1-alpha.43",
      "_nodeVersion": "14.17.0",
      "_npmVersion": "lerna/3.22.1/node@v14.17.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-DMJkOn+0IozH40H+GfG5bL5lSFh7YDgXPiyoambdKkzfdOMHTmbHt3AYIp/ZbyHpB2O+Qw3OnAqkjIQ6x7VGug==",
        "shasum": "dd7745e032bd71623f3993200ec1fd7c65e8a27f",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.19.1-alpha.43.tgz",
        "fileCount": 111,
        "unpackedSize": 125969,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgto5iCRA9TVsSAnZWagAAX38P/1OSDpQPURW7Cy3BtR9y\njvN/V0pYT0qxRavVLR/NoBDTzyKj4swexw32dHadltWuUVJeVMzsFm1j5V0y\n86ZYhNel1W4G8/xPAW0vyoebvap3GeGjHfoAQuWEPMpm2tzdgJUnl3D4W/Ev\nLp+vKOKf8C9MKHMaT2p9xDaMIx0sftR65+uCeM6WHujvhbNGaKwh6FD7RI+Q\nULST8aLaWcHEAkYVKfaq8nuksN0zMUWMF1I+wGw/NCQuY1QRz6ahfqj02wga\nH2r6xNovxkvZaeuObnKfaF1N/y+Jo1kRsKX2vRntU5EHlJNd1rjvHvYIgza/\nkkQ0CB9C/jmVtz13PFXp9GO98W9TdL8Sa5hFMpIEDcemIsLHxgbgSeST2nq6\nEnQJdNtHp40uHRZbmDyFa/BovCXdBQOHuMj69C1WeND9qddlYspljwmDYO2d\ndPbX5cuDIDg3UkvEKBqZILoWYyCP6jfnw+NVrSZ5GZ8Tk+VCnidovaCR6yDU\n8cXfN3RP+tz3nMCsr6gRd6YYBy3wjDk4GVd8rJIukm/0zNpCHxJDBDa/elmV\nEat05cBpXg/NmQMw8UflnrXC5PtgNSBWR0hB2IgCA0HyUx8Zyx1/vm3JHwTS\nNav49p9avSpMO+/GYZCMrZPrcEZ+LnhlheORUNQPxIQCdcKCjY/oSyJS7Aim\n9772\r\n=GHJC\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGkHXO3hBc45V5rCI2j2nvA0lkgqI6GTyDA/0tfxR+i6AiEAsYz+gtIAln72vekYz5yKZ3NFW9Evi5rV7BxpuqnuncA="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.19.1-alpha.43_1622576737864_0.3793064800530399"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.20.1-alpha.49": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.20.1-alpha.49",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^0.20.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^0.20.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.43",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.2.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.2",
        "webpack": "4.46.0"
      },
      "gitHead": "f79aef422b53f1314cb0b031651875658fc17008",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.20.1-alpha.49",
      "_nodeVersion": "14.17.0",
      "_npmVersion": "lerna/3.22.1/node@v14.17.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-QJnLS0DFCXVcVp2wt6lI/nbkpaHnFQwYoLdaOeAxg8EDPPqUPH/rswIfyEb/ae8fWZAoHr5CX62K/uPSyzXkbw==",
        "shasum": "9691cee7220ebe7325bfd0857fb7b160e32f9771",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.20.1-alpha.49.tgz",
        "fileCount": 111,
        "unpackedSize": 125969,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJguQzSCRA9TVsSAnZWagAA1mwP/R1+6CDdHM+0x04kxKGQ\ndzfm1j92V7nsH6r8u5UbVl/Lasf8Yk41BDfeWzUljppV+m+/noOafXKE7tYu\nUulW72kzHXkUCT/SrkQlRGBFdMvDBnoRyFzkvhLKIRoyV7bfHH3+ETtzs6Oy\ngIEsBXE5AL8pV7bLu/1MNSz7Q9QK6BhgwXUheYBwaB344GNE9Gm6bmANUYZ1\nY0M+sPKzCvSz5KAd8edtmgQx+GYCAgBOocYTGg9VXwa3wQaYINDaGAVUmpeN\n8sIpiEN/Lm68GBlHAF8XgBxAbUOX2RRc8ThDxTRwf8wiVCeQazmO7Uakcnpk\nC2kicq3E/hUyVQE5Xp/UwKGwJba7TxEdsoeUS5xNOLmss74FU+JVSvYCv6bx\n4ZVoBz1h0TmmyzZBsAOzD+Dcsp3ksavdPX7SvgPJxxEVH1DfbfuEqrRVE5E3\nLGAA9x2rKrpRxDCuObNl/lwqyYDXf8xhl9rGUcaNZri3wJUJRCAg35Fj1xUt\neFC02B0iM5hwoB1yG8yJ6jJ4L4jA9ArZkCLj/TH733LlSGAweGCmS6VY/rsh\nc7ObwqJkoOrbq/rsK0oIpXn8W0Csw1lDiB3DF9Btz4iM+7dNZSeksjFBfCxR\n3JR4MB7QzGiJxwKz5RxAdCnbHh9gf/JA/3wEoyDJKUNJzBl5jKs+oN76LLrP\nY6Zh\r\n=wUMu\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIB3EDSsl5/v2XspkbEI8BQp8iH5RScErfKZTdKpHBQrWAiEA/mAPJttb9ZTuJOA4RhrWfqbPTQU5Rsr2uYw/mIhkRuE="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.20.1-alpha.49_1622740177736_0.8015191739487653"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.20.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.20.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^0.20.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^0.20.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.43",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.2.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.2",
        "webpack": "4.46.0"
      },
      "gitHead": "f79aef422b53f1314cb0b031651875658fc17008",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.20.0",
      "_nodeVersion": "14.8.0",
      "_npmVersion": "lerna/3.22.1/node@v14.8.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-S/OeOuk5W8nlv2dp4JQmIzZvafpOKhEb4j9gWdWQaM0+U+Cv+yQlboeTQHFcpj5obwJ7AzTHrwnL6ApV8dtmuw==",
        "shasum": "5c332cadfacd1fa966318292ba8dbb542f5ead57",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.20.0.tgz",
        "fileCount": 111,
        "unpackedSize": 125951,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJguR9JCRA9TVsSAnZWagAAHEMP/AmnfsZ6b3Sycw7KqzYd\nmFqQlhX70fT/qjNgTuWfkkuiXb6Xb9L6FMTVNhtbtUOFWHpejzV0C4Xip4JF\nsDNWYgBQenMkPiVjXKXkVmEX6gCJ3DkyBqB5ScyWr7+4BvH1wcIjef9gGZ2C\nQhb5/rsklyu89omigNN2JMgrkZtZoxvcScMRBSS2UxuO5XbRVastg4S4e99A\nMC2SH3k+GfWfBUtAXYHfm6xS7c+NafZ5NBZ3gErncDamv/cx2OPAw1dyOHN3\nUdEhwYzflFLCp5bupLpGwCQI4OJo9NQtHcg8TlB908iYrxYwREg5JXlwtCZp\n0ZNU8JcxcBk7VUHGdZyQz4rY1tvqQ209FX9tLgTJK5Wp3o6COvHH9GrwsdWr\nnPlQkCcAbLGJO0IQzLgUyi8XB7kktgxiZY7jW+yXBEtHxxPU/IOMiut9YPPh\nCJSAaMPiZF2z6e2PYi0hsTIRVgcYBpkGFYnbXs19g5rp+3qx6ViXRGViua2i\nAjmKyK7RTyRetIAOsYsCGDQBGj1x4weKJfihhH5WW2LJjx4ymfgwsmim9rVf\njZE3ttMOfHQQ+5SJzV432Kj+U9g+cNcTZusF+HrD1IOW2jXPPYcwYhdaTKQn\nBsVfTma7jRBBTt68Sn+Bn7nDReRELyv5iBFRpMzSbnQMbP7pcNZFHKI/Tlyz\n439X\r\n=lFk1\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIG0Ju7ihnoHqzTdbD2H9SJpYQ+O8UR9o81IvDYxPbRbpAiBcRYEiAxjYkCt51pp9wvgJFRLdnuBV+igzyoLXb725+w=="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.20.0_1622744904941_0.9108679062441083"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.20.1-alpha.3": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.20.1-alpha.3",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^0.21.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^0.21.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.43",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.1",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.2.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.2",
        "webpack": "4.46.0"
      },
      "gitHead": "d4df2f7ebaaaf433bd84b568c482e2788103ab71",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.20.1-alpha.3",
      "_nodeVersion": "14.17.0",
      "_npmVersion": "lerna/3.22.1/node@v14.17.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-jyVlnlMPk431PXULBvhZYfFU6HQt5aRFv3RuSFcYEVRv6Qd16Dl2RbOWuiF9aPQ9BG2/DAnRXZC6p9YtLhTpRw==",
        "shasum": "0aee5170bc3e6cb995bec87902f61b18fa5157f3",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.20.1-alpha.3.tgz",
        "fileCount": 111,
        "unpackedSize": 125968,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJguzW/CRA9TVsSAnZWagAAsGEQAKHStNcPLY77clQEEiO2\nLjyuUdKOQv+N308Opa6BsTkyxKcHHDoZg+v0EfaTqmQ+ah4FWy6ZwqI9nPDm\nVxzZIgoG3cxvh01cZvaO4PT8Q5cy3hu4vwtl68IlZxseo4tknirHwTA1hjQW\ne9PmpQTtqVrOPR/7fmdNaR+yO8Y08no77Ipca0TIkjlB3HxVpYMX+njCOPjR\nTGN0Z5Muu2716gvFGjr0J4dUrXbYmZhPn1uWxjjdEgii+XLjjswDSsFGCM2p\neHMbV1c5lSiAk4pOxqIJcOSIhWllfZCcoYKbev5jXKAKR4uimWtv9VAlsjWN\nzEE8p820hinMmzB9Vq9COs82SRKDdYAXvRZf5CpPdy4FWA2YCdduFNSbgxgC\nqY5s/MS+85gAsTuB2JBHDM+g0OBkGuy6p14VZ5AFXPNgrUdL2AVWRGfcPt9v\nXFFEnivIxYoOjS3BEy1XrInHOmDepP8k3REbc8XL9aFvcemZzG2OVaVjovb8\nwu21WkrFwJnyEOpFWDv0IzpNbVv8ocfiv2A5cKacJOjd1h5sRGYmQ3MH36ly\ntQcSWxgETlU+lFRvcjn4qhEPc9KO8WAKEoyVTgvHPvz4F7y8nIz5MzBp/PmB\n3Vq6cSY+e/FMY5SANfOGTSRytrEVtxkTX1Vn9bVrnpI6FHGhjiw8ZYmKCh3R\nT0Ts\r\n=iob0\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCkRMb1wf/i0R9uOetvmOUNf2TPZBvUY3BBhc138z9BjAIgEOWcJw7FSGcDejVbtDWsMgey8vDUlS5A7z3XcVoi8fk="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.20.1-alpha.3_1622881727635_0.049096766653184076"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.20.1-alpha.4": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.20.1-alpha.4",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^0.21.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^0.21.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.43",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.2",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.2.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.2",
        "webpack": "4.46.0"
      },
      "gitHead": "3d98420cf530968e6a85bc4b9c2b1bb78b730b3c",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.20.1-alpha.4",
      "_nodeVersion": "14.17.0",
      "_npmVersion": "lerna/3.22.1/node@v14.17.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-WRlBvm7CDXqaBuxDgDJzesAlR1BA8apGOxLbWMCBIbiIcz7mCAzL3fnWQudboUXTogumjWqE3vGufoMO7m1YaA==",
        "shasum": "12ea2ba88b3337bdc8cfb7ff911c5cc0d7d04e03",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.20.1-alpha.4.tgz",
        "fileCount": 111,
        "unpackedSize": 125968,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgv3BGCRA9TVsSAnZWagAAzjkP/ilDEtF99PaE1VGnbOjW\nv/+K8JJq7IYSjZTg5wE6wwsAhGJcFNAG87tsftxXd1jvaRZE5dlUmIIvItsa\nZsQE40H9PWb5VSx2EWxVGCpnpBoddD8g/zkDICxq5kT51CLa9F06pIo2rctQ\n2t2UcF1AknX+/JiSg9AfQEeius48IzXRovjad/VfJLj3DriHYDgp5zwTQrAV\nR94YGLX9719rixUR/KRBOLdENdoS7IR1r3H3qkftVfrzzbpgYpmPhGvki1io\n/Zd20Mpw0s55wV6IEz9oU3VRSv6JNACNXz30WFE037XylVAfLjDd2EvQaXzP\nr0RrY2aYnVvmpBz0M4SOTuJAo2Hxb7ArZn/PItat6COeeIJFoVi90Uf6rsBY\ndbQOqDslk1A1TYR+KSLPMqotH99ORO7Ri1mwUtnmGQJbJir/4Y7OErd3Dx2D\nL5wN9O10EFCwqBZpATTuaRy0Kc0xLSvxlLd5HRDufx/KdOyUv80N1KWqktUB\ntAEyiRzkN+0RCehGgbvgShROrjYdGQMlZDHysV7tOcNgkCc62Uq1GJ1pwdBO\nXB+o6XZZpw91HTBrGQYt/5E5TIUF7JezhNO/hbIN5FtG371ZOHyqPPmI7gaO\nm9GcwCVcnLIJ3bdJ1Y56h478okdl3t/KFEVQEk1EuP6a+CgISUI/GIitQHp9\njF86\r\n=r7kV\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFMD67N/REPfbf23VhkHO/K9EMrb+f1B9bIa6LFscmfRAiEAk3v7gHaFAqfy9RCRAZrWWI+datZIOXrl4aCXSblNKLs="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.20.1-alpha.4_1623158854658_0.6003316438790984"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.21.1-alpha.7": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.21.1-alpha.7",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^0.21.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^0.21.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.43",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.2",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.2.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.2",
        "webpack": "4.46.0"
      },
      "gitHead": "7750282034ee58bdd257446c2970f01307d7522a",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.21.1-alpha.7",
      "_nodeVersion": "14.17.0",
      "_npmVersion": "lerna/3.22.1/node@v14.17.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-6wZJyF0A33I+rUQbd6u/ZO1sW3UHEuMrS4Mo0AF4x5BPVJwhYgXWEb1RlwGiG1cqJIJIcXXiXY7EeyxmAP8t8A==",
        "shasum": "1be07d0e2d341392b8eda41d45fac812725857bc",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.21.1-alpha.7.tgz",
        "fileCount": 111,
        "unpackedSize": 125968,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgwksdCRA9TVsSAnZWagAAQdEP/ijEKjQLwJF6iSB0ichu\nlEuDtlluAtuWTKrq9PvJY0kSa7Icueq6E8BWmFfsjXGmY1Pnj4yVmDxQ+rUl\nqCGlzdEMuzLIrXNUF/Z/ppTHQd89VSeBspbgey6mrBJzxKD52+FNeMFXAnVz\nZvEazAmTIHUffYBHLN/aFIXaj0l6ZYgU9XP7pmOt4+zbNDjTYMNJUWnAGsIZ\nG2qL+5r9okuIFW0Srr5sCook03ymWUcBhvqccJhWvbIiIAUt8FQa83nwKoNr\nR1zRhLLj20P6nzM2MQR1tnDT5NttTciDF7JNAfVjn05wzHQ9Rs4wCulOvkLJ\nUAEyA+d97USypX49qepoDZa8HCneov6fUMcd7qiTVBDBDnnUjMi1erXUGouJ\nJOpCwQnd+MtJJgL81hMvbcMz8+nlHf0+gDKV4lBMLqavJ7TcuHamvUuI+Dtl\nkMMtLQv5tYGGmVNcGm8Suoy1oLobmU7Rq+u9QRN+90lHi+1YxDnY071GQL2l\nSe73MCIEr5hDgcGyTL0JhpQKHAZYQWkQF4JUXX19Vp21ks4gLvitdAG6aUOQ\n+SXggZQG8AlOYrTG1cjlyCcDplz6ghJB6rJuQtwxe5z/xOyF1evrYbPAwkUf\nWHIfSedcKRXwXvrNB6o+p73rohFO8QgKoHIYWFg0Aoi788XSj2ywnCycKUNC\nDfOO\r\n=0sn8\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD311pwc7dZb9R/hOUGA/R/7o1i+gZFbd+gGxquidyYKQIhANQ39dL/HF5jP2dWiS5tPFXwP2eIBOsRU0NeiCUMMg2a"
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.21.1-alpha.7_1623345949251_0.5110219953816466"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.21.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.21.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^0.21.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^0.21.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.43",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.2",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.2.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.2",
        "webpack": "4.46.0"
      },
      "gitHead": "7750282034ee58bdd257446c2970f01307d7522a",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.21.0",
      "_nodeVersion": "14.8.0",
      "_npmVersion": "lerna/3.22.1/node@v14.8.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-s3mhqJdV04DFL59lhp7wR5UMCpJu6BN7PWJRokjXs/St5NIsYjWt5G0OlsrN58/OgSIVl2pdPbVG2QhASvhSpw==",
        "shasum": "15122455c247ccfdf2a2d6d6d85ddb1778562677",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.21.0.tgz",
        "fileCount": 111,
        "unpackedSize": 125951,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgwloTCRA9TVsSAnZWagAAqioQAIQUHuycuhsfH1Os/+tx\nsvTgJNV9sx1YeTKCJ2gjRedSF65EOHzelee78fFa8gFK9ziPaG1I5Xf+PkhW\nh2flxsOYFpF3Qhm6srT8KBJxJgXdGIPRzU4ZF/KD8CLopxKDpAWbVkEe995V\n9vGKhfO+LhiM7bGszl3AATVXFJWiwbuQLs+KDbdmfyjWv5KL7uEiCca87K16\n7emtxesSwACo84HBNdwt7e1U9fbJ3CCWczQX1izPICXT+dpMIhIeHzUwrTv4\ntEIbPnSrdm35TLubOj/zsWjZWF/Iiugmqp9xtBXznQpfDv1adbjPSVwmJ9sa\ntRYtmZkvNmT1UB9oTTk0ljhLVHyfxaB4MnQsNoUSiDQFdpV6NLkn26GZqcD4\nrMt/1y4rcIHI5lVga2YVIunyc7hDKqX/cpRYtb7IdIFQXnSxuoYwb+3Bd51g\nJVv7tcc3rbOsG8StbItsRw6QfaqFiOoqydtBuoUHOWGOYlhDrYu9jU7fClky\niI8uOqZw2eVjewtu5cRLQxWhcWRYX3YS1sJzPWQA2NZy4NcMh9Lr7Tp9iStc\nXfUJ1UFTHSHrK42I+gpxtG8JIL/dWdLKuASy6yDB7TY+G/B0RYkQT8ptYluL\nRehwLmtYVGr7DN//a2urlurGixBc/qjlg799tLa1saFZkbbOnRvkxgEf5O7X\nRjwk\r\n=oCsG\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCt5CJLpZN3EbM6GKvfnMa9Bjja65baMEHYbEEODkqvCQIhAL/D0+ypPz/OR5qkqzNeKVUHO7gC5Tikl8fZjra5aQ+N"
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.21.0_1623349779302_0.19424615241632504"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.21.1-alpha.1": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.21.1-alpha.1",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.43",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.2",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.2.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.2",
        "webpack": "4.46.0"
      },
      "gitHead": "5b6573eeff537ab49d8d8d42217e5cc794f9ad70",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.21.1-alpha.1",
      "_nodeVersion": "14.17.0",
      "_npmVersion": "lerna/3.22.1/node@v14.17.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-tYLGzg29TOlj3TiX3W6AMJKhfS2hKCcqC6d/1a3LMir/WkjSm8QrJ4teBJEKfqYvsY31e7ktzFx6jdShBbrhJA==",
        "shasum": "71e3dc1797b6e590e2dff5cf0af7613494e8d67c",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.21.1-alpha.1.tgz",
        "fileCount": 111,
        "unpackedSize": 125966,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgxG81CRA9TVsSAnZWagAAdw8P/1vdLz9BUjrZw3/8RHT3\nwOI3qliuMwdoI85Iv/K5Zi9g9FtdaxOM8RIKCr3ExkS3GojWCwgZcfSCdAdU\nET75aLMnUrcPk3mAUYVHTn8FDBYypgirkwT1uZKhB0c0hiXWmq2QWeT2F5e2\nNUh18AMyB/fcXsUtrji3Pm1AxUmnLsYJTfJHZQep9uUh1q1zlNilr1ZMlNM4\nsjfdA6nudT0zf0ph3+lQksrRVXTKHw4ptRSmJOoeENWCzsN134b2hwmuDuxN\njnMFru0cCOKVI3OT1ZChGW3UxzVjmUWSR16+4BYLNn9sAAutcFJYyskdPTmd\n475bzqxLqZB5lgs5uYCoHTOMd9T+y8el7bDT4MjwFgc7DEzzUswMo7IzXwqY\nKfQ1OYRjZz0AVukDZgD37jxZN8GkWwbNEReadEI6H9geGBGvPUtEDfGidvJl\nxAy+Q77onW/ZByf0h97R/4yeXPb/RTrpYXz7PuglOqFXy4c4fYoxC60PQYr5\n1Luzx9BBBPCYnitBWiVs8m9G77nU7ekTTh02MNw/kJaEgPQ/EMd2IpqUPNXV\nN14Bkt1UIhmGQhkTmABUTlRMkXCkHdZ6etcD1cZeOC1YwpOSpRFnuuRg4Ugb\ntar6CN2jVJsgjHMmUkkW9XLdO6lV38DGX+ye6FHNI7XpPVZcJAp6lJyhsc2y\n6HtG\r\n=zp9m\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC6IOGtEpU1czcZE6nxyLx/PrC/rV+07zksfqHatmkGbwIhANq3JTXcJoLRNc4mVyk7WDewhVCV58kTxx2n5/uP1dnj"
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.21.1-alpha.1_1623486261053_0.7286229100071346"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.22.1-alpha.5": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.22.1-alpha.5",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.43",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.2",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.2.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.2",
        "webpack": "4.46.0"
      },
      "gitHead": "7860344eca83449170bafd03fd288e1a3deebacf",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.22.1-alpha.5",
      "_nodeVersion": "14.17.0",
      "_npmVersion": "lerna/3.22.1/node@v14.17.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-Qjod+35nW+5r0SIJxRiLW4mC6heqk5rqg+NcmPGSArK90+4YQ/b+qTRIHnPePPnua38PQYX+ssF6Ua5cm9krvw==",
        "shasum": "062514344229dcec375baa3f0bd8e34f2f87ca34",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.22.1-alpha.5.tgz",
        "fileCount": 111,
        "unpackedSize": 125966,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgy4C5CRA9TVsSAnZWagAAtSYP/3KbRkzB9Q9EkjxNcTXA\neQsL4PUU/ccI6533fSMLD3EWWJSJhtOSKTXXCmt5liGU9fmN0apPWXPazUV4\nsR5InEW7URq00pSkuSm6SOeOPD+zGxGXspfRo3ri0tGvO5wjavIDKf/I/rJw\nLFKPAIweVgHilMWNPPgFOnMZ5ocXaFGBYnWSgNwU4tXVIqhaFOww4pXw+lr4\ntsiq6csCjYnw+nkTCMoptK+Pibe8Evap334fkSfGdEqkyHNly5QxV4g5YvJk\n25jwHUqcyWw9jwRzsWXiPt/iBDAqhkyo8aMdx2eS2qtDGpUinHYUTmISpSUM\nem/yEcP6CaGURmz80XpNrHRo52JCEwMa2W1eIXnEOYeSiFMAGM8xq3hfFG27\nEe+GEejGMUhXYmc5Nhjnkq/9S2hNS0ZZ99lAVv3i/lxVTI5zFL5YOoB1VOCG\n31lOv3fARqjiHaJwnKKAhpFt2CeiO5O587hV3sojXn3cN1LMlFd0CYbDHz7E\n6lp2pmvvLyHRhmeYA53oHvAmL6aIARWd2oGoHIPm0Kr6g1ZlVU2Lx2ZbJn+f\nfat6FaPpYdvW+287TD2WFP6sYrQIdcDUQM29WzfWHvfg+gCM3+tQGsvSXTWI\nvMDXrYPOu+jWvJwQqZEwE/DH57YLEIsR1eCm4dEfgwOP26B+5KE69LXgDaU5\n07tu\r\n=cr6J\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDSCg2YzGjCrGGrNpPQQ6+dtbfV5PA+8G+SY46SbzbzqAiEAvdMmZGqDVE1XugAuMHch0/Mf/xtampTv8kgAQLqgOE0="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.22.1-alpha.5_1623949496674_0.10353984420794093"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.22.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.22.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.0"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.0",
        "@types/mocha": "8.2.2",
        "@types/node": "14.14.43",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.2",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.2.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.2",
        "webpack": "4.46.0"
      },
      "gitHead": "7860344eca83449170bafd03fd288e1a3deebacf",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.22.0",
      "_nodeVersion": "14.8.0",
      "_npmVersion": "lerna/3.22.1/node@v14.8.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-hrErhb+JphdErB1WuBwpCnO1FjiKfKzO9DjhvquzzM8SYL2bBpYEvTpBTU9cenRnRHUbUAfHI1X384vm37HKeQ==",
        "shasum": "ea8e79600fe9818b70d2d2666440d156a7390541",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.22.0.tgz",
        "fileCount": 111,
        "unpackedSize": 125949,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgy41FCRA9TVsSAnZWagAArDYP/2gGUcAu4sElWNqs9zMU\nGNWa9kQsOif3Jgw0vSemMsDYB+pIY+nzJ/OrErEBzG0H0WCZoioexEYCvxh6\nZEhw7dFm81ltdWFPxvx6FNJdCjtVi3lHhaKFp0fWZTpvAdnjvQZHpORjitkq\nD1ReFjE/uaYpFPe/6c1jLEoRxAnvW2qyBgTZRQkDQnrE+pEFTS8fCrMBthKh\nk/3cyvOQ2IeuH4AdLqdr8puqTOs6VnWVM+w9W4qT1sPsxtoGpKknMaPTUDxs\negJT8bpQvhmoKchx4GtqbHitugiFcYYRQfnnDBGmbRjuIhgkEi0c51ewI5aL\nZ8+4rf+gQTH4nYi74iAS7MPC0hX4MHfCLEXW3rvIdfeNz3/MQJPoq7iV8OXy\np4E3mIJAoqCDAf+qUDFg+2JWoTEN3n5pSXJkmUZI75gmqnGMaYNUaChLrpxn\nMRI2aUECa1hHTF0VBWvTTs7Xe3Ot+q1B+gjGfMmKUjxNZ8RaB4b3VFKiwHDo\nl8ODeHBArM9r9/tgoHzKgCJZnFtaihrFq9wbbZVG7HwQrtFIWwzN3wkzkEL0\nWwoRCi+JeMXsUDAeuxnvyMlit86dZVsBQVMOvx4Si4nb1Ba83cFjKTS2E77n\n0I9rlLyzJh23BZsQiNu5kmyulmsIQPjmeuNilQUhAcyZdH5WaN7LYcKtZI6U\npFPG\r\n=VmNl\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQD/Nc0r8WTs3BuSr6vNU7L93JSk+PY28rvzWM5oeyXpIQIgTf4g72ukpoWDzKarS/zSBtJcNmCmm1iSj+O7Q/nMJtg="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.22.0_1623952708928_0.8587206093470916"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.22.1-alpha.13": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.22.1-alpha.13",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.1"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.1",
        "@types/mocha": "8.2.2",
        "@types/node": "14.17.4",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.2",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.4",
        "webpack": "4.46.0"
      },
      "gitHead": "01418978e5cc15b5ec4d5283ec48910799fe2f06",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.22.1-alpha.13",
      "_nodeVersion": "14.17.1",
      "_npmVersion": "lerna/3.22.1/node@v14.17.1+x64 (linux)",
      "dist": {
        "integrity": "sha512-16Hn04B+0IhCfV9QI013SwVPg/PQIti3Qt6bRneaG33e/tmvVP+o/d3iUqlqpxKUhapNMAHXAOVfwvXi+r/Dgg==",
        "shasum": "d740adde4fc483e59394cd96716dda572eb8f7c2",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.22.1-alpha.13.tgz",
        "fileCount": 111,
        "unpackedSize": 125966,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg3LqICRA9TVsSAnZWagAAS60P/A7vHvke13sNzsYGN718\ncWd+jkYEBj434k4M8jhwS+1tfTE+Alfmdr/teJgHC02ooefV6BDVWdbnfxj6\nQ0f1BLLcuvO03rfCsRbgHbM6J+Fivo+92r6Sr8e47BoDFzthXtfYTSrnSzLy\ndnIjeVzD/ZBAByZi9u1f69wJcNWdzcqE4dupqeje58wCoNZG+VPML55JRXBH\nWbkUEcCjLSdBhT0lVzSX+q/zDE8V7ceIWA5muVP1mIaqtPWf9FcRc1J3PSsp\nscfRiw+rNX+r7dC1XVJF4tmJjrK3zd9ZX9i6bA2C4MDYFxguQVcMeJ2YSlC/\nJqPuDJ8EwZaWIvqbfnA8ot2g4Kskgz61zLZ8ilcafSCqyUM27T0Dejd+Z6xt\nYyrYKHzPZZMhnJz9S1loIvHYLP9kTGSC9nPSueIvkEEjpjq8zhBlOQrnN6Yt\noYjds5cJlj27catvddM0wkiUCHcjwkf7AKCR2hXOGWKB+AaiupNiM+E37mDp\nV68G+52w7L8ou1YnfobqYIwqJQsBJ+oyuZ76/e607PNj7l+tnx/MBhJBrNuE\nk/nCUCSYKriMSHXrZXg7meozOftphMaGTlfKnCakFwRMDCY6EXoICYdB+S2Q\nY7Y3wCIEzuJRiy2o3HycgM2z1/6K+yWIlG8JnaHlHx3b6Si8c0CciSLsgbLB\nCOII\r\n=wjSn\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD3e7m2iqoGYS7I6iROc6hU2JSpWHiX7ZI+0rkyECvQrwIhAPDAJB32R3/iF7Q0gDiCGjotuXH++zPG6mxVpOOzjzkt"
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.22.1-alpha.13_1625078407671_0.21101911359477477"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.23.1-alpha.17": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.23.1-alpha.17",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.1"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.1",
        "@types/mocha": "8.2.2",
        "@types/node": "14.17.4",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.2",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.4",
        "webpack": "4.46.0"
      },
      "gitHead": "f2a958dfeead4f6ae20901ab3fac04e4fc424a3f",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.23.1-alpha.17",
      "_nodeVersion": "14.17.1",
      "_npmVersion": "lerna/3.22.1/node@v14.17.1+x64 (linux)",
      "dist": {
        "integrity": "sha512-j/lZ9MV+key4DxE5OHZ3desJsXt5hMHyIfEouPApARPx81YbTx6Z/2CG7kLT9fkg6Udvb2pNTAn76k4t5f18UA==",
        "shasum": "941fc9f40b6cab8a0297a4a9c9c97a39ddd3631a",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.23.1-alpha.17.tgz",
        "fileCount": 111,
        "unpackedSize": 125966,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg3M74CRA9TVsSAnZWagAACQoP/iSZtymvkw6PIqGJJrT5\nc92HpHpPa7KscJFE76vX/7EtbkPYVvTZuALIXPVQcssLgrHrtt8rb8kVb+zB\nNDRk8SfIz7N/mguLQBaNEzIzzXbItyqchwj5OxGObEwXTEtfcC5dhXNjcxRN\nWzj2mRWdh6b55E40LA3SfWbcWoSiA2+TQJWT0e1odptj0PiDR2tuGbBgvwTQ\n2jWeXn/xId5aUbOwU8sGwSrcox/31cJN6NIgJ6BcNozaYnY2YrrQz4JtDO1x\nSLT7klynT36P3VrzWf0jwdqtiS05+h0nnWOYOlYBwvYCrl1hxdemqLcsRjyB\n5moXf2ODJRi+xbMitISiliu0h/uZLZBPyHHecMZ1VatkBdluxt1lIukOE7yr\n1dqrw0RU3BaLb4js/kqudG5S9fyytaFR1963XP9fiGGDFTmNL5VoNCn49q+m\n4l642/JH7OI9vY4Ub4IdX8+xzAJp2HgEDVuCN5LJ6zBvSQc3M66LzICpcE4e\nqM/HwXwkieHmhTkms0PzRm3UU1lqRK4SHI2OH61HJefvq/13qAlCzyRWGvY6\nqpciqZCaHQCj+2eDa9pMPQjBNpgQe/NqaXUUvKB86prU29vlEaYk8Jq9IGrl\ndXs9am6hJCOy23mYL6zXenpBXF0w2++PWN22XH52CqKLvhCSnAhNQnuGMuDz\nRIx2\r\n=G0TI\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAnJsTkgaturm7cIAJ5Mt1vyi872+gdgtOr35KVPdZjcAiEAsvibn8IMDyslxjn7R4vLVvfxOU1NAZncS848QUYH/dY="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.23.1-alpha.17_1625083640543_0.31620318615293397"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.23.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.23.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.1"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.1",
        "@types/mocha": "8.2.2",
        "@types/node": "14.17.4",
        "@types/webpack-env": "1.16.0",
        "codecov": "3.8.2",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.4",
        "webpack": "4.46.0"
      },
      "gitHead": "f2a958dfeead4f6ae20901ab3fac04e4fc424a3f",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.23.0",
      "_nodeVersion": "14.8.0",
      "_npmVersion": "lerna/3.22.1/node@v14.8.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-MGfH9aMnVktRTagYHvhksrk42vPDjTIz5N6Cxu31t6dgJa6iUYR6MemnOdphyLk73DUaqmR5s2Fn6jg0Xd9gqA==",
        "shasum": "5b0bae3cee1bab2993aebd44275788577761d1d4",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.23.0.tgz",
        "fileCount": 111,
        "unpackedSize": 125948,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg3NC0CRA9TVsSAnZWagAA5TcQAJ6sGbgv834GKSwz4qxd\n7RGjPMKtIkXIWFBlmL9OjT2gfNeT/bZwlunyoFmVPqutfn820BeJNXVIsBrl\naYPyzoSN0ny+3KIiKT4txbuLaXP57gBrNZxk/WHS6R0hp6OZJP6Zbstrk7wp\nabysiiTVonwYP3qE0kDKfkMSntOobAyyUVv6sDKqH2Bk/8+MqhUVi3cLat/C\n4yPQkynH/RYNN+Hb7l4mi0AvIDSJzxjpMUVKruUxSpbkByWs0/CnUx2lVNiR\nNIRXrVVNMNtPYHvoBLggg4uKcv0GWzxJV4o7486FWXkxw5FxTaPi5cAcNazK\nXqcuOaA5myUfaVdKhtzVC3rEQvxiDFTPpbLaD5HS9KSoGbPxGJ5CnzQxpt/Y\nukLT/2EU19z3RwR4TKkED2HypxV2UZgG6nySaYKh8EkNOwpIArnKW6sJ75c8\nQHPGMkY+whOrTc38hgwjej35OZg47GU7QDCcBqZCl9glqMK8FYC53lIdVkmx\n4szBvmXT22PBAVO0SBkH1b3tndP2edCT+zR5gp2qy6vOFh6ZTOHnOlEe9bdI\nQE8fVkM6oTac4iZuyrFozxGKJhQEogTSx/6cLCChQEEjuIRQTVSKqa4krLQS\noJf2bfGIKQlRLm5d4lHhc09zGBM1qfKbRGmIx3yTJkKpsHhZ4OsxkWdADxwY\nQn4X\r\n=Rsr5\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCpaSTE0a3CtkKWKoBuwRzOQM0DTpK9WJCpW2Re3UCdqQIgILP0i+bdX+0hLhqjzNxkuIxT/Wiso67nsc1XyKSDlkM="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.23.0_1625084084020_0.6810853629136924"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.23.1-alpha.18": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.23.1-alpha.18",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.1"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.1",
        "@types/mocha": "8.2.2",
        "@types/node": "14.17.4",
        "@types/webpack-env": "1.16.1",
        "codecov": "3.8.2",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.5",
        "webpack": "4.46.0"
      },
      "gitHead": "4b3425dd09f0a7087c9d741d25c7a9a0be42770c",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.23.1-alpha.18",
      "_nodeVersion": "14.17.1",
      "_npmVersion": "lerna/3.22.1/node@v14.17.1+x64 (linux)",
      "dist": {
        "integrity": "sha512-0oaHkvBPp7tB8f7wJpI3vdDnxHEyFJbN7YhKjpfbha3PB1vGZhqdB90vt3neNY6vmsH0p2vjP/wAuAwMHN4b4w==",
        "shasum": "8cedd23d4d1297b8ff8cb3a249bee5ed26bb380a",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.23.1-alpha.18.tgz",
        "fileCount": 111,
        "unpackedSize": 125966,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg3yS/CRA9TVsSAnZWagAA6WUP/37vr4W1AI15yOEBmNJ2\nBwzMcV+Bo1h6knYFSXqwkgfUjjuImcf6rKWFsHZbXfXvQc954QmoY4UXV7Hs\nqvTHMVMqiNrKusgiVbaB2atuGVfrplflqowrbUVIMV8l73Q/MY/QgKKGFhXH\nBDk4m3L2IWBXDacqUVIVxlI3c7UzY+qa6PfrGLfoEv3bxcKYYWxriBooBVYJ\n5yj93TMH5ZE2Wrx0Qn4efF1+rgYbbyLhpXS7q/MHtJ80pN6Q6RqeAvJp4hKe\nqm/A/et4rXF7TjJrTTt9lugAmTJKkImOIdg2dZeR4G+9Ts9m6Gouii3JiFc6\nbQtgRBfwstANG4mWHlfJjsZKdUwDN8TdlJ/uf8/3FRSAf6XWaWbYeR1MB3Ka\ncuj/WSESdzstmY/Eq4d9CvpNgCXJW3FVkdxaSxjb4x0kkY4TwimN31etnofI\nyFQ8DGzo6PmPnpZKXNZt6FdG96KrKZWa7ZL1TPG7abDGSGZy7F4xY4WoUsml\nQ5mm7nZMIGHmwuboZBB0OupvMvPptE+69aDKX086uX5tVuHrcunFS3MjmW13\nTb32e3WE6kQfTWt6Bh3So7iojR1Qifo7MhZFJs5UVRIVbEwLpFbuP1evctzh\npkHpZpMtQbYBaEEoGBDXPv4LMENVYaRcO/sNhugyhtdh0CpEI5YiEMr+0en7\n8W2W\r\n=lwib\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDH9ka7w2TklKE9kGSkF8p6Vcg0i3eM2wDTZ9E75t9ifgIgGF1h1d+4bWWAKUZNyLYn15DmydpY9DmGoWsQHSbZxws="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.23.1-alpha.18_1625236670508_0.6694714866180342"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.23.1-alpha.15": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.23.1-alpha.15",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.1"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.1",
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.5",
        "@types/webpack-env": "1.16.2",
        "codecov": "3.8.2",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.5",
        "webpack": "4.46.0"
      },
      "gitHead": "b67ca0568c333e5d841c9b614ed40b3e107682e9",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.23.1-alpha.15",
      "_nodeVersion": "14.17.3",
      "_npmVersion": "lerna/3.22.1/node@v14.17.3+x64 (linux)",
      "dist": {
        "integrity": "sha512-8ZQJyNv9dyvg9VFRPQ3e3p2UhnJjRCcIg8LhXjOKU/juoLCq1UprRACpiYN2nkcc8fZxc0H0Sp8rXqnklT/v7A==",
        "shasum": "26d1dbf4cb0cb3d7123f2f14f9711b861704ce12",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.23.1-alpha.15.tgz",
        "fileCount": 111,
        "unpackedSize": 125966,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg8qA/CRA9TVsSAnZWagAAYpIQAJHYZejLeUFUDAdEDN+R\n+Z1/ZfvAaG/OOlbuIrPc32hurc0a5yRI/1fDiOZ9V+QPVi2nJYAekTw0reyk\nM/7kh1IYJT518TXZzG+xdnIBLFYK5seyQ5a1aq4NjxZS7Vgo5DqzxQ6u+4ap\nE2oyCk8JWmDam1oDPDUy51/CQOC8lKUxcRKvrpu4894iZE8YHvQaZqCOondk\ndsHZTgjHU/No3fLOzQsq4OMrpvsEQDgZuWogLEYQjBFPyuI8SyPSvKl/XJfH\nf1IG2wBwjmMulYZwX7IpyMthMD5Ij3+E5soIpaoHDeGZystP0McZ50cESSnz\nEeHi1iWxqrwXJKzTlI6a1EebcdFj/jFPXGcRo5/nVGltzFchNysZ4oIrXS7u\nG6Rn0LgcGeq9j5kaTxRVki2HI+GypIXyfmmnITdV0B+9SAfcNQYA6TI0G8ir\nF2RdibN8rJJQgWLnWfv7r5Vnys23+jl6Uq7XK5om0PeC2rNLQ+ld1wutT/NP\nh8oLj+AYNPybORs8zmjIMfDNwQbb6XiBawtO+5gTVAqnY5fYm1NNFz6/PmyF\nWbU9enb59b7e05O6HU9ub/yw+HHk5RVYfUIIn/egqzrVrJBUnUmAQUyEcV4o\nfh5F8BKJjnJQwqi40/n7yKJWVbhAlUWT93NH5lQ/+4KfbwUy5lxC84BCZiVB\nVQud\r\n=uXCo\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIC/pOts95l/w4tzjFc60SwcjxTzKV01bnOU1ckIDD/FsAiAjaqUTNO3XqFAFVao3aS9CXX2OCJQMMZtJ956/38dw4w=="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.23.1-alpha.15_1626513471497_0.4882133734370844"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.23.1-alpha.23": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.23.1-alpha.23",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.1"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.1",
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.5",
        "@types/webpack-env": "1.16.2",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.5",
        "webpack": "4.46.0"
      },
      "gitHead": "884d20ab417bf0283ec84a72b9a0fae8ebcb82a1",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.23.1-alpha.23",
      "_nodeVersion": "14.17.3",
      "_npmVersion": "lerna/3.22.1/node@v14.17.3+x64 (linux)",
      "dist": {
        "integrity": "sha512-5pIrkXx9CtlRRvLTAffuWbS2BLPnopVFVERMvIYmxpvTXbMtA2Rs7R62/9g7oR2xnYTx/ABhhfybzFxY3sPkdQ==",
        "shasum": "4cdd4f044afc614345a7fe8ee6770d5864330459",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.23.1-alpha.23.tgz",
        "fileCount": 111,
        "unpackedSize": 125966,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg+wBUCRA9TVsSAnZWagAAfusP/360yfBJAk+kLkRq+wXe\nIaqxsbrIVQl3VQxCT8soYLJBTNBNECZtBGls4i7FZfjiKukk2VgRU0m8PWiI\nbHWuBQe9DjEekj51EFSopifaRgcBFrZhh0Cyi3YeNHC4NCH6dtR81HFDtlsR\nNOanQO+dpGk0E6F843MIgGNahWd9kUcUn3HERsNH11qrg8NYUaL+tM7kxnA4\nyPRss51B3fDy3Id9Wscjj71Y4XTimtevVvJn4wNNwEWkbo7p3+Ofdgg0dM9/\nyn6NA/YbuhgXsXMSBZRicfkBsyFVDrdp7dh4073zon5G5rHmS5ADYQkESeSf\nsqgeJVlDNOqFaxtNu+mQ/t241QQeLOn077+ENGVkl/3kQSK5Aun56nBuVWlF\n9oodqKPZugY1ou65ZV8q/zm1vgAhLKynDozx3Y0zIhCulvIN71HJc7PKb3so\nGDtLtfQwVl0DKM3p/Vy/mWR4LhV4WyFWL8Nb+N27YkOmWsY3HL/YCEnlnY8B\nlhjydRKvg/qFJ/V+jrOoSKVlYJFJWf0Mco3ch2Vm4qqbnlw5knwNdDZph+5Z\n7YCfRqDXGocTo2UFbJhtWhAmY4W604gfaBKKt0x2fz5epxuIztmT8hrncvHu\n3oaZR5xnI7fb3nXFokBPa10+1Q/ray+Og67EsikoVqsHGo+hRi45F0o6Vr69\n/769\r\n=jDJn\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCwfBYkB3YVdAwmJMTaqE14byD+hc1pBre/OyP+mUdbpgIgGSq6SfQdF9c5cufXwt88dOJfRi8YhRP3m9QPO7dKGAw="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.23.1-alpha.23_1627062356689_0.6554302948086237"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.24.1-alpha.31": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.24.1-alpha.31",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.1"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.1",
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.5",
        "@types/webpack-env": "1.16.2",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.5",
        "webpack": "4.46.0"
      },
      "gitHead": "fd2410cc9e8d43210b6ea44b8193fa70ee900499",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.24.1-alpha.31",
      "_nodeVersion": "14.17.3",
      "_npmVersion": "lerna/3.22.1/node@v14.17.3+x64 (linux)",
      "dist": {
        "integrity": "sha512-WYB42reUHLjQHRuTBjKhRkxcXG92zcp8cYRngF8VsCjjBJrO82Q2lewbfUms1A4RSvl2hs4ODH7+L5qICax75g==",
        "shasum": "d449d7cb96ed5c47127265090c9a9cca85529b55",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.24.1-alpha.31.tgz",
        "fileCount": 111,
        "unpackedSize": 125966,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhAWR0CRA9TVsSAnZWagAAG4QP/jTvJ36Aqr7nx3JxYVP0\nw1TrBwDpdQ2yOUWJ3m5n8vX4LKTNDLCCegbs6RXaV0w4WUJ/IM5qHIfcfRgM\nnSuyJ/JocxJCDbzRVXrHp5CujED7q3D67nRUsVbhwee/j21MWOS9tDHneZQa\nNpttjuyyuelA+K2Aow2A+iynbNDysX/FBwkuAB+QaRk9y5D0MyElwIGHFsB3\nf86u1WL6kiFMwsrfmq94AzPT0XGvzo95whmTjFR/dgsPHn9DTthXEtDImHat\nY+3PPw9BbpWyvHEi70E/NsPpPJqe4rHzYEP3aTSezkI/HyTv/dDEpxRxI+Fv\n1tvndGqFXDMUSTQ2/IRQQMsiIkv5f6laGnf7EkdzctEsCKlTA6Szf4+UmuSC\na7cIHq5pVIkuVFTQZd7vfzXiKlhgKuQmk14qGeP6STFiZRUEIT+5HOYVCKUp\nHvGeOF+Zz5r+tCqtZ2N6E+e9TpwdyWLiPObLxR7ebGWZjCVgnPirUHMmY9v6\n8r6qxO+EQmxv2P+wmsdnMvSF8/YWEiZumzVAa4oOuF6/QyJFpHdX3W8vKoYw\nxcH/gkXfmdiqVChbNsSsx8el+LRPwijci/i162DqHdJkWbARW/psp8yd1jDn\n15Cw0hxcORzgjwQZU156AAVIRs53rKDN0Vs64AdhBxQDqTbbt8FoE7WNSqVL\nEKqR\r\n=JKFm\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC5AqFIA2fK/O70hjWtqGMCqROgTgaXnYUNrVq1l/e2JAIhAMHx97frel4O6Rr1dKytZ76rCMdUob66/ZPGCyYsBaV0"
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.24.1-alpha.31_1627481204528_0.9248703169304493"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.24.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.24.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.1"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.1",
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.5",
        "@types/webpack-env": "1.16.2",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.5",
        "webpack": "4.46.0"
      },
      "gitHead": "fd2410cc9e8d43210b6ea44b8193fa70ee900499",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.24.0",
      "_nodeVersion": "14.8.0",
      "_npmVersion": "lerna/3.22.1/node@v14.8.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-hdpkMeVlRGTuMshD2ZFaDjA/U0cZTkxUkJFvS/4yOiWfw+kEASmGE+U0/i9lbdQKuCR7X1rXSjbcYumlHcMG+A==",
        "shasum": "54e3d6ef20fd9b489446cc3f102b48a212af04d7",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.24.0.tgz",
        "fileCount": 111,
        "unpackedSize": 125948,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhAWYhCRA9TVsSAnZWagAAoP0P/jh22JUEG5zQJjLxsIlN\nHYbF6x1fi73ysY055Q2rl/bkuIgBt7KpF+HwFv3lwPJu1rjljkC08uBsAXJY\nVDUsnQemP0cgzNQNfBD81xuT1URFqJWWHaHkryvTY2n8g58N4k9C2mGD59Xc\n7GLOrE30y9SlfCFelBUhQopwKJ0NEwlbRxkr4QCNKBEJByrv1fbjXVbFd3Dh\n3tX3ilPcLgTnJr6lyOguNVgE0Wlju0rTNYoIVwrJktJ8SB9hM3UA/j48Ellk\nQsvPn2pLhO3+HGewN3JW34z1ePWholUg7snjHsDjg4iHPekZWs0DiCCk7AG4\n4OH7lZD9YuK7SDRNr+yBaaf7L54QNQbFwirxQvzoTHW9K/XO3zsJd9QMJ94l\ntabXaisKbiZyEWKjaNnDoYkIxSK+FLRHI8oTSFAGy+adapIJMFG2B9WbOdl0\ndz8QKBjCz7nmfhxX3vmurM/9bs1D0yKCTtg6J37hcLPiF9kzREFioGFjSHJA\nhsiFmmGCToJc0e2NEsmo1LRG2o1mxTnt1gxjVvSCVpBMuwBxLUxdxU0l7aiK\nh524lGvwRyyuNZLzTZ1Z2jICj0BXDcrtfjW5aFMLqsvHjNLo2oqiksPmlgOx\nkyNCvyOWMKeVuvBhBQYadbNqKv+aqrL6b0Q1y22Fg5T8UrNbR1s9WZNSBfKi\nRWyH\r\n=m3uG\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHw1IGLLmo2Jty04+fd3HkkBheGJ+RgvGnHIMZ4nl9DxAiEA2ogh9+pfzcZqnCxSotVa4JzUZ7H6JgYOf8xWRUpHwYs="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.24.0_1627481633265_0.18186755821095857"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.24.1-alpha.1": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.24.1-alpha.1",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.2"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.2",
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.6",
        "@types/webpack-env": "1.16.2",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.5",
        "webpack": "4.46.0"
      },
      "gitHead": "3b9cd16a8eeed7a262bdfea4c93098861b4c1ba0",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.24.1-alpha.1",
      "_nodeVersion": "14.17.3",
      "_npmVersion": "lerna/3.22.1/node@v14.17.3+x64 (linux)",
      "dist": {
        "integrity": "sha512-9Mxb85aPlj0HYfO9fEOCXqNuu8NBtfKYzwK3Z9ht0Zl34IGD0WEqQf3u73ufO6e6wNW4POsMwVUfpOzNHUXEpg==",
        "shasum": "bd8a41d508653858859a2c3fefeca6a9270dc810",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.24.1-alpha.1.tgz",
        "fileCount": 111,
        "unpackedSize": 125965,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhBFYbCRA9TVsSAnZWagAAn8YP/1s4BUvL3tON+uauR2h8\n0Fj/guwQ+FjZbheX6vUUH7cYYpTqFWW4KycNFltPqtEYNfAjmP6X0k02DWg7\nPQ6lSQ1M50G324ibHwFZMqjdMH2X2EZGoBmKGpoIjZFR0/ErBFjP0qnhPFmR\nCK4vszUlO824ufNKfD/i1TTKwAP3vHMxQ4UwceCu+utZLTj9cOSBYrrsq1Kw\nHc+HQF9nIX/rXanA6zqeTKsc1YuDwyoX8tDWaypp4Bc7/nGxuVUfwN1jX9LI\n/XeUySl6IjoY1EgiIpsadDtiixKPthI8d4+2wfUd082F8dus8hfR7V/bMJb4\nDzuNQJUomEvgOKCvAhErscfBkcC+hNyQkyxYw5lDITl9FwR5sIlgcY3YUWI+\nwjALSMs5IfY/lANFFiApmO4hgt0BBlCz+2W7W1/8KULrap+gGxknC16y6BLt\niLOTkT8UN5o9bqrTez1ZQHkz29V21YEAG6H5wWVVFAbkpeN/4lZA4q/AyHEX\nyToKK58nBY/ydBiMHSBtaWC3IilNXjW5F5lWSm3HmilhZ3uyfSBWnWvTJa+5\nEIISTWkQeSjwHekI4mPztkj4g+Y5dZxvFIURlL4JWVp316GmHYRpMaDLuNfG\niSJVBVZLgd6MHbyQyJQE4PGr6LHtJCJ37RE5oh5unTmb1rYHAyQjrkFKgPNc\niIFp\r\n=S2eC\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDiY0bXYLcwA/G/iYNhCJNRR44wz7Wn8MwRl+lGLpiLZAIhANxd3ncTJUyY/pJn98eB6YI/2/WiWogIvazJIEwKDOR4"
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.24.1-alpha.1_1627674138817_0.8848603922961871"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.24.1-alpha.4": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.24.1-alpha.4",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.2"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.2",
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.6",
        "@types/webpack-env": "1.16.2",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.5",
        "webpack": "4.46.0"
      },
      "gitHead": "a8d39317b5daad727f2116ca314db0d1420ec488",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/sdk-metrics-base \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/sdk-metrics-base\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-base\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-metrics-base\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.24.1-alpha.4",
      "_nodeVersion": "14.17.4",
      "_npmVersion": "lerna/3.22.1/node@v14.17.4+x64 (linux)",
      "dist": {
        "integrity": "sha512-vmmCmcvN0OKhqFcdKOJ69UvFr3kVGMq7T3xYZnx3Y+4q2i7zDUIJq0FbdfKNLHlaaJCSYLOzO6wek9ouPAQqWg==",
        "shasum": "d11de683f30f9f6af9287bf8c0c402a38ddc4ce8",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.24.1-alpha.4.tgz",
        "fileCount": 111,
        "unpackedSize": 126019,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhDDu+CRA9TVsSAnZWagAA8UAP/1/aSmknIaLOD2utFfsK\ngLBUr3hS1TZC5anLUAWUsWoj3Yor59YHP7nZO268kEQS01QjRmbWIhgQIkmK\nh6pXcpi9R06FQNjAu42xanv+USsz+/MHYqYYT8k7qOuEi88L/BZrmtx470+N\nkypKwWSy6dH5JHgaJIvD+9tXXHKOYoU9wy9bf70WB/O34awUGM2XoTbdPNdX\niuVl9fFt8HR10lTDYwmzw9y7EOD/GQ+4WwLzOPRBFRGkW488XA3MnRO1/iFX\ngzqB7Ik8sbbp1agDWPdiH1jL1picNbxWrD2muvqBu6AFB7/yhDF1RW6XJVXr\nbr5ZrP7JQdD2ybyjdQQmeQVYRIp2NzjO98m+HaMDbwzo8JyQymbXqDZo28Bz\nm0UoPT2USueeiWBhBd7r/09t97T6EQ7JHRu2o0g3sGQYPeeq1FRVdQoLVWu/\n4RPCpM2LK1Nx0wEaQaNtErbZfvgtsc8DFORDmgFJCRcc/t4K8ODWe+kdGIqi\nrVCLnXP1kFAYsWjvcjwXCfmJS8QmMCysZs3p5AUqzArImqmP55o5/y/bob90\nYBNlPr7/6XamvCK7JpKFij71iigWKGctnJB0BFkM/oJMphENx9k8GROaOnDz\nJ8xqOT7jJTGOXkcznOLTsJr0To4TAVmWUuR3wOYqV2fjpR2CKuQOseuVrABz\nkChY\r\n=iwgD\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCX713EgiESvInzw8jlIShgXG8dHkIQYTptFeqzWft2nAIgQJfA4U9SaoqC7wRvm/YFWWjt701wrdgRtEseWhxcVNk="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.24.1-alpha.4_1628191678484_0.9884601861282649"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.24.1-alpha.5": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.24.1-alpha.5",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.2"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.2",
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.9",
        "@types/webpack-env": "1.16.2",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.5",
        "webpack": "4.46.0"
      },
      "gitHead": "b69ff35e90a33d20a0154dcd326f1467dfd39e2a",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/sdk-metrics-base \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/sdk-metrics-base\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-base\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-metrics-base\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.24.1-alpha.5",
      "_nodeVersion": "14.17.4",
      "_npmVersion": "lerna/3.22.1/node@v14.17.4+x64 (linux)",
      "dist": {
        "integrity": "sha512-VY7fWIeOKBhfG0WEB7iDhqXI0a8qv3aHSE42BrUXZBKWABxAC8P/t7NYd8Ga+qB9/srhFlAzlftjI2wWloEZcA==",
        "shasum": "7234d00c5fe935e415ed6edc02449d3ef331a7a3",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.24.1-alpha.5.tgz",
        "fileCount": 111,
        "unpackedSize": 126019,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhDR2CCRA9TVsSAnZWagAAnD0P/3XDc2dG43RDOTcdssPj\nAc8CAeyf4MRdBxiMQtlBkjWZL/sMuq2eZvf3tzxCGy/bfyuXuvn4cOvH7H6/\nMmiNa3eKb2osIFfb14OcqHIKILYj7dqKoPbybUkeqtwSS0i/YujAOwkUHqIA\nijSriVJzjCivIpiTePFnJq07qVyqRoi0NPG7XyEKdGWDLp3KQCKzfXczGOZJ\nNgCXnZzNIvP/99gIQnOcmeE7LhS+VnuPQtXTx8yfHe/3MjIPE0/QlTh1TXxn\nEuirvXojGWkLmRNt+nLsNY0Qz7ysh4XHPfrE8bUVSxyvYCG742isWROPaxPt\nIkG7PVxeU9PbMLPY/GY+2BVkEt9Su/vlxL3w+jY91aozGfhKkhImEd+u20uw\nkn6Fabal9na53b1xnFfBf9tgimLvdpBTISdXbwd9PuIqsmibr54qL589pctk\nxOmVIl0S8/mIJKdU+Ze8SkxIJeDLpgr6Nyt8fcfuEqOI87ApTCx7TGahAL2d\nmd48E8R0y49hyya1rH96ZGFrcUFLqoj6aLTLY52YCV00KloeOh0HlPGiJwrP\n7y2fJCn8LXCD2W0UxKeTjM9g7r7OQ2wfcKQ8UkT5UkGu6LSmKUZM53lJB45y\n1mBwX05XDwr7mw/V+Q6i/wOxC/FnhFfzxamlfhJmu8m72GHOp/zBzeOOq/AH\nVGW9\r\n=GY9X\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICAVw4w6JrisHqZ7PBqyJHUZ89xvMUelcI9jKTWkzKxjAiAsOivRYHvVvjn/aT7ZufOm1CAu1QY4Z1E60g0WXYltmQ=="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.24.1-alpha.5_1628249474202_0.525709429851422"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.24.1-alpha.6": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.24.1-alpha.6",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.2"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.2",
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.9",
        "@types/webpack-env": "1.16.2",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.5",
        "webpack": "4.46.0"
      },
      "gitHead": "08828b4c6583a71ed42a341f16a18a41ed1307f5",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/sdk-metrics-base \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/sdk-metrics-base\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-base\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-metrics-base\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.24.1-alpha.6",
      "_nodeVersion": "14.17.4",
      "_npmVersion": "lerna/3.22.1/node@v14.17.4+x64 (linux)",
      "dist": {
        "integrity": "sha512-d01nT1t1pZTi/YHbGl79eGXd2OMBt61MKFEpxq5VqK+dntZo1MiVPab98szi5H6P9+1JLDhNk872qRKrAp2vhw==",
        "shasum": "7f89f9a04a6e5610669eb12e395d096781e0905e",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.24.1-alpha.6.tgz",
        "fileCount": 111,
        "unpackedSize": 126019,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhDTsqCRA9TVsSAnZWagAAPvcP/Ra0eUzSXGvbG2Ib0NHs\nChdgEBEYUE64Z+18smM912BEQztndj7ameU/N+HoGhtIToTFoBWe41138Iea\nXO9wGDMauKWzZ6Zf5PJnw0VMN6BCnGnEJPWs7LpUROI/V9pHIRq4LhU11GnV\nyJxrrCsjNm2d9qOmrCLOd386UGPhmTjrTFJQwY7HSVaAXtlMhdxpMJdhA56n\nhtJ9yA2PTba5tfJAzaOEuwCvDPQoR8tbkowFLLoKnk+GHpyxMmCXmA3a6HvZ\nnsYqCUZ4Z6NgZQZ8l31Jw17//7gt3tEVb8rGQf8nUSGWampEGRIkyVrgDVWK\nBjxxcCHx1cbhynI98guHTlhkQ/VtIO4zT0r5m4ECL6cUgJoOhVVL7e3cqeI7\nlStNDPn5Mo3K6SMbgvB4j9ghqlaXfh/BUYY8yZK7qqj+N9TEohtRg8TTN/dr\nheopWjrbCmLX8vO/TBqSULBKx52Gx9yJGQ5KxtQBokE1PMblT5Rzs6g2xmbr\n/i+XpFFGDxVQXowh6/xysM+iIrFP/JK2LeKLFinift65y0vCBSfuNGSBFIGS\nbUkCE8K3iFAdj0cRVQxr08egHviCIaj0gCP8LMGzcaS6leFvXYSmq8M604PZ\n/VOgq9IqFVrikcScNdte88eMo20nevyKICuE+zECvOvkrzr2Dpo+uGDJMSpF\nNAQl\r\n=DqJR\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGFBi+PVkMcyIWUXChd5Z8YQ9W1sWt3spzoPDKk5d4/SAiBxj7CvgqlIawcCY9l0qYkSBsCLA07j+6U1KdYRtUmA2Q=="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.24.1-alpha.6_1628257065879_0.8538524635644231"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.25.1-alpha.21": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.25.1-alpha.21",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.2"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.2",
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.9",
        "@types/webpack-env": "1.16.2",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.5",
        "webpack": "4.46.0"
      },
      "gitHead": "0ef1fc28d366b74d98b73b5d6334ffdc75342fe2",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/sdk-metrics-base \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/sdk-metrics-base\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-base\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-metrics-base\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.25.1-alpha.21",
      "_nodeVersion": "14.17.4",
      "_npmVersion": "lerna/3.22.1/node@v14.17.4+x64 (linux)",
      "dist": {
        "integrity": "sha512-DysFt3M94f3kCID3dx8U5txZ8tPn155gxlVoJvzkdQpYDfYbH28AQiHtkpfWOspFgcMR+8jzouAuHxvuX+xqmw==",
        "shasum": "ef35c4089b643f1b6b9ae55344d401df8fdd5e12",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.25.1-alpha.21.tgz",
        "fileCount": 111,
        "unpackedSize": 126020,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhHWqUCRA9TVsSAnZWagAAvQcP/is4SRdVDoPXcyeVCrYD\nL60Hmslv6CKmwqU5RomS0nonRLDv7Cw4OdSTlKx1Ry7IVt0wZuWwKiMXAu+N\nVTF8RWYmSnpGC4D5niTiOICcNz25dskh084fAEZA97ouVNKwA5z4Cu1y5HQn\nlxpvgs3sJIv2Sav397RfsyQTuh9K8qO50eMNWBzhn0qzhO4WHljg1d54sN4I\nT+vjODDI614ATjc6A0gom1ygWRZjiekHl0F9GlHcx8vdHzTEhYuChtQ2i/38\npOUJCpWZeKPuP873AElOIWAQ52KZT2Ga5fLWWcxMVE1AHOfqArmUXH7U8Reb\nJRbuYqRmly6YHLCpDB46XLrTLyU6xgL/v08wzkad1E2BNYl6cr+LctRr4KMr\nN2UBkbdsL1MqvSV2Ul3KZ9wRYZeZ6nI3gT13iMcMbAqlntTxQz8sxc3JWfRu\nGAf7Lybzw6hjvsAwqTYQX/CdMqdd7ywN2bA2YBE0zzZXaMycgUoE/X+5N2mu\nNCRKPn0aSg9FFAR27hmZ5sVfwrJU/tSUChAz9LtE8wO9s2R5azyewOFkLX/1\nFcqKfu+I4IXk2K95RQpENZoLzDbOlceoM9R3REe3ZX+97t9KXwCqOsRpc0aa\nzuEhRNnPWKd1a4hKLLxPnQG2IGCwblY+ztkV0grf23gN+GnpyFJZsOtzSDLX\njY2s\r\n=toCm\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIB8Lppmdw8AtzpvgGx9wCBq7kxxYfIU9PW6PWN2BHixWAiALmEBnpGe1LKDzw1UehRIdVnn2yFYAGg3XghROrl6OTA=="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.25.1-alpha.21_1629317780587_0.3876973521090783"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.25.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.25.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.2"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.2",
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.9",
        "@types/webpack-env": "1.16.2",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.5",
        "webpack": "4.46.0"
      },
      "gitHead": "0ef1fc28d366b74d98b73b5d6334ffdc75342fe2",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/sdk-metrics-base \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/sdk-metrics-base\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-base\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-metrics-base\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.25.0",
      "_nodeVersion": "14.8.0",
      "_npmVersion": "lerna/3.22.1/node@v14.8.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-9T0c9NQAEGRujUC7HzPa2/qZ5px/UvB2sfSU5CAKFRrAlDl2gn25B0oUbDqSRHW/IG1X2rnQ3z2bBQkJyJvE4g==",
        "shasum": "3b996842c8043068da4d11a6e96960e757ad6be9",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.25.0.tgz",
        "fileCount": 111,
        "unpackedSize": 126002,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhHXi0CRA9TVsSAnZWagAADxYQAIJM4YgrViIIbQUU8N14\nTSzGwdQmxDMcXEyBrOmx2AM2mRThPw5jGiqfp1/JHNoAFvzn04Fp18arhrTF\n7i0zA21pidoDhKggNIZ/fL77iFyHWNMkYgRALpH0TtQlzgX94hjaWcydriEx\novxeZbz3LrSK+y2KiBzsNuIuCxAQxApc/GY4KOl4LO+J0VN/A3OW4X2zd/Cp\naMpwFAfqHpUfL33j2byPxujBVb0RiP5uChkDadSUfZtQEx0YDELFXRfmRcHT\n9J8Ux2oVjoC12B88xqmirzuuIEYzHxKqha602NBiaW31Z+Vg/iAP/Z64tSUO\nca0T2xm49taHJ4KdOSzWnaeYBhxTUnO9Q5e6bN0Ly/i3WpX+xmhaZC/FAXf2\n2oRInBg0ykmOyLhuc4VVxsYk9aaM3keMjskzLoPssVmnbQ5RRHyWBe/DZnUf\nJ/sYKSOl5cwH+1T6Yagjix47KBDfsBQxJ8H++jBUQlPCig3LugGetagDdR+a\nLlub39Fs4Y7QOSgkiyThwIj33WiEDLpt6SkXws1y/xwqSt37Mhz6zEvDfyaO\ncBhQnlBd4UlAhBern7nsqN9Zk/xNKHTCNTxHTa0yBEv0hVDOO7RrFn+JxN3O\nb32UQLxzbqWFzju6vkpV7nV+bqBYN5GSFnP/COrKh3j368IzQTZObsex7pEN\ny7qP\r\n=rrMn\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICFJn8/21OWvz1oXGqoojyp9JPQBA/JQMRumYZfCVeL+AiAOWQcaISoIORe+rNnCmNKZh1Y+AuzapHqx0TFEQq45Bw=="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.25.0_1629321396487_0.1194416442179822"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.25.1-alpha.4": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.25.1-alpha.4",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.2"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.2",
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.11",
        "@types/webpack-env": "1.16.2",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.5",
        "webpack": "4.46.0"
      },
      "gitHead": "3cbd530f2ee5c06376210402eb87ec9e362853c5",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/sdk-metrics-base \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/sdk-metrics-base\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-base\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-metrics-base\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.25.1-alpha.4",
      "_nodeVersion": "14.17.5",
      "_npmVersion": "lerna/3.22.1/node@v14.17.5+x64 (linux)",
      "dist": {
        "integrity": "sha512-GeZagGFNrsktaK8SXMiUS+ybzoK0Akk+/DpUkjc/zmW9UtYN6r/hhqk7Df61wdlEKk3f9/gJtayZ9+HQHPWFOA==",
        "shasum": "4f476b6add122b9b2ea9ee042fc7e3d89b60cc1d",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.25.1-alpha.4.tgz",
        "fileCount": 111,
        "unpackedSize": 126020,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhJUlnCRA9TVsSAnZWagAAd0cP/3ShWId4+54V+Voz4PfC\nwXVhcACiaQzV9fZAJqFnsMlUI3u9lljtrW6BA0JUiVTBlds11ksLjMsgjlLl\nSWv0qQROm5ceas33y0wQD+BNqOM9FGncQs8SPALHn9K5u0Gt/u7d9+0GXea2\nXVLuAdkKClMuYskQRem9TsDRBjJgwCqH87mBQnd71WdCDd2u1M4PL4vZqE1T\n8far0fmTVqaR5ovtRHyTquOP/re9fAbhyzUpXUOg0S/oXte0ri6BJ7cT2eR9\np+Q2Ie2iRFhG1iyrm4IA/rJ8COfDnr9SQNqKaE6u3+r51HG093I6h8XWI6wN\nqRqYsZeDmRsG0ABrMeHu5BSP4hHfEO2kj6vo6QY8+iEpII2gVe7Uoqcpaosa\nuTaJI4P7/qzOoSxWWyqUNjn2kZM2CXZkAJemWXYLeuHlW9ZKrCNj5rnk06DV\nZa3RS080Ga64311E6qishaBYCqycZNmJaAmIrZ30gHLrvkEPXvNjlin1wbEU\n2vzmgMXJWucGpL79BWiZJMaHA/EI0+ftJMOWK/F2qqaL2zHBxD8zsG2YD07n\ne6ZmOr4eXl5VbOgFmtEbmpbLS311OcJA9bRVm8NTCGZsxl3K64pU/p72+Ieh\nv+TJX/khw7y4G65qMIM4057/mUnLSOifPtbwo8LUzU4mhLtS8QbHMIo5Ypdf\nAUBp\r\n=Jver\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDaiFcXaxX5gyjUtGr4fk0XhkiuE9878HObp1Hx0vPxRQIhAMUgSeccilV4Bz9cXVeCbzXCAitcggsV2nGdpNchJRvc"
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.25.1-alpha.4_1629833575389_0.8090419531010125"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.25.1-alpha.13": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.25.1-alpha.13",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json",
        "precompile": "lerna run version --scope $(npm pkg get name) --include-filtered-dependencies",
        "prewatch": "npm run precompile"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.2"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.2",
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.11",
        "@types/webpack-env": "1.16.2",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.5",
        "webpack": "4.46.0"
      },
      "gitHead": "f0caa22ffcb26af2a2f05260f138a494e120a955",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/sdk-metrics-base \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/sdk-metrics-base\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js.svg?path=packages%2Fopentelemetry-api-metrics&type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api-metrics&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-base\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-trace-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-sdk-metrics-base\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.25.1-alpha.13",
      "_nodeVersion": "14.17.5",
      "_npmVersion": "lerna/3.22.1/node@v14.17.5+x64 (linux)",
      "dist": {
        "integrity": "sha512-ul/nBlRNLVhoaUBevI0G0vwbdcE08nPTU7EOxY942SnoTqdxL/iE2q6lMutSyAgeHi+KvzTGvLuC47AvlQmnvw==",
        "shasum": "e6bd469a2cc3b91e1d9d4b73984bc269a6a6e559",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.25.1-alpha.13.tgz",
        "fileCount": 111,
        "unpackedSize": 126158,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhLUJiCRA9TVsSAnZWagAA/iUP/i5GQDPWEzgf2G05r7KZ\n5ubmagjb7+XeYKLhwe+btuB46oWF4lOGlgdjb8SE2vYdk4hEDChMvPdLbcmN\n83awJj5xS3/CzqRRoYFJrhcqDFkhFxp1YluSGI1wq8HZ6uxrYG7UPXxst+c2\nM7HRbucsqty6P7nIx0FsrSPFfED2KBg10h1MAiAcTZW2eMQlAPOOaWGOOqP9\nxsVfRSB53+Sy+UCGe286gdeuOgHXetHanEUrimVfy/ABic1e40bFrLZn2pKU\naDMltH1STZUUM66sCrBPlYSJi2fo/M7sEtmqKH61BxKDJr67ATzPVQPz2dnR\nz2nylRbl2WfHh+3U1CHAjHiq5hnqUDOmcLU4m9Nz+I3wKq91Linis7WULD7O\nwn10Llcj3hOTIY9FUK6Rt+cwgDGxQQbqE9NEXo77hr88cVh1TVxMnwV4ec8n\nuf/Hjryopef0sj7kAS5GeQlPfKmxZSCMA84x0veRxg70tow9WG+ilXM02tvO\nbqkQwSXU9rnfBiIkrTajthiAc940lSZsjYzRwU+rGZshMiz5UmQjvZhclLTU\nKPlo/EsRmg6mWqT07zZeSdrKxMqK73G/uU/8pExBxk2OJZ8JCbAi7IECUb1N\nKtkKSBVdhnFKEQaN2DsEYQQ5egrGYiKUbWELbelr0aXm1xwZk0QQWiRty5Rw\nIacQ\r\n=QgVa\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCWztdPimrA4wTbv9NIG/UTkan5a+Gr/pFT4XRyLREXmQIgG+SnKL3Pmen0NDS7/071CCjTvwo/0AylPfTEUZTYaxI="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.25.1-alpha.13_1630356066332_0.6066922793033598"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.26.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.26.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json",
        "precompile": "lerna run version --scope $(npm pkg get name) --include-filtered-dependencies",
        "prewatch": "node ../../../scripts/version-update.js"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.0.2"
      },
      "devDependencies": {
        "@opentelemetry/api": "^1.0.2",
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.11",
        "@types/webpack-env": "1.16.2",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "5.2.3",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.5",
        "webpack": "4.46.0"
      },
      "gitHead": "0f5a5bc906a2166c30a4344e460b7206c0b20bac",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.26.0",
      "_nodeVersion": "14.8.0",
      "_npmVersion": "lerna/3.22.1/node@v14.8.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-idDSUTx+LRwJiHhVHhdh45SWow5u9lKNDROKu5AMzsIVPI29utH5FfT9vor8qMM6blxWWvlT22HUNdNMWqUQfQ==",
        "shasum": "6f98a5467140ab97f23f598b26e0e18ad8ec59f3",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.26.0.tgz",
        "fileCount": 111,
        "unpackedSize": 190126,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICJjC0JP4Vpz6Rg/MrpZE+AWXkre+H5n3bRKt/ZM6jXcAiAL8OVudcIchmqf/w5oShw0aTr2XCiH33aRN4DUwfYxNw=="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.26.0_1633455657645_0.49600887734700927"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.27.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.27.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "compile": "tsc --build tsconfig.json tsconfig.esm.json",
        "clean": "tsc --build --clean tsconfig.json tsconfig.esm.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.json tsconfig.esm.json",
        "precompile": "lerna run version --scope $(npm pkg get name) --include-filtered-dependencies",
        "prewatch": "node ../../../scripts/version-update.js"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.0.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "devDependencies": {
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.11",
        "@types/webpack-env": "1.16.2",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "6.3.7",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.3.5",
        "webpack": "4.46.0"
      },
      "gitHead": "f5e227f0cb829df1ca2dc220a3e0e8ae0e607405",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.27.0",
      "_nodeVersion": "14.18.1",
      "_npmVersion": "lerna/3.22.1/node@v14.18.1+x64 (darwin)",
      "dist": {
        "integrity": "sha512-tB79288bwjkdhPNpw4UdOEy3bacVwtol6Que7cAu8KEJ9ULjRfSiwpYEwJY/oER3xZ7zNFz0uiJ7N1jSiotpVA==",
        "shasum": "d8eca344ed1155f3ea8a8133ade827b4bb90efbf",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.27.0.tgz",
        "fileCount": 99,
        "unpackedSize": 164502,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh2Uo3CRA9TVsSAnZWagAAj8UP/2yaNl3Peeod5BxXSWL/\ngouJgzba0cOss8DeIUBQhjI1TPGIdvugAcRh291UOvSBOzy1BsEiU5XqaLKQ\n5QHZ3EFU3POb+81ybZ+kmTgpkPZNg9jAuwSa2SNA3nZAP7MH1S0zt39mi8J3\n1HwVvIen4yRDRCJL4NcnFRacUxzMMyDhnqFO3rJzUtQmkY9c+uhoYTMu3vOm\nN1Js5LPje+1Z4k7Qv0wYyydNdIOcB5QZZYQ9z7KdN6/u5q3sZXr2O7LcD/pu\nrQN0gj2OUbsSl2DFkJF1Cyhd+W+qH7bNnxTc2lOLtRRGlFvwu4rGWDtKVp8F\nsTv+D67fiJOSpwmjWe5pXuw9yLCtP1Ow3frvjtvgDHNqX1WklX4TgjKygtlL\n8QdllPI8Mq1TUSxQIfx+WJ1jS3uc/UgUo0lVQ1Ijlf2HqGXP7NB5+DtTVQze\nL8tF0NMXXIYfCjk9g/SZOKnWffrxaix9UNEx6S2osRy/+5ll3qBbQALgY5AO\nOJwH3ggZ3Ii4f6r9WysXQS2179ayps3DlAIJkglTdMYmQs7gheGf570zmjOB\nBOxt6Ik6wMdY169P9GN9bsnymjmLym1ZC8O7HSoqB9p4kDhxl4+dUEGS+ytV\nmGOdeW7k98EFzF7scH+avMEiC0YjlVztsDO+BLMR307SfW1UZKTmeEqezDJa\nKxnd\r\n=c3yL\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDhuBxXV2Zu2jqM8Eo9RHcHhrKJkdvb6VMzTexFYu7cUgIgLASTZCSWO5Hnc1lnzi6lwWXfy1QQXCkG+tDmSiwmkzM="
          }
        ]
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mayurkale22",
          "email": "mayurkale22@gmail.com"
        },
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        },
        {
          "name": "obecny",
          "email": "bobecny@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.27.0_1636643258239_0.8408278198737598"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.28.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.28.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "esnext": "build/esnext/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/esnext/platform/index.js": "./build/esnext/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "prepublishOnly": "npm run compile",
        "compile": "tsc --build tsconfig.all.json",
        "clean": "tsc --build --clean tsconfig.all.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.all.json",
        "precompile": "lerna run version --scope $(npm pkg get name) --include-dependencies",
        "prewatch": "node ../../../scripts/version-update.js"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.12.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^1.0.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.33",
        "@types/webpack-env": "1.16.3",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "6.3.16",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "8.0.0",
        "typescript": "4.4.4",
        "webpack": "4.46.0"
      },
      "gitHead": "28a177ffe3950c5602a91391af582a7a8c813c7d",
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/sdk-metrics-base \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/sdk-metrics-base\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/modules/_opentelemetry_api_metrics.html\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.28.0",
      "_nodeVersion": "14.18.1",
      "_npmVersion": "lerna/3.22.1/node@v14.18.1+x64 (darwin)",
      "dist": {
        "integrity": "sha512-UcrJqEiV20YTibYXUT0TDBtl4uLh4tMpAYSa1g1780QrVMlsOMAnBrdD3EYTMPog14Zw+2QzPnDJ4X7q67YrSA==",
        "shasum": "698acbb2f570ece49815fca8be6f3070ae41f016",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.28.0.tgz",
        "fileCount": 138,
        "unpackedSize": 209593,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDnqGBUYZW1lnwtUhKtf9pSBnnx0t8z3VaCvbTO4KU7HAiBOFGJ84l3nwJJvle024wPIsIb1u/L7bNsy58XxnuoNGg=="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiZp7wACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmprZA/9GFPxrv94WfXMeWIEWKaGU44MGYHt7lbYk/l1PrXiqrh6BYcA\r\nNLRj0ykiBh/Ya3KsGMVKUYH0uyq/we3W3L+5EXs7rW3uAa3PUWveW2vbQfH9\r\nWP8xxiTmGXsZkQAgfyBHBybnBPimP/eeVl46aNwwCxTYKppITB9dVJ1mqQy/\r\nFcclww8k6B4VXGHLggIkN2lbF5IzAXUqoi6p68bIa2vW0Bx0y1/4XgD8aqqv\r\nss5k25E0Ez98hrDd5EucyEMEKEAo3x2ZD0FDOJjCJ8P6TtEJ6HASeWqwESl5\r\no4aVUZ+UXcrJ3HbGPcfZ94mnJJNhSeSEFBBfX+IxQ/l+t1xCznI8wHu1dIe5\r\n4byS4q13moWn1qcR6J/KvPa2KFu0wkN4f5Oex4hf7zTC5XNeWADfdXqzD3vT\r\nlSWFzEhqVXNY2RapdFzExTwNmaiWRKj7lhu+atekGg1MVe4Y/i/Uy7mH5Kf7\r\njIK2kRutzu9iURUHvzVxPJifAmBqmjkjeCZcPTlpEE1FClC3lrR3wa9BAocm\r\ndW6vxUIwUoz/DmDZH0wMAI12L7TqMQ7di/VGjceAHR6lR9zua2rmQeM5RGU+\r\nruLRW3b5ylQmk2guXpGtdgupkRbItAOr/ktOVNB2LMNUgLQ0pACMQPyFIrxJ\r\nwTwNImO2RjMTfZPKcXb80nuGXXSD2oLz+R4=\r\n=NAvU\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.28.0_1650892528479_0.40299135370167716"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.29.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.29.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "esnext": "build/esnext/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/esnext/platform/index.js": "./build/esnext/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "prepublishOnly": "npm run compile",
        "compile": "tsc --build tsconfig.all.json",
        "clean": "tsc --build --clean tsconfig.all.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.all.json",
        "precompile": "lerna run version --scope $(npm pkg get name) --include-dependencies",
        "prewatch": "node ../../../scripts/version-update.js"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.12.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^1.0.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.33",
        "@types/webpack-env": "1.16.3",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "6.3.16",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "9.0.2",
        "typescript": "4.4.4",
        "webpack": "4.46.0"
      },
      "gitHead": "eda0b092db484855ded8b4837ba7fc19a377c5a7",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.29.0",
      "_nodeVersion": "14.18.1",
      "_npmVersion": "lerna/3.22.1/node@v14.18.1+x64 (darwin)",
      "dist": {
        "integrity": "sha512-sFgfHhiBLP33EQOy8wkGBAGdeqjIOLe5zM6ypPZy/Vgzr2OsnV/LYbjvJynHW3ugGoWabvwQ0tghooC/klsu8w==",
        "shasum": "5f1643d376fad983e6de39b8fd64695bf72b5829",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.29.0.tgz",
        "fileCount": 138,
        "unpackedSize": 230411,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDG+OfWSnx7v7+BLqDusLGOM1qC9NDQw+G639HReu8LlAIgcurUFwqGNK/lsB68Mq6llKukXZBrhrT9XUFPS5oGKzo="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJikSlZACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmomDQ//d2uwLyDHTOVVx6VLQNKlmODGB8/3kzR5KNy+hp84et8WRRsy\r\n+8rKbjX3gQARXgT+Q2P2WL8a9k5hcWkoP5ZUljEtVc/PmMgPw7nL785elWCY\r\nFPJB9wk5+XxILKOYT7W/94+dxIB1n2/sjP9xXGpWsYW/IhAG9QhVBmaCorQa\r\n1x5+mK4rkSWeBtokrauEak2o7mwbqO4M5hDvKtOqWpgFsaLtx5v5UGP3sG4Q\r\nFHXVAq9FPhU9Jsh86P1RIiuB+OJYbo06MKs/TAgG2/A4uwtV096/Sfybm3h4\r\na2tsqhSWMpdFKPscrRTm1gkxQziXXnYx2GxGCJgXQJlICgMeIeBsnBOGXpHe\r\nUitvM2tO/cOGDFIla2GElgdb2NIESdHWFRd/3Nz6qhW3dBSL6YhahRrtZlln\r\n7/3QYl+Zf3n2T+aT/PEk8wlHRRAmqHQv5EONQCNy09TWa7OjtDYfwdPFWO4p\r\nfzGNEoZqHUUVqocHxQ+a3siSuhg2AyWMTKW9mU1SYgEDPzC+IJjLDbUcvEo+\r\nHlXYuVMKH21hLp1VS+HjLiLfrMUK7mbb81/DQmU7WQpZCrfoItM5EXJVW0eX\r\nnC50Nvd6n8mQjLjek+oF72JGe3GjHQyFXGW7uAw8/l5pgo3ZmLHjKsLhR7dv\r\nyClmBAyPBEE3E22R8XNOCm8MlG/fmeT0CZ8=\r\n=g6pr\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.29.0_1653680473629_0.21574570764727086"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.29.1": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.29.1",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "esnext": "build/esnext/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/esnext/platform/index.js": "./build/esnext/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "prepublishOnly": "npm run compile",
        "compile": "tsc --build tsconfig.all.json",
        "clean": "tsc --build --clean tsconfig.all.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.all.json",
        "precompile": "lerna run version --scope $(npm pkg get name) --include-dependencies",
        "prewatch": "node ../../../scripts/version-update.js"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.12.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^1.0.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.33",
        "@types/webpack-env": "1.16.3",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "6.3.16",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "9.0.2",
        "typescript": "4.4.4",
        "webpack": "4.46.0"
      },
      "gitHead": "094f016ac6697fc45ba5d7b5765f5c3e56f18d1e",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.29.1",
      "_nodeVersion": "14.18.1",
      "_npmVersion": "lerna/3.22.1/node@v14.18.1+x64 (darwin)",
      "dist": {
        "integrity": "sha512-wHuoWDPy/Dka3Ni436t9eFSABRr15RXB8GHYdh4rWwjzX52/SX2WSYB0T7rO5jNVJbbJJxvQuVWaLd/og04OfQ==",
        "shasum": "d233b328e3248cadab4d3eae8121e47fb6efa298",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.29.1.tgz",
        "fileCount": 138,
        "unpackedSize": 230411,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDHyjJsu3a5DRT1i2OobNpnJYWgszO6Czr8cO5mVYtDxAIhAKZKBH16TZjOLsiqBNxT9a6Asx/hWTHR7LTljf7d7Fsb"
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJil6woACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmom+w//f0TwMx9qBUidktG42Tn4UK4bi9b3H+U92PtEo1tDTg55C9HN\r\nwt/aNw7jB2qwlbABeRy5OQyKSnhW6IbWsdFEmlfDX+kzlJ1ms2VfhDJvlPx6\r\nC7mciNDzumQd8mdpq+laiI8KyP2gO7CtIgkanWC4LYFZ8pjP1ybSSFEc14rI\r\ngpyU3QwwyzouAzNjT5BREFsRq7ycT5PEFu1Tcj5S+MyLjgAMbIZIcMw8xoUE\r\njP3nlACOQXnUfuT5pzpw3IcpZ2SRavgK+pv9oOTIaXBs7aPmu5EAShc4BdQ9\r\nHVxOuxecSv6n0EtexOek4G0Tk5j6BWzKoumOfWEfyCqD4SBlcTFAQYysNjJk\r\no8epa4JG0sGfXPRtuPwYfHtaZ54QIteBrsOpNOYai393n2X0PJ4oopbkAw68\r\n4CiKsdMr+XCnWW+Uqn6gjfB9HvGW1veYZ1+OeAK8rg8/LiKLD4kBN3xW49jG\r\nYH1olIjr7oB9CocPpTFW2Sywm8S3i9Nk0IkSsxAXJFvI4H9I31EuRn8wIk8j\r\nqpHGfsfxn8W8G2GZqD1I0UGqSvQZvtrc7YhXMxu0vyqFpVdlhuhrN2iUGyop\r\nsy7CMGySGIWw/I+g8ZWG2ie4KL16eYgHIqXu6E7H95GI7EVCZ4zeTgyp7CZ/\r\n6a+xwlKKr5wsvPv+U0fqwaZetn7cVHN/UMI=\r\n=w6UT\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.29.1_1654107176164_0.8205293743263466"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.29.2": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.29.2",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "esnext": "build/esnext/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/esnext/platform/index.js": "./build/esnext/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "prepublishOnly": "npm run compile",
        "compile": "tsc --build tsconfig.all.json",
        "clean": "tsc --build --clean tsconfig.all.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.all.json",
        "precompile": "lerna run version --scope $(npm pkg get name) --include-dependencies",
        "prewatch": "node ../../../scripts/version-update.js"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8.12.0"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^1.0.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.33",
        "@types/webpack-env": "1.16.3",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "6.3.16",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "9.0.2",
        "typescript": "4.4.4",
        "webpack": "4.46.0"
      },
      "gitHead": "51afd54bd63e46d5d530266761144c7be2f6b3a7",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.29.2",
      "_nodeVersion": "14.18.1",
      "_npmVersion": "lerna/3.22.1/node@v14.18.1+x64 (darwin)",
      "dist": {
        "integrity": "sha512-yRdF5beqKuEdsPNoO7ijWCQ9HcyN0Tlgicf8RS6gzGOI54d6Hj7yKquJ6+X9XV+CSRbRWJYb+lOsXyso7uyX2g==",
        "shasum": "daa823e0965754222b49a6ae6133df8b39ff8fd2",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.29.2.tgz",
        "fileCount": 138,
        "unpackedSize": 230411,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQChtUos/b3yC2THgveJu3Wx0qtZ7a7U3tOLKTXlLNuPpgIhANZ1zj1wDswAY51p1vBZkX1TtWA6m3xbxONQVqPkafAm"
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJinmLdACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrOghAAlRLUuU5VPLuMvs2Z9rRLVw8PQu5XSU2j9eKcvv5GVaUeVXlh\r\ncPb+Ki2/1uTgQ7sqHEoy+4PigMcDqJxU2zHy//IdkzJzCAE6qanpUZhksH8H\r\nu237SKa0lsiD9tgMelguWrnnjbONvJkxtoJTK/I+lo48S4Iz4vyGmRYToDiR\r\nZodJQHhcWzyg2uB/c2J3GZbKwRrTiMTvfO4zSC+9bpVih9USBVX8pmgwppZT\r\ndHtRe+XVPpcTZUx+7DhnDMV35H4rTqydG2P/8J8I2Kniu/Sbt87pBWwItqDz\r\nmy1WRALQiom+Elu+ly7sQwe9DxkX4FEB3KmEruGlhGYQHgP9mqlKnOjCSAwd\r\nZ8gvtj4gjeUuwiXDegskuldAts8snbAHLh4cT2jfDYSJy0cst/ql8bwYLijR\r\nMsuIsN6deE6tzm39Nkc55LHptkAqmM2QVdusjBdO+hHWgjgecL+Lx8IofnMd\r\nDMf0pXvfXFJPZ/YtCRsr259ppD8Sw9hPx0KMXDhmXPriMSqIZB3QfMaQ1aWi\r\npVkitqHxLkPaHABY/YUUpFSzpYLDmecNNAOUmDioHAIMFHT5GlQCUxtFvw5z\r\nupEW933g4QQOGvv9qSCo9HvxqoLDWrwFOWurNB8ERuhKye4ofXhmQfmvyqyQ\r\n0ovKvpTk4qy9DX6pWpsuk2NLktCoUy5TwPU=\r\n=J6Ot\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.29.2_1654547165562_0.6285009378795583"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.30.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.30.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "esnext": "build/esnext/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/esnext/platform/index.js": "./build/esnext/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "prepublishOnly": "npm run compile",
        "compile": "tsc --build tsconfig.all.json",
        "clean": "tsc --build --clean tsconfig.all.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.all.json",
        "precompile": "lerna run version --scope $(npm pkg get name) --include-dependencies",
        "prewatch": "node ../../../scripts/version-update.js"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=14"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^1.0.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.33",
        "@types/webpack-env": "1.16.3",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "6.3.16",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "9.0.2",
        "typescript": "4.4.4",
        "webpack": "4.46.0"
      },
      "gitHead": "e39ab883b18636238ef0fd741df4ce5ed53e8d04",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js#readme",
      "_id": "@opentelemetry/api-metrics@0.30.0",
      "_nodeVersion": "14.18.1",
      "_npmVersion": "lerna/3.22.1/node@v14.18.1+x64 (darwin)",
      "dist": {
        "integrity": "sha512-jSb7iiYPY+DSUKIyzfGt0a5K1QGzWY5fSWtUB8Alfi27NhQGHBeuYYC5n9MaBP/HNWw5GpEIhXGEYCF9Pf8IEg==",
        "shasum": "b5defd10756e81d1c7ce8669ff8a8d2465ba0be8",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.30.0.tgz",
        "fileCount": 138,
        "unpackedSize": 230407,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDPSvSJBxau9O7fL1BzR6NMeteLhVpMQmeqD278MZIxhAiBC6J+FJiyGWMgh6Mn8erQ0OLRK2F+dvXLk0bOhXJehEg=="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJixe1kACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrMYhAAhOH/QMmVno4WhAKdxCIcCcPrnIll61Pk1YdxDC95rxcruvbq\r\nqrf8kYCqojeIxpQPczuo7wJLHihOsC54SedCuBYnNNEI3ZfblDt9Vuusq0ZG\r\n2uy9A7Tu+XWPirx6jm3BlAb0lFskJDo5mhfE4ve89z+Rx2qUqBkcsjN90+XJ\r\nz1cgNrWhfojJbcE8yeSOCNwQyH0rmA8rhHjtPvHQxrVrsam7oMFbjLn5FWA8\r\nieYIVy94SZEBiRmT+WDM6PIgJNi35jopgUcfHYIaZ1D9b+KvaXwHmC5c5Lrr\r\nh5TDSbFzLwA7/jUtsUZ4azCKySvA5sVXprbrBKRm5J+eHUGLZLI5jXOfrLPX\r\n295vhY8YpT87pfh8/MJGFLIlQoME0Ce94z0RA8bbZM8dzJj7Yufr/sPFco7r\r\nTuauN5GsuVVGlUaWDTb125I3lyhGLGM2enWtDc3fgi+3OzOgbIGJTsjxC2SJ\r\nuflaF3D21C0lt8GQNOFfvaq7iOa8we/VyRrsW3LVsUNMEjB+ETM0MLpAFoXK\r\noiKbI0XAeIvQyr/pIY5LR1gE8cv7tOP6QpYuY70JTO77WYReH4wfa9UJ7t6c\r\nlNFdcwFMUSeXqUtBYtERyJRV1I6krirgI8yqZ9Nd+iMbMe3Uz/Nyq1rnyu58\r\n0tI4MzasBH5/NwFzlTq7v9pW3Z7tmM2YFA0=\r\n=XxhK\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.30.0_1657138532649_0.885487578854449"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.31.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.31.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "esnext": "build/esnext/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/esnext/platform/index.js": "./build/esnext/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "prepublishOnly": "npm run compile",
        "compile": "tsc --build tsconfig.all.json",
        "clean": "tsc --build --clean tsconfig.all.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.all.json",
        "precompile": "lerna run version --scope $(npm pkg get name) --include-dependencies",
        "prewatch": "node ../../../scripts/version-update.js"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=14"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^1.0.0"
      },
      "devDependencies": {
        "@types/mocha": "8.2.3",
        "@types/node": "14.17.33",
        "@types/webpack-env": "1.16.3",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "6.3.16",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "7.2.0",
        "nyc": "15.1.0",
        "ts-loader": "8.3.0",
        "ts-mocha": "9.0.2",
        "typescript": "4.4.4",
        "webpack": "4.46.0"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js/tree/main/experimental/packages/opentelemetry-api-metrics",
      "gitHead": "776656b6e0cd0fc49a52b734702bc77110e483f1",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "_id": "@opentelemetry/api-metrics@0.31.0",
      "_nodeVersion": "14.18.1",
      "_npmVersion": "lerna/3.22.1/node@v14.18.1+x64 (darwin)",
      "dist": {
        "integrity": "sha512-PcL1x0kZtMie7NsNy67OyMvzLEXqf3xd0TZJKHHPMGTe89oMpNVrD1zJB1kZcwXOxLlHHb6tz21G3vvXPdXyZg==",
        "shasum": "0ed4cf4d7c731f968721c2b303eaf5e9fd42f736",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.31.0.tgz",
        "fileCount": 138,
        "unpackedSize": 233320,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEfDeGpcz+/iqwWUTV8W1r43cGrzAcEHiZRRiYd+De3zAiBZWfd6RU3FIdT10HydTFKoUIReAmb38/pWAmRBWkGPSQ=="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi4FP2ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoZKA/+KQtibXmpwF3Wr1NxTeLvernsU7N+G8aWMQsWnLYdHAqXUnC9\r\nuU847xEadSn7Mr2/s/9E4LffPhIBellfXyCp/eYE7ghGqNF6wglPTF9cQbPC\r\nyc9qPThqDyq+oxGfcw0YPW/vf1Bfc0Ube3h+ubeAyKE66abngfKfAxpdqPPy\r\n5MfuQyG+dUuUTz3DPjhRSeEV8nsrFEyxUoioIUuXY2HGyMo+VN7y/JZATSe5\r\nrgy0gu+PR5ns2icW7VboUH0jtqIYKL79hvdlMGv/Kt1Fpe0Bt0OGP7G+AqJ4\r\nCQ90itiGsayLpPBYqLN9M0frTs9Vi2CGSkvWXhEWq/+PUnwT5Wrh/Wqyddlu\r\nMYM5VTYpLKUfai1PXf15pf3kctWSpnY2zvwDN8rGQ6kIhGBmxG6jmKSA7DLm\r\nj9OsBOsXYk+puLykwaOJNEws9tapYznNHBFSl0YQ7JX+UPSwwpyhdRU44dsC\r\nqGOrRfUSZj/mEiorO1Zx7zaQ25kKoVETj2Z1lNN68izoCNZ19Ld6yY+Gj0pV\r\nqaTBfl039QbZKqTzS6Wz49VVse1cbinvheaRadmYelRXgDMYLVXDoHnS9M/a\r\n2gfvAmjaJCsguhwnBeglLWId0tiPbN/uM1FkaAbwRYG5jWIF6zl9zLpDCh7O\r\nsNlkXVIS8pdRkEUXkaUywQTbuOvD3rtMqU0=\r\n=jE75\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.31.0_1658868725809_0.2607555579082297"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.32.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.32.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "esnext": "build/esnext/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/esnext/platform/index.js": "./build/esnext/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "prepublishOnly": "npm run compile",
        "compile": "tsc --build tsconfig.all.json",
        "clean": "tsc --build --clean tsconfig.all.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.all.json",
        "precompile": "lerna run version --scope $(npm pkg get name) --include-dependencies",
        "prewatch": "node ../../../scripts/version-update.js"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=14"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^1.0.0"
      },
      "devDependencies": {
        "@types/mocha": "9.1.1",
        "@types/node": "18.6.5",
        "@types/webpack-env": "1.16.3",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "6.3.16",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "10.0.0",
        "nyc": "15.1.0",
        "ts-loader": "8.4.0",
        "ts-mocha": "10.0.0",
        "typescript": "4.4.4",
        "webpack": "4.46.0"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js/tree/main/experimental/packages/opentelemetry-api-metrics",
      "gitHead": "a5abee69119cc41d9d34f6beb5c1826eef1ac0dd",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "_id": "@opentelemetry/api-metrics@0.32.0",
      "_nodeVersion": "14.18.1",
      "_npmVersion": "lerna/5.4.3/node@v14.18.1+x64 (darwin)",
      "dist": {
        "integrity": "sha512-g1WLhpG8B6iuDyZJFRGsR+JKyZ94m5LEmY2f+duEJ9Xb4XRlLHrZvh6G34OH6GJ8iDHxfHb/sWjJ1ZpkI9yGMQ==",
        "shasum": "0f09f78491a4b301ddf54a8b8a38ffa99981f645",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.32.0.tgz",
        "fileCount": 138,
        "unpackedSize": 233400,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEGEESEqK44CUU6i+8uznVQgZSf/5HLO+4JgpiiBiFLNAiAV9ILMnG8ZMOkxvdWs5r94gvrHzfd/bBGzSXRNkkYvMA=="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjBmN+ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqFKw//XfUZyB9QVUbYxp4ss25gdqVp4G3lyySp6HY4ZFUfPSCBVqko\r\nYrMc3FnzOPMut6E/6UOBgooYCWOtce7hNzksPyKNrBC74i5ktuWVuBfx0v6K\r\nFRYT8w+gCF1mM9a0WCOgG008jZT6XG8zUfxxJVGcIwp2dOzqg9tKNL3hCrBH\r\nJamjKeBm7AtBbNRtYcXVqNR7kKwJXAmXx6c3aifWbMvjy0Yi5hQ5SE3bmv1q\r\n6qF+70z5fz3tPJT7I7SgdzRCxoZxb6+QP1haySxxMhRoPrSUOpPcDxx4vRml\r\n+3PPuYh+kFSh/ygLhQ3vhum7ZQVEXRjSnCMvhGycMk4aJYNFc0HWNTErpo0C\r\nDEJ5fPhWtZ7SjUpItem7+xsEiJG09bk+VBPfhjdNmJoUwxyfk0XMjIlQVi75\r\nVDQmV16zP2nPFc2Rm0OZJpYJM5yk+JKE3aXUIwAi91+kY+SIpirb9ehnO1nv\r\ngMeVFEFmaCbssiFSyfnhJSfiue9GTO6Dyy8huPumcBCJN/9KUArMjBcGXbih\r\nJ7BGcBvjaL7z7L3ut2yZ2oZonn11AMCyrUPSGuqL/YmOqK91vza5/GGWwpfZ\r\nHBOK4Hn32kOO4TsoCT9OMjttWy5w/xrWeUoUL7Pv1BFOTMuNRHxRp2pww2Iz\r\nbacFMjKbaxFDNJDMSUIoaxwxr0LnA1031K4=\r\n=JVM3\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.32.0_1661363070155_0.4005580801953219"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "0.33.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "0.33.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "esnext": "build/esnext/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/esnext/platform/index.js": "./build/esnext/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "prepublishOnly": "npm run compile",
        "compile": "tsc --build tsconfig.all.json",
        "clean": "tsc --build --clean tsconfig.all.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../../../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../../../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.all.json",
        "precompile": "lerna run version --scope $(npm pkg get name) --include-dependencies",
        "prewatch": "node ../../../scripts/version-update.js"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=14"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^1.0.0"
      },
      "devDependencies": {
        "@types/mocha": "9.1.1",
        "@types/node": "18.6.5",
        "@types/webpack-env": "1.16.3",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "6.3.16",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "10.0.0",
        "nyc": "15.1.0",
        "ts-loader": "8.4.0",
        "ts-mocha": "10.0.0",
        "typescript": "4.4.4",
        "webpack": "4.46.0"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js/tree/main/experimental/packages/opentelemetry-api-metrics",
      "gitHead": "ad88c3d9aa0100fe259b93f4b660e84417b757ac",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "_id": "@opentelemetry/api-metrics@0.33.0",
      "_nodeVersion": "14.18.1",
      "_npmVersion": "lerna/5.4.3/node@v14.18.1+x64 (darwin)",
      "dist": {
        "integrity": "sha512-78evfPRRRnJA6uZ3xuBuS3VZlXTO/LRs+Ff1iv3O/7DgibCtq9k27T6Zlj8yRdJDFmcjcbQrvC0/CpDpWHaZYA==",
        "shasum": "753d355289b7811ad254d6e5b0193bd1b9f23ab0",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-0.33.0.tgz",
        "fileCount": 138,
        "unpackedSize": 244826,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDcrD4C+kgNXiH5HobQi0vFiehwbvofX1K05jpmw/dATAIhAOHF8FzI9KUww2Xg/Yz0KM8K4s1yO/Q3ykz5l4R3TPVL"
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjJGi+ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqPHRAAgPuaZxbEmwCKfatBJjs2UHe/IU4PC9Prla1P6LKBacNEE+0A\r\nwEtUILjyNuqRsl2MZ3vdLX+T3KmzjcrEUYhhlzas9CfdApKMKacKdyAnojTZ\r\n0u1v5Zm9tVlqejeHLBCDAFxBy0ZjXH2Z1Ar+uQtHbc68kaamwqRNKe+Rol73\r\n7ixSk1dNC+aDXvBykirpSqijUcSAC6vKX8Al6JZHbkEY28sv1rlIi+oo8EWK\r\nNGyDsYK85UGOHFOB5dDYVV8i9rvlqUwuLjlXoTOe1C1KbPHH1NvUVyusjcgJ\r\nMnSRkidz2fEJ+W49ykeJWj7QF2zXsc2GvuFBlAI6ErLBwgsm6E2xrwLQ4ND7\r\ng/wp8t03yhOOH6q991FIM+n5Mu9/UBZUodeJlmCmpiOKPyvQA2SW8Nh8php+\r\nbKKKLsc6Ozwp2Dt53OZ54Y9lHJeUMrXWzgzFePVaeODhxuPlX1itOAGrr2+J\r\n+3N9jObHz39Iee8sPvpx2wN9CRlCKGuz7Vnf7467/plMXmDTTZvBByEGVyPK\r\nzB8C8ejrl9Sr0tg68VmU8KWV9sa7IXkGCMNxUjFUOJITA+r1qtZ3kGijvxpn\r\nFVLP9lgjsE2aiHnZWtrBgJakwDkFUvLE4v1G2T6nWh1WqVvSnvjh7c5n2hlj\r\nBdMD5QxLtvLL1pAgP1Cgtst+pW08sEgq4Ow=\r\n=pyoP\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_0.33.0_1663330493806_0.5648002911329744"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    },
    "1.0.0": {
      "name": "@opentelemetry/api-metrics",
      "version": "1.0.0",
      "description": "Public metrics API for OpenTelemetry",
      "main": "build/src/index.js",
      "module": "build/esm/index.js",
      "esnext": "build/esnext/index.js",
      "types": "build/src/index.d.ts",
      "browser": {
        "./src/platform/index.ts": "./src/platform/browser/index.ts",
        "./build/esm/platform/index.js": "./build/esm/platform/browser/index.js",
        "./build/esnext/platform/index.js": "./build/esnext/platform/browser/index.js",
        "./build/src/platform/index.js": "./build/src/platform/browser/index.js"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
      },
      "scripts": {
        "prepublishOnly": "npm run compile",
        "compile": "tsc --build tsconfig.all.json",
        "clean": "tsc --build --clean tsconfig.all.json",
        "test": "nyc ts-mocha -p tsconfig.json test/**/*.test.ts",
        "test:browser": "nyc karma start --single-run",
        "codecov": "nyc report --reporter=json && codecov -f coverage/*.json -p ../",
        "codecov:browser": "nyc report --reporter=json && codecov -f coverage/*.json -p ../",
        "build": "npm run compile",
        "lint": "eslint . --ext .ts",
        "lint:fix": "eslint . --ext .ts --fix",
        "version": "node ../scripts/version-update.js",
        "watch": "tsc --build --watch tsconfig.all.json",
        "precompile": "lerna run version --scope $(npm pkg get name) --include-dependencies",
        "prewatch": "node ../scripts/version-update.js"
      },
      "keywords": [
        "opentelemetry",
        "nodejs",
        "browser",
        "profiling",
        "metrics",
        "stats",
        "monitoring"
      ],
      "author": {
        "name": "OpenTelemetry Authors"
      },
      "license": "Apache-2.0",
      "engines": {
        "node": ">=14"
      },
      "publishConfig": {
        "access": "public"
      },
      "dependencies": {
        "@opentelemetry/api": "^1.0.0"
      },
      "devDependencies": {
        "@types/mocha": "10.0.0",
        "@types/node": "18.6.5",
        "@types/webpack-env": "1.16.3",
        "codecov": "3.8.3",
        "istanbul-instrumenter-loader": "3.0.1",
        "karma": "6.3.16",
        "karma-chrome-launcher": "3.1.0",
        "karma-coverage-istanbul-reporter": "3.0.3",
        "karma-mocha": "2.0.1",
        "karma-spec-reporter": "0.0.32",
        "karma-webpack": "4.0.2",
        "mocha": "10.0.0",
        "nyc": "15.1.0",
        "ts-loader": "8.4.0",
        "ts-mocha": "10.0.0",
        "typescript": "4.4.4",
        "webpack": "4.46.0"
      },
      "homepage": "https://github.com/open-telemetry/opentelemetry-js/tree/main/experimental/packages/opentelemetry-api-metrics",
      "sideEffects": false,
      "readme": "# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![Apache License][license-image]][license-image]\n\n**Note: This is an experimental package under active development. New releases may include breaking changes.**\n\nThis package provides everything needed to interact with the unstable OpenTelemetry Metrics API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Beta Software - Use at your own risk\n\nThe metrics API is considered alpha software and there is no guarantee of stability or long-term support. When the API is stabilized, it will be made available and supported long-term in the `@opentelemetry/api` package and this package will be deprecated.\n\n## Quick Start\n\nTo get started you need to install the SDK and instrumentations, create a MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/api-metrics \\\n    @opentelemetry/sdk-metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\nconst { MeterProvider } = require(\"@opentelemetry/sdk-metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\n// The Prometheus exporter runs an HTTP server which the Prometheus backend\n// scrapes to collect metrics.\nconst exporter = new PrometheusExporter({ startServer: true });\n// Creates MeterProvider and installs the exporter as a MetricReader\nconst meterProvider = new MeterProvider();\nmeterProvider.addMetricReader(exporter);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api-metrics` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Metrics API Documentation][metrics-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api-metrics\");\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api-metrics\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi-metrics.svg\n\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/modules/_opentelemetry_api_metrics.html\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n",
      "readmeFilename": "README.md",
      "gitHead": "e9347e4671579d18fb62da56836d43802cc64453",
      "bugs": {
        "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
      },
      "_id": "@opentelemetry/api-metrics@1.0.0",
      "_nodeVersion": "14.18.1",
      "_npmVersion": "8.1.2",
      "dist": {
        "integrity": "sha512-aJqINtj0xDXxoWm3RYeUCNDPrqRSabJzP7Frk04R4UgeKQElRhQbrNWmey62r+c57niL++2cyb71Bdj6dyF1HA==",
        "shasum": "ed23da568f765fd9586adddb4d1c2a0af7d22fbc",
        "tarball": "https://registry.npmjs.org/@opentelemetry/api-metrics/-/api-metrics-1.0.0.tgz",
        "fileCount": 147,
        "unpackedSize": 290141,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHhkDzAMZKLMqQVYDAG93Piy+ZZq8S4YH8BtZkU8FhVSAiEA7u2GPjQvJCY9t4u1A8qLt+H1mQLnDXu6jfRu49ELftk="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjWtkLACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqU3Q//dbKw1ttSG8aIJPhph4kSCgLjwdXrFnLX8mzsQbzrL7S8ayJP\r\nVtkmAE7EipDtrtpaDtdclCQmHC8kGdiniZAZS9PIiKzvTqJNXCUhAiZB5a+c\r\nWVdn20JVFMbosP1bko41ksP60Kr9gJoBjsI8cba7gXeocWJeNwDAaDmwm+VV\r\nqaGEBrHqBpYy3EeW4Wu+w1t/CXvP5sWHif1zpOBWvUx4GHCFA4UEIqLbHxl9\r\nEz1OpGRaCoy7675Qi7yW0h/AJp9KYgMAACo6MYyNBykI41MJSJT10t/JqrlG\r\nc8D9JmM/17qquBYIO7+rjqP0nPWii5p0KV/wpaVSrbIewjy3K5CdgolLKE25\r\nXs17czSPczct2Mxr0EX8oGXl7GOxyxYgkxJhACj9yJjc0vDhThssmpRl4JMu\r\nHO/HTfqIRJHSbIpI76z6cCmkIXHqt6pgxw5kT3M83odxVDhEyMYRUnVH4jT1\r\nY3bs5ltncBg2qUMaSl5oF8vMuIpxRYYTjg1sXDZEp6KxQB7dog4kYc7bFWhm\r\nZz4jgWiJCgUisgFL3TDQbPs+gUfLdnmbTZC44lKI5PkVjmSkQwZT8IRTtlr1\r\nvlym+1q0boQSaIp+BwKygHGpjTXf2SGSEhTK4/yBeW5zZ1kNoIEHFEHq8ZRR\r\ncZLeTxbA2+cARo8z+2KdlS3NWFE8cHelDds=\r\n=U1pn\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "dyladan",
        "email": "dyladan@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "bogdandrutu",
          "email": "bogdandrutu@gmail.com"
        },
        {
          "name": "dyladan",
          "email": "dyladan@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/api-metrics_1.0.0_1666898187352_0.6992019053440757"
      },
      "_hasShrinkwrap": false,
      "deprecated": "Please use @opentelemetry/api >= 1.3.0"
    }
  },
  "time": {
    "created": "2021-01-21T22:19:57.829Z",
    "0.15.0": "2021-01-21T22:19:58.210Z",
    "modified": "2023-05-16T04:51:00.917Z",
    "0.16.0": "2021-02-01T22:33:22.349Z",
    "0.16.1-alpha.11": "2021-02-08T16:17:48.271Z",
    "0.16.1-alpha.14": "2021-02-10T16:05:53.345Z",
    "0.16.1-alpha.15": "2021-02-10T22:17:57.973Z",
    "0.16.1-alpha.20": "2021-02-17T20:51:47.437Z",
    "0.17.0": "2021-02-17T21:16:00.962Z",
    "0.17.1-alpha.21": "2021-02-17T21:16:38.088Z",
    "0.17.1-alpha.5": "2021-02-24T17:19:25.600Z",
    "0.17.1-alpha.8": "2021-03-01T13:37:54.315Z",
    "0.18.1-alpha.12": "2021-03-02T13:53:39.410Z",
    "0.18.0": "2021-03-02T14:00:58.317Z",
    "0.18.1-alpha.20": "2021-03-24T13:10:37.870Z",
    "0.18.1-alpha.21": "2021-03-24T14:12:32.092Z",
    "0.18.1-alpha.24": "2021-03-24T19:38:20.763Z",
    "0.18.2-alpha.81": "2021-03-29T19:51:36.953Z",
    "0.18.1": "2021-03-29T20:03:51.459Z",
    "0.18.2-alpha.1": "2021-03-30T13:05:51.797Z",
    "0.18.3-alpha.2": "2021-03-30T15:26:48.552Z",
    "0.18.2": "2021-03-30T16:15:41.356Z",
    "0.18.3-alpha.1": "2021-03-30T17:29:16.422Z",
    "0.18.3-alpha.4": "2021-04-05T16:37:33.766Z",
    "0.18.3-alpha.5": "2021-04-05T17:54:07.440Z",
    "0.18.3-alpha.7": "2021-04-07T16:12:06.270Z",
    "0.18.3-alpha.25": "2021-04-12T19:42:14.915Z",
    "0.19.1-alpha.36": "2021-04-22T12:19:32.691Z",
    "0.19.0": "2021-04-22T12:28:40.844Z",
    "0.19.1-alpha.37": "2021-04-22T18:15:38.483Z",
    "0.19.1-alpha.39": "2021-04-22T18:44:49.749Z",
    "0.19.1-alpha.42": "2021-04-26T19:00:36.090Z",
    "0.19.1-alpha.11": "2021-04-29T21:06:52.980Z",
    "0.19.1-alpha.31": "2021-05-19T18:06:40.840Z",
    "0.19.1-alpha.43": "2021-06-01T19:45:37.986Z",
    "0.20.1-alpha.49": "2021-06-03T17:09:38.061Z",
    "0.20.0": "2021-06-03T18:28:25.078Z",
    "0.20.1-alpha.3": "2021-06-05T08:28:47.775Z",
    "0.20.1-alpha.4": "2021-06-08T13:27:34.819Z",
    "0.21.1-alpha.7": "2021-06-10T17:25:49.418Z",
    "0.21.0": "2021-06-10T18:29:39.448Z",
    "0.21.1-alpha.1": "2021-06-12T08:24:21.199Z",
    "0.22.1-alpha.5": "2021-06-17T17:04:56.788Z",
    "0.22.0": "2021-06-17T17:58:29.082Z",
    "0.22.1-alpha.13": "2021-06-30T18:40:07.816Z",
    "0.23.1-alpha.17": "2021-06-30T20:07:20.703Z",
    "0.23.0": "2021-06-30T20:14:44.222Z",
    "0.23.1-alpha.18": "2021-07-02T14:37:50.659Z",
    "0.23.1-alpha.15": "2021-07-17T09:17:51.702Z",
    "0.23.1-alpha.23": "2021-07-23T17:45:56.833Z",
    "0.24.1-alpha.31": "2021-07-28T14:06:44.699Z",
    "0.24.0": "2021-07-28T14:13:53.475Z",
    "0.24.1-alpha.1": "2021-07-30T19:42:19.003Z",
    "0.24.1-alpha.4": "2021-08-05T19:27:58.664Z",
    "0.24.1-alpha.5": "2021-08-06T11:31:14.364Z",
    "0.24.1-alpha.6": "2021-08-06T13:37:46.010Z",
    "0.25.1-alpha.21": "2021-08-18T20:16:20.761Z",
    "0.25.0": "2021-08-18T21:16:36.636Z",
    "0.25.1-alpha.4": "2021-08-24T19:32:55.597Z",
    "0.25.1-alpha.13": "2021-08-30T20:41:06.552Z",
    "0.26.0": "2021-10-05T17:40:57.808Z",
    "0.27.0": "2021-11-11T15:07:38.398Z",
    "0.28.0": "2022-04-25T13:15:28.677Z",
    "0.29.0": "2022-05-27T19:41:13.839Z",
    "0.29.1": "2022-06-01T18:12:56.392Z",
    "0.29.2": "2022-06-06T20:26:05.720Z",
    "0.30.0": "2022-07-06T20:15:32.853Z",
    "0.31.0": "2022-07-26T20:52:05.990Z",
    "0.32.0": "2022-08-24T17:44:30.373Z",
    "0.33.0": "2022-09-16T12:14:54.034Z",
    "1.0.0": "2022-10-27T19:16:27.539Z"
  },
  "maintainers": [
    {
      "email": "marc.pichler@dynatrace.com",
      "name": "pichlermarc"
    },
    {
      "email": "bogdandrutu@gmail.com",
      "name": "bogdandrutu"
    },
    {
      "email": "dyladan@gmail.com",
      "name": "dyladan"
    }
  ],
  "description": "Public metrics API for OpenTelemetry",
  "homepage": "https://github.com/open-telemetry/opentelemetry-js/tree/main/experimental/packages/opentelemetry-api-metrics",
  "keywords": [
    "opentelemetry",
    "nodejs",
    "browser",
    "profiling",
    "metrics",
    "stats",
    "monitoring"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/open-telemetry/opentelemetry-js.git"
  },
  "author": {
    "name": "OpenTelemetry Authors"
  },
  "bugs": {
    "url": "https://github.com/open-telemetry/opentelemetry-js/issues"
  },
  "license": "Apache-2.0",
  "readme": "",
  "readmeFilename": ""
}