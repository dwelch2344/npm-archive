{
  "_id": "@semantic-release/exec",
  "_rev": "79-88f87f3cfccd7707e493198ea8b5a90d",
  "name": "@semantic-release/exec",
  "description": "semantic-release plugin to run custom shell commands",
  "dist-tags": {
    "latest": "6.0.3",
    "next": "3.3.8",
    "beta": "3.4.0-beta.10"
  },
  "versions": {
    "1.0.0": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "1.0.0",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/git/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.8.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.24.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "eslint-config-prettier": "^2.3.0",
        "eslint-plugin-prettier": "^2.3.0",
        "nyc": "^11.1.0",
        "prettier": "~1.8.2",
        "semantic-release": "^11.0.0",
        "sinon": "^4.1.2",
        "xo": "^0.18.2"
      },
      "engines": {
        "node": ">=4"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/git#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "prettier": {
        "printWidth": 120,
        "singleQuote": true,
        "bracketSpacing": false,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/git.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "extends": [
          "prettier"
        ],
        "plugins": [
          "prettier"
        ],
        "rules": {
          "prettier/prettier": 2
        }
      },
      "gitHead": "2ac206f677295e173906121ce22858757c76721a",
      "_id": "@semantic-release/exec@1.0.0",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "9.3.0",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-t75KNQqw7x5jkzi1Zy3L+CZTS6U+IhBCumXGVNGSblvK8AhEyIcUaizFPetuShBzVsZbrrwmA+m1yLIHFhz0Fg==",
        "shasum": "4d99e0f83b318e0bab72fc0a0264073c6617bb30",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-1.0.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD/gbZhpP1nNcG3pFzLiP/Q2+Sw2gYAxZB6nsl+4dAZygIhALyUnzu+xj3VPzcGaQiAhcyRzOqV/ynYUAgLE+rKvIZ5"
          }
        ]
      },
      "maintainers": [
        {
          "name": "semantic-release-bot",
          "email": "semantic-release@boennemann.me"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec-1.0.0.tgz_1513873054924_0.3725581634789705"
      },
      "directories": {}
    },
    "1.0.1": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "1.0.1",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.8.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.24.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "eslint-config-prettier": "^2.3.0",
        "eslint-plugin-prettier": "^2.3.0",
        "nyc": "^11.1.0",
        "prettier": "~1.8.2",
        "semantic-release": "^11.0.0",
        "sinon": "^4.1.2",
        "xo": "^0.18.2"
      },
      "engines": {
        "node": ">=4"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "prettier": {
        "printWidth": 120,
        "singleQuote": true,
        "bracketSpacing": false,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "extends": [
          "prettier"
        ],
        "plugins": [
          "prettier"
        ],
        "rules": {
          "prettier/prettier": 2
        }
      },
      "gitHead": "8a8881112a7fd469e629bf51dd751b56ece54910",
      "_id": "@semantic-release/exec@1.0.1",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "9.3.0",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-YFnBT40jN0K807yqYnCPtJOl0dvcV/bMSmwcjTI7JgqVufmQAOM7KB57bY2jxgzUUyhutdO9VDM7FzmBBFWzmA==",
        "shasum": "5eef1b8d7dbc152097051e2bf7894a6a7fae7ca6",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-1.0.1.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCrWQYaA6VYQtXG1OG4BjE4HMydj8trCobwkxPOukbcRAIhAMhN+KEz4ksqTKhjKUnMmlk6Go28Kj//B5DFRUfLXAhT"
          }
        ]
      },
      "maintainers": [
        {
          "name": "gr2m",
          "email": "gregor@martynus.net"
        },
        {
          "name": "christophwitzko",
          "email": "npm@christophwitzko.com"
        },
        {
          "name": "boennemann",
          "email": "stephan@boennemann.me"
        },
        {
          "name": "semantic-release-bot",
          "email": "semantic-release@boennemann.me"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec-1.0.1.tgz_1513873656401_0.1075721806846559"
      },
      "directories": {}
    },
    "1.0.2": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "1.0.2",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.9.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.24.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "eslint-config-prettier": "^2.3.0",
        "eslint-plugin-prettier": "^2.3.0",
        "nyc": "^11.1.0",
        "prettier": "~1.10.0",
        "semantic-release": "^11.0.0",
        "sinon": "^4.1.2",
        "xo": "^0.18.2"
      },
      "engines": {
        "node": ">=4"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "prettier": {
        "printWidth": 120,
        "singleQuote": true,
        "bracketSpacing": false,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "extends": [
          "prettier"
        ],
        "plugins": [
          "prettier"
        ],
        "rules": {
          "prettier/prettier": 2
        }
      },
      "gitHead": "1a81bbf7846b18ed4829898d7f0929f3451c4b49",
      "_id": "@semantic-release/exec@1.0.2",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "9.4.0",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-sRXpuqArJpdC5STpKDu5anwD+o7pSksU/81bqgkJv8g/R9QLI+FLvqEIiVFyUhx3vy+AWn9I4WOI875n5MCDCg==",
        "shasum": "655405003d7e694b66ffcb7658dfa59ce9b141bc",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-1.0.2.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDPgK+BbLBZuFqgeM4P/6iB0A4WS4hWs2nyX4YVHDttNAiEAvH9ny6aRhRBuf0Iguy0XDb8CfoSb79bMKV4E3Qcnoyo="
          }
        ]
      },
      "maintainers": [
        {
          "name": "gr2m",
          "email": "gregor@martynus.net"
        },
        {
          "name": "christophwitzko",
          "email": "npm@christophwitzko.com"
        },
        {
          "name": "boennemann",
          "email": "stephan@boennemann.me"
        },
        {
          "name": "semantic-release-bot",
          "email": "semantic-release@boennemann.me"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec-1.0.2.tgz_1515766772742_0.16806350462138653"
      },
      "directories": {}
    },
    "2.0.0": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "2.0.0",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.9.0",
        "lodash": "^4.17.4"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "eslint-config-prettier": "^2.3.0",
        "eslint-plugin-prettier": "^2.3.0",
        "nyc": "^11.1.0",
        "prettier": "~1.10.0",
        "semantic-release": "^12.2.2",
        "sinon": "^4.1.2",
        "xo": "^0.18.2"
      },
      "engines": {
        "node": ">=4"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "prettier": {
        "printWidth": 120,
        "singleQuote": true,
        "bracketSpacing": false,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "extends": [
          "prettier"
        ],
        "plugins": [
          "prettier"
        ],
        "rules": {
          "prettier/prettier": 2
        }
      },
      "gitHead": "adfa7736d8538335bb9b2cca8c5eaa8088a04562",
      "_id": "@semantic-release/exec@2.0.0",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-hjdJFrMtr54lXFqIuvHY5QE12ftvn4nIp2PLBXHrYfJ0IgZkvznwnoxaYTGTq1OchZc71WpemnTwzkDkU7pJLA==",
        "shasum": "09e4ec2d1ceb527f143fa39288d81b61f8478568",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-2.0.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCaO+tE5gAZu8YTlH5drnDN5FnFTumNzqDpfv7gmD59mQIgeBFBuCSyXiwQSgPMZpB4mngn2L8frdbVBDDFJ42JmJQ="
          }
        ]
      },
      "maintainers": [
        {
          "name": "gr2m",
          "email": "gregor@martynus.net"
        },
        {
          "name": "christophwitzko",
          "email": "npm@christophwitzko.com"
        },
        {
          "name": "boennemann",
          "email": "stephan@boennemann.me"
        },
        {
          "name": "semantic-release-bot",
          "email": "semantic-release@boennemann.me"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec-2.0.0.tgz_1517088638574_0.7958150580525398"
      },
      "directories": {}
    },
    "2.0.1": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "2.0.1",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.9.0",
        "lodash": "^4.17.4"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "eslint-config-prettier": "^2.3.0",
        "eslint-plugin-prettier": "^2.3.0",
        "nyc": "^11.1.0",
        "prettier": "~1.10.0",
        "semantic-release": "^12.2.2",
        "sinon": "^4.1.2",
        "xo": "^0.18.2"
      },
      "engines": {
        "node": ">=8.3"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": "13.x.x"
      },
      "prettier": {
        "printWidth": 120,
        "singleQuote": true,
        "bracketSpacing": false,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "extends": [
          "prettier"
        ],
        "plugins": [
          "prettier"
        ],
        "rules": {
          "prettier/prettier": 2
        }
      },
      "gitHead": "0ffe41d23bb60864f4c6800c2466338f9aa1c237",
      "_id": "@semantic-release/exec@2.0.1",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-bMq0pvu0LARiD8mo0qn/JJTU0+2QDgitrqn/fAukff6UShNaUiGyUvErIXTm0YX0iHBVU3ZDIoq4Qh+GJWMXmg==",
        "shasum": "9c31cb8fee532b03bda99b000e4d3d37d6e11ecd",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-2.0.1.tgz",
        "fileCount": 6,
        "unpackedSize": 11461,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDxINp9GB/2DqVWEZQvBltndcbw1xRlHqHLpSNsQqsieQIhAJf/WpRRF/+Ep47V+hdSnAACdIvX08s4PX8vuuWFO5cb"
          }
        ]
      },
      "maintainers": [
        {
          "name": "boennemann",
          "email": "stephan@boennemann.me"
        },
        {
          "name": "christophwitzko",
          "email": "npm@christophwitzko.com"
        },
        {
          "name": "gr2m",
          "email": "gregor@martynus.net"
        },
        {
          "name": "semantic-release-bot",
          "email": "semantic-release@boennemann.me"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_2.0.1_1518217188826_0.7796379332374241"
      },
      "_hasShrinkwrap": false
    },
    "2.1.0": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "2.1.0",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.9.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "eslint-config-prettier": "^2.3.0",
        "eslint-plugin-prettier": "^2.3.0",
        "nyc": "^11.1.0",
        "prettier": "~1.10.0",
        "semantic-release": "^12.2.2",
        "sinon": "^4.1.2",
        "xo": "^0.18.2"
      },
      "engines": {
        "node": ">=8.3"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": "13.x.x"
      },
      "prettier": {
        "printWidth": 120,
        "singleQuote": true,
        "bracketSpacing": false,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "extends": [
          "prettier"
        ],
        "plugins": [
          "prettier"
        ],
        "rules": {
          "prettier/prettier": 2
        }
      },
      "gitHead": "c0b9a50ce36a1c770640be97b5cc8f20670e78e1",
      "readme": "# @semantic-release/exec\n\nSet of [semantic-release](https://github.com/semantic-release/semantic-release) plugins to execute custom shell commands.\n\n[![Travis](https://img.shields.io/travis/semantic-release/exec.svg)](https://travis-ci.org/semantic-release/exec)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/exec.svg)](https://codecov.io/gh/semantic-release/exec)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/exec.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n## verifyConditions\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommits\n\nExecute a shell command to determine the type release.\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyRelease\n\nExecute a shell command to verifying a release that was determined before and is about to be published.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotes\n\nExecute a shell command to generate the release note.\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## publish\n\nExecute a shell command to publish the release.\n\n| Command property | Description                                                                                                                                               |\n|------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                       |\n| `stdout`         | Only the `release` information must be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). |\n| `stderr`         | Can be used for logging.                                                                                                                                  |\n\n## success\n\nExecute a shell command to notify of a successful release.\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## fail\n\nExecute a shell command to notify of a failed release.\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## Configuration\n\n### Options\n\n| Options | Description                                    |\n|---------|------------------------------------------------|\n| `cmd`   | The shell command to execute. See [cmd](#cmd). |\n\n#### `cmd`\n\nThe shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objets passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n##### `cmd` examples\n\n```json\n{\n  \"release\": {\n    \"publish\": [\n      {\n        \"path\": \"@semantic-release/exec\",\n        \"cmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\",\n      },\n      \"@semantic-release/npm\",\n      \"@semantic-release/github\"\n    ]\n  }\n}\n```\n\nThis will execute the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`).\n\n### Usage\n\nOptions can be set within the plugin definition in the `semantic-release` configuration file:\n\n```json\n{\n  \"release\": {\n    \"verifyConditions\": [\n      \"@semantic-release/npm\",\n      {\n        \"path\": \"@semantic-release/exec\",\n        \"cmd\": \"./verify.sh\",\n      }\n    ],\n    \"publish\": [\n      \"@semantic-release/npm\",\n      {\n        \"path\": \"@semantic-release/exec\",\n        \"cmd\": \"./publish.sh ${nextRelease.version}\",\n      },\n      \"@semantic-release/github\"\n    ]\n  }\n}\n```\n",
      "readmeFilename": "README.md",
      "_id": "@semantic-release/exec@2.1.0",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-sICknqzfKuXq+HfzJZiga79z3svYT9PBGxYDLhB4iXKBEsTKM9lHDgtlJv3kLkj72V5FZthKlKYOpm1DHbBv+w==",
        "shasum": "0ae17f2a7e04260eb801a30585c0f62339710e9a",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-2.1.0.tgz",
        "fileCount": 6,
        "unpackedSize": 13516,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDIerQPTXf/h2heLiZWNIVTUgsKE7LD/XNl6Ae9Otm5NgIhANVzo9Lj02TrkLju/gVypZm8d4estvs7o8oYfGusqwfk"
          }
        ]
      },
      "maintainers": [
        {
          "name": "boennemann",
          "email": "stephan@boennemann.me"
        },
        {
          "name": "christophwitzko",
          "email": "npm@christophwitzko.com"
        },
        {
          "name": "gr2m",
          "email": "gregor@martynus.net"
        },
        {
          "name": "semantic-release-bot",
          "email": "semantic-release@boennemann.me"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_2.1.0_1518494274172_0.09800633650546664"
      },
      "_hasShrinkwrap": false
    },
    "2.1.1": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "2.1.1",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.9.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "eslint-config-prettier": "^2.3.0",
        "eslint-plugin-prettier": "^2.3.0",
        "nyc": "^11.1.0",
        "prettier": "~1.10.0",
        "semantic-release": "^12.2.2",
        "sinon": "^4.1.2",
        "xo": "^0.18.2"
      },
      "engines": {
        "node": ">=8.3"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=13.0.0 <15.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "singleQuote": true,
        "bracketSpacing": false,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "extends": [
          "prettier"
        ],
        "plugins": [
          "prettier"
        ],
        "rules": {
          "prettier/prettier": 2
        }
      },
      "gitHead": "f92792102d9c9246633b9f4c68cabead34bbf8f5",
      "readme": "# @semantic-release/exec\n\nSet of [semantic-release](https://github.com/semantic-release/semantic-release) plugins to execute custom shell commands.\n\n[![Travis](https://img.shields.io/travis/semantic-release/exec.svg)](https://travis-ci.org/semantic-release/exec)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/exec.svg)](https://codecov.io/gh/semantic-release/exec)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/exec.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n## verifyConditions\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommits\n\nExecute a shell command to determine the type release.\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyRelease\n\nExecute a shell command to verifying a release that was determined before and is about to be published.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotes\n\nExecute a shell command to generate the release note.\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## publish\n\nExecute a shell command to publish the release.\n\n| Command property | Description                                                                                                                                               |\n|------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                       |\n| `stdout`         | Only the `release` information must be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). |\n| `stderr`         | Can be used for logging.                                                                                                                                  |\n\n## success\n\nExecute a shell command to notify of a successful release.\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## fail\n\nExecute a shell command to notify of a failed release.\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## Configuration\n\n### Options\n\n| Options | Description                                    |\n|---------|------------------------------------------------|\n| `cmd`   | The shell command to execute. See [cmd](#cmd). |\n\n#### `cmd`\n\nThe shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objets passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n##### `cmd` examples\n\n```json\n{\n  \"release\": {\n    \"publish\": [\n      {\n        \"path\": \"@semantic-release/exec\",\n        \"cmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\",\n      },\n      \"@semantic-release/npm\",\n      \"@semantic-release/github\"\n    ]\n  }\n}\n```\n\nThis will execute the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`).\n\n### Usage\n\nOptions can be set within the plugin definition in the `semantic-release` configuration file:\n\n```json\n{\n  \"release\": {\n    \"verifyConditions\": [\n      \"@semantic-release/npm\",\n      {\n        \"path\": \"@semantic-release/exec\",\n        \"cmd\": \"./verify.sh\",\n      }\n    ],\n    \"publish\": [\n      \"@semantic-release/npm\",\n      {\n        \"path\": \"@semantic-release/exec\",\n        \"cmd\": \"./publish.sh ${nextRelease.version}\",\n      },\n      \"@semantic-release/github\"\n    ]\n  }\n}\n```\n",
      "readmeFilename": "README.md",
      "_id": "@semantic-release/exec@2.1.1",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-Tdu3Rk4W8GGqTkTiRYF5lUuV+7vQQmtixV/crFBvZb2cxaLXJdpH64Cd+3AL21tW7kSUccC6flFKstMtbTsbBw==",
        "shasum": "fd42171be26eefc25b99ba540909f80572c8ecc8",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-2.1.1.tgz",
        "fileCount": 6,
        "unpackedSize": 13526,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCvYjUPCj1jHSulR6Q0jM5alB/gHiNBo6W56ezgiiAm0wIgT5vxTaUnWKb+Nux2Ya3sbFCaclA45k6iUdL3FufIUos="
          }
        ]
      },
      "maintainers": [
        {
          "name": "boennemann",
          "email": "stephan@boennemann.me"
        },
        {
          "name": "christophwitzko",
          "email": "npm@christophwitzko.com"
        },
        {
          "name": "gr2m",
          "email": "gregor@martynus.net"
        },
        {
          "name": "semantic-release-bot",
          "email": "semantic-release@boennemann.me"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_2.1.1_1518750577136_0.14383100010584493"
      },
      "_hasShrinkwrap": false
    },
    "2.2.0": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "2.2.0",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.9.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^11.1.0",
        "semantic-release": "^12.2.2",
        "sinon": "^4.1.2",
        "xo": "^0.20.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=13.0.0 <15.0.0"
      },
      "prettier": {
        "printWidth": 120
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "7ac578cda991f25bc684d878751b07fdd9837f76",
      "readme": "# @semantic-release/exec\n\nSet of [semantic-release](https://github.com/semantic-release/semantic-release) plugins to execute custom shell commands.\n\n[![Travis](https://img.shields.io/travis/semantic-release/exec.svg)](https://travis-ci.org/semantic-release/exec)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/exec.svg)](https://codecov.io/gh/semantic-release/exec)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/exec.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n## verifyConditions\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommits\n\nExecute a shell command to determine the type release.\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyRelease\n\nExecute a shell command to verifying a release that was determined before and is about to be published.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotes\n\nExecute a shell command to generate the release note.\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## prepare\n\nExecute a shell command to prepare the release.\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## publish\n\nExecute a shell command to publish the release.\n\n| Command property | Description                                                                                                                                               |\n|------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                       |\n| `stdout`         | Only the `release` information must be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). |\n| `stderr`         | Can be used for logging.                                                                                                                                  |\n\n## success\n\nExecute a shell command to notify of a successful release.\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## fail\n\nExecute a shell command to notify of a failed release.\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## Configuration\n\n### Options\n\n| Options | Description                                    |\n|---------|------------------------------------------------|\n| `cmd`   | The shell command to execute. See [cmd](#cmd). |\n\n#### `cmd`\n\nThe shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objets passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n##### `cmd` examples\n\n```json\n{\n  \"release\": {\n    \"publish\": [\n      {\n        \"path\": \"@semantic-release/exec\",\n        \"cmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\",\n      },\n      \"@semantic-release/npm\",\n      \"@semantic-release/github\"\n    ]\n  }\n}\n```\n\nThis will execute the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`).\n\n### Usage\n\nOptions can be set within the plugin definition in the `semantic-release` configuration file:\n\n```json\n{\n  \"release\": {\n    \"verifyConditions\": [\n      \"@semantic-release/npm\",\n      {\n        \"path\": \"@semantic-release/exec\",\n        \"cmd\": \"./verify.sh\",\n      }\n    ],\n    \"publish\": [\n      \"@semantic-release/npm\",\n      {\n        \"path\": \"@semantic-release/exec\",\n        \"cmd\": \"./publish.sh ${nextRelease.version}\",\n      },\n      \"@semantic-release/github\"\n    ]\n  }\n}\n```\n",
      "readmeFilename": "README.md",
      "_id": "@semantic-release/exec@2.2.0",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-x4c9oaIbS6NIm+aN9qneggTly7KRrCAPtEE8aoiedOKZT0cualcl6g/yPVVBPT9IzzaAyZ7OYn9rUu1IzHAN5Q==",
        "shasum": "46b69b5507f0c6a6f0a5b61c03385c2249cce195",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-2.2.0.tgz",
        "fileCount": 6,
        "unpackedSize": 14122,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDea2X5Dl1mVao/QBkzsnwwsXJqYw7yTYpX9rqi4MjSqgIhAOgAaFOrEZUCfFf5QF/lENSCflRLy3xg91/tl108DS+B"
          }
        ]
      },
      "maintainers": [
        {
          "name": "boennemann",
          "email": "stephan@boennemann.me"
        },
        {
          "name": "christophwitzko",
          "email": "npm@christophwitzko.com"
        },
        {
          "name": "gr2m",
          "email": "gregor@martynus.net"
        },
        {
          "name": "semantic-release-bot",
          "email": "semantic-release@boennemann.me"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_2.2.0_1519017039510_0.5898047177715318"
      },
      "_hasShrinkwrap": false
    },
    "2.2.1": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "2.2.1",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.9.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^11.1.0",
        "semantic-release": "^12.2.2",
        "sinon": "^4.1.2",
        "xo": "^0.20.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=13.0.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "338d3e6e266973f886f500c361bdd926428d9db0",
      "_id": "@semantic-release/exec@2.2.1",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-Y3f1HqwOQ0z3GUE9rC7/OkrxHYynmKH2kKH+mkpKlakw1SJftlIOQ+3nhyFYR4+czCyKDE0blDRHBHVdX9zwzQ==",
        "shasum": "ab3eff723e551dde01b4ce91b79229e8e366910a",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-2.2.1.tgz",
        "fileCount": 6,
        "unpackedSize": 14122,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDPapdf+xswt6TzkZa1TBV/7CENPF7FQ1tlwTPpRZPhfwIgPZwFAlLQVNi4y6YK+9FISobSMJth8kgoz4sPjj9QIYg="
          }
        ]
      },
      "maintainers": [
        {
          "name": "boennemann",
          "email": "stephan@boennemann.me"
        },
        {
          "name": "christophwitzko",
          "email": "npm@christophwitzko.com"
        },
        {
          "name": "gr2m",
          "email": "gregor@martynus.net"
        },
        {
          "name": "semantic-release-bot",
          "email": "semantic-release@boennemann.me"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_2.2.1_1520195923611_0.866180980705828"
      },
      "_hasShrinkwrap": false
    },
    "2.2.2": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "2.2.2",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.9.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^11.1.0",
        "semantic-release": "^12.2.2",
        "sinon": "^4.1.2",
        "xo": "^0.20.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=13.0.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "e88771e47b27c567aeb41277ffdf931e5fb76d50",
      "_id": "@semantic-release/exec@2.2.2",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.10.0",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-asaMBX/WIG/9FKCnmWpBTIqT8AhGbOrY3QqmucvDuRZDbxRP9kmveptjdka3AP/Ny/JQt/rSr6a5cpfcEG8JVQ==",
        "shasum": "d376a558ed286a9e97a9999a8ab5947c629e1239",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-2.2.2.tgz",
        "fileCount": 6,
        "unpackedSize": 14118,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDc4CiQNOrr1s4sRvgoOYuNVbssY5l4yh0em2LN2YPxOAiAUAjL4Eyq9rUgKS1dxMb/mCyFdxhYsyPekhtyVrcTFmg=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "boennemann",
          "email": "stephan@boennemann.me"
        },
        {
          "name": "christophwitzko",
          "email": "npm@christophwitzko.com"
        },
        {
          "name": "gr2m",
          "email": "gregor@martynus.net"
        },
        {
          "name": "semantic-release-bot",
          "email": "semantic-release@boennemann.me"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_2.2.2_1520465353130_0.7190938247425367"
      },
      "_hasShrinkwrap": false
    },
    "2.2.3": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "2.2.3",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.9.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^11.1.0",
        "semantic-release": "^15.0.0",
        "sinon": "^4.1.2",
        "xo": "^0.20.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=13.0.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "99114c8694abb861eddace525d3e3802d87f6c55",
      "_id": "@semantic-release/exec@2.2.3",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.10.0",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-hJUmx2M+xA77nmL+RVV5i+YuSUMLpYrSnFGNXC4ZDC8S8pFdz3rUSLXVWnu1zuWNLeaqB7ubAFUIpH1hMEqovw==",
        "shasum": "a173b6568cab59fc45aefd23281b7f47bd4fecb2",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-2.2.3.tgz",
        "fileCount": 6,
        "unpackedSize": 14823,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICCPi1tkSoe4OlRDdvyWvjfPTuv0Q015XsXia6YwR2jgAiAk+7rh6IlReQfHK6qKcNtKmrYGbXJxwGs/Gm1c+A/fdg=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "boennemann",
          "email": "stephan@boennemann.me"
        },
        {
          "name": "christophwitzko",
          "email": "npm@christophwitzko.com"
        },
        {
          "name": "gr2m",
          "email": "gregor@martynus.net"
        },
        {
          "name": "semantic-release-bot",
          "email": "semantic-release@boennemann.me"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_2.2.3_1520548862929_0.9693562818963382"
      },
      "_hasShrinkwrap": false
    },
    "2.2.4": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "2.2.4",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.10.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^11.1.0",
        "semantic-release": "^15.0.0",
        "sinon": "^4.1.2",
        "xo": "^0.20.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=13.0.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "9f17d46807ebc8b6153ac7d464f069f1df4782c7",
      "_id": "@semantic-release/exec@2.2.4",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.10.0",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-saQa10P3iccHsCm4QDXfkT7TxlHf23f2cr/HmtFmtzwkDfr0c3sXAzhXaU1wrYoCfLm6R1oZZRiYQVA3n5rKkQ==",
        "shasum": "587bcda636844ca0eedaab3a5c01b97774c45ae3",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-2.2.4.tgz",
        "fileCount": 6,
        "unpackedSize": 14824,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIAWrZ/bcKTes8ZXICe5XDv5BQjL3yk1Yp1Z+ri8EpunTAiBm4zWu8ZlC8uTIisJJT4v6KZQAWM+R7fOVgzxh6l7tuw=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "boennemann",
          "email": "stephan@boennemann.me"
        },
        {
          "name": "christophwitzko",
          "email": "npm@christophwitzko.com"
        },
        {
          "name": "gr2m",
          "email": "gregor@martynus.net"
        },
        {
          "name": "semantic-release-bot",
          "email": "semantic-release@boennemann.me"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_2.2.4_1521116591876_0.6113645751825059"
      },
      "_hasShrinkwrap": false
    },
    "2.3.0": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "2.3.0",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.10.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^12.0.1",
        "semantic-release": "^15.0.0",
        "sinon": "^6.0.0",
        "xo": "^0.21.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=13.0.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "cdb248fb4ee322da6e1d98aad2c212677937202c",
      "_id": "@semantic-release/exec@2.3.0",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.11.3",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-CYCBj6CYdBx+KnOe1I8KTZCHlp6hZM2EFGRFRmnlEoa0VoO1ytgCVa7utJuTRouO4D2Hn/xnHBOHRVQjkb40XA==",
        "shasum": "9c7712ef71119dafe6b956f961a960f6768c49f8",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-2.3.0.tgz",
        "fileCount": 6,
        "unpackedSize": 14898,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbTXzMCRA9TVsSAnZWagAANv0P+wcR6y7gRlkiG4mQyYzf\neO173nryxgYG2wetZA4iYYFd+1mR4vRT3paNKk/2Umwyq0+Q0icWWncPOWEr\nQILTvyXb4e3ev96jTxd4JZn8L/jmbowst4TpCsXiBb244muhQfr0HGXtYwV0\nHUZh8y/KyRB4OTiO2LZye9JK015nQloIouGVz6OMt76GIwlCq7pGrBJc85m+\ngI59Hd/5bfYZnHjqjTj02jR0R8Ojq26iikZ8u0qbTy14Sg1VlA/Jwsr4gFiH\naYNANkoCZeCK9m7SfZtpj/4qpNaAKLSaPLeKpc7Ce8AP7R8S+4VDxNzIDqV8\n46Wb5FM0q70MoL5W0l1ujR3Sk3UJaGooGWeHWAy9cXAf4DqUryk7IXA+X06f\nfO2MtpFRmAGrpXYtdzSInaLtijBHtA8JY031DYU8e1jTU3op6h9d/r9xA5Y5\nVyyRKOYBBjXOl2JgpP00OGsx/2fmvs5Cz5HalS4b/2z27RjR5r7xHV73xwy7\nqED5I/5pWR77N6Ma8I+jsTmnsfjIvMRep3HKUh58tGNQggcnzvgFTW1fgmJ0\nRVrP8WvKxCfjnar+pxDYk+xXFa3sKOddTybv25AYlTTErwyrbSfU6NAB4Uvs\n40lp+CP6lEzAQ12TEZqApT8r85P8TTluK47fl1I8c1WmCUOYvNIE86ganJMy\nUHa+\r\n=HWAE\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHYH11uHLdMuMzZr/fYIao/kEiEZIAxZsMKJJxR7bpluAiAiY2LMd0wPqe9sI4bgW84QT+mI17hfXs89ssi8ZyIP2g=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_2.3.0_1531804876741_0.027103385134041647"
      },
      "_hasShrinkwrap": false
    },
    "3.0.0": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "3.0.0",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.10.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^12.0.1",
        "semantic-release": "^15.0.0",
        "sinon": "^6.0.0",
        "stream-buffers": "^3.0.2",
        "xo": "^0.21.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "2ba5271ca1e253f306d8b2c344fffd06f697408c",
      "_id": "@semantic-release/exec@3.0.0",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.11.3",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-7sRtytLFjkt7p8TpW+x9NiEpaN42kZsX7eNXzs6AT7VYxeVw7kAKK/9k0STCCXlrFo6ksdL7AT85nyTl9xFRsA==",
        "shasum": "d4fe505f7acb1d8d49d3627131f2fbd9412a3fbb",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.0.0.tgz",
        "fileCount": 6,
        "unpackedSize": 14930,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbZhZ2CRA9TVsSAnZWagAAObAP/Rvekv6T71kHPgph+h0O\nSop202H7ilkgnNlek1DqKT19dkTa4Be9Gs8llQ8NGuL5oLFKwNw5GuezdTNN\ntIScIzlITtet+NC8rZar2kPpiuuXDh6/beDwcLiN1tDmIktoL5TYn74KRWa+\n5gxTvoBSctjljs4LHGAj9zF7CtX7CM9FLDRv+ylrrGHgAvk5N6ClcFX8RoOB\n4TCepuW1BNNa64DfclDhZatglLGofNpDGEfEH0er06JvYdEbgk2Ws9BR0gAb\nJbQOqp3A+5iF0St+M7Ozx1AAT4ydrShMhQYFEVy0dRN1vih0AkXgd+NEWlrN\nYAc9dqKhdlwKYIzQYVTTqHL2i2GwqFXy/ueJzlkxQVvoDGBVmm6/2A1pH33q\nACEgHpZd8syQ4uYR5IRNeTgMTaR+JotCKpfs1ctmaIvtRPl93I/ljXBUoBBp\nVWQA1Z7FLFQQsjKWCRPiRmy9igFEG2SNdmUQkN92+n8IDVuwyOWQhdpfhbZP\nmHkEzcNGF9H6CLNyf/mWwfyMOihXKGAtRq3AFJoaFU4PL3eamNXpxCtbcior\nLDNNQb2ckouHAmLhg4ajmilINfLBX8O49kD6MgVSWZ19GcxvxLBpgxnvBShQ\nrqoks0xBqnbYRpmlRq8TvfCKjPqZFXDkI9fHEM49XlHMGH1Oc2Z73j3l/ItA\nImNm\r\n=3gIq\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIByfhT0I0gWIh16Eme41i03KmdnLaSszni3KQKIVurO1AiBR5WN64u9GNxVmoK62RZhs1QRpMrxTPnfGkfP9TCJSIg=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.0.0_1533417078144_0.17569422966347603"
      },
      "_hasShrinkwrap": false
    },
    "3.0.1": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "3.0.1",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.10.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^12.0.1",
        "semantic-release": "^15.0.0",
        "sinon": "^6.0.0",
        "stream-buffers": "^3.0.2",
        "xo": "^0.21.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "7fae209919aef4cd8fc11b4e2d9605380d885300",
      "_id": "@semantic-release/exec@3.0.1",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.11.3",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-rCOWlBAYMAoHpAAxqzncX1gHBBB2I5VJ7doe5WeZafw8Cdhe5MZAAmhpu6h5La1alJ0tNqY8k0YwOffelMm0yw==",
        "shasum": "460a744055be8347c8b9f594366ae3ad77bb6928",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.0.1.tgz",
        "fileCount": 6,
        "unpackedSize": 14954,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbZjbeCRA9TVsSAnZWagAAOdQP/2IFMgkuJv30xFYhw+/A\ngzi2nkULvvVQmSrsXEaAj9mYZw60SN5p2aHIA7azYxiT5VN6JuaceYLIEe4g\nYy1JYondpviN2I09TEqWODnoV8eqcgx9bcuAu3/J6UwIHIKmUiQ8xqpL1/f+\nD5tEmBIAJfbqazlyMpXr/x4SKKMke59qQU2FdgkQAMU8UndvPQVVcgmRwU/z\nyr0jKPrQNnxroHVgrHKN8GK/WTt76PkHBLZ3WZYdHFHUj1ULJw2Aj272ZeGO\nIadiNgNFS2Ze7wrmd2rI2OyowUv8guGGqFZqjaDFqve0qQ/QGnZTEjjXA/p+\nZFPbzhhYmIY7CAdbXEdGSFYMBRddiZVDeqlovfMa0Tzr4e1Qj1d1bmiQWe0N\nj8rWSv3pv+UadZYFEYfiZ2JgftrrEWyYQwcN9wOBHnmpuMubiYuZahcI9F2S\nupqo30uHSiNS0Bgb4r4k03/CE61xuxxty8E59tH3nTCfZA3kg5AV4+Y6I5Mr\nMjyUmgNvT29O/thx/9nfbsH/LGhHiML+kdjwV/Fc805S5VhUI+hOthZBmDRa\nIwghK82I+8CkjcDApmCRm+ENh3BFl428fL9kRT5AJE9fBeaEkRoWdKfd0bMs\nLPj+u6mbctELCwiwxtpHwUHie4ljf1aup2c6vuThamnTHoEVqMdayxXtbE+2\naSiz\r\n=XQjs\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDCkQfFpZP+jkGE4l6wHPfh4SuGX5ZP1siTR/fAu76LCwIgJ/vCUaJy7pygRHublGPmxtDNzGs6eLZToKGGFo2yEkw="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.0.1_1533425373724_0.3675176103496145"
      },
      "_hasShrinkwrap": false
    },
    "3.0.2": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "3.0.2",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.10.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^12.0.1",
        "semantic-release": "^15.0.0",
        "sinon": "^6.0.0",
        "stream-buffers": "^3.0.2",
        "xo": "^0.22.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "0fee76f44557bb0809bf6112fd1186fdf65b48f9",
      "_id": "@semantic-release/exec@3.0.2",
      "_npmVersion": "6.3.0",
      "_nodeVersion": "8.11.3",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-pn2r/4XWmZsI9C6GYxXPMgu0GJNtVkk179lYMHs5ajL6qr+RuaFLTxfqSHnt7LfOwlN8JEp2tk6sbA52r+IZFQ==",
        "shasum": "ba9b2e940dea342e4804c2a47acd06d5b1514e94",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.0.2.tgz",
        "fileCount": 6,
        "unpackedSize": 14638,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbaxpkCRA9TVsSAnZWagAAg8MQAJfUPEXYtmYcuif3dOcF\nXV80CgwoSXLszf9NWSA06LvSkiod/p5//MpGJnzWyHiUUQHvFGP1maCkCQRI\n/D8FsLAL4x6x7IgNlXGPRwsvvr8sQgw8QpSdNee5WXnIqmzD8BQErsdeZS8R\nwNIdQA2nXxM29oBldMqkmESgCm+mBtYsUVgdL0ZTS3u1IH9NZu51jnYs1bjM\no52bNEPsPquwr8rqVTyCi1z6dJ9yycNz98K86HWg4moVDjV6cU8bJnG5y195\n6OUWGqhWihU9JvkexGYi31TI+Z15Q4Uy/CCFbGL2okXdJhUpYuMp9/21Sg+2\nJk8XrE4/c+0ayZIBC3ayRkDyX29Nt9MukFwE8wIMgEadBlz9jeQJ6YLn34cv\nQmP0j0MtS+k0NZNgzL5ZEJZ0ulrdj1CwxQzYUBGTAs96gqqq9RbTJsWXAoDN\nS6/HmN+yHETcyhkLJRiPlojUP5M3EC3t89yI77puiL4K/gF4cqBZB4XNpTCd\nq9BQOBOONvtE/cvZ9gX5RK6yNwxqxlcwe2peyXUby+ZtZwaW69xIivpPExb8\nxPGPGrx/3pAlOCyTcVMVe7/pvrLB3kUqikLX1wfZf6ConHj9i4wnqRgr+omE\nQJpIqmLweVdvXzkdB0Ltb394AYT3uHK9m2y3UL/4Z8mbNbQSqodavqxFG4cv\ntc6o\r\n=Lo4c\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIBgkR5CNMtFUqhrAj1i7wZSAknIAMjPFR9EWbFZgvqMVAiAkMMeAuGWEwg2nN0DZGXOn2u6SDRO9MkwRggyfw27qBA=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.0.2_1533745764714_0.8716153519917369"
      },
      "_hasShrinkwrap": false
    },
    "3.0.3": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "3.0.3",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.10.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^12.0.1",
        "semantic-release": "^15.0.0",
        "sinon": "^6.0.0",
        "stream-buffers": "^3.0.2",
        "xo": "^0.22.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "de1623483811a57b6842361e30d48e8754333b16",
      "readme": "# @semantic-release/exec\n\nSet of [semantic-release](https://github.com/semantic-release/semantic-release) plugins to execute custom shell commands.\n\n[![Travis](https://img.shields.io/travis/semantic-release/exec.svg)](https://travis-ci.org/semantic-release/exec)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/exec.svg)](https://codecov.io/gh/semantic-release/exec)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/exec.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n## verifyConditions\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommits\n\nExecute a shell command to determine the type release.\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyRelease\n\nExecute a shell command to verifying a release that was determined before and is about to be published.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotes\n\nExecute a shell command to generate the release note.\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## prepare\n\nExecute a shell command to prepare the release.\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## publish\n\nExecute a shell command to publish the release.\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## success\n\nExecute a shell command to notify of a successful release.\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## fail\n\nExecute a shell command to notify of a failed release.\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## Configuration\n\n### Options\n\n| Options | Description                                    |\n|---------|------------------------------------------------|\n| `cmd`   | The shell command to execute. See [cmd](#cmd). |\n\n#### `cmd`\n\nThe shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objets passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n##### `cmd` examples\n\n```json\n{\n  \"release\": {\n    \"publish\": [\n      {\n        \"path\": \"@semantic-release/exec\",\n        \"cmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\",\n      },\n      \"@semantic-release/npm\",\n      \"@semantic-release/github\"\n    ]\n  }\n}\n```\n\nThis will execute the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`).\n\n### Usage\n\nOptions can be set within the plugin definition in the `semantic-release` configuration file:\n\n```json\n{\n  \"release\": {\n    \"verifyConditions\": [\n      \"@semantic-release/npm\",\n      {\n        \"path\": \"@semantic-release/exec\",\n        \"cmd\": \"./verify.sh\",\n      }\n    ],\n    \"publish\": [\n      \"@semantic-release/npm\",\n      {\n        \"path\": \"@semantic-release/exec\",\n        \"cmd\": \"./publish.sh ${nextRelease.version}\",\n      },\n      \"@semantic-release/github\"\n    ]\n  }\n}\n```\n",
      "readmeFilename": "README.md",
      "_id": "@semantic-release/exec@3.0.3",
      "_npmVersion": "6.4.0",
      "_nodeVersion": "8.11.3",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-WBHI0tPv+FrrU/WLKZguAzCH6VBhsh1lCw1NLbBSxjoFdmwE4Zp56mfY19qsh02qYGelAyUZUP1r1xh16bmoCg==",
        "shasum": "18f662192d7400cba663c91891a5cc84b86f0d62",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.0.3.tgz",
        "fileCount": 6,
        "unpackedSize": 14649,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbdIFwCRA9TVsSAnZWagAAEFkP/RrM1IWK/Saa9RYFC0kv\nADujSsDalv+w8AgWes+NkJ7/oz6VH5GhFJzA09fVhAJdzeHoysurEoxhzCGf\nzJtsRGHbIBBn42EzMkHX/un+V28kZPcEecvby3+sigKXJHf1F6ezbAj0Atl9\nIt+k8MCAwBvxe/ZrfYAQ6toVFz2aHhSI4uq6wrMQMXlICC1wY10jE0+RHvTs\nZ8/ZNwG7HHGzqZmO99+yHPZ/UJRuUJUacyk00tgh6OL9q7WCditVA/4uF+Cx\n16kmkPfl8joRtvuXa5umW7NOnGSU2s8DOY/BhSDm0qyUNcleEUYLEgHaEycE\nCfN+/hvQWwlGNW8q34H8JB74Epu4Ltuayb2o8jfY1sKLAUjvWERJ7KmzvqpN\n5NbEJcfWRzw4q3ua3/uOOqUXWCnx1zY6EpafPSE+TOkpxNF+u1piKoDdFS8f\nU6tSfbopw6f2Av+49t72ZRYRyZqK3xlXVoilKMZ1igQZfeKQeWnkjktRXN2J\n2C1IIiSh/bSfMqj1Olzufky0eLuq+Tmjv/XJo8BjNCzzMuHsg+R9ih41yVmR\n6IwGZkOsZFQ1pUAY3B6L2H1csHoQl+VJcjMJmVvd8y+piisf5XEeync/+yt1\nAmE1/KEkKy9bROz/em6rAzfhJ0Y5ZAADbo+HWoAiwRQ05t7udFOZpvd3p58k\ntLPQ\r\n=i+iq\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDgVd9EjN7QIAXO0u5UsRboH0gdT6CtzTDzQBQbdBSQTQIhAIvVsScbl9nDAJwQZxUJGmc7D2lvoY8e2phpxk1z34tM"
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.0.3_1534361967967_0.6801711340242664"
      },
      "_hasShrinkwrap": false
    },
    "3.1.0": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "3.1.0",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.10.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^12.0.1",
        "semantic-release": "^15.0.0",
        "sinon": "^6.0.0",
        "stream-buffers": "^3.0.2",
        "xo": "^0.22.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "209159317570766de78aca7f2bccd80928480a97",
      "_id": "@semantic-release/exec@3.1.0",
      "_npmVersion": "6.4.0",
      "_nodeVersion": "8.11.3",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-m+opdWgZ7ro4j9BD4yL2UIRom3RznE3sbx2Wj8CSCOXoSJ97Ar8Ci8/ziR4QF1SJcKVlrUUhj+7TP5FgziSDgg==",
        "shasum": "7cd10fca3936d7766fb7a2755bd05a0a1f2256da",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.1.0.tgz",
        "fileCount": 6,
        "unpackedSize": 15174,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbdIiFCRA9TVsSAnZWagAAuKMP/ict2DRXyVxgc8XdKtYf\nbI6tZfD4Uz1CCiik1yZz2PpEYngQWT7+yjgGQeN1jKkuzue30NaZ0IAGxr7q\nlhyho6pw8vEAOSQ84Mlu/eoJPSYXuC6Raomqkg3fxo4L85Vj7j5CHLXZjqZi\n6/UXpEscFXZqYX3S5Xnw8IuQl0UkCmPo715jq49YDkmlyOC7ayAfkYnBvbnO\ndym9tfdHyrqzLFVm/9OnWs+cgjXaUP/DtImvbI6OdLWs/QDp8fqINy7BZE1a\nlOPwPiwHetIvU0c1ZBNuC4b/002rGkS2V1BMAUat1OpTBdUOpRbSu8SbdtE2\nMAA2cdw0u547brYIt+CYG0OMtupn50ieI4ZXGjUvQQVVZkblvDLcGeWXy+7s\nBuG/g2W1q7cklkk4pAGxizwwIUxXXnZD3wyXTZVf/5Lk9m/4zmuXJqJ3osLa\nWo5VrgCiAYtSPGiFmjql5SeDz8vBLt091wAWjuod8QXHtFhX5H5Rvr4Cq3ks\nEtMaed+sr6hVtzHW6bzBJQE4+ONhMM338PVPsXYBGt+l0UriMu5ZkSTLpFku\nr0eQdrpPRZCqDxO0tZNaJ2XSsXdE8HSTZWUVNJoOz12O9hGya+4wij8bKB1h\netN1smEDfFk96QTMUrn7sfKdZi0pyshexMjIyp2uRJWSIWmvwkokkwNR2AOa\ntlgb\r\n=EmRw\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCULDlhgp1CCzh3zLSvazP3gDXb9ba0f4QhZ7FEdnX7TAIgWAMuUwACV+0zVlghjZs9nsZ8+VkgWZJJK8QxQXqXWCc="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.1.0_1534363781591_0.5367157020563942"
      },
      "_hasShrinkwrap": false
    },
    "3.1.1": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "3.1.1",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^0.11.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^12.0.1",
        "semantic-release": "^15.0.0",
        "sinon": "^6.0.0",
        "stream-buffers": "^3.0.2",
        "xo": "^0.22.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "e39727443cc3a32fc9c8cdcff01650192970c7b3",
      "_id": "@semantic-release/exec@3.1.1",
      "_npmVersion": "6.4.0",
      "_nodeVersion": "8.11.4",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-SjC/N9FE6LF4rKbEV4XsKKYndiws2+C1RygUjexFZNhMg5f1lmVExb0e5JRzR6ctBYUap84bgD8ialMP+eozPw==",
        "shasum": "bd52232881209dd63a97a14101215ceec9fccf10",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.1.1.tgz",
        "fileCount": 6,
        "unpackedSize": 15174,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbf8jUCRA9TVsSAnZWagAAxb4P/2A1Xk9s5/UVTZ8xaodz\nsCxQOaRtQu8yqAi9MJr4qjNdil7x8eL1Gn7A+6kdUPPh0p2QGXE1yhg1CGG+\n+du7I7TYSNrUf6BT2Lhd/rPRqjgdHpHY68yEGrf3WYP1fFB8jl4ttC5ZwOQE\nmGpgRqC8OYvW2wUjDaY0TNC9LMn2UQH3y2zZ2UqPHHl1cNjxkNPRLKCOxgxY\nbjFX0Pr+eBoRuYtzlKrjbJt7JXWUIDrn+Xh592TMFfaDY8jOJyCsImrRuIqY\nJZxQGAtUK+XgONHytRJO6P+p1vLc378h1rW96mx9DY/i+hvkq0L9Ctx7KwXT\nz7Q81HhKP86tmzuL/XKeNZX3PSrxV4Ox1uqIzhHRgQWEzi0HJMh8Tw5XVAmf\niKMeSiHOnFa4K37occdfNL8N6I/skE1gXoO5pTgl3mnga9l8nsJ/1DJOSPVL\nosy0fpbC5ie75mwlF3C/LMvQJ8RpKfHLvx3yukwXeCdSRp7A9hcM9pAm5Bxq\n271hXuXSohyJsgIDo11K+kAhfpuOUG2f+H7t6/AhXVs5hgUE35NTBTr9AJV0\nEEchQPRze+UNONts5PsLb93chZp2BjPADEaVnDlTM1wsKoKuPwj0tkjeFn/W\nj2EJ/zAHATYi8ng1rkLwoMp1V6bzyXqWi7GVzBXTGZ0dMW0Hs7TCbvaloUWt\n7Iwm\r\n=LBQ6\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDh6v6K8HPx0o32zF9XSnp2BVhaRWbWMmhA6BWOVMJGowIgTfpAyCSWOg65ZPtCAxJ6k2pis1AeloDLvrbF3fyDnzE="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.1.1_1535101140025_0.8644472211048433"
      },
      "_hasShrinkwrap": false
    },
    "3.1.2": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "3.1.2",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^3.1.0",
        "execa": "^1.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^12.0.1",
        "semantic-release": "^15.0.0",
        "sinon": "^6.0.0",
        "stream-buffers": "^3.0.2",
        "xo": "^0.22.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "files": [
        "lib",
        "index.js"
      ],
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "4bf6ad55a4e5f3fd6181404619de4a2188f922ea",
      "_id": "@semantic-release/exec@3.1.2",
      "_npmVersion": "6.4.0",
      "_nodeVersion": "8.11.4",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-JhF1AXbPQwqy8GFVY7XKpA0DC91obQWMIPIHIPN4n/U2KTqyH44LDMnOuxLZB/3/xVTW9iR66z+rnZ/FJN8twA==",
        "shasum": "4ed89e5422d02aca9b86fbfd318d230cd29b7065",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.1.2.tgz",
        "fileCount": 6,
        "unpackedSize": 15173,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbgxVECRA9TVsSAnZWagAAntwP/R3Ti1sx1+8QpjPzd2kX\nV3DdhCMeFGeUOPT4et+CCuGG8sBhfUrjUePdhhNPKYBwfyCd5RbwD3v10lfk\nblZvY+DJVGmEhGToy2QI2FEIikR2vITn9WfAvhKr5RuQsQPBQlmibUWY2ujt\nt7MoZ7TPnntBVgL7b+PWsO3S1iUgywDN+kTAqfYbceoQOkVgsHdSmgIdkgUO\nHO7JfbloLsh11NR+yFP+vH/Ih4UHF10yRmZUnBj1/W4O292av2OtHmHuNKWk\nkQFxtcEjtw/LuWaADO9rRDbgbqbCSEdG6S/8aKjAjCYxSeGfFrPSt+J+DzCZ\nw86jw1p61/susJsYCQswhWTPnIEzSw7v3m7IWyjNLW5q0dm4B/yG3TLb3le4\nAdDL246e4UiuRZmgX/EgFbCLYuSVKUAdvjCdcGQeUgyznWl46qEAqlkzaMrW\nxYaB3Xp0lEkd4zBXD0rcWnFz/GmBpQJ0tRiT2nMpoaMkgKZZTxo+uYPoQB3z\nf2BIK8MJ4el/zUrMvyzzTNv5kulnNHJqAqpNsf54GBWbSYHxK7wzsveKnE5x\nzG4I97ouCwqihCCGGr9xWMw4Ov5+tFemJ28dstFSI7c5ybWFteRXeeAT1RYw\niuD3zsa+WdXwF9gr599K2kf/mF6QF7MFF4wQl1ymDNbTTdfrk9gz8wYi5qP8\nNISy\r\n=JY7+\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIC/XbjWKPlN+SlL4CHAspS9bPlT3jG2LdvYDgvu1ETaNAiEA1+HPNRDWsGj8bDhDtMAt2g2ND0b3ZcBulEZykz1HFkA="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.1.2_1535317316213_0.13271053107948783"
      },
      "_hasShrinkwrap": false
    },
    "3.1.3": {
      "name": "@semantic-release/exec",
      "description": "Set of semantic-release plugins to run custom scripts",
      "version": "3.1.3",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "debug": "^4.0.0",
        "execa": "^1.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^2.9.6",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^12.0.1",
        "semantic-release": "^15.0.0",
        "sinon": "^6.0.0",
        "stream-buffers": "^3.0.2",
        "xo": "^0.23.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "62a257662263ff64599dd4bd62f7ad4029f488ab",
      "_id": "@semantic-release/exec@3.1.3",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "8.12.0",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-B9pqgHHorSjxVPD5can6K9XQl5pVlmyXaFKs0p+gQF3iMwg3lTByZFAAHm0OkkzW0uOVA17CAchTloebrn+HrQ==",
        "shasum": "4afef8005904567e007c4830d54a718877c5ed39",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.1.3.tgz",
        "fileCount": 6,
        "unpackedSize": 15216,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbl9/zCRA9TVsSAnZWagAAv6EP/RmpXyHTIgqQp1mPXfNG\n1fSZg7i5BPDS4caYJiwmKyg8qDaInL4I+fOzSG2HR4luUBEQ+zL0hD3q+99x\nN/kzPKlJbvazcw+e2fJ/VNXCWcMk1HsRnuhw7GAUIiTvdP2yrHTWFYboPNsw\n7vtWrOMlHpGyPLjK4q4+8E0fYH4yuXpKOHrFeihIDUE+35xOocIO0E/+q64Z\n30so1ixPsFH55V/n0rJhy5PAXwh1FKclgtWmXuSdcFEsatul9Z4jk/p2+CPa\nf56sPzz+apMk8McIpPAakdkad8eIXhwLuka+hP+gOeg68mx7XP5ZImf0eAOd\nNGj1zqFIT20bG5Wm0XfKwE+RvyC4ntCp4Doh6OIZKzafwIGoTRbqLYOVCVzu\nrihGBWeZbYBBzYu9wSntg4pQ2ywllFhdR+UZiUSEkt0RVoGEWshnot1h1k8Z\nSJK4HzWJcxZCPtddE9KSjN5uVJWpMEu+aqCGCeOFua9bFMwH4HHMu7MbqvAk\nT5Ql59zayNb6RXPwwL13puSeBCbOr6260Vx1JI/8lIqnpHjNoC7xdk0XBdRb\n9y/dbdNlXLh4Ua+vBYZ2myu+wNIgdZYTgH5gWs6LaBKUJsaxaC9xX8FgIhoH\nEdAh++CKk0bJJ9ylDP13cEGoTIOMNce/Ukx5UNRi9Tt50NCp7xA/FmJkZBk5\n+IzG\r\n=cKBj\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCv/k8iwn2uQ42Ucv4LmEvZPg29CoUtUXaO37SEo3y96gIhAJ7h4copEI0uzjjtwDItWgKOTF/V5Fid0GpTP8o60t6L"
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.1.3_1536679922438_0.4850298003520799"
      },
      "_hasShrinkwrap": false
    },
    "3.2.0": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.2.0",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^1.0.0",
        "debug": "^4.0.0",
        "execa": "^1.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^3.0.0",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^12.0.1",
        "semantic-release": "^15.0.0",
        "sinon": "^6.0.0",
        "stream-buffers": "^3.0.2",
        "xo": "^0.23.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "1b66a3607514802dd1d9e106cc3aca06dc459f7d",
      "readme": "# @semantic-release/exec\n\n[**semantic-release**](https://github.com/semantic-release/semantic-release) plugin to execute custom shell commands.\n\n[![Travis](https://img.shields.io/travis/semantic-release/exec.svg)](https://travis-ci.org/semantic-release/exec)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/exec.svg)](https://codecov.io/gh/semantic-release/exec)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/exec.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n| Step               | Description                                                                                             |\n|--------------------|---------------------------------------------------------------------------------------------------------|\n| `verifyConditions` | Execute a shell command to verify if the release should happen.                                         |\n| `analyzeCommits`   | Execute a shell command to determine the type of release.                                               |\n| `verifyRelease`    | Execute a shell command to verifying a release that was determined before and is about to be published. |\n| `generateNotes`    | Execute a shell command to generate the release note.                                                   |\n| `prepare`          | Execute a shell command to prepare the release.                                                         |\n| `publish`          | Execute a shell command to publish the release.                                                         |\n| `success`          | Execute a shell command to notify of a new release.                                                     |\n| `fail`             | Execute a shell command to notify of a failed release.                                                  |\n\n## Install\n\n```bash\n$ npm install @semantic-release/exec -D\n```\n\n## Usage\n\nThe plugin can be configured in the [**semantic-release** configuration file](https://github.com/semantic-release/semantic-release/blob/caribou/docs/usage/configuration.md#configuration):\n\n```json\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\"@semantic-release/exec\", {\n      \"verifyConditionsCmd\": \"./verify.sh\",\n      \"publishCmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\"\n    }],\n  ]\n}\n```\n\nWith this example:\n- the shell command `./verify.sh` will be executed on the [verify conditions step](https://github.com/semantic-release/semantic-release#release-steps)\n- the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`) will be executed on the [publish step](https://github.com/semantic-release/semantic-release#release-steps)\n\n## Configuration\n\n### Options\n\n| Options               | Description                                                                                                     |\n|-----------------------|-----------------------------------------------------------------------------------------------------------------|\n| `verifyConditionsCmd` | The shell command to execute during the verify condition step. See [verifyConditionsCmd](#verifyconditionscmd). |\n| `analyzeCommitsCmd`   | The shell command to execute during the analyze commits step. See [analyzeCommitsCmd](#analyzecommitscmd).      |\n| `verifyReleaseCmd`    | The shell command to execute during the verify release step. See [verifyReleaseCmd](#verifyreleasecmd).         |\n| `generateNotesCmd`    | The shell command to execute during the generate notes step. See [generateNotesCmd](#generatenotescmd).         |\n| `prepareCmd`          | The shell command to execute during the prepare step. See [prepareCmd](#preparecmd).                            |\n| `publishCmd`          | The shell command to execute during the publish step. See [publishCmd](#publishcmd).                            |\n| `successCmd`          | The shell command to execute during the success step. See [successCmd](#successcmd).                            |\n| `failCmd`             | The shell command to execute during the fail step. See [failCmd](#failcmd).                                     |\n| `shell`               | The shell to use to run the command. See [execa#shell](https://github.com/sindresorhus/execa#shell).            |\n\nEach shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objets passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n## verifyConditionsCmd\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommitsCmd\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyReleaseCmd\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotesCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## prepareCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## publishCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## successCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## failCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n",
      "readmeFilename": "README.md",
      "_id": "@semantic-release/exec@3.2.0",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "8.12.0",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-3MP5PuvN1xfXTCDfyHpopBP+FGQrXr4w6W3w4CfMtejmElwKzTqAKq6iCQp6kBK8E6UdURas8AZSmI1iPr1QkA==",
        "shasum": "f6f95af2aff43cedb6ee10253bae83ff9ec58184",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.2.0.tgz",
        "fileCount": 8,
        "unpackedSize": 19863,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbu5CPCRA9TVsSAnZWagAABhEQAJ1/za+XlWkUXwVk3Sih\nmJTNafxRmCWeKcuiY3LIqgNy91fqqrUShzBwQ+IQGoYjhztT+CzXLS9Pym7C\nvoBmCju8iQkdmcmAhMLe4vLtkp+qqS4UVTwdBODDcqAa3WzbKs4gfGcHDUoP\nwOWd30ofrfrS9W2AxnjtJ2DqmUTvoImCOf/n7OKrShQ1MxeLLpZafGfuvlr2\nMYdFb840Nv2RC5/9ebD7LKg4JqUKhNnMBYqk6cQwLugBcK3eIXHq0LiMY2qx\n6Ur9GQ+FALtalWvbtwozSyUN5e1w/55QVSzFsb6dUZlsFXGNx1OEO72EMk0J\nzRl4OD+gsf6RUrvc/loPS8pSuDvHwtLMYWPQoMoDKo0v3cT3nfSgPpeU2DZw\n90/Lav2NrApq+g416lI9oIpbHR56kWq1i8qM4pLYw+RkV16Z4wk4Y8HrPUdj\ng0/D9HCDVmAH19dO6XAhYFD9MoBZiTFJ/PQja2zDQ5lKv0B6EB19KYNaYK+8\n6n9c+KjGeboRU7kjsLVw1UjEEUt3qw9HS93hPWP10FiZaSJikGkVHkF4jPWI\nisa3sQqntiwKAD11LOiYZzItou1F60azlzJTYUC9RvEBJlFw/9XmvccUZuCT\n+JBDAT2RYIV+WUyHeJodtux3hF40D2ohYNGGbUWrtoCGuZrvB4TXhBThOXNU\nNqpW\r\n=SK/t\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCCyGRASdP1jmkd6FzQupp8HGeopVZLAXLFv3ANTlxSKwIgYafwdmDIFo007zHrm56PYB0qWVcgjVwAlG4aEbQBh8I="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.2.0_1539018894488_0.6383764910127125"
      },
      "_hasShrinkwrap": false
    },
    "3.3.0": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.3.0",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^1.0.0",
        "debug": "^4.0.0",
        "execa": "^1.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^3.0.0",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^12.0.1",
        "semantic-release": "^15.0.0",
        "sinon": "^6.0.0",
        "stream-buffers": "^3.0.2",
        "xo": "^0.23.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "aa194d6c81ba14b2ba6b895e3a054af70b336c14",
      "_id": "@semantic-release/exec@3.3.0",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "8.12.0",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-6a5nMGLyYJUl5me4orEIA89mf1Roz1jEVlv0GgIJv1k/yjEcmWicYQ76PrPfUzh81sVtfHfK0zLN5Vikz8f5oA==",
        "shasum": "3ceaf66084cee82fb4babde387583259701ed381",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.3.0.tgz",
        "fileCount": 8,
        "unpackedSize": 23027,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbu5TECRA9TVsSAnZWagAAbpkP/iUjJtkxS9Is+FtVK2S9\nLXIEVZI9/YNL32ICqWdc8rQpFjo+dc//5GdaTpS3XiPkDZ+hP9efS6x63F/M\nLwrMJHpEYMI409tb8BS++OabFE0AavndSsvpaNJ63AjhhqIJjJh0tfk9y3PW\nF8McRwGg9wHcaU+nEsvk0RKj+2+x+4K8T70wsOSscEwHPJGwN+rfPZI4kd1k\nTstLGiNxYRPp7nPUmhEgwx+Goda6F9TiDpZa4cz9frf6YYFVv4ASUsvDizHR\neLNC0AmtuQ5F63a/lnJvGsDYy2kdD+byZLW1RaWfREuNnEmNvfRt8y180sow\nBK0piviBFcZE7HY0CaGl+GAc/xXMs/BxHzHdDlegg315NqfCG23uQPaMY5Zm\nXez5bkjsFofCycPjCKtwfPm2KTxeOrQRzHtdrSEJQdE3bgnV7Sb4DSh1c188\n9mB3oS3ETy+EkMhZmaWOxKtBItGxVXxvvvCm+H4m7XiPEcqFcTTh6gR9z2Xo\n+LSdYarkHxXwNBmwsiwRaWDnk9H234nwLOeIUswaglBIX+jc6TzIz9gIKCTO\ngfUua3L39+3NCL2wFwDUIHIsryY6aSyq3xR9uqk2EiDa5GxOAwUvZX6eQk+i\nDNnrGegO2UsFuiTdSH9pgiU/OTD3R98CzQxGGDBHhPF1ycTCTpoGqbg7eVya\ncQij\r\n=MzsP\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDFs2gKfPGkh+ruMaicY4ZMuIWd/lLX1jNbX/ar9vXRAQIgKdXsXl6zCdFCz1uv/jwxF+PdEItvKHBaVQdBvGaKIZA="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.3.0_1539019972220_0.5175050870053508"
      },
      "_hasShrinkwrap": false
    },
    "3.3.0-beta.1": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.3.0-beta.1",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^1.0.0",
        "debug": "^4.0.0",
        "execa": "^1.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^3.0.0",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^12.0.1",
        "semantic-release": "^15.0.0",
        "sinon": "^6.0.0",
        "stream-buffers": "^3.0.2",
        "xo": "^0.23.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <17.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "beta"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "readme": "# @semantic-release/exec\n\n[**semantic-release**](https://github.com/semantic-release/semantic-release) plugin to execute custom shell commands.\n\n[![Travis](https://img.shields.io/travis/semantic-release/exec.svg)](https://travis-ci.org/semantic-release/exec)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/exec.svg)](https://codecov.io/gh/semantic-release/exec)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/exec.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n| Step               | Description                                                                                             |\n|--------------------|---------------------------------------------------------------------------------------------------------|\n| `verifyConditions` | Execute a shell command to verify if the release should happen.                                         |\n| `analyzeCommits`   | Execute a shell command to determine the type of release.                                               |\n| `verifyRelease`    | Execute a shell command to verifying a release that was determined before and is about to be published. |\n| `generateNotes`    | Execute a shell command to generate the release note.                                                   |\n| `prepare`          | Execute a shell command to prepare the release.                                                         |\n| `publish`          | Execute a shell command to publish the release.                                                         |\n| `success`          | Execute a shell command to notify of a new release.                                                     |\n| `fail`             | Execute a shell command to notify of a failed release.                                                  |\n\n## Install\n\n```bash\n$ npm install @semantic-release/exec -D\n```\n\n## Usage\n\nThe plugin can be configured in the [**semantic-release** configuration file](https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#configuration):\n\n```json\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\"@semantic-release/exec\", {\n      \"verifyConditionsCmd\": \"./verify.sh\",\n      \"publishCmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\"\n    }],\n  ]\n}\n```\n\nWith this example:\n- the shell command `./verify.sh` will be executed on the [verify conditions step](https://github.com/semantic-release/semantic-release#release-steps)\n- the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`) will be executed on the [publish step](https://github.com/semantic-release/semantic-release#release-steps)\n\n## Configuration\n\n### Options\n\n| Options               | Description                                                                                                                                                                                                                                                                                                                              |\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `verifyConditionsCmd` | The shell command to execute during the verify condition step. See [verifyConditionsCmd](#verifyconditionscmd).                                                                                                                                                                                                                          |\n| `analyzeCommitsCmd`   | The shell command to execute during the analyze commits step. See [analyzeCommitsCmd](#analyzecommitscmd).                                                                                                                                                                                                                               |\n| `verifyReleaseCmd`    | The shell command to execute during the verify release step. See [verifyReleaseCmd](#verifyreleasecmd).                                                                                                                                                                                                                                  |\n| `generateNotesCmd`    | The shell command to execute during the generate notes step. See [generateNotesCmd](#generatenotescmd).                                                                                                                                                                                                                                  |\n| `prepareCmd`          | The shell command to execute during the prepare step. See [prepareCmd](#preparecmd).                                                                                                                                                                                                                                                     |\n| `addChannelCmd`       | The shell command to execute during the add channel step. See [addChannelCmd](#addchannelcmd).                                                                                                                                                                                                                                           |\n| `publishCmd`          | The shell command to execute during the publish step. See [publishCmd](#publishcmd).                                                                                                                                                                                                                                                     |\n| `successCmd`          | The shell command to execute during the success step. See [successCmd](#successcmd).                                                                                                                                                                                                                                                     |\n| `failCmd`             | The shell command to execute during the fail step. See [failCmd](#failcmd).                                                                                                                                                                                                                                                              |\n| `shell`               | The shell to use to run the command. See [execa#shell](https://github.com/sindresorhus/execa#shell).                                                                                                                                                                                                                                     |\n| `execCwd`             | The path to use as current working directory when executing the shell commands. This path is relative to the path from which **semantic-release** is running. For example if **semantic-release** runs from `/my-project` and `execCwd` is set to `buildScripts` then the shell command will be executed from `/my-project/buildScripts` |\n\nEach shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objets passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n## verifyConditionsCmd\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommitsCmd\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyReleaseCmd\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotesCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## prepareCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## addChannelCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## publishCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## successCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## failCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n",
      "readmeFilename": "README.md",
      "gitHead": "1f581f6c546401a79949dca77abed00283763e59",
      "_id": "@semantic-release/exec@3.3.0-beta.1",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "11.2.0",
      "_npmUser": {
        "name": "pvdlg",
        "email": "pierre.denis.vanduynslager@gmail.com"
      },
      "dist": {
        "integrity": "sha512-fdz1QWbpk57ZikwwLM9vRJuqqI6xD2Q7abHFDqUfD2OC7EBswYbpYOe9F4+39VGBkUVC4fEa8DXIy8uZy4CEpg==",
        "shasum": "53020145f5fdd8203536979a3cd9e66cd33d0277",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.3.0-beta.1.tgz",
        "fileCount": 8,
        "unpackedSize": 25299,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcAC7vCRA9TVsSAnZWagAA3l0QAJJwu47ER/GFTnrtHqpR\nz9EewssjH7ob0+YDvy8ZzTGedO9OWtYUMCKlbWDDbN4gW1+6QjGsEMAYXy2X\ndiozPFvOkvGyyo38GzBCI/gTHmleyHGJthp8VG+lDiX/FkGHXn54qJx6pzvV\nPzH+QgY/1BSgT8a+2bFPAsmCII7LzZMXBSB5vFxV3UEkJ9CdAvCq6PdzXUtj\nn+WjFow1uU1nKwptVnynJQYY4Mm8kWVpf0hX6vlTuhwZ+P6VwJch547fXPb4\nUbUTJrn6U96f+j0eBY38q9CUPYLfazOQwxlzhwA9XMzxpqHSR/r4rQJZi/du\nvxgKxYBWV/PmfLdJDyB8U5dvfWCnvpWV7TsFU0XuwU6xHLRlRg3nNXZuzleV\noLfNcYTXT7nUWk67RNrdatKXzGj775bbu1UyX+qayEJe29ItEOp42UbeLsew\nvTQfSA2zfa5LAV1gssMYz28pjNnSwZl1MTzd2kgDu41rylDCBm93BmERSTT8\n1ToE+W0W3ZyCj2r2ngE5oJt656c1ObyfMEwreLDL0+2LnmDIRryy+9D2h56p\nSJKM0AUCB9sx20PGAxsNFVvK4sfdQzvVrJEOED5xNDGRnmjoH5L5L6Gv1j3p\nWdGghnlDVcc/43N2kG6T3IIjhwzH8lbN7FKNXK1khw0PfA9UDuLzUeK4e0su\nHz8+\r\n=/lmG\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDM/igneWp1zzvzpZLvgoczrLYDHV1MGTL6KmoVzHa2tAiBlg2V/bSc1d4y4XOpgvy3+NfQp6L0shhTdVwfrJkotlg=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.3.0-beta.1_1543515886517_0.1649320960371894"
      },
      "_hasShrinkwrap": false
    },
    "3.3.1": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.3.1",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^1.0.0",
        "debug": "^4.0.0",
        "execa": "^1.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^3.0.0",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^13.1.0",
        "semantic-release": "^15.0.0",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.23.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "745d0faed7e402695a2b12035328d5c139da6224",
      "_id": "@semantic-release/exec@3.3.1",
      "_npmVersion": "6.5.0",
      "_nodeVersion": "10.14.2",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-dyktNa5cpV9TqQjxBIfCJKpDlKyYJ5OzL/04uBr9qUDXcDgaczGip3M/In/Ff/KGZSzkvrx+m96LVpng9+g5Tw==",
        "shasum": "5d7acb2e43e86fc676a351bb38c5d5a9b007a3be",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.3.1.tgz",
        "fileCount": 8,
        "unpackedSize": 23067,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcFEKsCRA9TVsSAnZWagAATzkP/37b/bRaIjvKVW86ClZU\nA1iWhfGj7jo88vfspJ8JwXvCjIqMkgZ3j0qc4i4tlzE4cAsSbnmJJ0uv5Em1\n3mZ+0dRmMSAkvWHFa1My1Qa5sU9am6O2muOhBzqqPN/4hIcA8ABaP2Ca4EyG\nvdtUVBEV0J988trB/x4RApLGYhhLNGfLMlXLYOxEgX0qHRwC0azAIGRzVCYy\nJSGlw9UBHazzF4K2osk/UgxV7Z3REBEQj/2G6JGvUhglCYhGQN2p9hRZ5iqH\nzpLgdfrdRVGMx1OxtQugPaKEQ/Cl+obHISnY0y9SUCkpsd5NRcl8YdemDNwU\n4qKTyroOL8bxUFPBvKMTSucnW3PhTGMIUoFbuHhICnA9QgJE8F7uV9EpxkhG\nYKpNTPGK7XrCXHVlcGYyscsR6TZzd+ML2HmEp2Bj/3537+9qHP/O+mXsH8aY\n6ESlZhBqlGZK3LUvppdgQ//nvVGz3t4wKQlxKtdEs11pSq2YuBzHDINk5nEE\nrda6dqBhA2z+Zb6fkOWu328YO5CE7r6cewCx1uhsEuTbqb97ylze9oOZQdcG\nZ1yC7TTa/LJ/fHNntCl2jMLdxD0DL+38Co8rnvvbKvCEa+Dxpc8X1foSkhBN\nbnHpxDx6vB7pUzOmvUypRtSTRxEaKnAxsOVP3ORjXKdvDynXBA44uQJxHKVh\nEY5d\r\n=xCsv\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD7ZgTuN8hy1PYqchdS6+34pJxnLmMWhK79/p0NIjmTDwIhAKdJdE69CkFlYdhmhz7EWyiOG6/Ivpkg+FlKnT4U4FM/"
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.3.1_1544831659813_0.21736131747628828"
      },
      "_hasShrinkwrap": false
    },
    "3.3.0-beta.2": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.3.0-beta.2",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^1.0.0",
        "debug": "^4.0.0",
        "execa": "^1.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^3.0.0",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^13.1.0",
        "semantic-release": "^15.0.0",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.23.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <17.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "beta"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "readme": "# @semantic-release/exec\n\n[**semantic-release**](https://github.com/semantic-release/semantic-release) plugin to execute custom shell commands.\n\n[![Travis](https://img.shields.io/travis/semantic-release/exec.svg)](https://travis-ci.org/semantic-release/exec)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/exec.svg)](https://codecov.io/gh/semantic-release/exec)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/exec.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n| Step               | Description                                                                                             |\n|--------------------|---------------------------------------------------------------------------------------------------------|\n| `verifyConditions` | Execute a shell command to verify if the release should happen.                                         |\n| `analyzeCommits`   | Execute a shell command to determine the type of release.                                               |\n| `verifyRelease`    | Execute a shell command to verifying a release that was determined before and is about to be published. |\n| `generateNotes`    | Execute a shell command to generate the release note.                                                   |\n| `prepare`          | Execute a shell command to prepare the release.                                                         |\n| `publish`          | Execute a shell command to publish the release.                                                         |\n| `success`          | Execute a shell command to notify of a new release.                                                     |\n| `fail`             | Execute a shell command to notify of a failed release.                                                  |\n\n## Install\n\n```bash\n$ npm install @semantic-release/exec -D\n```\n\n## Usage\n\nThe plugin can be configured in the [**semantic-release** configuration file](https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#configuration):\n\n```json\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\"@semantic-release/exec\", {\n      \"verifyConditionsCmd\": \"./verify.sh\",\n      \"publishCmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\"\n    }],\n  ]\n}\n```\n\nWith this example:\n- the shell command `./verify.sh` will be executed on the [verify conditions step](https://github.com/semantic-release/semantic-release#release-steps)\n- the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`) will be executed on the [publish step](https://github.com/semantic-release/semantic-release#release-steps)\n\n## Configuration\n\n### Options\n\n| Options               | Description                                                                                                                                                                                                                                                                                                                              |\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `verifyConditionsCmd` | The shell command to execute during the verify condition step. See [verifyConditionsCmd](#verifyconditionscmd).                                                                                                                                                                                                                          |\n| `analyzeCommitsCmd`   | The shell command to execute during the analyze commits step. See [analyzeCommitsCmd](#analyzecommitscmd).                                                                                                                                                                                                                               |\n| `verifyReleaseCmd`    | The shell command to execute during the verify release step. See [verifyReleaseCmd](#verifyreleasecmd).                                                                                                                                                                                                                                  |\n| `generateNotesCmd`    | The shell command to execute during the generate notes step. See [generateNotesCmd](#generatenotescmd).                                                                                                                                                                                                                                  |\n| `prepareCmd`          | The shell command to execute during the prepare step. See [prepareCmd](#preparecmd).                                                                                                                                                                                                                                                     |\n| `addChannelCmd`       | The shell command to execute during the add channel step. See [addChannelCmd](#addchannelcmd).                                                                                                                                                                                                                                           |\n| `publishCmd`          | The shell command to execute during the publish step. See [publishCmd](#publishcmd).                                                                                                                                                                                                                                                     |\n| `successCmd`          | The shell command to execute during the success step. See [successCmd](#successcmd).                                                                                                                                                                                                                                                     |\n| `failCmd`             | The shell command to execute during the fail step. See [failCmd](#failcmd).                                                                                                                                                                                                                                                              |\n| `shell`               | The shell to use to run the command. See [execa#shell](https://github.com/sindresorhus/execa#shell).                                                                                                                                                                                                                                     |\n| `execCwd`             | The path to use as current working directory when executing the shell commands. This path is relative to the path from which **semantic-release** is running. For example if **semantic-release** runs from `/my-project` and `execCwd` is set to `buildScripts` then the shell command will be executed from `/my-project/buildScripts` |\n\nEach shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objets passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n## verifyConditionsCmd\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommitsCmd\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyReleaseCmd\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotesCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## prepareCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## addChannelCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## publishCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## successCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## failCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n",
      "readmeFilename": "README.md",
      "gitHead": "d12a029778c3261cd7a789bb7d76766a6eb0ed39",
      "_id": "@semantic-release/exec@3.3.0-beta.2",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "11.3.0",
      "_npmUser": {
        "name": "pvdlg",
        "email": "pierre.denis.vanduynslager@gmail.com"
      },
      "dist": {
        "integrity": "sha512-wDyP5Kve5F7AYlT8fUGE4M6Au7nUVjzlmCzykU2iqUIFUdghY8PQ1eRoe9um54VvSw4jKwJQyqFK3PHsyELCtw==",
        "shasum": "584fbadda1a2a6e01198a5d694f39220e3664272",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.3.0-beta.2.tgz",
        "fileCount": 8,
        "unpackedSize": 25383,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcFELjCRA9TVsSAnZWagAAYJgQAJMk0v5/mQK9ouRnEzzk\nBg3K2faPQ8KJrf9SxPeJ75TVlpSGRtTEA91r3llMdZjQVER2p3siThgI+mwg\nSWEMhLyF8Sow6Xlb/ym8B2SxwuGPfEZhC9a49yOL78ZYoJa3kD5LAQAZJs30\nfjM20FzuBd7UD2inDPYCBW1mUnBEm6TP/Pqu2kDGf1KxWJ0PP51e0r6AQmw7\nldXoD60onJd0SyPb3N/JHhgde2cqE0QDKbPsGGYtFachjx/OYJVhKHcphdYh\n1PTr8Lm9VlzD7jfciQ9ekISi6GkK18ny3p/yiJu54i+/mjHc0JIG2JuAAEOa\nvoPR3rVIVzpYc+A1mIKs2+a3NuNUNgf+EGn3edVNLSDTcP2u95jmBK2exj3L\nD+G2zRz16DypzYFpLQyOuSKcK9mVHEOUeNAAbdODTqBKf6Vw8d6MY2Zi7dYJ\nO7rHrf6k5MqfbeYVZGdsgb5k4TZJekUFRNUw2uyX5zlxf0stZUJZq0x/s4ns\nJyRM8T0fialltNUVkQ095Iv56Y6SHtQE0JvfWkKmUJyZKQSbyXYs9yPqUbXL\n2DHKX33fcXs1uzkTGqiWddYKZ92WFEkquf8QTcn4ruBffp/3Ck+Gbedk1Lu5\n/aIx6bdXoMrN2fPUkkA0r7j7OiaFI5KkEcwwijyU+bDJg97PC0+Jq6KIIvax\nvlAG\r\n=UAIi\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIBDNyuGsKPJA5PNgARtIEFP3wVQqhVsqExfpcgqZtbgDAiA2PxJiXnJvvnq0seG2yI6OIwAcRyFVb7KlMzAXNm6X9g=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.3.0-beta.2_1544831714423_0.3579989299890105"
      },
      "_hasShrinkwrap": false
    },
    "3.4.0-beta.1": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.4.0-beta.1",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^1.0.0",
        "debug": "^4.0.0",
        "execa": "^1.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^3.0.0",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^13.1.0",
        "semantic-release": "^16.0.0-beta",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.23.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <17.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "499ee26d23dfc0aa268d53af2f523c81e294fdb1",
      "readme": "# @semantic-release/exec\n\n[**semantic-release**](https://github.com/semantic-release/semantic-release) plugin to execute custom shell commands.\n\n[![Travis](https://img.shields.io/travis/semantic-release/exec.svg)](https://travis-ci.org/semantic-release/exec)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/exec.svg)](https://codecov.io/gh/semantic-release/exec)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/exec.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm beta version](https://img.shields.io/npm/v/@semantic-release/exec/beta.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n| Step               | Description                                                                                             |\n|--------------------|---------------------------------------------------------------------------------------------------------|\n| `verifyConditions` | Execute a shell command to verify if the release should happen.                                         |\n| `analyzeCommits`   | Execute a shell command to determine the type of release.                                               |\n| `verifyRelease`    | Execute a shell command to verifying a release that was determined before and is about to be published. |\n| `generateNotes`    | Execute a shell command to generate the release note.                                                   |\n| `prepare`          | Execute a shell command to prepare the release.                                                         |\n| `publish`          | Execute a shell command to publish the release.                                                         |\n| `success`          | Execute a shell command to notify of a new release.                                                     |\n| `fail`             | Execute a shell command to notify of a failed release.                                                  |\n\n## Install\n\n```bash\n$ npm install @semantic-release/exec -D\n```\n\n## Usage\n\nThe plugin can be configured in the [**semantic-release** configuration file](https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#configuration):\n\n```json\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\"@semantic-release/exec\", {\n      \"verifyConditionsCmd\": \"./verify.sh\",\n      \"publishCmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\"\n    }],\n  ]\n}\n```\n\nWith this example:\n- the shell command `./verify.sh` will be executed on the [verify conditions step](https://github.com/semantic-release/semantic-release#release-steps)\n- the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`) will be executed on the [publish step](https://github.com/semantic-release/semantic-release#release-steps)\n\n## Configuration\n\n### Options\n\n| Options               | Description                                                                                                                                                                                                                                                                                                                              |\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `verifyConditionsCmd` | The shell command to execute during the verify condition step. See [verifyConditionsCmd](#verifyconditionscmd).                                                                                                                                                                                                                          |\n| `analyzeCommitsCmd`   | The shell command to execute during the analyze commits step. See [analyzeCommitsCmd](#analyzecommitscmd).                                                                                                                                                                                                                               |\n| `verifyReleaseCmd`    | The shell command to execute during the verify release step. See [verifyReleaseCmd](#verifyreleasecmd).                                                                                                                                                                                                                                  |\n| `generateNotesCmd`    | The shell command to execute during the generate notes step. See [generateNotesCmd](#generatenotescmd).                                                                                                                                                                                                                                  |\n| `prepareCmd`          | The shell command to execute during the prepare step. See [prepareCmd](#preparecmd).                                                                                                                                                                                                                                                     |\n| `addChannelCmd`       | The shell command to execute during the add channel step. See [addChannelCmd](#addchannelcmd).                                                                                                                                                                                                                                           |\n| `publishCmd`          | The shell command to execute during the publish step. See [publishCmd](#publishcmd).                                                                                                                                                                                                                                                     |\n| `successCmd`          | The shell command to execute during the success step. See [successCmd](#successcmd).                                                                                                                                                                                                                                                     |\n| `failCmd`             | The shell command to execute during the fail step. See [failCmd](#failcmd).                                                                                                                                                                                                                                                              |\n| `shell`               | The shell to use to run the command. See [execa#shell](https://github.com/sindresorhus/execa#shell).                                                                                                                                                                                                                                     |\n| `execCwd`             | The path to use as current working directory when executing the shell commands. This path is relative to the path from which **semantic-release** is running. For example if **semantic-release** runs from `/my-project` and `execCwd` is set to `buildScripts` then the shell command will be executed from `/my-project/buildScripts` |\n\nEach shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objets passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n## verifyConditionsCmd\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommitsCmd\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyReleaseCmd\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotesCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## prepareCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## addChannelCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## publishCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## successCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## failCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n",
      "readmeFilename": "README.md",
      "_id": "@semantic-release/exec@3.4.0-beta.1",
      "_npmVersion": "6.5.0",
      "_nodeVersion": "10.14.2",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-207SQc3TUUp9VI70fhV5/++pArTK2uOUxlRgx2Mi22e7MsDQhMD3HH7jewniLkX5XJV6gkpdWBzWPbERhSg50Q==",
        "shasum": "f2c7b3d79894411b4aeac9b6389036484c3d6363",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.4.0-beta.1.tgz",
        "fileCount": 8,
        "unpackedSize": 25507,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcFI3cCRA9TVsSAnZWagAASX8QAIvzqDJfdEIUZMlYc+BY\nQY3rCwoN7h4NPkh/aHX8vQN9Mc6gYW8AMFufmq4sW8kRDSReREwd77WDSHOS\nrtCUmq2MOVen59cjEpO3Yw466nVV5S3GrOOKdOaBPHTQvDaaBiGgzUEcK0YK\nY6cN4pqTm9qDu7fVF78ir+FBfrakIxrJjKosmCgTsjYRzL1LkLaCAIEZwyrq\nmZriWTKQ5Rvr37ZvqItf4Sp3tdoTM+WNFUvLNZoKr285aDOnhpOblClYzd5+\nRwqTM5ls8yyznaz0tk/DtkD21wu+Jko3Hvt+zKN4BOWQzkHrVOuCACEtmJxR\nqzOdmYADBeyMOyQBBH5/D2By2HlMwu61aPKjCwUeygVWFmyV8X9frpLChKIs\nVMy2zrkivNmRNVufnR/OHWUAcTnAsuBi7CQtycYbeoz2ue3UsUmjUbKwN8St\nVDHhUkyMThlnZ1LV0TSNLoBmk20k4nYwPI7yRyY/oL8vcQMyYWiB1Ary8VNk\n0Z5K2uIkEy3JK3eXlttzFUHHdh2rBYeiuyBKmyeWfUudc2X9rgdHmUHlQey2\n5YfrxWGfV0cwa9ag/MEndPmh+DgLrP346cb8lYFd+RmDn00HU4Lv8pNGW2eM\nUWqkCDk4j+oVn5/V4ZTY0PxAlncJ1bgkMqFEM6216n4EXj4mc+uT0/A/Ddee\neL5F\r\n=lmvq\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHMhmtae9jlSKAarqaQc7iW3gUAyLvukFyQG2wDvqj62AiEA1Wr24GqLOekCksejfrJRMGCMt3Q020sjgXl0Id2cSYk="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.4.0-beta.1_1544850907285_0.39783388542411346"
      },
      "_hasShrinkwrap": false
    },
    "3.3.2": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.3.2",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^2.0.0",
        "debug": "^4.0.0",
        "execa": "^1.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^0.25.0",
        "codecov": "^3.0.0",
        "commitizen": "^3.0.0",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^13.1.0",
        "semantic-release": "^15.0.0",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.23.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "d08786692ed451d2ca6c688435662835858f90d4",
      "_id": "@semantic-release/exec@3.3.2",
      "_npmVersion": "6.5.0",
      "_nodeVersion": "10.15.0",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-CzJnsTXYKY4LZ16WVEq/bt4OLzoiFf0DymCeMUZ5fthPHDbKprzky4+VIwaSDbRgLVEqRVeUD4gYVmlAeaWNCA==",
        "shasum": "33fb6001ddeaed4364975fa981bfd7306db7eabb",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.3.2.tgz",
        "fileCount": 8,
        "unpackedSize": 23067,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcI8iNCRA9TVsSAnZWagAA/eQQAKMqC4jn6PCBAqY6P1gL\nhyqsrXH+/slXj/fYx1NnPtnGNGK6zgBJIMRyLaHkdR1YXkzGkKGQjOYK3S7B\n0xbPGuN+3QyReyyIofTbuodYDMuY1jZin73RDeAMusGfA8E8f9O8UlNAZNtA\nG37c9JbCJ1W+pJldibaie1CC/6zxYiOhdjv7oBnhWUsBZaV8mnYTu/+qBmuM\nRoKN8RBpbfLewOlq9S/WqI7s6csU8rABQ8W/qqio3mS5BxRLA8kjPFxFfVXR\nS6o7thtiW+mH487uFnyzhSpZQh5BnreEeJSGblXfD//JwyqmUiLPTDvebca/\n/rqjMv/PeKgoXHnOPRxrGi7WwW9vl1bRYiF95GO6lzsYLRecEeWA5NKBwDhy\n7pTwSspoErKufAfqQ7L3OFpQpJU/7ZlhEhvlho0C3XI0dUAhfV/FOrIhYtdD\nNBGSlMbj4keq+8/vMOC7QPgu/mqGnC8hZ1OaovHvQ2GNAsyK9PF/Tgrk/ad6\nVEsjMooyC6iUymreEi7qzUWMUd8DB3JOkeBZpNzKJWkuDVakWi3qXZyp5WU1\nUnTWJuvb8i8vhKi4yRDzTpANjNkxpowbFrb0pBM8EFXqZ9nKKP6rqGkkLblq\n0O4bWWwvVnvF2IK9ffTP3viliN0p0Ip85gUaAQt/ZHIjS7CE+HyTSePRb3UZ\n6ZVN\r\n=4IEL\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC+FxbXzqw5Y6K1WilvR9gCgUxzNEMmqoVOxmgzr7XQOQIhAKWojKLmwLDe1ypZsKJP9b05tjKzVGXJ/DovjJBUFpLs"
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.3.2_1545848972387_0.0960592163585674"
      },
      "_hasShrinkwrap": false
    },
    "3.4.0-beta.2": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.4.0-beta.2",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^2.0.0",
        "debug": "^4.0.0",
        "execa": "^1.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^1.0.1",
        "codecov": "^3.0.0",
        "commitizen": "^3.0.0",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^13.1.0",
        "semantic-release": "^16.0.0-beta",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.23.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <17.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "f54e9af7be0c3d9600befe241dce8b1db1e5c5e9",
      "readme": "# @semantic-release/exec\n\n[**semantic-release**](https://github.com/semantic-release/semantic-release) plugin to execute custom shell commands.\n\n[![Travis](https://img.shields.io/travis/semantic-release/exec.svg)](https://travis-ci.org/semantic-release/exec)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/exec.svg)](https://codecov.io/gh/semantic-release/exec)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/exec.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm beta version](https://img.shields.io/npm/v/@semantic-release/exec/beta.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n| Step               | Description                                                                                             |\n|--------------------|---------------------------------------------------------------------------------------------------------|\n| `verifyConditions` | Execute a shell command to verify if the release should happen.                                         |\n| `analyzeCommits`   | Execute a shell command to determine the type of release.                                               |\n| `verifyRelease`    | Execute a shell command to verifying a release that was determined before and is about to be published. |\n| `generateNotes`    | Execute a shell command to generate the release note.                                                   |\n| `prepare`          | Execute a shell command to prepare the release.                                                         |\n| `publish`          | Execute a shell command to publish the release.                                                         |\n| `success`          | Execute a shell command to notify of a new release.                                                     |\n| `fail`             | Execute a shell command to notify of a failed release.                                                  |\n\n## Install\n\n```bash\n$ npm install @semantic-release/exec -D\n```\n\n## Usage\n\nThe plugin can be configured in the [**semantic-release** configuration file](https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#configuration):\n\n```json\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\"@semantic-release/exec\", {\n      \"verifyConditionsCmd\": \"./verify.sh\",\n      \"publishCmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\"\n    }],\n  ]\n}\n```\n\nWith this example:\n- the shell command `./verify.sh` will be executed on the [verify conditions step](https://github.com/semantic-release/semantic-release#release-steps)\n- the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`) will be executed on the [publish step](https://github.com/semantic-release/semantic-release#release-steps)\n\n## Configuration\n\n### Options\n\n| Options               | Description                                                                                                                                                                                                                                                                                                                              |\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `verifyConditionsCmd` | The shell command to execute during the verify condition step. See [verifyConditionsCmd](#verifyconditionscmd).                                                                                                                                                                                                                          |\n| `analyzeCommitsCmd`   | The shell command to execute during the analyze commits step. See [analyzeCommitsCmd](#analyzecommitscmd).                                                                                                                                                                                                                               |\n| `verifyReleaseCmd`    | The shell command to execute during the verify release step. See [verifyReleaseCmd](#verifyreleasecmd).                                                                                                                                                                                                                                  |\n| `generateNotesCmd`    | The shell command to execute during the generate notes step. See [generateNotesCmd](#generatenotescmd).                                                                                                                                                                                                                                  |\n| `prepareCmd`          | The shell command to execute during the prepare step. See [prepareCmd](#preparecmd).                                                                                                                                                                                                                                                     |\n| `addChannelCmd`       | The shell command to execute during the add channel step. See [addChannelCmd](#addchannelcmd).                                                                                                                                                                                                                                           |\n| `publishCmd`          | The shell command to execute during the publish step. See [publishCmd](#publishcmd).                                                                                                                                                                                                                                                     |\n| `successCmd`          | The shell command to execute during the success step. See [successCmd](#successcmd).                                                                                                                                                                                                                                                     |\n| `failCmd`             | The shell command to execute during the fail step. See [failCmd](#failcmd).                                                                                                                                                                                                                                                              |\n| `shell`               | The shell to use to run the command. See [execa#shell](https://github.com/sindresorhus/execa#shell).                                                                                                                                                                                                                                     |\n| `execCwd`             | The path to use as current working directory when executing the shell commands. This path is relative to the path from which **semantic-release** is running. For example if **semantic-release** runs from `/my-project` and `execCwd` is set to `buildScripts` then the shell command will be executed from `/my-project/buildScripts` |\n\nEach shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objets passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n## verifyConditionsCmd\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommitsCmd\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyReleaseCmd\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotesCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## prepareCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## addChannelCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## publishCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## successCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## failCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n",
      "readmeFilename": "README.md",
      "_id": "@semantic-release/exec@3.4.0-beta.2",
      "_npmVersion": "6.5.0",
      "_nodeVersion": "10.15.0",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-HCAPfUDT6LVtnqc99LBgqCjkvVd7vXei6QA1SlazsvitDX3I1mz6PiSLUkFz8l/6fGtkvm6rzC+cZMYYrS2Tow==",
        "shasum": "9f9e89c8851d89b81986c47e0750e2c3ce5f01f4",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.4.0-beta.2.tgz",
        "fileCount": 8,
        "unpackedSize": 25506,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcJSlACRA9TVsSAnZWagAAfF4P/Ampx1d6g2qQdNcdy+og\nEqRrxb6f57sM730/cKTQFFO5hVvE2udSPgow77UoBqPM2OFWrnA/BebC2EnR\nD6W/Wg3PQ1X8CWncjuVvufFZN4CPaYhSxBXZDaXVoeiatNMzIU0tTOaUAWjl\nM3Gk85OPwk7J6q8YZ/HmZqE2PycqnZ2tJsfXiMG/BuF/vV77vNV5nUlNcmM/\nmmw4vNPj/FCGOAQnV/chj6MOjZTVpav0Wqah6oGXJqzsApcz0+RVU11kmFfZ\ne+84otm33o9GzWYCPDyQRV0MZgbRd7DwD61T/7l89a6xN0zV0tCrhBtzn1nv\nVeznJHhz304Kt6LzRGBKfYbYo5ooYX4ohr6rKpK6FzgnCIU2pzTZlMaGwPYu\noiImqvTywMycPirJmGT3JMUALi8XUESpdj3hUTWGBEC6A3cQrVqkmOwF7YuJ\nKASiClCGF6+eKYYFB9ek852RZaBDPieg4BzZcAv4AhhEZl5XCsR5OPodntqc\n1NqxY36eFYQv4Io3ADjNn5mP2ZkkJS1QZ0hxoznCMsPovoSAWIisxT4gIw0S\nvvs1dj+IsAjPn3LkcEcb2EQHSgOcfBiZzyQp7ZdI3s6AOQU8zrKjAZEAF9HO\nbu/Uv7Y0YTLZlvEmEu0fALi+VzW0pX6j0LBVVCa6yV4NKnBe9NQ6uRChGLJx\nFSe4\r\n=Cean\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIF8K4NpzRv7ckw9FJNg/c7nVh783kwCgl1z3q1vfC9NdAiBtadSlwShC3UCNpwDBP/vJZUobkzmOLSjnaC5K+hp0rA=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.4.0-beta.2_1545939264318_0.9636059423962915"
      },
      "_hasShrinkwrap": false
    },
    "3.3.3": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.3.3",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^1.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^1.3.1",
        "codecov": "^3.0.0",
        "commitizen": "^3.0.0",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^13.1.0",
        "semantic-release": "^15.0.0",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.24.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "59ddda0584ab26dafa6bbc2602a1a2aabecdcc3c",
      "_id": "@semantic-release/exec@3.3.3",
      "_npmVersion": "6.5.0",
      "_nodeVersion": "10.15.3",
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "dist": {
        "integrity": "sha512-cYmQZHlOda8XbGWfdDqQnnxFBAnxYE+heiNQUduAn7y1qRVKTBalXae/hzEucsBI9XK8NKYK55mgLqzzY21YUg==",
        "shasum": "5c915d289aa88492bc9f6b6fb62eb94701476005",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.3.3.tgz",
        "fileCount": 8,
        "unpackedSize": 23006,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcsrOMCRA9TVsSAnZWagAARgkP/0p+y//qk3AIwdIlUnO6\nK1i4dbjvo7ql6AfijVy3yDgRvoCgk6iVmceKhabKC8H8lzejucB4X9LhW+Kb\nNoL6+tx+PPMlZzlJNqX+ObuSTRuUyC0Sn/NgP7piBqpb6Zom71Ard0ytPS2C\nERhJwPUduf3LhZuICytfpnx1X1+hrHfdCbA35dh2e4qKU/nTe95IJfmI0O1b\nyl3pMsUFAd3LzycYnEO9ejsgWY0yDfa+icUTaSpj2FMlho8vNq2g65Jri5IL\nN/H5H4XTB/dvbGgCBfJxIFvlTYOgSgEvl/i8Kwe6v/i3NJjxcD41TNWEcZ35\n58mrGZtOW4vHK9T0Kh+f9yn1W63TnUGXqRP4kqHafMYEeG5EwQxDIeIAYMLJ\np5Y320wIB+D3WFjWBJAcqX+nlDiq4aGeP8NC3iywRMbtXllrcWYxESQYmhSZ\n2635oVrenZ844Rys2qP6YM665sANtPs32RvFQ6C9gLw0SDg1/Ul+LfGigdvW\noPlMQALDz7hwUbFIFRfn9f7gKKkUO5ZJoikjYgWLhGqfM1jt8y4+HEfOb26N\nDnxT9kzDx0ECtU+2zROY3sXT571op4qjlOO5Purxy169RDEp48mUmQo65wfS\noV1qligRSAC9jQy3BAhZoCl3JJpFoGM1w6CB0+XnmL+bGKRAS5SGDq/o9g2+\nf4l5\r\n=ebgx\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHrITMBc4UJJw6eSrWK8nClqfI5dPxXJ7jCKFKsJLSLFAiEAtaH6XlXWVyfr/3kmVSB82GPngEe1Ip8qzYJdScZTukI="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.3.3_1555215243539_0.7084630916067369"
      },
      "_hasShrinkwrap": false
    },
    "3.3.4": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.3.4",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^2.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^2.0.0",
        "codecov": "^3.0.0",
        "commitizen": "^3.0.0",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^14.0.0",
        "semantic-release": "^15.0.0",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.24.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "271a8fab0556b5fe2bd25b5f6965fbd048eeb79b",
      "_id": "@semantic-release/exec@3.3.4",
      "_nodeVersion": "10.16.0",
      "_npmVersion": "6.9.0",
      "dist": {
        "integrity": "sha512-r2132zCfqmaxeCVfMsaZk3PzpVj9mTaOVemHKtG5EET4Gv3aUFx/FZ8i1HohBRh8x32fXfOlZ10fEsb0L9Ks+w==",
        "shasum": "b2e29642045f5edfcdaf31286f8ea4943eec7604",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.3.4.tgz",
        "fileCount": 8,
        "unpackedSize": 23015,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdEkMNCRA9TVsSAnZWagAASfoQAJseLhzTp6oQh6x6PVoe\nFOAHYCDh5yxPC57YaVqXtEqZ6BUX+fz10W18F66AThYJ7rrdx3+9xt2BA0+j\nwg71TFEfXSvSlnn0VU2oyeUbTtbGiPvpGCHcn5VIevHpgx9wR/RxgZMv83ZE\nZItu3mPVDnUXAm2433/L74WktJ6RTpjC/c6S56Ds3wkHUShWCaCAQ22HvX0L\n65Ez2yFWBOjhwDwe+bU168BkzrDP72KVl2FffcSiGgO75cUvtu4xWE4AVWzu\n0VuwMpN7Dof+4u7R3pmtKeXXUnqZYmlNrjOm6+/h4tgNERb5bk4pT2sWzAaq\ndjqDAnsCnLte5rVrZPrUz8f+Zoi/b0csf29hs3SvgvVUCpFi2rWSG1IGKTMe\nxYCdfk+bfH6AM7LZhfPwU44j5sTHRv2fPBvR+eztrUMyeK6DRJwdOge77AFj\nf6KCHcx1l2NyM47WgjhFgqa1/xfTPJqJEw852P2ttvFxLjFM9UrwL3WTOR/i\n2HQJ/eTaw67S6dAhav4DVuQn61z2sm3OTxx9yeYTRF7UzaaepxdDmpChgfYa\nOXAlTVfvRaeWHMPNh0uYLUgIsWsdODAHiERKlYlWtpqE5ZA9wWsfv7LimXYu\ntshvUxB/ash3iHBiruf1BTMApTKWVub/1Hnk2yMXh5qDjEPSV5fj+OqBuG04\nc+V3\r\n=Jza2\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDzApHUbPkijNoIbN0xj7nWAsptD7BJHRcZjm7aWVEGpAIhAJHLwjj7t8NuLqfxIiz5E6iuaoLLvpuarm1sb8X7ECAW"
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.3.4_1561477900836_0.3869748812878475"
      },
      "_hasShrinkwrap": false
    },
    "3.3.5": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.3.5",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "config": {
        "commitizen": {
          "path": "cz-conventional-changelog"
        }
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^1.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^4.0.0"
      },
      "devDependencies": {
        "ava": "^2.0.0",
        "codecov": "^3.0.0",
        "commitizen": "^3.0.0",
        "cz-conventional-changelog": "^2.0.0",
        "nyc": "^14.0.0",
        "semantic-release": "^15.0.0",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.24.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "cm": "git-cz",
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "e7614faee3aed3f8f567089034f1d7d043678e2c",
      "_id": "@semantic-release/exec@3.3.5",
      "_nodeVersion": "10.16.0",
      "_npmVersion": "6.9.0",
      "dist": {
        "integrity": "sha512-P4/IUL5SY6l9av0VCZEc1GjKG0LJshigvvpL/gxIUCTgGNahi+ZtP2Um9RXOc/3elekg1SDEXFUKlTEu2+JTyQ==",
        "shasum": "19fa9d6852ff77a70966a972510c4ad0c4ae3147",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.3.5.tgz",
        "fileCount": 8,
        "unpackedSize": 23006,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdE6vxCRA9TVsSAnZWagAA8p4P+wW75/TP2q+A7rQPi7sI\n8tNtWrwXj7h6fyT8cS0Ar/g9xA8SH/tsW4d+gwuS3SWDriWyYBiTTc9Ki3J1\n7FX1wKPiACzh7RLCQm+ynVcyHz6SaXtNIG6Q2H1CpQgVI5vpaG8ohk/7PIaj\nXaPnm0KCh901hBJxE7bI8Swt485RXtqFEnTwz1gT1F3e5chkmvFXOPxPx3h+\nyu3GPrTvtT9O0MjAS1EQRVQIYpgKuhvLO2TqmrYQrHjeSTwb6mDmnfYiXvtZ\na/3nQTfLTXqU/7jOFNGN1Ltwncl0yVWWhnq961/xCNrAX8vs0u5xDUP2G49t\ngfOEnIQiVxcVczZ7VY1Dg1eYzw8FuGeO5vXVehG5iwWV/8SPEL29Oox9U/bV\n9ypxWWsRB/rQ9auarQyRVloY7Ixds3cddtaOcZL3uncuynUC9gGH6df8dPg5\nkFzcfhfqVBqrxOJbJFT8r5OkV6inWxHU7q86d6OfP7MzKteevgH+ITkQIIsL\nLvH8wZjbL6NpTDwtPEhlxQuL7TCV36XOoLyRgzJDjcyNSKu87sp727+Y9Iny\nqvnBJBibxfgoc5QoF8wHAO4ea63RB6AVewzmI2MEmolcnNcUhFtC45PLsRTC\nmK2T0QE2EoOAQkxQbHuy++IOJLmitsVzYtrHSa5MEnp/HMfrcRoV391qPo0b\nOG6k\r\n=G4XS\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCvM7+SaLeaWfsznU6FFvxYyoRsKL8ibttxF12KXS3tCgIgBfC8NxnGzWbCF/y6Bpeg1LakQU+yUJIts+3Tsg0jJrE="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.3.5_1561570288025_0.7501951979031001"
      },
      "_hasShrinkwrap": false
    },
    "3.3.6": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.3.6",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^1.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^5.0.0"
      },
      "devDependencies": {
        "ava": "^2.0.0",
        "codecov": "^3.0.0",
        "nyc": "^14.0.0",
        "semantic-release": "^15.0.0",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.24.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "9af96da2135350ab4fbbff1f8ee218dca88fbfb3",
      "_id": "@semantic-release/exec@3.3.6",
      "_nodeVersion": "10.16.2",
      "_npmVersion": "6.10.3",
      "dist": {
        "integrity": "sha512-Nme7mgDHaoj+mc+hC7HCQB5r6c6f6P0jg/ZntG3AyyO8wPVQOXunbF8Qmhk5+JVlCer0ubPW7BlBXSi6pCbdzw==",
        "shasum": "34cf1bf4256a8e5c71249641c62516203cb26b35",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.3.6.tgz",
        "fileCount": 8,
        "unpackedSize": 22828,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdTcAoCRA9TVsSAnZWagAAY58P/20Bs1ILMYn7SXURp8rc\nYbqgtlcfybhx/eOSbJ4qpHo7sg7tW5fANuDarWNrFH/Mt7Ri8xHitK//+Ysq\nYApdbDMoRguOls0q3H7F3DHNQQXO/knb/3JPxnoPGRHUKH+bOV0KprIHz59K\nTjPcP54UtOFxq71ljDP/g/P+vSxwFgO4VOzDrqR3vAJy62AdDpptok4nZNwB\nqjHqJrAPP+E5/vxT9wJrLlLK2tASDf4bPQnL7kKxc01gQHhyQEOKW4qzgANk\nvT02kPqKDwhRgkdbZ/MFnkoGGUezlxgyHEYSlzkwXTLAYl7TirTDpziX5q2M\naSZ5/pNk5chn0mJw1qR2tntwRUwBZmH7USLK8OFF+lUNQFBVhlfZKsa/ej9g\nHJ3oFAYYT8dJ+JLaZyctN1fyYLNcpAIEq+fNisQ32h/2qtjcx1YhJnedH9FG\nVp13f0pHCHXAgIpz7hgoiTQ8ChmCtjB+TgBIr5KvR/l+gvAK3dW1Ap8KjY5h\nmCOr7u6n+ROqLSY3BWPFwD3a49dGcz5+fMdRYjEvRSxiMwKCrIZHMIBUfOGL\n0OnTmCsSntyfz9BZn5YS9nY3T890OvKddUGM+NK3onT/fwawlYu0lSGrhUhr\nV3vSSwaMIDC6AuDUVca/KvMC9aNT/sPiaSFDkju1JGph0DJbDk+DLPNGp9H0\n+ZCp\r\n=zve+\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDCP0h7ULwI96wniUybbT3D+L4TB8Z4HVk3/1rIU1XJ8gIgDNCeQLwgX5hgJ97qPzvAf42hWvjJXzMFQ2s+tlXgsf4="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.3.6_1565376551674_0.4678086836730515"
      },
      "_hasShrinkwrap": false
    },
    "3.3.7": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.3.7",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^1.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^5.0.0"
      },
      "devDependencies": {
        "ava": "^2.0.0",
        "codecov": "^3.0.0",
        "nyc": "^14.0.0",
        "semantic-release": "^15.0.0",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.24.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "359844e6b3aee796962098b7876d1357d8407d68",
      "_id": "@semantic-release/exec@3.3.7",
      "_nodeVersion": "10.16.3",
      "_npmVersion": "6.11.3",
      "dist": {
        "integrity": "sha512-X7PKvhUi9PwnwKpCJSIe+liSEXLudc1cVXEvXHFTOVEbFyokd6G8y1+6hr3NqgMfEBfiH5uilySvszQIud5nZw==",
        "shasum": "31415bed49bc885bbeffd6a277a431f46c4fa1e6",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.3.7.tgz",
        "fileCount": 8,
        "unpackedSize": 22815,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdg+etCRA9TVsSAnZWagAAZ5kP/19nsK+daqfmKGAAporI\nuYPDMA8BieZ9fYldd+pgRtmIKbc71s4YgU9jZd739jMuv7oBKJ9BRVF4AUPF\nopRTCgk36KpiMCr5xAelBMNPQA9BXXMQkmSYw9NP49RR/rUo9Khp/VxHnxPI\nE+CdHQ2AlvOUC7QQmowjL+Qg1Xc9G7Ar8bIXZPq1v4Ul8bIOzLiGmrjjMTnO\n80Y4itREfhTnIlCxIYozfWEIa8J4kMxuqaMv05HFZ2KAahxhNo2OYbX9AVl5\ngoxgDPkFSpOfdTwNuPElqMsJCVu94dpnTgSfa1Xw8Aa77lSBncxvye2ogVdr\nvAuCBS51DCK74iH3px75qGz8onMyKqO3T1iWxfBWEJXZREza3JCpfh1xzAvn\n9VEvoIe9XDuMEi7XJWfO/3VMaXnQcu1Sf0xBMod/Jkbr12mQzSsvB3rVPZQz\ncP8cB1XZKfokHHZWuSV5oows++T5zjbnJNRI4NTrph5m81f9ACusmbgp8YBr\nHU8OAzZz/L1zK3K8+MOKCy/GM5M4E6XNjmhK97YRwIlgNrTmONzLv+Lk9ZTI\nUPxOnWVGbSS3Sv8yc/lr3uLUKix6jfUQOoAJdQg0vkXpJqfKq0TrYlJnAFHI\nhD/KcFIPveFBBi1tx+i7rhla7zMFimqg00VhEzcqfM5z9d3Q+SIO5H3KFiGP\nPXta\r\n=RtMv\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFMKlzLOiT1vgO0wqb73sq+ZCH6lCnvxI/oAp3twINUvAiBi6MRCjYHEJrQKt2nzwRJ0LzK8lLU3FdIOBF+AeyRRFw=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.3.7_1568925613092_0.07578768050770512"
      },
      "_hasShrinkwrap": false
    },
    "3.4.0-beta.3": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.4.0-beta.3",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^1.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^5.0.0"
      },
      "devDependencies": {
        "ava": "^2.0.0",
        "codecov": "^3.0.0",
        "nyc": "^14.0.0",
        "semantic-release": "^16.0.0-beta",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.25.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <17.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "0e19531b083f8c270ac71510609deb186ea6682e",
      "readme": "# @semantic-release/exec\n\n[**semantic-release**](https://github.com/semantic-release/semantic-release) plugin to execute custom shell commands.\n\n[![Travis](https://img.shields.io/travis/semantic-release/exec.svg)](https://travis-ci.org/semantic-release/exec)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/exec.svg)](https://codecov.io/gh/semantic-release/exec)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/exec.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm beta version](https://img.shields.io/npm/v/@semantic-release/exec/beta.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n| Step               | Description                                                                                             |\n|--------------------|---------------------------------------------------------------------------------------------------------|\n| `verifyConditions` | Execute a shell command to verify if the release should happen.                                         |\n| `analyzeCommits`   | Execute a shell command to determine the type of release.                                               |\n| `verifyRelease`    | Execute a shell command to verifying a release that was determined before and is about to be published. |\n| `generateNotes`    | Execute a shell command to generate the release note.                                                   |\n| `prepare`          | Execute a shell command to prepare the release.                                                         |\n| `publish`          | Execute a shell command to publish the release.                                                         |\n| `success`          | Execute a shell command to notify of a new release.                                                     |\n| `fail`             | Execute a shell command to notify of a failed release.                                                  |\n\n## Install\n\n```bash\n$ npm install @semantic-release/exec -D\n```\n\n## Usage\n\nThe plugin can be configured in the [**semantic-release** configuration file](https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#configuration):\n\n```json\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\"@semantic-release/exec\", {\n      \"verifyConditionsCmd\": \"./verify.sh\",\n      \"publishCmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\"\n    }],\n  ]\n}\n```\n\nWith this example:\n- the shell command `./verify.sh` will be executed on the [verify conditions step](https://github.com/semantic-release/semantic-release#release-steps)\n- the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`) will be executed on the [publish step](https://github.com/semantic-release/semantic-release#release-steps)\n\n## Configuration\n\n### Options\n\n| Options               | Description                                                                                                                                                                                                                                                                                                                              |\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `verifyConditionsCmd` | The shell command to execute during the verify condition step. See [verifyConditionsCmd](#verifyconditionscmd).                                                                                                                                                                                                                          |\n| `analyzeCommitsCmd`   | The shell command to execute during the analyze commits step. See [analyzeCommitsCmd](#analyzecommitscmd).                                                                                                                                                                                                                               |\n| `verifyReleaseCmd`    | The shell command to execute during the verify release step. See [verifyReleaseCmd](#verifyreleasecmd).                                                                                                                                                                                                                                  |\n| `generateNotesCmd`    | The shell command to execute during the generate notes step. See [generateNotesCmd](#generatenotescmd).                                                                                                                                                                                                                                  |\n| `prepareCmd`          | The shell command to execute during the prepare step. See [prepareCmd](#preparecmd).                                                                                                                                                                                                                                                     |\n| `addChannelCmd`       | The shell command to execute during the add channel step. See [addChannelCmd](#addchannelcmd).                                                                                                                                                                                                                                           |\n| `publishCmd`          | The shell command to execute during the publish step. See [publishCmd](#publishcmd).                                                                                                                                                                                                                                                     |\n| `successCmd`          | The shell command to execute during the success step. See [successCmd](#successcmd).                                                                                                                                                                                                                                                     |\n| `failCmd`             | The shell command to execute during the fail step. See [failCmd](#failcmd).                                                                                                                                                                                                                                                              |\n| `shell`               | The shell to use to run the command. See [execa#shell](https://github.com/sindresorhus/execa#shell).                                                                                                                                                                                                                                     |\n| `execCwd`             | The path to use as current working directory when executing the shell commands. This path is relative to the path from which **semantic-release** is running. For example if **semantic-release** runs from `/my-project` and `execCwd` is set to `buildScripts` then the shell command will be executed from `/my-project/buildScripts` |\n\nEach shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objets passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n## verifyConditionsCmd\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommitsCmd\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyReleaseCmd\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotesCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## prepareCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## addChannelCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## publishCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## successCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## failCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n",
      "readmeFilename": "README.md",
      "_id": "@semantic-release/exec@3.4.0-beta.3",
      "_nodeVersion": "10.16.3",
      "_npmVersion": "6.11.3",
      "dist": {
        "integrity": "sha512-VlGXnoMaVADI4svv7JT3yzWZ4ujhWhePqlcdjaQrdwjkXDs2L71OjlKsMkTKM9FjfigEpqG2Kq/YauxY38ELqA==",
        "shasum": "b26757bb5472f58ffd9c91067705ce8ab4932dc0",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.4.0-beta.3.tgz",
        "fileCount": 8,
        "unpackedSize": 25226,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdlQf1CRA9TVsSAnZWagAA+Z4P/1NqRX3d1JLmTvFo2cfW\n81H2YbY4YeEzUivlQG8ZrgC+Gx1LupaKC0EtGdYt3wwLxXacYAyIDb+/yVAL\nhASc/s3k+tTsVsKZQun+mkWypCSZQyRRlfYUos/zIIW+siTDZpB7zjA1VtuI\nmCIJaxi1ajstXot2UsGWxglWcX+XfPhT/WPX09KRqeiTj9mHF3G7NET1XtN6\ni2ojcVSqpZs0Mqs8qwKouuBDmm6Dh0OTqzxGUxJ5klfyol6nsXBNDlHH2fkf\nAaEz9VjKEtkst1v8i/9yLuTB31a4q8MeHTigpr0l/DzOAThHvqpDXjOyXaAN\n/vqBUTOVh8GMJ9MbPDHv65HHIV50wRxikJRuu8qlcLtDwW1suUgDvktr5mqJ\n3RIyS+EZrwAS2DvGunnvWMgnzxAYqajSVfNEEjczQogUDGmJaI9AtMtEJt0u\n12ToXx+Os0ukDaYKtT7coG2wzKRTaHsuTzIWXpU5m6rS61veCAbq+XxILZd0\not+XBlTghcHJgQJ12N11P2QX9sKXExy5BvZwpT6FkEJJjgxPIfYz8kz89n6q\nD3/NxkU74T4DctxQf7R8JWAmzeFwu4gn6kQsAWx9o1d19tuf7H+bvRPlMLYU\nje9xQCibR33rJ1I8ckW/B4tpgi/QoWzvp9ldPqQgUmuP4qBTJkNCVYWTdJka\no21y\r\n=WiDt\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCoNbVkFc0/6l7+b47qKRtEgiXvARX9lo44VTfHcbPkMQIgDGCp5eAGLj4cvJZ+ayoX+F7/pORP39w/jrMvqyNW0D8="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.4.0-beta.3_1570047988698_0.12534717455338562"
      },
      "_hasShrinkwrap": false
    },
    "3.4.0-beta.4": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.4.0-beta.4",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^2.0.2",
        "lodash": "^4.17.4",
        "parse-json": "^5.0.0"
      },
      "devDependencies": {
        "ava": "^2.0.0",
        "codecov": "^3.0.0",
        "nyc": "^14.0.0",
        "semantic-release": "^16.0.0-beta",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.25.0"
      },
      "engines": {
        "node": ">=8.3"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <17.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "6579bb37bf136ebc3f58eaba2b729ee92d63df94",
      "readme": "# @semantic-release/exec\n\n[**semantic-release**](https://github.com/semantic-release/semantic-release) plugin to execute custom shell commands.\n\n[![Travis](https://img.shields.io/travis/semantic-release/exec.svg)](https://travis-ci.org/semantic-release/exec)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/exec.svg)](https://codecov.io/gh/semantic-release/exec)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/exec.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm beta version](https://img.shields.io/npm/v/@semantic-release/exec/beta.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n| Step               | Description                                                                                             |\n|--------------------|---------------------------------------------------------------------------------------------------------|\n| `verifyConditions` | Execute a shell command to verify if the release should happen.                                         |\n| `analyzeCommits`   | Execute a shell command to determine the type of release.                                               |\n| `verifyRelease`    | Execute a shell command to verifying a release that was determined before and is about to be published. |\n| `generateNotes`    | Execute a shell command to generate the release note.                                                   |\n| `prepare`          | Execute a shell command to prepare the release.                                                         |\n| `publish`          | Execute a shell command to publish the release.                                                         |\n| `success`          | Execute a shell command to notify of a new release.                                                     |\n| `fail`             | Execute a shell command to notify of a failed release.                                                  |\n\n## Install\n\n```bash\n$ npm install @semantic-release/exec -D\n```\n\n## Usage\n\nThe plugin can be configured in the [**semantic-release** configuration file](https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#configuration):\n\n```json\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\"@semantic-release/exec\", {\n      \"verifyConditionsCmd\": \"./verify.sh\",\n      \"publishCmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\"\n    }],\n  ]\n}\n```\n\nWith this example:\n- the shell command `./verify.sh` will be executed on the [verify conditions step](https://github.com/semantic-release/semantic-release#release-steps)\n- the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`) will be executed on the [publish step](https://github.com/semantic-release/semantic-release#release-steps)\n\n## Configuration\n\n### Options\n\n| Options               | Description                                                                                                                                                                                                                                                                                                                              |\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `verifyConditionsCmd` | The shell command to execute during the verify condition step. See [verifyConditionsCmd](#verifyconditionscmd).                                                                                                                                                                                                                          |\n| `analyzeCommitsCmd`   | The shell command to execute during the analyze commits step. See [analyzeCommitsCmd](#analyzecommitscmd).                                                                                                                                                                                                                               |\n| `verifyReleaseCmd`    | The shell command to execute during the verify release step. See [verifyReleaseCmd](#verifyreleasecmd).                                                                                                                                                                                                                                  |\n| `generateNotesCmd`    | The shell command to execute during the generate notes step. See [generateNotesCmd](#generatenotescmd).                                                                                                                                                                                                                                  |\n| `prepareCmd`          | The shell command to execute during the prepare step. See [prepareCmd](#preparecmd).                                                                                                                                                                                                                                                     |\n| `addChannelCmd`       | The shell command to execute during the add channel step. See [addChannelCmd](#addchannelcmd).                                                                                                                                                                                                                                           |\n| `publishCmd`          | The shell command to execute during the publish step. See [publishCmd](#publishcmd).                                                                                                                                                                                                                                                     |\n| `successCmd`          | The shell command to execute during the success step. See [successCmd](#successcmd).                                                                                                                                                                                                                                                     |\n| `failCmd`             | The shell command to execute during the fail step. See [failCmd](#failcmd).                                                                                                                                                                                                                                                              |\n| `shell`               | The shell to use to run the command. See [execa#shell](https://github.com/sindresorhus/execa#shell).                                                                                                                                                                                                                                     |\n| `execCwd`             | The path to use as current working directory when executing the shell commands. This path is relative to the path from which **semantic-release** is running. For example if **semantic-release** runs from `/my-project` and `execCwd` is set to `buildScripts` then the shell command will be executed from `/my-project/buildScripts` |\n\nEach shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objets passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n## verifyConditionsCmd\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommitsCmd\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyReleaseCmd\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotesCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## prepareCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## addChannelCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## publishCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## successCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## failCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n",
      "readmeFilename": "README.md",
      "_id": "@semantic-release/exec@3.4.0-beta.4",
      "_nodeVersion": "10.16.3",
      "_npmVersion": "6.11.3",
      "dist": {
        "integrity": "sha512-mOEnShE0beS2/rBgijo9BqL9S+FQ52oq+fR5t4JzKWIscfjOI5ibe0nwgx/Vp4UVuf/BovswGacqvfFTHHI7/g==",
        "shasum": "7b3641d24e360e26f8cf029d0c0fbf330731a3e4",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.4.0-beta.4.tgz",
        "fileCount": 8,
        "unpackedSize": 25235,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdlQr6CRA9TVsSAnZWagAAejoP/1oq8fUtHxk8CjOg2Dim\not/BLyRKMSrlIOuN3pEk8+tfEPjij+cWsCaCSe2Kgk2Lh8+RDuP/8vrhEaie\n8lXcML8KPoUxFkUcdryIDpaIkHstKRcj4Uv0jB4SfZQuoZkGMvEYMHNJpJ7j\n66S/xhnzzmaFodHgwTBJnPrBt9ILL2rqybTwB4m2MuPqfqZ63WywVY9njSfU\n/LUdTXW32FCmB/c3YygXi4MaPmSMcmmDh7MQH1XTrR732C0BB1/DTzrmL8vv\nkdDPxz27bMQbkCjZYtGskTcE3tMqAN8+fdevoR6vVvo4ZZSHr998BEPpiQUG\ncX4URdYvxcN8yulqY1lJejfgeaObhxuJ3IIXGXpSlbEAebcjkqrQBM3GIE8R\n2rQW/kOBNLWegPlvgJy0BCVrAPZku0Ax8+f4jma+nrx/i58K5nCx874Z335j\nqFIfyBjHSqtuQJBu9crwZhGDHtzZM/SaA9Yw99ZgOqX6tkonfKP7WXxCKrTN\nIvQERo2QeqRVGS3uFg2VWP4RyG2UiVqnnLVPjbYRVguNK8JKmiZ2GFKxQcv3\nx87nKKtBEfyrJcx8aaUG3pIj7qqYfGuy9cPjWTNnQu3Li6THdv3dSUmKPq30\n1cCKBMd95p54DW5zAHdxQgyVoq8lwVzwYUnNwrvcQUH74Cd77I5RPD9fMYsZ\nztMh\r\n=KPuQ\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDdLKOBAXpwG7BNw9QdRMTvjbzyJ298cia+1WdPJO1PagIhAI169p8Fue7vWBtb3lCOiCqI7tyYaxGIIkrxcH5SIuqm"
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.4.0-beta.4_1570048761908_0.5354630888063023"
      },
      "_hasShrinkwrap": false
    },
    "3.4.0-beta.5": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.4.0-beta.5",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^2.0.2",
        "lodash": "^4.17.4",
        "parse-json": "^5.0.0"
      },
      "devDependencies": {
        "ava": "^2.0.0",
        "codecov": "^3.0.0",
        "nyc": "^14.0.0",
        "semantic-release": "^16.0.0-beta",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.25.0"
      },
      "engines": {
        "node": ">=8.15"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <17.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "454965e4d0d8a6cf0129c2a730ed6c19191fb58e",
      "readme": "# @semantic-release/exec\n\n[**semantic-release**](https://github.com/semantic-release/semantic-release) plugin to execute custom shell commands.\n\n[![Travis](https://img.shields.io/travis/semantic-release/exec.svg)](https://travis-ci.org/semantic-release/exec)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/exec.svg)](https://codecov.io/gh/semantic-release/exec)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/exec.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm beta version](https://img.shields.io/npm/v/@semantic-release/exec/beta.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n| Step               | Description                                                                                             |\n|--------------------|---------------------------------------------------------------------------------------------------------|\n| `verifyConditions` | Execute a shell command to verify if the release should happen.                                         |\n| `analyzeCommits`   | Execute a shell command to determine the type of release.                                               |\n| `verifyRelease`    | Execute a shell command to verifying a release that was determined before and is about to be published. |\n| `generateNotes`    | Execute a shell command to generate the release note.                                                   |\n| `prepare`          | Execute a shell command to prepare the release.                                                         |\n| `publish`          | Execute a shell command to publish the release.                                                         |\n| `success`          | Execute a shell command to notify of a new release.                                                     |\n| `fail`             | Execute a shell command to notify of a failed release.                                                  |\n\n## Install\n\n```bash\n$ npm install @semantic-release/exec -D\n```\n\n## Usage\n\nThe plugin can be configured in the [**semantic-release** configuration file](https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#configuration):\n\n```json\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\"@semantic-release/exec\", {\n      \"verifyConditionsCmd\": \"./verify.sh\",\n      \"publishCmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\"\n    }],\n  ]\n}\n```\n\nWith this example:\n- the shell command `./verify.sh` will be executed on the [verify conditions step](https://github.com/semantic-release/semantic-release#release-steps)\n- the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`) will be executed on the [publish step](https://github.com/semantic-release/semantic-release#release-steps)\n\n## Configuration\n\n### Options\n\n| Options               | Description                                                                                                                                                                                                                                                                                                                              |\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `verifyConditionsCmd` | The shell command to execute during the verify condition step. See [verifyConditionsCmd](#verifyconditionscmd).                                                                                                                                                                                                                          |\n| `analyzeCommitsCmd`   | The shell command to execute during the analyze commits step. See [analyzeCommitsCmd](#analyzecommitscmd).                                                                                                                                                                                                                               |\n| `verifyReleaseCmd`    | The shell command to execute during the verify release step. See [verifyReleaseCmd](#verifyreleasecmd).                                                                                                                                                                                                                                  |\n| `generateNotesCmd`    | The shell command to execute during the generate notes step. See [generateNotesCmd](#generatenotescmd).                                                                                                                                                                                                                                  |\n| `prepareCmd`          | The shell command to execute during the prepare step. See [prepareCmd](#preparecmd).                                                                                                                                                                                                                                                     |\n| `addChannelCmd`       | The shell command to execute during the add channel step. See [addChannelCmd](#addchannelcmd).                                                                                                                                                                                                                                           |\n| `publishCmd`          | The shell command to execute during the publish step. See [publishCmd](#publishcmd).                                                                                                                                                                                                                                                     |\n| `successCmd`          | The shell command to execute during the success step. See [successCmd](#successcmd).                                                                                                                                                                                                                                                     |\n| `failCmd`             | The shell command to execute during the fail step. See [failCmd](#failcmd).                                                                                                                                                                                                                                                              |\n| `shell`               | The shell to use to run the command. See [execa#shell](https://github.com/sindresorhus/execa#shell).                                                                                                                                                                                                                                     |\n| `execCwd`             | The path to use as current working directory when executing the shell commands. This path is relative to the path from which **semantic-release** is running. For example if **semantic-release** runs from `/my-project` and `execCwd` is set to `buildScripts` then the shell command will be executed from `/my-project/buildScripts` |\n\nEach shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objets passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n## verifyConditionsCmd\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommitsCmd\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyReleaseCmd\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotesCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## prepareCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## addChannelCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## publishCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## successCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## failCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n",
      "readmeFilename": "README.md",
      "_id": "@semantic-release/exec@3.4.0-beta.5",
      "_nodeVersion": "10.16.3",
      "_npmVersion": "6.11.3",
      "dist": {
        "integrity": "sha512-UB/x0QMgQ3m1n83WbIrdIzT/mqwtBGNysKgOF3Hr7kQEyIzbEynNC/l6v78rLEqy7/0/tfwizEiIIF32/BQYKg==",
        "shasum": "1752e746f6a417704bae32b4fac92449f045512f",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.4.0-beta.5.tgz",
        "fileCount": 8,
        "unpackedSize": 25236,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdlRIBCRA9TVsSAnZWagAAp2UP/0NrLxazlMv2puKcvWCw\nJ8g8r5vu9rc8By5SBDbEsNdU3OIe0n81c5I39xlPzxGYceu340iy8PpFu8h1\nYFZif+fsQbL3+wPOBsGF0oz6PCgP68QML96y6tzhC0nMZRLdW0YrfXBXba4T\noYevDHSdX2m34MYm+bPaYGRWDosmAFZzcinOLIIapawQtKqcBA0Ytw35mHqA\nv+4QGHEbT7emawe1B5+5JAGqepbf2y07MimxnXsRI+RQK4n/9V8Zl9GC6P3u\naIzcoHwftIL31WyTzattlFntCuOPpy5Ak2T4M6FnD/T7MCGSOUseMhfiXhM5\nUVsuHixwNNJ9Va+QV49v/CQYSvx05TgPDJIFDuANyE6O6wIzQBzxx2NCmTec\nkgpmwFIwEJnHwlLSBCkYjxKuSBcfYUL1z4hUKKlwVo4K53Mb9g30wRIJIUS/\nuPW5zASEPzI0hSU06V3OfjlIkPqLfJCndCt6Dw8BfaqdDULuwjGjpXH1aRZj\n5tQisXnHxiFyDPmUW7nDGkbgOoCtxWjOzGIHJhB6LKFFgmfMzyTZkasKbs+O\nd7+zt0lDLpF98mfFCJLM6JAIELOUC3dsJo4uDrlWeJuACC+lkUO+vPjPZ5Hi\n2SPf1c/vDX80ETlSvUEx65/ZrLjCeo83cAfthG7SXxVztLtcem5qrsULmE9N\nuNHZ\r\n=a8iq\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFV0LRQaNl3igkVjRReNIr8UDuG2Gty2HWvb056RZj5fAiEAvaKiHJbfNazr8cwdHTa0k88JXgwm8+aWlkUHr1+BQ48="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.4.0-beta.5_1570050560898_0.6053054017035084"
      },
      "_hasShrinkwrap": false
    },
    "3.4.0-beta.6": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.4.0-beta.6",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^3.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^5.0.0"
      },
      "devDependencies": {
        "ava": "^2.0.0",
        "codecov": "^3.0.0",
        "nyc": "^14.0.0",
        "semantic-release": "^16.0.0-beta",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.25.0"
      },
      "engines": {
        "node": ">=8.15"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <17.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "ae40d3fa4a122f0457811babe3f5ab823091e001",
      "readme": "# @semantic-release/exec\n\n[**semantic-release**](https://github.com/semantic-release/semantic-release) plugin to execute custom shell commands.\n\n[![Travis](https://img.shields.io/travis/semantic-release/exec.svg)](https://travis-ci.org/semantic-release/exec)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/exec.svg)](https://codecov.io/gh/semantic-release/exec)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/exec.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm beta version](https://img.shields.io/npm/v/@semantic-release/exec/beta.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n| Step               | Description                                                                                             |\n|--------------------|---------------------------------------------------------------------------------------------------------|\n| `verifyConditions` | Execute a shell command to verify if the release should happen.                                         |\n| `analyzeCommits`   | Execute a shell command to determine the type of release.                                               |\n| `verifyRelease`    | Execute a shell command to verifying a release that was determined before and is about to be published. |\n| `generateNotes`    | Execute a shell command to generate the release note.                                                   |\n| `prepare`          | Execute a shell command to prepare the release.                                                         |\n| `publish`          | Execute a shell command to publish the release.                                                         |\n| `success`          | Execute a shell command to notify of a new release.                                                     |\n| `fail`             | Execute a shell command to notify of a failed release.                                                  |\n\n## Install\n\n```bash\n$ npm install @semantic-release/exec -D\n```\n\n## Usage\n\nThe plugin can be configured in the [**semantic-release** configuration file](https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#configuration):\n\n```json\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\"@semantic-release/exec\", {\n      \"verifyConditionsCmd\": \"./verify.sh\",\n      \"publishCmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\"\n    }],\n  ]\n}\n```\n\nWith this example:\n- the shell command `./verify.sh` will be executed on the [verify conditions step](https://github.com/semantic-release/semantic-release#release-steps)\n- the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`) will be executed on the [publish step](https://github.com/semantic-release/semantic-release#release-steps)\n\n## Configuration\n\n### Options\n\n| Options               | Description                                                                                                                                                                                                                                                                                                                              |\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `verifyConditionsCmd` | The shell command to execute during the verify condition step. See [verifyConditionsCmd](#verifyconditionscmd).                                                                                                                                                                                                                          |\n| `analyzeCommitsCmd`   | The shell command to execute during the analyze commits step. See [analyzeCommitsCmd](#analyzecommitscmd).                                                                                                                                                                                                                               |\n| `verifyReleaseCmd`    | The shell command to execute during the verify release step. See [verifyReleaseCmd](#verifyreleasecmd).                                                                                                                                                                                                                                  |\n| `generateNotesCmd`    | The shell command to execute during the generate notes step. See [generateNotesCmd](#generatenotescmd).                                                                                                                                                                                                                                  |\n| `prepareCmd`          | The shell command to execute during the prepare step. See [prepareCmd](#preparecmd).                                                                                                                                                                                                                                                     |\n| `addChannelCmd`       | The shell command to execute during the add channel step. See [addChannelCmd](#addchannelcmd).                                                                                                                                                                                                                                           |\n| `publishCmd`          | The shell command to execute during the publish step. See [publishCmd](#publishcmd).                                                                                                                                                                                                                                                     |\n| `successCmd`          | The shell command to execute during the success step. See [successCmd](#successcmd).                                                                                                                                                                                                                                                     |\n| `failCmd`             | The shell command to execute during the fail step. See [failCmd](#failcmd).                                                                                                                                                                                                                                                              |\n| `shell`               | The shell to use to run the command. See [execa#shell](https://github.com/sindresorhus/execa#shell).                                                                                                                                                                                                                                     |\n| `execCwd`             | The path to use as current working directory when executing the shell commands. This path is relative to the path from which **semantic-release** is running. For example if **semantic-release** runs from `/my-project` and `execCwd` is set to `buildScripts` then the shell command will be executed from `/my-project/buildScripts` |\n\nEach shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objets passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n## verifyConditionsCmd\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommitsCmd\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyReleaseCmd\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotesCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## prepareCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## addChannelCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## publishCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## successCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## failCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n",
      "readmeFilename": "README.md",
      "_id": "@semantic-release/exec@3.4.0-beta.6",
      "_nodeVersion": "10.16.3",
      "_npmVersion": "6.11.3",
      "dist": {
        "integrity": "sha512-2NR2KjH6DaFmtjwimqIvEd67QcGFvXcSaBOoTtqxGNGlEbnK+sN7HrA1OUqmWeD2iSgMwia2CMqredXEB86kvw==",
        "shasum": "fde252ece853eb87b285f1e4a212e0f8e86fbd31",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.4.0-beta.6.tgz",
        "fileCount": 8,
        "unpackedSize": 25236,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdpKqbCRA9TVsSAnZWagAA9bEP/j6vXiqd0lqig04rc7/x\nOhqlmAX4rR0FcgTH8f9E6eIgM8vTW8Pxv+xIIHgo/0O/O/W39vTiDE5Gs2kr\nZ/m0yNsVO1EUlxCL4FtLnsUBhHEeMaC0REuczyIpRbzYT+2NJCBr8Rud+Pe8\naJ9JqiGyosgRS6Z4M18+ia/THCDXVIY4+I105ojk1Je+JfS1Ce8ZtGpFfv16\nUpw9SYF8G4xyQ2PDi6MMXjWJ7AkuA0hy9Tb8mcYBYRRWK+sn4HLjZMHle4QE\nod4cCWPsO1gxNu7XfAcSoZGM2DaiilXr3fnWW7WpNO7dXo/1GJsCmjJuwzU3\n2fCSB/unlHxfXrKabeAD6qxiB5R8roQZVV3/mcHIrVavY/su41zISEQRau9G\n19S92fO8g5deDSqwvG5FZ+YdPl9V2dR6Pte8eMNiAQjB+I32D1gB3+iwdOIG\nx8btQG+AWHfajwB7fwqugMTR8IpvdAiKR+cloxrTp0mBjcSOMVhhZsw13Pky\nJWpjpjEVy80fTwz+ybGSCc8MzDs3XHtl/dYloYbW9BAkZxEEXIBr/v8t65gw\nM1w8Jj8pOtI0VKJZRoIBKnAZ61sgat17SJegEqGuUCREf8oen4tWPVjdKhDd\nJNlBsEZ/XAf175b+mLnFIqNyJH14m/R966qFd9YZ1A/TNsJfx/BqRW1GOPxC\nOhjD\r\n=EP76\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCxcRHc6wHBS250Gevx/PBAiNHYepgWXQTRZtzBn0OoMwIgIGN0VqL+Nxi32sIYwL8UkgFc8loZjKXvdVVZdVNESm8="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.4.0-beta.6_1571072666184_0.011756884815378621"
      },
      "_hasShrinkwrap": false
    },
    "3.3.8": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.3.8",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^3.2.0",
        "lodash": "^4.17.4",
        "parse-json": "^5.0.0"
      },
      "devDependencies": {
        "ava": "^2.0.0",
        "codecov": "^3.0.0",
        "nyc": "^14.0.0",
        "semantic-release": "^15.0.0",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.25.0"
      },
      "engines": {
        "node": ">=8.16"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <16.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public",
        "tag": "next"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "1b89db49c1e5e2873c9c6d0553f21cd8981debe0",
      "_id": "@semantic-release/exec@3.3.8",
      "_nodeVersion": "12.13.0",
      "_npmVersion": "6.12.0",
      "dist": {
        "integrity": "sha512-GH1v5BwXRIUAnvrXjil+R+9DjI+ELgk2NMdQUAnp2/qZ6YItZt6KI8HrY3zAFDrG0YGaOwC9XxuUNKeldsOK7A==",
        "shasum": "4e759818c47bdb36e0199d8fad0f5343421f6d8f",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.3.8.tgz",
        "fileCount": 8,
        "unpackedSize": 23165,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJds81VCRA9TVsSAnZWagAAkvAQAIcBp8ouU+Lsk/sPDsGG\ntjMRKPCRP3s9vANPJGRlP9BP7LfZAEa4Nudqrf0vmE2LaPahznkx05WfbTUs\nSEKY1aORvz1Au6VafpyHSN/AeB+dqbY6akzDZ+wPxjtHZt0EJ9hx/iOI01d3\nEQpayoe58jfCVZwybzYBBSMOPL66+RUJtBBaWwT8aTqlnj5V6HtvCYfBQMdu\nOI3uJRHbN4irkkTAWzDgHGINmyXtLDF3Ktz37I+H3Z9PhiUohqnK0rzMWLTi\nX+mxj5P3noZpzuZfiZfG2H3k4CVJTsHndSeOKiG0lozmbEa5hMUbEHkrRvm8\n2ePlOAqHLb65BBL0AopCxb/zCyyHRK7V7goAKQIoNQcASJhwj6rDc8ZkXlLa\npkgxLUu6znXzxZy3lRtMMJa5hnbNKt0V5135MH+Rmjj/z95yYTQjcTNVAFsM\nNDIjqZMf+tEr1jJA0Xtar8GQTsFOEyP65ILOXt/FSOuwFUFoBQcxsbtbM5hr\n89tP3b8f7wi/Q5U4jDdCrakQcC0+42u2gxXxXT53gKqGS8Q9CnrWXEK+VAuJ\nYp+EpimvIR7gqYNKUqtDwgwJbGBnI7XCi+mRRyn8lUCkgwQR18+DWJUbEyhB\nBslFLJ4NGA/s6nUGDyR4mAbCtbhCn7NfAJ2q0wp39AXwoT9r5hyhWxfdFh90\nEeJ3\r\n=N845\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAmEkeU8RPl7auiwWHxul54y9YRGzxE54GQ2SQ0SdDWhAiEAwKTTUHCBUcHE13+okkueIw5LoD3B9HhuNBQAv3uFjFY="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.3.8_1572064597158_0.8891077108971845"
      },
      "_hasShrinkwrap": false
    },
    "3.4.0-beta.7": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.4.0-beta.7",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^3.2.0",
        "lodash": "^4.17.4",
        "parse-json": "^5.0.0"
      },
      "devDependencies": {
        "ava": "^2.0.0",
        "codecov": "^3.0.0",
        "nyc": "^14.0.0",
        "semantic-release": "^16.0.0-beta",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.25.0"
      },
      "engines": {
        "node": ">=8.16"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <17.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "ce00d4008f0afdca1066183a4ba5a48d34417f2b",
      "readme": "# @semantic-release/exec\n\n[**semantic-release**](https://github.com/semantic-release/semantic-release) plugin to execute custom shell commands.\n\n[![Travis](https://img.shields.io/travis/semantic-release/exec.svg)](https://travis-ci.org/semantic-release/exec)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/exec.svg)](https://codecov.io/gh/semantic-release/exec)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/exec.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm beta version](https://img.shields.io/npm/v/@semantic-release/exec/beta.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n| Step               | Description                                                                                             |\n|--------------------|---------------------------------------------------------------------------------------------------------|\n| `verifyConditions` | Execute a shell command to verify if the release should happen.                                         |\n| `analyzeCommits`   | Execute a shell command to determine the type of release.                                               |\n| `verifyRelease`    | Execute a shell command to verifying a release that was determined before and is about to be published. |\n| `generateNotes`    | Execute a shell command to generate the release note.                                                   |\n| `prepare`          | Execute a shell command to prepare the release.                                                         |\n| `publish`          | Execute a shell command to publish the release.                                                         |\n| `success`          | Execute a shell command to notify of a new release.                                                     |\n| `fail`             | Execute a shell command to notify of a failed release.                                                  |\n\n## Install\n\n```bash\n$ npm install @semantic-release/exec -D\n```\n\n## Usage\n\nThe plugin can be configured in the [**semantic-release** configuration file](https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#configuration):\n\n```json\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\"@semantic-release/exec\", {\n      \"verifyConditionsCmd\": \"./verify.sh\",\n      \"publishCmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\"\n    }],\n  ]\n}\n```\n\nWith this example:\n- the shell command `./verify.sh` will be executed on the [verify conditions step](https://github.com/semantic-release/semantic-release#release-steps)\n- the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`) will be executed on the [publish step](https://github.com/semantic-release/semantic-release#release-steps)\n\n**Note**: it's required to define a plugin for the [analyze commits step](https://github.com/semantic-release/semantic-release#release-steps). If no [analyzeCommitsCmd](#analyzecommitscmd) is defined the plugin [@semantic-release/commit-analyzer](https://github.com/semantic-release/commit-analyzer) must be defined in the `plugins` list.\n\n## Configuration\n\n### Options\n\n| Options               | Description                                                                                                                                                                                                                                                                                                                              |\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `verifyConditionsCmd` | The shell command to execute during the verify condition step. See [verifyConditionsCmd](#verifyconditionscmd).                                                                                                                                                                                                                          |\n| `analyzeCommitsCmd`   | The shell command to execute during the analyze commits step. See [analyzeCommitsCmd](#analyzecommitscmd).                                                                                                                                                                                                                               |\n| `verifyReleaseCmd`    | The shell command to execute during the verify release step. See [verifyReleaseCmd](#verifyreleasecmd).                                                                                                                                                                                                                                  |\n| `generateNotesCmd`    | The shell command to execute during the generate notes step. See [generateNotesCmd](#generatenotescmd).                                                                                                                                                                                                                                  |\n| `prepareCmd`          | The shell command to execute during the prepare step. See [prepareCmd](#preparecmd).                                                                                                                                                                                                                                                     |\n| `addChannelCmd`       | The shell command to execute during the add channel step. See [addChannelCmd](#addchannelcmd).                                                                                                                                                                                                                                           |\n| `publishCmd`          | The shell command to execute during the publish step. See [publishCmd](#publishcmd).                                                                                                                                                                                                                                                     |\n| `successCmd`          | The shell command to execute during the success step. See [successCmd](#successcmd).                                                                                                                                                                                                                                                     |\n| `failCmd`             | The shell command to execute during the fail step. See [failCmd](#failcmd).                                                                                                                                                                                                                                                              |\n| `shell`               | The shell to use to run the command. See [execa#shell](https://github.com/sindresorhus/execa#shell).                                                                                                                                                                                                                                     |\n| `execCwd`             | The path to use as current working directory when executing the shell commands. This path is relative to the path from which **semantic-release** is running. For example if **semantic-release** runs from `/my-project` and `execCwd` is set to `buildScripts` then the shell command will be executed from `/my-project/buildScripts` |\n\nEach shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objets passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n## verifyConditionsCmd\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommitsCmd\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyReleaseCmd\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotesCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## prepareCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## addChannelCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## publishCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## successCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## failCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n",
      "readmeFilename": "README.md",
      "_id": "@semantic-release/exec@3.4.0-beta.7",
      "_nodeVersion": "12.13.1",
      "_npmVersion": "6.13.1",
      "dist": {
        "integrity": "sha512-r/wAX9XFPwgzTZESruaKhdm42HkYMZvy4TT6LRZzA6rsEEllteSnjtZUbXiXAi1BwZZeMH4HdSHZ7FxkoTB2Hg==",
        "shasum": "1f558ae46b5b7725a1a099b985fc879e5da19140",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.4.0-beta.7.tgz",
        "fileCount": 8,
        "unpackedSize": 25552,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd1fz4CRA9TVsSAnZWagAA178P/1+NboJPdU0e3HDXjg0W\n3Q0Rkm/b3HESAJ4Ya8Qds8rrbCmZJDXH2bsmBK2YUgsVmSKCoqikHkgbb5KU\n6WItDJGSQdBB6iDNgjozZNw1p/ruxwQNDAkfyc/0HYjx6Ax1f3VrMq0qfpD2\nzvWACM/ZGr1+UD6NbqJ02HmEkgfGKvyH17zrPB5jcwvKXmjDkjpY4z2WO8Nw\nX9CyBiCUbo4tZd0/7rUq65oNnimi6hcav1W/hUhta+EDlXpytXUyQOqDBiKy\ndwrCoFa/lKg3BG/BH+EeMfKWGozhkqbb1zyyw0Hh7axJM0HEs46dBgLiXNR1\n49VUol4OCP60SARK2vt41pJV5jhZBwDW2IZmUyvygQLf6zWBxPLiwZtSBxvx\nP0eAx345PNAfzqBcPhxbkSEE8cmCra0LADXzOIUzLiPn50pPV1oWPT7Mr7+N\nR8xDxwwTDTa3UBPW3H1MUnZkrSAOACpLI352nS8FuT+wn7e6jtVIJr5cyEWf\ntVRn0Ar7kNpg1wVB2bqq1W0jbmair9UUzAUarpUkpQuWqz16z9jIKYOtBc6/\ndedDkvzqN7PGVFqcX8/xxoBJP7fYz3bHCw/hEWBYmujm+O+imQOx6PwBdNMj\njmG0/r4kHORRoSBxWad2H+oCGmsYGqGMoT2MX0QLnyyFpKHAT+GmzHief12R\njr/z\r\n=4Nti\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCkgqxIAVU3Te3or6hqVqls6ztA1xR+mayenD0n2KmlwgIhAP3yUH1+5NkMpcaLJpjjwFpNl6RFEwKFTjW5PSBbL4mI"
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@boennemann.me"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.4.0-beta.7_1574305016290_0.4968562168058688"
      },
      "_hasShrinkwrap": false
    },
    "3.4.0-beta.8": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.4.0-beta.8",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^3.2.0",
        "lodash": "^4.17.4",
        "parse-json": "^5.0.0"
      },
      "devDependencies": {
        "ava": "^2.0.0",
        "codecov": "^3.0.0",
        "nyc": "^14.0.0",
        "semantic-release": "^16.0.0-beta",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.25.0"
      },
      "engines": {
        "node": ">=10.13"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=15.9.0 <17.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "e4367de7bb61beea0e8d6fa99104b10de3bea8d2",
      "readme": "# @semantic-release/exec\n\n[**semantic-release**](https://github.com/semantic-release/semantic-release) plugin to execute custom shell commands.\n\n[![Travis](https://img.shields.io/travis/semantic-release/exec.svg)](https://travis-ci.org/semantic-release/exec)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/exec.svg)](https://codecov.io/gh/semantic-release/exec)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/exec.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm beta version](https://img.shields.io/npm/v/@semantic-release/exec/beta.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n| Step               | Description                                                                                             |\n|--------------------|---------------------------------------------------------------------------------------------------------|\n| `verifyConditions` | Execute a shell command to verify if the release should happen.                                         |\n| `analyzeCommits`   | Execute a shell command to determine the type of release.                                               |\n| `verifyRelease`    | Execute a shell command to verifying a release that was determined before and is about to be published. |\n| `generateNotes`    | Execute a shell command to generate the release note.                                                   |\n| `prepare`          | Execute a shell command to prepare the release.                                                         |\n| `publish`          | Execute a shell command to publish the release.                                                         |\n| `success`          | Execute a shell command to notify of a new release.                                                     |\n| `fail`             | Execute a shell command to notify of a failed release.                                                  |\n\n## Install\n\n```bash\n$ npm install @semantic-release/exec -D\n```\n\n## Usage\n\nThe plugin can be configured in the [**semantic-release** configuration file](https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#configuration):\n\n```json\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\"@semantic-release/exec\", {\n      \"verifyConditionsCmd\": \"./verify.sh\",\n      \"publishCmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\"\n    }],\n  ]\n}\n```\n\nWith this example:\n- the shell command `./verify.sh` will be executed on the [verify conditions step](https://github.com/semantic-release/semantic-release#release-steps)\n- the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`) will be executed on the [publish step](https://github.com/semantic-release/semantic-release#release-steps)\n\n**Note**: it's required to define a plugin for the [analyze commits step](https://github.com/semantic-release/semantic-release#release-steps). If no [analyzeCommitsCmd](#analyzecommitscmd) is defined the plugin [@semantic-release/commit-analyzer](https://github.com/semantic-release/commit-analyzer) must be defined in the `plugins` list.\n\n## Configuration\n\n### Options\n\n| Options               | Description                                                                                                                                                                                                                                                                                                                              |\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `verifyConditionsCmd` | The shell command to execute during the verify condition step. See [verifyConditionsCmd](#verifyconditionscmd).                                                                                                                                                                                                                          |\n| `analyzeCommitsCmd`   | The shell command to execute during the analyze commits step. See [analyzeCommitsCmd](#analyzecommitscmd).                                                                                                                                                                                                                               |\n| `verifyReleaseCmd`    | The shell command to execute during the verify release step. See [verifyReleaseCmd](#verifyreleasecmd).                                                                                                                                                                                                                                  |\n| `generateNotesCmd`    | The shell command to execute during the generate notes step. See [generateNotesCmd](#generatenotescmd).                                                                                                                                                                                                                                  |\n| `prepareCmd`          | The shell command to execute during the prepare step. See [prepareCmd](#preparecmd).                                                                                                                                                                                                                                                     |\n| `addChannelCmd`       | The shell command to execute during the add channel step. See [addChannelCmd](#addchannelcmd).                                                                                                                                                                                                                                           |\n| `publishCmd`          | The shell command to execute during the publish step. See [publishCmd](#publishcmd).                                                                                                                                                                                                                                                     |\n| `successCmd`          | The shell command to execute during the success step. See [successCmd](#successcmd).                                                                                                                                                                                                                                                     |\n| `failCmd`             | The shell command to execute during the fail step. See [failCmd](#failcmd).                                                                                                                                                                                                                                                              |\n| `shell`               | The shell to use to run the command. See [execa#shell](https://github.com/sindresorhus/execa#shell).                                                                                                                                                                                                                                     |\n| `execCwd`             | The path to use as current working directory when executing the shell commands. This path is relative to the path from which **semantic-release** is running. For example if **semantic-release** runs from `/my-project` and `execCwd` is set to `buildScripts` then the shell command will be executed from `/my-project/buildScripts` |\n\nEach shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objets passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n## verifyConditionsCmd\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommitsCmd\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyReleaseCmd\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotesCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## prepareCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## addChannelCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## publishCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## successCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## failCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n",
      "readmeFilename": "README.md",
      "_id": "@semantic-release/exec@3.4.0-beta.8",
      "_nodeVersion": "12.13.1",
      "_npmVersion": "6.13.2",
      "dist": {
        "integrity": "sha512-dqZYURmhnchSdMt87/BicZBO7oOrFUFURcAfZ+5HL22gd+SROTuIdMUuturSZpL6Mtbeku393NvKd1XoWOz07g==",
        "shasum": "cbc582c8ddd28f6a983b64172bec46ab88efc8bf",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.4.0-beta.8.tgz",
        "fileCount": 8,
        "unpackedSize": 25553,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd6VMDCRA9TVsSAnZWagAAZQcP/3Z81GLLlj24nsQw0maB\n62/OatmodfRfr28X21XAFaJBa+V5Q6hHcw5kHdid/ep5jDGIdBxsPl3i2FIs\nOZBS9x5rf//KG0mIBZ0/ZOrO4ZTRZMuo96rRALr4LzIM4RKQMh8zqIz0rkPm\nL51k04xrn1TF1fDA8VPd8/Ec3wxUuHlDbNUwZoAdH9v4nApADj01Tj/JdNZ/\nkZupySqYfvn2bZyyKgsYfOjaBI27lwor3U3Y7ikRLdrOGi9JtfieqMwcV0l3\nyEhLMeyxKtAJH/Oy+yDQuna9JE/iVgdMUPkBcw3PNj8N1zu0ifs7BfbU+y2N\nWeMC0bKGrCEu9Yii1hZu3IRBKhRpwGiNco3lK9yiAfxxs6Wa0nJBwQ4H+d5F\nz/JzhlFQ/hTxTMCf15r5plEUZlKn6dt/qCSk2OEd6FJMTSBIT21v3SM8Ja4S\no21X6KYOFLwRacYbQYuAol2z6i/drPTUfDRoigeicLcfr0i+/q9w/ife+aJU\nlpQijca1OMrK6vnW/9SbCumkp3Rb/m8HPHlJL2KqJylT11PXlbc0e0HrrQ4S\nhszdRgBBkvBKPOmQp2vg3BQkhp2TS22fn6jxXSytB1xWwTGoJYdShJaWgbVh\nA6IIGu6iWd1aprSW5Co+cddb4oOlE3Y9vxgpCPdPkrBHnoPwKVwMPoxmpLcH\ne4rJ\r\n=NFv1\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCP3sK+oCmXv/hyiq/5xgzp7Psq+wCP9Gn5f8ETdnGexQIhAPEfsxFzSj7vJ6VFe0HOli9j1VOAQNDbkX8OFTYqsSuT"
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@martynus.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.4.0-beta.8_1575572227018_0.3721609986057808"
      },
      "_hasShrinkwrap": false
    },
    "3.4.0-beta.9": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.4.0-beta.9",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^3.2.0",
        "lodash": "^4.17.4",
        "parse-json": "^5.0.0"
      },
      "devDependencies": {
        "ava": "^2.0.0",
        "codecov": "^3.0.0",
        "nyc": "^14.0.0",
        "semantic-release": "^16.0.0-beta",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.25.0"
      },
      "engines": {
        "node": ">=10.13"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=16.0.0-beta <17.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "fda4ecfe3c73da963e67f2a125132186d99c4cfa",
      "readme": "# @semantic-release/exec\n\n[**semantic-release**](https://github.com/semantic-release/semantic-release) plugin to execute custom shell commands.\n\n[![Travis](https://img.shields.io/travis/semantic-release/exec.svg)](https://travis-ci.org/semantic-release/exec)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/exec.svg)](https://codecov.io/gh/semantic-release/exec)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/exec.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm beta version](https://img.shields.io/npm/v/@semantic-release/exec/beta.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n| Step               | Description                                                                                             |\n|--------------------|---------------------------------------------------------------------------------------------------------|\n| `verifyConditions` | Execute a shell command to verify if the release should happen.                                         |\n| `analyzeCommits`   | Execute a shell command to determine the type of release.                                               |\n| `verifyRelease`    | Execute a shell command to verifying a release that was determined before and is about to be published. |\n| `generateNotes`    | Execute a shell command to generate the release note.                                                   |\n| `prepare`          | Execute a shell command to prepare the release.                                                         |\n| `publish`          | Execute a shell command to publish the release.                                                         |\n| `success`          | Execute a shell command to notify of a new release.                                                     |\n| `fail`             | Execute a shell command to notify of a failed release.                                                  |\n\n## Install\n\n```bash\n$ npm install @semantic-release/exec -D\n```\n\n## Usage\n\nThe plugin can be configured in the [**semantic-release** configuration file](https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#configuration):\n\n```json\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\"@semantic-release/exec\", {\n      \"verifyConditionsCmd\": \"./verify.sh\",\n      \"publishCmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\"\n    }],\n  ]\n}\n```\n\nWith this example:\n- the shell command `./verify.sh` will be executed on the [verify conditions step](https://github.com/semantic-release/semantic-release#release-steps)\n- the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`) will be executed on the [publish step](https://github.com/semantic-release/semantic-release#release-steps)\n\n**Note**: it's required to define a plugin for the [analyze commits step](https://github.com/semantic-release/semantic-release#release-steps). If no [analyzeCommitsCmd](#analyzecommitscmd) is defined the plugin [@semantic-release/commit-analyzer](https://github.com/semantic-release/commit-analyzer) must be defined in the `plugins` list.\n\n## Configuration\n\n### Options\n\n| Options               | Description                                                                                                                                                                                                                                                                                                                              |\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `verifyConditionsCmd` | The shell command to execute during the verify condition step. See [verifyConditionsCmd](#verifyconditionscmd).                                                                                                                                                                                                                          |\n| `analyzeCommitsCmd`   | The shell command to execute during the analyze commits step. See [analyzeCommitsCmd](#analyzecommitscmd).                                                                                                                                                                                                                               |\n| `verifyReleaseCmd`    | The shell command to execute during the verify release step. See [verifyReleaseCmd](#verifyreleasecmd).                                                                                                                                                                                                                                  |\n| `generateNotesCmd`    | The shell command to execute during the generate notes step. See [generateNotesCmd](#generatenotescmd).                                                                                                                                                                                                                                  |\n| `prepareCmd`          | The shell command to execute during the prepare step. See [prepareCmd](#preparecmd).                                                                                                                                                                                                                                                     |\n| `addChannelCmd`       | The shell command to execute during the add channel step. See [addChannelCmd](#addchannelcmd).                                                                                                                                                                                                                                           |\n| `publishCmd`          | The shell command to execute during the publish step. See [publishCmd](#publishcmd).                                                                                                                                                                                                                                                     |\n| `successCmd`          | The shell command to execute during the success step. See [successCmd](#successcmd).                                                                                                                                                                                                                                                     |\n| `failCmd`             | The shell command to execute during the fail step. See [failCmd](#failcmd).                                                                                                                                                                                                                                                              |\n| `shell`               | The shell to use to run the command. See [execa#shell](https://github.com/sindresorhus/execa#shell).                                                                                                                                                                                                                                     |\n| `execCwd`             | The path to use as current working directory when executing the shell commands. This path is relative to the path from which **semantic-release** is running. For example if **semantic-release** runs from `/my-project` and `execCwd` is set to `buildScripts` then the shell command will be executed from `/my-project/buildScripts` |\n\nEach shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objets passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n## verifyConditionsCmd\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommitsCmd\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyReleaseCmd\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotesCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## prepareCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## addChannelCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## publishCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## successCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## failCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n",
      "readmeFilename": "README.md",
      "_id": "@semantic-release/exec@3.4.0-beta.9",
      "_nodeVersion": "12.13.1",
      "_npmVersion": "6.13.3",
      "dist": {
        "integrity": "sha512-hF0+VjYR8M08RQ9I9O7zg+zltTkjTH3qIos49MXOF9rAa0VN+8C/iEBmG3xRE9YLjPTq6X6wiyvf3ACpmOv6kA==",
        "shasum": "62a307590ccdf8ed23f69d6ac8b049ce8dc01841",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.4.0-beta.9.tgz",
        "fileCount": 8,
        "unpackedSize": 25558,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd8CHlCRA9TVsSAnZWagAAXUkQAJLaTX/2WvUa5vSWhexF\nnrhHprnDJ5i/gh6bdIwVHG681wMN59NZcs08A1m3cM4qM3Vi2vpRguBrLuk2\nelSvb/30oOMWAQoga5eUf1/uj/6ZThaDjOEnIKC+zLvajomTJC/rpPOhJMWh\nTXUXLR3Ud5RaUXHeqjxAzQLH0vk7AN9ZWfhIuBQKB2yBLVzj/shp0x+1yAlx\nBP4wuphWlp0dMAuAHoUMvPtTXfX5QTJYWSMRW27BoDaMfxNej0OaWAjzvuYN\nT4UbW+ODjf/MzNQjGQ5w3o9gMsodV1MJiAmA2p5RJbva+EvnXNUUy1wZY4rb\n9+kY8tc59TAoPp/hM09hUCukNkxa9aBfOsFdF1uYv/cznNy+zdIasszIdfg1\nNbs/8B4iKvcAUbkWdINqs/Gbg7l8lh3cKZNgp4k05KnmgkaQsSbd880OQVjr\nXXk+IqH7qKdFw3r1fE81Z6l56ufFzh/nz+7K9MrtH/ftapz0FcOoDf21sHPG\n2cUOrKs0IoqD/tEonowsvgFpDlAjknpm7dYx3hlTjKRXEYm4fN0cgJfax1zI\n94pRFrOz46Wl5wWXJst0hX3pIxeOq2f+w1owezswKs8yYXg4TUWIxB6KX1/h\nqkWkAd6ErDdDsxselg9Enj2QxxqdClxaxvQn3OewZ6KBJzAeJy9ozYmN7wrI\nfTuW\r\n=2pDf\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCT7JXc40d2LnYy7su/Lmg5Gpi9ecvdi43gsHP/xPDbjAIgJuKXuQSHFStbIubx1GOJ3k/kAf8w794lNvNOSfH2Yhk="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@martynus.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.4.0-beta.9_1576018404718_0.9227726066758988"
      },
      "_hasShrinkwrap": false
    },
    "3.4.0-beta.10": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "3.4.0-beta.10",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^4.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^5.0.0"
      },
      "devDependencies": {
        "ava": "^2.0.0",
        "codecov": "^3.0.0",
        "nyc": "^14.0.0",
        "semantic-release": "^16.0.0-beta",
        "sinon": "^7.1.1",
        "stream-buffers": "^3.0.2",
        "xo": "^0.25.0"
      },
      "engines": {
        "node": ">=10.13"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=16.0.0-beta <17.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "662a14880b731f51998934b75381822ad3fc0df1",
      "readme": "# @semantic-release/exec\n\n[**semantic-release**](https://github.com/semantic-release/semantic-release) plugin to execute custom shell commands.\n\n[![Travis](https://img.shields.io/travis/semantic-release/exec.svg)](https://travis-ci.org/semantic-release/exec)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/exec.svg)](https://codecov.io/gh/semantic-release/exec)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/exec.svg)](https://greenkeeper.io/)\n\n[![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm beta version](https://img.shields.io/npm/v/@semantic-release/exec/beta.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n| Step               | Description                                                                                             |\n|--------------------|---------------------------------------------------------------------------------------------------------|\n| `verifyConditions` | Execute a shell command to verify if the release should happen.                                         |\n| `analyzeCommits`   | Execute a shell command to determine the type of release.                                               |\n| `verifyRelease`    | Execute a shell command to verifying a release that was determined before and is about to be published. |\n| `generateNotes`    | Execute a shell command to generate the release note.                                                   |\n| `prepare`          | Execute a shell command to prepare the release.                                                         |\n| `publish`          | Execute a shell command to publish the release.                                                         |\n| `success`          | Execute a shell command to notify of a new release.                                                     |\n| `fail`             | Execute a shell command to notify of a failed release.                                                  |\n\n## Install\n\n```bash\n$ npm install @semantic-release/exec -D\n```\n\n## Usage\n\nThe plugin can be configured in the [**semantic-release** configuration file](https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#configuration):\n\n```json\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\"@semantic-release/exec\", {\n      \"verifyConditionsCmd\": \"./verify.sh\",\n      \"publishCmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\"\n    }],\n  ]\n}\n```\n\nWith this example:\n- the shell command `./verify.sh` will be executed on the [verify conditions step](https://github.com/semantic-release/semantic-release#release-steps)\n- the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`) will be executed on the [publish step](https://github.com/semantic-release/semantic-release#release-steps)\n\n**Note**: it's required to define a plugin for the [analyze commits step](https://github.com/semantic-release/semantic-release#release-steps). If no [analyzeCommitsCmd](#analyzecommitscmd) is defined the plugin [@semantic-release/commit-analyzer](https://github.com/semantic-release/commit-analyzer) must be defined in the `plugins` list.\n\n## Configuration\n\n### Options\n\n| Options               | Description                                                                                                                                                                                                                                                                                                                              |\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `verifyConditionsCmd` | The shell command to execute during the verify condition step. See [verifyConditionsCmd](#verifyconditionscmd).                                                                                                                                                                                                                          |\n| `analyzeCommitsCmd`   | The shell command to execute during the analyze commits step. See [analyzeCommitsCmd](#analyzecommitscmd).                                                                                                                                                                                                                               |\n| `verifyReleaseCmd`    | The shell command to execute during the verify release step. See [verifyReleaseCmd](#verifyreleasecmd).                                                                                                                                                                                                                                  |\n| `generateNotesCmd`    | The shell command to execute during the generate notes step. See [generateNotesCmd](#generatenotescmd).                                                                                                                                                                                                                                  |\n| `prepareCmd`          | The shell command to execute during the prepare step. See [prepareCmd](#preparecmd).                                                                                                                                                                                                                                                     |\n| `addChannelCmd`       | The shell command to execute during the add channel step. See [addChannelCmd](#addchannelcmd).                                                                                                                                                                                                                                           |\n| `publishCmd`          | The shell command to execute during the publish step. See [publishCmd](#publishcmd).                                                                                                                                                                                                                                                     |\n| `successCmd`          | The shell command to execute during the success step. See [successCmd](#successcmd).                                                                                                                                                                                                                                                     |\n| `failCmd`             | The shell command to execute during the fail step. See [failCmd](#failcmd).                                                                                                                                                                                                                                                              |\n| `shell`               | The shell to use to run the command. See [execa#shell](https://github.com/sindresorhus/execa#shell).                                                                                                                                                                                                                                     |\n| `execCwd`             | The path to use as current working directory when executing the shell commands. This path is relative to the path from which **semantic-release** is running. For example if **semantic-release** runs from `/my-project` and `execCwd` is set to `buildScripts` then the shell command will be executed from `/my-project/buildScripts` |\n\nEach shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objets passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n## verifyConditionsCmd\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommitsCmd\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyReleaseCmd\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotesCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## prepareCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## addChannelCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## publishCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## successCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## failCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n",
      "readmeFilename": "README.md",
      "_id": "@semantic-release/exec@3.4.0-beta.10",
      "_nodeVersion": "12.14.0",
      "_npmVersion": "6.13.4",
      "dist": {
        "integrity": "sha512-9jfdT3+RoB/ipt0livlBNLk6+f74DQbR6tUVi6Zebv4eFNDiY/cMFbOOztUub/EHXDK8nHdWZ6peOVf+TuCHdA==",
        "shasum": "b565e094db655ec19efe97868291623e4edc907e",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-3.4.0-beta.10.tgz",
        "fileCount": 8,
        "unpackedSize": 25559,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd+6tQCRA9TVsSAnZWagAA85QQAI2LMw7NnDOVv30Tw8fD\nAOq25aSU45Ml1VJw39pycg8hrGAtB5IUwN8A8RrlS4/0clsrQ9KB3grfTSOY\n59dRVzL9h7dgIgyf4Mf4keNEDXbGZ6xbJaTLkYX6DhLSQESAdXkolwm/oWdS\nYBYNElnlOhanef5jxo4qLxJ/BfWNkKfAs7oPTEfRdjvXQK58CN8Uchd0aVJ/\nIw1g2nAp6Q21Pf5tgCHmiCt8kjEvMBcmxf0TDcfNyphzbaENrBqx+2TWqTtT\nlsvX2Lont/DyLXVNCkzU81U8mENKegoN5jxbSLM5kU/YcXJ7XcHqXTxzMeeC\nUMXRk1OjV/QSV4hiV6jYrxpeCLrKSX65d355xOhZgHsh+KCO/3AJRk39T/no\nF5b+KkupZRlfm77fr3OaINsSfp/DrbnZFzItjL2Ea+3+QNk/rvEiu8Qyd90N\n0jeZwvMmBUYAAPFv5d7O2/eSpeC25KVZ07Z8EcE/jQTZNLc4fycsurkOqfDY\noqb/8goXzRW2Ii5cGRRl6EAw/XAApdJfthHI/qejaLhEn9bJhmeUQsEkJ2Ex\nDO18FII0O4mz3JqRczWTUqtbSyXV8Akd/HOxa223IUrxpbpEMuTbP2uj3L1l\nXrr19RnC/shkFok3DdJdOcY5V3aBjGSZ0OrbUyDWvz7A3HiOks5MIszyqz08\nXezx\r\n=dCiF\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCH2yBQHBhZJnG8jjoRGaAN99NQ2s01A5ZlKG8Mq2kWy0CIQCGFI8dIF51ltUo5lZO+bLT8rfWn3kxA9E49EGgQhEiDw=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@martynus.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_3.4.0-beta.10_1576774479817_0.46720782809038486"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "4.0.0",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^4.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^5.0.0"
      },
      "devDependencies": {
        "ava": "^2.0.0",
        "codecov": "^3.0.0",
        "nyc": "^15.0.0",
        "semantic-release": "^16.0.0-beta",
        "sinon": "^8.0.0",
        "stream-buffers": "^3.0.2",
        "xo": "^0.25.0"
      },
      "engines": {
        "node": ">=10.13"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=16.0.0-beta <17.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "f7d87f86c7c096c3659a337c62b6295bcdc65a5d",
      "_id": "@semantic-release/exec@4.0.0",
      "_nodeVersion": "12.14.1",
      "_npmVersion": "6.13.4",
      "dist": {
        "integrity": "sha512-cOvPeWllHaTkwA0Y/Ffskrc1Fcu2VB5YmOYGfDmznTtUIPMk42UuwqsNVYwQPBsHYIggOFkjlnXvInZsGzEe2Q==",
        "shasum": "cf5d54919bfdec1bf980fd5c5d532bd6d2e7eb6f",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-4.0.0.tgz",
        "fileCount": 8,
        "unpackedSize": 25551,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeF4LxCRA9TVsSAnZWagAARqMP/iOURnFdzMKZ6I6OgLgg\nif4Tn1iuW8nQ357Mk56CrvoeVbJz28iXMA0lOtfE7sTAk2BZLA9X5GUF6yfp\nXx0k8vjzVryzYVz8pFnHgF/Dgtz3thQ5z7Nra5dsftzxAhyqzeJ7CPrFprT0\nDNr0Qfb+vTqr7fWAmVGDeTzzKIDN/CIhIvrTfwkVne+1LZnSRIuQXTyV90IH\nf3mJyeqd4Bm+rLh0RIp87LdzdUYAN33bB59PXwfeV18QNsdYQiTfHPT9+Hs7\ngmvCh8YNktqzxKFUhncRKkYNdXHsPIkoyZmu8n4KNAURDxJ0GRBy2C+NqxBy\n75YWW16I/jMR/+O7WCVGjJTu/cBOW6QOReVcI/MRGPY8z5zSNOXWKEe0x7qL\ng8gXQwP/DDwuP0LcmUmEoWKMhhM4hGPSePk4KvpDHK7vyHiXrqfd6AG6kFSf\nx3kL32IA499zZa2sLuvRNcCWQOf/SgdcPt6sDcivMFQPV9zK2JqtL0Hg1UnF\nURYd+npTgg4QB2WYMzvJSXnxB1XxfIQKgniDjDqALPVak8ijPfMTuyeUiboA\n/cgg2grRwVsq/Cp6t69zSAhv0TGl2SqEOHiAJYqyd03nQ7BJZvbc5OOMp+/v\nLafCmhR+G3/odWdaTcpQxecdTCNEx7mZ+8P2/koolfxwWSsQtXqbEC4XEUrY\nRxzt\r\n=pjK/\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDNuCrxm9crtcIqs8lhV1Ff6EDbUB0CyIeDE//FX7ro7AIgT/3qBnxu8VI6ATz7S5S5emUDuEtI/kvFD03uvYWCnuU="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@martynus.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_4.0.0_1578599152806_0.16783344192600946"
      },
      "_hasShrinkwrap": false
    },
    "5.0.0": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "5.0.0",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^4.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^5.0.0"
      },
      "devDependencies": {
        "ava": "^3.1.0",
        "codecov": "^3.0.0",
        "nyc": "^15.0.0",
        "semantic-release": "^17.0.0",
        "sinon": "^8.0.0",
        "stream-buffers": "^3.0.2",
        "xo": "^0.25.0"
      },
      "engines": {
        "node": ">=10.18"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=16.0.0 <18.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "codecov": "codecov -f coverage/coverage-final.json",
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true
      },
      "gitHead": "b288e2bf4b268ee60330aef14261a22f15e73f81",
      "_id": "@semantic-release/exec@5.0.0",
      "_nodeVersion": "12.14.1",
      "_npmVersion": "6.13.6",
      "dist": {
        "integrity": "sha512-t7LWXIvDJQbuGCy2WmMG51WyaGSLTvZBv9INvcI4S0kn+QjnnVVUMhcioIqhb0r3yqqarMzHVcABFug0q0OXjw==",
        "shasum": "69c253107a755dabf7c262d417269d099f714356",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-5.0.0.tgz",
        "fileCount": 8,
        "unpackedSize": 25541,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeLz+ICRA9TVsSAnZWagAAn80QAIslMd9+uYYXHgQZj7++\nvuH4fNd5TSNo2mswuVqBzJg2AcPPVJOFwdz3FWmUF2a0vgmTOI7xyJfkoI03\nRrxwLG9C8jNjU2HOR3kylG+rL5DcbeScNygWps364crMkUT9OTU6ogK+vbcK\nSTuU5IoVrX+cAYWnlSHWmcGNzX8Vif94hKc/lTfU7mgx0zfBekyBPD+3PRvZ\nfKCehKpRPIXNpoOAndsPxfgwtvxJRhO8qQZuVeMubfUO4Zmn13px6NFA28MZ\nApAcqXTQH0WjY9Kr52O/+QTUDfWU0YQZuD97XLl/KNdoTwm0w9/7NQxzJVEx\niOTq6CRnbw0RFj6HPrC0wGLE9XAis2/I670WzT4+P5oeKm9Z15ZmOxQW3YXl\npb44r0PS7P//meV/v4WJfNTYXk847RX6PX97bp00JMZ5dTvMnllYyeRujlir\nd2acYJ971jPZF4A7YNSJi4jEXVN8fh9Fj0Fg60AzmPvOnN5j4/g2BtGXYiN3\nNJheJNSsYK1T+x70i+vmT8Mg9xP5FNNpEUyyQftUYsKj81Hn9RuD7a5C16z7\nXua7DkuRCWR58jmlYiMYHEg9KV8a04zX3VFj21u3bifuyl7zGcXkiDmtR33p\nLqYmLsniZaQU4dhuZ6dFobs1SsI4j8GdV/0fATWzV6IeLsE0yB89rWUDeF0T\nJBaU\r\n=gQ+k\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHkDCFKzySPG4hRJ4r3dMJ9g5dfPiKbIXKurm40unvWhAiEAitve3CqURCxsOm6wOF+pdizMqNneSUwHmd+4zcEncgc="
          }
        ]
      },
      "maintainers": [
        {
          "email": "stephan@boennemann.me",
          "name": "boennemann"
        },
        {
          "email": "npm@christophwitzko.com",
          "name": "christophwitzko"
        },
        {
          "email": "gregor@martynus.net",
          "name": "gr2m"
        },
        {
          "email": "pierre.denis.vanduynslager@gmail.com",
          "name": "pvdlg"
        },
        {
          "email": "semantic-release@boennemann.me",
          "name": "semantic-release-bot"
        }
      ],
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@martynus.net"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_5.0.0_1580154760082_0.34934409219008367"
      },
      "_hasShrinkwrap": false
    },
    "6.0.0": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "6.0.0",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^4.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^5.0.0"
      },
      "devDependencies": {
        "ava": "3.15.0",
        "nyc": "15.1.0",
        "semantic-release": "18.0.0",
        "sinon": "11.1.2",
        "stream-buffers": "3.0.2",
        "xo": "0.28.3"
      },
      "engines": {
        "node": ">=14.17"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=18.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v",
        "test:ci": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true,
        "rules": {
          "unicorn/string-content": "off"
        }
      },
      "renovate": {
        "extends": [
          "github>semantic-release/.github"
        ]
      },
      "gitHead": "020eab0d227c315c81ec44b9dbe8642a389d4980",
      "_id": "@semantic-release/exec@6.0.0",
      "_nodeVersion": "16.9.1",
      "_npmVersion": "7.24.0",
      "dist": {
        "integrity": "sha512-Y4OdNulzb7UYNVMIvbCXAvHb3cNzHJw2yrKP5S5CfIv2vLtq70gMma4yHWIzKV3yLqqXif5jIKgbFjwriMgPVw==",
        "shasum": "e2c81b4101e8587056d4a3f7fc7540c226a59dc8",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-6.0.0.tgz",
        "fileCount": 8,
        "unpackedSize": 25460,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGp0YEwsMIgyvZdyqnzN3ABbNdZC2sEB5lzNeJlhmpyCAiBekgaK92Wsz1/vB02zjZ1t8cirYgsQJr0eq+rxmaFx2A=="
          }
        ]
      },
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@martynus.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "pvdlg",
          "email": "pierre.denis.vanduynslager@gmail.com"
        },
        {
          "name": "semantic-release-bot",
          "email": "semantic-release@martynus.net"
        },
        {
          "name": "boennemann",
          "email": "me@sbw.one"
        },
        {
          "name": "christophwitzko",
          "email": "npm@christophwitzko.com"
        },
        {
          "name": "gr2m",
          "email": "gregor@martynus.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_6.0.0_1632250761168_0.2012817941768077"
      },
      "_hasShrinkwrap": false
    },
    "6.0.1": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "6.0.1",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^2.1.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^5.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^5.0.0"
      },
      "devDependencies": {
        "ava": "3.15.0",
        "nyc": "15.1.0",
        "semantic-release": "18.0.0",
        "sinon": "11.1.2",
        "stream-buffers": "3.0.2",
        "xo": "0.28.3"
      },
      "engines": {
        "node": ">=14.17"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=18.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v",
        "test:ci": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true,
        "rules": {
          "unicorn/string-content": "off"
        }
      },
      "renovate": {
        "extends": [
          "github>semantic-release/.github"
        ]
      },
      "gitHead": "2b7163e2eb2dbbae9cfb7089db33f34440be4860",
      "_id": "@semantic-release/exec@6.0.1",
      "_nodeVersion": "16.9.1",
      "_npmVersion": "7.24.0",
      "dist": {
        "integrity": "sha512-RlMoxuhQ7QujrykIG5uw0NU6x82BR4E7ssKsl+ISCFhFHnvxxH+w4h4klWOs/cT/XEPJdoPFbBOVoruKtAwfDg==",
        "shasum": "6316f52ad786c7fafff5e1cbcfeeb7608501db78",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-6.0.1.tgz",
        "fileCount": 8,
        "unpackedSize": 25460,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDsUlAMhDZuzoRAobLttY6wm+2Ey8amEWZfSRN1t9dK5QIgPnC5G6hMW18alUoQ4uunvTgZT/RGE8S8oXptbFN+ySw="
          }
        ]
      },
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@martynus.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "pvdlg",
          "email": "pierre.denis.vanduynslager@gmail.com"
        },
        {
          "name": "semantic-release-bot",
          "email": "semantic-release@martynus.net"
        },
        {
          "name": "boennemann",
          "email": "me@sbw.one"
        },
        {
          "name": "christophwitzko",
          "email": "npm@christophwitzko.com"
        },
        {
          "name": "gr2m",
          "email": "gregor@martynus.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_6.0.1_1632251294494_0.7956926622984091"
      },
      "_hasShrinkwrap": false
    },
    "6.0.2": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "6.0.2",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^3.0.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^5.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^5.0.0"
      },
      "devDependencies": {
        "ava": "3.15.0",
        "nyc": "15.1.0",
        "semantic-release": "18.0.0",
        "sinon": "11.1.2",
        "stream-buffers": "3.0.2",
        "xo": "0.28.3"
      },
      "engines": {
        "node": ">=14.17"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=18.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v",
        "test:ci": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true,
        "rules": {
          "unicorn/string-content": "off"
        }
      },
      "renovate": {
        "extends": [
          "github>semantic-release/.github"
        ]
      },
      "gitHead": "f6908670ba7b2f6fa079544521e636fffd00c218",
      "_id": "@semantic-release/exec@6.0.2",
      "_nodeVersion": "16.13.0",
      "_npmVersion": "7.24.2",
      "dist": {
        "integrity": "sha512-ciaqJTHB1TFtU6C78xrgmoNI9UyfheR9+Bk6Ico7CJ7+ADOEAvUrPBKvz64UCfoWlg+SlKGTVGbFnA509wRUVw==",
        "shasum": "1eba943170595192083e71c7788823c570443bbb",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-6.0.2.tgz",
        "fileCount": 8,
        "unpackedSize": 25460,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEYsulzv0DmtD8e2rR3my0g6lLD0TJsiBrKr+rg850D+AiEA6/WR8nuH+/wFNV7GV2rC6xsQeraZkjLfSfXipjwIXco="
          }
        ]
      },
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@martynus.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "pvdlg",
          "email": "pierre.denis.vanduynslager@gmail.com"
        },
        {
          "name": "semantic-release-bot",
          "email": "semantic-release@martynus.net"
        },
        {
          "name": "boennemann",
          "email": "me@sbw.one"
        },
        {
          "name": "christophwitzko",
          "email": "npm@christophwitzko.com"
        },
        {
          "name": "gr2m",
          "email": "gregor@martynus.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_6.0.2_1635572036691_0.7391376352530543"
      },
      "_hasShrinkwrap": false
    },
    "6.0.3": {
      "name": "@semantic-release/exec",
      "description": "semantic-release plugin to run custom shell commands",
      "version": "6.0.3",
      "author": {
        "name": "Pierre Vanduynslager",
        "url": "https://github.com/pvdlg"
      },
      "bugs": {
        "url": "https://github.com/semantic-release/exec/issues"
      },
      "contributors": [
        {
          "name": "Stephan Bönnemann",
          "email": "stephan@boennemann.me",
          "url": "http://boennemann.me"
        },
        {
          "name": "Gregor Martynus",
          "url": "https://twitter.com/gr2m"
        }
      ],
      "dependencies": {
        "@semantic-release/error": "^3.0.0",
        "aggregate-error": "^3.0.0",
        "debug": "^4.0.0",
        "execa": "^5.0.0",
        "lodash": "^4.17.4",
        "parse-json": "^5.0.0"
      },
      "devDependencies": {
        "ava": "3.15.0",
        "nyc": "15.1.0",
        "semantic-release": "18.0.1",
        "sinon": "12.0.1",
        "stream-buffers": "3.0.2",
        "xo": "0.28.3"
      },
      "engines": {
        "node": ">=14.17"
      },
      "homepage": "https://github.com/semantic-release/exec#readme",
      "keywords": [
        "cli",
        "publish",
        "release",
        "script",
        "semantic-release",
        "shell",
        "version"
      ],
      "license": "MIT",
      "main": "index.js",
      "nyc": {
        "include": [
          "lib/**/*.js",
          "index.js"
        ],
        "reporter": [
          "json",
          "text",
          "html"
        ],
        "all": true
      },
      "peerDependencies": {
        "semantic-release": ">=18.0.0"
      },
      "prettier": {
        "printWidth": 120,
        "trailingComma": "es5"
      },
      "publishConfig": {
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/semantic-release/exec.git"
      },
      "scripts": {
        "lint": "xo",
        "pretest": "npm run lint",
        "semantic-release": "semantic-release",
        "test": "nyc ava -v",
        "test:ci": "nyc ava -v"
      },
      "xo": {
        "prettier": true,
        "space": true,
        "rules": {
          "unicorn/string-content": "off"
        }
      },
      "renovate": {
        "extends": [
          "github>semantic-release/.github"
        ]
      },
      "gitHead": "2d15fbd5d65423f035ffe5533a5507f9ff00cd0e",
      "_id": "@semantic-release/exec@6.0.3",
      "_nodeVersion": "16.13.1",
      "_npmVersion": "7.24.2",
      "dist": {
        "integrity": "sha512-bxAq8vLOw76aV89vxxICecEa8jfaWwYITw6X74zzlO0mc/Bgieqx9kBRz9z96pHectiTAtsCwsQcUyLYWnp3VQ==",
        "shasum": "d212fdf19633bdfb553de6cb6c7f8781933224db",
        "tarball": "https://registry.npmjs.org/@semantic-release/exec/-/exec-6.0.3.tgz",
        "fileCount": 8,
        "unpackedSize": 25462,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhuj4rCRA9TVsSAnZWagAAAxYQAIZXrNX5gqQgOYiE+HfM\nQzM4kufvXEOPNnrBRSUweC3LvA2yEF75+eeoYdjKMIaSJuZFnuq9yr++wIY8\nARccT88zfMPKJPMktL4jeRx+jLWKA6WSUla8NY/3KBN0et4wRq5Z6US1HfL9\nDzXIHlR9EF9TaIXbdL+pFyL40pfQQU/eEcY5gU+m48RBXf+5XToE7z8AMEhp\nMs4x/2p91uYaE2uYpw8j/rwDzX+BzoXq55CWPkK2uDNAuUdjAPbOcVywRfFf\nQXad0SiRlSeIy+znBqalC1V6RhKfPBeLtc0AtBXQCYvqCdSkqXgBaBNVJz4K\niWzJhKL6qWvyKCX9BOGff5fqSIv2gL/GH6LQSPJ/upgkAO16sC1VwUGScZCA\ne7A796KPBO9ve8Whv5lH2mPrscRQiaILANmsqaBMSh9wBoWduOFpJiJCnOHf\na+/mCzGD83U9O2WY5QBIYrJWZuQGw0OzMNPCyFVp7E+6CgmnbbOenaH5Kvq0\n4SUySaagQxZbyGMt2T9uwIOt4UwzGEr6YB9flyEV20D6Z76XiWN9izD0m9ZW\nqm/6Lwq0HdBQBtPDQdwNvG27Eip/RoSKHZPOf0ziQ/2egfQkpYczJPUgwKno\nQ4iah2GXtullZgWMSuLhWEb1qhrt1mGSA95dsqmDmK0EeofGsdDC+uwAa4Jv\nDrCw\r\n=0w2A\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCrbGJILWetTboKhWsZqbE/ECC3gvVgxKJNne+5F3BPfAIgegluAIR4n3UPHozSr0fljajM1gwqtdplYlmXPqC0hYM="
          }
        ]
      },
      "_npmUser": {
        "name": "semantic-release-bot",
        "email": "semantic-release@martynus.net"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "travi",
          "email": "npm@travi.org"
        },
        {
          "name": "pvdlg",
          "email": "pierre.denis.vanduynslager@gmail.com"
        },
        {
          "name": "semantic-release-bot",
          "email": "semantic-release@martynus.net"
        },
        {
          "name": "gr2m",
          "email": "gregor@martynus.net"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/exec_6.0.3_1639595563629_0.6487937114252473"
      },
      "_hasShrinkwrap": false
    }
  },
  "readme": "# @semantic-release/exec\n\n[**semantic-release**](https://github.com/semantic-release/semantic-release) plugin to execute custom shell commands.\n\n[![Build Status](https://github.com/semantic-release/exec/workflows/Test/badge.svg)](https://github.com/semantic-release/exec/actions?query=workflow%3ATest+branch%3Amaster) [![npm latest version](https://img.shields.io/npm/v/@semantic-release/exec/latest.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm next version](https://img.shields.io/npm/v/@semantic-release/exec/next.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n[![npm beta version](https://img.shields.io/npm/v/@semantic-release/exec/beta.svg)](https://www.npmjs.com/package/@semantic-release/exec)\n\n| Step               | Description                                                                                             |\n|--------------------|---------------------------------------------------------------------------------------------------------|\n| `verifyConditions` | Execute a shell command to verify if the release should happen.                                         |\n| `analyzeCommits`   | Execute a shell command to determine the type of release.                                               |\n| `verifyRelease`    | Execute a shell command to verifying a release that was determined before and is about to be published. |\n| `generateNotes`    | Execute a shell command to generate the release note.                                                   |\n| `prepare`          | Execute a shell command to prepare the release.                                                         |\n| `publish`          | Execute a shell command to publish the release.                                                         |\n| `success`          | Execute a shell command to notify of a new release.                                                     |\n| `fail`             | Execute a shell command to notify of a failed release.                                                  |\n\n## Install\n\n```bash\n$ npm install @semantic-release/exec -D\n```\n\n## Usage\n\nThe plugin can be configured in the [**semantic-release** configuration file](https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#configuration):\n\n```json\n{\n  \"plugins\": [\n    \"@semantic-release/commit-analyzer\",\n    \"@semantic-release/release-notes-generator\",\n    [\"@semantic-release/exec\", {\n      \"verifyConditionsCmd\": \"./verify.sh\",\n      \"publishCmd\": \"./publish.sh ${nextRelease.version} ${options.branch} ${commits.length} ${Date.now()}\"\n    }],\n  ]\n}\n```\n\nWith this example:\n- the shell command `./verify.sh` will be executed on the [verify conditions step](https://github.com/semantic-release/semantic-release#release-steps)\n- the shell command `./publish.sh 1.0.0 master 3 870668040000` (for the release of version `1.0.0` from branch `master` with `3` commits on `August 4th, 1997 at 2:14 AM`) will be executed on the [publish step](https://github.com/semantic-release/semantic-release#release-steps)\n\n**Note**: it's required to define a plugin for the [analyze commits step](https://github.com/semantic-release/semantic-release#release-steps). If no [analyzeCommitsCmd](#analyzecommitscmd) is defined the plugin [@semantic-release/commit-analyzer](https://github.com/semantic-release/commit-analyzer) must be defined in the `plugins` list.\n\n## Configuration\n\n### Options\n\n| Options               | Description                                                                                                                                                                                                                                                                                                                              |\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `verifyConditionsCmd` | The shell command to execute during the verify condition step. See [verifyConditionsCmd](#verifyconditionscmd).                                                                                                                                                                                                                          |\n| `analyzeCommitsCmd`   | The shell command to execute during the analyze commits step. See [analyzeCommitsCmd](#analyzecommitscmd).                                                                                                                                                                                                                               |\n| `verifyReleaseCmd`    | The shell command to execute during the verify release step. See [verifyReleaseCmd](#verifyreleasecmd).                                                                                                                                                                                                                                  |\n| `generateNotesCmd`    | The shell command to execute during the generate notes step. See [generateNotesCmd](#generatenotescmd).                                                                                                                                                                                                                                  |\n| `prepareCmd`          | The shell command to execute during the prepare step. See [prepareCmd](#preparecmd).                                                                                                                                                                                                                                                     |\n| `addChannelCmd`       | The shell command to execute during the add channel step. See [addChannelCmd](#addchannelcmd).                                                                                                                                                                                                                                           |\n| `publishCmd`          | The shell command to execute during the publish step. See [publishCmd](#publishcmd).                                                                                                                                                                                                                                                     |\n| `successCmd`          | The shell command to execute during the success step. See [successCmd](#successcmd).                                                                                                                                                                                                                                                     |\n| `failCmd`             | The shell command to execute during the fail step. See [failCmd](#failcmd).                                                                                                                                                                                                                                                              |\n| `shell`               | The shell to use to run the command. See [execa#shell](https://github.com/sindresorhus/execa#shell).                                                                                                                                                                                                                                     |\n| `execCwd`             | The path to use as current working directory when executing the shell commands. This path is relative to the path from which **semantic-release** is running. For example if **semantic-release** runs from `/my-project` and `execCwd` is set to `buildScripts` then the shell command will be executed from `/my-project/buildScripts` |\n\nEach shell command is generated with [Lodash template](https://lodash.com/docs#template). All the objects passed to the [semantic-release plugins](https://github.com/semantic-release/semantic-release#plugins) are available as template options.\n\n## verifyConditionsCmd\n\nExecute a shell command to verify if the release should happen.\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Write only the reason for the verification to fail.                      |\n| `stderr`         | Can be used for logging.                                                 |\n\n## analyzeCommitsCmd\n\n| Command property | Description                                                                                                                                                |\n|------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                        |\n| `stdout`         | Only the release type (`major`, `minor` or `patch` etc..) can be written to `stdout`. If no release has to be done the command must not write to `stdout`. |\n| `stderr`         | Can be used for logging.                                                                                                                                   |\n\n## verifyReleaseCmd\n\n| Command property | Description                                                              |\n|------------------|--------------------------------------------------------------------------|\n| `exit code`      | `0` if the verification is successful, or any other exit code otherwise. |\n| `stdout`         | Only the reason for the verification to fail can be written to `stdout`. |\n| `stderr`         | Can be used for logging.                                                 |\n\n## generateNotesCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Only the release note must be written to `stdout`.                                                                  |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## prepareCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## addChannelCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## publishCmd\n\n| Command property | Description                                                                                                                                                                                                                                        |\n|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error.                                                                                                                                |\n| `stdout`         | The `release` information can be written to `stdout` as parseable JSON (for example `{\"name\": \"Release name\", \"url\": \"http://url/release/1.0.0\"}`). If the command write non parseable JSON to `stdout` no `release` information will be returned. |\n| `stderr`         | Can be used for logging.                                                                                                                                                                                                                           |\n\n## successCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n\n## failCmd\n\n| Command property | Description                                                                                                         |\n|------------------|---------------------------------------------------------------------------------------------------------------------|\n| `exit code`      | Any non `0` code is considered as an unexpected error and will stop the `semantic-release` execution with an error. |\n| `stdout`         | Can be used for logging.                                                                                            |\n| `stderr`         | Can be used for logging.                                                                                            |\n",
  "maintainers": [
    {
      "name": "travi",
      "email": "npm@travi.org"
    },
    {
      "name": "pvdlg",
      "email": "pierre.denis.vanduynslager@gmail.com"
    },
    {
      "name": "semantic-release-bot",
      "email": "semantic-release@martynus.net"
    },
    {
      "name": "gr2m",
      "email": "gregor@martynus.net"
    }
  ],
  "time": {
    "modified": "2022-04-06T22:37:26.380Z",
    "created": "2017-12-21T16:17:35.942Z",
    "1.0.0": "2017-12-21T16:17:35.942Z",
    "1.0.1": "2017-12-21T16:27:37.396Z",
    "1.0.2": "2018-01-12T14:19:33.785Z",
    "2.0.0": "2018-01-27T21:30:39.573Z",
    "2.0.1": "2018-02-09T22:59:49.473Z",
    "2.1.0": "2018-02-13T03:57:54.867Z",
    "2.1.1": "2018-02-16T03:09:38.107Z",
    "2.2.0": "2018-02-19T05:10:39.703Z",
    "2.2.1": "2018-03-04T20:38:43.659Z",
    "2.2.2": "2018-03-07T23:29:13.211Z",
    "2.2.3": "2018-03-08T22:41:03.002Z",
    "2.2.4": "2018-03-15T12:23:12.146Z",
    "2.3.0": "2018-07-17T05:21:16.843Z",
    "3.0.0": "2018-08-04T21:11:18.202Z",
    "3.0.1": "2018-08-04T23:29:33.792Z",
    "3.0.2": "2018-08-08T16:29:24.785Z",
    "3.0.3": "2018-08-15T19:39:28.086Z",
    "3.1.0": "2018-08-15T20:09:41.745Z",
    "3.1.1": "2018-08-24T08:59:00.113Z",
    "3.1.2": "2018-08-26T21:01:56.295Z",
    "3.1.3": "2018-09-11T15:32:02.705Z",
    "3.2.0": "2018-10-08T17:14:54.615Z",
    "3.3.0": "2018-10-08T17:32:52.338Z",
    "3.3.0-beta.1": "2018-11-29T18:24:46.640Z",
    "3.3.1": "2018-12-14T23:54:20.007Z",
    "3.3.0-beta.2": "2018-12-14T23:55:14.607Z",
    "3.4.0-beta.1": "2018-12-15T05:15:07.560Z",
    "3.3.2": "2018-12-26T18:29:32.553Z",
    "3.4.0-beta.2": "2018-12-27T19:34:24.414Z",
    "3.3.3": "2019-04-14T04:14:03.719Z",
    "3.3.4": "2019-06-25T15:51:40.976Z",
    "3.3.5": "2019-06-26T17:31:28.181Z",
    "3.3.6": "2019-08-09T18:49:11.826Z",
    "3.3.7": "2019-09-19T20:40:13.232Z",
    "3.4.0-beta.3": "2019-10-02T20:26:28.849Z",
    "3.4.0-beta.4": "2019-10-02T20:39:22.059Z",
    "3.4.0-beta.5": "2019-10-02T21:09:21.026Z",
    "3.4.0-beta.6": "2019-10-14T17:04:26.328Z",
    "3.3.8": "2019-10-26T04:36:37.280Z",
    "3.4.0-beta.7": "2019-11-21T02:56:56.394Z",
    "4.0.0-beta.1": "2019-12-05T18:25:27.602Z",
    "3.4.0-beta.8": "2019-12-05T18:57:07.142Z",
    "3.4.0-beta.9": "2019-12-10T22:53:24.854Z",
    "3.4.0-beta.10": "2019-12-19T16:54:39.934Z",
    "4.0.0": "2020-01-09T19:45:52.934Z",
    "5.0.0": "2020-01-27T19:52:40.195Z",
    "6.0.0": "2021-09-21T18:59:21.302Z",
    "6.0.1": "2021-09-21T19:08:14.855Z",
    "6.0.2": "2021-10-30T05:33:56.899Z",
    "6.0.3": "2021-12-15T19:12:43.779Z"
  },
  "homepage": "https://github.com/semantic-release/exec#readme",
  "keywords": [
    "cli",
    "publish",
    "release",
    "script",
    "semantic-release",
    "shell",
    "version"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/semantic-release/exec.git"
  },
  "contributors": [
    {
      "name": "Stephan Bönnemann",
      "email": "stephan@boennemann.me",
      "url": "http://boennemann.me"
    },
    {
      "name": "Gregor Martynus",
      "url": "https://twitter.com/gr2m"
    }
  ],
  "author": {
    "name": "Pierre Vanduynslager",
    "url": "https://github.com/pvdlg"
  },
  "bugs": {
    "url": "https://github.com/semantic-release/exec/issues"
  },
  "license": "MIT",
  "readmeFilename": "README.md"
}