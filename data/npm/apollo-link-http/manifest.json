{
  "_id": "apollo-link-http",
  "_rev": "62-224bc28562bc9f1911a0afdc820de9f4",
  "name": "apollo-link-http",
  "description": "HTTP transport layer for GraphQL",
  "dist-tags": {
    "latest": "1.5.17",
    "beta": "0.6.1-beta.6",
    "alpha": "1.6.0-alpha.5"
  },
  "versions": {
    "0.0.0": {
      "name": "apollo-link-http",
      "version": "0.0.0",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "pretest": "npm run build && cp -R ./dist/src/. ./lib",
        "test": "npm run test-only --",
        "posttest": "npm run lint",
        "test-only": "mocha --reporter spec --full-trace dist/tests/tests.js",
        "test-watch": "mocha --reporter spec --full-trace dist/tests/tests.js --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- --reporter dot --full-trace dist/tests/tests.js",
        "postcoverage": "remap-istanbul --input coverage/coverage.json --type lcovonly --output coverage/lcov.info",
        "lint": "tslint --type-check -p tsconfig.json src/*.ts && tslint --type-check -p tsconfig.json tests/*.ts",
        "prebuild": "npm run clean:dist",
        "build": "tsc",
        "watch": "tsc -w",
        "clean": "npm run clean:dist && npm run clean:coverage",
        "clean:dist": "rimraf dist/* && rimraf lib/*",
        "clean:coverage": "rimraf coverage/*",
        "prepublishOnly": "npm run clean && npm run build"
      },
      "dependencies": {
        "apollo-fetch": "^0.3.0",
        "apollo-link": "^0.0.3",
        "graphql": "^0.10.5",
        "@types/graphql": "^0.10.0",
        "@types/zen-observable": "^0.5.1"
      },
      "devDependencies": {
        "@types/chai": "^4.0.0",
        "@types/chai-as-promised": "0.0.31",
        "@types/mocha": "^2.2.31",
        "@types/sinon": "^2.3.2",
        "chai": "^4.0.2",
        "chai-as-promised": "^7.0.0",
        "fetch-mock": "^5.11.0",
        "graphql-tag": "^2.2.2",
        "istanbul": "^0.4.4",
        "lodash": "^4.17.4",
        "mocha": "^3.2.0",
        "remap-istanbul": "^0.9.0",
        "rimraf": "^2.5.4",
        "sinon": "^2.3.4",
        "source-map-support": "^0.4.5",
        "tslint": "^5.0.0",
        "typescript": "^2.2.1"
      },
      "optionalDependencies": {
        "@types/graphql": "^0.10.0",
        "@types/zen-observable": "^0.5.1"
      },
      "_id": "apollo-link-http@0.0.0",
      "_shasum": "4d2a47817f5963995e2b6bbc5ff9b812cb146054",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.0",
      "_npmUser": {
        "name": "evanshauser",
        "email": "evanshauser@gmail.com"
      },
      "dist": {
        "shasum": "4d2a47817f5963995e2b6bbc5ff9b812cb146054",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.0.0.tgz",
        "integrity": "sha512-QKXJKEYvHuE2VZLi81MIFYiLzS4XINlUoZ25kaU/Q4c9loYtlMRLwrAYsx3tMAtgx8C5p9ijFz53vN0UmiCDiQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICLIfyRzjY9/muCu19KgzyVJf//npwQcaRGARKLXhbpXAiA9MV0Z7v35wh6owLu5WcGKHegrofSHwLK58S8oaaD4tw=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.0.0.tgz_1500968641689_0.5505571523681283"
      },
      "directories": {}
    },
    "0.0.1": {
      "name": "apollo-link-http",
      "version": "0.0.1",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "pretest": "npm run build",
        "test": "npm run test-only --",
        "posttest": "npm run lint",
        "test-only": "mocha --reporter spec --full-trace dist/tests/tests.js",
        "test-watch": "mocha --reporter spec --full-trace dist/tests/tests.js --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- --reporter dot --full-trace dist/tests/tests.js",
        "postcoverage": "remap-istanbul --input coverage/coverage.json --type lcovonly --output coverage/lcov.info",
        "lint": "tslint --type-check -p tsconfig.json src/*.ts && tslint --type-check -p tsconfig.json tests/*.ts",
        "prebuild": "npm run clean:dist",
        "build": "tsc",
        "postbuild": "cp -R ./dist/src/. ./lib",
        "watch": "tsc -w",
        "clean": "npm run clean:dist && npm run clean:coverage",
        "clean:dist": "rimraf dist/* && rimraf lib/*",
        "clean:coverage": "rimraf coverage/*",
        "prepublishOnly": "npm run clean && npm run build"
      },
      "dependencies": {
        "apollo-fetch": "^0.3.0",
        "apollo-link": "^0.0.3",
        "graphql": "^0.10.5",
        "@types/graphql": "^0.10.0",
        "@types/zen-observable": "^0.5.1"
      },
      "devDependencies": {
        "@types/chai": "^4.0.0",
        "@types/chai-as-promised": "0.0.31",
        "@types/mocha": "^2.2.31",
        "@types/sinon": "^2.3.2",
        "chai": "^4.0.2",
        "chai-as-promised": "^7.0.0",
        "fetch-mock": "^5.11.0",
        "graphql-tag": "^2.2.2",
        "istanbul": "^0.4.4",
        "lodash": "^4.17.4",
        "mocha": "^3.2.0",
        "remap-istanbul": "^0.9.0",
        "rimraf": "^2.5.4",
        "sinon": "^2.3.4",
        "source-map-support": "^0.4.5",
        "tslint": "^5.0.0",
        "typescript": "^2.2.1"
      },
      "optionalDependencies": {
        "@types/graphql": "^0.10.0",
        "@types/zen-observable": "^0.5.1"
      },
      "_id": "apollo-link-http@0.0.1",
      "_shasum": "ca439345b6151fb3a2aee39eb163c22d12bb8eaa",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.0",
      "_npmUser": {
        "name": "evanshauser",
        "email": "evanshauser@gmail.com"
      },
      "dist": {
        "shasum": "ca439345b6151fb3a2aee39eb163c22d12bb8eaa",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.0.1.tgz",
        "integrity": "sha512-v83cGcz0XU30AnldAe2IVJ1OijWfK4F7jCzHta90Rc9U6B2UlF2j3oWabKbsSLr+VgAvaFL6GpAShwUkHxP/Yg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDbn0GG1YZ+T9UStn7mJ/JYRagvoSCcd3ly3kZGBRCb2wIgY2DKwWx0qDFCTGueibdbxi1X2pv8HmMSx8dFjA8+qJc="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.0.1.tgz_1501025193155_0.27779239951632917"
      },
      "directories": {}
    },
    "0.1.0": {
      "name": "apollo-link-http",
      "version": "0.1.0",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "pretest": "npm run build",
        "test": "npm run test-only --",
        "posttest": "npm run lint",
        "test-only": "mocha --reporter spec --full-trace dist/tests/tests.js",
        "test-watch": "mocha --reporter spec --full-trace dist/tests/tests.js --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- --reporter dot --full-trace dist/tests/tests.js",
        "postcoverage": "remap-istanbul --input coverage/coverage.json --type lcovonly --output coverage/lcov.info",
        "lint": "tslint --type-check -p tsconfig.json src/*.ts && tslint --type-check -p tsconfig.json tests/*.ts",
        "prebuild": "npm run clean:dist",
        "build": "tsc",
        "postbuild": "cp -R ./dist/src/. ./lib",
        "watch": "tsc -w",
        "clean": "npm run clean:dist && npm run clean:coverage",
        "clean:dist": "rimraf dist/* && rimraf lib/*",
        "clean:coverage": "rimraf coverage/*",
        "prepublishOnly": "npm run clean && npm run build"
      },
      "dependencies": {
        "apollo-fetch": "^0.3.0",
        "apollo-link-core": "^0.1.0",
        "graphql": "^0.10.5",
        "@types/graphql": "^0.10.0",
        "@types/zen-observable": "^0.5.1"
      },
      "devDependencies": {
        "@types/chai": "^4.0.0",
        "@types/chai-as-promised": "0.0.31",
        "@types/mocha": "^2.2.31",
        "@types/sinon": "^2.3.2",
        "chai": "^4.0.2",
        "chai-as-promised": "^7.0.0",
        "fetch-mock": "^5.11.0",
        "graphql-tag": "^2.2.2",
        "istanbul": "^0.4.4",
        "lodash": "^4.17.4",
        "mocha": "^3.2.0",
        "remap-istanbul": "^0.9.0",
        "rimraf": "^2.5.4",
        "sinon": "^2.3.4",
        "source-map-support": "^0.4.5",
        "tslint": "^5.0.0",
        "typescript": "^2.2.1"
      },
      "optionalDependencies": {
        "@types/graphql": "^0.10.0",
        "@types/zen-observable": "^0.5.1"
      },
      "_id": "apollo-link-http@0.1.0",
      "_shasum": "74e33560103ad1d553b7a4617fee6e76ac781450",
      "_from": ".",
      "_npmVersion": "4.2.0",
      "_nodeVersion": "7.10.1",
      "_npmUser": {
        "name": "evanshauser",
        "email": "evanshauser@gmail.com"
      },
      "dist": {
        "shasum": "74e33560103ad1d553b7a4617fee6e76ac781450",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.1.0.tgz",
        "integrity": "sha512-KeTY9pvmKIp926qfHss1GDyiD+/o/Fu83g8EL2QILN9LhK82fij0abqUXGMzS2jItSvEA3cGg7hRuXjxmESKLA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFPS3uX9tG5OM5u/8H7NUee5R/l2SjEqYQkPjiYQXJrJAiAcz0xUAEyD8XwhriQ/6Ak0aof7p1HN2LeEk2R9NxUz6A=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.1.0.tgz_1501278643838_0.1675371106248349"
      },
      "directories": {}
    },
    "0.1.1": {
      "name": "apollo-link-http",
      "version": "0.1.1",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "pretest": "npm run build",
        "test": "npm run test-only --",
        "posttest": "npm run lint",
        "test-only": "mocha --reporter spec --full-trace dist/tests/tests.js",
        "test-watch": "mocha --reporter spec --full-trace dist/tests/tests.js --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- --reporter dot --full-trace dist/tests/tests.js",
        "postcoverage": "remap-istanbul --input coverage/coverage.json --type lcovonly --output coverage/lcov.info",
        "lint": "tslint --type-check -p tsconfig.json src/*.ts && tslint --type-check -p tsconfig.json tests/*.ts",
        "prebuild": "npm run clean:dist",
        "build": "tsc",
        "postbuild": "cp -R ./dist/src/. ./lib",
        "watch": "tsc -w",
        "clean": "npm run clean:dist && npm run clean:coverage",
        "clean:dist": "rimraf dist/* && rimraf lib/*",
        "clean:coverage": "rimraf coverage/*",
        "prepublishOnly": "npm run clean && npm run build"
      },
      "dependencies": {
        "apollo-fetch": "^0.3.0",
        "apollo-link-core": "^0.1.1",
        "graphql": "^0.10.5",
        "@types/graphql": "~0.9.0",
        "@types/zen-observable": "^0.5.1"
      },
      "devDependencies": {
        "@types/chai": "^4.0.0",
        "@types/chai-as-promised": "0.0.31",
        "@types/mocha": "^2.2.31",
        "@types/sinon": "^2.3.2",
        "chai": "^4.0.2",
        "chai-as-promised": "^7.0.0",
        "fetch-mock": "^5.11.0",
        "graphql-tag": "^2.2.2",
        "istanbul": "^0.4.4",
        "lodash": "^4.17.4",
        "mocha": "^3.2.0",
        "remap-istanbul": "^0.9.0",
        "rimraf": "^2.5.4",
        "sinon": "^2.3.4",
        "source-map-support": "^0.4.5",
        "tslint": "^5.0.0",
        "typescript": "^2.2.1"
      },
      "optionalDependencies": {
        "@types/graphql": "~0.9.0",
        "@types/zen-observable": "^0.5.1"
      },
      "_id": "apollo-link-http@0.1.1",
      "_shasum": "3afa1127681ab17f0fdd2a3989a09d04cb9180fa",
      "_from": ".",
      "_npmVersion": "4.2.0",
      "_nodeVersion": "7.10.1",
      "_npmUser": {
        "name": "evanshauser",
        "email": "evanshauser@gmail.com"
      },
      "dist": {
        "shasum": "3afa1127681ab17f0fdd2a3989a09d04cb9180fa",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.1.1.tgz",
        "integrity": "sha512-NZBzTpy7xnZFzL3G11KPydLY9lwiD35KPxlkbskMS45Pd/DPmbM0oucdsAx0qoyDjoarBLFznmVHVbi2Qqjd8A==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCcjAp9gXMEdOiL4qgemQoJhTcK9AStNLY0LCLYgIHhCQIgE00P+kCIxDAZatiVu0/aTGcg4mR3d3qULwCGQ/bqZtM="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.1.1.tgz_1501283144404_0.4739879996050149"
      },
      "directories": {}
    },
    "0.2.0": {
      "name": "apollo-link-http",
      "version": "0.2.0",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "pretest": "npm run build",
        "test": "npm run test-only --",
        "posttest": "npm run lint",
        "test-only": "mocha --reporter spec --full-trace dist/tests/tests.js",
        "test-watch": "mocha --reporter spec --full-trace dist/tests/tests.js --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- --reporter dot --full-trace dist/tests/tests.js",
        "postcoverage": "remap-istanbul --input coverage/coverage.json --type lcovonly --output coverage/lcov.info",
        "lint": "tslint --type-check -p tsconfig.json src/*.ts && tslint --type-check -p tsconfig.json tests/*.ts",
        "prebuild": "npm run clean:dist",
        "build": "tsc",
        "postbuild": "cp -R ./dist/src/. ./lib",
        "watch": "tsc -w",
        "clean": "npm run clean:dist && npm run clean:coverage",
        "clean:dist": "rimraf dist/* && rimraf lib/*",
        "clean:coverage": "rimraf coverage/*",
        "prepublishOnly": "npm run clean && npm run build"
      },
      "dependencies": {
        "apollo-fetch": "^0.3.0",
        "apollo-link-core": "^0.2.0",
        "graphql": "^0.10.5",
        "@types/graphql": "~0.9.0",
        "@types/zen-observable": "^0.5.1"
      },
      "devDependencies": {
        "@types/chai": "^4.0.0",
        "@types/chai-as-promised": "0.0.31",
        "@types/mocha": "^2.2.31",
        "@types/sinon": "^2.3.2",
        "chai": "^4.0.2",
        "chai-as-promised": "^7.0.0",
        "fetch-mock": "^5.11.0",
        "graphql-tag": "^2.2.2",
        "istanbul": "^0.4.4",
        "lodash": "^4.17.4",
        "mocha": "^3.2.0",
        "remap-istanbul": "^0.9.0",
        "rimraf": "^2.5.4",
        "sinon": "^2.3.4",
        "source-map-support": "^0.4.5",
        "tslint": "^5.0.0",
        "typescript": "^2.2.1"
      },
      "optionalDependencies": {
        "@types/graphql": "~0.9.0",
        "@types/zen-observable": "^0.5.1"
      },
      "_id": "apollo-link-http@0.2.0",
      "_shasum": "0e07ffdaabc4896f2963119a41e31d451cee3225",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.0",
      "_npmUser": {
        "name": "evanshauser",
        "email": "evanshauser@gmail.com"
      },
      "dist": {
        "shasum": "0e07ffdaabc4896f2963119a41e31d451cee3225",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.2.0.tgz",
        "integrity": "sha512-VdeH7NQj0f824UNzz1JmijfOeYo1DuSPC9xLl2mKpcd6MUpZvc8+a5x6Rz3BBOS3yvD4njwoS6ZtqSiRZ5LUTA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCQrdJ2pW+mcXFh/SQ0NFJLQ5kJhrLUpPMGAYEQTbpG7AIgZOWMVWyYMbQbHgMbez2tGvoRHMdm5HcYM2CYsQ12/7A="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.2.0.tgz_1501310948092_0.42812632163986564"
      },
      "directories": {}
    },
    "0.3.0": {
      "name": "apollo-link-http",
      "version": "0.3.0",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "pretest": "npm run build",
        "test": "npm run test-only --",
        "posttest": "npm run lint",
        "test-only": "mocha --reporter spec --full-trace dist/tests/tests.js",
        "test-watch": "mocha --reporter spec --full-trace dist/tests/tests.js --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- --reporter dot --full-trace dist/tests/tests.js",
        "postcoverage": "remap-istanbul --input coverage/coverage.json --type lcovonly --output coverage/lcov.info",
        "lint": "tslint --type-check -p tsconfig.json src/*.ts && tslint --type-check -p tsconfig.json tests/*.ts",
        "prebuild": "npm run clean:dist",
        "build": "tsc -p .",
        "postbuild": "cp -R ./dist/src/. ./lib",
        "watch": "tsc -w -p .",
        "clean": "npm run clean:dist && npm run clean:coverage",
        "clean:dist": "rimraf dist/* && rimraf lib/*",
        "clean:coverage": "rimraf coverage/*",
        "prepublishOnly": "npm run clean && npm run build"
      },
      "dependencies": {
        "apollo-fetch": "^0.6.0",
        "apollo-link-core": "^0.3.0",
        "graphql": "^0.10.5",
        "@types/graphql": "~0.9.0"
      },
      "devDependencies": {
        "@types/chai": "^4.0.0",
        "@types/chai-as-promised": "0.0.31",
        "@types/mocha": "^2.2.31",
        "@types/sinon": "^2.3.2",
        "chai": "^4.0.2",
        "chai-as-promised": "^7.0.0",
        "fetch-mock": "^5.11.0",
        "graphql-tag": "^2.2.2",
        "istanbul": "^0.4.4",
        "lodash": "^4.17.4",
        "mocha": "^3.2.0",
        "remap-istanbul": "^0.9.0",
        "rimraf": "^2.5.4",
        "sinon": "^2.3.4",
        "source-map-support": "^0.4.5",
        "tslint": "^5.0.0",
        "typescript": "^2.2.1"
      },
      "optionalDependencies": {
        "@types/graphql": "~0.9.0"
      },
      "_id": "apollo-link-http@0.3.0",
      "_shasum": "ce877a53ecb7065853b1ad8b7d667ce66f1b60b4",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.0",
      "_npmUser": {
        "name": "evanshauser",
        "email": "evanshauser@gmail.com"
      },
      "dist": {
        "shasum": "ce877a53ecb7065853b1ad8b7d667ce66f1b60b4",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.3.0.tgz",
        "integrity": "sha512-821p7w9Q/o8nyhd1hiZTYhtiPGPDvxdiblCFGEc5eH05zqGzEqvbFIbVMXoFHoAEhHkJXmt/8KtJzku9j2d/+Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDhkw8GDAtP7p2izpLFMlgQffXnn5lNcRMn6HhG4bPT8AiAUfZaCJtE0WARNRDfFZTfSvzD8F3U/H/MYsmccL1nAsQ=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.3.0.tgz_1502226194779_0.01496640290133655"
      },
      "directories": {}
    },
    "0.3.1": {
      "name": "apollo-link-http",
      "version": "0.3.1",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "pretest": "npm run build",
        "test": "npm run test-only --",
        "posttest": "npm run lint",
        "test-only": "mocha --reporter spec --full-trace dist/tests/tests.js",
        "test-watch": "mocha --reporter spec --full-trace dist/tests/tests.js --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- --reporter dot --full-trace dist/tests/tests.js",
        "postcoverage": "remap-istanbul --input coverage/coverage.json --type lcovonly --output coverage/lcov.info",
        "lint": "tslint --type-check -p tsconfig.json src/*.ts && tslint --type-check -p tsconfig.json tests/*.ts",
        "prebuild": "npm run clean:dist",
        "build": "tsc -p .",
        "postbuild": "cp -R ./dist/src/. ./lib",
        "watch": "tsc -w -p .",
        "clean": "npm run clean:dist && npm run clean:coverage",
        "clean:dist": "rimraf dist/* && rimraf lib/*",
        "clean:coverage": "rimraf coverage/*",
        "prepublishOnly": "npm run clean && npm run build"
      },
      "dependencies": {
        "apollo-fetch": "^0.6.0",
        "apollo-link-core": "^0.3.1",
        "graphql": "^0.10.5",
        "@types/graphql": "~0.10.2"
      },
      "devDependencies": {
        "@types/chai": "^4.0.0",
        "@types/chai-as-promised": "0.0.31",
        "@types/mocha": "^2.2.31",
        "@types/sinon": "^2.3.2",
        "chai": "^4.0.2",
        "chai-as-promised": "^7.0.0",
        "fetch-mock": "^5.11.0",
        "graphql-tag": "^2.2.2",
        "istanbul": "^0.4.4",
        "lodash": "^4.17.4",
        "mocha": "^3.2.0",
        "remap-istanbul": "^0.9.0",
        "rimraf": "^2.5.4",
        "sinon": "^2.3.4",
        "source-map-support": "^0.4.5",
        "tslint": "^5.0.0",
        "typescript": "^2.2.1"
      },
      "optionalDependencies": {
        "@types/graphql": "~0.10.2"
      },
      "_id": "apollo-link-http@0.3.1",
      "_shasum": "3ca0ec191f0f2ec0c22fd3bd8b5d9858d0e0bd29",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.0",
      "_npmUser": {
        "name": "evanshauser",
        "email": "evanshauser@gmail.com"
      },
      "dist": {
        "shasum": "3ca0ec191f0f2ec0c22fd3bd8b5d9858d0e0bd29",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.3.1.tgz",
        "integrity": "sha512-5w8Dma7hN4SIro3UjlTpD/IcJmmqknuDkK/9EOAIYKbpRfPejWm7trQddqbnVCJFwg82O68AgjFwr5mwWa1uNA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIERULUS+wp6Uz+oojH+VSigysFuu3Mplh/Ysd5uqMbosAiBKpA2UMoWhIplbxp1qxpHNUGiyyo0KEtVHWSqoFTwErg=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.3.1.tgz_1502228472116_0.4543896506074816"
      },
      "directories": {}
    },
    "0.4.0": {
      "name": "apollo-link-http",
      "version": "0.4.0",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "pretest": "npm run build",
        "test": "npm run test-only --",
        "posttest": "npm run lint",
        "test-only": "mocha --reporter spec --full-trace dist/tests/tests.js",
        "test-watch": "mocha --reporter spec --full-trace dist/tests/tests.js --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- --reporter dot --full-trace dist/tests/tests.js",
        "postcoverage": "remap-istanbul --input coverage/coverage.json --type lcovonly --output coverage/lcov.info",
        "lint": "tslint --type-check -p tsconfig.json src/*.ts && tslint --type-check -p tsconfig.json tests/*.ts",
        "prebuild": "npm run clean:dist",
        "build": "tsc -p .",
        "postbuild": "cp -R ./dist/src/. ./lib",
        "watch": "tsc -w -p .",
        "clean": "npm run clean:dist && npm run clean:coverage",
        "clean:dist": "rimraf dist/* && rimraf lib/*",
        "clean:coverage": "rimraf coverage/*",
        "prepublishOnly": "npm run clean && npm run build"
      },
      "dependencies": {
        "apollo-fetch": "^0.6.0",
        "apollo-link-core": "^0.4.0",
        "graphql": "^0.10.5"
      },
      "devDependencies": {
        "@types/chai": "^4.0.0",
        "@types/chai-as-promised": "0.0.31",
        "@types/graphql": "~0.10.2",
        "@types/mocha": "^2.2.31",
        "@types/sinon": "^2.3.2",
        "chai": "^4.0.2",
        "chai-as-promised": "^7.0.0",
        "fetch-mock": "^5.11.0",
        "graphql-tag": "^2.2.2",
        "istanbul": "^0.4.4",
        "lodash": "^4.17.4",
        "mocha": "^3.2.0",
        "remap-istanbul": "^0.9.0",
        "rimraf": "^2.5.4",
        "sinon": "^2.3.4",
        "source-map-support": "^0.4.5",
        "tslint": "^5.0.0",
        "typescript": "^2.2.1"
      },
      "_id": "apollo-link-http@0.4.0",
      "_shasum": "a6ca645d045f8afe8e2fe7e48b475c3a7eff400c",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.0",
      "_npmUser": {
        "name": "evanshauser",
        "email": "evanshauser@gmail.com"
      },
      "dist": {
        "shasum": "a6ca645d045f8afe8e2fe7e48b475c3a7eff400c",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.4.0.tgz",
        "integrity": "sha512-iicXTbGS17eviC+iqY55rZO4y6b/cZJMpd5SWrGb7ul8Y9ZEErKDuj9T5Ql+SznMqjFzA6MaxyvNRiw3k3rzzw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDntyQwW1mnlEhz94Pbhd5tVkpMmOiGoVJLlnQrUwEupAiEAzCkuiE1GnQjxxi2wp96JJfFOHAZdylRhm7rhoyoFUc8="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.4.0.tgz_1502242061477_0.916015655035153"
      },
      "directories": {}
    },
    "0.4.1": {
      "name": "apollo-link-http",
      "version": "0.4.1",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "pretest": "npm run build",
        "test": "npm run test-only --",
        "posttest": "npm run lint",
        "test-only": "mocha --reporter spec --full-trace dist/tests/tests.js",
        "test-watch": "mocha --reporter spec --full-trace dist/tests/tests.js --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- --reporter dot --full-trace dist/tests/tests.js",
        "postcoverage": "remap-istanbul --input coverage/coverage.json --type lcovonly --output coverage/lcov.info",
        "lint": "tslint --type-check -p tsconfig.json src/*.ts && tslint --type-check -p tsconfig.json tests/*.ts",
        "prebuild": "npm run clean:dist",
        "build": "tsc -p .",
        "postbuild": "cp -R ./dist/src/. ./lib",
        "watch": "tsc -w -p .",
        "clean": "npm run clean:dist && npm run clean:coverage",
        "clean:dist": "rimraf dist/* && rimraf lib/*",
        "clean:coverage": "rimraf coverage/*",
        "prepublishOnly": "npm run clean && npm run build"
      },
      "dependencies": {
        "apollo-fetch": "^0.6.0",
        "apollo-link-core": "^0.4.1",
        "graphql": "^0.10.5"
      },
      "devDependencies": {
        "@types/chai": "^4.0.0",
        "@types/chai-as-promised": "0.0.31",
        "@types/graphql": "~0.10.2",
        "@types/mocha": "^2.2.31",
        "@types/sinon": "^2.3.2",
        "chai": "^4.0.2",
        "chai-as-promised": "^7.0.0",
        "fetch-mock": "^5.11.0",
        "graphql-tag": "^2.2.2",
        "istanbul": "^0.4.4",
        "lodash": "^4.17.4",
        "mocha": "^3.2.0",
        "remap-istanbul": "^0.9.0",
        "rimraf": "^2.5.4",
        "sinon": "^2.3.4",
        "source-map-support": "^0.4.5",
        "tslint": "^5.0.0",
        "typescript": "^2.2.1"
      },
      "_id": "apollo-link-http@0.4.1",
      "_shasum": "e354ea2a84bab9fe064ba4ae7251ad78e4124eaa",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.0",
      "_npmUser": {
        "name": "evanshauser",
        "email": "evanshauser@gmail.com"
      },
      "dist": {
        "shasum": "e354ea2a84bab9fe064ba4ae7251ad78e4124eaa",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.4.1.tgz",
        "integrity": "sha512-jALCJBjijNxqYJjMG3cTo39YdJBVnbLDIzXiFu6luMzZRtekVsQgNTPk1QLP3O6dMBBLiDhzHLZidkK5x2fgeQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCIjHN4HiB5N/6p7RznwJyjJ3kx/YA0mgsAmfp9hIWXHgIhANxj1rUCRaNpS5h27VWTWj0P5dVcCoxyLOS8IamuGTWR"
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.4.1.tgz_1502261343341_0.7661462004762143"
      },
      "directories": {}
    },
    "0.5.0": {
      "name": "apollo-link-http",
      "version": "0.5.0",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "pretest": "npm run build",
        "test": "npm run test-only --",
        "posttest": "npm run lint",
        "test-only": "mocha --reporter spec --full-trace dist/tests/tests.js",
        "test-watch": "mocha --reporter spec --full-trace dist/tests/tests.js --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- --reporter dot --full-trace dist/tests/tests.js",
        "postcoverage": "remap-istanbul --input coverage/coverage.json --type lcovonly --output coverage/lcov.info",
        "lint": "tslint --type-check -p tsconfig.json src/*.ts && tslint --type-check -p tsconfig.json tests/*.ts",
        "prebuild": "npm run clean:dist",
        "build": "tsc -p .",
        "postbuild": "cp -R ./dist/src/. ./lib",
        "watch": "tsc -w -p .",
        "clean": "npm run clean:dist && npm run clean:coverage",
        "clean:dist": "rimraf dist/* && rimraf lib/*",
        "clean:coverage": "rimraf coverage/*",
        "prepublishOnly": "npm run clean && npm run build"
      },
      "dependencies": {
        "apollo-fetch": "^0.6.0",
        "apollo-link-core": "^0.5.0",
        "graphql": "^0.10.5"
      },
      "devDependencies": {
        "@types/chai": "^4.0.0",
        "@types/chai-as-promised": "0.0.31",
        "@types/graphql": "~0.10.2",
        "@types/mocha": "^2.2.31",
        "@types/sinon": "^2.3.2",
        "chai": "^4.0.2",
        "chai-as-promised": "^7.0.0",
        "fetch-mock": "^5.11.0",
        "graphql-tag": "^2.2.2",
        "istanbul": "^0.4.4",
        "lodash": "^4.17.4",
        "mocha": "^3.2.0",
        "remap-istanbul": "^0.9.0",
        "rimraf": "^2.5.4",
        "sinon": "^2.3.4",
        "source-map-support": "^0.4.5",
        "tslint": "^5.0.0",
        "typescript": "^2.2.1"
      },
      "_id": "apollo-link-http@0.5.0",
      "_shasum": "a2915fbc58cef58dc6b65506de749ea745ec8718",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.0",
      "_npmUser": {
        "name": "evanshauser",
        "email": "evanshauser@gmail.com"
      },
      "dist": {
        "shasum": "a2915fbc58cef58dc6b65506de749ea745ec8718",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.5.0.tgz",
        "integrity": "sha512-OZ+8b+pa2EsNvPgS+5pP30okGaSVcPIt2az8Cr0k2fkqtU9K3vrHgmuRSi8oxzr5t6JwBiE91Lk9TLSpYIvjCg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAMRrqwL59mDhXx4yNpSk30GSyIMFu5vTrvhwlyfa/jMAiEAvzWGb34VWUf9gRhE6WhtNZff74PqhFszPfjhtK7f0RA="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.5.0.tgz_1502320918471_0.5304463689681143"
      },
      "directories": {}
    },
    "0.5.2": {
      "name": "apollo-link-http",
      "version": "0.5.2",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./dist/src/bundle.umd.js",
      "module": "./dist/src/httpLink.js",
      "jsnext:main": "./dist/src/httpLink.js",
      "typings": "./dist/src/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "pretest": "npm run build-test",
        "test": "npm run test-only --",
        "posttest": "npm run lint",
        "test-only": "mocha --reporter spec --full-trace dist/tests/tests.js",
        "test-watch": "mocha --reporter spec --full-trace dist/tests/tests.js --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- --reporter dot --full-trace dist/tests/tests.js",
        "postcoverage": "remap-istanbul --input coverage/coverage.json --type lcovonly --output coverage/lcov.info",
        "lint": "tslint --type-check -p tsconfig.test.json src/*.ts && tslint --type-check -p tsconfig.test.json tests/*.ts",
        "prebuild": "npm run clean:dist",
        "build": "tsc -p .",
        "build-test": "tsc -p tsconfig.test.json",
        "postbuild": "npm run bundle",
        "postbuild-test": "npm run bundle",
        "bundle": "rollup -c",
        "watch": "tsc -w -p .",
        "clean": "npm run clean:dist && npm run clean:coverage",
        "clean:dist": "rimraf dist/*",
        "clean:coverage": "rimraf coverage/*",
        "prepublishOnly": "npm run clean && npm run build"
      },
      "dependencies": {
        "apollo-fetch": "^0.6.0",
        "apollo-link-core": "^0.5.2",
        "graphql": "^0.10.5"
      },
      "devDependencies": {
        "@types/chai": "4.0.4",
        "@types/chai-as-promised": "0.0.31",
        "@types/graphql": "0.10.2",
        "@types/mocha": "2.2.42",
        "@types/sinon": "2.3.3",
        "chai": "4.1.1",
        "chai-as-promised": "7.1.1",
        "fetch-mock": "5.12.2",
        "graphql-tag": "2.4.2",
        "istanbul": "0.4.5",
        "lodash": "4.17.4",
        "mocha": "3.5.0",
        "remap-istanbul": "0.9.5",
        "rimraf": "2.6.1",
        "rollup": "^0.45.2",
        "sinon": "3.2.0",
        "source-map-support": "0.4.16",
        "tslint": "5.7.0",
        "typescript": "2.5.1"
      },
      "_id": "apollo-link-http@0.5.2",
      "_npmVersion": "5.4.0",
      "_nodeVersion": "8.1.2",
      "_npmUser": {
        "name": "jbaxleyiii",
        "email": "james@meteor.com"
      },
      "dist": {
        "integrity": "sha512-ZVEPUiaUyYsbmqSEFyTE853+UUwU2SM8l05A4fvoge9kfoHq2flxA0FdYum6tbVDBS/cIaiLoaA9co7eXoTcYg==",
        "shasum": "5e095c0d480c452d7379c829794eece191cba7ed",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.5.2.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCNh4lvTNhyiP1g4yR70GOVYTjQEkBHRxpMqsdSpaC2qAIgCc625sT820VL2xq0ZvVq3ay3P6AW9jST2s3uHZQAf5U="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.5.2.tgz_1504746174875_0.028670632047578692"
      },
      "directories": {}
    },
    "0.5.4": {
      "name": "apollo-link-http",
      "version": "0.5.4",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "pretest": "npm run build",
        "test": "npm run test-only --",
        "posttest": "npm run lint",
        "test-only": "mocha --reporter spec --full-trace dist/tests/tests.js",
        "test-watch": "mocha --reporter spec --full-trace dist/tests/tests.js --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- --reporter dot --full-trace dist/tests/tests.js",
        "postcoverage": "remap-istanbul --input coverage/coverage.json --type lcovonly --output coverage/lcov.info",
        "lint": "tslint --type-check -p tsconfig.json src/*.ts && tslint --type-check -p tsconfig.json tests/*.ts",
        "prebuild": "npm run clean:dist",
        "build": "tsc -p .",
        "postbuild": "cp -R ./dist/src/. ./lib",
        "watch": "tsc -w -p .",
        "clean": "npm run clean:dist && npm run clean:coverage",
        "clean:dist": "rimraf dist/* && rimraf lib/*",
        "clean:coverage": "rimraf coverage/*",
        "prepublishOnly": "npm run clean && npm run build"
      },
      "dependencies": {
        "apollo-fetch": "^0.6.0",
        "apollo-link-core": "^0.5.4",
        "graphql": "^0.10.5"
      },
      "devDependencies": {
        "@types/chai": "4.0.4",
        "@types/chai-as-promised": "0.0.31",
        "@types/graphql": "0.10.2",
        "@types/mocha": "2.2.42",
        "@types/sinon": "2.3.3",
        "chai": "4.1.1",
        "chai-as-promised": "7.1.1",
        "fetch-mock": "5.12.2",
        "graphql-tag": "2.4.2",
        "istanbul": "0.4.5",
        "lodash": "4.17.4",
        "mocha": "3.5.0",
        "remap-istanbul": "0.9.5",
        "rimraf": "2.6.1",
        "sinon": "3.2.0",
        "source-map-support": "0.4.16",
        "tslint": "5.7.0",
        "typescript": "2.5.1"
      },
      "_id": "apollo-link-http@0.5.4",
      "_npmVersion": "5.4.0",
      "_nodeVersion": "8.1.2",
      "_npmUser": {
        "name": "jbaxleyiii",
        "email": "james@meteor.com"
      },
      "dist": {
        "integrity": "sha512-Mqkz+xZ/wf8UYgWbjepopjRnd2qkw+1GODz7xlc75BCbU4A89tVbFlUJQmJGL+m2msiey1d4a8qSmu9QNVjqDg==",
        "shasum": "934d80379c99b3cc72d7b8267c9fd32de5243be0",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.5.4.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIALpC2M8PCfE8zjYujx/fxzkDvQrr20mHdlP0QIcyoUdAiEA+t8j9vO4ZzM6KsmoCdv0UnM1EJvau4qW2XXvUEogDHE="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.5.4.tgz_1504754101033_0.41992714116349816"
      },
      "directories": {}
    },
    "0.6.1-beta.0": {
      "name": "apollo-link-http",
      "version": "0.6.1-beta.0",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./dist/src/bundle.umd.js",
      "module": "./dist/src/httpLink.js",
      "jsnext:main": "./dist/src/httpLink.js",
      "typings": "./dist/src/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "pretest": "npm run build-test",
        "test": "npm run test-only --",
        "posttest": "npm run lint",
        "test-only": "mocha --reporter spec --full-trace dist/tests/tests.js",
        "test-watch": "mocha --reporter spec --full-trace dist/tests/tests.js --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- --reporter dot --full-trace dist/tests/tests.js",
        "postcoverage": "remap-istanbul --input coverage/coverage.json --type lcovonly --output coverage/lcov.info",
        "lint": "tslint --type-check -p tsconfig.test.json src/*.ts && tslint --type-check -p tsconfig.test.json tests/*.ts",
        "prebuild": "npm run clean:dist",
        "build": "tsc -p .",
        "build-test": "tsc -p tsconfig.test.json",
        "postbuild": "npm run bundle",
        "postbuild-test": "npm run bundle",
        "bundle": "rollup -c",
        "watch": "tsc -w -p .",
        "clean": "npm run clean:dist && npm run clean:coverage",
        "clean:dist": "rimraf dist/*",
        "clean:coverage": "rimraf coverage/*",
        "prepublishOnly": "npm run clean && npm run build"
      },
      "dependencies": {
        "apollo-fetch": "^0.6.0",
        "graphql": "^0.10.5"
      },
      "peerDependencies": {
        "apollo-link": "^0.6.1-beta.0"
      },
      "devDependencies": {
        "@types/chai": "4.0.4",
        "@types/chai-as-promised": "0.0.31",
        "@types/graphql": "0.10.2",
        "@types/mocha": "2.2.42",
        "@types/sinon": "2.3.3",
        "apollo-link": "^0.6.1-beta.0",
        "chai": "4.1.1",
        "chai-as-promised": "7.1.1",
        "fetch-mock": "5.12.2",
        "graphql-tag": "2.4.2",
        "istanbul": "0.4.5",
        "lodash": "4.17.4",
        "mocha": "3.5.0",
        "remap-istanbul": "0.9.5",
        "rimraf": "2.6.1",
        "rollup": "^0.45.2",
        "sinon": "3.2.0",
        "source-map-support": "0.4.16",
        "tslint": "5.7.0",
        "typescript": "2.5.1"
      },
      "_id": "apollo-link-http@0.6.1-beta.0",
      "_npmVersion": "5.4.1",
      "_nodeVersion": "8.1.2",
      "_npmUser": {
        "name": "jbaxleyiii",
        "email": "james@meteor.com"
      },
      "dist": {
        "integrity": "sha512-DLXH4pJfck+wNbFWx+k9j/fwP0R0Wl7ZMGF591kyhjtNMy55kymkK6GYPcf6eJT9nuSs8SKOCql4WJpkzu80CQ==",
        "shasum": "0b5b9c4d00809916734f8237c2595792d21baf0c",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.6.1-beta.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGJAhxzlc0bRqNcxIS3sHquP3tn7vO1Ce9q2qMv+OtKsAiANF/N2Wb1VrPGBrSbUTiQFvDRWVhCe4JTpk5EKm1Fdlg=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.6.1-beta.0.tgz_1505312437535_0.36952690896578133"
      },
      "directories": {}
    },
    "0.6.1-beta.1": {
      "name": "apollo-link-http",
      "version": "0.6.1-beta.1",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./dist/src/bundle.umd.js",
      "module": "./dist/src/httpLink.js",
      "jsnext:main": "./dist/src/httpLink.js",
      "typings": "./dist/src/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "pretest": "npm run build-test",
        "test": "npm run test-only --",
        "posttest": "npm run lint",
        "test-only": "mocha --reporter spec --full-trace dist/tests/tests.js",
        "test-watch": "mocha --reporter spec --full-trace dist/tests/tests.js --watch",
        "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- --reporter dot --full-trace dist/tests/tests.js",
        "postcoverage": "remap-istanbul --input coverage/coverage.json --type lcovonly --output coverage/lcov.info",
        "lint": "tslint --type-check -p tsconfig.test.json src/*.ts && tslint --type-check -p tsconfig.test.json tests/*.ts",
        "prebuild": "npm run clean:dist",
        "build": "tsc -p .",
        "build-test": "tsc -p tsconfig.test.json",
        "postbuild": "npm run bundle",
        "postbuild-test": "npm run bundle",
        "bundle": "rollup -c",
        "watch": "tsc -w -p .",
        "clean": "npm run clean:dist && npm run clean:coverage",
        "clean:dist": "rimraf dist/*",
        "clean:coverage": "rimraf coverage/*",
        "prepublishOnly": "npm run clean && npm run build"
      },
      "dependencies": {
        "apollo-fetch": "^0.6.0",
        "graphql": "^0.10.5"
      },
      "peerDependencies": {
        "apollo-link": "^0.6.1-beta.1"
      },
      "devDependencies": {
        "@types/chai": "4.0.4",
        "@types/chai-as-promised": "0.0.31",
        "@types/graphql": "0.10.2",
        "@types/mocha": "2.2.42",
        "@types/sinon": "2.3.3",
        "apollo-link": "^0.6.1-beta.1",
        "chai": "4.1.1",
        "chai-as-promised": "7.1.1",
        "fetch-mock": "5.12.2",
        "graphql-tag": "2.4.2",
        "istanbul": "0.4.5",
        "lodash": "4.17.4",
        "mocha": "3.5.0",
        "remap-istanbul": "0.9.5",
        "rimraf": "2.6.1",
        "rollup": "^0.45.2",
        "sinon": "3.2.0",
        "source-map-support": "0.4.16",
        "tslint": "5.7.0",
        "typescript": "2.5.1"
      },
      "_id": "apollo-link-http@0.6.1-beta.1",
      "_npmVersion": "5.4.2",
      "_nodeVersion": "8.1.2",
      "_npmUser": {
        "name": "jbaxleyiii",
        "email": "james@meteor.com"
      },
      "dist": {
        "integrity": "sha512-xZUg7I1BsGRNxNhpEMXKNMdhaaov78IBKnEctNUaiAF0m2kSnkB/4mjNH9g7GQdx/VmD2nlwbB6+SLn2Kr/u9g==",
        "shasum": "3bd85eb56c8e2c4a88ae22eb6e0099134c1d7ff7",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.6.1-beta.1.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICik8KrYIShFsRzRFJBz4zMJNPMyZycWVejWPyPG3AHjAiAPwed014ogoj0Sx5DLKinTMy+KjiUI3XtGzmgvR7vR/w=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.6.1-beta.1.tgz_1505782552232_0.04805891215801239"
      },
      "directories": {}
    },
    "0.6.1-beta.4": {
      "name": "apollo-link-http",
      "version": "0.6.1-beta.4",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/httpLink.js",
      "jsnext:main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p ."
      },
      "dependencies": {
        "apollo-fetch": "^0.6.0",
        "graphql": "^0.10.5"
      },
      "peerDependencies": {
        "apollo-link": "^0.6.1-beta.4"
      },
      "devDependencies": {
        "@types/graphql": "0.10.2",
        "@types/jest": "^20.0.8",
        "apollo-link": "^0.6.1-beta.4",
        "browserify": "^14.4.0",
        "fetch-mock": "5.12.2",
        "graphql": "^0.11.3",
        "graphql-tag": "2.4.2",
        "jest": "^21.1.0",
        "rimraf": "2.6.1",
        "rollup": "^0.45.2",
        "ts-jest": "^21.0.1",
        "tslint": "5.7.0",
        "typescript": "2.5.1",
        "uglify-js": "^3.1.1"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ]
      },
      "_id": "apollo-link-http@0.6.1-beta.4",
      "_npmVersion": "5.4.2",
      "_nodeVersion": "8.1.2",
      "_npmUser": {
        "name": "jbaxleyiii",
        "email": "james@meteor.com"
      },
      "dist": {
        "integrity": "sha512-bvOMwFmdbr4oOdRcGGa/wixlIAenHnWFKUfn5KjQET3L9IINGa0OjKkI+RuMVQ4YR0KFYX+7r3nOHYFFF6REvQ==",
        "shasum": "2618d0cab0c3b6234a8dd41437e217d18e483255",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.6.1-beta.4.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDcXtMCEv8mwmMNS/GjnhtfjTdidcoBnI5eXa18mRkkNQIhAPu04OO2JcpKTv1ecXjxXiymC9bzTm9ex85IHXVKcVM6"
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.6.1-beta.4.tgz_1505997354904_0.6917596531566232"
      },
      "directories": {}
    },
    "0.6.1-beta.3": {
      "name": "apollo-link-http",
      "version": "0.6.1-beta.3",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/httpLink.js",
      "jsnext:main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p ."
      },
      "dependencies": {
        "apollo-fetch": "^0.6.0",
        "graphql": "^0.10.5"
      },
      "peerDependencies": {
        "apollo-link": "^0.6.1-beta.3"
      },
      "devDependencies": {
        "@types/graphql": "0.10.2",
        "@types/jest": "^20.0.8",
        "apollo-link": "^0.6.1-beta.3",
        "browserify": "^14.4.0",
        "fetch-mock": "5.12.2",
        "graphql": "^0.11.3",
        "graphql-tag": "2.4.2",
        "jest": "^21.1.0",
        "rimraf": "2.6.1",
        "rollup": "^0.45.2",
        "ts-jest": "^21.0.1",
        "tslint": "5.7.0",
        "typescript": "2.5.1",
        "uglify-js": "^3.1.1"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ]
      },
      "_id": "apollo-link-http@0.6.1-beta.3",
      "_npmVersion": "5.4.2",
      "_nodeVersion": "8.1.2",
      "_npmUser": {
        "name": "jbaxleyiii",
        "email": "james@meteor.com"
      },
      "dist": {
        "integrity": "sha512-NnR/mGQQCFKeHiy0vR0tz3EZ5qsxn62nOMD1/lV6epnzdV0I4JEcljwJeCtV7IeQLGfOPDnxOjTC/iRwjzBqZA==",
        "shasum": "7a8fbd36bb72aee187c841d47de611ef3ac4cd74",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.6.1-beta.3.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDrXojB2ddnTN/nYIa+N/Z8IpBefTR5oNJ4FxbYtefpzAIgGqUoFxzgVF3MCwBn2yVFVmGoaZY+padL40ULjz4KWVM="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.6.1-beta.3.tgz_1506353446194_0.5320402591023594"
      },
      "directories": {}
    },
    "0.6.1-beta.5": {
      "name": "apollo-link-http",
      "version": "0.6.1-beta.5",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/httpLink.js",
      "jsnext:main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p ."
      },
      "dependencies": {
        "apollo-fetch": "^0.6.0",
        "graphql": "^0.10.5"
      },
      "peerDependencies": {
        "apollo-link": "^0.6.1-beta.5"
      },
      "devDependencies": {
        "@types/graphql": "0.10.2",
        "@types/jest": "^20.0.8",
        "apollo-link": "^0.6.1-beta.5",
        "browserify": "^14.4.0",
        "fetch-mock": "5.12.2",
        "graphql": "^0.11.3",
        "graphql-tag": "2.4.2",
        "jest": "^21.1.0",
        "rimraf": "2.6.1",
        "rollup": "^0.45.2",
        "ts-jest": "^21.0.1",
        "tslint": "5.7.0",
        "typescript": "2.5.1",
        "uglify-js": "^3.1.1"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ]
      },
      "_id": "apollo-link-http@0.6.1-beta.5",
      "_npmVersion": "5.4.2",
      "_nodeVersion": "8.1.2",
      "_npmUser": {
        "name": "jbaxleyiii",
        "email": "james@meteor.com"
      },
      "dist": {
        "integrity": "sha512-fgPQ6i3K2i7Bkyy+3ogpBuUvO7ixpP9U0k64ep3J4TiflZFGZQ1V5CjNN64IZX8PEP5/WQJMEzUcuoYzlM3b5A==",
        "shasum": "9f6456b61af2ee341cd10e549dd3e84bb2352318",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.6.1-beta.5.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDOQXSEh72jL1KmrfWfis3LMWB5Sj6YA584zX3plPlzegIgPvpf5ydtbKQxLXj4QXSoJe/16CjAcSGBoJOYPBqSNxI="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.6.1-beta.5.tgz_1506354387584_0.22978602955117822"
      },
      "directories": {}
    },
    "0.6.1-beta.6": {
      "name": "apollo-link-http",
      "version": "0.6.1-beta.6",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/httpLink.js",
      "jsnext:main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p ."
      },
      "dependencies": {
        "apollo-fetch": "^0.6.0",
        "graphql": "^0.10.5"
      },
      "peerDependencies": {
        "apollo-link": "^0.6.1-beta.6"
      },
      "devDependencies": {
        "@types/graphql": "0.10.2",
        "@types/jest": "^20.0.8",
        "apollo-link": "^0.6.1-beta.6",
        "browserify": "^14.4.0",
        "fetch-mock": "5.12.2",
        "graphql": "^0.11.3",
        "graphql-tag": "2.4.2",
        "jest": "^21.1.0",
        "rimraf": "2.6.1",
        "rollup": "^0.45.2",
        "ts-jest": "^21.0.1",
        "tslint": "5.7.0",
        "typescript": "2.5.1",
        "uglify-js": "^3.1.1"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ]
      },
      "_id": "apollo-link-http@0.6.1-beta.6",
      "_npmVersion": "5.4.2",
      "_nodeVersion": "8.1.2",
      "_npmUser": {
        "name": "jbaxleyiii",
        "email": "james@meteor.com"
      },
      "dist": {
        "integrity": "sha512-UWLYm83+iogSj/gd3s9MXO/LCoPvyfe9caBBtLxVnqWTYEufdZCw9fYJVIs5oFuWFCqjPbEjQ7yVqODuxT6h0g==",
        "shasum": "957403de25d489128f85dea2bc69bacea1d3cb60",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.6.1-beta.6.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCICSpkgduk/uFAf8goHn6rYboeiwXadb6sW/zHbUfS0VJAiEAsvpboNJVUxn2hFBq0E0DgRa77YBBGxTorvAyAGbPZHY="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.6.1-beta.6.tgz_1506618661883_0.07790609169751406"
      },
      "directories": {}
    },
    "0.7.0": {
      "name": "apollo-link-http",
      "version": "0.7.0",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/httpLink.js",
      "jsnext:main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p ."
      },
      "dependencies": {
        "apollo-fetch": "^0.6.0",
        "graphql": "^0.11.0"
      },
      "peerDependencies": {
        "apollo-link": "^0.7.0"
      },
      "devDependencies": {
        "@types/graphql": "0.11.4",
        "@types/jest": "21.1.1",
        "apollo-link": "^0.7.0",
        "browserify": "14.4.0",
        "fetch-mock": "5.12.2",
        "graphql": "0.11.6",
        "graphql-tag": "2.4.2",
        "jest": "21.2.1",
        "rimraf": "2.6.1",
        "rollup": "0.45.2",
        "ts-jest": "21.0.1",
        "tslint": "5.7.0",
        "typescript": "2.5.1",
        "uglify-js": "3.1.3"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ]
      },
      "_id": "apollo-link-http@0.7.0",
      "_npmVersion": "5.4.2",
      "_nodeVersion": "8.1.2",
      "_npmUser": {
        "name": "jbaxleyiii",
        "email": "james@meteor.com"
      },
      "dist": {
        "integrity": "sha512-BCYxduD5oHfsiWz15pcjooyAsP4E6gmL1BH4z4ikwU6I++QhbIBt5zH+ezUQcOKcozNY7+ZfcA4oaRud9FbkbA==",
        "shasum": "cf75e9e2537d785deefff2cd1ae2ff0dc1c88300",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.7.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIB2fmzdBwF2VqRHwkwmGuXa0Xqg5SdWfPorYb7cJpBIzAiB92svu3xOch0Li+LOH3DN2cmOD/12MYYOSeSUEqGma8A=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.7.0.tgz_1507038117244_0.6829393380321562"
      },
      "directories": {}
    },
    "0.8.0": {
      "name": "apollo-link-http",
      "version": "0.8.0",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/httpLink.js",
      "jsnext:main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p ."
      },
      "peerDependencies": {
        "apollo-link": "^0.8.0",
        "graphql": "^0.11.0"
      },
      "devDependencies": {
        "@types/graphql": "0.11.5",
        "@types/jest": "21.1.2",
        "apollo-fetch": "^0.6.0",
        "apollo-link": "^0.8.0",
        "browserify": "14.4.0",
        "fetch-mock": "5.13.1",
        "graphql": "0.11.7",
        "graphql-tag": "2.4.2",
        "jest": "21.2.1",
        "rimraf": "2.6.1",
        "rollup": "0.45.2",
        "ts-jest": "21.1.2",
        "tslint": "5.7.0",
        "typescript": "2.5.1",
        "uglify-js": "3.1.3"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ]
      },
      "_id": "apollo-link-http@0.8.0",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.1.2",
      "_npmUser": {
        "name": "jbaxleyiii",
        "email": "james@meteor.com"
      },
      "dist": {
        "integrity": "sha512-hOmJojfaiiOCdf1+YbOwYgmG5HG3J3dh2PhN+bRNYbMuMXNP5VUvR4UJRftr/vIL3m4fpd+HB2p+Gyau8dAstg==",
        "shasum": "df02bccf3656f7db0aa196cc9e126dcbd4b47a0f",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.8.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIE6ES+YlLojajto2sAc0Uoi2DGVqJbw1ovfehsxJe6nmAiEAxXaqARZX9qk2FgmsR3919WE9COPfrejqptWzLYG+OCo="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-0.8.0.tgz_1507926349861_0.7497554558794945"
      },
      "directories": {}
    },
    "1.0.0": {
      "name": "apollo-link-http",
      "version": "1.0.0",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/httpLink.js",
      "jsnext:main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p ."
      },
      "peerDependencies": {
        "apollo-link": "^1.0.0",
        "graphql": "^0.11.0"
      },
      "devDependencies": {
        "@types/graphql": "0.11.5",
        "@types/jest": "21.1.4",
        "apollo-fetch": "0.6.0",
        "apollo-link": "^1.0.0",
        "browserify": "14.5.0",
        "fetch-mock": "5.13.1",
        "graphql": "0.11.7",
        "graphql-tag": "2.5.0",
        "jest": "21.2.1",
        "rimraf": "2.6.1",
        "rollup": "0.45.2",
        "ts-jest": "21.1.3",
        "tslint": "5.8.0",
        "typescript": "2.5.1",
        "uglify-js": "3.1.5"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ]
      },
      "_id": "apollo-link-http@1.0.0",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.7.0",
      "_npmUser": {
        "name": "jbaxleyiii",
        "email": "james@meteor.com"
      },
      "dist": {
        "integrity": "sha512-lwJE+N0qeluChjya807T0s7tWgNdXXkxKjOBLFL7Rd819mv5HpJ+liQYOsK7B2bBrjo8TlIhswHKe0ifKmSy4w==",
        "shasum": "0450be89ae7e080722383c302f07135d364bc749",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.0.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCKvV4bUFaRLz08A+MD/1llNHIOy2EXls0ju1uAjLlKBAIhAJkAy/ymf4f/uc4RPvfTp3gRnaZGKZeJsCH1jIuPCPI9"
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-1.0.0.tgz_1508870697180_0.8550013361964375"
      },
      "directories": {}
    },
    "1.1.0": {
      "name": "apollo-link-http",
      "version": "1.1.0",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/httpLink.js",
      "jsnext:main": "./lib/httpLink.js",
      "typings": "./lib/httpLink.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p ."
      },
      "peerDependencies": {
        "apollo-link": "^1.0.0",
        "graphql": "^0.11.0"
      },
      "devDependencies": {
        "@types/graphql": "0.11.5",
        "@types/jest": "21.1.5",
        "apollo-fetch": "0.6.0",
        "apollo-link": "^1.0.0",
        "browserify": "14.5.0",
        "fetch-mock": "5.13.1",
        "graphql": "0.11.7",
        "graphql-tag": "2.5.0",
        "jest": "21.2.1",
        "rimraf": "2.6.1",
        "rollup": "0.45.2",
        "ts-jest": "21.1.4",
        "tslint": "5.8.0",
        "typescript": "2.6.1",
        "uglify-js": "3.1.6"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ]
      },
      "_id": "apollo-link-http@1.1.0",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.1.2",
      "_npmUser": {
        "name": "jbaxleyiii",
        "email": "james@meteor.com"
      },
      "dist": {
        "integrity": "sha512-K4ObtVTj6/15tqFgFEThBEFLWzVSKFq9bHvFvO099h+34qreTKSJ75rUFx20Aso0Kbtlr9aT3WBqUEjuiqLcCA==",
        "shasum": "a85cc43d9a5286bb54ac32213f7a16bef3554ae4",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.1.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDVg/PVPYea4QjaxymOgKvNezJXoUghTtIZMbDujsofmwIhAMNqfVYhKDXJNc5237cv4c0Rnhr43ki+P4U0C1+V5lTx"
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-1.1.0.tgz_1509567505153_0.938348724739626"
      },
      "directories": {}
    },
    "1.2.0": {
      "name": "apollo-link-http",
      "version": "1.2.0",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p ."
      },
      "peerDependencies": {
        "apollo-link": "^1.0.3",
        "graphql": "^0.11.0"
      },
      "devDependencies": {
        "@types/graphql": "0.11.6",
        "@types/jest": "21.1.6",
        "apollo-fetch": "0.6.0",
        "apollo-link": "^1.0.3",
        "browserify": "14.5.0",
        "fetch-mock": "5.13.1",
        "graphql": "0.11.7",
        "graphql-tag": "2.5.0",
        "jest": "21.2.1",
        "rimraf": "2.6.1",
        "rollup": "0.51.5",
        "ts-jest": "21.2.2",
        "tslint": "5.8.0",
        "typescript": "2.6.1",
        "uglify-js": "3.1.9"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ]
      },
      "_id": "apollo-link-http@1.2.0",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.9.0",
      "_npmUser": {
        "name": "jbaxleyiii",
        "email": "james@meteor.com"
      },
      "dist": {
        "integrity": "sha512-yuVxqmj+uKhtO2MlE/9j97cKmmtSqfpA74V30EfaosPpXu+O7LDKEZ9ZlFaT7ghcunoYEnZtPuLHRA6AVJ1PnA==",
        "shasum": "48464c2ebfa6474f7a89908696827d66b2deb5cc",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.2.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD8L6/N+DS4fFCboOOBTrm38sVA0gPsikdw1OaCFnbrigIhAIFZZgoq1HQiCnnP9Uj/ZClaG8EZ3BrhuwDZdD2RVnss"
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-1.2.0.tgz_1510761308961_0.3094578597228974"
      },
      "directories": {}
    },
    "1.3.0": {
      "name": "apollo-link-http",
      "version": "1.3.0",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p ."
      },
      "dependencies": {
        "apollo-link": "^1.0.4"
      },
      "peerDependencies": {
        "graphql": "^0.11.0"
      },
      "devDependencies": {
        "@types/graphql": "0.11.7",
        "@types/jest": "21.1.8",
        "apollo-fetch": "0.6.0",
        "browserify": "14.5.0",
        "fetch-mock": "5.13.1",
        "graphql": "0.11.7",
        "graphql-tag": "2.5.0",
        "jest": "21.2.1",
        "object-to-querystring": "^1.0.4",
        "rimraf": "2.6.1",
        "rollup": "0.52.0",
        "ts-jest": "21.2.3",
        "tslint": "5.8.0",
        "typescript": "2.6.2",
        "uglify-js": "3.2.0"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ]
      },
      "_id": "apollo-link-http@1.3.0",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.9.0",
      "_npmUser": {
        "name": "jbaxleyiii",
        "email": "james@meteor.com"
      },
      "dist": {
        "integrity": "sha512-d4a4BDQckkTYlLBCgw3aw4bL1SLmLn+ebJZcM7hPSatkGrH6lwDposoj6qeYyGrgl/C2zUuRKxFt7cNTVrmUSw==",
        "shasum": "ce0f79b20e0d31acec1e38146c96fbe541c567f7",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.3.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCei0FVnJO6uTMYn835/siFicTIOMuiQQ1AD8zUfPeDdgIgTngPhza5npSHvbz7/zCQNl1goaWbh8dSYKJr0HlBdRM="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-1.3.0.tgz_1512052424521_0.9474317864514887"
      },
      "directories": {}
    },
    "1.3.1": {
      "name": "apollo-link-http",
      "version": "1.3.1",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p ."
      },
      "dependencies": {
        "apollo-link": "^1.0.6"
      },
      "peerDependencies": {
        "graphql": "^0.11.0"
      },
      "devDependencies": {
        "@types/graphql": "0.11.7",
        "@types/jest": "21.1.8",
        "apollo-fetch": "0.7.0",
        "browserify": "14.5.0",
        "fetch-mock": "5.13.1",
        "graphql": "0.11.7",
        "graphql-tag": "2.5.0",
        "jest": "21.2.1",
        "object-to-querystring": "1.0.4",
        "rimraf": "2.6.1",
        "rollup": "0.52.1",
        "ts-jest": "21.2.4",
        "tslint": "5.8.0",
        "typescript": "2.6.2",
        "uglify-js": "3.2.1"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ]
      },
      "_id": "apollo-link-http@1.3.1",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.9.0",
      "_npmUser": {
        "name": "jbaxleyiii",
        "email": "james@meteor.com"
      },
      "dist": {
        "integrity": "sha512-41L2NA49h8FGaKlQSnQbSrMkO0XHfxGD4fqkLve12OWmqCJaoGb/5Qn+OFiAZm/E8e/MiMJ+6+4Agutw6REu2g==",
        "shasum": "c58aee1a27d1bf43dc9e9c634b8a91c68d21a082",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.3.1.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC7sNrKwIGbWKNsq9V9+WJ97nMzML+vDwhi76/N/HVmqwIhAK6SOdcmg+0ZacSuvDtMzVYZ5Zl1XThkQP3VmSP4fiFU"
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-1.3.1.tgz_1512734610232_0.8966210864018649"
      },
      "directories": {}
    },
    "1.3.2": {
      "name": "apollo-link-http",
      "version": "1.3.2",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p ."
      },
      "dependencies": {
        "apollo-link": "^1.0.7"
      },
      "peerDependencies": {
        "graphql": "^0.11.0"
      },
      "devDependencies": {
        "@types/graphql": "0.11.7",
        "@types/jest": "21.1.8",
        "apollo-fetch": "0.7.0",
        "browserify": "14.5.0",
        "fetch-mock": "5.13.1",
        "graphql": "0.12.3",
        "graphql-tag": "2.6.0",
        "jest": "21.2.1",
        "object-to-querystring": "1.0.4",
        "rimraf": "2.6.1",
        "rollup": "0.52.2",
        "ts-jest": "21.2.4",
        "tslint": "5.8.0",
        "typescript": "2.6.2",
        "uglify-js": "3.2.2"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ]
      },
      "_id": "apollo-link-http@1.3.2",
      "_npmVersion": "5.3.0",
      "_nodeVersion": "8.2.1",
      "_npmUser": {
        "name": "mdg",
        "email": "npm@meteor.com"
      },
      "dist": {
        "integrity": "sha512-yFSVoSZgSbJjyZzKqcxf3GTuCCLRLJ1m1V/NHnN0xvLpuNBx24MeBf0OnY5/rHIyzH/nm4HY7hhc0eZockdyIA==",
        "shasum": "63537ee5ecf9c004efb0317f1222b7dbc6f21559",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.3.2.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDnvJ56lDRCiMSjVel2X82nqPi3Sa6cURRuP/Ep6NRd3wIhAOkFoLhqhtySRBlaJ1iM2sB9f87catgpoVTrEociBt60"
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http-1.3.2.tgz_1513616986327_0.41262468812055886"
      },
      "directories": {}
    },
    "1.3.3": {
      "name": "apollo-link-http",
      "version": "1.3.3",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.1.0"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0"
      },
      "devDependencies": {
        "@types/graphql": "0.12.3",
        "@types/jest": "21.1.10",
        "apollo-fetch": "0.7.0",
        "browserify": "14.5.0",
        "fetch-mock": "5.13.1",
        "graphql": "0.13.0",
        "graphql-tag": "2.7.3",
        "jest": "21.2.1",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.55.3",
        "ts-jest": "21.2.4",
        "tslint": "5.9.1",
        "typescript": "2.7.1",
        "uglify-js": "3.3.9"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ]
      },
      "_id": "apollo-link-http@1.3.3",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "9.4.0",
      "_npmUser": {
        "name": "jbaxleyiii",
        "email": "james@meteor.com"
      },
      "dist": {
        "integrity": "sha512-z8/uKJ8rfjWlDt49dBrJ7a7w3vEPqWHIepwS9yZMGbhxYD6RoxdKELcBjJLQ9iSHkcRqamCCnhZmiEZUeXfXvA==",
        "shasum": "cb792c73266607e6361c8c1cc4dd42d405ca08f1",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.3.3.tgz",
        "fileCount": 16,
        "unpackedSize": 83765,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC6AhcUSvWhtXYQPqFxfdmXa1qFQjyNyOc9TfXR+Yvl8AIhAJYQGJ43rWKmaNUqHyqsSbCr2bejWSVFugIKX/jYuSan"
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.3.3_1518112945360_0.054568604795650844"
      },
      "_hasShrinkwrap": false
    },
    "1.4.0": {
      "name": "apollo-link-http",
      "version": "1.4.0",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.0",
        "apollo-link-http-common": "^0.2.1"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0"
      },
      "devDependencies": {
        "@types/graphql": "0.12.4",
        "@types/jest": "21.1.10",
        "apollo-fetch": "0.7.0",
        "browserify": "16.1.0",
        "fetch-mock": "6.0.0",
        "graphql": "0.13.1",
        "graphql-tag": "2.7.3",
        "jest": "21.2.1",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.56.2",
        "ts-jest": "21.2.4",
        "tslint": "5.9.1",
        "typescript": "2.7.2",
        "uglify-js": "3.3.11"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ]
      },
      "_id": "apollo-link-http@1.4.0",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "evanshauser",
        "email": "evanshauser@gmail.com"
      },
      "dist": {
        "integrity": "sha512-IeTi3efaP99cAhNNsNPphtffkufPwsq1RRK47jYXAO0RNnkH6RkRQQYLgf5SBHoEFiRjx5TpLOvwp35GPbE98A==",
        "shasum": "63fdaeb63291dd47e0404591fd0a0cf3ca67f8a3",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.4.0.tgz",
        "fileCount": 17,
        "unpackedSize": 77226,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEtjAn7UBpQqDA6LStI4dORob7jjE+7rRiOIeNx8OGpyAiEAyYLFpA6expaeRaI0y0XWg0T6bN9/2NndVU6JNoDYj1A="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.4.0_1519172418319_0.08908473490525148"
      },
      "_hasShrinkwrap": false
    },
    "1.5.0": {
      "name": "apollo-link-http",
      "version": "1.5.0",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.0",
        "apollo-link-http-common": "^0.2.1"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0"
      },
      "devDependencies": {
        "@types/graphql": "0.12.4",
        "@types/jest": "21.1.10",
        "apollo-fetch": "0.7.0",
        "browserify": "16.1.0",
        "fetch-mock": "6.0.0",
        "graphql": "0.13.1",
        "graphql-tag": "2.7.3",
        "jest": "21.2.1",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.56.2",
        "ts-jest": "21.2.4",
        "tslint": "5.9.1",
        "typescript": "2.7.2",
        "uglify-js": "3.3.11"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ]
      },
      "_id": "apollo-link-http@1.5.0",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "evanshauser",
        "email": "evanshauser@gmail.com"
      },
      "dist": {
        "integrity": "sha512-Gvoh2JT0AMte3zH/HqTgeHKm1xQey/QEsAQo34lTQetOMinpGgJ6zg6GVRShzVneJUZkenKTLju9fpW44b8KSw==",
        "shasum": "6a45407fae655996a668ae1a1ab528569b6ba61b",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.0.tgz",
        "fileCount": 17,
        "unpackedSize": 83680,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFZSbz5YadxvbbCb+tFY3RcPgFX3pfGaxXBZGCteQy+YAiAJC3WELQ3e38wfAq9kYgxut6vtATwBUivIH44K+LT1NQ=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.0_1519326864045_0.497907348435765"
      },
      "_hasShrinkwrap": false
    },
    "1.5.1": {
      "name": "apollo-link-http",
      "version": "1.5.1",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.1",
        "apollo-link-http-common": "^0.2.2"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0"
      },
      "devDependencies": {
        "@types/graphql": "0.12.4",
        "@types/jest": "21.1.10",
        "apollo-fetch": "0.7.0",
        "browserify": "16.1.0",
        "fetch-mock": "6.0.0",
        "graphql": "0.13.1",
        "graphql-tag": "2.7.3",
        "jest": "21.2.1",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.56.2",
        "ts-jest": "21.2.4",
        "tslint": "5.9.1",
        "typescript": "2.7.2",
        "uglify-js": "3.3.11"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ]
      },
      "_id": "apollo-link-http@1.5.1",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "evanshauser",
        "email": "evanshauser@gmail.com"
      },
      "dist": {
        "integrity": "sha512-6qNZexjSxHPLh4/DHgpp2vriApaiy0rpCs9JarJFZ8WhqsYpAiJFkd+5akQX36/CIJkrDv7YD2e6YW10A0uvWg==",
        "shasum": "1cae092e994d86659f88cc418ccd10a914b312d3",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.1.tgz",
        "fileCount": 17,
        "unpackedSize": 83838,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAbSHK/M0RM9D+0SQbwblvdS4c3sfp78hI/Bet052KfaAiEAlm9qz9yo6kaMC3PuuaWHKw3jGHhc9rm/0yrjsM3p2Jg="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.1_1519351288410_0.609327050837464"
      },
      "_hasShrinkwrap": false
    },
    "1.5.2": {
      "name": "apollo-link-http",
      "version": "1.5.2",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.1",
        "apollo-link-http-common": "^0.2.2"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0"
      },
      "devDependencies": {
        "@types/graphql": "0.12.4",
        "@types/jest": "21.1.10",
        "apollo-fetch": "0.7.0",
        "browserify": "16.1.0",
        "fetch-mock": "6.0.0",
        "graphql": "0.13.1",
        "graphql-tag": "2.7.3",
        "jest": "21.2.1",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.56.2",
        "ts-jest": "21.2.4",
        "tslint": "5.9.1",
        "typescript": "2.7.2",
        "uglify-js": "3.3.11"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ]
      },
      "_id": "apollo-link-http@1.5.2",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "9.4.0",
      "_npmUser": {
        "name": "jbaxleyiii",
        "email": "james@meteor.com"
      },
      "dist": {
        "integrity": "sha512-TVOslggUbEdxuKYScqZ6PcMm85CkO93PDQpcdq1HASnHHEnK6TkR37hfGhZ8tGHMfxsmTYwH/A76a9AVPN3B4w==",
        "shasum": "cac4202b7f802869f892397f989d002c4ebb3b56",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.2.tgz",
        "fileCount": 17,
        "unpackedSize": 86018,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDyX7OQPHxDm+cuHhrxQZgwqOBrZ1BEWGFaDrk8Ncw7sAiA5n+CXw1kkINIFYExcPsvuHrFj7et9E0sI+2jcC4KRAw=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.2_1519698335202_0.2119545130993412"
      },
      "_hasShrinkwrap": false
    },
    "1.5.3": {
      "name": "apollo-link-http",
      "version": "1.5.3",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.1",
        "apollo-link-http-common": "^0.2.3"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0"
      },
      "devDependencies": {
        "@types/graphql": "0.12.4",
        "@types/jest": "21.1.10",
        "apollo-fetch": "0.7.0",
        "browserify": "16.1.0",
        "fetch-mock": "6.0.0",
        "graphql": "0.13.1",
        "graphql-tag": "2.7.3",
        "jest": "21.2.1",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.56.2",
        "ts-jest": "21.2.4",
        "tslint": "5.9.1",
        "typescript": "2.7.2",
        "uglify-js": "3.3.11"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "<rootDir>/node_modules/ts-jest/preprocessor.js"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ]
      },
      "_id": "apollo-link-http@1.5.3",
      "_npmVersion": "5.7.1",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "evanshauser",
        "email": "evanshauser@gmail.com"
      },
      "dist": {
        "integrity": "sha512-t49wBXzdXpVdiqr82Lj0x6hORVVtIQQ5hLfVKjmQXiA/uv0o0Np8mAcOBZRYJvpVRHkaLvv5w/4MRbc8h5UGuQ==",
        "shasum": "3aa0d3ecfe5666ef0c360f359c425ff6ea1d285b",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.3.tgz",
        "fileCount": 17,
        "unpackedSize": 86251,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDfv0zNX/dGREnkhagm4M/MSkHCPnvadwxtP83QNfZl+AiEAhwhS813OY4v4pFwKcymy+T7kJ9CsPMte9ihy8vtaGaE="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.3_1520272205898_0.514898944488001"
      },
      "_hasShrinkwrap": false
    },
    "1.5.4": {
      "name": "apollo-link-http",
      "version": "1.5.4",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.2",
        "apollo-link-http-common": "^0.2.4"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0"
      },
      "devDependencies": {
        "@types/graphql": "0.12.6",
        "@types/jest": "22.2.2",
        "apollo-fetch": "0.7.0",
        "browserify": "16.1.1",
        "fetch-mock": "6.0.0",
        "graphql": "0.13.2",
        "graphql-tag": "2.8.0",
        "jest": "22.4.3",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.57.1",
        "ts-jest": "21.2.4",
        "tslint": "5.9.1",
        "typescript": "2.7.2",
        "uglify-js": "3.3.16"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ]
      },
      "_id": "apollo-link-http@1.5.4",
      "_npmVersion": "5.7.1",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "evanshauser",
        "email": "evanshauser@gmail.com"
      },
      "dist": {
        "integrity": "sha512-e9Ng3HfnW00Mh3TI6DhNRfozmzQOtKgdi+qUAsHBOEcTP0PTAmb+9XpeyEEOueLyO0GXhB92HUCIhzrWMXgwyg==",
        "shasum": "b80b7b4b342c655b6a5614624b076a36be368f43",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.4.tgz",
        "fileCount": 17,
        "unpackedSize": 95247,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFbwzKn0Di5M6kgN8AymxdvyePMe/IS5dlyy+HF4VJU0AiBdzu+9j9KLSi4wOFkfyLZX5geGrkYxVqVVqQbUyLsE7g=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.4_1523556784071_0.4097358257653263"
      },
      "_hasShrinkwrap": false
    },
    "0.0.0-alpha.0": {
      "name": "apollo-link-http",
      "version": "0.0.0-alpha.0",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.2",
        "apollo-link-http-common": "^0.2.4",
        "text-encoding": "^0.6.4"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0"
      },
      "devDependencies": {
        "@types/graphql": "0.12.6",
        "@types/jest": "22.2.3",
        "@types/text-encoding": "0.0.33",
        "apollo-fetch": "0.7.0",
        "browserify": "16.2.2",
        "fetch-mock": "6.5.0",
        "graphql": "0.13.2",
        "graphql-tag": "2.9.2",
        "jest": "22.4.4",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.62.0",
        "ts-jest": "22.4.6",
        "tslint": "5.11.0",
        "typescript": "2.9.2",
        "uglify-js": "3.4.5"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ]
      },
      "readme": "---\ntitle: apollo-link-http\ndescription: Get GraphQL results over a network using HTTP fetch.\n---\n\nThe http link is the most common Apollo Link, a system of modular components\nfor GraphQL networking. If you haven't done so already, [read the Apollo Link\ndocs](https://www.apollographql.com/docs/link/#usage) to learn about the Apollo\nLink ecosystem and how to use this link with libraries like Apollo Client and\ngraphql-tools, or as a standalone client.\n\nThe http link is a terminating link that fetches GraphQL results from a GraphQL\nendpoint over an http connection. The http link supports both POST and GET\nrequests with the ability change the http options on a per query basis. This\ncan be used for authentication, persisted queries, dynamic uris, and other\ngranular updates.\n\n<h2 id=\"usage\">Usage</h2>\n\nImport and initialize this link in just two lines:\n\n```js\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst link = createHttpLink({ uri: \"/graphql\" });\n```\n\n<h2 id=\"options\">Options</h2>\n\nHTTP Link takes an object with some options on it to customize the behavior of the link. If your server supports it, the HTTP link can also send over metadata about the request in the extensions field. To enable this, pass `includeExtensions` as true. The options you can pass are outlined below:\n\n* `uri`: the URI key is a string endpoint or function resolving to an endpoint -- will default to \"/graphql\" if not specified\n* `includeExtensions`: allow passing the extensions field to your graphql server, defaults to false\n* `fetch`: a `fetch` compatible API for making a request\n* `headers`: an object representing values to be sent as headers on the request\n* `credentials`: a string representing the credentials policy you want for the fetch call\n* `fetchOptions`: any overrides of the fetch options argument to pass to the fetch call\n* `useGETForQueries`: set to `true` to use the HTTP `GET` method for queries (but not for mutations)\n\n<h2 id=\"fetch\">Fetch polyfill</h2>\n\nThe HTTP Link relies on having `fetch` present in your runtime environment. If you are running on react-native, or modern browsers, this should be no problem. If you are targeting an environment without `fetch` such as older browsers or the server, you will need to pass your own `fetch` to the link through the options. We recommend [`unfetch`](https://github.com/developit/unfetch) for older browsers and [`node-fetch`](https://github.com/bitinn/node-fetch) for running in Node.\n\n<h2 id=\"context\">Context</h2>\n\nThe Http Link uses the `headers` field on the context to allow passing headers to the HTTP request. It also supports the `credentials` field for defining credentials policy, `uri` for changing the endpoint dynamically, and `fetchOptions` to allow generic fetch overrides (i.e. `method: \"GET\"`). These options will override the same key if passed when creating the the link.\n\nNote that if you set `fetchOptions.method` to `GET`, the http link will follow the [standard GraphQL HTTP GET encoding](http://graphql.org/learn/serving-over-http/#get-request): the query, variables, operation name, and extensions will be passed as query parameters rather than in the HTTP request body. If you want mutations to continue to be sent as non-idempotent `POST` requests, set the top-level `useGETForQueries` option to `true` instead of setting `fetchOptions.method` to `GET`.\n\nThis link also attaches the response from the `fetch` operation on the context as `response` so you can access it from within another link.\n\n* `headers`: an object representing values to be sent as headers on the request\n* `credentials`: a string representing the credentials policy you want for the fetch call\n* `uri`: a string of the endpoint you want to fetch from\n* `fetchOptions`: any overrides of the fetch options argument to pass to the fetch call\n* `response`: this is the raw response from the fetch request after it is made.\n* `http`: this is an object to control fine grained aspects of the http link itself, such as persisted queries (see below)\n\n<h3 id=\"persisted-queries\">Persisted queries</h3>\n\nThe http link supports an advanced GraphQL feature called persisted queries. This allows you to not send the stringified query over the wire, but instead send some kind of identifier of the query. To support this you need to attach the id somewhere to the extensions field and pass the following options to the context:\n\n```js\noperation.setContext({\n  http: {\n    includeExtensions: true,\n    includeQuery: false,\n  }\n})\n```\n\nThe `http` object on context currently supports two keys:\n\n* `includeExtensions`: Send the extensions object for this request.\n* `includeQuery`: Don't send the `query` field for this request.\n\nOne way to use persisted queries is with [apollo-link-persisted-queries](https://github.com/apollographql/apollo-link-persisted-queries) and [Apollo Engine](https://www.apollographql.com/docs/engine/auto-persisted-queries.html).\n\n<h3 id=\"passing-context\">Passing context per query</h3>\n\nApollo Client supports passing context separately for every query, so you can do things like pass a special header for a single query invocation if you need to.\n\n```js\nimport HttpLink from \"apollo-link-http\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: \"/graphql\" }),\n  cache: new InMemoryCache()\n});\n\n// a query with apollo-client\nclient.query({\n  query: MY_QUERY,\n  context: {\n    // example of setting the headers with context per operation\n    headers: {\n      special: \"Special header value\"\n    }\n  }\n});\n```\n\n<h2 id=\"error\">Errors</h2>\n\nThe Http Link draws a distinction between client, server and GraphQL errors. Server errors can occur in three different scenarios: parse, network and data errors. [`apollo-link-error`](error.html) provides an [interface](error.html#Usage) for handling these errors. This list describes the scenarios that cause different errors:\n\n* _Client parse error_: the request body is not-serializable due to circular references for example\n* _Server parse error_: the response from the server cannot be parsed ([response.json()](https://developer.mozilla.org/en-US/docs/Web/API/Body/json))\n* _Server network error_: the response has a status of >= 300\n* _Server data error_: the parse request does not contain `data` or `errors`\n* _GraphQL error_: an objects in the `errors` array for a 200 level status\n\nSince many server implementations can return a valid GraphQL result on a server network error, the thrown `Error` object contains the parsed server result. A server data error also receives the parsed result.\n\nThe table below provides a summary of error, `Observable` method called by the HTTP link, and type of error thrown for each failure:\n\n| Error          | Callback | Error Type         |\n| -------------- | :------: | ------------------ |\n| Client Parse   | `error`  | `ClientParseError` |\n| Server Parse   | `error`  | `ServerParseError` |\n| Server Network | `error`  | `ServerError`      |\n| Server Data    | `error`  | `ServerError`      |\n| GraphQL Error  |  `next`  | `Object`           |\n\nAll error types inherit the `name`, `message`, and nullable `stack` properties from the generic javascript [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n```js\n//type ClientParseError\n{\n  parseError: Error;                // Error returned from response.json()\n};\n\n//type ServerParseError\n{\n  response: Response;               // Object returned from fetch()\n  statusCode: number;               // HTTP status code\n  bodyText: string                  // text that was returned from server\n};\n\n//type ServerError\n{\n  result: Record<string, any>;      // Parsed object from server response\n  response: Response;               // Object returned from fetch()\n  statusCode: number;               // HTTP status code\n};\n```\n\n<h2 id=\"custom\">Custom fetching</h2>\n\nYou can use the `fetch` option when creating an http-link to do a lot of custom networking. This is useful if you want to modify the request based on the calculated headers  or calculate the uri based on the operation:\n\n<h3 id=\"custom-auth\">Custom auth</h3>\n\n```js\nconst customFetch = (uri, options) => {\n  const { header } = Hawk.client.header(\n    \"http://example.com:8000/resource/1?b=1&a=2\",\n    \"POST\",\n    { credentials: credentials, ext: \"some-app-data\" }\n  );\n  options.headers.Authorization = header;\n  return fetch(uri, options);\n};\n\nconst link = createHttpLink({ fetch: customFetch });\n```\n\n<h3 id=\"dynamic-uri\">Dynamic URI</h3>\n\n```js\nconst customFetch = (uri, options) => {\n  const { operationName } = JSON.parse(options.body);\n  return fetch(`${uri}/graph/graphql?opname=${operationName}`, options);\n};\n\nconst link = createHttpLink({ fetch: customFetch });\n```\n\n<h2 id=\"upgrading\">Upgrade: Apollo Client 1.0</h2>\n\nIf you previously used either `apollo-fetch` or `apollo-client`'s `createNetworkInterface`, you will need to change the way `use` and `useAfter` are implemented in your app. Both can be implemented by writing a custom link. It's important to note that regardless of whether you're adding middleware or afterware, your Http link will always be last in the chain since it's a terminating link.\n\n#### Middleware\n\n_Before_\n\n```js\n// before\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.use([\n  {\n    applyMiddleware(req, next) {\n      if (!req.options.headers) {\n        req.options.headers = {}; // Create the header object if needed.\n      }\n      req.options.headers[\"authorization\"] = localStorage.getItem(\"token\")\n        ? localStorage.getItem(\"token\")\n        : null;\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst middlewareLink = new ApolloLink((operation, forward) => {\n  operation.setContext({\n    headers: {\n      authorization: localStorage.getItem(\"token\") || null\n    }\n  });\n  return forward(operation);\n});\n\n// use with apollo-client\nconst link = middlewareLink.concat(httpLink);\n```\n\n#### Afterware (error)\n\n_Before_\n\n```js\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\nimport { logout } from \"./logout\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.useAfter([\n  {\n    applyAfterware({ response }, next) {\n      if (response.statusCode === 401) {\n        logout();\n      }\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\n\nimport { logout } from \"./logout\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst errorLink = onError(({ networkError }) => {\n  if (networkError.status === 401) {\n    logout();\n  }\n});\n\n// use with apollo-client\nconst link = errorLink.concat(httpLink);\n```\n\n#### Afterware (data manipulation)\n\n_Before_\n\n```js\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.useAfter([\n  {\n    applyAfterware({ response }, next) {\n      if (response.data.user.lastLoginDate) {\n        response.data.user.lastLoginDate = new Date(\n          response.data.user.lastLoginDate\n        );\n      }\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst addDatesLink = new ApolloLink((operation, forward) => {\n  return forward(operation).map(response => {\n    if (response.data.user.lastLoginDate) {\n      response.data.user.lastLoginDate = new Date(\n        response.data.user.lastLoginDate\n      );\n    }\n    return response;\n  });\n});\n\n// use with apollo-client\nconst link = addDatesLink.concat(httpLink);\n```\n",
      "readmeFilename": "README.md",
      "_id": "apollo-link-http@0.0.0-alpha.0",
      "_npmVersion": "6.1.0",
      "_nodeVersion": "10.6.0",
      "_npmUser": {
        "name": "mdg",
        "email": "npm@meteor.com"
      },
      "dist": {
        "integrity": "sha512-RYk77hsoVIv3mM0ViG+acJW26ihrEI8wabvgdnf/fNtHfKJoQ+7UsHRW6ys1okB+bw4Tb5zDLcrWvTEndtYp4g==",
        "shasum": "e2cbe23d30f30611fffc251e01d2cb0cfcf223a8",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-0.0.0-alpha.0.tgz",
        "fileCount": 17,
        "unpackedSize": 105506,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbTjqCCRA9TVsSAnZWagAA38sP+gJ+2iVrElqTjWIUJh+s\nCM17KQXgX489XfTPlSZwNEVClmdBiOGsD8ynVKE9feuBOwiSWcHbESWwUa0/\nbD8Z+mgV11ZgP2ehKzgIDAxLzJYLFSbV83Qnfku8FqCkmKTW+GDTcCwOJr4I\ndnJID8W+PiF8JtA4f5PPHhDgAinW6PxQeYoP+zq9lZIViSrVt7RMIKDEHXGS\nkvCuLXM6stGRuKaKsORZjdTQkvfLYBSIAtgeEwsrAAYsDf5bEzdrNc1NDaT3\niKgkXdzTCzYPSffnjDnXEn4yuui9Nn3J9BWcYeKQiPE3Z0UziOUZIDW4B64d\nOWecfNwGzautKtBgbBUi5oW/O3eIkKsTvFLJzlMhy4mvO4UnrfHeMKESkas+\nqRa5Jt9Iw9HT2THasnga0wnEq9Egl81tpufeKpXcWMPESifiIxz1mxhIKbMc\n504SznCZlEfLRw4ntfuu51zLqeaKwtu64T0vJp88V7StSSBTBDkhuRvfznXq\nGebijCYrIN6din5HnqOFX+rprpnNHRiK4WZpHBi/1lziOC0LHqAajlN1F4RZ\nG0MLnZB4cuZZsKJI04eMpAbbekz0GCSME1HxM5qHcb2whdQ3jO5zsWiKF/TH\n4wVQJureMi3POLIKExPmZUxxir9Bsh+D5t/GhD6m10IMl59D6QJMB94nIxaT\nwBXN\r\n=q6pv\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCqJ+eIzO7Qn9qdHdVIH9Eeq9Vf41iY80riqHYz6WYR+QIgesTFD9OHjUR3MLaSQBXTTsEi+jDvkLcIuF/6S5I4dSY="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_0.0.0-alpha.0_1531853442748_0.2808249122781159"
      },
      "_hasShrinkwrap": false
    },
    "1.6.0-alpha.0": {
      "name": "apollo-link-http",
      "version": "1.6.0-alpha.0",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.2",
        "apollo-link-http-common": "^0.2.4",
        "text-encoding": "^0.6.4"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0"
      },
      "devDependencies": {
        "@types/graphql": "0.12.6",
        "@types/jest": "22.2.3",
        "@types/text-encoding": "0.0.33",
        "apollo-fetch": "0.7.0",
        "browserify": "16.2.2",
        "fetch-mock": "6.5.1",
        "graphql": "0.13.2",
        "graphql-tag": "2.9.2",
        "jest": "22.4.4",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.62.0",
        "ts-jest": "22.4.6",
        "tslint": "5.11.0",
        "typescript": "2.9.2",
        "uglify-js": "3.4.5"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ]
      },
      "readme": "---\ntitle: apollo-link-http\ndescription: Get GraphQL results over a network using HTTP fetch.\n---\n\nThe http link is the most common Apollo Link, a system of modular components\nfor GraphQL networking. If you haven't done so already, [read the Apollo Link\ndocs](https://www.apollographql.com/docs/link/#usage) to learn about the Apollo\nLink ecosystem and how to use this link with libraries like Apollo Client and\ngraphql-tools, or as a standalone client.\n\nThe http link is a terminating link that fetches GraphQL results from a GraphQL\nendpoint over an http connection. The http link supports both POST and GET\nrequests with the ability change the http options on a per query basis. This\ncan be used for authentication, persisted queries, dynamic uris, and other\ngranular updates.\n\n<h2 id=\"usage\">Usage</h2>\n\nImport and initialize this link in just two lines:\n\n```js\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst link = createHttpLink({ uri: \"/graphql\" });\n```\n\n<h2 id=\"options\">Options</h2>\n\nHTTP Link takes an object with some options on it to customize the behavior of the link. If your server supports it, the HTTP link can also send over metadata about the request in the extensions field. To enable this, pass `includeExtensions` as true. The options you can pass are outlined below:\n\n* `uri`: the URI key is a string endpoint or function resolving to an endpoint -- will default to \"/graphql\" if not specified\n* `includeExtensions`: allow passing the extensions field to your graphql server, defaults to false\n* `fetch`: a `fetch` compatible API for making a request\n* `headers`: an object representing values to be sent as headers on the request\n* `credentials`: a string representing the credentials policy you want for the fetch call\n* `fetchOptions`: any overrides of the fetch options argument to pass to the fetch call\n* `useGETForQueries`: set to `true` to use the HTTP `GET` method for queries (but not for mutations)\n\n<h2 id=\"fetch\">Fetch polyfill</h2>\n\nThe HTTP Link relies on having `fetch` present in your runtime environment. If you are running on react-native, or modern browsers, this should be no problem. If you are targeting an environment without `fetch` such as older browsers or the server, you will need to pass your own `fetch` to the link through the options. We recommend [`unfetch`](https://github.com/developit/unfetch) for older browsers and [`node-fetch`](https://github.com/bitinn/node-fetch) for running in Node.\n\n<h2 id=\"context\">Context</h2>\n\nThe Http Link uses the `headers` field on the context to allow passing headers to the HTTP request. It also supports the `credentials` field for defining credentials policy, `uri` for changing the endpoint dynamically, and `fetchOptions` to allow generic fetch overrides (i.e. `method: \"GET\"`). These options will override the same key if passed when creating the the link.\n\nNote that if you set `fetchOptions.method` to `GET`, the http link will follow the [standard GraphQL HTTP GET encoding](http://graphql.org/learn/serving-over-http/#get-request): the query, variables, operation name, and extensions will be passed as query parameters rather than in the HTTP request body. If you want mutations to continue to be sent as non-idempotent `POST` requests, set the top-level `useGETForQueries` option to `true` instead of setting `fetchOptions.method` to `GET`.\n\nThis link also attaches the response from the `fetch` operation on the context as `response` so you can access it from within another link.\n\n* `headers`: an object representing values to be sent as headers on the request\n* `credentials`: a string representing the credentials policy you want for the fetch call\n* `uri`: a string of the endpoint you want to fetch from\n* `fetchOptions`: any overrides of the fetch options argument to pass to the fetch call\n* `response`: this is the raw response from the fetch request after it is made.\n* `http`: this is an object to control fine grained aspects of the http link itself, such as persisted queries (see below)\n\n<h3 id=\"persisted-queries\">Persisted queries</h3>\n\nThe http link supports an advanced GraphQL feature called persisted queries. This allows you to not send the stringified query over the wire, but instead send some kind of identifier of the query. To support this you need to attach the id somewhere to the extensions field and pass the following options to the context:\n\n```js\noperation.setContext({\n  http: {\n    includeExtensions: true,\n    includeQuery: false,\n  }\n})\n```\n\nThe `http` object on context currently supports two keys:\n\n* `includeExtensions`: Send the extensions object for this request.\n* `includeQuery`: Don't send the `query` field for this request.\n\nOne way to use persisted queries is with [apollo-link-persisted-queries](https://github.com/apollographql/apollo-link-persisted-queries) and [Apollo Engine](https://www.apollographql.com/docs/engine/auto-persisted-queries.html).\n\n<h3 id=\"passing-context\">Passing context per query</h3>\n\nApollo Client supports passing context separately for every query, so you can do things like pass a special header for a single query invocation if you need to.\n\n```js\nimport HttpLink from \"apollo-link-http\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: \"/graphql\" }),\n  cache: new InMemoryCache()\n});\n\n// a query with apollo-client\nclient.query({\n  query: MY_QUERY,\n  context: {\n    // example of setting the headers with context per operation\n    headers: {\n      special: \"Special header value\"\n    }\n  }\n});\n```\n\n<h2 id=\"error\">Errors</h2>\n\nThe Http Link draws a distinction between client, server and GraphQL errors. Server errors can occur in three different scenarios: parse, network and data errors. [`apollo-link-error`](error.html) provides an [interface](error.html#Usage) for handling these errors. This list describes the scenarios that cause different errors:\n\n* _Client parse error_: the request body is not-serializable due to circular references for example\n* _Server parse error_: the response from the server cannot be parsed ([response.json()](https://developer.mozilla.org/en-US/docs/Web/API/Body/json))\n* _Server network error_: the response has a status of >= 300\n* _Server data error_: the parse request does not contain `data` or `errors`\n* _GraphQL error_: an objects in the `errors` array for a 200 level status\n\nSince many server implementations can return a valid GraphQL result on a server network error, the thrown `Error` object contains the parsed server result. A server data error also receives the parsed result.\n\nThe table below provides a summary of error, `Observable` method called by the HTTP link, and type of error thrown for each failure:\n\n| Error          | Callback | Error Type         |\n| -------------- | :------: | ------------------ |\n| Client Parse   | `error`  | `ClientParseError` |\n| Server Parse   | `error`  | `ServerParseError` |\n| Server Network | `error`  | `ServerError`      |\n| Server Data    | `error`  | `ServerError`      |\n| GraphQL Error  |  `next`  | `Object`           |\n\nAll error types inherit the `name`, `message`, and nullable `stack` properties from the generic javascript [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n```js\n//type ClientParseError\n{\n  parseError: Error;                // Error returned from response.json()\n};\n\n//type ServerParseError\n{\n  response: Response;               // Object returned from fetch()\n  statusCode: number;               // HTTP status code\n  bodyText: string                  // text that was returned from server\n};\n\n//type ServerError\n{\n  result: Record<string, any>;      // Parsed object from server response\n  response: Response;               // Object returned from fetch()\n  statusCode: number;               // HTTP status code\n};\n```\n\n<h2 id=\"custom\">Custom fetching</h2>\n\nYou can use the `fetch` option when creating an http-link to do a lot of custom networking. This is useful if you want to modify the request based on the calculated headers  or calculate the uri based on the operation:\n\n<h3 id=\"custom-auth\">Custom auth</h3>\n\n```js\nconst customFetch = (uri, options) => {\n  const { header } = Hawk.client.header(\n    \"http://example.com:8000/resource/1?b=1&a=2\",\n    \"POST\",\n    { credentials: credentials, ext: \"some-app-data\" }\n  );\n  options.headers.Authorization = header;\n  return fetch(uri, options);\n};\n\nconst link = createHttpLink({ fetch: customFetch });\n```\n\n<h3 id=\"dynamic-uri\">Dynamic URI</h3>\n\n```js\nconst customFetch = (uri, options) => {\n  const { operationName } = JSON.parse(options.body);\n  return fetch(`${uri}/graph/graphql?opname=${operationName}`, options);\n};\n\nconst link = createHttpLink({ fetch: customFetch });\n```\n\n<h2 id=\"upgrading\">Upgrade: Apollo Client 1.0</h2>\n\nIf you previously used either `apollo-fetch` or `apollo-client`'s `createNetworkInterface`, you will need to change the way `use` and `useAfter` are implemented in your app. Both can be implemented by writing a custom link. It's important to note that regardless of whether you're adding middleware or afterware, your Http link will always be last in the chain since it's a terminating link.\n\n#### Middleware\n\n_Before_\n\n```js\n// before\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.use([\n  {\n    applyMiddleware(req, next) {\n      if (!req.options.headers) {\n        req.options.headers = {}; // Create the header object if needed.\n      }\n      req.options.headers[\"authorization\"] = localStorage.getItem(\"token\")\n        ? localStorage.getItem(\"token\")\n        : null;\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst middlewareLink = new ApolloLink((operation, forward) => {\n  operation.setContext({\n    headers: {\n      authorization: localStorage.getItem(\"token\") || null\n    }\n  });\n  return forward(operation);\n});\n\n// use with apollo-client\nconst link = middlewareLink.concat(httpLink);\n```\n\n#### Afterware (error)\n\n_Before_\n\n```js\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\nimport { logout } from \"./logout\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.useAfter([\n  {\n    applyAfterware({ response }, next) {\n      if (response.statusCode === 401) {\n        logout();\n      }\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\n\nimport { logout } from \"./logout\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst errorLink = onError(({ networkError }) => {\n  if (networkError.status === 401) {\n    logout();\n  }\n});\n\n// use with apollo-client\nconst link = errorLink.concat(httpLink);\n```\n\n#### Afterware (data manipulation)\n\n_Before_\n\n```js\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.useAfter([\n  {\n    applyAfterware({ response }, next) {\n      if (response.data.user.lastLoginDate) {\n        response.data.user.lastLoginDate = new Date(\n          response.data.user.lastLoginDate\n        );\n      }\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst addDatesLink = new ApolloLink((operation, forward) => {\n  return forward(operation).map(response => {\n    if (response.data.user.lastLoginDate) {\n      response.data.user.lastLoginDate = new Date(\n        response.data.user.lastLoginDate\n      );\n    }\n    return response;\n  });\n});\n\n// use with apollo-client\nconst link = addDatesLink.concat(httpLink);\n```\n",
      "readmeFilename": "README.md",
      "_id": "apollo-link-http@1.6.0-alpha.0",
      "_npmVersion": "6.1.0",
      "_nodeVersion": "10.6.0",
      "_npmUser": {
        "name": "mdg",
        "email": "npm@meteor.com"
      },
      "dist": {
        "integrity": "sha512-rcQWyiIGk2Ty/9n+pUxFi8b9faYhaOC7ktjADJ3cojewxaN6b0ePg7JdYZgEFaAUPvehLXNitFjPslPcLCx1eQ==",
        "shasum": "93a26e6420e7d9b231d22d3d3546131323691fb6",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.6.0-alpha.0.tgz",
        "fileCount": 17,
        "unpackedSize": 105506,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbUDp3CRA9TVsSAnZWagAANOUP/RtHZnFHEk04rPL+oCh/\nyvBJQoMlhCaPY7LsVMLUh/0X8/6jAGxjIaFSAzK+jNzhjmlM3m0JS89fWEG8\nsafEvLbkY/+iyagacjILBm8kz9OHOpm1ykKodtWXk9RpMv99MJ3intaxL4d3\n1btNdjMwnsKOpLLVPjFYaCEpezjL83f4ar0Rk7XpjiCqm2Zi8o4L/YqbK+qW\nwJlHRwzkymDr/c7w7LUG/mS6v58BurvWRTQS/dvvmbQRu84Gx5A1iPdfW7JE\noKd/3GLi5UKgCcvsuMhCI7AxZH5AcRd+qKJaHTf3gvx3VFswYaXdFhU+3a/Y\nvPRMnOxPExhWlhlKW9VjaPX7Fvao9LejUdR/29gSbHVW08eL+KSZwHhnzKc4\nbGL1V3b6nshUp5jh+4nUvOlBaagOe2kIbnDaSUd1h4fZrW0MttgtlJ9gCpWR\nDxuK0j82YT9PCstS4XanFuTjtf5SiuZQjGTVqCKIlcKIbllaa9ERB4hbK+Oe\ngyEkH4GuBFRcH14W/1KukXCg8zC3Lg2Htob9sxFuEf7W3dArpd8M5RVCCBdZ\nRYGbIA/FmzAxLaA77A4DyVwDS2VZiHxifxXpTic4Qebqtr/9iTU17h55TNmY\nmEnFiyBC2FfuKQWHz4enxHIeggRjOIAoD2fpP6ere2MDbNeth6Br/DmF9saa\nrEkT\r\n=rmz/\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHy4npwg2j/FPGofBa/hNL8SMaSwqVgMBnvBHFw64f0eAiEAkaOb0iA3jU8SJqJ2qxuiTvZJPnGZT9xj/4hmV0TJy78="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.6.0-alpha.0_1531984503094_0.6683631685561173"
      },
      "_hasShrinkwrap": false
    },
    "1.6.0-alpha.1": {
      "name": "apollo-link-http",
      "version": "1.6.0-alpha.1",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.2",
        "apollo-link-http-common": "^0.2.4",
        "text-encoding": "^0.6.4"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0"
      },
      "devDependencies": {
        "@types/graphql": "0.12.6",
        "@types/jest": "22.2.3",
        "@types/text-encoding": "0.0.33",
        "apollo-fetch": "0.7.0",
        "browserify": "16.2.2",
        "fetch-mock": "6.5.1",
        "graphql": "0.13.2",
        "graphql-tag": "2.9.2",
        "jest": "22.4.4",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.62.0",
        "ts-jest": "22.4.6",
        "tslint": "5.11.0",
        "typescript": "2.9.2",
        "uglify-js": "3.4.5"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ]
      },
      "readme": "---\ntitle: apollo-link-http\ndescription: Get GraphQL results over a network using HTTP fetch.\n---\n\nThe http link is the most common Apollo Link, a system of modular components\nfor GraphQL networking. If you haven't done so already, [read the Apollo Link\ndocs](https://www.apollographql.com/docs/link/#usage) to learn about the Apollo\nLink ecosystem and how to use this link with libraries like Apollo Client and\ngraphql-tools, or as a standalone client.\n\nThe http link is a terminating link that fetches GraphQL results from a GraphQL\nendpoint over an http connection. The http link supports both POST and GET\nrequests with the ability change the http options on a per query basis. This\ncan be used for authentication, persisted queries, dynamic uris, and other\ngranular updates.\n\n<h2 id=\"usage\">Usage</h2>\n\nImport and initialize this link in just two lines:\n\n```js\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst link = createHttpLink({ uri: \"/graphql\" });\n```\n\n<h2 id=\"options\">Options</h2>\n\nHTTP Link takes an object with some options on it to customize the behavior of the link. If your server supports it, the HTTP link can also send over metadata about the request in the extensions field. To enable this, pass `includeExtensions` as true. The options you can pass are outlined below:\n\n* `uri`: the URI key is a string endpoint or function resolving to an endpoint -- will default to \"/graphql\" if not specified\n* `includeExtensions`: allow passing the extensions field to your graphql server, defaults to false\n* `fetch`: a `fetch` compatible API for making a request\n* `headers`: an object representing values to be sent as headers on the request\n* `credentials`: a string representing the credentials policy you want for the fetch call\n* `fetchOptions`: any overrides of the fetch options argument to pass to the fetch call\n* `useGETForQueries`: set to `true` to use the HTTP `GET` method for queries (but not for mutations)\n\n<h2 id=\"fetch\">Fetch polyfill</h2>\n\nThe HTTP Link relies on having `fetch` present in your runtime environment. If you are running on react-native, or modern browsers, this should be no problem. If you are targeting an environment without `fetch` such as older browsers or the server, you will need to pass your own `fetch` to the link through the options. We recommend [`unfetch`](https://github.com/developit/unfetch) for older browsers and [`node-fetch`](https://github.com/bitinn/node-fetch) for running in Node.\n\n<h2 id=\"context\">Context</h2>\n\nThe Http Link uses the `headers` field on the context to allow passing headers to the HTTP request. It also supports the `credentials` field for defining credentials policy, `uri` for changing the endpoint dynamically, and `fetchOptions` to allow generic fetch overrides (i.e. `method: \"GET\"`). These options will override the same key if passed when creating the the link.\n\nNote that if you set `fetchOptions.method` to `GET`, the http link will follow the [standard GraphQL HTTP GET encoding](http://graphql.org/learn/serving-over-http/#get-request): the query, variables, operation name, and extensions will be passed as query parameters rather than in the HTTP request body. If you want mutations to continue to be sent as non-idempotent `POST` requests, set the top-level `useGETForQueries` option to `true` instead of setting `fetchOptions.method` to `GET`.\n\nThis link also attaches the response from the `fetch` operation on the context as `response` so you can access it from within another link.\n\n* `headers`: an object representing values to be sent as headers on the request\n* `credentials`: a string representing the credentials policy you want for the fetch call\n* `uri`: a string of the endpoint you want to fetch from\n* `fetchOptions`: any overrides of the fetch options argument to pass to the fetch call\n* `response`: this is the raw response from the fetch request after it is made.\n* `http`: this is an object to control fine grained aspects of the http link itself, such as persisted queries (see below)\n\n<h3 id=\"persisted-queries\">Persisted queries</h3>\n\nThe http link supports an advanced GraphQL feature called persisted queries. This allows you to not send the stringified query over the wire, but instead send some kind of identifier of the query. To support this you need to attach the id somewhere to the extensions field and pass the following options to the context:\n\n```js\noperation.setContext({\n  http: {\n    includeExtensions: true,\n    includeQuery: false,\n  }\n})\n```\n\nThe `http` object on context currently supports two keys:\n\n* `includeExtensions`: Send the extensions object for this request.\n* `includeQuery`: Don't send the `query` field for this request.\n\nOne way to use persisted queries is with [apollo-link-persisted-queries](https://github.com/apollographql/apollo-link-persisted-queries) and [Apollo Engine](https://www.apollographql.com/docs/engine/auto-persisted-queries.html).\n\n<h3 id=\"passing-context\">Passing context per query</h3>\n\nApollo Client supports passing context separately for every query, so you can do things like pass a special header for a single query invocation if you need to.\n\n```js\nimport HttpLink from \"apollo-link-http\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: \"/graphql\" }),\n  cache: new InMemoryCache()\n});\n\n// a query with apollo-client\nclient.query({\n  query: MY_QUERY,\n  context: {\n    // example of setting the headers with context per operation\n    headers: {\n      special: \"Special header value\"\n    }\n  }\n});\n```\n\n<h2 id=\"error\">Errors</h2>\n\nThe Http Link draws a distinction between client, server and GraphQL errors. Server errors can occur in three different scenarios: parse, network and data errors. [`apollo-link-error`](error.html) provides an [interface](error.html#Usage) for handling these errors. This list describes the scenarios that cause different errors:\n\n* _Client parse error_: the request body is not-serializable due to circular references for example\n* _Server parse error_: the response from the server cannot be parsed ([response.json()](https://developer.mozilla.org/en-US/docs/Web/API/Body/json))\n* _Server network error_: the response has a status of >= 300\n* _Server data error_: the parse request does not contain `data` or `errors`\n* _GraphQL error_: an objects in the `errors` array for a 200 level status\n\nSince many server implementations can return a valid GraphQL result on a server network error, the thrown `Error` object contains the parsed server result. A server data error also receives the parsed result.\n\nThe table below provides a summary of error, `Observable` method called by the HTTP link, and type of error thrown for each failure:\n\n| Error          | Callback | Error Type         |\n| -------------- | :------: | ------------------ |\n| Client Parse   | `error`  | `ClientParseError` |\n| Server Parse   | `error`  | `ServerParseError` |\n| Server Network | `error`  | `ServerError`      |\n| Server Data    | `error`  | `ServerError`      |\n| GraphQL Error  |  `next`  | `Object`           |\n\nAll error types inherit the `name`, `message`, and nullable `stack` properties from the generic javascript [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n```js\n//type ClientParseError\n{\n  parseError: Error;                // Error returned from response.json()\n};\n\n//type ServerParseError\n{\n  response: Response;               // Object returned from fetch()\n  statusCode: number;               // HTTP status code\n  bodyText: string                  // text that was returned from server\n};\n\n//type ServerError\n{\n  result: Record<string, any>;      // Parsed object from server response\n  response: Response;               // Object returned from fetch()\n  statusCode: number;               // HTTP status code\n};\n```\n\n<h2 id=\"custom\">Custom fetching</h2>\n\nYou can use the `fetch` option when creating an http-link to do a lot of custom networking. This is useful if you want to modify the request based on the calculated headers  or calculate the uri based on the operation:\n\n<h3 id=\"custom-auth\">Custom auth</h3>\n\n```js\nconst customFetch = (uri, options) => {\n  const { header } = Hawk.client.header(\n    \"http://example.com:8000/resource/1?b=1&a=2\",\n    \"POST\",\n    { credentials: credentials, ext: \"some-app-data\" }\n  );\n  options.headers.Authorization = header;\n  return fetch(uri, options);\n};\n\nconst link = createHttpLink({ fetch: customFetch });\n```\n\n<h3 id=\"dynamic-uri\">Dynamic URI</h3>\n\n```js\nconst customFetch = (uri, options) => {\n  const { operationName } = JSON.parse(options.body);\n  return fetch(`${uri}/graph/graphql?opname=${operationName}`, options);\n};\n\nconst link = createHttpLink({ fetch: customFetch });\n```\n\n<h2 id=\"upgrading\">Upgrade: Apollo Client 1.0</h2>\n\nIf you previously used either `apollo-fetch` or `apollo-client`'s `createNetworkInterface`, you will need to change the way `use` and `useAfter` are implemented in your app. Both can be implemented by writing a custom link. It's important to note that regardless of whether you're adding middleware or afterware, your Http link will always be last in the chain since it's a terminating link.\n\n#### Middleware\n\n_Before_\n\n```js\n// before\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.use([\n  {\n    applyMiddleware(req, next) {\n      if (!req.options.headers) {\n        req.options.headers = {}; // Create the header object if needed.\n      }\n      req.options.headers[\"authorization\"] = localStorage.getItem(\"token\")\n        ? localStorage.getItem(\"token\")\n        : null;\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst middlewareLink = new ApolloLink((operation, forward) => {\n  operation.setContext({\n    headers: {\n      authorization: localStorage.getItem(\"token\") || null\n    }\n  });\n  return forward(operation);\n});\n\n// use with apollo-client\nconst link = middlewareLink.concat(httpLink);\n```\n\n#### Afterware (error)\n\n_Before_\n\n```js\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\nimport { logout } from \"./logout\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.useAfter([\n  {\n    applyAfterware({ response }, next) {\n      if (response.statusCode === 401) {\n        logout();\n      }\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\n\nimport { logout } from \"./logout\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst errorLink = onError(({ networkError }) => {\n  if (networkError.status === 401) {\n    logout();\n  }\n});\n\n// use with apollo-client\nconst link = errorLink.concat(httpLink);\n```\n\n#### Afterware (data manipulation)\n\n_Before_\n\n```js\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.useAfter([\n  {\n    applyAfterware({ response }, next) {\n      if (response.data.user.lastLoginDate) {\n        response.data.user.lastLoginDate = new Date(\n          response.data.user.lastLoginDate\n        );\n      }\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst addDatesLink = new ApolloLink((operation, forward) => {\n  return forward(operation).map(response => {\n    if (response.data.user.lastLoginDate) {\n      response.data.user.lastLoginDate = new Date(\n        response.data.user.lastLoginDate\n      );\n    }\n    return response;\n  });\n});\n\n// use with apollo-client\nconst link = addDatesLink.concat(httpLink);\n```\n",
      "readmeFilename": "README.md",
      "_id": "apollo-link-http@1.6.0-alpha.1",
      "_npmVersion": "6.1.0",
      "_nodeVersion": "10.6.0",
      "_npmUser": {
        "name": "mdg",
        "email": "npm@meteor.com"
      },
      "dist": {
        "integrity": "sha512-WkXbsuFhVjzMls6vWqeTn4RVyfKhRJUQx070XG8J5r6X7xysN0HlyWETWlSB3DOkckhw0x4BNuduoJU2414Sgw==",
        "shasum": "61aef6e75fc0874d994a5e65b5a98aec1b6dc316",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.6.0-alpha.1.tgz",
        "fileCount": 17,
        "unpackedSize": 110687,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbV8vcCRA9TVsSAnZWagAAhacP/ie0n5mONEvU9xWodCNU\nd6b3sd/yOcElNE1cVuPWB8BLriVC6eWwFMnafjcdCucCvizJR/6YRLpqNAF7\nsTXiZhDICAbxzOqlK5uElf5Mf0YttOUxXdfRzODR89K2wTUZuufYyLGugpUY\n8OwLK9ToYynV9F/hChHQhW7YffHtv3vRu4AX/xO9X/t6PcvS8eVnEbuw85Up\nnqmZYfY9ASqvWiWirmc3WV9dAPdrRVMKUt7WABsciY8iXC0rIkryAbLdd8W8\nDnBpcV4lgM/RXcZjcEONu6um2CzxyGPDZx8qxZ/4/JlEcBsWKHvRffakGCkN\nY+x9k7JLHlaiJ5TPthOGl3Qociwax330ikCjtN9aLYmCIsKnHBTmT8R02ore\n1gc0D7JWUfmlXiHXnOSAlqqpjfHzk2268HYio05GCdnlvgqiyXtwyFV2vFn9\nh+bZJdM107prc01vE0DaKmJeeGVwkRgtXAAnFciLKbxpOWYii9Q9DOKQTUN8\nu66R/wPlLrZg8NyyLnYtj8hN2GnZfPyf6lgnNl5h/T63t4DIPXXF3PvdROU0\npXmy7qUuhctpQg6VAcyJyrMtQzbe1UTKOx3+i5Hcd0bZX0Je8lkQ69QOvmKG\n6it8ucOVpW2qrJeNutGzgcbCAlsvGT9YESz1pHYP7scZyjLEpxkkJbuR0hf5\nQNUF\r\n=yRGE\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDqHXiiFkrM792NKVWpgrQ3PusF6Ymr4IVKeMQq+Kj44AiEAy6cLnrGyBmsZVdYjzy+M1CNRTfXewbt/aTcZvehzZd8="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.6.0-alpha.1_1532480476071_0.9531697105811181"
      },
      "_hasShrinkwrap": false
    },
    "1.6.0-alpha.2": {
      "name": "apollo-link-http",
      "version": "1.6.0-alpha.2",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.2",
        "apollo-link-http-common": "^0.2.4"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0"
      },
      "devDependencies": {
        "@types/graphql": "0.12.6",
        "@types/jest": "22.2.3",
        "apollo-fetch": "0.7.0",
        "browserify": "16.2.2",
        "fetch-mock": "6.5.2",
        "graphql": "0.13.2",
        "graphql-tag": "2.9.2",
        "jest": "22.4.4",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.63.4",
        "ts-jest": "22.4.6",
        "tslint": "5.11.0",
        "typescript": "2.9.2",
        "uglify-js": "3.4.5"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ]
      },
      "readme": "---\ntitle: apollo-link-http\ndescription: Get GraphQL results over a network using HTTP fetch.\n---\n\nThe http link is the most common Apollo Link, a system of modular components\nfor GraphQL networking. If you haven't done so already, [read the Apollo Link\ndocs](https://www.apollographql.com/docs/link/#usage) to learn about the Apollo\nLink ecosystem and how to use this link with libraries like Apollo Client and\ngraphql-tools, or as a standalone client.\n\nThe http link is a terminating link that fetches GraphQL results from a GraphQL\nendpoint over an http connection. The http link supports both POST and GET\nrequests with the ability change the http options on a per query basis. This\ncan be used for authentication, persisted queries, dynamic uris, and other\ngranular updates.\n\n<h2 id=\"usage\">Usage</h2>\n\nImport and initialize this link in just two lines:\n\n```js\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst link = createHttpLink({ uri: \"/graphql\" });\n```\n\n<h2 id=\"options\">Options</h2>\n\nHTTP Link takes an object with some options on it to customize the behavior of the link. If your server supports it, the HTTP link can also send over metadata about the request in the extensions field. To enable this, pass `includeExtensions` as true. The options you can pass are outlined below:\n\n* `uri`: the URI key is a string endpoint or function resolving to an endpoint -- will default to \"/graphql\" if not specified\n* `includeExtensions`: allow passing the extensions field to your graphql server, defaults to false\n* `fetch`: a `fetch` compatible API for making a request\n* `headers`: an object representing values to be sent as headers on the request\n* `credentials`: a string representing the credentials policy you want for the fetch call\n* `fetchOptions`: any overrides of the fetch options argument to pass to the fetch call\n* `useGETForQueries`: set to `true` to use the HTTP `GET` method for queries (but not for mutations)\n\n<h2 id=\"fetch\">Fetch polyfill</h2>\n\nThe HTTP Link relies on having `fetch` present in your runtime environment. If you are running on react-native, or modern browsers, this should be no problem. If you are targeting an environment without `fetch` such as older browsers or the server, you will need to pass your own `fetch` to the link through the options. We recommend [`unfetch`](https://github.com/developit/unfetch) for older browsers and [`node-fetch`](https://github.com/bitinn/node-fetch) for running in Node.\n\n<h2 id=\"context\">Context</h2>\n\nThe Http Link uses the `headers` field on the context to allow passing headers to the HTTP request. It also supports the `credentials` field for defining credentials policy, `uri` for changing the endpoint dynamically, and `fetchOptions` to allow generic fetch overrides (i.e. `method: \"GET\"`). These options will override the same key if passed when creating the the link.\n\nNote that if you set `fetchOptions.method` to `GET`, the http link will follow the [standard GraphQL HTTP GET encoding](http://graphql.org/learn/serving-over-http/#get-request): the query, variables, operation name, and extensions will be passed as query parameters rather than in the HTTP request body. If you want mutations to continue to be sent as non-idempotent `POST` requests, set the top-level `useGETForQueries` option to `true` instead of setting `fetchOptions.method` to `GET`.\n\nThis link also attaches the response from the `fetch` operation on the context as `response` so you can access it from within another link.\n\n* `headers`: an object representing values to be sent as headers on the request\n* `credentials`: a string representing the credentials policy you want for the fetch call\n* `uri`: a string of the endpoint you want to fetch from\n* `fetchOptions`: any overrides of the fetch options argument to pass to the fetch call\n* `response`: this is the raw response from the fetch request after it is made.\n* `http`: this is an object to control fine grained aspects of the http link itself, such as persisted queries (see below)\n\n<h3 id=\"persisted-queries\">Persisted queries</h3>\n\nThe http link supports an advanced GraphQL feature called persisted queries. This allows you to not send the stringified query over the wire, but instead send some kind of identifier of the query. To support this you need to attach the id somewhere to the extensions field and pass the following options to the context:\n\n```js\noperation.setContext({\n  http: {\n    includeExtensions: true,\n    includeQuery: false,\n  }\n})\n```\n\nThe `http` object on context currently supports two keys:\n\n* `includeExtensions`: Send the extensions object for this request.\n* `includeQuery`: Don't send the `query` field for this request.\n\nOne way to use persisted queries is with [apollo-link-persisted-queries](https://github.com/apollographql/apollo-link-persisted-queries) and [Apollo Engine](https://www.apollographql.com/docs/engine/auto-persisted-queries.html).\n\n<h3 id=\"passing-context\">Passing context per query</h3>\n\nApollo Client supports passing context separately for every query, so you can do things like pass a special header for a single query invocation if you need to.\n\n```js\nimport HttpLink from \"apollo-link-http\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: \"/graphql\" }),\n  cache: new InMemoryCache()\n});\n\n// a query with apollo-client\nclient.query({\n  query: MY_QUERY,\n  context: {\n    // example of setting the headers with context per operation\n    headers: {\n      special: \"Special header value\"\n    }\n  }\n});\n```\n\n<h2 id=\"error\">Errors</h2>\n\nThe Http Link draws a distinction between client, server and GraphQL errors. Server errors can occur in three different scenarios: parse, network and data errors. [`apollo-link-error`](error.html) provides an [interface](error.html#Usage) for handling these errors. This list describes the scenarios that cause different errors:\n\n* _Client parse error_: the request body is not-serializable due to circular references for example\n* _Server parse error_: the response from the server cannot be parsed ([response.json()](https://developer.mozilla.org/en-US/docs/Web/API/Body/json))\n* _Server network error_: the response has a status of >= 300\n* _Server data error_: the parse request does not contain `data` or `errors`\n* _GraphQL error_: an objects in the `errors` array for a 200 level status\n\nSince many server implementations can return a valid GraphQL result on a server network error, the thrown `Error` object contains the parsed server result. A server data error also receives the parsed result.\n\nThe table below provides a summary of error, `Observable` method called by the HTTP link, and type of error thrown for each failure:\n\n| Error          | Callback | Error Type         |\n| -------------- | :------: | ------------------ |\n| Client Parse   | `error`  | `ClientParseError` |\n| Server Parse   | `error`  | `ServerParseError` |\n| Server Network | `error`  | `ServerError`      |\n| Server Data    | `error`  | `ServerError`      |\n| GraphQL Error  |  `next`  | `Object`           |\n\nAll error types inherit the `name`, `message`, and nullable `stack` properties from the generic javascript [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n```js\n//type ClientParseError\n{\n  parseError: Error;                // Error returned from response.json()\n};\n\n//type ServerParseError\n{\n  response: Response;               // Object returned from fetch()\n  statusCode: number;               // HTTP status code\n  bodyText: string                  // text that was returned from server\n};\n\n//type ServerError\n{\n  result: Record<string, any>;      // Parsed object from server response\n  response: Response;               // Object returned from fetch()\n  statusCode: number;               // HTTP status code\n};\n```\n\n<h2 id=\"custom\">Custom fetching</h2>\n\nYou can use the `fetch` option when creating an http-link to do a lot of custom networking. This is useful if you want to modify the request based on the calculated headers  or calculate the uri based on the operation:\n\n<h3 id=\"custom-auth\">Custom auth</h3>\n\n```js\nconst customFetch = (uri, options) => {\n  const { header } = Hawk.client.header(\n    \"http://example.com:8000/resource/1?b=1&a=2\",\n    \"POST\",\n    { credentials: credentials, ext: \"some-app-data\" }\n  );\n  options.headers.Authorization = header;\n  return fetch(uri, options);\n};\n\nconst link = createHttpLink({ fetch: customFetch });\n```\n\n<h3 id=\"dynamic-uri\">Dynamic URI</h3>\n\n```js\nconst customFetch = (uri, options) => {\n  const { operationName } = JSON.parse(options.body);\n  return fetch(`${uri}/graph/graphql?opname=${operationName}`, options);\n};\n\nconst link = createHttpLink({ fetch: customFetch });\n```\n\n<h2 id=\"upgrading\">Upgrade: Apollo Client 1.0</h2>\n\nIf you previously used either `apollo-fetch` or `apollo-client`'s `createNetworkInterface`, you will need to change the way `use` and `useAfter` are implemented in your app. Both can be implemented by writing a custom link. It's important to note that regardless of whether you're adding middleware or afterware, your Http link will always be last in the chain since it's a terminating link.\n\n#### Middleware\n\n_Before_\n\n```js\n// before\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.use([\n  {\n    applyMiddleware(req, next) {\n      if (!req.options.headers) {\n        req.options.headers = {}; // Create the header object if needed.\n      }\n      req.options.headers[\"authorization\"] = localStorage.getItem(\"token\")\n        ? localStorage.getItem(\"token\")\n        : null;\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst middlewareLink = new ApolloLink((operation, forward) => {\n  operation.setContext({\n    headers: {\n      authorization: localStorage.getItem(\"token\") || null\n    }\n  });\n  return forward(operation);\n});\n\n// use with apollo-client\nconst link = middlewareLink.concat(httpLink);\n```\n\n#### Afterware (error)\n\n_Before_\n\n```js\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\nimport { logout } from \"./logout\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.useAfter([\n  {\n    applyAfterware({ response }, next) {\n      if (response.statusCode === 401) {\n        logout();\n      }\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\n\nimport { logout } from \"./logout\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst errorLink = onError(({ networkError }) => {\n  if (networkError.status === 401) {\n    logout();\n  }\n});\n\n// use with apollo-client\nconst link = errorLink.concat(httpLink);\n```\n\n#### Afterware (data manipulation)\n\n_Before_\n\n```js\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.useAfter([\n  {\n    applyAfterware({ response }, next) {\n      if (response.data.user.lastLoginDate) {\n        response.data.user.lastLoginDate = new Date(\n          response.data.user.lastLoginDate\n        );\n      }\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst addDatesLink = new ApolloLink((operation, forward) => {\n  return forward(operation).map(response => {\n    if (response.data.user.lastLoginDate) {\n      response.data.user.lastLoginDate = new Date(\n        response.data.user.lastLoginDate\n      );\n    }\n    return response;\n  });\n});\n\n// use with apollo-client\nconst link = addDatesLink.concat(httpLink);\n```\n",
      "readmeFilename": "README.md",
      "_id": "apollo-link-http@1.6.0-alpha.2",
      "_npmVersion": "6.1.0",
      "_nodeVersion": "10.6.0",
      "_npmUser": {
        "name": "mdg",
        "email": "npm@meteor.com"
      },
      "dist": {
        "integrity": "sha512-ZqonNjLz6AKU1MzLtSy4UWN7qlivgLbE/8K5A/rqMEzxoCMBOoVSBy44yh2zd8+QmaZ+WBcUgcy6TxasA3/9EQ==",
        "shasum": "86834c09b7512a623e9f6689ad40fd4ffd32ce84",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.6.0-alpha.2.tgz",
        "fileCount": 17,
        "unpackedSize": 115790,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbV/puCRA9TVsSAnZWagAABrQP/RN6lEkx6kLV39qMeGA5\np8M8TAFQGeAYi3wnJFcjtGrxuuwIIh2DbmHfoXR5sQ3abooE3Zb0KYH/Ed6n\nPFy5w2vgNl7EVZYwBDi3hya8FXvk2T0I0DMbiiZHtE12FqpQx777mRVDSsVS\nhuo1I2VoPG1hMCzzOz6cl0tc+ZjQD+gCd4wver3bwWe+cvvew3JZa/dztEXx\nrKJWOirI9oWDR79pA6t2SmV2vYKLYUlEmjuYI+fqbidLV/j4Cw0uB0WSG3QO\nWR/y4Mpn9WKGkLPRyFIun7fZ7nl5gxZQNNtL575mG2YCVM3i9IEgZNmzte47\ns3IyxFTXfAOhd+J2wncuHc2VcvNoy387xLDNCFEqMaomb/etoiWZQizKvD+s\nZ78bXkEJIEzyXATjjj/JXbW3FM6rfYoXjPqpKgJ9afIjiEQkJ6IRjLJPxZlF\nDNEViHCps1rdopHlZcv03MdLVOFdpHqy5XiA3F9rSxN3jRLh0XpNmEaMUFL5\n+Il+/rqwxBAz7OtBTQn0lUVHkpgFqr3SOPcXk+9oXuKdfkl7b4yVnoqypwz8\nmwnYYjhcSQ1QpcgBYHCm774bCAPHZ2TwNjeecGIHrmsbDHTe/cVeR8QTaw4i\nVARsOwRzJUueFJC61UGrDW6hX4akJOSCNtYYKUquSl1oGYbRQp/PCJXw0VkS\nf/f+\r\n=jcTq\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHvJv0a3R8nTd+Xg0n89kISobGFP/qckT8dxoCxPrwFcAiAH1tK8w/eVUwykdOUuAoGVC9x4w1NRenBFrUEVEgm+vw=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.6.0-alpha.2_1532492398819_0.9014714763755742"
      },
      "_hasShrinkwrap": false
    },
    "1.6.0-alpha.3": {
      "name": "apollo-link-http",
      "version": "1.6.0-alpha.3",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.2",
        "apollo-link-http-common": "^0.2.4"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0"
      },
      "devDependencies": {
        "@types/graphql": "0.12.6",
        "@types/jest": "22.2.3",
        "apollo-fetch": "0.7.0",
        "browserify": "16.2.2",
        "fetch-mock": "6.5.2",
        "graphql": "0.13.2",
        "graphql-tag": "2.9.2",
        "jest": "22.4.4",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.63.4",
        "ts-jest": "22.4.6",
        "tslint": "5.11.0",
        "typescript": "2.9.2",
        "uglify-js": "3.4.5"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ]
      },
      "readme": "---\ntitle: apollo-link-http\ndescription: Get GraphQL results over a network using HTTP fetch.\n---\n\nThe http link is the most common Apollo Link, a system of modular components\nfor GraphQL networking. If you haven't done so already, [read the Apollo Link\ndocs](https://www.apollographql.com/docs/link/#usage) to learn about the Apollo\nLink ecosystem and how to use this link with libraries like Apollo Client and\ngraphql-tools, or as a standalone client.\n\nThe http link is a terminating link that fetches GraphQL results from a GraphQL\nendpoint over an http connection. The http link supports both POST and GET\nrequests with the ability change the http options on a per query basis. This\ncan be used for authentication, persisted queries, dynamic uris, and other\ngranular updates.\n\n<h2 id=\"usage\">Usage</h2>\n\nImport and initialize this link in just two lines:\n\n```js\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst link = createHttpLink({ uri: \"/graphql\" });\n```\n\n<h2 id=\"options\">Options</h2>\n\nHTTP Link takes an object with some options on it to customize the behavior of the link. If your server supports it, the HTTP link can also send over metadata about the request in the extensions field. To enable this, pass `includeExtensions` as true. The options you can pass are outlined below:\n\n* `uri`: the URI key is a string endpoint or function resolving to an endpoint -- will default to \"/graphql\" if not specified\n* `includeExtensions`: allow passing the extensions field to your graphql server, defaults to false\n* `fetch`: a `fetch` compatible API for making a request\n* `headers`: an object representing values to be sent as headers on the request\n* `credentials`: a string representing the credentials policy you want for the fetch call\n* `fetchOptions`: any overrides of the fetch options argument to pass to the fetch call\n* `useGETForQueries`: set to `true` to use the HTTP `GET` method for queries (but not for mutations)\n\n<h2 id=\"fetch\">Fetch polyfill</h2>\n\nThe HTTP Link relies on having `fetch` present in your runtime environment. If you are running on react-native, or modern browsers, this should be no problem. If you are targeting an environment without `fetch` such as older browsers or the server, you will need to pass your own `fetch` to the link through the options. We recommend [`unfetch`](https://github.com/developit/unfetch) for older browsers and [`node-fetch`](https://github.com/bitinn/node-fetch) for running in Node.\n\n<h2 id=\"context\">Context</h2>\n\nThe Http Link uses the `headers` field on the context to allow passing headers to the HTTP request. It also supports the `credentials` field for defining credentials policy, `uri` for changing the endpoint dynamically, and `fetchOptions` to allow generic fetch overrides (i.e. `method: \"GET\"`). These options will override the same key if passed when creating the the link.\n\nNote that if you set `fetchOptions.method` to `GET`, the http link will follow the [standard GraphQL HTTP GET encoding](http://graphql.org/learn/serving-over-http/#get-request): the query, variables, operation name, and extensions will be passed as query parameters rather than in the HTTP request body. If you want mutations to continue to be sent as non-idempotent `POST` requests, set the top-level `useGETForQueries` option to `true` instead of setting `fetchOptions.method` to `GET`.\n\nThis link also attaches the response from the `fetch` operation on the context as `response` so you can access it from within another link.\n\n* `headers`: an object representing values to be sent as headers on the request\n* `credentials`: a string representing the credentials policy you want for the fetch call\n* `uri`: a string of the endpoint you want to fetch from\n* `fetchOptions`: any overrides of the fetch options argument to pass to the fetch call\n* `response`: this is the raw response from the fetch request after it is made.\n* `http`: this is an object to control fine grained aspects of the http link itself, such as persisted queries (see below)\n\n<h3 id=\"persisted-queries\">Persisted queries</h3>\n\nThe http link supports an advanced GraphQL feature called persisted queries. This allows you to not send the stringified query over the wire, but instead send some kind of identifier of the query. To support this you need to attach the id somewhere to the extensions field and pass the following options to the context:\n\n```js\noperation.setContext({\n  http: {\n    includeExtensions: true,\n    includeQuery: false,\n  }\n})\n```\n\nThe `http` object on context currently supports two keys:\n\n* `includeExtensions`: Send the extensions object for this request.\n* `includeQuery`: Don't send the `query` field for this request.\n\nOne way to use persisted queries is with [apollo-link-persisted-queries](https://github.com/apollographql/apollo-link-persisted-queries) and [Apollo Engine](https://www.apollographql.com/docs/engine/auto-persisted-queries.html).\n\n<h3 id=\"passing-context\">Passing context per query</h3>\n\nApollo Client supports passing context separately for every query, so you can do things like pass a special header for a single query invocation if you need to.\n\n```js\nimport HttpLink from \"apollo-link-http\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: \"/graphql\" }),\n  cache: new InMemoryCache()\n});\n\n// a query with apollo-client\nclient.query({\n  query: MY_QUERY,\n  context: {\n    // example of setting the headers with context per operation\n    headers: {\n      special: \"Special header value\"\n    }\n  }\n});\n```\n\n<h2 id=\"error\">Errors</h2>\n\nThe Http Link draws a distinction between client, server and GraphQL errors. Server errors can occur in three different scenarios: parse, network and data errors. [`apollo-link-error`](error.html) provides an [interface](error.html#Usage) for handling these errors. This list describes the scenarios that cause different errors:\n\n* _Client parse error_: the request body is not-serializable due to circular references for example\n* _Server parse error_: the response from the server cannot be parsed ([response.json()](https://developer.mozilla.org/en-US/docs/Web/API/Body/json))\n* _Server network error_: the response has a status of >= 300\n* _Server data error_: the parse request does not contain `data` or `errors`\n* _GraphQL error_: an objects in the `errors` array for a 200 level status\n\nSince many server implementations can return a valid GraphQL result on a server network error, the thrown `Error` object contains the parsed server result. A server data error also receives the parsed result.\n\nThe table below provides a summary of error, `Observable` method called by the HTTP link, and type of error thrown for each failure:\n\n| Error          | Callback | Error Type         |\n| -------------- | :------: | ------------------ |\n| Client Parse   | `error`  | `ClientParseError` |\n| Server Parse   | `error`  | `ServerParseError` |\n| Server Network | `error`  | `ServerError`      |\n| Server Data    | `error`  | `ServerError`      |\n| GraphQL Error  |  `next`  | `Object`           |\n\nAll error types inherit the `name`, `message`, and nullable `stack` properties from the generic javascript [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n```js\n//type ClientParseError\n{\n  parseError: Error;                // Error returned from response.json()\n};\n\n//type ServerParseError\n{\n  response: Response;               // Object returned from fetch()\n  statusCode: number;               // HTTP status code\n  bodyText: string                  // text that was returned from server\n};\n\n//type ServerError\n{\n  result: Record<string, any>;      // Parsed object from server response\n  response: Response;               // Object returned from fetch()\n  statusCode: number;               // HTTP status code\n};\n```\n\n<h2 id=\"custom\">Custom fetching</h2>\n\nYou can use the `fetch` option when creating an http-link to do a lot of custom networking. This is useful if you want to modify the request based on the calculated headers  or calculate the uri based on the operation:\n\n<h3 id=\"custom-auth\">Custom auth</h3>\n\n```js\nconst customFetch = (uri, options) => {\n  const { header } = Hawk.client.header(\n    \"http://example.com:8000/resource/1?b=1&a=2\",\n    \"POST\",\n    { credentials: credentials, ext: \"some-app-data\" }\n  );\n  options.headers.Authorization = header;\n  return fetch(uri, options);\n};\n\nconst link = createHttpLink({ fetch: customFetch });\n```\n\n<h3 id=\"dynamic-uri\">Dynamic URI</h3>\n\n```js\nconst customFetch = (uri, options) => {\n  const { operationName } = JSON.parse(options.body);\n  return fetch(`${uri}/graph/graphql?opname=${operationName}`, options);\n};\n\nconst link = createHttpLink({ fetch: customFetch });\n```\n\n<h2 id=\"upgrading\">Upgrade: Apollo Client 1.0</h2>\n\nIf you previously used either `apollo-fetch` or `apollo-client`'s `createNetworkInterface`, you will need to change the way `use` and `useAfter` are implemented in your app. Both can be implemented by writing a custom link. It's important to note that regardless of whether you're adding middleware or afterware, your Http link will always be last in the chain since it's a terminating link.\n\n#### Middleware\n\n_Before_\n\n```js\n// before\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.use([\n  {\n    applyMiddleware(req, next) {\n      if (!req.options.headers) {\n        req.options.headers = {}; // Create the header object if needed.\n      }\n      req.options.headers[\"authorization\"] = localStorage.getItem(\"token\")\n        ? localStorage.getItem(\"token\")\n        : null;\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst middlewareLink = new ApolloLink((operation, forward) => {\n  operation.setContext({\n    headers: {\n      authorization: localStorage.getItem(\"token\") || null\n    }\n  });\n  return forward(operation);\n});\n\n// use with apollo-client\nconst link = middlewareLink.concat(httpLink);\n```\n\n#### Afterware (error)\n\n_Before_\n\n```js\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\nimport { logout } from \"./logout\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.useAfter([\n  {\n    applyAfterware({ response }, next) {\n      if (response.statusCode === 401) {\n        logout();\n      }\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\n\nimport { logout } from \"./logout\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst errorLink = onError(({ networkError }) => {\n  if (networkError.status === 401) {\n    logout();\n  }\n});\n\n// use with apollo-client\nconst link = errorLink.concat(httpLink);\n```\n\n#### Afterware (data manipulation)\n\n_Before_\n\n```js\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.useAfter([\n  {\n    applyAfterware({ response }, next) {\n      if (response.data.user.lastLoginDate) {\n        response.data.user.lastLoginDate = new Date(\n          response.data.user.lastLoginDate\n        );\n      }\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst addDatesLink = new ApolloLink((operation, forward) => {\n  return forward(operation).map(response => {\n    if (response.data.user.lastLoginDate) {\n      response.data.user.lastLoginDate = new Date(\n        response.data.user.lastLoginDate\n      );\n    }\n    return response;\n  });\n});\n\n// use with apollo-client\nconst link = addDatesLink.concat(httpLink);\n```\n",
      "readmeFilename": "README.md",
      "_id": "apollo-link-http@1.6.0-alpha.3",
      "_npmVersion": "6.2.0",
      "_nodeVersion": "10.6.0",
      "_npmUser": {
        "name": "mdg",
        "email": "npm@meteor.com"
      },
      "dist": {
        "integrity": "sha512-yNfJQnnnX+EhX+tBoN6E/HFn+BaVu+xX5tpZk6mL+2V+JVwrU3TwOWE+kLwuKsnr9E5NSDNHT9IPyYnKXrGPzw==",
        "shasum": "d8168202b1f0683ea7dcdc48c6f6d21cc590b32e",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.6.0-alpha.3.tgz",
        "fileCount": 17,
        "unpackedSize": 123815,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbWlMWCRA9TVsSAnZWagAAEakP/ipfwwVyhv6uufc2yzU0\n5alplBlYZgwQ5DGgh63TFiTmIwCr9urmZXeoR6UbD0TFj1OJuUVIOzI4f+wM\nMNw6cAvxy8N3pdnFOOE156o9PkU5aTDXa+049Krp71GsUFTZC6J0XA6M38hU\nD6SK3ZC8Mp5HWKhW/FoDyRMSK5FQVyK6pHhPnUElrCyOKkjFOCIuzHW4WI+x\nc3Z7X2G/yrn9PsgU1ptA/KxKVgpDfAd/9O0Kk5pQAA3RHUzGgOj6UYSVbYLM\ngXUGqdIhn6T+fvJ1HfkUNYm9Jki6fHGeQmYdkP4lJul3X8WRMx4oEilW5cMr\nQ+aTYcEjLtmv0iyroq38Ay9+2UMb+0rfAQqkDGv6F4Ex7saWQetznnViv23K\naO5vd1oyvhFd+YedkK0+KCywV1NY7KSq7qOlt0VHv58XALwnQB5qIq0Z4jqy\ngkK1ePkUrRTX47wdDi0/LqNBfikKLqp50tGm0bwRinqAwKh9jXy3wEg8uvYa\ncpn7Ju9ztke8RHMT7T2AuRXd+PVdVB6/IwGSW8FRB8Fs5EoTQmHHBIKHcgc/\ntIRpXY42PInUOHnHyBJHhDIeteE45O18BoHXwt9scyhLK5dTVEY1yGdOOLfn\nf7HZxyGPwVO6RXBe9a18ajGTB8914A7PhhUAoqGtg9MiuRR/IJ0mMCx5v2Uk\nt4Lu\r\n=Ev6A\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIE/RAI87Mk9X7NuYjG3bYecNnIE0IgOGGlSK7ylEMBw5AiA8UaAhT/xiHz0ueYG8JjKVx+CgpflxRaE4DKbVOKyLfw=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.6.0-alpha.3_1532646166310_0.27934338486462607"
      },
      "_hasShrinkwrap": false
    },
    "1.6.0-alpha.4": {
      "name": "apollo-link-http",
      "version": "1.6.0-alpha.4",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.2",
        "apollo-link-http-common": "^0.2.4"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0"
      },
      "devDependencies": {
        "@types/graphql": "0.12.6",
        "@types/jest": "22.2.3",
        "apollo-fetch": "0.7.0",
        "browserify": "16.2.2",
        "fetch-mock": "6.5.2",
        "graphql": "0.13.2",
        "graphql-tag": "2.9.2",
        "jest": "22.4.4",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.63.4",
        "ts-jest": "22.4.6",
        "tslint": "5.11.0",
        "typescript": "2.9.2",
        "uglify-js": "3.4.5"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ]
      },
      "readme": "---\ntitle: apollo-link-http\ndescription: Get GraphQL results over a network using HTTP fetch.\n---\n\nThe http link is the most common Apollo Link, a system of modular components\nfor GraphQL networking. If you haven't done so already, [read the Apollo Link\ndocs](https://www.apollographql.com/docs/link/#usage) to learn about the Apollo\nLink ecosystem and how to use this link with libraries like Apollo Client and\ngraphql-tools, or as a standalone client.\n\nThe http link is a terminating link that fetches GraphQL results from a GraphQL\nendpoint over an http connection. The http link supports both POST and GET\nrequests with the ability change the http options on a per query basis. This\ncan be used for authentication, persisted queries, dynamic uris, and other\ngranular updates.\n\n<h2 id=\"usage\">Usage</h2>\n\nImport and initialize this link in just two lines:\n\n```js\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst link = createHttpLink({ uri: \"/graphql\" });\n```\n\n<h2 id=\"options\">Options</h2>\n\nHTTP Link takes an object with some options on it to customize the behavior of the link. If your server supports it, the HTTP link can also send over metadata about the request in the extensions field. To enable this, pass `includeExtensions` as true. The options you can pass are outlined below:\n\n* `uri`: the URI key is a string endpoint or function resolving to an endpoint -- will default to \"/graphql\" if not specified\n* `includeExtensions`: allow passing the extensions field to your graphql server, defaults to false\n* `fetch`: a `fetch` compatible API for making a request\n* `headers`: an object representing values to be sent as headers on the request\n* `credentials`: a string representing the credentials policy you want for the fetch call\n* `fetchOptions`: any overrides of the fetch options argument to pass to the fetch call\n* `useGETForQueries`: set to `true` to use the HTTP `GET` method for queries (but not for mutations)\n\n<h2 id=\"fetch\">Fetch polyfill</h2>\n\nThe HTTP Link relies on having `fetch` present in your runtime environment. If you are running on react-native, or modern browsers, this should be no problem. If you are targeting an environment without `fetch` such as older browsers or the server, you will need to pass your own `fetch` to the link through the options. We recommend [`unfetch`](https://github.com/developit/unfetch) for older browsers and [`node-fetch`](https://github.com/bitinn/node-fetch) for running in Node.\n\n<h2 id=\"context\">Context</h2>\n\nThe Http Link uses the `headers` field on the context to allow passing headers to the HTTP request. It also supports the `credentials` field for defining credentials policy, `uri` for changing the endpoint dynamically, and `fetchOptions` to allow generic fetch overrides (i.e. `method: \"GET\"`). These options will override the same key if passed when creating the the link.\n\nNote that if you set `fetchOptions.method` to `GET`, the http link will follow the [standard GraphQL HTTP GET encoding](http://graphql.org/learn/serving-over-http/#get-request): the query, variables, operation name, and extensions will be passed as query parameters rather than in the HTTP request body. If you want mutations to continue to be sent as non-idempotent `POST` requests, set the top-level `useGETForQueries` option to `true` instead of setting `fetchOptions.method` to `GET`.\n\nThis link also attaches the response from the `fetch` operation on the context as `response` so you can access it from within another link.\n\n* `headers`: an object representing values to be sent as headers on the request\n* `credentials`: a string representing the credentials policy you want for the fetch call\n* `uri`: a string of the endpoint you want to fetch from\n* `fetchOptions`: any overrides of the fetch options argument to pass to the fetch call\n* `response`: this is the raw response from the fetch request after it is made.\n* `http`: this is an object to control fine grained aspects of the http link itself, such as persisted queries (see below)\n\n<h3 id=\"persisted-queries\">Persisted queries</h3>\n\nThe http link supports an advanced GraphQL feature called persisted queries. This allows you to not send the stringified query over the wire, but instead send some kind of identifier of the query. To support this you need to attach the id somewhere to the extensions field and pass the following options to the context:\n\n```js\noperation.setContext({\n  http: {\n    includeExtensions: true,\n    includeQuery: false,\n  }\n})\n```\n\nThe `http` object on context currently supports two keys:\n\n* `includeExtensions`: Send the extensions object for this request.\n* `includeQuery`: Don't send the `query` field for this request.\n\nOne way to use persisted queries is with [apollo-link-persisted-queries](https://github.com/apollographql/apollo-link-persisted-queries) and [Apollo Engine](https://www.apollographql.com/docs/engine/auto-persisted-queries.html).\n\n<h3 id=\"passing-context\">Passing context per query</h3>\n\nApollo Client supports passing context separately for every query, so you can do things like pass a special header for a single query invocation if you need to.\n\n```js\nimport HttpLink from \"apollo-link-http\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: \"/graphql\" }),\n  cache: new InMemoryCache()\n});\n\n// a query with apollo-client\nclient.query({\n  query: MY_QUERY,\n  context: {\n    // example of setting the headers with context per operation\n    headers: {\n      special: \"Special header value\"\n    }\n  }\n});\n```\n\n<h2 id=\"error\">Errors</h2>\n\nThe Http Link draws a distinction between client, server and GraphQL errors. Server errors can occur in three different scenarios: parse, network and data errors. [`apollo-link-error`](error.html) provides an [interface](error.html#Usage) for handling these errors. This list describes the scenarios that cause different errors:\n\n* _Client parse error_: the request body is not-serializable due to circular references for example\n* _Server parse error_: the response from the server cannot be parsed ([response.json()](https://developer.mozilla.org/en-US/docs/Web/API/Body/json))\n* _Server network error_: the response has a status of >= 300\n* _Server data error_: the parse request does not contain `data` or `errors`\n* _GraphQL error_: an objects in the `errors` array for a 200 level status\n\nSince many server implementations can return a valid GraphQL result on a server network error, the thrown `Error` object contains the parsed server result. A server data error also receives the parsed result.\n\nThe table below provides a summary of error, `Observable` method called by the HTTP link, and type of error thrown for each failure:\n\n| Error          | Callback | Error Type         |\n| -------------- | :------: | ------------------ |\n| Client Parse   | `error`  | `ClientParseError` |\n| Server Parse   | `error`  | `ServerParseError` |\n| Server Network | `error`  | `ServerError`      |\n| Server Data    | `error`  | `ServerError`      |\n| GraphQL Error  |  `next`  | `Object`           |\n\nAll error types inherit the `name`, `message`, and nullable `stack` properties from the generic javascript [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n```js\n//type ClientParseError\n{\n  parseError: Error;                // Error returned from response.json()\n};\n\n//type ServerParseError\n{\n  response: Response;               // Object returned from fetch()\n  statusCode: number;               // HTTP status code\n  bodyText: string                  // text that was returned from server\n};\n\n//type ServerError\n{\n  result: Record<string, any>;      // Parsed object from server response\n  response: Response;               // Object returned from fetch()\n  statusCode: number;               // HTTP status code\n};\n```\n\n<h2 id=\"custom\">Custom fetching</h2>\n\nYou can use the `fetch` option when creating an http-link to do a lot of custom networking. This is useful if you want to modify the request based on the calculated headers  or calculate the uri based on the operation:\n\n<h3 id=\"custom-auth\">Custom auth</h3>\n\n```js\nconst customFetch = (uri, options) => {\n  const { header } = Hawk.client.header(\n    \"http://example.com:8000/resource/1?b=1&a=2\",\n    \"POST\",\n    { credentials: credentials, ext: \"some-app-data\" }\n  );\n  options.headers.Authorization = header;\n  return fetch(uri, options);\n};\n\nconst link = createHttpLink({ fetch: customFetch });\n```\n\n<h3 id=\"dynamic-uri\">Dynamic URI</h3>\n\n```js\nconst customFetch = (uri, options) => {\n  const { operationName } = JSON.parse(options.body);\n  return fetch(`${uri}/graph/graphql?opname=${operationName}`, options);\n};\n\nconst link = createHttpLink({ fetch: customFetch });\n```\n\n<h2 id=\"upgrading\">Upgrade: Apollo Client 1.0</h2>\n\nIf you previously used either `apollo-fetch` or `apollo-client`'s `createNetworkInterface`, you will need to change the way `use` and `useAfter` are implemented in your app. Both can be implemented by writing a custom link. It's important to note that regardless of whether you're adding middleware or afterware, your Http link will always be last in the chain since it's a terminating link.\n\n#### Middleware\n\n_Before_\n\n```js\n// before\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.use([\n  {\n    applyMiddleware(req, next) {\n      if (!req.options.headers) {\n        req.options.headers = {}; // Create the header object if needed.\n      }\n      req.options.headers[\"authorization\"] = localStorage.getItem(\"token\")\n        ? localStorage.getItem(\"token\")\n        : null;\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst middlewareLink = new ApolloLink((operation, forward) => {\n  operation.setContext({\n    headers: {\n      authorization: localStorage.getItem(\"token\") || null\n    }\n  });\n  return forward(operation);\n});\n\n// use with apollo-client\nconst link = middlewareLink.concat(httpLink);\n```\n\n#### Afterware (error)\n\n_Before_\n\n```js\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\nimport { logout } from \"./logout\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.useAfter([\n  {\n    applyAfterware({ response }, next) {\n      if (response.statusCode === 401) {\n        logout();\n      }\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\n\nimport { logout } from \"./logout\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst errorLink = onError(({ networkError }) => {\n  if (networkError.status === 401) {\n    logout();\n  }\n});\n\n// use with apollo-client\nconst link = errorLink.concat(httpLink);\n```\n\n#### Afterware (data manipulation)\n\n_Before_\n\n```js\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.useAfter([\n  {\n    applyAfterware({ response }, next) {\n      if (response.data.user.lastLoginDate) {\n        response.data.user.lastLoginDate = new Date(\n          response.data.user.lastLoginDate\n        );\n      }\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst addDatesLink = new ApolloLink((operation, forward) => {\n  return forward(operation).map(response => {\n    if (response.data.user.lastLoginDate) {\n      response.data.user.lastLoginDate = new Date(\n        response.data.user.lastLoginDate\n      );\n    }\n    return response;\n  });\n});\n\n// use with apollo-client\nconst link = addDatesLink.concat(httpLink);\n```\n",
      "readmeFilename": "README.md",
      "_id": "apollo-link-http@1.6.0-alpha.4",
      "_npmVersion": "6.2.0",
      "_nodeVersion": "10.6.0",
      "_npmUser": {
        "name": "mdg",
        "email": "npm@meteor.com"
      },
      "dist": {
        "integrity": "sha512-jfa0eellckMsLOBDHypmsLDQxABQRLzRTyxxJFuKHKdBOAdCb9Y9Pv0atj04xji1U7Je9LXUO2sIBlfqh7wzIA==",
        "shasum": "941afe765f5bcea6ed86fbf69b2315a8dd1bef28",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.6.0-alpha.4.tgz",
        "fileCount": 17,
        "unpackedSize": 124551,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbWmI4CRA9TVsSAnZWagAAGfEP/jnl3W1TWCWqSgyBWzfR\n3dAfaK1ihLwM9Ab9qhQtFy6tTTnSA3TgepIyhLn1sSaZ/YzeCcmst6kvVc4e\nlBmTjo3bzX0zNNnZEAEdFmupyryReRKHsCi6RIBGJwRDPGtWIH8JNU2kGncY\na8mS4wpUt4h2J9qbQSUWGgbWEf6F0F4kch2I6Z9ma9jTyPgHNpW1fV65hIxa\nYJc7+78ljMlZ+ApXrP2jf9OpC5VlTjLTeYikgzzWdHBKGNrbt7xlZfkVmy8G\n2tZKbFb0EOeOcdB6QcB9PhSbY2K6NLYD+mqMsQZ8GXo9RalefaPAPztLG0kI\nPszPUynWwhIzwxNaEUMDxE9Q+cgwLDg7S1p+a2pCdelarWkOE++Kat5K6WKk\nCpO24Rx/19KJ7g17WspVJDF09OvcQtSl61aYGsTm++45rpNooAQbFF1k8yM/\nyay2OxkD78NWNkGgIncKfN7nOIqulWMsCgf7yzOw+gBvfeSE2bfbwsFdwGet\nAENmMmGFfYkFR7DwyYQ2X8YpzRGjH/xAGevg3RE4uNJw1R8jAQyFUfuFhFOG\nkCT7UEY1LJTXvKvAlSnp4OuuOktK/LUatsu6AjPkD1trhTgVzR748mcyi4Pg\n1qMHcf420XCJRuuSV4TCxsjr7lyF7Iy0AjH3hHN5CM7IYnScyurEttOeX12G\naQyW\r\n=TWae\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBvZI4zvtcF/kDJxaVkBKRL1XC19/0yqV76zxCi3QKRtAiEAmoQDuLMs5vDLheYJp51+lwDxiBXHIKVjWa/zNV89Ndk="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.6.0-alpha.4_1532650039965_0.7423111152467432"
      },
      "_hasShrinkwrap": false
    },
    "1.6.0-alpha.5": {
      "name": "apollo-link-http",
      "version": "1.6.0-alpha.5",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.2",
        "apollo-link-http-common": "^0.2.4"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0"
      },
      "devDependencies": {
        "@types/graphql": "0.12.6",
        "@types/jest": "22.2.3",
        "apollo-fetch": "0.7.0",
        "browserify": "16.2.2",
        "fetch-mock": "6.5.2",
        "graphql": "0.13.2",
        "graphql-tag": "2.9.2",
        "jest": "22.4.4",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.63.4",
        "ts-jest": "22.4.6",
        "tslint": "5.11.0",
        "typescript": "2.9.2",
        "uglify-js": "3.4.5"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ]
      },
      "readme": "---\ntitle: apollo-link-http\ndescription: Get GraphQL results over a network using HTTP fetch.\n---\n\nThe http link is the most common Apollo Link, a system of modular components\nfor GraphQL networking. If you haven't done so already, [read the Apollo Link\ndocs](https://www.apollographql.com/docs/link/#usage) to learn about the Apollo\nLink ecosystem and how to use this link with libraries like Apollo Client and\ngraphql-tools, or as a standalone client.\n\nThe http link is a terminating link that fetches GraphQL results from a GraphQL\nendpoint over an http connection. The http link supports both POST and GET\nrequests with the ability change the http options on a per query basis. This\ncan be used for authentication, persisted queries, dynamic uris, and other\ngranular updates.\n\n<h2 id=\"usage\">Usage</h2>\n\nImport and initialize this link in just two lines:\n\n```js\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst link = createHttpLink({ uri: \"/graphql\" });\n```\n\n<h2 id=\"options\">Options</h2>\n\nHTTP Link takes an object with some options on it to customize the behavior of the link. If your server supports it, the HTTP link can also send over metadata about the request in the extensions field. To enable this, pass `includeExtensions` as true. The options you can pass are outlined below:\n\n* `uri`: the URI key is a string endpoint or function resolving to an endpoint -- will default to \"/graphql\" if not specified\n* `includeExtensions`: allow passing the extensions field to your graphql server, defaults to false\n* `fetch`: a `fetch` compatible API for making a request\n* `headers`: an object representing values to be sent as headers on the request\n* `credentials`: a string representing the credentials policy you want for the fetch call\n* `fetchOptions`: any overrides of the fetch options argument to pass to the fetch call\n* `useGETForQueries`: set to `true` to use the HTTP `GET` method for queries (but not for mutations)\n\n<h2 id=\"fetch\">Fetch polyfill</h2>\n\nThe HTTP Link relies on having `fetch` present in your runtime environment. If you are running on react-native, or modern browsers, this should be no problem. If you are targeting an environment without `fetch` such as older browsers or the server, you will need to pass your own `fetch` to the link through the options. We recommend [`unfetch`](https://github.com/developit/unfetch) for older browsers and [`node-fetch`](https://github.com/bitinn/node-fetch) for running in Node.\n\n<h2 id=\"context\">Context</h2>\n\nThe Http Link uses the `headers` field on the context to allow passing headers to the HTTP request. It also supports the `credentials` field for defining credentials policy, `uri` for changing the endpoint dynamically, and `fetchOptions` to allow generic fetch overrides (i.e. `method: \"GET\"`). These options will override the same key if passed when creating the the link.\n\nNote that if you set `fetchOptions.method` to `GET`, the http link will follow the [standard GraphQL HTTP GET encoding](http://graphql.org/learn/serving-over-http/#get-request): the query, variables, operation name, and extensions will be passed as query parameters rather than in the HTTP request body. If you want mutations to continue to be sent as non-idempotent `POST` requests, set the top-level `useGETForQueries` option to `true` instead of setting `fetchOptions.method` to `GET`.\n\nThis link also attaches the response from the `fetch` operation on the context as `response` so you can access it from within another link.\n\n* `headers`: an object representing values to be sent as headers on the request\n* `credentials`: a string representing the credentials policy you want for the fetch call\n* `uri`: a string of the endpoint you want to fetch from\n* `fetchOptions`: any overrides of the fetch options argument to pass to the fetch call\n* `response`: this is the raw response from the fetch request after it is made.\n* `http`: this is an object to control fine grained aspects of the http link itself, such as persisted queries (see below)\n\n<h3 id=\"persisted-queries\">Persisted queries</h3>\n\nThe http link supports an advanced GraphQL feature called persisted queries. This allows you to not send the stringified query over the wire, but instead send some kind of identifier of the query. To support this you need to attach the id somewhere to the extensions field and pass the following options to the context:\n\n```js\noperation.setContext({\n  http: {\n    includeExtensions: true,\n    includeQuery: false,\n  }\n})\n```\n\nThe `http` object on context currently supports two keys:\n\n* `includeExtensions`: Send the extensions object for this request.\n* `includeQuery`: Don't send the `query` field for this request.\n\nOne way to use persisted queries is with [apollo-link-persisted-queries](https://github.com/apollographql/apollo-link-persisted-queries) and [Apollo Engine](https://www.apollographql.com/docs/engine/auto-persisted-queries.html).\n\n<h3 id=\"passing-context\">Passing context per query</h3>\n\nApollo Client supports passing context separately for every query, so you can do things like pass a special header for a single query invocation if you need to.\n\n```js\nimport HttpLink from \"apollo-link-http\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: \"/graphql\" }),\n  cache: new InMemoryCache()\n});\n\n// a query with apollo-client\nclient.query({\n  query: MY_QUERY,\n  context: {\n    // example of setting the headers with context per operation\n    headers: {\n      special: \"Special header value\"\n    }\n  }\n});\n```\n\n<h2 id=\"error\">Errors</h2>\n\nThe Http Link draws a distinction between client, server and GraphQL errors. Server errors can occur in three different scenarios: parse, network and data errors. [`apollo-link-error`](error.html) provides an [interface](error.html#Usage) for handling these errors. This list describes the scenarios that cause different errors:\n\n* _Client parse error_: the request body is not-serializable due to circular references for example\n* _Server parse error_: the response from the server cannot be parsed ([response.json()](https://developer.mozilla.org/en-US/docs/Web/API/Body/json))\n* _Server network error_: the response has a status of >= 300\n* _Server data error_: the parse request does not contain `data` or `errors`\n* _GraphQL error_: an objects in the `errors` array for a 200 level status\n\nSince many server implementations can return a valid GraphQL result on a server network error, the thrown `Error` object contains the parsed server result. A server data error also receives the parsed result.\n\nThe table below provides a summary of error, `Observable` method called by the HTTP link, and type of error thrown for each failure:\n\n| Error          | Callback | Error Type         |\n| -------------- | :------: | ------------------ |\n| Client Parse   | `error`  | `ClientParseError` |\n| Server Parse   | `error`  | `ServerParseError` |\n| Server Network | `error`  | `ServerError`      |\n| Server Data    | `error`  | `ServerError`      |\n| GraphQL Error  |  `next`  | `Object`           |\n\nAll error types inherit the `name`, `message`, and nullable `stack` properties from the generic javascript [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n```js\n//type ClientParseError\n{\n  parseError: Error;                // Error returned from response.json()\n};\n\n//type ServerParseError\n{\n  response: Response;               // Object returned from fetch()\n  statusCode: number;               // HTTP status code\n  bodyText: string                  // text that was returned from server\n};\n\n//type ServerError\n{\n  result: Record<string, any>;      // Parsed object from server response\n  response: Response;               // Object returned from fetch()\n  statusCode: number;               // HTTP status code\n};\n```\n\n<h2 id=\"custom\">Custom fetching</h2>\n\nYou can use the `fetch` option when creating an http-link to do a lot of custom networking. This is useful if you want to modify the request based on the calculated headers  or calculate the uri based on the operation:\n\n<h3 id=\"custom-auth\">Custom auth</h3>\n\n```js\nconst customFetch = (uri, options) => {\n  const { header } = Hawk.client.header(\n    \"http://example.com:8000/resource/1?b=1&a=2\",\n    \"POST\",\n    { credentials: credentials, ext: \"some-app-data\" }\n  );\n  options.headers.Authorization = header;\n  return fetch(uri, options);\n};\n\nconst link = createHttpLink({ fetch: customFetch });\n```\n\n<h3 id=\"dynamic-uri\">Dynamic URI</h3>\n\n```js\nconst customFetch = (uri, options) => {\n  const { operationName } = JSON.parse(options.body);\n  return fetch(`${uri}/graph/graphql?opname=${operationName}`, options);\n};\n\nconst link = createHttpLink({ fetch: customFetch });\n```\n\n<h2 id=\"upgrading\">Upgrade: Apollo Client 1.0</h2>\n\nIf you previously used either `apollo-fetch` or `apollo-client`'s `createNetworkInterface`, you will need to change the way `use` and `useAfter` are implemented in your app. Both can be implemented by writing a custom link. It's important to note that regardless of whether you're adding middleware or afterware, your Http link will always be last in the chain since it's a terminating link.\n\n#### Middleware\n\n_Before_\n\n```js\n// before\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.use([\n  {\n    applyMiddleware(req, next) {\n      if (!req.options.headers) {\n        req.options.headers = {}; // Create the header object if needed.\n      }\n      req.options.headers[\"authorization\"] = localStorage.getItem(\"token\")\n        ? localStorage.getItem(\"token\")\n        : null;\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst middlewareLink = new ApolloLink((operation, forward) => {\n  operation.setContext({\n    headers: {\n      authorization: localStorage.getItem(\"token\") || null\n    }\n  });\n  return forward(operation);\n});\n\n// use with apollo-client\nconst link = middlewareLink.concat(httpLink);\n```\n\n#### Afterware (error)\n\n_Before_\n\n```js\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\nimport { logout } from \"./logout\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.useAfter([\n  {\n    applyAfterware({ response }, next) {\n      if (response.statusCode === 401) {\n        logout();\n      }\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\n\nimport { logout } from \"./logout\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst errorLink = onError(({ networkError }) => {\n  if (networkError.status === 401) {\n    logout();\n  }\n});\n\n// use with apollo-client\nconst link = errorLink.concat(httpLink);\n```\n\n#### Afterware (data manipulation)\n\n_Before_\n\n```js\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.useAfter([\n  {\n    applyAfterware({ response }, next) {\n      if (response.data.user.lastLoginDate) {\n        response.data.user.lastLoginDate = new Date(\n          response.data.user.lastLoginDate\n        );\n      }\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst addDatesLink = new ApolloLink((operation, forward) => {\n  return forward(operation).map(response => {\n    if (response.data.user.lastLoginDate) {\n      response.data.user.lastLoginDate = new Date(\n        response.data.user.lastLoginDate\n      );\n    }\n    return response;\n  });\n});\n\n// use with apollo-client\nconst link = addDatesLink.concat(httpLink);\n```\n",
      "readmeFilename": "README.md",
      "_id": "apollo-link-http@1.6.0-alpha.5",
      "_npmVersion": "6.2.0",
      "_nodeVersion": "10.6.0",
      "_npmUser": {
        "name": "mdg",
        "email": "npm@meteor.com"
      },
      "dist": {
        "integrity": "sha512-IoGoYf5a/hndb2tWMqEiGYfP9gVMm6SLCO0SGVDFCQzcPHA2e8eZ/RYbRR/2StVDvOYGXVX6g7MeCt/MZrAdrg==",
        "shasum": "1b50e34304a2f29a669a754fac0fcdec14f23ca7",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.6.0-alpha.5.tgz",
        "fileCount": 17,
        "unpackedSize": 124602,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbWmyeCRA9TVsSAnZWagAATA0P/18Of10/xTZEYsGQCYB2\nqZ//64N8ITwTBWvtUtPMfx2HyjA1SIwQcZSUk2WWtvGm5p2V1Vxdzgr+IlpM\n8fE1Wet209/uZtNJyM5TWYQYIir9U8zQCQYQHhb7KSIuPM9gCnyebiqBKRJm\nSKFiQie3CYRgiYWDpcSv3Vr/8zqfYO3UXjlsFokysjs2nJ35HBZ8iThh97SJ\noEy+I+4iN9FrJSqUsBHWcr870Ihsxwbhv4pdGeHqp8KKjQmgssJCFso0/1WY\n39Ex3T5ibCuUayB3jhfdUb67fHEiAXkWnZawn5WyDBXsqWogU9e5/tNjxGfj\nfuyLQK5vWwN7iCC95l1OpcP06LPzeTvLtD26obs/GklM1XqvMr6V0I4iiF7T\nuAMh4KxDr/9NQvgIMSe05posc6hVAqRPv0BzIU/ZHjAw9DQnVJNrRuqCnOdc\nZSDZV/G54gRNCy9aVglJGyfNY3oTwmbUY7nF81ZVeXFXpH2febrbK2Ia0jUy\nX4Etu276TzCj1GVuQ3Jp5xQiampC6Y1xXEXOrHtFmrMvCMsUkwivDp+hQmSg\nu7wljJQBkTI6wjNhRcBin4UTIMUEd+zeK8BMZo7M/t1ijEpiRJRHdKus1njn\nLivKAX4eFlqTvM82o5K/mzASOfSdhjczS9fD5CpDqx5396hiv9/if1Oxhha2\nVImU\r\n=okFY\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDMhRZ5rsfqfj6zTlhWQD4gScSnakys3iO4nnfYVkLtwgIgQ3YThR1eGkHOavC/RWLzauxI/MTRXjVYn5PBu7eJbNU="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.6.0-alpha.5_1532652702776_0.04245655569482376"
      },
      "_hasShrinkwrap": false
    },
    "1.5.5": {
      "name": "apollo-link-http",
      "version": "1.5.5",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.3",
        "apollo-link-http-common": "^0.2.5"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0"
      },
      "devDependencies": {
        "@types/graphql": "14.0.0",
        "@types/jest": "22.2.3",
        "apollo-fetch": "0.7.0",
        "browserify": "16.2.2",
        "fetch-mock": "6.5.2",
        "graphql": "14.0.2",
        "graphql-tag": "2.9.2",
        "jest": "22.4.4",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.65.2",
        "ts-jest": "22.4.6",
        "tslint": "5.11.0",
        "typescript": "3.0.3",
        "uglify-js": "3.4.9"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ],
        "testURL": "http://localhost"
      },
      "_id": "apollo-link-http@1.5.5",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.11.2",
      "_npmUser": {
        "name": "mdg",
        "email": "npm@meteor.com"
      },
      "dist": {
        "integrity": "sha512-C5N6N/mRwmepvtzO27dgMEU3MMtRKSqcljBkYNZmWwH11BxkUQ5imBLPM3V4QJXNE7NFuAQAB5PeUd4ligivTQ==",
        "shasum": "7dbe851821771ad67fa29e3900c57f38cbd80da8",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.5.tgz",
        "fileCount": 17,
        "unpackedSize": 95425,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbnNI0CRA9TVsSAnZWagAA/dkP/R9jCTwDH7tSAlONM1id\nMf8M0ts+XovyQ/3pz2Fr6PWTIUHRdTDpRvKZ/PvHXGwMVB7SGxL91kM+EuaB\nKBpfTmC2vOpW8g0pzWEg+BJAzgproY0XRNF0oSYBu6HOfwyXeH844Y/sGGZz\nldS3Tc57I8eztt6XB6UntfRekeD2uftGCFiVjLVD0qFv4MpMAYCupsm7fUbE\nX0o59+CceL2Y9iy8Rt6ItsSB+hq22ftxMxdjYKrwS+icOBBjN4lAEjreQygg\nX8V4JGW5G96BzHdWBM73kbj/qtFw17AJLn12G1KoDzcYK0OVD4gZ7tnbkj2H\nIGj5qWSEuDF6pSMeF3QbD/+eu20YcboqLb/Hp1YA9WK+cvC5evwtxFWdq16U\nOqfOtnbxcU+DkOqkMPnUPvLjZ6u//Sds8g4AQrP60IpL0jvfVf7+iukhKeu7\nSRmbNtXyc5bwz3egGmfnOysJ4jqJJEDX+hufRfT0Ul+1ewZUgylIJr8D8Rot\nK5jA67wZ+6sEn5jCcNSmKAeEra9CiaDNsUuXPFKIOvytJrYPzsu07/ZFkwiw\ne37IjmquTd0SQHaVJmCt76XkoDKzRnsMYgXqvkMEBhTv4zXIKq1fXBGdFPn6\n8PI2DzzMxPMSZ0m5o4tOJVxLC/pg0877LFO76o0O8KbE4uwGphYFQrVhxopT\n/KUF\r\n=i9FG\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCJKLTTfTObceUr+qoZIsxURA2a9hQmxjuF9D6ucysRcAIgXbdRqNbsNKGMhc2K4itUd+4Jm85CUONRNjbOoLf9Gt0="
          }
        ]
      },
      "maintainers": [
        {
          "name": "evanshauser",
          "email": "evanshauser@gmail.com"
        },
        {
          "name": "jbaxleyiii",
          "email": "james@meteor.com"
        },
        {
          "name": "mdg",
          "email": "npm@meteor.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.5_1537004084254_0.6614935652898419"
      },
      "_hasShrinkwrap": false
    },
    "1.5.6": {
      "name": "apollo-link-http",
      "version": "1.5.6",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.4",
        "apollo-link-http-common": "^0.2.6"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0"
      },
      "devDependencies": {
        "@types/graphql": "14.0.3",
        "@types/jest": "22.2.3",
        "apollo-fetch": "0.7.0",
        "browserify": "16.2.3",
        "fetch-mock": "6.5.2",
        "graphql": "14.0.2",
        "graphql-tag": "2.10.0",
        "jest": "22.4.4",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.67.3",
        "ts-jest": "22.4.6",
        "tslint": "5.11.0",
        "typescript": "3.0.3",
        "uglify-js": "3.4.9"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ],
        "testURL": "http://localhost"
      },
      "_id": "apollo-link-http@1.5.6",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "8.12.0",
      "_npmUser": {
        "name": "apollo-bot",
        "email": "npm@apollographql.com"
      },
      "dist": {
        "integrity": "sha512-F+KbIvKxpyUUGhx69w9fCNBPFOAT8XeHZGOwSilz12XN7JVSSXHqje86U/jKPgAmfCe1RZDrdgzkNp0zUJFNWw==",
        "shasum": "7d6952998870c2fc9e6e7fcff70b5a2bc3b1c448",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.6.tgz",
        "fileCount": 17,
        "unpackedSize": 101629,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb9Mm/CRA9TVsSAnZWagAAkPgP/1tK4bSNKU8VuvtPaCch\n2dLDy4szx6w/DjXAigNxC53Yf3PRy4i0gAQcEVv42ZUlif2lsyy3JnS9I15E\nSlTazjqenFNnBboxfa1MFTjtIsOkNiw0Rehg3CZdbjfV1z7Bxh7lYbze2TY8\nC1gDDn5ck335e3uu2P2EZbU5JECUa/VcO+KCpapjJjVs6ZuAFlJetcC9aW+D\nypCT/7ovoz6RBMPOzhkbmCSkCoUxNJz+ax63RvAH+gN1K7ogQ5MHhjss2x8M\nNL1Krrt/O30YVMgwB/r25i2Eux/kDCR3+li/sF1Hqd8BRBzZW39dOsHyD+f4\n332BDgeatKWWRkVEqPr4VN0SDaTr6Mw2dGwgNom0fEA8BuyRlO8M9chRHLwA\n2XV5ojVzol9gBpSALiyvEG5dh5KH6Ah11z71bHfTc9I/TeV++90qVD7KHwmW\nK4ZwAFcO3CMYRBoHXR0v208DpCIUmRpWN6uB9poYHuzO+AzwTYzQC65ym5Ra\nwpPkeXLA+wtaAiu/ZDiwRWM8GNtYuteUMfg7FzhR+wn4roPH2A8Q/d5LW8z2\nUOHzahywgdoQhsbER1D02xWeRzoAafKsaCnJaq0NJnCf7I7WKIsM0Flp4Ahs\nMJ8N2Pe/hb7PElErrkOIKHaJDYhjaZB2U3bgD24l2+hNhjx6C56jNg3+pYNr\nQm8Q\r\n=YnFU\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDyiXgQ5UIfhh9bMOI73DAoZf3//X2OMmwmyjL7X4sTbwIgLEDiF5SrVwiiNFRj+smI0Lhwf2lIMrzuszdf4+WkSV8="
          }
        ]
      },
      "maintainers": [
        {
          "email": "npm@apollographql.com",
          "name": "apollo-bot"
        },
        {
          "email": "evanshauser@gmail.com",
          "name": "evanshauser"
        },
        {
          "email": "james@meteor.com",
          "name": "jbaxleyiii"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.6_1542769086980_0.31502182333059126"
      },
      "_hasShrinkwrap": false
    },
    "1.5.7": {
      "name": "apollo-link-http",
      "version": "1.5.7",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.4",
        "apollo-link-http-common": "^0.2.6"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0"
      },
      "devDependencies": {
        "@types/graphql": "14.0.3",
        "@types/jest": "22.2.3",
        "apollo-fetch": "0.7.0",
        "browserify": "16.2.3",
        "fetch-mock": "6.5.2",
        "graphql": "14.0.2",
        "graphql-tag": "2.10.0",
        "jest": "22.4.4",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.67.3",
        "ts-jest": "22.4.6",
        "tslint": "5.11.0",
        "typescript": "3.0.3",
        "uglify-js": "3.4.9"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ],
        "testURL": "http://localhost"
      },
      "_id": "apollo-link-http@1.5.7",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "8.12.0",
      "_npmUser": {
        "name": "apollo-bot",
        "email": "npm@apollographql.com"
      },
      "dist": {
        "integrity": "sha512-EZ9nynHjwYCpGYP5IsRrZGTWidUVpshk7MuSG4joqGtJMwpFCgMQz+y3BHdUhowHtfAd9z60XmeOTG9FJolb8A==",
        "shasum": "098615c427a910ec8c5817476bbabe68c586b339",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.7.tgz",
        "fileCount": 17,
        "unpackedSize": 103174,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb9uzZCRA9TVsSAnZWagAATssP/3cCLWXO5amVBUCOOkhk\nThbAfU6szVbLRolUEdbCEd0KZXEsrIBJK7id6PS9fGCUQ7o9QM3c0OiBUeiL\nmyPBUco+4kfNmoKx4rN1B3n82hkiZfCsxpmx33zzmz6r42ilA4e1o5Aq9rU0\noWtOqWUymFwZ0jNxM+RDdyBd88ic0ORQg0hgg358RtGpm1gW7335lWF2IaQy\nfdW6Nloj6jp7oXy23AtBo45zgvtQuGyZ0KruU2BF5pI7Fc8VXBJ5RPlgGoqu\nOYMBbgCe+nXJLPRpGXa6fwWptLsJahUCarFcUioyNyDMPkbvoBS1s7pi+ypC\nZE5JdTGZ07B2UG2EfzK/X5BALjpXB4qSbw2vECNjN/IabrpYlUqXoEfy4cLx\nDR3xBOHtdJmTvsHxQUOME8oaIHMU39rwzacwH+FhPfxpQ6vEEbu/C3ZSORAs\nc6lG8tUkTGaxpKK+WO8mYHCGHPMOKTTXLEccsIgBIiesIKneCRwyHhWDrPKQ\n/UGoKnANcgf1jBov6feVVRfdIC62D99zRadzPbM/G34GfUHDBxkaDMXaI7VI\nsUO5TXUrVxDsmVZJspVifuELGCCfMWxPINDGMZ+OLahod95h8oCnPXuw5DRQ\ngNhQ0oygE+fJB0sOsGAOJ2IuOmI5WvdZ6cLmjVzRFEsfpoG4SaPOvp42Oc1y\nWf7Z\r\n=T1us\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHfHlozec7h3HSQZJ9OkF9t9Vxa4+ZsWpO4tEhun2/RnAiEAy5CNOh1Ug1CQGvNxQbnZ3q8GN5Zz/f85baaWnxpxtBo="
          }
        ]
      },
      "maintainers": [
        {
          "email": "npm@apollographql.com",
          "name": "apollo-bot"
        },
        {
          "email": "evanshauser@gmail.com",
          "name": "evanshauser"
        },
        {
          "email": "james@meteor.com",
          "name": "jbaxleyiii"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.7_1542909145158_0.047952099393135494"
      },
      "_hasShrinkwrap": false
    },
    "1.5.8": {
      "name": "apollo-link-http",
      "version": "1.5.8",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.5",
        "apollo-link-http-common": "^0.2.7"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0"
      },
      "devDependencies": {
        "@types/graphql": "14.0.3",
        "@types/jest": "22.2.3",
        "apollo-fetch": "0.7.0",
        "browserify": "16.2.3",
        "fetch-mock": "6.5.2",
        "graphql": "14.0.2",
        "graphql-tag": "2.10.0",
        "jest": "22.4.4",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.67.4",
        "ts-jest": "22.4.6",
        "tslint": "5.11.0",
        "typescript": "3.0.3",
        "uglify-js": "3.4.9"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ],
        "testURL": "http://localhost"
      },
      "_id": "apollo-link-http@1.5.8",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "8.12.0",
      "_npmUser": {
        "name": "apollo-bot",
        "email": "npm@apollographql.com"
      },
      "dist": {
        "integrity": "sha512-wkmj9fL5B4QYjw7q7w0GyetfqQKnA0QXGoh+/UK+LXJ+jLEz6JP2eLxrwgpX7o4ID6Og7l1JfeVxJE5fV1j2bg==",
        "shasum": "1be551338ca00db4082114221b409e0470fcc7e6",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.8.tgz",
        "fileCount": 17,
        "unpackedSize": 104170,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcErLCCRA9TVsSAnZWagAAOPcP/3pzk0edQI03ntL8BA72\nOeJ66sjYHN6MUoVkfuPWaHvI/Mp13U++LTRr/gV3VUsXKEgRW1LsHE7P7D5i\ntMwgB8ZizLaBesC9PmT1D+kGDTbw96HEfnj0YBUUuIwcelvB/h8BYSx5r+y2\nLixvEtJ5z5Bh+W4hNpihEU0i68B+JWN+uMGn2S04dZzhnvJlEsgzOPBV70Fx\n8uocSoVxGKaPBzYyGbgwiLi/Rcj+/mB7qssavKqKQ9Yl/bx5wPcnAYdV+gRN\naJdA5ibVBjga+pxqrHfwLVdoImuLdQeQ3FnA3d5bFNUCI53vfc0TdWTLk+ys\nC99aDtU0FpaIAF+DD9YTZw0Yas7CYy6rL4KgNO8nVbcAVsnKQQHNXfrt4WZh\n7QoMfHz/UEa5rNriy8uSbEuK51GfN+vi10WpLJJe7GllCU8LMKwGmQWDV4Zx\n42rsluTyk/0t9IhP7tPW/nghr8jDlL4z3U8xKfNbRfkPKJCUgz/CEI8D0ZLD\nkWY48hXaO61Y86Zd4Mgif+fQg+yPIILyLF8WjvcReodvZa+z+BGlFwJWhqwU\nQ5XDqDsOucphHFibskbpANqDDeev9Uaq0flXt30AexlUhXI9ojk5aXCUDlv9\nY4K9Q2Kf3lEmbsh00KpFXHzkeTNuL2T5vVwfJtIdBO8oLXjR7tHCSpeatlOO\nkOHm\r\n=zPLu\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDYi+35/T0zBcz1BKeieaSgjZWUp+RQnDwzwtndkrnIfQIhAKjrFKyP14ZMJG54Jy8B56r0CRfzGB6nMqCyGlE7rMaU"
          }
        ]
      },
      "maintainers": [
        {
          "email": "npm@apollographql.com",
          "name": "apollo-bot"
        },
        {
          "email": "evanshauser@gmail.com",
          "name": "evanshauser"
        },
        {
          "email": "james@meteor.com",
          "name": "jbaxleyiii"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.8_1544729281691_0.7595126412043749"
      },
      "_hasShrinkwrap": false
    },
    "1.5.9": {
      "name": "apollo-link-http",
      "version": "1.5.9",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/bundle.umd.js",
      "module": "./lib/index.js",
      "jsnext:main": "./lib/index.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p .",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint --type-check -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.6",
        "apollo-link-http-common": "^0.2.8"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0"
      },
      "devDependencies": {
        "@types/graphql": "14.0.3",
        "@types/jest": "22.2.3",
        "apollo-fetch": "0.7.0",
        "browserify": "16.2.3",
        "fetch-mock": "6.5.2",
        "graphql": "14.0.2",
        "graphql-tag": "2.10.0",
        "jest": "22.4.4",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.1",
        "rollup": "0.67.4",
        "ts-jest": "22.4.6",
        "tslint": "5.11.0",
        "typescript": "3.0.3",
        "uglify-js": "3.4.9"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "mapCoverage": true,
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ],
        "testURL": "http://localhost"
      },
      "_id": "apollo-link-http@1.5.9",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "8.12.0",
      "_npmUser": {
        "name": "apollo-bot",
        "email": "npm@apollographql.com"
      },
      "dist": {
        "integrity": "sha512-9tJy2zGm4Cm/1ycScDNZJe51dgnTSfKx7pKIgPZmcxkdDpgUY2DZitDH6ZBv4yp9z8MC9Xr9wgwc29s6hcadUQ==",
        "shasum": "9046f5640a94c8a8b508a39e0f2c628b781baecc",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.9.tgz",
        "fileCount": 11,
        "unpackedSize": 60656,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcFF8ACRA9TVsSAnZWagAATzgP/0MthR1koSQSyVShDR4o\nyD/Rbs6Nbs+2XAJF9AObalTAGLTF8n8Zy9sKM0WaLVkQOLViTB2NWZA0HYxd\n8jMZlnvt5bKGetQnNZT1R7YWYJhZ0qs04R/0GzixNJTqivHfOk4TvFKDHHWM\n+R9Zg79OXAVO9S7Y2qdJwDdYUE5U0MSWtvLqTQ/pTBBRGPWakIZNyq780cp0\nJ8WkRKItnt9kxYvpJOyCNLV6rYCYNSzc6vUzaKqolvQgHSMQZ+0DIrebQEFS\nH8ZqS8oR23IoS0Z4kzmqgn5mNLxzvSxNegJDQbXP3crYh8HkfhLsWSw1nvqV\nbfsVCW3PZka9cPk7MNZKhC4+9mCIbBEfywxIXidRvB0jNHkR0BqvStdq315U\n5AiGIN0GPbebMV2jwXxogCZaqz1LadxJ0iX4TUWuTAI2NwYFQvxT6N4VOlN8\nKul64jYdpq48V84OPKiBaAcDy29WAI4aZuH6kRdpH89m060Vqi8118LpNUjR\nWurRx9aw+hMQF1W3Zfk8I0fSux24fBXoGUSWpBuQOOZ5Ze/6WqGHoNmb0+v/\nYGsKR1B3U0ZQEnLkyqAVPBUaLvDSB8NFGCh+Vhvf/wgQHVpiMkP1Grz4RZED\nVOI53UR0LIgBoMaq9m2t9cJ4XhGKUotyYOeQ5Nz7K9cTq2kvHqeH/vcqH8Hl\n9425\r\n=xhdn\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCZpGgRDsA1Nh7VaJkRvXV3GtpuDQeOlrMrBAFzugA83wIhAI5JKb6WZOxTWo+uElU/oecxpESeJ7QqiRPIgBMLu8dV"
          }
        ]
      },
      "maintainers": [
        {
          "email": "npm@apollographql.com",
          "name": "apollo-bot"
        },
        {
          "email": "evanshauser@gmail.com",
          "name": "evanshauser"
        },
        {
          "email": "james@meteor.com",
          "name": "jbaxleyiii"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.9_1544838911668_0.08699525032888733"
      },
      "_hasShrinkwrap": false
    },
    "1.5.10": {
      "name": "apollo-link-http",
      "version": "1.5.10",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/index.js",
      "module": "./lib/bundle.esm.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p ./tsconfig.cjs.json",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint -c \"../../tslint.json\" -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepare": "npm run lint && npm run build",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.7",
        "apollo-link-http-common": "^0.2.9"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0"
      },
      "devDependencies": {
        "@types/graphql": "14.0.5",
        "@types/jest": "22.2.3",
        "apollo-fetch": "0.7.0",
        "browserify": "16.2.3",
        "fetch-mock": "6.5.2",
        "graphql": "14.1.1",
        "graphql-tag": "2.10.1",
        "jest": "22.4.4",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.3",
        "rollup": "0.68.2",
        "ts-jest": "22.4.6",
        "tslint": "5.12.1",
        "typescript": "3.0.3",
        "uglify-js": "3.4.9"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ],
        "testURL": "http://localhost"
      },
      "_id": "apollo-link-http@1.5.10",
      "_npmVersion": "5.7.1",
      "_nodeVersion": "8.9.2",
      "_npmUser": {
        "name": "apollo-bot",
        "email": "npm@apollographql.com"
      },
      "dist": {
        "integrity": "sha512-/0IcpZ8cWbSg+MKOMpYLZwKbitnQ6Qs2+ZN4W0o61EFv3bjFRodMdKvQLid2XOEQpgaDU2lZXqXeweuxnUN1wA==",
        "shasum": "c2027e407f23c43fe870cce15af6ce009eeab92a",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.10.tgz",
        "fileCount": 27,
        "unpackedSize": 110949,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcVIYxCRA9TVsSAnZWagAAc+AP/2sfwB0uNL5/LbZrQ2aD\n+WEiyPYbgBfJTz3TlxEwiHQRR/wt/PmCkEpx1oAuAJPwnv6x4deuEJGSNnC5\ncrFgnqWB45/4IwGhdhMDXV7puQggRINJyVIHACzN+I4pbU5GbWEDot1fmx5h\n1wcIsrg1yojQqwLuht+b7D7rEw79+j0AdGgzEPrC0+hxjbiOeZyrBy8zgJiN\nKz8PFRo1pS9gorWiAxf/zgtKK1k3rfbDvBPBTYAIEdkCEMtlZwKTDDBI1BCX\npcIBENGhNEs0LddF8XV9Nt3+9j1mVrhoV/xujFpeXZTWs/XyUFBRmzLnA43Y\nzMtwrsNX/LMjFvjnV5LXduEaU2Plx6n7MOEU2rPl03PODjh0c+YXRBvpN5Jz\nK/ROcN6wTA3fj6BcecpEL/iZzLnKNWRMael/paJLWfae2xHmsZiqjxZrmnPb\nP402tV2JTOaJd7j8jrDFyJ7uvdMGKmfrZKfPUDpLGbQMXlVmRGebjia0N7NC\netzuO9E5+HsGnu37BsG5Dt6ToSvaWFhXag95YADmmww/lirqs2R5+g/9t6eZ\ndOwFwhd5tryogR33IY65cx/dGJYiNwJgdT4GHuO5AB8nDoIH/xzzb7Jt1TcZ\nziJa+DinK+H86qXEtpmAobz/RnsCMoywBpEetM+A+WCs1WaPWvq/18Wmg1hT\nn/1D\r\n=jKTt\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDfVYojP443V79SIWxRW8kTZx//8NF0ewNwbsbV2DfnUAiEAuoJlBKrq/gHIhxljFBbDXSBmc3Vq+v+FSue6IH5bvtg="
          }
        ]
      },
      "maintainers": [
        {
          "email": "npm@apollographql.com",
          "name": "apollo-bot"
        },
        {
          "email": "evanshauser@gmail.com",
          "name": "evanshauser"
        },
        {
          "email": "james@meteor.com",
          "name": "jbaxleyiii"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.10_1549043249189_0.20889565572531277"
      },
      "_hasShrinkwrap": false
    },
    "1.5.11": {
      "name": "apollo-link-http",
      "version": "1.5.11",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/index.js",
      "module": "./lib/bundle.esm.js",
      "typings": "./lib/index.d.ts",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build:browser": "browserify ./lib/bundle.umd.js -o=./lib/bundle.js --i apollo-link && npm run minify:browser",
        "build": "tsc -p ./tsconfig.cjs.json",
        "bundle": "rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "npm run build && npm run build:browser",
        "lint": "tslint -c \"../../tslint.json\" -p tsconfig.json -c ../../tslint.json src/*.ts",
        "minify:browser": "uglifyjs -c -m -o ./lib/bundle.min.js -- ./lib/bundle.js",
        "postbuild": "npm run bundle",
        "prebuild": "npm run clean",
        "prepare": "npm run lint && npm run build",
        "prepublishOnly": "npm run clean && npm run build",
        "test": "jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.8",
        "apollo-link-http-common": "^0.2.10"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0"
      },
      "devDependencies": {
        "@types/graphql": "14.0.5",
        "@types/jest": "22.2.3",
        "apollo-fetch": "0.7.0",
        "browserify": "16.2.3",
        "fetch-mock": "6.5.2",
        "graphql": "14.1.1",
        "graphql-tag": "2.10.1",
        "jest": "22.4.4",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.3",
        "rollup": "0.68.2",
        "ts-jest": "22.4.6",
        "tslint": "5.12.1",
        "typescript": "3.0.3",
        "uglify-js": "3.4.9"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ],
        "testURL": "http://localhost"
      },
      "gitHead": "6f5d0cfb73e61c6f83caed9e37d37c4451a64c7b",
      "_id": "apollo-link-http@1.5.11",
      "_nodeVersion": "8.12.0",
      "_npmVersion": "lerna/3.10.7/node@v8.12.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-wDG+I9UmpfaZRPIvTYBgkvqiCgmz6yWgvuzW/S24Q4r4Xrfe6sLpg2FmarhtdP+hdN+IXTLbFNCZ+Trgfpifow==",
        "shasum": "1f72a377d03e874a08bc9eadb1ce7ecb166f1e56",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.11.tgz",
        "fileCount": 39,
        "unpackedSize": 125134,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcVKKlCRA9TVsSAnZWagAAJ8EP/jVrdiKqqlniJ2uYU2Za\ng4q7HtCjisWI/QDzHcq4A+3i4i9gmPuF1CGAZAWFv2VFEXKaegWwlNnQdM7q\nUwvxQwgAwrGiMf973umavF+9xJPLsb8RuD01kbeN9ZK6n1HisGH+fb2CRQu8\nivo7h+XhODQ64wk2gFC60hS1EAujUI2K0HyUoLrqw5EYRzFfEbAjw2YAscyH\nnl0btPbETGnjMbLldpNChM+IXAtH3uAM4wABn2gqMVqGoSPTD0uoQup6NM1k\nqTnBo2XeVFXjiP3swoIcnWNrYSKQlINt6H6th2AmzJsiRt4Gb6cwL0zrcVhk\n1ECAdrn3nsfUPYy4h62JVK3bI5wZ0wJJAjtYSdRk5uwRmP/PxTG6s8m/zz3D\nkykUwCakpB1sJ3hIf4O/QZeLii1SqIgVCf5V6gPRcjXSOmwlce3YPCPj93kn\nmoTaJ/7wNK7egBw9+rk4smCwgAXzee8f6WYG0dbdSe10ytFjFBMylRzdKZPK\n3YA2vzTBmG29xxdzoOeuVWegXCWh38VL+gjbq2hOBdw66hFsJ35ndefYjjD1\n4zuGCra/hcuwXGlDABbaBUSZPkE9Xv4dJiipFmOWgkeCZxDZ1CuRzMYluRfp\nXImarXXYFH2B3x2+F7JBkSYUi/hJN8dH4LougY0RRYA8+bFfGPeULWsajO7L\nvmkQ\r\n=nDPW\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDVPJdOk7SnxIB+xSX4QvVEfeXvUvGjMoItpNR0slAe5AIhAKKcneSAffHHP0wd9IAcDRB23zMA3e0NItCth5UndFbi"
          }
        ]
      },
      "maintainers": [
        {
          "email": "npm@apollographql.com",
          "name": "apollo-bot"
        },
        {
          "email": "evanshauser@gmail.com",
          "name": "evanshauser"
        },
        {
          "email": "james@meteor.com",
          "name": "jbaxleyiii"
        }
      ],
      "_npmUser": {
        "name": "apollo-bot",
        "email": "npm@apollographql.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.11_1549050532818_0.20109924072664342"
      },
      "_hasShrinkwrap": false
    },
    "1.5.12": {
      "name": "apollo-link-http",
      "version": "1.5.12",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/index.js",
      "module": "./lib/bundle.esm.js",
      "typings": "./lib/index.d.ts",
      "sideEffects": false,
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build": "tsc && rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "../../scripts/minify",
        "lint": "tslint -c \"../../tslint.json\" -p tsconfig.json -c ../../tslint.json src/*.ts",
        "prebuild": "npm run clean",
        "prepare": "npm run build",
        "test": "npm run lint && jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.9",
        "apollo-link-http-common": "^0.2.11",
        "tslib": "^1.9.3"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0"
      },
      "devDependencies": {
        "@types/graphql": "14.0.7",
        "@types/jest": "22.2.3",
        "apollo-fetch": "0.7.0",
        "fetch-mock": "6.5.2",
        "graphql": "14.1.1",
        "graphql-tag": "2.10.1",
        "jest": "22.4.4",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.3",
        "rollup": "1.4.1",
        "ts-jest": "22.4.6",
        "tslint": "5.13.1",
        "typescript": "3.0.3"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ],
        "testURL": "http://localhost"
      },
      "gitHead": "2c960e057de9d664855bb18df4a4bd25c88bb6ef",
      "_id": "apollo-link-http@1.5.12",
      "_nodeVersion": "8.15.1",
      "_npmVersion": "lerna/3.13.1/node@v8.15.1+x64 (darwin)",
      "_npmUser": {
        "name": "apollo-bot",
        "email": "npm@apollographql.com"
      },
      "dist": {
        "integrity": "sha512-2tS36RIU6OdxzoWYTPrjvDTF2sCrnlaJ6SL7j0ILPn1Lmw4y6YLwKDsv/SWLwtodtVe9v1dLCGKIGMRMM/SdyA==",
        "shasum": "878d48bf9d8ae091752710529a222c4a5548118e",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.12.tgz",
        "fileCount": 114,
        "unpackedSize": 176556,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcfwGHCRA9TVsSAnZWagAANXoQAIL5jmIlGkdFAf/ITBC3\nAtG1eKSK7vfjVhr9nurE09VclQylO1trjDWm0Is89h0+vP8MPcOAbz4YDGgC\nW9pz34xIbnH3P21b4i5qj7MI2TYSx6TzlcTqNRi2sbdzDzvqtPyzzZZRCdY1\nuL8UmGrS6vixDrL1hxLstxOCFN1EmonJx7vqdSjcd/fKTv8dGgnVbKj9jRN9\nY3u/64M4lEl0XFkGyB/vCZOwxXJp6W4FJE01RJuwzXUPADvq2xxicGCfi2YQ\ngO980yPW7O3ciZckkpkdktJuqDZlPTnoMhr6a7Rj/pWBbarMbnxSNkTzwqyJ\n8ox+8XBVHPgBFeEOO2cpzfdA1MZLqWqGgYSuhfa8YdNkZQtGRFuvZhRM5AoC\nKqFrhUB1Sc557ghWoAoqsWUkcN60yyiOvDLd5q8THqBP2PkdFZc8UHdsGtwR\nZcb1v9L7JTSbDzyEy8AGIwce8Xx97sHnN858ON6HQ186ySExZlFqLWi4NMVH\nh6ddc3lhxj33Xv0VomJo3aVpsWsqGlJYyIvN2Ok2HxImL1H+22bchNBO6pvX\nzDnsiC1blmGaJ0am41vyzyUMvw6g3zQ9BOdUnrbanXPp6Luymh0xvqv3d8e+\n/iF1xIPvadddtYxViU5qcHTJD+m/7C2pWDkEZ1qRMSWcR3s5vimWHpSRGw2V\nCPcu\r\n=o9l2\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDn4AC0VSIReRjaa8V27S4oPwqE76SFUJEGyjL6/i41GwIhAJzgHj8Fl5+sprjC8tnqKtPX10ie9T/3L6L7F4hrW0A6"
          }
        ]
      },
      "maintainers": [
        {
          "email": "npm@apollographql.com",
          "name": "apollo-bot"
        },
        {
          "email": "evanshauser@gmail.com",
          "name": "evanshauser"
        },
        {
          "email": "james@meteor.com",
          "name": "jbaxleyiii"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.12_1551827334602_0.40362006362770453"
      },
      "_hasShrinkwrap": false
    },
    "1.5.13": {
      "name": "apollo-link-http",
      "version": "1.5.13",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/index.js",
      "module": "./lib/bundle.esm.js",
      "typings": "./lib/index.d.ts",
      "sideEffects": false,
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build": "tsc && rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "../../scripts/minify",
        "lint": "tslint -c \"../../tslint.json\" -p tsconfig.json -c ../../tslint.json src/*.ts",
        "prebuild": "npm run clean",
        "prepare": "npm run build",
        "test": "npm run lint && jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.10",
        "apollo-link-http-common": "^0.2.12",
        "tslib": "^1.9.3"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0"
      },
      "devDependencies": {
        "@types/graphql": "14.0.7",
        "@types/jest": "24.0.11",
        "apollo-fetch": "0.7.0",
        "fetch-mock": "6.5.2",
        "graphql": "14.1.1",
        "graphql-tag": "2.10.1",
        "jest": "24.5.0",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.3",
        "rollup": "1.6.0",
        "ts-jest": "22.4.6",
        "tslint": "5.13.1",
        "typescript": "3.0.3"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ],
        "testURL": "http://localhost"
      },
      "gitHead": "127ab65ba89185a82c492299c7853f02fdd7e570",
      "_id": "apollo-link-http@1.5.13",
      "_nodeVersion": "8.12.0",
      "_npmVersion": "lerna/3.13.1/node@v8.12.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-e8pU/omWPy3pI3v+UKktFuG5YcjbA4jT0jUHo59U51vKszqw5xsYjCOQhw7IPoixYN651vkn122CQEFgL6MuvA==",
        "shasum": "f7d6e1fda0009e0b623df1cbd83902fd71d34f67",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.13.tgz",
        "fileCount": 18,
        "unpackedSize": 86629,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJciaqqCRA9TVsSAnZWagAAGzwP/2p4hbF3JrKh2ApFVMeN\nR/HkO2iZnBl3/svoaT+1IcniiP9l59X43hDEY8YGlbV2bYCAqWV2SqAD7ZTx\nfrwK9h/vCWDzNeR3iMRu/Gmu4Cha7YW2PuP1YE/FqYtdSugFMpvboBQHqHtg\nXCFo6nQfHYa7kQ2uW6pcUEnD2CP4lI/HIlw11Zj+vE54EVrn+3RMU8Kcji88\nO9W39ylbzIu2a1BBTyRgByBFEnNxZ2s8dY0gd5GUsZtUK6Ty6vkcqvmd0l4x\nwY9g5tdT9p5yJWSi1EYoUuHZxJeRACF0CzBiIffPcycsOZgEKRHd6Grjdsej\nbKzclKEafinRtDUNf2qxL0NaVEwgStnrzSdK4CVu6GeFDXd4gyt6mC6TZ42r\nAw3AQ1J7IVYfoDK8PkpFDqHyAPOD+XO/mOpkX8BMlktxHGJd+zV5hyV3pifo\nU/k8tCFXONiAUc3HR/Mbma7Uhk9itZU3FHt4NpqGRoJ9+b4KrqLnavrOjmM+\nfT1AXyLmyG0tM1rGS0tPA3buyBGEKJbMuX66yIZ80lAW/V0VLxGgfC75nRzp\nLGgKLqPYlfjj/bakYgsgIyuekwLV145F+ABuecSKWlMQWv71EDhGm7yu8gh6\nwPpcB4a6Ddkq0R6Ohf1RYEPgkNQX+xnXeDtFUwboFTL8MNjWoBRtktrg6PDD\nj4Bk\r\n=/Qy7\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFu6ehoKgEEPGha0UK9qFTrTVyNkIRrQyWMnxnsmtpeiAiEAmdvUtZkko38LYoFkosmqrVNkEXGpJBceFZlAlCD3Dn0="
          }
        ]
      },
      "maintainers": [
        {
          "email": "npm@apollographql.com",
          "name": "apollo-bot"
        },
        {
          "email": "evanshauser@gmail.com",
          "name": "evanshauser"
        },
        {
          "email": "james@meteor.com",
          "name": "jbaxleyiii"
        }
      ],
      "_npmUser": {
        "name": "apollo-bot",
        "email": "npm@apollographql.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.13_1552525994242_0.5428126007294531"
      },
      "_hasShrinkwrap": false
    },
    "1.5.14": {
      "name": "apollo-link-http",
      "version": "1.5.14",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/index.js",
      "module": "./lib/bundle.esm.js",
      "typings": "./lib/index.d.ts",
      "sideEffects": false,
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build": "tsc && rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "../../scripts/minify",
        "lint": "tslint -c \"../../tslint.json\" -p tsconfig.json -c ../../tslint.json src/*.ts",
        "prebuild": "npm run clean",
        "prepare": "npm run build",
        "test": "npm run lint && jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.11",
        "apollo-link-http-common": "^0.2.13",
        "tslib": "^1.9.3"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0"
      },
      "devDependencies": {
        "@types/graphql": "14.0.7",
        "@types/jest": "24.0.11",
        "apollo-fetch": "0.7.0",
        "fetch-mock": "6.5.2",
        "graphql": "14.1.1",
        "graphql-tag": "2.10.1",
        "jest": "24.5.0",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.3",
        "rollup": "1.6.0",
        "ts-jest": "22.4.6",
        "tslint": "5.14.0",
        "typescript": "3.0.3"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ],
        "testURL": "http://localhost"
      },
      "gitHead": "ed1800b4261566e91906cdb9cc45c7d004393175",
      "_id": "apollo-link-http@1.5.14",
      "_nodeVersion": "8.12.0",
      "_npmVersion": "lerna/3.13.1/node@v8.12.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-XEoPXmGpxFG3wioovgAlPXIarWaW4oWzt8YzjTYZ87R4R7d1A3wKR/KcvkdMV1m5G7YSAHcNkDLe/8hF2nH6cg==",
        "shasum": "ed6292248d1819ccd16523e346d35203a1b31109",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.14.tgz",
        "fileCount": 18,
        "unpackedSize": 86629,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcijefCRA9TVsSAnZWagAAXVsP/2gh9MtyChHoCy2zjZz5\nZL1NbRFB2XEPb/0M0p4ivOfnwvoQ7S82cSexT7O9HIY1TLmwu6XP8vQtixX3\nwlnzZMz0uJZDGW6OMk/aYYarq5o0RJ36vxePun4KNMLPnZ7wNRwgI+1MWHWd\nPkL4JiWBz/BKZ0B/OA0cQFI4mCjnblQiE5PN/wu8eh+raDfHPQ1K4JWM4ySi\n48iGLfexN4VIAHRIMl/ey4kviV0D4MGftPr7yyxp+RVD3efgJQLYaw61QU4h\nzWf460nY81VrcORUG9TnXwopXKi695eMh8n03KLfwYiRvotUEas/JB6PA7SK\nM0R5cW5kTfOWgLWrGIHlvYex1J8KjFyUMFFxgk7/swGq5fxxaiSIjeCql0/E\naMM6470eQ7JtxF+IdiO99XDvJEtdL/cDOiAdG7Dj5CJq4/7B9ZTakXjyOsf6\nCti2JB1od5cjPjFaOcLZo31Se1lna3aK0pW9DLOrZ4hXJemz9QL3Dqbts6Au\n7Cl206Lr5vPD4vnfeIdcUnGj12ELoU3VL5yGuNHwfJsxb9gdD9vvf3BtIC7J\nYWsQ98gsRGTpVfKwWy1ubpoCaJlDkPp8i/PzhlcXpfTct2klYSZ9CdduA1op\nNFTDiWXoa/Avgss5ua9D2Iyujhp5d0sttGHEwl3lhlqcw5UieOxD9yDEmgNs\nxYiW\r\n=jfLf\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCICRshrU+4JW3HDQOh7Ou0A6XJQAqcDgi/Q7JpHqqhbfMAiEAunRPoLA+MbkfKNVy5xX+KxAlQFlKnTzWyEaLBWYrcss="
          }
        ]
      },
      "maintainers": [
        {
          "email": "npm@apollographql.com",
          "name": "apollo-bot"
        },
        {
          "email": "evanshauser@gmail.com",
          "name": "evanshauser"
        },
        {
          "email": "james@meteor.com",
          "name": "jbaxleyiii"
        }
      ],
      "_npmUser": {
        "name": "apollo-bot",
        "email": "npm@apollographql.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.14_1552562078867_0.3989818342804239"
      },
      "_hasShrinkwrap": false
    },
    "1.5.15": {
      "name": "apollo-link-http",
      "version": "1.5.15",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/index.js",
      "module": "./lib/bundle.esm.js",
      "typings": "./lib/index.d.ts",
      "sideEffects": false,
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build": "tsc && rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "../../scripts/minify",
        "lint": "tslint -c \"../../tslint.json\" -p tsconfig.json -c ../../tslint.json src/*.ts",
        "prebuild": "npm run clean",
        "prepare": "npm run build",
        "test": "npm run lint && jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.12",
        "apollo-link-http-common": "^0.2.14",
        "tslib": "^1.9.3"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0"
      },
      "devDependencies": {
        "@types/graphql": "14.2.0",
        "@types/jest": "24.0.14",
        "apollo-fetch": "0.7.0",
        "fetch-mock": "6.5.2",
        "graphql": "14.3.1",
        "graphql-tag": "2.10.1",
        "jest": "24.8.0",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.6.3",
        "rollup": "1.15.4",
        "ts-jest": "22.4.6",
        "tslint": "5.17.0",
        "typescript": "3.0.3"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ],
        "testURL": "http://localhost"
      },
      "gitHead": "f902ab977d7d173951528a0bc2e38521b2afc096",
      "_id": "apollo-link-http@1.5.15",
      "_nodeVersion": "8.16.0",
      "_npmVersion": "lerna/3.13.1/node@v8.16.0+x64 (darwin)",
      "_npmUser": {
        "name": "apollo-bot",
        "email": "npm@apollographql.com"
      },
      "dist": {
        "integrity": "sha512-epZFhCKDjD7+oNTVK3P39pqWGn4LEhShAoA1Q9e2tDrBjItNfviiE33RmcLcCURDYyW5JA6SMgdODNI4Is8tvQ==",
        "shasum": "106ab23bb8997bd55965d05855736d33119652cf",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.15.tgz",
        "fileCount": 18,
        "unpackedSize": 86630,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdBCN2CRA9TVsSAnZWagAAnP4P/0qViUJC9g8Zl1pyQiFs\n9NnwYl61aDbCDdfvJbmRmCpDzhvfgFoatiwsOH5EzqKvLTh8zB8ZDwWiQg57\nx5exUebb9vB282hP30Sbr9ZjmM0+GJ5ScJWWd0+pO2twOZLimGyyShQQT43R\nW+gDffLHo/lv1CnvrQvV2he4F34+tQ5/CzWuQyeyR5yz2TsgMlLP9mKtx/tJ\ntaXoOPyl6ANf1wNMHva6JvrZGxZvwDbrUXxn/EOKnj4s8yAHT2RjtdWwQ5ic\n5IvyIYBsuzs+cv+c8ckDK6KJ5TF7X055sL3NhQL2XrBJh/PIHtvp76z4ieuh\noz4INTpu2fWHoDFXU2Jbtop9hUwnM9hGveQ5oegawMey1dv4c1+YpsSxN/+7\nT3DdYb4QOMHfe83c2+iNjxfm7Mo3SrRx7x+7xd2g8uhtEyc9XFyCbNqnEuiU\naivfg5gO1eg7rfT1hvSwQtKfigNrkqpoQMQq7KfoRIaOJ5cvdXBdgNA2Rdd9\n/NokcQhn0JGD2XEI/3Gt1iifrQ4DF05FjxBZ9O4XTjWnQF1xhrpJ9isji4MQ\nR+7RTm03onOe08mxBGX9n9D5FhMebKJ8wjQSbDg1ls5ro/X/7gk8H5ToBiOr\nf9L9YwDAYg3LeYmkLyt3tvhYNXhj+aRtIMTJ2JgF/PyNuIZrYfgyyqr0c2JD\n4Uir\r\n=Bp+j\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCl6eyPYZWkanaJbyCl3M6P8Cs2rZuL1wQzKkKTKHx2HQIhAMqwqbzbpUdL1oJqslS5yiHqBPmxjBSOPg7c3AQmXGP2"
          }
        ]
      },
      "maintainers": [
        {
          "email": "npm@apollographql.com",
          "name": "apollo-bot"
        },
        {
          "email": "evanshauser@gmail.com",
          "name": "evanshauser"
        },
        {
          "email": "james@meteor.com",
          "name": "jbaxleyiii"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.15_1560552309360_0.8741669728750925"
      },
      "_hasShrinkwrap": false
    },
    "1.5.16": {
      "name": "apollo-link-http",
      "version": "1.5.16",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/index.js",
      "module": "./lib/bundle.esm.js",
      "typings": "./lib/index.d.ts",
      "sideEffects": false,
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build": "tsc && rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "../../scripts/minify",
        "lint": "tslint -c \"../../tslint.json\" -p tsconfig.json -c ../../tslint.json src/*.ts",
        "prebuild": "npm run clean",
        "prepare": "npm run build",
        "test": "npm run lint && jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.13",
        "apollo-link-http-common": "^0.2.15",
        "tslib": "^1.9.3"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0"
      },
      "devDependencies": {
        "@types/graphql": "14.2.3",
        "@types/jest": "24.0.18",
        "apollo-fetch": "0.7.0",
        "fetch-mock": "6.5.2",
        "graphql": "14.5.4",
        "graphql-tag": "2.10.1",
        "jest": "24.9.0",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.7.1",
        "rollup": "1.20.3",
        "ts-jest": "22.4.6",
        "tslint": "5.17.0",
        "typescript": "3.0.3"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ],
        "testURL": "http://localhost"
      },
      "gitHead": "74d412528dd474fc41ee0bf504e36e01d7e05e2b",
      "_id": "apollo-link-http@1.5.16",
      "_nodeVersion": "10.15.3",
      "_npmVersion": "lerna/3.16.4/node@v10.15.3+x64 (darwin)",
      "dist": {
        "integrity": "sha512-IA3xA/OcrOzINRZEECI6IdhRp/Twom5X5L9jMehfzEo2AXdeRwAMlH5LuvTZHgKD8V1MBnXdM6YXawXkTDSmJw==",
        "shasum": "44fe760bcc2803b8a7f57fc9269173afb00f3814",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.16.tgz",
        "fileCount": 18,
        "unpackedSize": 86397,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdcom9CRA9TVsSAnZWagAARY0P/jLu8QkU1ApdZadvZePU\nil1FLlZFYXQEqLrkAUCscDgncz/Vmm+Z9rf4v+0uP0glx+jVKVATevJU67bG\nH7Ok3U0kIXnPbQKDECVPZMVges89uL8XzmKQlv68JNn6lpj8vIVKxubH1GjK\nzU66BOXDbrCzXWFpJbG0ad4+aWbF5YxmL5wMJyDn5r/yKnrG5h/tCaa3nmed\nnJZQHMdZ1SVjRwPvxUBT5jinYM7gt4uGEAjCOvW5Zj8NGZV8vfqnwDgFPLe9\npbhYxnzYKtnT47X59VWsLqehxVftvOzcZp0azvpVMLn33whEwZBrQSJ5gY0R\nFGD2edBVXDSvCmu/dZY/PUnmdQgM0JXloDdR5k54yz3wa346yDoFjTrTvSt0\nNMSEKE0JBxj0hmSaGbvBgIbdRCSEHVH3KT3MirlCQLX/EN6akuaX77/PNOlK\nM9hBG/mbku558GesEGyWNimdsWI1Kt4xQHU2Ob8HRmiE3kxAIerf5IQSFw4G\nj81L3MXIFDuAo6DLGJ8Rxci0ETsOQ861S5lmte9uW1gNV3qzZxxSJXfyxPvS\nHPD5rlCSG1JHvQcIk25vGTvV3+dSbJs87XKsEhnkRpnnOZsqhCJA0YxSdXQO\nbjR0bi/lMottBDCmwvec21JxqC/zZokTZe014kgW3uCliHZElWoqfI9ZzUfX\ny9Vk\r\n=58AZ\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCqNWsIEvf4PpL0lhsM3mFyIFdbyKV7j1PwRR1CgzHeYAIhAPqieRHEaTb8b7Ns/jwBxYGxMxCYhcSMcdfS3zpFz0Sm"
          }
        ]
      },
      "maintainers": [
        {
          "email": "npm@apollographql.com",
          "name": "apollo-bot"
        },
        {
          "email": "evanshauser@gmail.com",
          "name": "evanshauser"
        },
        {
          "email": "james@meteor.com",
          "name": "jbaxleyiii"
        }
      ],
      "_npmUser": {
        "name": "apollo-bot",
        "email": "npm@apollographql.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.16_1567787453143_0.524080845988945"
      },
      "_hasShrinkwrap": false
    },
    "1.5.17": {
      "name": "apollo-link-http",
      "version": "1.5.17",
      "description": "HTTP transport layer for GraphQL",
      "author": {
        "name": "Evans Hauser",
        "email": "evanshauser@gmail.com"
      },
      "contributors": [
        {
          "name": "James Baxley",
          "email": "james@meteor.com"
        },
        {
          "name": "Jonas Helfer",
          "email": "jonas@helfer.email"
        },
        {
          "name": "jon wong",
          "email": "j@jnwng.com"
        },
        {
          "name": "Sashko Stubailo",
          "email": "sashko@stubailo.com"
        },
        {
          "name": "Stephen Kao",
          "email": "stephen.yuchen.kao@gmail.com"
        }
      ],
      "license": "MIT",
      "main": "./lib/index.js",
      "module": "./lib/bundle.esm.js",
      "typings": "./lib/index.d.ts",
      "sideEffects": false,
      "repository": {
        "type": "git",
        "url": "git+https://github.com/apollographql/apollo-link.git"
      },
      "bugs": {
        "url": "https://github.com/apollographql/apollo-link/issues"
      },
      "homepage": "https://github.com/apollographql/apollo-link#readme",
      "scripts": {
        "build": "tsc && rollup -c",
        "clean": "rimraf lib/* && rimraf coverage/*",
        "coverage": "jest --coverage",
        "filesize": "../../scripts/minify",
        "lint": "tslint -c \"../../tslint.json\" -p tsconfig.json -c ../../tslint.json src/*.ts",
        "prebuild": "npm run clean",
        "prepare": "npm run build",
        "test": "npm run lint && jest",
        "watch": "tsc -w -p . & rollup -c -w"
      },
      "dependencies": {
        "apollo-link": "^1.2.14",
        "apollo-link-http-common": "^0.2.16",
        "tslib": "^1.9.3"
      },
      "peerDependencies": {
        "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0"
      },
      "devDependencies": {
        "@types/graphql": "14.2.3",
        "@types/jest": "24.9.0",
        "apollo-fetch": "0.7.0",
        "fetch-mock": "6.5.2",
        "graphql": "15.0.0",
        "graphql-tag": "2.10.1",
        "jest": "24.9.0",
        "object-to-querystring": "1.0.8",
        "rimraf": "2.7.1",
        "rollup": "1.29.1",
        "ts-jest": "22.4.6",
        "tslint": "5.20.1",
        "typescript": "3.0.3"
      },
      "jest": {
        "transform": {
          ".(ts|tsx)": "ts-jest"
        },
        "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
        "moduleFileExtensions": [
          "ts",
          "tsx",
          "js",
          "json"
        ],
        "testPathIgnorePatterns": [
          "/node_modules/",
          "sharedHttpTests.ts"
        ],
        "testURL": "http://localhost"
      },
      "gitHead": "1012934b4fd9ab436c4fdcd5e9b1bb1e4c1b0d98",
      "_id": "apollo-link-http@1.5.17",
      "_nodeVersion": "10.15.3",
      "_npmVersion": "lerna/3.20.2/node@v10.15.3+x64 (darwin)",
      "dist": {
        "integrity": "sha512-uWcqAotbwDEU/9+Dm9e1/clO7hTB2kQ/94JYcGouBVLjoKmTeJTUPQKcJGpPwUjZcSqgYicbFqQSoJIW0yrFvg==",
        "shasum": "499e9f1711bf694497f02c51af12d82de5d8d8ba",
        "tarball": "https://registry.npmjs.org/apollo-link-http/-/apollo-link-http-1.5.17.tgz",
        "fileCount": 18,
        "unpackedSize": 87104,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJej3BvCRA9TVsSAnZWagAAM3kP/3/rp7u5rQPXu5Y/3IKe\nKU5uJs6iEpn2ABVkAHS3dOE9DMWzAJZK8ZHPwMFJVh7D+6iNvQEM5SeBl8Ej\nXPyKJwOxgFyNt0ogGf/2Mfuwb1zQO7ZFNjS/b5iMZHrHpQ0TKKVlcI2OzR9f\nCALdkToXnJ1geP2esvS0mTZ9lpJBLJvNiI2MuSWaT0MP0QHrgYNnEDCF1aH6\nF9/RI1xCh17lA/xOvJeOZLu7nJBPmczSStHg3+eLU++pXpm0jDEfxYdp70bZ\nWLV/EavG6eM+4MOZrRgmspE1X7RDCqAZKmNh5xEpuZsF/s5Jg7DB/Ncq9aZp\nOkCKxwJQNUYzFg0uSQGE/nFlusdyA6IiYdo3/GtrJPd/x0mZb12NRWVVc2kt\nrkpGqXVd3FmSWdzo0V4r9Bei91MNRqZuoy8IjjJZPrkFScspGG+htIda8SyH\np9Paz5JAJ6Vtce19DE/EJQ+/aunZnvVK68gRV9gH82DfDLsqgI//U09wS1Cd\nQXLo+tlN6pUMlrYyMmKFpdmC5szwG9vQMHQIBaVcc+XyzlvHwYNyWELhfV4C\nhevZ1+cGOEK3wXJ2JXsrJXVfZfegEwM73oHD2ZJbl/fd9JiBrJEbZw/gS4Fn\nujGyFKEm4YXWXeYSt5Hzh5qR/5jYQ9SzXzbErJxGiq6Es/RlLALmHXZY34l4\nqQAP\r\n=UTuB\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCsgBxmMiJzFid2k6WMD3NGLzZXy6JU2Jxg758dWh3JHQIhAK7PtJRYGz3qGz+G7nJWQvnJnhc1MZN+SUboSogu2iuq"
          }
        ]
      },
      "maintainers": [
        {
          "email": "npm@apollographql.com",
          "name": "apollo-bot"
        },
        {
          "email": "evanshauser@gmail.com",
          "name": "evanshauser"
        },
        {
          "email": "james@meteor.com",
          "name": "jbaxleyiii"
        }
      ],
      "_npmUser": {
        "name": "apollo-bot",
        "email": "npm@apollographql.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/apollo-link-http_1.5.17_1586458735230_0.022085773506743234"
      },
      "_hasShrinkwrap": false
    }
  },
  "readme": "---\ntitle: apollo-link-http\ndescription: Get GraphQL results over a network using HTTP fetch.\n---\n\nThe http link is the most common Apollo Link, a system of modular components\nfor GraphQL networking. If you haven't done so already, [read the Apollo Link\ndocs](https://www.apollographql.com/docs/link/#usage) to learn about the Apollo\nLink ecosystem and how to use this link with libraries like Apollo Client and\ngraphql-tools, or as a standalone client.\n\nThe http link is a terminating link that fetches GraphQL results from a GraphQL\nendpoint over an http connection. The http link supports both POST and GET\nrequests with the ability to change the http options on a per query basis. This\ncan be used for authentication, persisted queries, dynamic uris, and other\ngranular updates.\n\n## Usage\n\nImport and initialize this link in just two lines:\n\n```js\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst link = createHttpLink({ uri: \"/graphql\" });\n```\n\n## Options\n\nHTTP Link takes an object with some options on it to customize the behavior of the link. If your server supports it, the HTTP link can also send over metadata about the request in the extensions field. To enable this, pass `includeExtensions` as true. The options you can pass are outlined below:\n\n* `uri`: the URI key is a string endpoint or function resolving to an endpoint -- will default to \"/graphql\" if not specified\n* `includeExtensions`: allow passing the extensions field to your graphql server, defaults to false\n* `fetch`: a `fetch` compatible API for making a request\n* `headers`: an object representing values to be sent as headers on the request\n* `credentials`: a string representing the credentials policy you want for the fetch call. Possible values are: `omit`, `include` and `same-origin`\n* `fetchOptions`: any overrides of the fetch options argument to pass to the fetch call\n* `useGETForQueries`: set to `true` to use the HTTP `GET` method for queries (but not for mutations)\n\n## Fetch polyfill\n\nThe HTTP Link relies on having `fetch` present in your runtime environment. If you are running on react-native, or modern browsers, this should be no problem. If you are targeting an environment without `fetch` such as older browsers or the server, you will need to pass your own `fetch` to the link through the options. We recommend [`unfetch`](https://github.com/developit/unfetch) for older browsers and [`node-fetch`](https://github.com/bitinn/node-fetch) for running in Node.\n\n## Context\n\nThe Http Link uses the `headers` field on the context to allow passing headers to the HTTP request. It also supports the `credentials` field for defining credentials policy, `uri` for changing the endpoint dynamically, and `fetchOptions` to allow generic fetch overrides (i.e. `method: \"GET\"`). These options will override the same key if passed when creating the the link.\n\nNote that if you set `fetchOptions.method` to `GET`, the http link will follow the [standard GraphQL HTTP GET encoding](http://graphql.org/learn/serving-over-http/#get-request): the query, variables, operation name, and extensions will be passed as query parameters rather than in the HTTP request body. If you want mutations to continue to be sent as non-idempotent `POST` requests, set the top-level `useGETForQueries` option to `true` instead of setting `fetchOptions.method` to `GET`.\n\nThis link also attaches the response from the `fetch` operation on the context as `response` so you can access it from within another link.\n\n* `headers`: an object representing values to be sent as headers on the request\n* `credentials`: a string representing the credentials policy you want for the fetch call. Possible values are: `omit`, `include` and `same-origin`\n* `uri`: a string of the endpoint you want to fetch from\n* `fetchOptions`: any overrides of the fetch options argument to pass to the fetch call\n* `response`: this is the raw response from the fetch request after it is made.\n* `http`: this is an object to control fine grained aspects of the http link itself, such as persisted queries (see below)\n\n### Persisted queries\n\nThe http link supports an advanced GraphQL feature called persisted queries. This allows you to not send the stringified query over the wire, but instead send some kind of identifier of the query. To support this you need to attach the id somewhere to the extensions field and pass the following options to the context:\n\n```js\noperation.setContext({\n  http: {\n    includeExtensions: true,\n    includeQuery: false,\n  }\n})\n```\n\nThe `http` object on context currently supports two keys:\n\n* `includeExtensions`: Send the extensions object for this request.\n* `includeQuery`: Don't send the `query` field for this request.\n\nOne way to use persisted queries is with [apollo-link-persisted-queries](https://github.com/apollographql/apollo-link-persisted-queries) and [Apollo Engine](https://www.apollographql.com/docs/engine/auto-persisted-queries.html).\n\n### Passing context per query\n\nApollo Client supports passing context separately for every query, so you can do things like pass a special header for a single query invocation if you need to.\n\n```js\nimport { createHttpLink } from \"apollo-link-http\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nconst client = new ApolloClient({\n  link: createHttpLink({ uri: \"/graphql\" }),\n  cache: new InMemoryCache()\n});\n\n// a query with apollo-client\nclient.query({\n  query: MY_QUERY,\n  context: {\n    // example of setting the headers with context per operation\n    headers: {\n      special: \"Special header value\"\n    }\n  }\n});\n```\n\n## Errors\n\nThe Http Link draws a distinction between client, server and GraphQL errors. Server errors can occur in three different scenarios: parse, network and data errors. [`apollo-link-error`](error) provides an [interface](error#callback) for handling these errors. This list describes the scenarios that cause different errors:\n\n* _Client parse error_: the request body is not-serializable due to circular references for example\n* _Server parse error_: the response from the server cannot be parsed ([response.json()](https://developer.mozilla.org/en-US/docs/Web/API/Body/json))\n* _Server network error_: the response has a status of >= 300\n* _Server data error_: the parse request does not contain `data` or `errors`\n* _GraphQL error_: an objects in the `errors` array for a 200 level status\n\nSince many server implementations can return a valid GraphQL result on a server network error, the thrown `Error` object contains the parsed server result. A server data error also receives the parsed result.\n\nThe table below provides a summary of error, `Observable` method called by the HTTP link, and type of error thrown for each failure:\n\n| Error          | Callback | Error Type         |\n| -------------- | :------: | ------------------ |\n| Client Parse   | `error`  | `ClientParseError` |\n| Server Parse   | `error`  | `ServerParseError` |\n| Server Network | `error`  | `ServerError`      |\n| Server Data    | `error`  | `ServerError`      |\n| GraphQL Error  |  `next`  | `Object`           |\n\nAll error types inherit the `name`, `message`, and nullable `stack` properties from the generic javascript [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error).\n\n```js\n//type ClientParseError\n{\n  parseError: Error;                // Error returned from response.json()\n};\n\n//type ServerParseError\n{\n  response: Response;               // Object returned from fetch()\n  statusCode: number;               // HTTP status code\n  bodyText: string                  // text that was returned from server\n};\n\n//type ServerError\n{\n  result: Record<string, any>;      // Parsed object from server response\n  response: Response;               // Object returned from fetch()\n  statusCode: number;               // HTTP status code\n};\n```\n\n## Custom fetching\n\nYou can use the `fetch` option when creating an http-link to do a lot of custom networking. This is useful if you want to modify the request based on the calculated headers  or calculate the uri based on the operation:\n\n### Custom auth\n\n```js\nconst customFetch = (uri, options) => {\n  const { header } = Hawk.client.header(\n    \"http://example.com:8000/resource/1?b=1&a=2\",\n    \"POST\",\n    { credentials: credentials, ext: \"some-app-data\" }\n  );\n  options.headers.Authorization = header;\n  return fetch(uri, options);\n};\n\nconst link = createHttpLink({ fetch: customFetch });\n```\n\n### Dynamic URI\n\n```js\nconst customFetch = (uri, options) => {\n  const { operationName } = JSON.parse(options.body);\n  return fetch(`${uri}/graph/graphql?opname=${operationName}`, options);\n};\n\nconst link = createHttpLink({ fetch: customFetch });\n```\n\n## Upgrade: Apollo Client 1.0\n\nIf you previously used either `apollo-fetch` or `apollo-client`'s `createNetworkInterface`, you will need to change the way `use` and `useAfter` are implemented in your app. Both can be implemented by writing a custom link. It's important to note that regardless of whether you're adding middleware or afterware, your Http link will always be last in the chain since it's a terminating link.\n\n#### Middleware\n\n_Before_\n\n```js\n// before\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.use([\n  {\n    applyMiddleware(req, next) {\n      if (!req.options.headers) {\n        req.options.headers = {}; // Create the header object if needed.\n      }\n      req.options.headers[\"authorization\"] = localStorage.getItem(\"token\")\n        ? localStorage.getItem(\"token\")\n        : null;\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst middlewareLink = new ApolloLink((operation, forward) => {\n  operation.setContext({\n    headers: {\n      authorization: localStorage.getItem(\"token\") || null\n    }\n  });\n  return forward(operation);\n});\n\n// use with apollo-client\nconst link = middlewareLink.concat(httpLink);\n```\n\n#### Afterware (error)\n\n_Before_\n\n```js\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\nimport { logout } from \"./logout\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.useAfter([\n  {\n    applyAfterware({ response }, next) {\n      if (response.statusCode === 401) {\n        logout();\n      }\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\n\nimport { logout } from \"./logout\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst errorLink = onError(({ networkError }) => {\n  if (networkError.statusCode === 401) {\n    logout();\n  }\n});\n\n// use with apollo-client\nconst link = errorLink.concat(httpLink);\n```\n\n#### Afterware (data manipulation)\n\n_Before_\n\n```js\nimport ApolloClient, { createNetworkInterface } from \"apollo-client\";\n\nconst networkInterface = createNetworkInterface({ uri: \"/graphql\" });\n\nnetworkInterface.useAfter([\n  {\n    applyAfterware({ response }, next) {\n      if (response.data.user.lastLoginDate) {\n        response.data.user.lastLoginDate = new Date(\n          response.data.user.lastLoginDate\n        );\n      }\n      next();\n    }\n  }\n]);\n```\n\n_After_\n\n```js\nimport { ApolloLink } from \"apollo-link\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst httpLink = createHttpLink({ uri: \"/graphql\" });\nconst addDatesLink = new ApolloLink((operation, forward) => {\n  return forward(operation).map(response => {\n    if (response.data.user.lastLoginDate) {\n      response.data.user.lastLoginDate = new Date(\n        response.data.user.lastLoginDate\n      );\n    }\n    return response;\n  });\n});\n\n// use with apollo-client\nconst link = addDatesLink.concat(httpLink);\n```\n",
  "maintainers": [
    {
      "email": "npm@apollographql.com",
      "name": "apollo-bot"
    }
  ],
  "time": {
    "modified": "2022-06-13T03:14:53.627Z",
    "created": "2017-07-25T07:44:01.778Z",
    "0.0.0": "2017-07-25T07:44:01.778Z",
    "0.0.1": "2017-07-25T23:26:33.232Z",
    "0.1.0": "2017-07-28T21:50:43.908Z",
    "0.1.1": "2017-07-28T23:05:44.487Z",
    "0.2.0": "2017-07-29T06:49:08.193Z",
    "0.3.0": "2017-08-08T21:03:14.838Z",
    "0.3.1": "2017-08-08T21:41:12.189Z",
    "0.4.0": "2017-08-09T01:27:41.662Z",
    "0.4.1": "2017-08-09T06:49:05.930Z",
    "0.5.0": "2017-08-09T23:21:58.798Z",
    "0.5.2": "2017-09-07T01:02:55.827Z",
    "0.5.4": "2017-09-07T03:15:02.002Z",
    "0.6.1-beta.0": "2017-09-13T14:20:38.458Z",
    "0.6.1-beta.1": "2017-09-19T00:55:53.650Z",
    "0.6.1-beta.4": "2017-09-21T12:35:55.845Z",
    "0.6.1-beta.3": "2017-09-25T15:30:47.136Z",
    "0.6.1-beta.5": "2017-09-25T15:46:28.628Z",
    "0.6.1-beta.6": "2017-09-28T17:11:02.810Z",
    "0.7.0": "2017-10-03T13:41:58.353Z",
    "0.8.0": "2017-10-13T20:25:50.883Z",
    "1.0.0": "2017-10-24T18:44:57.245Z",
    "1.1.0": "2017-11-01T20:18:26.209Z",
    "1.2.0": "2017-11-15T15:55:10.556Z",
    "1.3.0": "2017-11-30T14:33:44.607Z",
    "1.3.1": "2017-12-08T12:03:31.449Z",
    "1.3.2": "2017-12-18T17:09:46.436Z",
    "1.3.3": "2018-02-08T18:02:26.137Z",
    "1.4.0": "2018-02-21T00:20:18.427Z",
    "1.5.0": "2018-02-22T19:14:24.112Z",
    "1.5.1": "2018-02-23T02:01:28.506Z",
    "1.5.2": "2018-02-27T02:25:35.324Z",
    "1.5.3": "2018-03-05T17:50:06.043Z",
    "1.5.4": "2018-04-12T18:13:04.181Z",
    "0.0.0-alpha.0": "2018-07-17T18:50:42.884Z",
    "1.6.0-alpha.0": "2018-07-19T07:15:03.164Z",
    "1.6.0-alpha.1": "2018-07-25T01:01:16.142Z",
    "1.6.0-alpha.2": "2018-07-25T04:19:58.909Z",
    "1.6.0-alpha.3": "2018-07-26T23:02:46.451Z",
    "1.6.0-alpha.4": "2018-07-27T00:07:20.067Z",
    "1.6.0-alpha.5": "2018-07-27T00:51:42.894Z",
    "1.5.5": "2018-09-15T09:34:44.371Z",
    "1.5.6": "2018-11-21T02:58:07.101Z",
    "1.5.7": "2018-11-22T17:52:25.266Z",
    "1.5.8": "2018-12-13T19:28:01.890Z",
    "1.5.9": "2018-12-15T01:55:11.825Z",
    "1.5.10": "2019-02-01T17:47:29.363Z",
    "1.5.11": "2019-02-01T19:48:52.926Z",
    "1.5.12": "2019-03-05T23:08:54.754Z",
    "1.5.13": "2019-03-14T01:13:14.370Z",
    "1.5.14": "2019-03-14T11:14:39.039Z",
    "1.5.15": "2019-06-14T22:45:09.505Z",
    "1.5.16": "2019-09-06T16:30:53.315Z",
    "1.5.17": "2020-04-09T18:58:55.467Z"
  },
  "homepage": "https://github.com/apollographql/apollo-link#readme",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/apollographql/apollo-link.git"
  },
  "contributors": [
    {
      "name": "James Baxley",
      "email": "james@meteor.com"
    },
    {
      "name": "Jonas Helfer",
      "email": "jonas@helfer.email"
    },
    {
      "name": "jon wong",
      "email": "j@jnwng.com"
    },
    {
      "name": "Sashko Stubailo",
      "email": "sashko@stubailo.com"
    },
    {
      "name": "Stephen Kao",
      "email": "stephen.yuchen.kao@gmail.com"
    }
  ],
  "author": {
    "name": "Evans Hauser",
    "email": "evanshauser@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/apollographql/apollo-link/issues"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "users": {
    "bsdllc": true
  }
}