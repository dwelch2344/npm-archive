{
  "_id": "mock-fs",
  "_rev": "151-abae2138edba85cb3329b4b4393fc6e6",
  "name": "mock-fs",
  "description": "A configurable mock file system.  You know, for testing.",
  "dist-tags": {
    "latest": "5.2.0",
    "beta": "5.0.0-beta.1",
    "dev": "5.1.2-dev.1636402202771"
  },
  "versions": {
    "0.1.0": {
      "name": "mock-fs",
      "description": "Mock fs implementation for testing",
      "version": "0.1.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "test": "grunt test",
        "start": "grunt start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.10",
        "grunt-contrib-jshint": "~0.7.1",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.5.4"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@0.1.0",
      "dist": {
        "shasum": "7bccf9f2495482fb2383f7a5e8182f52812e74cf",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-0.1.0.tgz",
        "integrity": "sha512-L1XzGbuGdbeXjVAigh3NNM308xMe2XLmQrsYJDBTBa1tUY7B8qT1f8vAkj6/hFccNAEjEZfVP387tHi+AVKPDA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDqjAQR/hUmDjoBLhg3mKfNPTTjR0TC6YQeKtbRvYyGpQIgQ6JARqBQCymau0eR/cTF6CcjSYqjH6O5gyimUBpjgNE="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.5",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "0.2.0": {
      "name": "mock-fs",
      "description": "Mock fs implementation for testing",
      "version": "0.2.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "test": "grunt test",
        "start": "grunt start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.10",
        "grunt-contrib-jshint": "~0.7.1",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.5.4"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@0.2.0",
      "dist": {
        "shasum": "d3ebc9fe0f8b7df8513f07b9ee2f7878cc911556",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-0.2.0.tgz",
        "integrity": "sha512-uJnq3456Z/PhFUwFAnO/V1mWoMDNnGya7v4dq8vgVp4yJbhBTzlSSAiYZOeXfGwM4/YAuG0yxt6ii6wAMelqZA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDKpFe+WH8TyAQGfKfRbMTVMu4r7SSfDq3gsujssSX2pAiBuMa2bqZM0LD9Mh24jFLqjWoq0+COzN3SUxYVe6AuRXw=="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.5",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "0.3.0": {
      "name": "mock-fs",
      "description": "Mock fs implementation for testing",
      "version": "0.3.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "test": "grunt test",
        "start": "grunt start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.11",
        "grunt-contrib-jshint": "~0.7.2",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.6.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@0.3.0",
      "dist": {
        "shasum": "70c71bac2c56a25c379a83be988b555035f382eb",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-0.3.0.tgz",
        "integrity": "sha512-jjJe/VFP14JIbeUXnQFVkLoPPSJ5etDZiSiA+Vnidn1FNZKUkSNbfHv+vzQp64worOfvEqVz6p3acvS/vagRvA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBXsxGMlUT2A264t8mEcOmkOHKjKZT5LriOsZkEj88gHAiEAyKpJ8f7Yj3lgfNF83/ll6nQ51/ts2zko05ZQ0lhCwIA="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.5",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "0.4.0": {
      "name": "mock-fs",
      "description": "Mock fs implementation for testing",
      "version": "0.4.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "test": "grunt --stack test",
        "start": "grunt --stack start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.11",
        "grunt-contrib-jshint": "~0.7.2",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.6.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@0.4.0",
      "dist": {
        "shasum": "eb3c6e3ec76ec150350029c629b114a5f3e65787",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-0.4.0.tgz",
        "integrity": "sha512-gZegy7Yr5KQGJDU5rGigpOUZ22rqrOotW+1WqEXKk96hklynjYN/U6UOQo9qvEJvEe3AdoWyYAkASl6ndNElRQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDnsLNo9HaYWacZTMFyu0KS7sjk5jKh4FpnEw8Qr4hphwIhAI/Ab6nXhYvYxr+5NdmiaSLkINzkt1JgX2Hk2mkWmORJ"
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.2.32",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "0.5.0": {
      "name": "mock-fs",
      "description": "Mock fs implementation for testing",
      "version": "0.5.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "test": "grunt --stack test",
        "start": "grunt --stack start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.11",
        "grunt-contrib-jshint": "~0.7.2",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.6.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@0.5.0",
      "dist": {
        "shasum": "603e87fdda3378c0b888913b17d208ae7b0b7329",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-0.5.0.tgz",
        "integrity": "sha512-AnU2eUiMz1CXH2fHdY8aUyXDs1NZCedlWZlOgGYUmFDRDNAxvpRT7SGUHCWB2iciI5+z2kTmyHIE98B4pLc60A==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC43yRiosKXD7oSPWW7euj57/itzat7XjZcvjEPam6OIQIhAPN8bcsambEtdHkgoZCqWKa52qneGVoud5163qu0yRJ6"
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.5",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "0.6.0": {
      "name": "mock-fs",
      "description": "Mock fs implementation for testing",
      "version": "0.6.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "test": "grunt --stack test",
        "start": "grunt --stack start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.11",
        "grunt-contrib-jshint": "~0.7.2",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.6.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@0.6.0",
      "dist": {
        "shasum": "5e6e5d2e1e0ede8af6b76a24d0bcb363c034ae85",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-0.6.0.tgz",
        "integrity": "sha512-RKA/v9ozadzhoDltRVXLKWCPu1IfeXJsOO2uKCZrC2gdRTDcoTVRVJX+A4a7a34Nqcoc403FzsxM9jrWI+p4Cg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC6Ycxi8eMiO8wGpQVWUsg2nIH+TYL8ips2NmCi+BCUbgIhAPeilMKri83dI8JNFKfHxClXxYPZ7Gpife9DNtHBZ5L/"
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.2.32",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "0.7.0": {
      "name": "mock-fs",
      "description": "Mock fs implementation for testing",
      "version": "0.7.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "test": "grunt --stack test",
        "start": "grunt --stack start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.11",
        "grunt-contrib-jshint": "~0.7.2",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.6.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@0.7.0",
      "dist": {
        "shasum": "1800cec725c745b7723408654305a68d5f450ea2",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-0.7.0.tgz",
        "integrity": "sha512-P5foMh4M7DEjhyeWyju2aLZE3orX0ciAaYg+i4AEMje+VYJEvWdrilxB/ceoaUkpP5OqIH2k6MyENHyV1hDfQA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEgE1bGuCshqS3ePHwYO0mhtz5tDk+cFmdbkt/QQh6FwAiAskIM+dY8PC7nP4pV6HiNtPnsAUD8nioNA5wgpbpd3+g=="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.5",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "0.8.0": {
      "name": "mock-fs",
      "description": "Mock fs implementation for testing",
      "version": "0.8.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "test": "grunt --stack test",
        "start": "grunt --stack start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.11",
        "grunt-contrib-jshint": "~0.7.2",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.6.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@0.8.0",
      "dist": {
        "shasum": "e5b2e04cb03b9f215cc1a973e9773069d7ab2d1d",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-0.8.0.tgz",
        "integrity": "sha512-S+Zo7sKWEXYcSMTO+YomZkIhntNb1M4gZ1AmnshSUl0ufejxhjtM+XMsMTw7m3XC2eOFlZg0Nk32OKVOYxWzPA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDDL8McBWj+LlOlzWkUYLYszc6FYHRrrNCgmsBr0TzqiQIgMUl3yOEvxdVmfGihbyQVBzngdO/AcGKwWHi4+e3L8iE="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.2.30",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "0.10.0": {
      "name": "mock-fs",
      "description": "Mock fs implementation for testing",
      "version": "0.10.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./node_modules/.bin/grunt cafemocha",
        "test": "grunt --stack test",
        "start": "grunt --stack start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.11",
        "grunt-contrib-jshint": "~0.7.2",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.6.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@0.10.0",
      "dist": {
        "shasum": "d3df1451d13e42574eec1bebe28f5bdaebe5afae",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-0.10.0.tgz",
        "integrity": "sha512-ta252mAAT0eBa/PPM+R0wz+xBWJT/xlEGvHyvTxagEdMzkRkNz0jm3hgui5D6naYrUXty69JVRN1p9NAdd6gTg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCID4plycQ+hb88cThin84LzAPfvba6S6Fly5AedbemW3VAiEAz37hL7YQWj/o1ANXTNXBzuGALkszYmintfw/87AC00I="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.5",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "0.10.1": {
      "name": "mock-fs",
      "description": "Mock fs implementation for testing",
      "version": "0.10.1",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./node_modules/.bin/grunt cafemocha",
        "test": "grunt --stack test",
        "start": "grunt --stack start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.11",
        "grunt-contrib-jshint": "~0.7.2",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.6.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@0.10.1",
      "dist": {
        "shasum": "3dd6f93a3d95e2b7b6f046f5b9e18f2e0603b868",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-0.10.1.tgz",
        "integrity": "sha512-6mOb80GbGB+DG5UG/2+X4ecyGqU2/dYFTBRzaKTl4VsXuMoxXuQfstdN4NzBDNTj/XRRS6XUEmC3wdCeMJjRVQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIE3s1SoqbYdrIQ/QhjAAEzoqIGCI/Pv1iHyaoChttSJFAiEA5L4Tkl/40qaBUsCDFDTt/CjUnlZXsu1BjItfPOrt+5A="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.2.32",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "0.11.0": {
      "name": "mock-fs",
      "description": "Mock fs implementation for testing",
      "version": "0.11.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./node_modules/.bin/grunt cafemocha",
        "test": "grunt --stack test",
        "start": "grunt --stack start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.11",
        "grunt-contrib-jshint": "~0.7.2",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.6.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@0.11.0",
      "dist": {
        "shasum": "422a53309c774de0303bd0b555544e887bcc8a88",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-0.11.0.tgz",
        "integrity": "sha512-dzJvX4c4RBCAV0zDYEcNRQ4NKFqsqtMasJVCJNZaaBD/FmTP0hWnrXtSXQ5D5fsjrbr9DPRXDiFw6S1c73Ny3w==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIBK2301VjssMjfDGkL7wp6l5vWaJI3dbPfdNq9mmNazeAiB7U6E4wdnPY01aIOzoJ3bjOvxH83nhuzvHYzmGy9+aJw=="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.2.32",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "0.12.0": {
      "name": "mock-fs",
      "description": "Mock fs implementation for testing",
      "version": "0.12.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./node_modules/.bin/grunt cafemocha",
        "test": "grunt --stack test",
        "start": "grunt --stack start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.11",
        "grunt-contrib-jshint": "~0.7.2",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.6.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@0.12.0",
      "dist": {
        "shasum": "1905889f193767e474ebc34d8cccbab83004bc4e",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-0.12.0.tgz",
        "integrity": "sha512-tdNq14Mt9t9QJmcEfAohncnFZP8RkpfTva9h9wovK3l0YMOB0QnbcIZZvbHtQSCdjDxKJADglqIJZ6IZ4M6YXg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGPdw3RiOGqQnSLOUWARCAi8cVYIXGnjm03DBRwibpImAiA7hua5QN0YP/lsDACb4OPa52ShPeSqwtcmBtqwGZsKAg=="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.5",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "1.0.0": {
      "name": "mock-fs",
      "description": "Mock fs implementation for testing",
      "version": "1.0.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./node_modules/.bin/grunt cafemocha",
        "test": "grunt --stack test",
        "start": "grunt --stack start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.11",
        "grunt-contrib-jshint": "~0.7.2",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.6.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@1.0.0",
      "dist": {
        "shasum": "79d5d77850b58b536cc44a258689216e0963bfe6",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-1.0.0.tgz",
        "integrity": "sha512-pxDti70huB5cN36rH8oqwoUijmzqI8us6rEV7YQ/zaRdh4UOha5jBYqxQRDpfEqUnY8DqNV6eJulKY3LieKYtA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIAOYFtz/hLUFapp+QXLULE5u/4OWcwPotkpPWNjGTC7bAiAHL54elKrgWv4BWWEk/eHL/+73kbmTh/5X2m8JzfHGqQ=="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.21",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "1.1.0": {
      "name": "mock-fs",
      "description": "Mock fs implementation for testing",
      "version": "1.1.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./node_modules/.bin/grunt cafemocha",
        "test": "grunt --stack test",
        "start": "grunt --stack start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.11",
        "grunt-contrib-jshint": "~0.7.2",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.6.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@1.1.0",
      "dist": {
        "shasum": "56af540d1c2894cda8de3fe8f86bb634b69b1058",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-1.1.0.tgz",
        "integrity": "sha512-+Th4sAWJXjIgjkHgskpEae2vmv6W/kKHJOqkDhN0iG4pvAOOvcvWx3fstoTwW/qO4R2Xbh2tUgB3GGNeNX+L7A==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBai+LxB4ssCQGHpmMFtCOqx4M53Ch3k9BatYFxKC+uBAiEA5P6vFPFE9K2ehvnpNzcN7f0vuZJLDeN/QrOwk63ySH8="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.21",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "1.2.0": {
      "name": "mock-fs",
      "description": "Mock fs implementation for testing",
      "version": "1.2.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./node_modules/.bin/grunt cafemocha",
        "test": "grunt --stack test",
        "start": "grunt --stack start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.11",
        "grunt-contrib-jshint": "~0.7.2",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.6.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@1.2.0",
      "dist": {
        "shasum": "5483e3d5b48d87a93bdf5af3565c93141d0e83e3",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-1.2.0.tgz",
        "integrity": "sha512-Ag5jHC2dz68++YTya+E4G1Tl46WWP8JGsHg3XqlJCcANc9aTHcn2w4jva+lqpfN7TxS9+i11wMRzY5wlv1Bd0g==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCwLD3voQdQnW2IvVTceevaOwIo4IQ20FHQd6Vr1sGQ7AIhAJ3xjcUjS10mHD2jL2iTBicgMtF43y+0gD6CEFPORlIh"
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.17",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "1.3.0": {
      "name": "mock-fs",
      "description": "Mock fs implementation for testing",
      "version": "1.3.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./node_modules/.bin/grunt cafemocha",
        "test": "grunt --stack test",
        "start": "grunt --stack start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.11",
        "grunt-contrib-jshint": "~0.7.2",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.6.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@1.3.0",
      "dist": {
        "shasum": "42d0a2bbdc1e7f954a9421cd35745c0f4353ec8d",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-1.3.0.tgz",
        "integrity": "sha512-zEg/58PNplehfrG18VrnJvDO6DBdkheEPU6tDNgJ9fwMMvvJJalZOsOZUl/sX+GYV7mNdaGbvz18J62nFnylsA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDAgeuwluFlN7vRwfPS10FfpdSZ+SeL0nsEQUGgBemitAiAy8VvZF4pVDQGcnoxkSXUYpfA3BnpCXcL50R4XfnvuZQ=="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.21",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "1.3.1": {
      "name": "mock-fs",
      "description": "Mock fs implementation for testing",
      "version": "1.3.1",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./node_modules/.bin/grunt cafemocha",
        "test": "grunt --stack test",
        "start": "grunt --stack start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.11",
        "grunt-contrib-jshint": "~0.7.2",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.6.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@1.3.1",
      "dist": {
        "shasum": "0bdee72375e47f56de62ee06bb3353dba742d4e9",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-1.3.1.tgz",
        "integrity": "sha512-R9LufWGEafVywDUrbFTHNsWM4R5vMP822oHWYl/01xuXcFmqPoPlJr8xKwAGQlJw2e5aeOTFtVh1TXJPyD3k0A==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAOb8hqtm05ApsqWs/Gnvtcr3TiPR0ilgX2PexaXPYvrAiEA4XrIFVsKg6Yu2SYFzLLN0606A1gUepFhK6VMlW6oIf0="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.17",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "2.0.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "2.0.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./node_modules/.bin/grunt cafemocha",
        "test": "grunt --stack test",
        "start": "grunt --stack start"
      },
      "devDependencies": {
        "grunt-cli": "~0.1.11",
        "grunt-contrib-jshint": "~0.7.2",
        "grunt-cafe-mocha": "~0.1.9",
        "grunt": "~0.4.1",
        "chai": "~1.8.1",
        "grunt-contrib-watch": "~0.5.3",
        "grunt-newer": "~0.6.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@2.0.0",
      "dist": {
        "shasum": "c4188f8ab9dc583e62259dfb102f50bd88ec0862",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-2.0.0.tgz",
        "integrity": "sha512-yPUFqVCiOlzKrFSbKfvP4XfxFaBw01ncgIVX2rwjHhgZVHYwZun7goSPKhPnr9+Kc4ijUqDzm4RdYWB517Jz4g==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFojgEpeiEdLrExRH74YOFa9awQywXol1vYLASdXm7dQAiAaSU51ku9CHJBZfdHfbJCHsOwrSJ3JbG2IGBGNBbRq8A=="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.17",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "2.1.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "2.1.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./tasks.js test",
        "test": "node ./tasks.js lint test"
      },
      "devDependencies": {
        "chai": "~1.8.1",
        "jshint": "~2.4.1",
        "mocha": "~1.17.0",
        "glob": "~3.2.8"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@2.1.0",
      "dist": {
        "shasum": "f48cd3c478cf6e0487c2d69489f0b2872be1a004",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-2.1.0.tgz",
        "integrity": "sha512-BMr+ovzov3ms8qffCdAfIebnDxLOVngUbVElxRJdbOuxAKg2By/lCeQGi6gBNUHR1/C3PurSoOH8FEq9Dnk85g==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQChdoGaFu9EgVscfCKdIbh5IBBZ0ja7W3JfsSkym6MSRQIhAKSs/QK8+AXimJSfCFtEmibDNP7GYTfWN4fiO3iClZ0G"
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.8",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "2.1.1": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "2.1.1",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./tasks.js test",
        "test": "node ./tasks.js lint test"
      },
      "devDependencies": {
        "chai": "~1.8.1",
        "jshint": "~2.4.1",
        "mocha": "~1.17.0",
        "glob": "~3.2.8"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@2.1.1",
      "dist": {
        "shasum": "60f6f34dec5e3ad637a2f115321ad45af915dbb4",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-2.1.1.tgz",
        "integrity": "sha512-+ga9QjUvmkaAj7PhSUvLXIrF93iCAvTMtn2X1gbhxvBieCPeyTkPpU3tzxceA4aO0M0UxUTrl4BpSh2LJvpbXg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCM8L790grb4nHOp99r1CghwRD/J4RTZLI6grSyGnrxYQIhALvEGxPzYEtGYd8TMS7liNBnC9FWG7a2A4Km5e9MjF5v"
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.8",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "2.1.2": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "2.1.2",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./tasks.js test",
        "test": "node ./tasks.js lint test"
      },
      "devDependencies": {
        "chai": "~1.8.1",
        "jshint": "~2.4.1",
        "mocha": "~1.17.0",
        "glob": "~3.2.8"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@2.1.2",
      "dist": {
        "shasum": "96f8703089381d0935f7fbb40ce2370e0e37b046",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-2.1.2.tgz",
        "integrity": "sha512-/oSJyCjALMsvC+tVKxRU66VefGvG67siBePHjzWtUmixmpEK0rc5IgRpbjgZ2OQML2foA3MpoDqHoQTk7teOMg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFFGr23fxmpbmNipiNkibjO9X8UyJPVVgX8C6+uPSXNpAiEAvInB3x3/b7VvrDOv2+qN/ODuJcpj57Y87qoxauZYE0A="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.2.12",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "2.2.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "2.2.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./tasks.js test",
        "test": "node ./tasks.js lint test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "chai": "~1.8.1",
        "jshint": "~2.4.1",
        "mocha": "~1.17.0",
        "glob": "~3.2.8",
        "rimraf": "~2.2.6",
        "bench-it": "~0.1.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@2.2.0",
      "dist": {
        "shasum": "62489888119fc07ce2af872a7729d09b92dbe2ed",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-2.2.0.tgz",
        "integrity": "sha512-N6MtneSqoZ4H35IiTZ0jBN/QdwJyBZ73AIa8CGI2oB5CzA/ZXvNmpsl5SprT7zzZBrJzst7YrFEflAGWH2uoUg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEtagYm39HWfheQVjU5k6S5m1dh5BECBqGFlRrNwXF2xAiAAz9E4veaFNt4Hlug/1tySRVCvhmMaoIoROwrWtNYoEQ=="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.17",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "2.3.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "2.3.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./tasks.js test",
        "test": "node ./tasks.js lint test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "chai": "~1.8.1",
        "jshint": "~2.4.1",
        "mocha": "~1.17.0",
        "glob": "~3.2.8",
        "rimraf": "~2.2.6",
        "bench-it": "~0.1.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@2.3.0",
      "_shasum": "5fd961279e5e3f67a03947a6720c6d9a5360ddee",
      "_from": ".",
      "_npmVersion": "1.4.9",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "dist": {
        "shasum": "5fd961279e5e3f67a03947a6720c6d9a5360ddee",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-2.3.0.tgz",
        "integrity": "sha512-PKp6/pc7JJ5B25aaESiPfb7VllJeb//bUvSv3QPvgKpzpuNeNLa1wUXI2BdH7Nyvf716yYJT5Bn3wVqWg+O7Mg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFvKF7Gh+25Rad1bnYMlCK261HpPjOU9KFr+t+KxqIqjAiAhMCOFr/Bbusmn9O4ohi9ANEyj5BdXFR6hSvDoMoyYaA=="
          }
        ]
      },
      "directories": {}
    },
    "2.3.1": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "2.3.1",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./tasks.js test",
        "test": "node ./tasks.js lint test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "chai": "~1.8.1",
        "jshint": "~2.4.1",
        "mocha": "~1.17.0",
        "glob": "~3.2.8",
        "rimraf": "~2.2.6",
        "bench-it": "~0.1.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@2.3.1",
      "dist": {
        "shasum": "a093d53553afdf0927f834a031c00fcd16751804",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-2.3.1.tgz",
        "integrity": "sha512-5GuIqKJDQ30ooRbdzaDvEaqszL1POhlD1bkYp1KLrGncnnhduGQGXtjnP+zAuS1+01SfxiUptMLgsKzjOWomZQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDM6gi1IPZfonCNhaFd7vDcFR5cUzVWo8f8sqllTYUtvAIhAKaNam6IV3Ff94KMnmc/JR3sL/8f2PQmemRcamshInuO"
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.21",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "2.3.2": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "2.3.2",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./tasks.js test",
        "test": "node ./tasks.js lint test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "chai": "~1.8.1",
        "jshint": "~2.4.1",
        "mocha": "~1.17.0",
        "glob": "~3.2.8",
        "rimraf": "~2.2.6",
        "bench-it": "~0.1.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "_id": "mock-fs@2.3.2",
      "dist": {
        "shasum": "f414c19392a68db6ba7501e05759ce4e75cc2d25",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-2.3.2.tgz",
        "integrity": "sha512-hJQTnFwMEzfnotMQtxdCthAfgdbRTvI9KD1wCyB1lQorOGyQAljmsQNXWcmxe/XDGVxl5p3QDU61pxdyFbwb2g==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDy7O0j6jt+aOQ2o2dJS4iT/Ycn2OV6ld6jgsFBqsoKQAIgEY0ir4NRD4ipFih9kTs5CZbwhnGFyQ4gQDZWpG0gpGU="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.3.17",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "2.4.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "2.4.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./tasks.js test",
        "test": "node ./tasks.js lint test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "chai": "~1.8.1",
        "jshint": "~2.4.1",
        "mocha": "~1.17.0",
        "glob": "~3.2.8",
        "rimraf": "~2.2.6",
        "bench-it": "~0.1.0"
      },
      "dependencies": {
        "rewire": "~2.0.0"
      },
      "gitHead": "9338fad9515cf84718f83d72cfcb64b04542c369",
      "_id": "mock-fs@2.4.0",
      "_shasum": "11324d6c3d1a638d932df3aebae46274cbd9e7de",
      "_from": ".",
      "_npmVersion": "2.2.0",
      "_nodeVersion": "0.10.33",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "dist": {
        "shasum": "11324d6c3d1a638d932df3aebae46274cbd9e7de",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-2.4.0.tgz",
        "integrity": "sha512-Pvgz5t801HjrbA3A/9Ctza2TLX9S93OhcfotCvZhwUPndJq7EBNAEd/LnVaRcPjVWiGwMI+3NmXsInhhKrs+0Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEWb0a6/pJsgFV0Cuk5WyZG2go5HrBrvw1YYMcfu04hbAiEAkjNVe9cJjfh3SPRsUHAhR6/EnxxXtKyXJ288+gdcbGA="
          }
        ]
      },
      "directories": {}
    },
    "2.5.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "2.5.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./tasks.js test",
        "test": "node ./tasks.js lint test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "chai": "~1.8.1",
        "jshint": "~2.4.1",
        "mocha": "~1.17.0",
        "glob": "~3.2.8",
        "rimraf": "~2.2.6",
        "bench-it": "~0.1.0"
      },
      "dependencies": {
        "rewire": "~2.0.0",
        "semver": "^4.2.0"
      },
      "gitHead": "a805ce3f380ab0a2f48e97b5d17b4e1f351e0a22",
      "_id": "mock-fs@2.5.0",
      "_shasum": "26e2ff06dd3772b2cd615a77c5364eca8e6a8522",
      "_from": ".",
      "_npmVersion": "2.5.1",
      "_nodeVersion": "0.12.0",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "dist": {
        "shasum": "26e2ff06dd3772b2cd615a77c5364eca8e6a8522",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-2.5.0.tgz",
        "integrity": "sha512-1+Zc4nBgSj3xoVBGWSSLIu2Ysn9oxpYlv2BlR1zeb0w15n4eOq34fqx+FPYRjB81n7nqHYHqBINuHcM5oGL4HA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCrxzO9jFDCBTjKYMeuSIEhBZhKSO3dBknhmlws5zZM2AIhAIN8alo3HBqtC1zYLGmxtaN4foOo91i4aqu6Z6EDCCK8"
          }
        ]
      },
      "directories": {}
    },
    "2.6.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "2.6.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./tasks.js test",
        "test": "node ./tasks.js lint test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "chai": "~1.8.1",
        "jshint": "~2.4.1",
        "mocha": "~1.17.0",
        "glob": "~3.2.8",
        "rimraf": "~2.2.6",
        "bench-it": "~0.1.0"
      },
      "dependencies": {
        "rewire": "~2.0.0",
        "semver": "^4.2.0"
      },
      "gitHead": "2630094fd7e2f1dab1c968079413fdc8e21989f4",
      "_id": "mock-fs@2.6.0",
      "_shasum": "745a45715a4db56e08efca2613ed0fdc359e834b",
      "_from": ".",
      "_npmVersion": "1.4.28",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "dist": {
        "shasum": "745a45715a4db56e08efca2613ed0fdc359e834b",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-2.6.0.tgz",
        "integrity": "sha512-+Hj2FuM+m0UxUslP7LycarWFhznQ9OvLuAoNedcR+7YiI/pI+ibRpsFpIsJpnaG5xBaaZx38eqY8oarYU14U8Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGCdUHZ8N8E79S8b7kEGL5wdjOQxQuq3e6pjxz2dIsjNAiEAiloDPPL7+bxk/RtmO/yWCJaiyMbBT270oVc1XWND6Zc="
          }
        ]
      },
      "directories": {}
    },
    "2.7.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "2.7.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "licenses": [
        {
          "type": "MIT",
          "url": "http://tschaub.mit-license.org/"
        }
      ],
      "scripts": {
        "debug": "node --debug-brk ./tasks.js test",
        "test": "node ./tasks.js lint test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "chai": "~1.8.1",
        "jshint": "~2.4.1",
        "mocha": "~1.17.0",
        "glob": "~3.2.8",
        "rimraf": "~2.2.6",
        "bench-it": "~0.1.0"
      },
      "dependencies": {
        "rewire": "~2.0.0",
        "semver": "^4.2.0"
      },
      "gitHead": "620c2fb393590069952a546718169c5e87953709",
      "_id": "mock-fs@2.7.0",
      "_shasum": "0383bf4466368148012729173cb367c45101b0ba",
      "_from": ".",
      "_npmVersion": "2.5.1",
      "_nodeVersion": "0.12.0",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "dist": {
        "shasum": "0383bf4466368148012729173cb367c45101b0ba",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-2.7.0.tgz",
        "integrity": "sha512-1/eUUONcD/PlUC6NGOQrpeJag/iuJT/RhJBxmluyxtpLgXJWJsZXjH0MAJLm1EtNA1oSoRuJDV/Qp5yd+50ioA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDgBb/EwFDy3Ebipe9Ri/CHqP7DfGrX3T6vRvs0JvI7YAIhANjho6g6/8j1taea8x2AlmWkOnczm10dWKprpNjlcc8p"
          }
        ]
      },
      "directories": {}
    },
    "2.7.1": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "2.7.1",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "debug": "node --debug-brk ./tasks.js test",
        "test": "node ./tasks.js lint test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "chai": "~1.8.1",
        "jshint": "~2.4.1",
        "mocha": "~1.17.0",
        "glob": "~3.2.8",
        "rimraf": "~2.2.6",
        "bench-it": "~0.1.0"
      },
      "dependencies": {
        "rewire": "~2.0.0",
        "semver": "^4.2.0"
      },
      "gitHead": "28d8839a7bd29540d61b8a208c9ebbe73d30e0b8",
      "_id": "mock-fs@2.7.1",
      "_shasum": "c729df435b2d1322f8608051cac0a4c05ccf51d7",
      "_from": ".",
      "_npmVersion": "2.11.1",
      "_nodeVersion": "0.10.36",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "dist": {
        "shasum": "c729df435b2d1322f8608051cac0a4c05ccf51d7",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-2.7.1.tgz",
        "integrity": "sha512-ma8VxP1j+dRNlawZZa6Ig/I8AMLTZufQWLrgag1XjAI1YSyylY/RJmxY0Vg1L4YbwRxLF7W7BtRKmaFOyNPB1A==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIH281l8NfbvLCk9c7AQPSsjMpSS2a4wRcWY/cb1WJOA8AiBXUCXOp0hhQv3WPnW1xOSiX7Eb1kYJ81FgJenKSkD+tQ=="
          }
        ]
      },
      "directories": {}
    },
    "3.0.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "3.0.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "^0.3.0",
        "chai": "^3.0.0",
        "eslint": "^0.23.0",
        "eslint-config-tschaub": "^1.0.0",
        "glob": "~3.2.8",
        "mocha": "^2.2.5",
        "rimraf": "~2.2.6"
      },
      "dependencies": {
        "rewire": "~2.0.0",
        "semver": "^4.2.0"
      },
      "gitHead": "95b09ede117639d14739e311ac723b408871b95e",
      "_id": "mock-fs@3.0.0",
      "_shasum": "a263384aa15dda9f9faddf9d634ee01df8381b8d",
      "_from": ".",
      "_npmVersion": "2.10.1",
      "_nodeVersion": "0.12.4",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "dist": {
        "shasum": "a263384aa15dda9f9faddf9d634ee01df8381b8d",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-3.0.0.tgz",
        "integrity": "sha512-CuF6aNmldAlijCYr2G9jhVWSqS0yhWwiPYTghR+OFV8vUrw9z4shIapLM/whCz+CYRMv84olxJyqWVhescYvFw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGHgTZga24SQ7lfOyMA6HVlOzctiXiHsYFuiFPYkTobcAiAbNkn/0Mgwpj4fUidihCocLqmSajhq5Fr1u4soAg8UGQ=="
          }
        ]
      },
      "directories": {}
    },
    "3.1.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "3.1.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "^0.3.0",
        "chai": "^3.0.0",
        "eslint": "^0.23.0",
        "eslint-config-tschaub": "^1.0.0",
        "glob": "~3.2.8",
        "mocha": "^2.2.5",
        "rimraf": "~2.2.6"
      },
      "dependencies": {
        "rewire": "~2.0.0",
        "semver": "^4.2.0"
      },
      "gitHead": "c6b33d0719fe4f44b4671df27eff37b5fa73fe2f",
      "_id": "mock-fs@3.1.0",
      "_shasum": "04acae592785199260f734c0f5f934f2e2ed8d2b",
      "_from": ".",
      "_npmVersion": "2.10.1",
      "_nodeVersion": "0.12.4",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "dist": {
        "shasum": "04acae592785199260f734c0f5f934f2e2ed8d2b",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-3.1.0.tgz",
        "integrity": "sha512-gGTFeR6qu7DUVA9WIok/vFWDZaIfO1iY4OpS2h/y5hkb1g0n8ThZ0Sj7DZv/KAkeqRYE7rgZgFbfEfFyMHKFHA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEWCGYOUcerOc1/sgzaPKAeT+SZ4dAB6R9bOkiUcBZKfAiBKcbe9BAthODKWlQqFmwZrrAfRFmMgjz6amw0F8PkbXg=="
          }
        ]
      },
      "directories": {}
    },
    "3.2.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "3.2.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "^0.3.0",
        "chai": "^3.0.0",
        "eslint": "^0.23.0",
        "eslint-config-tschaub": "^1.0.0",
        "glob": "~3.2.8",
        "mocha": "^2.2.5",
        "rimraf": "~2.2.6"
      },
      "dependencies": {
        "rewire": "~2.0.0",
        "semver": "^4.2.0"
      },
      "gitHead": "c3b13a5ede313b5ec0faf5ce91d31edea5893f6a",
      "_id": "mock-fs@3.2.0",
      "_shasum": "83647d482994b192d805d84162ccf523901e307b",
      "_from": ".",
      "_npmVersion": "2.10.1",
      "_nodeVersion": "0.12.4",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "dist": {
        "shasum": "83647d482994b192d805d84162ccf523901e307b",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-3.2.0.tgz",
        "integrity": "sha512-9kGQGUmkdTRIr+Czik/mIIBObSRmsmzLaqybjDqnW9ACp69B5aR0bWA/BCr9VGhBDIAqYdEQG8dIRRSq0miWRg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDnq1XAC9OUoRjY4bdRvPHgjJwsxguh0zVBgD1ON3e7tAIhAIIRn9MLnZ30El9cszcZ5Jcgb6ABDQiTMsgZ4Tc3Zz0Q"
          }
        ]
      },
      "directories": {}
    },
    "3.3.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "3.3.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "^0.3.0",
        "chai": "^3.0.0",
        "eslint": "^0.23.0",
        "eslint-config-tschaub": "^1.0.0",
        "glob": "~3.2.8",
        "mocha": "^2.2.5",
        "rimraf": "~2.2.6"
      },
      "dependencies": {
        "rewire": "~2.3.4",
        "semver": "^4.2.0"
      },
      "gitHead": "7526d08d3544c521fa73f7c989aa2acecdb53e9c",
      "_id": "mock-fs@3.3.0",
      "_shasum": "ed1302bf3793d2b16b82cf67ef69ecb8d836ff02",
      "_from": ".",
      "_npmVersion": "2.10.1",
      "_nodeVersion": "0.10.24",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "dist": {
        "shasum": "ed1302bf3793d2b16b82cf67ef69ecb8d836ff02",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-3.3.0.tgz",
        "integrity": "sha512-F1XlKLwd9HUyRDw2XNkwrcq7Jq8s+hN9VQ4fCtaMEqEH5r8uZGDX1pwvQ/8cmQJqKCVzZAleFM6KgBPe6PQEsQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAmUvZ+JD1f3fe60PCwhqTg5GlUnAtzkgtw4QnJI0AegAiEA0/3eqWJqJqgZl0gjBaZf0/8kv8WxheGGZvNiS1SQk6c="
          }
        ]
      },
      "directories": {}
    },
    "3.4.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "3.4.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "^0.4.0",
        "chai": "^3.3.0",
        "eslint": "^1.6.0",
        "eslint-config-tschaub": "^2.0.0",
        "glob": "^5.0.15",
        "mocha": "^2.3.3",
        "rimraf": "^2.4.3"
      },
      "dependencies": {
        "rewire": "^2.3.4",
        "semver": "^5.0.3"
      },
      "gitHead": "6b454e99f93e45065fb7f561c63739498c67d706",
      "_id": "mock-fs@3.4.0",
      "_shasum": "1ce041d2d7eee34242d285c2a9e38e13ab0bcd6c",
      "_from": ".",
      "_npmVersion": "3.3.8",
      "_nodeVersion": "4.2.1",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "dist": {
        "shasum": "1ce041d2d7eee34242d285c2a9e38e13ab0bcd6c",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-3.4.0.tgz",
        "integrity": "sha512-t3tP595sg3vWULC68ae3vPcC9F2p4AxTzcHtd3c41irpMu8Ev2Br79WRwP31M6dqloJw5ibGP936ewjJZ2q5Ew==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFNDa5xr132kupM5p8n+T8Di9TW9fWw8OzSnfN90xX2yAiEA+823TS7V5Ptkt98A6CVIF2jDes0KKiWpmuffTpjD7HI="
          }
        ]
      },
      "directories": {}
    },
    "3.5.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "3.5.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "^0.4.0",
        "chai": "^3.3.0",
        "eslint": "^1.6.0",
        "eslint-config-tschaub": "^2.0.0",
        "glob": "^5.0.15",
        "mocha": "^2.3.3",
        "rimraf": "^2.4.3"
      },
      "dependencies": {
        "rewire": "^2.3.4",
        "semver": "^5.0.3"
      },
      "gitHead": "6dde8fb8709c4d97212387174d7ce97faaf8a907",
      "_id": "mock-fs@3.5.0",
      "_shasum": "ef17ab7ecc208c903579cdf72ec90ade585438a7",
      "_from": ".",
      "_npmVersion": "3.3.12",
      "_nodeVersion": "5.1.0",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "shasum": "ef17ab7ecc208c903579cdf72ec90ade585438a7",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-3.5.0.tgz",
        "integrity": "sha512-1vAIVJjcx4hahIUZRuenYvZU4AW2NN/XeRXHd1qKbsq8X1b+OgA3tTA6xd7gI5EMcpUtSybzB5/mlYXCJ1Jj5A==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHXYjrfa1EH0n9340Un6mlpFTjmjiR7X74Unn1Rhv+2HAiEAjDgct+gHZuDTMh34TK5zUtZ9grEvJ+SXjUej1JcqePg="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "3.6.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "3.6.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "^0.4.0",
        "chai": "^3.3.0",
        "eslint": "^1.6.0",
        "eslint-config-tschaub": "^2.0.0",
        "mocha": "^2.3.3",
        "rimraf": "^2.4.3"
      },
      "dependencies": {
        "rewire": "^2.3.4",
        "semver": "^5.0.3"
      },
      "gitHead": "ff45a5cb4d16fd49ea4849a4b3748ae53b5c9e8d",
      "_id": "mock-fs@3.6.0",
      "_shasum": "61d694e27311b9484c9020009ab3b346c167d763",
      "_from": ".",
      "_npmVersion": "2.14.7",
      "_nodeVersion": "4.2.3",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "shasum": "61d694e27311b9484c9020009ab3b346c167d763",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-3.6.0.tgz",
        "integrity": "sha512-2uuZD7ExSDLY6zBY8Ta8n4rdGp+T15/tUj4g5H172Pt8zazKgDIOLybIHdwybBnr17U154bVGi6nQuxXuoZgPg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHMCX9yyz+ABuWaUBcyUdPNVBil5TwCTI6WTl0HFCzdeAiEAtZdfzWCsyBfRpfJTTIO9MUEBWSFeiSDUQnqEUeO1e5s="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "3.7.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "3.7.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "^0.4.0",
        "chai": "^3.3.0",
        "eslint": "^1.6.0",
        "eslint-config-tschaub": "^2.0.0",
        "mocha": "^2.3.3",
        "rimraf": "^2.4.3"
      },
      "dependencies": {
        "rewire": "^2.3.4",
        "semver": "^5.0.3"
      },
      "gitHead": "9983a548dd4d17feb63fb56d997ce252d7cca78b",
      "_id": "mock-fs@3.7.0",
      "_shasum": "b0b3eccef9360930ec678f63ecee35abebcefbcf",
      "_from": ".",
      "_npmVersion": "3.5.3",
      "_nodeVersion": "4.2.3",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "shasum": "b0b3eccef9360930ec678f63ecee35abebcefbcf",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-3.7.0.tgz",
        "integrity": "sha512-sG6U9hmnWmkgU4k8bNFgqDs4HqWh/kCv9ArgHWuLXPUVS+Xwa8g/0LzIFlXOH7cohcmjqRFReyXG6BaSM9fL3A==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGYfEqIs3ZecpwGMSqh9e/MWeAna3rh+FZsHMreMqtgKAiEAxV0+x0FE8HIBXzclblJIL/lodPcCwImxz9jmsVZQqoM="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {}
    },
    "3.8.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "3.8.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "0.4.0",
        "chai": "3.5.0",
        "eslint": "2.3.0",
        "eslint-config-tschaub": "4.0.0",
        "mocha": "2.4.5",
        "rimraf": "2.5.2"
      },
      "dependencies": {
        "rewire": "2.5.1",
        "semver": "5.1.0"
      },
      "gitHead": "2883942195b64488160970a3c0c86b36356e542c",
      "_id": "mock-fs@3.8.0",
      "_shasum": "c8c3a5b8a0dd96e1f36d638392f719efdd795ee7",
      "_from": ".",
      "_npmVersion": "3.5.2",
      "_nodeVersion": "4.2.4",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "shasum": "c8c3a5b8a0dd96e1f36d638392f719efdd795ee7",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-3.8.0.tgz",
        "integrity": "sha512-Oy7eyS5gKawjt7erhvRJBzbwkZR/ZierSpXzmm1t3dw3QEO008/wHR4zr+5/mFESCHf789UnQqBkcjfj9aYFTA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDEm6EbdjqYePEJFLA1oOj5IdHxmRbYtJRrnauKeAJvygIhAMQcBui6tPzHl/X3aJtQI1gQj7f0Hw+omay8OtdQHNuD"
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-13-west.internal.npmjs.com",
        "tmp": "tmp/mock-fs-3.8.0.tgz_1457386495395_0.98848701803945"
      },
      "directories": {}
    },
    "3.9.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "3.9.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "0.4.0",
        "chai": "3.5.0",
        "eslint": "2.8.0",
        "eslint-config-tschaub": "4.0.0",
        "mocha": "2.4.5",
        "rimraf": "2.5.2"
      },
      "dependencies": {
        "rewire": "2.5.1",
        "semver": "5.1.0"
      },
      "gitHead": "6788d37d95a704531514336d72f39eb5eaf79a02",
      "_id": "mock-fs@3.9.0",
      "_shasum": "2468ee3ef4a9bd9ed20aff0f2fc4c95f36fa248a",
      "_from": ".",
      "_npmVersion": "3.8.6",
      "_nodeVersion": "6.0.0",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "shasum": "2468ee3ef4a9bd9ed20aff0f2fc4c95f36fa248a",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-3.9.0.tgz",
        "integrity": "sha512-i74hSY0I0cIO6xbuj3vTVAasLXS2lliB9Bj5iY8vB4LZv5M3CX7A9uMEEqGepmF2qahUQ9Y6tx718brUaoqIHw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHjp/qfmna+cbXXxCz1AJ59tlcHYUhm1pwdw3TaA036HAiB2i20C4r1sPw9z6Aiv+lEINMpsshXmPrplagTEfWrOtg=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/mock-fs-3.9.0.tgz_1461945018835_0.010980134597048163"
      },
      "directories": {}
    },
    "3.10.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "3.10.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "0.4.0",
        "chai": "3.5.0",
        "eslint": "2.13.0",
        "eslint-config-tschaub": "5.0.0",
        "mocha": "2.5.2",
        "rimraf": "2.5.2"
      },
      "dependencies": {
        "rewire": "2.5.2",
        "semver": "5.1.1"
      },
      "gitHead": "f6c6747c6d1aa281d9ef347d44226165f96a9e1e",
      "_id": "mock-fs@3.10.0",
      "_shasum": "a1b6635396d74332817371155db256947ccc2d34",
      "_from": ".",
      "_npmVersion": "2.15.8",
      "_nodeVersion": "4.4.7",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "shasum": "a1b6635396d74332817371155db256947ccc2d34",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-3.10.0.tgz",
        "integrity": "sha512-Se2XNh+noPRiA6QTNIIdrpChb2/StguR8WP80m3dJDBpTgnkSwDEAvbMweNz+yjgEG2vFKNIPIcgG7U40R5c2g==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHWIBT638MuvypenZ4/HoACk1xrlbk6J84VcSw5MDnTMAiEA10iaLJIEZFQ5/PPpZ8bJzHpOUiDV6QQ70PMFHASPxFU="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/mock-fs-3.10.0.tgz_1467941561338_0.8102017124183476"
      },
      "directories": {}
    },
    "3.11.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "3.11.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "0.4.0",
        "chai": "3.5.0",
        "eslint": "2.13.0",
        "eslint-config-tschaub": "5.0.0",
        "mocha": "2.5.2",
        "rimraf": "2.5.2"
      },
      "dependencies": {
        "rewire": "2.5.2",
        "semver": "5.1.1"
      },
      "gitHead": "b996e891d3e7591c6b009d5bf3bc4d1bff11e1fa",
      "_id": "mock-fs@3.11.0",
      "_shasum": "096f21dfe985189a0a6efc4b38ceb404ee8e8911",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.3.0",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "shasum": "096f21dfe985189a0a6efc4b38ceb404ee8e8911",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-3.11.0.tgz",
        "integrity": "sha512-NBJtSUXg1VZmpkcDyDxG9H5qW24wlGm4m8/X8YUbuP4TmtzMFcl3LMKAeTH8wqfGv3VDXDp5lYqbKY6j9+df4A==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIBqI8pLmsVIL1bFMyL/5BRub+hRFAas3uttUCQyVDPtkAiAqNFhfnAOkvSOk9NMLpndcLa9myGYKagNGP93s61TIPw=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/mock-fs-3.11.0.tgz_1468070061866_0.4857688162010163"
      },
      "directories": {}
    },
    "3.12.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "3.12.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "0.4.0",
        "chai": "3.5.0",
        "eslint": "2.13.0",
        "eslint-config-tschaub": "6.0.0",
        "fs-extra": "^0.30.0",
        "mocha": "3.1.2",
        "rimraf": "2.5.4"
      },
      "dependencies": {
        "rewire": "2.5.2",
        "semver": "5.3.0"
      },
      "gitHead": "a5c87d95fcc2ecdbe858a55615a8a4e93c046bde",
      "_id": "mock-fs@3.12.0",
      "_shasum": "d8b7aa9a9d80eb820b03af5111925c1834eebc8a",
      "_from": ".",
      "_npmVersion": "3.10.8",
      "_nodeVersion": "7.0.0",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "shasum": "d8b7aa9a9d80eb820b03af5111925c1834eebc8a",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-3.12.0.tgz",
        "integrity": "sha512-T0f53yg2afG1w5cwwCYiavshVapOP0yz3hwgJ98hdAXNxdMhuIetgAOp+VI91V+sKqeBTYRXIlgkEqENr+/5/w==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEJBhb/GXp/tckUm6YLFfj/Xb3oMKHGELha+pSJ5EDs6AiA2R9yFP0GaWfA6RP6nvtrlMW63dlJJwzEGwPdHH7coFQ=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/mock-fs-3.12.0.tgz_1477624045905_0.7573552541434765"
      },
      "directories": {}
    },
    "3.12.1": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "3.12.1",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "0.4.0",
        "chai": "3.5.0",
        "eslint": "2.13.0",
        "eslint-config-tschaub": "6.0.0",
        "mocha": "3.1.2",
        "rimraf": "2.5.4"
      },
      "dependencies": {
        "rewire": "2.5.2",
        "semver": "5.3.0"
      },
      "gitHead": "664510404188c2798d62b87fda8512afdafc50a3",
      "_id": "mock-fs@3.12.1",
      "_shasum": "ff27824cd6ab263a7eb05a115239d41d3631f5f8",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.3.0",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "shasum": "ff27824cd6ab263a7eb05a115239d41d3631f5f8",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-3.12.1.tgz",
        "integrity": "sha512-BHW+aJJ8WouVxCBxPdeP3dvpIyJYSgynY5sBpRWM5seIIULPeGhQQEkEPDCb2j4iZHZ1g9C6y8tl7+Rs/DjiEQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFm4uBplo/FqUF9QekbrMNuHb/cx9/Nqn9QLqD+W/tvzAiEAm74PzKMcQ8kpe2dZU2tYYgT83/q8FsnQOJMgGht2nHw="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/mock-fs-3.12.1.tgz_1477967222207_0.6845455253496766"
      },
      "directories": {}
    },
    "4.0.0-beta.1": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.0.0-beta.1",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "0.4.0",
        "chai": "3.5.0",
        "eslint": "^3.11.1",
        "eslint-config-tschaub": "^6.0.0",
        "mocha": "3.1.2",
        "rimraf": "2.5.4"
      },
      "gitHead": "b3d19b3697232ae8348b3f655afd01d41a2798ef",
      "_id": "mock-fs@4.0.0-beta.1",
      "_shasum": "05193cc83611104005da3f09ce8084c75c523165",
      "_from": ".",
      "_npmVersion": "2.15.8",
      "_nodeVersion": "4.4.7",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "shasum": "05193cc83611104005da3f09ce8084c75c523165",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.0.0-beta.1.tgz",
        "integrity": "sha512-5+0FrJFaTqPgQIm4EnAxgg+gPjQRlcqABHGf5r2sJusUzTZ/ThakG4PewJolEp/70WarMEjCDgoTj6FICA6Buw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCKcCth+uLhftKM1E+nwE+hCs2sHKDj0EHyUM8JxjTZTAIhAJ8uKjzex6LkjeAJ/nVcCyGzWZenK1sNGinqbcVJRQP8"
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/mock-fs-4.0.0-beta.1.tgz_1481218162110_0.6283714782912284"
      },
      "directories": {}
    },
    "4.0.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.0.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "0.4.0",
        "chai": "3.5.0",
        "eslint": "^3.11.1",
        "eslint-config-tschaub": "^6.0.0",
        "mocha": "3.1.2",
        "rimraf": "2.5.4"
      },
      "gitHead": "84523af5e0c2ab997feb30d0e19aa6ee5ae6ff66",
      "_id": "mock-fs@4.0.0",
      "_shasum": "3edfe45f1dda0228f26581054b049a26db3a2619",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.3.0",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "shasum": "3edfe45f1dda0228f26581054b049a26db3a2619",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.0.0.tgz",
        "integrity": "sha512-z2oLbDstRNX29HDEPvzRdtwHqcgS7nkor5cBAN5vt/qqVSbAwUU4g+uA0P1IqkUbK8NA6InrLLvY2bl34wXlnQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDbISlhZsIXGWwzxGO0fVasqnb7o0CfJXyfE/ECOTlt5wIhAOzbACwoHe3fIwfrlT0SZFTenNOaizPfe2nWr172BVap"
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/mock-fs-4.0.0.tgz_1486319369863_0.45537837594747543"
      },
      "directories": {}
    },
    "4.1.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.1.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "0.4.0",
        "chai": "3.5.0",
        "eslint": "^3.11.1",
        "eslint-config-tschaub": "^6.0.0",
        "mocha": "3.1.2",
        "rimraf": "2.5.4"
      },
      "gitHead": "61926f83aae105e87e2a23a1a13ab0d821672ea3",
      "_id": "mock-fs@4.1.0",
      "_shasum": "9c0a5c63ce9261894c5824645baaf95abe163e5e",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.3.0",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "shasum": "9c0a5c63ce9261894c5824645baaf95abe163e5e",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.1.0.tgz",
        "integrity": "sha512-M8QNN1Y7HRz0mlG2C6Vla44jIMQoOlv5X/yXPiP1Gavz+EtbP8AaDckjLo2j8Kxk3iXFHRwVtwcw9/ELjYmV5g==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFVzju/2oGLOrdFrhssb0uh+U9BuaI5DjxLNfzUJimeqAiAgK3UQXDlTtlDbGuP8dMSXvGkiwjpm8Ph1PtKdJbvLNg=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/mock-fs-4.1.0.tgz_1488054447084_0.5100342228543013"
      },
      "directories": {}
    },
    "4.2.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.2.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "0.4.0",
        "chai": "3.5.0",
        "eslint": "^3.11.1",
        "eslint-config-tschaub": "^6.0.0",
        "mocha": "3.1.2",
        "rimraf": "2.5.4"
      },
      "gitHead": "d7532caa28638a01784921e6f980cf8b79f3d54e",
      "_id": "mock-fs@4.2.0",
      "_shasum": "ef53ae17b77e64f67816dd0467f29208a3b26e19",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.3.0",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "shasum": "ef53ae17b77e64f67816dd0467f29208a3b26e19",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.2.0.tgz",
        "integrity": "sha512-lFkQacnxJWRGCNwfEwO0uBY31DMfSFe+Tt+xEOrLLboaIRhENpXpDgy2T9IJcyIdiMoMMPQQtJwjtbxica9whw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAZ+q2JUyeXxQCPt+F8HXwRecI6E1lMIHKFabCqabCJFAiEApPHRHULApqVL9MBEZlSnl02gWqRR2elOCf81DqOBdro="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/mock-fs-4.2.0.tgz_1489434603845_0.7061860121320933"
      },
      "directories": {}
    },
    "4.3.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.3.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "0.4.0",
        "chai": "3.5.0",
        "eslint": "^3.11.1",
        "eslint-config-tschaub": "^6.0.0",
        "mocha": "3.1.2",
        "rimraf": "2.5.4",
        "semver": "^5.3.0"
      },
      "gitHead": "e3186d6e1db4db6450dedf35d8f84ffd853a02cf",
      "_id": "mock-fs@4.3.0",
      "_shasum": "c2fab8d784283287e9b6ae7538f2dc56c1a05ed7",
      "_from": ".",
      "_npmVersion": "3.8.6",
      "_nodeVersion": "5.11.0",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "shasum": "c2fab8d784283287e9b6ae7538f2dc56c1a05ed7",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.3.0.tgz",
        "integrity": "sha512-4WoQNBtFXdGjCdn67v/DE2B9vX8bQr4dGnP9MtQuGEfmCy1sg8vaIux4AqN5L1xOoVu2+PP6TNbNk38y0IXm9g==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEWntbqrjcm0oobHWwTFq863Sj06tr8SOGbuO1Xuzd8zAiArabYE8kHnaK8s7kkVi50q8E/6EEI0NCh8Fexx84PXjw=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/mock-fs-4.3.0.tgz_1493566634775_0.05982508324086666"
      },
      "directories": {}
    },
    "4.4.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.4.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint:fix": "eslint --fix benchmarks lib test",
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "0.4.0",
        "chai": "3.5.0",
        "eslint": "^3.19.0",
        "eslint-config-tschaub": "^7.0.0",
        "mocha": "3.1.2",
        "rimraf": "2.5.4",
        "semver": "^5.3.0"
      },
      "eslintConfig": {
        "extends": "tschaub"
      },
      "gitHead": "40b21603b14760b3db9beda8b1bb58362f5c49fe",
      "_id": "mock-fs@4.4.0",
      "_npmVersion": "5.0.3",
      "_nodeVersion": "8.1.0",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "integrity": "sha512-xSe2m/gR/iGhEdgUNxFC4wF8lX+L8HqiWWuke4KwoVtYMTsn3zPatPzTDIMv3jFfpmv9dbhKQGym5Hznm+6L/g==",
        "shasum": "b29d5c5eae826e879aa57c61b1b6f2c5a8b97013",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.4.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHabjEsFoOC92xWjv5mXhXfJcH7/0wD1X7IsAczGc0D4AiAjdMIc+zwGESc+4xkrPuYOTaFrm2xmiD3u2z/x8wTrBQ=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs-4.4.0.tgz_1497208653626_0.3520946800708771"
      },
      "directories": {}
    },
    "4.4.1": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.4.1",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint:fix": "eslint --fix benchmarks lib test",
        "pretest": "eslint benchmarks lib test",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "0.4.0",
        "chai": "3.5.0",
        "eslint": "^3.19.0",
        "eslint-config-tschaub": "^7.0.0",
        "mocha": "3.1.2",
        "rimraf": "2.5.4",
        "semver": "^5.3.0"
      },
      "eslintConfig": {
        "extends": "tschaub"
      },
      "gitHead": "305ef0f6d0624e0cd6c0912c94e36eb2f2357563",
      "_id": "mock-fs@4.4.1",
      "_npmVersion": "5.0.3",
      "_nodeVersion": "8.1.0",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "integrity": "sha512-C8aapOvl77Bs18WCkejdLuX2kX8DaqaJ7ZmqUmX9U6HD2g31Pd0tZfNBAEVulmJWKyzUIyutrtxiIoNdXLAYsw==",
        "shasum": "f285fa025b42a4031faf75b66f632b21e7056683",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.4.1.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFS20GA27pmmEbCPufw42O9q24CIeTtBudhr4TCWuWoDAiAIIxf8cSdNJXghzOQ9nIhaz2kXtUO1BN8v5SBqKjFiVg=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs-4.4.1.tgz_1497208728136_0.6345693718176335"
      },
      "directories": {}
    },
    "4.4.2": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.4.2",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test",
        "pretest": "npm run lint",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "0.4.0",
        "chai": "^4.1.2",
        "eslint": "^4.8.0",
        "eslint-config-tschaub": "^8.0.0",
        "mocha": "^4.0.1",
        "rimraf": "^2.6.2",
        "semver": "^5.4.1"
      },
      "eslintConfig": {
        "extends": "tschaub"
      },
      "gitHead": "8667e34db748977b2d6b95d1e34f74629018d990",
      "_id": "mock-fs@4.4.2",
      "_npmVersion": "5.4.2",
      "_nodeVersion": "8.2.1",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "integrity": "sha512-dF+yxZSojSiI8AXGoxj5qdFWpucndc54Ug+TwlpHFaV7j22MGG+OML2+FVa6xAZtjb/OFFQhOC37Jegx2GbEwA==",
        "shasum": "09dec5313f97095a450be6aa2ad8ab6738d63d6b",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.4.2.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCFoZA5CScRIIfZFV/c+330hTkQnuRCSWWyigsZnQMPEQIhALTUNBCUMBoqJp8TihIRzlgd0WISc6/+0LDKeWiIgin3"
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs-4.4.2.tgz_1507913143284_0.5897581661120057"
      },
      "directories": {}
    },
    "4.5.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.5.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test",
        "pretest": "npm run lint",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "0.4.0",
        "chai": "^4.1.2",
        "eslint": "^4.8.0",
        "eslint-config-tschaub": "^8.0.0",
        "mocha": "^4.0.1",
        "rimraf": "^2.6.2",
        "semver": "^5.4.1"
      },
      "eslintConfig": {
        "extends": "tschaub"
      },
      "gitHead": "5b165be6b7280b7c9ddaab9adac89a6236d123d0",
      "_id": "mock-fs@4.5.0",
      "_npmVersion": "6.0.0",
      "_nodeVersion": "10.0.0",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "integrity": "sha512-qqudNfOX7ZmX9vm1WIAU+gWlmxVNAnwY6UG3RkFutNywmRCUGP83tujP6IxX2DS1TmcaEZBOhYwDuYEmJYE+3w==",
        "shasum": "75245b966f7e3defe197b03454af9c5b355594b7",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.5.0.tgz",
        "fileCount": 35,
        "unpackedSize": 275114,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa8KF+CRA9TVsSAnZWagAAN3oP/1tpzu8scyDI3Dur7j1f\nXm51d5+YYAe6r3rD9Um/V+JfmK4sn/EblzozeghbGtASauqDygpOiM/hJkXl\nBifgzaAOYJXVkGcc/bwAAvWxUZ1RHEtHygySJ4xNgn09hXPh8m432lRXEPhZ\nYldkyFAEyKCcumjCMTDNeJnD2+gT8jBv4REAYPWqirC+CvXJ3fUCjBryq3xF\nqzsXhK96uzrJenJOTHqngEuoGDSrX4D0Bxa6vvC1UnQD9oKbn3JGmoNX2pgi\n2689nc0KND87QdZoIT6oZd+Qxnc/lBwyMcxSPeP4ybw/tOxjidG8SP3QayBZ\nCMxjvKIfJZynLbb2QXlsMPf+mwJ4/WiUd7o+rzXd4w4iYbGMrKCFOQU5hfOw\naB5S5Tf26lesvHHpHFJ4xmE2jeT2tEgJuZiB/me5Z4yzO7n1esqULCR2JW4V\neIvD02DdB/LSLdgAvOYQ7ZT0kLrfDSMcYYVy8XsexyIflVxNNR1Mq4YpWYbI\neSuUSdCwIDLHWSNxF1PUcowdKdqBhtr/Goanu1ZP7sJq2yd1MSf6ZRQ4erNG\nvOPrttTv12wsdEmca9Si5KDZ0/YNT+1HDgn8QRZ3UnnhKvtG3CRBTblQ+jBU\nNqzSE88p6tMIJHjyNtBn2nKrd91UbtYPoJ86keM0SBb0jTVixif1sn6mF7TI\nIsGg\r\n=FzyO\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDw5uECvyG2Wp4DUAtFnkNP4Jw9+uknYaRa/A+u8BrpOwIgZ8wzZHvVKWGOmpZOvU9va+KD1S7ODnKT1r6ZoN3XI3s="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_4.5.0_1525719420776_0.22015987290862116"
      },
      "_hasShrinkwrap": false
    },
    "4.6.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.6.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test",
        "pretest": "npm run lint",
        "test": "mocha --recursive test",
        "bench": "bench benchmarks"
      },
      "devDependencies": {
        "bench-it": "0.4.0",
        "chai": "^4.1.2",
        "eslint": "^4.8.0",
        "eslint-config-tschaub": "^8.0.0",
        "mocha": "^4.0.1",
        "rimraf": "^2.6.2",
        "semver": "^5.4.1"
      },
      "eslintConfig": {
        "extends": "tschaub"
      },
      "gitHead": "96b28b6e7c687808bae570401458c326ca0c8910",
      "_id": "mock-fs@4.6.0",
      "_npmVersion": "6.2.0",
      "_nodeVersion": "10.5.0",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "integrity": "sha512-aYutNIwFaMsVgtMoc5vMsobA/yRJR2FTUFoTZgnjdb3gID0g8WMmeafWmHPgzKgZ7zwQ5kggYUgeq5sN9k9uDw==",
        "shasum": "d944ef4c3e03ceb4e8332b4b31b8ac254051c8ae",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.6.0.tgz",
        "fileCount": 36,
        "unpackedSize": 279637,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbZ9tiCRA9TVsSAnZWagAAz04P/2XxmlyGfUNPjw30M8YA\nFMgZKaAnktq29fk0UDjWokqXioCivGVV77GCxlyVeuHb/p0D72qZ1AC7tw8o\nvSz1JI/GCnwediXLbf5DyEYO/6Go8lAS7b4gPuCUlDjnnJafMoKnX0vs8bEP\nqbzwofMyq2CP5dRNciE5fE7vLtpotNRMd0NjoWA+BFfoAftD8B7E59NtFO95\nXmvEAlbwmRUdYm9zX0PFNrdB2ognoJAn7Gr24sn5/uUxo+NXfHtCYwS2ufkF\nQCSr7VaeIh2hps5Adno1Q0BlJwL2nMPn3rvyXRjFPepUU7Wqor6wiOJLXawd\nJJpUzwncX0me/xCZy9uLpXIHGmss/raVEq+dSqDnFnvZDo25WswLwjsLqTb/\n9NgkTpIB/RvY0Bspw7lCYHjEeV2qMKuVpdHh7MUWuLnYgtgc2IDeaxHFT5/e\nVY1GfCN1RrbtEtXa6T1xvSh4fYQ38HlGjl06ufq+mGCSaoK5j0D7GbB130+7\n6JBrAHooDSCzIhivZJMJnZVmVQYkccB93F5f4J3FPZjlDTbDubh7zqNWIw7T\nCwkhEKEjNrR/yUCfgEUWHqp6H8w5+mYHG33AnAJ/l9WM0RBsTdTADckfnj50\nDz9cCPiPfd5w8UVmO9EFQcIxzEEWFf7Qvw2uxPznXpRJHz7Tuhn4YT9POlxy\ntPQS\r\n=uuOF\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCp/3ais+Y1uHvwrpxnuxlPVoqoL6pvSsJLNgh82COIpwIgNij42nl7r5y1vBa1pLjq5tPPXdAWadLqQLaFkHVLXDA="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_4.6.0_1533533025882_0.7874531716446045"
      },
      "_hasShrinkwrap": false
    },
    "4.7.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.7.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "devDependencies": {
        "chai": "^4.1.2",
        "eslint": "^4.8.0",
        "eslint-config-tschaub": "^8.0.0",
        "mocha": "^4.0.1",
        "rimraf": "^2.6.2",
        "semver": "^5.4.1"
      },
      "eslintConfig": {
        "extends": "tschaub"
      },
      "gitHead": "8f84cc731cd4ae3cf6816df94afa833119ce1735",
      "_id": "mock-fs@4.7.0",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "10.10.0",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "integrity": "sha512-WlQNtUlzMRpvLHf8dqeUmNqfdPjGY29KrJF50Ldb4AcL+vQeR8QH3wQcFMgrhTwb1gHjZn9xggho+84tBskLgA==",
        "shasum": "9f17e219cacb8094f4010e0a8c38589e2b33c299",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.7.0.tgz",
        "fileCount": 14,
        "unpackedSize": 88903,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbmA+uCRA9TVsSAnZWagAAfhIP/1KqrPHVchmddj2b85kh\nF6WYethaHDtR+qJiLBrbbtOTz8Vu5gdKg+ONjJyU5+MrPey2N2apqRbopUu1\nM13evEV2Gd9YYUet/TKwgaDTp3T7MhuHQSXvdw88grs24INmROAvqquX/cjL\n00v5IQjY//E9KUCI/ysNamTPhEPuHSx+Mve7hf2yYX/yRJhKdpcfv9cV78n5\nOkI3b5MwreuwhfkJJ6tpKIdsQqkDcTNzWLaAE7jbuDf/8S0BJ587rD2H2Tyc\nztKAQli1oc7faAPegHjOX57dpEyQUVXLAGhqUyTP7tFSu0Bil26V/SQFhVNp\nJVcDIaJNlHJu3OuhhHBT4pps7ZoYhYlcZcgWSOHQ6naDx8frWRoSZQHl/Auv\nnFugrnCyvRik2iBe4jWQBKY5TVMZO0hUx4rPg9RXvgSXqX2B3t6oMLTSwd40\nQSVEYLgntiimZOdH/6NFW2/b2CJPVEJOnh15DkYF7o84o87iPXWn9Dt5MR9H\nK/o/fHKdbz4C4gAjwB8F3iMZlYQ7PQMQepvEEIRCxCVPxHake31zeRV+hdPE\ndWrVoIlsATNabN78+HWbRmzwqrbmKNnPIztMjisrnfKXeQ/jb8BYyE9NBAWW\nOuwHSQ9QIJ8jGok8+BosnrP2rCDnznGkBgOp5bLwbldbvlx39Q23G5jxG9W3\nly+A\r\n=roGm\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFLo1vSxy/nocPzKYDGclheRSzph7b8sdb4kjEnHjUxmAiEAq1S2FuzzQxhHyJ4s3RZ619N06C9yUrcd9uiAO5Uq1Kw="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_4.7.0_1536692141543_0.06134751236665026"
      },
      "_hasShrinkwrap": false
    },
    "4.8.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.8.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "devDependencies": {
        "chai": "^4.1.2",
        "eslint": "^4.8.0",
        "eslint-config-tschaub": "^8.0.0",
        "mocha": "^4.0.1",
        "rimraf": "^2.6.2",
        "semver": "^5.4.1"
      },
      "eslintConfig": {
        "extends": "tschaub"
      },
      "gitHead": "d5e7cb5294d462ba82c0ef2caaf79816b2ff20f5",
      "_id": "mock-fs@4.8.0",
      "_npmVersion": "6.4.1",
      "_nodeVersion": "10.10.0",
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "dist": {
        "integrity": "sha512-Gwj4KnJOW15YeTJKO5frFd/WDO5Mc0zxXqL9oHx3+e9rBqW8EVARqQHSaIXznUdljrD6pvbNGW2ZGXKPEfYJfw==",
        "shasum": "eb0784ceba4b34c91a924a5112eeb36e1b5a9e29",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.8.0.tgz",
        "fileCount": 14,
        "unpackedSize": 92980,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcWGo+CRA9TVsSAnZWagAAzlgQAJK9v/lGgAADied8zywY\nX6i5XXl6tZmzwBhApDppq0GzgDq50HblDKpDkZN2slYYwu/6aF0+xD3P/3DK\n1rw7ijM/yrM79zoEdW1ZWQDPsyImoU0gpVRZMb+G0Okf4aw3W9nM0+Dv5CK1\nJ32ddoBZyI/J0AqO+toXOknLQSMzJm6WyXl9PyoyjEFhEWaOvxP/gscJUDqp\nwbzJ1MtLIvidZuTSCIYx+Tim7j7PEJkY/THdjqk5bUIKl3R5mWl2ojnZv3IG\n7UfI+cumfuLnx9Ugonj22vkaasHKXh4DAbEIRxuVprZHfV3sGp6huzYRW06d\no8Fb1Bj2rFCbfy34Jl85LMq/cXzS+gDDXGuLFam9N5zQ5sdfMB8fupLZ2wYw\nuFp74oDo/7C/vG7t3je+kwdTgjb3VGskGfcuVIv7jjJA3y1xw/N6yVVmDtce\nntmDgeFP4kNW3M0IV4j2v/VCQ1gv4ZkIAH9vXUZgRLqjHQxLTlESqgP8Yjj+\nW8XycXNVgmk4Cziuvp2vwogRGYO3OOesxDK38AC8M/4G4KU+NcUcp6jtUtmB\nZ/7T0HlmqH1L8wkNJMx4ntiPAxrRB/1smCFSfI7EEasNmyAGzg+ejSbmfSnj\n0sIC4aerQotadrCSmsmqFuyGViApBcr0m9EfoKi/a8COWFq9R9vFxbx8ofED\nxfGp\r\n=gvWC\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGQFG7mw+m+Dux60W7rnpdnAlN+INicuJJM3WjSJp683AiEAsdBC0U9HeDkhODEkmM6pJkZK10+/T9YCa9b5Nsp+hkY="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_4.8.0_1549298237728_0.7137182353057747"
      },
      "_hasShrinkwrap": false
    },
    "4.9.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.9.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub"
      },
      "devDependencies": {
        "chai": "^4.2.0",
        "eslint": "^5.16.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^6.1.4",
        "rimraf": "^2.6.3",
        "semver": "^6.0.0"
      },
      "gitHead": "130e85cece510f9bd7bf7de258b4a6a35e2bbdba",
      "_id": "mock-fs@4.9.0",
      "_nodeVersion": "10.10.0",
      "_npmVersion": "6.9.0",
      "dist": {
        "integrity": "sha512-aUj0qIniTNxzGqAC61Bvro7YD37tIBnMw3wpClucUVgNBS7r6YQn/M4wuoH7SGteKz4SvC1OBeDsfpG0MYC+1Q==",
        "shasum": "7fc0c2f82965050b2776f8eb4eb63ca53a92ff86",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.9.0.tgz",
        "fileCount": 14,
        "unpackedSize": 94426,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcvdZ8CRA9TVsSAnZWagAA30sP/35ADo1a+sTs4NPZPsSO\nPYMc3SgJGQ1V6RwihNVt4fLcZKu7nKDlyDwXxiIbU/8fyyWEYOPq7GZeu4Ep\n2Gb8WiGhgtPMt9prVwNUVR0Ejr5NBf5PHrz+PTAgqv1l8tIBzwQnB09SqoUj\nS3dxUX1MPb36Dn5VsT+yCBofgJqG2JsXCvjmyHoExBnWaVfyJYpNtcGRbZmS\n11SV2BFGRklcesVWgB/DALYHJUD5NDFHrsiyg59zgSXi2lSIYyRRjb+qlGQe\npgG737srEENNKPNhO3nAy7MHT0+rObtVgqfA+wUJIT/IeRuSg6vLGiH35Vmq\nFrQ6faFqvJ7R5n52x8wXleFSGTDyRZv0/6bNfvHljz/EuPJ+MvF8obEVU87S\nhtOZzJvDFz0ChKn5avRJDmqEOgrrxrgaK6qlTl8903uGDQq8iTYY8czILHnK\nWt87WcIxpMZmsMxKyAv4zfFgnGbVDqAYOCGE9z+ZXJRZrx65hnbotwklyVL2\n4l7kRRvjvah1eIceNY4TdxQ+rnLe/T/ZPlzQ1qybxf8OA3YXF074GbhHT0Hd\nEXToJee3IezYmG2HwX/8D0Cfg9Dze6fZ3QLhWXPDUw5K+faJ8K9ORqxG6BnD\nJapXZ3QjQoUoI2bXqpEZKH0MpbJecpOIv3xjfRCUjE/kZb4z4U/38N4fnAdA\nLE1y\r\n=JrgC\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDOdjoO1DjG6khOb0HWekclc+rnfdnSPReUToJ44UW7mwIgS7gLj8GlI4cX5XGQmWbb7NURCswETUkIiAq6zlZFpBQ="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_4.9.0_1555945083925_0.12885945806684207"
      },
      "_hasShrinkwrap": false
    },
    "4.10.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.10.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub"
      },
      "devDependencies": {
        "chai": "^4.2.0",
        "eslint": "^5.16.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^6.1.4",
        "rimraf": "^2.6.3",
        "semver": "^6.0.0"
      },
      "gitHead": "0bbd60a247ddd6426d449ccd5b940670f6072fc1",
      "_id": "mock-fs@4.10.0",
      "_nodeVersion": "10.10.0",
      "_npmVersion": "6.9.0",
      "dist": {
        "integrity": "sha512-eBpLEjI6tK4RKK44BbUBQu89lrNh+5WeX3wf2U6Uwo6RtRGAQ77qvKeuuQh3lVXHF1aPndVww9VcjqmLThIdtA==",
        "shasum": "1d017f797416c9f4879dd58ee9438d8b9323a731",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.10.0.tgz",
        "fileCount": 14,
        "unpackedSize": 94739,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc4tg1CRA9TVsSAnZWagAAeLIQAJzPsLx4KSF3NqwelkLz\ncJ2oDW10NZjct5lzz3chdggxxeW7XQlQuq7xjardHGQ7fCdcWDcuuLTcHnWK\nemhoXYkPkGma23GEqC707GftbMggrIRAG4RSWezWxJbirWLPe52ZdF1KuqMj\n90oLf18eB5OqmIDnTcAtSHm2wKZBFHrROYlpniBBUSNGxAUt88mkg6xbZZ5s\nMXtmRz04yjg3NjB3eMiv76fzel5ecDCbwTWfY0drD8MqEwnUwVAv2DmX/GGo\nrxJUB8+WrkQMFmvup1q6A953Ljh8eElFgwP5jYdcxwR4j1OwnvFDzkXXS3mc\nv7NXz0xuX9FyaPP3Svd17re4u/4Om9WY377gVJVbY72vPQ6wlMrzk0Xx7XOi\ng+DL6j4ByaLmmN5IJg3m+GETKspnVbxftnevt/sIoDP9+JFpG3ivp/k7IwbV\n7mAGInueQFtHG7AbDe1XUT7LEEbweo0IH0HoG07tWjZMBKn8DMAl6a9HOR1G\nrRZjFO/CUicONQ8rKwbKRz1+fUMoGKXaiKWJDA36wP1nlZEpTblI9Z4rqeu3\nb+/UelSBkIUjmt62sTC2OJcoCQid6jz+5bCA4azN99uNjFjJONGWM8NdAzdH\n9czr//IKGTwhRt8+8odS4FlGfqGae9NGFeuZt7qXKATHxu3RgzeBftbPttlE\nNudo\r\n=y3zp\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCHypibfefPcAblQjQ1ibrx/9AJbhxyHPhtjJ/fEcMDaQCIQCVZGj+fIvQNq9SqHADyB9/I6LoG2n6Zb6CSF5ldfyXpg=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_4.10.0_1558370357036_0.10483662026128537"
      },
      "_hasShrinkwrap": false
    },
    "4.10.1": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.10.1",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub"
      },
      "devDependencies": {
        "chai": "^4.2.0",
        "eslint": "^5.16.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^6.1.4",
        "rimraf": "^2.6.3",
        "semver": "^6.0.0"
      },
      "gitHead": "7c33296d94ad35d382cb38ce0bfbca3de7412490",
      "_id": "mock-fs@4.10.1",
      "_nodeVersion": "10.10.0",
      "_npmVersion": "6.9.0",
      "dist": {
        "integrity": "sha512-w22rOL5ZYu6HbUehB5deurghGM0hS/xBVyHMGKOuQctkk93J9z9VEOhDsiWrXOprVNQpP9uzGKdl8v9mFspKuw==",
        "shasum": "50a07a20114a6cdb119f35762f61f46266a1e323",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.10.1.tgz",
        "fileCount": 14,
        "unpackedSize": 95044,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc9zIrCRA9TVsSAnZWagAA8cQP/0922a840HEJV8tFyDGi\ngkf7ulFZZ5hycuxnCIF55hiyLRI6/ViKk9SzIqUfK2ZA3t+c6qq8uuBkLXH/\ns8YVf20uB5OAIwSJJbwJnV9tfSp8kxLRuHUmrL5meVgqzaRPMzz966/q4UdJ\nu0joWwRyS7pTQdmgpRPAC6Zg8bPjlWevwMZor6vh1bdJ5QipYfYB3GohQk9Z\nxdnE4QmSSbE+QYp32U7bLWShXVJoHmMdecY5uXhyKYBBshdAQoZngb2fiAHS\ndKL9fQVzj+vikkyf3rjOVVmZysOIs0KTWNQR5SA1QA5XB2+Nn/r2ea6UZoZ/\n+bwZpvJESzqcpYo2qFTZcbRqpG8QxBCx70zeTalCzGrilYoizu9q03/dsJVq\nY6W2Ib+RtxeYdJtpoEivLRJyEUIkjaxpmewPQnvOc0gOXp9CIq2SmjFR2bwT\n2vux/3D1Mlgh8Xen/pFk0idjKoKkKEJ0KbMVVCbkobf5BXnjhZc4BTu7UiTS\nPT11Os0E0yt56UCW49Onzuj1dJJKuT6Ds/WEuATy55iGb+hqJF48eLPVmsfv\naiwVbT6hNEXEv4VJHZEMBCFKPVJN5V+s64TqB43NATC4lfTvceWzCYPJS39Y\n75d/u7CMpi2nQDaHiCYrFoyoOMZPzL8/3SyOesB5jNxwCTAoiRbN0ADcLQra\nTXDj\r\n=MwEk\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDQrmN+AVDe6bscKAOurJQEIpgtrPwIrNxUVMgFWUemeQIhAJ3+EUdcWycIabOrvgHBgzuG+ie8MfuJTQmfIn4IPbfY"
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_4.10.1_1559704106579_0.21944496746724607"
      },
      "_hasShrinkwrap": false
    },
    "4.10.2": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.10.2",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub"
      },
      "devDependencies": {
        "chai": "^4.2.0",
        "eslint": "^5.16.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^6.1.4",
        "rimraf": "^2.6.3",
        "semver": "^6.0.0"
      },
      "gitHead": "fe97f3ec6f305d9769fe4caf19d2a49ee8fcbf70",
      "_id": "mock-fs@4.10.2",
      "_nodeVersion": "10.10.0",
      "_npmVersion": "6.11.3",
      "dist": {
        "integrity": "sha512-ewPQ83O4U8/Gd8I15WoB6vgTTmq5khxBskUWCRvswUqjCfOOTREmxllztQOm+PXMWUxATry+VBWXQJloAyxtbQ==",
        "shasum": "ee11e5a3288b0235fb345efe8b25610f7dd397b8",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.10.2.tgz",
        "fileCount": 14,
        "unpackedSize": 96356,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdqhGWCRA9TVsSAnZWagAAt+wP/RVbvRXeFCGh+CfL01dO\nhWHShNKxzT5XuuFRT6+YIg66ZH4oPfyc8+jAlHPyXY+QrCvhj/xi3e+ZKhZI\nnXvYLiYMPHuCUKCm+b0ibVrpFz0lZZCko4zYe83GdO1abIEQPpR6L32Pjs2N\n5i2MUsf+4agtkki2AaGpPlh16M05uIfQtXQbA97ivMY7xcdCrVUB/tcmF5cJ\nrvzZqk9Snk/YDBVwReAGMK1tUwZ0rdcewHZWzZsSs3Uy+lAkRpUseOvJAQPg\niJx4FjG9zfKX299aONopmq8xeIvDUubm3XBDYU/hIWgCOsbA4oZ9lrv8ufaW\nsF5wr1rDke3wNFyYZ5+pqlUvcam26c85K2heOX1DNa/dLqtB4N2CVbDgjHn2\nte/8GmVdb7qeColseqhtz6GHBj+SaGrvI/SOWQjqJahEQbbf47pXWu6uDfxY\nSYGuFvde7faeNwdx8s79Kg3qLKJajqpndVOIwSk6W5OIbFOK+TJU70mPXXWU\ns2m03bE9i/0JVQHjTTMBr6ibpQlZGGm2+fvLth2jTYZnEhU+JuRa/sVjUDYR\nlf0yIVnzx1Jys6SSPbO5+YBAWSyOxOIrq9ZMXFWND9cOMQ9KpA9+fxTej+kK\nM2iJf6cK4mGR3HlcYOBPKLd3DUKesBvPVeztWBzao2qy1adhkveODm28fXZs\nYB77\r\n=GHgQ\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCayN9rXHeCjWtx9qUzhzIUg/KPB4A+FD8n/Y7CbeCLcwIgKfno86riKbB1gfaQqkMYMet0gl/rwam1UpnoSV3m88I="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_4.10.2_1571426709527_0.14831615647187935"
      },
      "_hasShrinkwrap": false
    },
    "4.10.3": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.10.3",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub"
      },
      "devDependencies": {
        "chai": "^4.2.0",
        "eslint": "^5.16.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^6.1.4",
        "rimraf": "^2.6.3",
        "semver": "^6.0.0"
      },
      "gitHead": "b36d90f50725a8f66aa0ab3e1bddbd2f192cb2e9",
      "_id": "mock-fs@4.10.3",
      "_nodeVersion": "10.10.0",
      "_npmVersion": "6.12.0",
      "dist": {
        "integrity": "sha512-bcukePBvuA3qovmq0Qtqu9+1APCIGkFHnsozrPIVromt5XFGGgkQSfaN0H6RI8gStHkO/hRgimvS3tooNes4pQ==",
        "shasum": "d0550663dd2b5d33a7c1b8713c6925aab07a04ae",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.10.3.tgz",
        "fileCount": 14,
        "unpackedSize": 96495,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdvxVQCRA9TVsSAnZWagAAUQgP/j34kS9trdrJjj910xEc\npCCS33G1zOkz+zqCCamstquy+WEc2eDisCvjCwFQlv7LZbYxgKUz5gGvxv4l\nEjNp6hH+7e+N+NEH24IwhRMJHFqKcoEkWO/4ENofwRtbvuQ8hrBwIsVZDZ3c\nknPAy31xLYLHvW6sQ0VbmyccbmquAQQ2iEeN+DSa/dIBiK6XL1CjcKA5N9vB\nhMq0C1GyGwbuAGbG5czFv+OG1O/4sofoc6B/a07WdVRk4tjNPCjxXTZeJcmX\nE2LSjXunIN71k2cVCvAng2ZKjPwVAGUOBkjYefh5aCyB+ncWeJc7OYD3MrxB\nY9IHeS+BPOhHWp4odRS4FgHHV45JMgjrf5Mz3BbupHEMHv4c5Vsmn/Xh0sau\nbWHOBmKQOAlbPKR0F+2LYM3FQblhhOgXJolyodCEwP7I1JoxiAOrhO4xc6iu\nTnFiosaKFXQrXlsw/2z4Wy7/KGZRep0AuOZv1DCUU6BggBmW2KUqLXqTbeLt\nelVvNI2mPXVKC4HkfnDvFOBeRI3jPPqjghUCGKHP09SR5NnEKeTWpBilZGZe\nIyG6KbbcjLER6+37LwB0NvxywbswNeJHkeaRgBBLMOc/X5TneyGBY0VOm4hF\n66y1HnZgzCGXO5ZO+M/b9QYZY/GyAr6twso3UkPS9FeJMQz9a/jNRQ2Nue4r\np1w7\r\n=ZfKI\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCyPgMv8qASP8nebXykeGh7jiR7XyRU70B5pnu9SB4zzwIhAKwJ9I9fAo4EftLcP5mPbVfqLbscz4udMq8oAvXB+w9/"
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_4.10.3_1572803919689_0.49563967169388445"
      },
      "_hasShrinkwrap": false
    },
    "4.10.4": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.10.4",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub"
      },
      "devDependencies": {
        "chai": "^4.2.0",
        "eslint": "^5.16.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^6.1.4",
        "rimraf": "^2.6.3",
        "semver": "^6.0.0"
      },
      "gitHead": "7f281222dc50aadd895f761acbcba47da2233763",
      "_id": "mock-fs@4.10.4",
      "_nodeVersion": "10.10.0",
      "_npmVersion": "6.12.0",
      "dist": {
        "integrity": "sha512-gDfZDLaPIvtOusbusLinfx6YSe2YpQsDT8qdP41P47dQ/NQggtkHukz7hwqgt8QvMBmAv+Z6DGmXPyb5BWX2nQ==",
        "shasum": "4eaa3d6f7da2f44e1f3dd6b462cbbcb7b082e3d4",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.10.4.tgz",
        "fileCount": 14,
        "unpackedSize": 97263,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd3LfDCRA9TVsSAnZWagAAt2AP/iaFtvfHH0/RJGunhRLu\nmgae0PAO/+b6rScO1x5jnQilJlxxXBC2MQmwl5qO0tMv/DCbLc9FipO+CRk0\nEuG9/M4RVt5B6oX9Xo6jrvsG54/J6X1BE6Z8PGqiXa3L2noC9mmlL14S+17A\nEJbXnzkpQNESmzwlppo+1VZz87QpFCGu2fi/BgFiZPkROok9Ty12GyVQ7yUp\nzGpjoqr8oU1zVQXdjpyt9scKxwwE0h8KhXoV8Owmkzc4u9Kosckvwa2a/+4a\nvF24yFeWPSkX2y8Di8S1sFU04QEiBRHcRAcZMOKd1IPAW+YQ1iT+bUFbW7ga\nRObMNjl98IYGVFLiGhM/lX8yH7yxnjcVAR2bk+t6C42KqOFjLBceoyXt5qE5\nKBfpvAc46HP1+5wD8u2AR+v+dTX4YkGdYvbHDmQmxwwI3+n1ZgGKacXJ2WUd\nCGSU55l+QBFwx5QlaAo5Y837w3tqz7wOyB1sDrgy/ksit4zn+nbyHSqnWvNb\nFx9YCl6rbn32UDTQK37PFN1NtoU//Cgt+dpVSYlMJIXAQ9O8OweKMm3Dja82\nXaFN43qj4IKOVxsMtXB9VwknfNaVk4w4Mt9y/Es9wNgu8rbVTlLvVlgmcsos\nAG17NbD3PikKIkTj1iEuL6gp2v0xYrkh7mBqJcFLVX1NSYUinmSCIG7TgIaX\nvpq8\r\n=MdJ6\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFmk7jb5VK4XGUiNsIqQMJIc9lI5gnr6S5CNZkNQ6zhiAiEAxDslMgs2RdiA6W+a2TeDYDBrDwhY5xYwQcrpY42vMsU="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_4.10.4_1574746051040_0.2970076787613489"
      },
      "_hasShrinkwrap": false
    },
    "4.11.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.11.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub"
      },
      "devDependencies": {
        "chai": "^4.2.0",
        "eslint": "^5.16.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^6.1.4",
        "rimraf": "^2.6.3",
        "semver": "^6.0.0"
      },
      "gitHead": "9832d66e09cd49b60a55b5c8272e01dc67ca64b1",
      "_id": "mock-fs@4.11.0",
      "_nodeVersion": "13.9.0",
      "_npmVersion": "6.13.7",
      "dist": {
        "integrity": "sha512-Yp4o3/ZA15wsXqJTT+R+9w2AYIkD1i80Lds47wDbuUhOvQvm+O2EfjFZSz0pMgZZSPHRhGxgcd2+GL4+jZMtdw==",
        "shasum": "0828107e4b843a6ba855ecebfe3c6e073b69db92",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.11.0.tgz",
        "fileCount": 14,
        "unpackedSize": 98275,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeVD4VCRA9TVsSAnZWagAALM0P/jL3QJzV4ne/VMfa78hf\nV4gVFD6NXc3zrVKwYf6XicUjX/l2fBmwzaJaCFbfRN2xCc2Er3WJ49/wmDtf\nFmC1iRQfNKhGP4+1JX6qEz8bLuXFQ8lEmHkN5CK5x8Vvt5Qxpj3Qh8TxYEIq\nQFVWQ8OtZYu2FcAjguNP2A23cpUuStT9uHewTWQzvbzRCutnHcS/w/YXvAvp\nCizprsm5ebg3g/KVgmEQj3xX8kT42GrHES7g+aLf2dWtT5Q0TgCVNpDKnCTL\nyFi3028Ccx2zN7ue6NHwkZKSNdpxzghJjgxohRslSNCeCm+Utgf5u/N6dqAK\naqqcavZsJhMBtv2EIE4UBfrdDnzQ8cS7BqcSRaeSVk1mivs6ZiRxoPMDRd19\naXDk4NEikCpnCdXRD+3FCuDPW92DgnmNrebGMNUTwfSPqj/C5Jpz/dy4mnKx\ndL9HLBBNDU2LK6l7NprbsU+bPiOwlP4+OsKmHJWqO2DoNk1GEjNxycYRgQvw\n73EEojtGDk6jz3nvZXrMNhgsXwEE4bCG8CUUGtK/F2onyHgqLKPN/Pke5rCf\nyYwSYVwLLjmcWvc2Kx+wiICTgjSBhwfE8zzxE2KAlb5cbURaV4cztEv6zhuU\nJnoL+0KEvugU6+CP8p7YYZtSciJJjdt7sbIP3dtMiy7mSxbynLTJAFMa3bDt\nv+mF\r\n=/AHb\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHuS4MC07/c17FPmXB4PyFmC1vi6Me26zH7bEu0MJnCRAiEAjoo1qaXYxRHibjE5CknEcUVdMrfHgtmFi8LuGL7FLU8="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_4.11.0_1582579221336_0.2933447768895421"
      },
      "_hasShrinkwrap": false
    },
    "4.12.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.12.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub"
      },
      "devDependencies": {
        "chai": "^4.2.0",
        "eslint": "^5.16.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^6.1.4",
        "rimraf": "^2.6.3",
        "semver": "^6.0.0"
      },
      "gitHead": "e42fdbb81c6da3232855369dce32863e6fa15774",
      "_id": "mock-fs@4.12.0",
      "_nodeVersion": "14.0.0",
      "_npmVersion": "6.14.4",
      "dist": {
        "integrity": "sha512-/P/HtrlvBxY4o/PzXY9cCNBrdylDNxg7gnrv2sMNxj+UJ2m8jSpl0/A6fuJeNAWr99ZvGWH8XCbE0vmnM5KupQ==",
        "shasum": "a5d50b12d2d75e5bec9dac3b67ffe3c41d31ade4",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.12.0.tgz",
        "fileCount": 14,
        "unpackedSize": 99535,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeoxq5CRA9TVsSAnZWagAAhaEP/1pH93tfLTZBBp1qlZx7\nh8Zyq5zwChFWDyg5jNNDtTZGrgGE97YLsouOPvQ07I+fGRpzXeA9ULhR1ut9\n8BYvO8e/8s0NteLwBn1waNzWqAmoRr3lASMMGT0QdotvQgiH6H5bFtzCj+Fa\nxmUI04DLBQXfjiOHDw4TdgkOXDLXq0V2NyzywzDcMmd61GGo0oKnh2FT7Mef\nhSRN7Awcrvr0iVRnR0ZFlu9Ckq3NarMEzeogBQx064yWq2BHl4KavOzrxdl/\nDO+wRNCEZDXcWwTBdPmRmr5F27CEEA4qFyqdd9oW1bYEJsDbBV7aYBSEMvvp\nCPj/cnjtOvQT1ckQRlCkHwQBo1g61bi190PLsCK3NbIeDaDIbb4FRLb+x3ER\n55uMuDXs+9SOXB9ceGG5mLeRR6qlNkJ+vGs31o7fCx6AeGwdLibWoTWCbdO8\nVCFPDbdZd8IiGAvA+IfVbeYOonjWeTGWCPavbjQMdnkKqcdfOlL4TpRHLFz9\n1H2GlJGRFdhp7t4o3Hy/326QsV1l/ZB8SeyIHgAJmFB/dP/w/peQyJUQA936\nYpmP+VHZYIAjZ9MPgnybWfzBn+46eCa3l9itXVOb2/kPeMwVBDbL6FP+dpyh\nJVeFGp451a04wb8tEyMdljF2Uoi1rdVQqw+SRQieYUSWIAOkWx0i9g1GR1JE\n/uJe\r\n=U4Q7\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICztjAFkfmB1Vr/U9WdvQt1cBGZgHvFFOoaOVmKT93yxAiBcWrwXb47rDghqkAy2urlEcS4sk7z359Ti3ZHsRd1XEQ=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_4.12.0_1587747512701_0.7280340409685488"
      },
      "_hasShrinkwrap": false
    },
    "4.13.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.13.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub"
      },
      "devDependencies": {
        "chai": "^4.2.0",
        "eslint": "^5.16.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^6.1.4",
        "rimraf": "^2.6.3",
        "semver": "^6.0.0"
      },
      "gitHead": "47f60b64bea5285cc95016eaf3fd8f780b47168f",
      "_id": "mock-fs@4.13.0",
      "_nodeVersion": "14.8.0",
      "_npmVersion": "6.14.8",
      "dist": {
        "integrity": "sha512-DD0vOdofJdoaRNtnWcrXe6RQbpHkPPmtqGq14uRX0F8ZKJ5nv89CVTYl/BZdppDxBDaV0hl75htg3abpEWlPZA==",
        "shasum": "31c02263673ec3789f90eb7b6963676aa407a598",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.13.0.tgz",
        "fileCount": 16,
        "unpackedSize": 107260,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfPwbdCRA9TVsSAnZWagAAGxgQAIOnN1O7+y2NT9+IPzwN\ni+aluvWpThJMjlWZqFh0hxaL6QGkTIZki395yv3bVA69Xa8/PacqMelaDKdv\nM6zFDXelxy3ToU/53XRQQuyAuFv+nZI3GZFf8BOOklWIG0nQQB2v6dl0up8Q\ngWkWLIfCTLnmdmXEx3oiHjmXJsqGauRv1ZEIkvBv0f7BMbzcEenEw5YlGE6w\nrHrizEBqgfrdr60DQ8cLiSebLdKicrAW33dKm+1804yIFlGVbtXJQ9HyvTPt\nvpuvGgJ9i5Jov9qbewtlR6fR+qz7768odriL7v+51EZtNRK1EX6i7cZRT1sf\nXb0UxInoMb3h4l1rKfx4Vt8qZlNpzZASHopvp4+JmgU93WP9RdeiPhDbNk5i\nhQWf42pMQez3bjbosrOHc+T2fp1DJJ8nutTZuUpFbQtvP72ODqNTm5//YY0k\nQBEiPojPD3r2YvD193Mtrbe07lL6komM3ZyNbXqj3CXv0RdjCfXGh2p1d7Fm\nfpKAjskz9CESFaXgs1BNSh5ZVHhfnfovYjXSWjM5DFdQ4FVMquIwWm12ABLJ\np1qmzu+Z3ocRz+BtpnRuMpInwA/KMUmA9a561vlt4Gl1KxPabCr1hLnceAJe\nPIYNoJKg8uEP52tbEv23Wm3AtCHFQFhj9r86hCwmnrwauJ3Oh4PZ9PQ2cLq3\n7Gx3\r\n=QCKS\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDGNOSAyDCc6gG2Vsc9c7MGItGwr1mKogw4mAsS79/YYgIhAM5UkKfu1wQjcOU4P01nxSQ/UGvNmp1rrqiFfSfGV5JU"
          }
        ]
      },
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_4.13.0_1597966044314_0.9186440543767587"
      },
      "_hasShrinkwrap": false
    },
    "4.14.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.14.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub"
      },
      "devDependencies": {
        "chai": "^4.2.0",
        "eslint": "^5.16.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^6.1.4",
        "rimraf": "^2.6.3",
        "semver": "^6.0.0"
      },
      "gitHead": "74e36f68ffe688ea31639593da14855f1c8507ae",
      "_id": "mock-fs@4.14.0",
      "_nodeVersion": "14.16.0",
      "_npmVersion": "7.7.5",
      "dist": {
        "integrity": "sha512-qYvlv/exQ4+svI3UOvPUpLDF0OMX5euvUH0Ny4N5QyRyhNdgAgUrVH3iUINSzEPLvx0kbo/Bp28GJKIqvE7URw==",
        "shasum": "ce5124d2c601421255985e6e94da80a7357b1b18",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.14.0.tgz",
        "fileCount": 16,
        "unpackedSize": 109047,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJggeHACRA9TVsSAnZWagAAky0P/ip8VLQ6+aXXwIj1RsTe\nrtXSGqVzmqi7Jd61w9LJlZ3b0h6n9bEGMhfY9BIH0sUFC01oXhMEAPOcQVDs\ntcC3IbOUMuEh3efW0z16qYxkygMQ2mFEibbYfB6o/jNYpcHgI0nmmLzXmynY\nfa+d+IvMdryh/WKE5hNFhqkn3/7/MeVJf+/O7Vp3a64lBzsG6haDQ/nSkZXU\nfMrwQqptvPaiTsU6D1EeEV8uP4QPbf8PKnKYiVrqVOB6cG4oqqaAuEeRxCYt\nO1CMD2wcBgm38woNoZEyF+WFkO+nHbEZz5KayKyUNIVjtKVmsqA0XfpFp2Dl\nn7OLeaaWZ4T1rBXlg/vE25QnIxBGDrl3MFbrCDhq/6ZJruEmIZOYMusv8k6P\nmPjhne55t0PsfRe9+VwILYUsAiUw5hD2Yc0KN3J3L2S7JGOrDsciT5DHkeCB\n8uwEeJBpg5+OcL1DSJ7yBy3XgXYsJpFw40vRLd5PSficEqG2zMo7TrZF38dw\nNYYOvD0hgHrCIBQ7Zk7u3DrsipXxPTOyfIkrDCMQ1k4gOESfpF8h7r02dBnD\nm+D6QmEPi/6grVAeFqo/lHPfHDu2+aaR7NQ5jFhTHqT4bvPeY3wiHA0meOtt\niXBoAJDFyJVlXofseHRB/mjq00CtFiEx/KUru9bEA0BzPpi11y/m7/6SfcxJ\nFTFP\r\n=R6Vd\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDZYfGAUpvCm+o29v2Lf1I6Io9Lb3VOJyrOEQ3X8/J26gIgBWy9lQIDM0t0pnXjiZd+cYDEUp7IqmCpnpaEiuO5Tbg="
          }
        ]
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_4.14.0_1619124672117_0.1790630449679269"
      },
      "_hasShrinkwrap": false
    },
    "5.0.0-beta.1": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "5.0.0-beta.1",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub",
        "parserOptions": {
          "ecmaVersion": 2020
        },
        "env": {
          "es2020": true
        }
      },
      "devDependencies": {
        "chai": "^4.3.4",
        "eslint": "^7.26.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^8.4.0",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5"
      },
      "readme": "[![Build Status](https://github.com/tschaub/mock-fs/workflows/Test/badge.svg)](https://github.com/tschaub/mock-fs/actions?workflow=Test)\n\n# `mock-fs`\n\nThe `mock-fs` module allows Node's built-in [`fs` module](http://nodejs.org/api/fs.html) to be backed temporarily by an in-memory, mock file system.  This lets you run tests against a set of mock files and directories instead of lugging around a bunch of test fixtures.\n\n## Example\n\nThe code below makes it so the `fs` module is temporarily backed by a mock file system with a few files and directories.\n\n```js\nconst mock = require('mock-fs');\n\nmock({\n  'path/to/fake/dir': {\n    'some-file.txt': 'file content here',\n    'empty-dir': {/** empty directory */}\n  },\n  'path/to/some.png': Buffer.from([8, 6, 7, 5, 3, 0, 9]),\n  'some/other/path': {/** another empty directory */}\n});\n```\n\nWhen you are ready to restore the `fs` module (so that it is backed by your real file system), call [`mock.restore()`](#mockrestore). Note that calling this may be **mandatory** in some cases. See [istanbuljs/nyc#324](https://github.com/istanbuljs/nyc/issues/324#issuecomment-234018654)\n\n```js\n// after a test runs\nmock.restore();\n```\n\n## Upgrading to version 4\n\nInstead of overriding all methods of the built-in `fs` module, the library now overrides `process.binding('fs')`.  The purpose of this change is to avoid conflicts with other libraries that override `fs` methods (e.g. `graceful-fs`) and to make it possible to work with multiple Node releases without maintaining copied and slightly modified versions of Node's `fs` module.\n\nBreaking changes:\n\n * The `mock.fs()` function has been removed.  This returned an object with `fs`-like methods without overriding the built-in `fs` module.\n * The object created by `fs.Stats` is no longer an instance of `fs.Stats` (though it has all the same properties and methods).\n * Lazy `require()` do not use the real filesystem.\n * Tests are no longer run in Node < 4.\n\nSome of these breaking changes may be restored in a future release.\n\n## Docs\n\n### <a id='mockconfigoptions'>`mock(config, options)`</a>\n\nConfigure the `fs` module so it is backed by an in-memory file system.\n\nCalling `mock` sets up a mock file system with two directories by default: `process.cwd()` and `os.tmpdir()` (or `os.tmpDir()` for older Node).  When called with no arguments, just these two directories are created.  When called with a `config` object, additional files, directories, and symlinks are created.  To avoid creating a directory for `process.cwd()` and `os.tmpdir()`, see the [`options`](#options) below.\n\nProperty names of the `config` object are interpreted as relative paths to resources (relative from `process.cwd()`).  Property values of the `config` object are interpreted as content or configuration for the generated resources.\n\n*Note that paths should always use forward slashes (`/`) - even on Windows.*\n\n### <a id='options'>`options`</a>\n\nThe second (optional) argument may include the properties below.\n\n * `createCwd` - `boolean` Create a directory for `process.cwd()`.  This is `true` by default.\n * `createTmp` - `boolean` Create a directory for `os.tmpdir()`.  This is `true` by default.\n\n### Loading real files & directories\n\nYou can load real files and directories into the mock system using `mock.load()`\n\n#### Notes\n\n- All stat information is duplicated (dates, permissions, etc) \n- By default, all files are lazy-loaded, unless you specify the `{lazy: false}` option\n\n#### <a id='mappingoptions'>options</a>\n\n| Option    | Type    | Default | Description |\n| --------- | ------- | ------- | ------------\n| lazy      | boolean | true    | File content isn't loaded until explicitly read\n| recursive | boolean | true    | Load all files and directories recursively\n \n#### `mock.load(path, options)`\n\n```js\nmock({\n  // Lazy-load file\n  'my-file.txt': mock.load(path.resolve(__dirname, 'assets/special-file.txt')),\n  \n  // Pre-load js file\n  'ready.js': mock.load(path.resolve(__dirname, 'scripts/ready.js'), {lazy: false}),\n\n  // Recursively loads all node_modules\n  'node_modules': mock.load(path.resolve(__dirname, '../node_modules')),\n\n  // Creates a directory named /tmp with only the files in /tmp/special_tmp_files (no subdirectories), pre-loading all content\n  '/tmp': mock.load('/tmp/special_tmp_files', {recursive: false, lazy:false}),\n\n  'fakefile.txt': 'content here'\n});\n```\n\n### Creating files\n\nWhen `config` property values are a `string` or `Buffer`, a file is created with the provided content.  For example, the following configuration creates a single file with string content (in addition to the two default directories).\n```js\nmock({\n  'path/to/file.txt': 'file content here'\n});\n```\n\nTo create a file with additional properties (owner, permissions, atime, etc.), use the [`mock.file()`](#mockfileproperties) function described below.\n\n### <a id='mockfileproperties'>`mock.file(properties)`</a>\n\nCreate a factory for new files.  Supported properties:\n\n * **content** - `string|Buffer` File contents.\n * **mode** - `number` File mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last file access time.  Defaults to `new Date()`.  Updated when file contents are accessed.\n * **ctime** - `Date` The last file change time.  Defaults to `new Date()`.  Updated when file owner or permissions change.\n * **mtime** - `Date` The last file modification time.  Defaults to `new Date()`.  Updated when file contents change.\n * **birthtime** - `Date` The time of file creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a very old file named `foo`, you could do something like this:\n```js\nmock({\n  foo: mock.file({\n    content: 'file content here',\n    ctime: new Date(1),\n    mtime: new Date(1)\n  })\n});\n```\n\nNote that if you want to create a file with the default properties, you can provide a `string` or `Buffer` directly instead of calling `mock.file()`.\n\n### Creating directories\n\nWhen `config` property values are an `Object`, a directory is created.  The structure of the object is the same as the `config` object itself.  So an empty directory can be created with a simple object literal (`{}`).  The following configuration creates a directory containing two files (in addition to the two default directories):\n```js\n// note that this could also be written as\n// mock({'path/to/dir': { /** config */ }})\nmock({\n  path: {\n    to: {\n      dir: {\n        file1: 'text content',\n        file2: Buffer.from([1, 2, 3, 4])\n      }\n    }\n  }\n});\n```\n\nTo create a directory with additional properties (owner, permissions, atime, etc.), use the [`mock.directory()`](mockdirectoryproperties) function described below.\n\n### <a id='mockdirectoryproperties'>`mock.directory(properties)`</a>\n\nCreate a factory for new directories.  Supported properties:\n\n * **mode** - `number` Directory mode (permission and sticky bits).  Defaults to `0777`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last directory access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last directory change time.  Defaults to `new Date()`.  Updated when owner or permissions change.\n * **mtime** - `Date` The last directory modification time.  Defaults to `new Date()`.  Updated when an item is added, removed, or renamed.\n * **birthtime** - `Date` The time of directory creation.  Defaults to `new Date()`.\n * **items** - `Object` Directory contents.  Members will generate additional files, directories, or symlinks.\n\nTo create a mock filesystem with a directory with the relative path `some/dir` that has a mode of `0755` and two child files, you could do something like this:\n```js\nmock({\n  'some/dir': mock.directory({\n    mode: 0755,\n    items: {\n      file1: 'file one content',\n      file2: Buffer.from([8, 6, 7, 5, 3, 0, 9])\n    }\n  })\n});\n```\n\nNote that if you want to create a directory with the default properties, you can provide an `Object` directly instead of calling `mock.directory()`.\n\n### Creating symlinks\n\nUsing a `string` or a `Buffer` is a shortcut for creating files with default properties.  Using an `Object` is a shortcut for creating a directory with default properties.  There is no shortcut for creating symlinks.  To create a symlink, you need to call the [`mock.symlink()`](#mocksymlinkproperties) function described below.\n\n### <a id='mocksymlinkproperties'>`mock.symlink(properties)`</a>\n\nCreate a factory for new symlinks.  Supported properties:\n\n * **path** - `string` Path to the source (required).\n * **mode** - `number` Symlink mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last symlink access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last symlink change time.  Defaults to `new Date()`.\n * **mtime** - `Date` The last symlink modification time.  Defaults to `new Date()`.\n * **birthtime** - `Date` The time of symlink creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a file and a symlink, you could do something like this:\n```js\nmock({\n  'some/dir': {\n    'regular-file': 'file contents',\n    'a-symlink': mock.symlink({\n      path: 'regular-file'\n    })\n  }\n});\n```\n\n### Restoring the file system\n\n### <a id='mockrestore'>`mock.restore()`</a>\n\nRestore the `fs` binding to the real file system.  This undoes the effect of calling `mock()`.  Typically, you would set up a mock file system before running a test and restore the original after.  Using a test runner with `beforeEach` and `afterEach` hooks, this might look like the following:\n\n```js\nbeforeEach(function() {\n  mock({\n    'fake-file': 'file contents'\n  });\n});\nafterEach(mock.restore);\n```\n\n### Bypassing the mock file system\n\n#### <a id='mockbypass'>`mock.bypass(fn)`</a>\n\nExecute calls to the real filesystem with mock.bypass()\n\n```js\n// This file exists only on the real FS, not on the mocked FS\nconst realFilePath = '/path/to/real/file.txt';\nconst myData = mock.bypass(() => fs.readFileSync(realFilePath, 'utf-8'));\n```\n\nIf you pass an asynchronous function or a promise-returning function to `bypass()`, a promise will be returned.\n\n#### <a id='bypassasync'>Async Warning</a>\n\nAsynchronous calls are supported, however, they are not recommended as they could produce unintended consequences if \nanything else tries to access the mocked filesystem before they've completed.\n\n```js\nasync function getFileInfo(fileName) {\n  return await mock.bypass(async () => {\n    const stats = await fs.promises.stat(fileName);\n    const data = await fs.promises.readFile(fileName);\n    return {stats, data};\n  });\n}\n```\n\n## Install\n\nUsing `npm`:\n\n```\nnpm install mock-fs --save-dev\n```\n\n## Caveats\n\nWhen you require `mock-fs`, Node's own `fs` module is patched to allow the binding to the underlying file system to be swapped out.  If you require `mock-fs` *before* any other modules that modify `fs` (e.g. `graceful-fs`), the mock should behave as expected.\n\n**Note** `mock-fs` is not compatible with `graceful-fs@3.x` but works with `graceful-fs@4.x`.\n\nMock file access is controlled based on file mode where `process.getuid()` and `process.getgid()` are available (POSIX systems).  On other systems (e.g. Windows) the file mode has no effect.\n\nTested on Linux, OSX, and Windows using Node 12 through 16.  Check the tickets for a list of [known issues](https://github.com/tschaub/mock-fs/issues).\n\n### Using with Jest Snapshot Testing\n\n`.toMatchSnapshot` in [Jest](https://jestjs.io/docs/en/snapshot-testing) uses `fs` to load existing snapshots.\nIf `mockFs` is active, Jest isn't able to load existing snapshots. In such case it accepts all snapshots\nwithout diffing the old ones, which breaks the concept of snapshot testing.\n\nCalling `mock.restore()` in `afterEach` is too late and it's necessary to call it before snapshot matching:\n\n```js\nconst actual = testedFunction()\nmock.restore()\nexpect(actual).toMatchSnapshot()\n```\n\nNote: it's safe to call `mock.restore` multiple times, so it can still be called in `afterEach` and then manually\nin test cases which use snapshot testing.",
      "readmeFilename": "readme.md",
      "gitHead": "c97e06fce99ec3cc446bcd3281b2d59820b967a1",
      "_id": "mock-fs@5.0.0-beta.1",
      "_nodeVersion": "16.0.0",
      "_npmVersion": "7.10.0",
      "dist": {
        "integrity": "sha512-JsXj4GOQ5cTsW/nGdu9gOo1bYe01aHYd9p0M2tWyss5706TcW2qFn0QRCud7M17eHCfeZXBWnILZQIwXgLaUCg==",
        "shasum": "dabc70d41bd56a2b705abaf58df116c3e0177d39",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-5.0.0-beta.1.tgz",
        "fileCount": 15,
        "unpackedSize": 102385,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgmVVPCRA9TVsSAnZWagAAoXYP/jUFdSCtMYU+zEsQP/Z7\nm9IQQCt1QvPrsMSnph7p36N7CmM0o11daMQ4MBWMI4aIo8R4lXJwHobXugKC\nyGYc3NrNeEVbPXme5PX2OIkWHSFsVW7SvLjhuD89gvBnjC7MbymB4Emj9mEU\nNZnFlkvfgf3M23UdRtOOVaRgd2yzOIK3neKxqTB7L0K8fGh8l7ZVxMtiOS17\nHod+q2lBEO4+kxT28040XBiC9YV80auyOM26PKhR3xI3DcTezq5AbQg9DCc9\nq8ybTHVj6mpFspW1vJsRmPLsNth/GaLZfgJoZeREou1uAtSdEO2NBWtktGg0\ni0t3F8MTZ4fb9loXhjlNHmAcMrh8w0pHEFBUDQ0FfEI859z+ak4RgjCZrcjM\nWZy5Z9uyZ5p2ELCiE2FphX0pp6oe39PCAk9fvsLoQdU54DtcFgbJ9xDkAlwm\n1iC10XGzfykGHLgOLo60Od/bjKBPUlPTOsp9v8Vt/RI3RzZUDOb88XY7kK8T\n3MIypStUh7/b9WS9dsdmZSQjFKo8NobVu6qKx4qN8p0NsCY4oq1bOSO8AF7C\nEWkJASsKnEASWzc8qDZI56imtQ1YR9s/UOEwQvFlUezPo7juBWrWnso6lmfg\ngLZO1JQ+2DdeHa5HEU3EhV+lw6EMlUTqxAhEgie1qzgot572EY8EFkyzc9vO\nXYQb\r\n=2jyK\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCZjfUtfAVkV3lhS2hHKRE+HEQbaaXwXMC+K89YKH7FVQIhAI3jLfXoiZoj2wkN8sGtDK6MwjlJTjIQMYUezR+mFrD6"
          }
        ]
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_5.0.0-beta.1_1620661582632_0.5454230031489098"
      },
      "_hasShrinkwrap": false
    },
    "4.14.0-dev.1620839965863": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "4.14.0-dev.1620839965863",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test tasks",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub",
        "parserOptions": {
          "ecmaVersion": 2020
        },
        "env": {
          "es2020": true
        }
      },
      "devDependencies": {
        "chai": "^4.3.4",
        "eslint": "^7.26.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^8.4.0",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5"
      },
      "readme": "[![Build Status](https://github.com/tschaub/mock-fs/workflows/Test/badge.svg)](https://github.com/tschaub/mock-fs/actions?workflow=Test)\n\n# `mock-fs`\n\nThe `mock-fs` module allows Node's built-in [`fs` module](http://nodejs.org/api/fs.html) to be backed temporarily by an in-memory, mock file system.  This lets you run tests against a set of mock files and directories instead of lugging around a bunch of test fixtures.\n\n## Example\n\nThe code below makes it so the `fs` module is temporarily backed by a mock file system with a few files and directories.\n\n```js\nconst mock = require('mock-fs');\n\nmock({\n  'path/to/fake/dir': {\n    'some-file.txt': 'file content here',\n    'empty-dir': {/** empty directory */}\n  },\n  'path/to/some.png': Buffer.from([8, 6, 7, 5, 3, 0, 9]),\n  'some/other/path': {/** another empty directory */}\n});\n```\n\nWhen you are ready to restore the `fs` module (so that it is backed by your real file system), call [`mock.restore()`](#mockrestore). Note that calling this may be **mandatory** in some cases. See [istanbuljs/nyc#324](https://github.com/istanbuljs/nyc/issues/324#issuecomment-234018654)\n\n```js\n// after a test runs\nmock.restore();\n```\n\n## Upgrading to version 4\n\nInstead of overriding all methods of the built-in `fs` module, the library now overrides `process.binding('fs')`.  The purpose of this change is to avoid conflicts with other libraries that override `fs` methods (e.g. `graceful-fs`) and to make it possible to work with multiple Node releases without maintaining copied and slightly modified versions of Node's `fs` module.\n\nBreaking changes:\n\n * The `mock.fs()` function has been removed.  This returned an object with `fs`-like methods without overriding the built-in `fs` module.\n * The object created by `fs.Stats` is no longer an instance of `fs.Stats` (though it has all the same properties and methods).\n * Lazy `require()` do not use the real filesystem.\n * Tests are no longer run in Node < 4.\n\nSome of these breaking changes may be restored in a future release.\n\n## Docs\n\n### <a id='mockconfigoptions'>`mock(config, options)`</a>\n\nConfigure the `fs` module so it is backed by an in-memory file system.\n\nCalling `mock` sets up a mock file system with two directories by default: `process.cwd()` and `os.tmpdir()` (or `os.tmpDir()` for older Node).  When called with no arguments, just these two directories are created.  When called with a `config` object, additional files, directories, and symlinks are created.  To avoid creating a directory for `process.cwd()` and `os.tmpdir()`, see the [`options`](#options) below.\n\nProperty names of the `config` object are interpreted as relative paths to resources (relative from `process.cwd()`).  Property values of the `config` object are interpreted as content or configuration for the generated resources.\n\n*Note that paths should always use forward slashes (`/`) - even on Windows.*\n\n### <a id='options'>`options`</a>\n\nThe second (optional) argument may include the properties below.\n\n * `createCwd` - `boolean` Create a directory for `process.cwd()`.  This is `true` by default.\n * `createTmp` - `boolean` Create a directory for `os.tmpdir()`.  This is `true` by default.\n\n### Loading real files & directories\n\nYou can load real files and directories into the mock system using `mock.load()`\n\n#### Notes\n\n- All stat information is duplicated (dates, permissions, etc) \n- By default, all files are lazy-loaded, unless you specify the `{lazy: false}` option\n\n#### <a id='mappingoptions'>options</a>\n\n| Option    | Type    | Default | Description |\n| --------- | ------- | ------- | ------------\n| lazy      | boolean | true    | File content isn't loaded until explicitly read\n| recursive | boolean | true    | Load all files and directories recursively\n \n#### `mock.load(path, options)`\n\n```js\nmock({\n  // Lazy-load file\n  'my-file.txt': mock.load(path.resolve(__dirname, 'assets/special-file.txt')),\n  \n  // Pre-load js file\n  'ready.js': mock.load(path.resolve(__dirname, 'scripts/ready.js'), {lazy: false}),\n\n  // Recursively loads all node_modules\n  'node_modules': mock.load(path.resolve(__dirname, '../node_modules')),\n\n  // Creates a directory named /tmp with only the files in /tmp/special_tmp_files (no subdirectories), pre-loading all content\n  '/tmp': mock.load('/tmp/special_tmp_files', {recursive: false, lazy:false}),\n\n  'fakefile.txt': 'content here'\n});\n```\n\n### Creating files\n\nWhen `config` property values are a `string` or `Buffer`, a file is created with the provided content.  For example, the following configuration creates a single file with string content (in addition to the two default directories).\n```js\nmock({\n  'path/to/file.txt': 'file content here'\n});\n```\n\nTo create a file with additional properties (owner, permissions, atime, etc.), use the [`mock.file()`](#mockfileproperties) function described below.\n\n### <a id='mockfileproperties'>`mock.file(properties)`</a>\n\nCreate a factory for new files.  Supported properties:\n\n * **content** - `string|Buffer` File contents.\n * **mode** - `number` File mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last file access time.  Defaults to `new Date()`.  Updated when file contents are accessed.\n * **ctime** - `Date` The last file change time.  Defaults to `new Date()`.  Updated when file owner or permissions change.\n * **mtime** - `Date` The last file modification time.  Defaults to `new Date()`.  Updated when file contents change.\n * **birthtime** - `Date` The time of file creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a very old file named `foo`, you could do something like this:\n```js\nmock({\n  foo: mock.file({\n    content: 'file content here',\n    ctime: new Date(1),\n    mtime: new Date(1)\n  })\n});\n```\n\nNote that if you want to create a file with the default properties, you can provide a `string` or `Buffer` directly instead of calling `mock.file()`.\n\n### Creating directories\n\nWhen `config` property values are an `Object`, a directory is created.  The structure of the object is the same as the `config` object itself.  So an empty directory can be created with a simple object literal (`{}`).  The following configuration creates a directory containing two files (in addition to the two default directories):\n```js\n// note that this could also be written as\n// mock({'path/to/dir': { /** config */ }})\nmock({\n  path: {\n    to: {\n      dir: {\n        file1: 'text content',\n        file2: Buffer.from([1, 2, 3, 4])\n      }\n    }\n  }\n});\n```\n\nTo create a directory with additional properties (owner, permissions, atime, etc.), use the [`mock.directory()`](mockdirectoryproperties) function described below.\n\n### <a id='mockdirectoryproperties'>`mock.directory(properties)`</a>\n\nCreate a factory for new directories.  Supported properties:\n\n * **mode** - `number` Directory mode (permission and sticky bits).  Defaults to `0777`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last directory access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last directory change time.  Defaults to `new Date()`.  Updated when owner or permissions change.\n * **mtime** - `Date` The last directory modification time.  Defaults to `new Date()`.  Updated when an item is added, removed, or renamed.\n * **birthtime** - `Date` The time of directory creation.  Defaults to `new Date()`.\n * **items** - `Object` Directory contents.  Members will generate additional files, directories, or symlinks.\n\nTo create a mock filesystem with a directory with the relative path `some/dir` that has a mode of `0755` and two child files, you could do something like this:\n```js\nmock({\n  'some/dir': mock.directory({\n    mode: 0755,\n    items: {\n      file1: 'file one content',\n      file2: Buffer.from([8, 6, 7, 5, 3, 0, 9])\n    }\n  })\n});\n```\n\nNote that if you want to create a directory with the default properties, you can provide an `Object` directly instead of calling `mock.directory()`.\n\n### Creating symlinks\n\nUsing a `string` or a `Buffer` is a shortcut for creating files with default properties.  Using an `Object` is a shortcut for creating a directory with default properties.  There is no shortcut for creating symlinks.  To create a symlink, you need to call the [`mock.symlink()`](#mocksymlinkproperties) function described below.\n\n### <a id='mocksymlinkproperties'>`mock.symlink(properties)`</a>\n\nCreate a factory for new symlinks.  Supported properties:\n\n * **path** - `string` Path to the source (required).\n * **mode** - `number` Symlink mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last symlink access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last symlink change time.  Defaults to `new Date()`.\n * **mtime** - `Date` The last symlink modification time.  Defaults to `new Date()`.\n * **birthtime** - `Date` The time of symlink creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a file and a symlink, you could do something like this:\n```js\nmock({\n  'some/dir': {\n    'regular-file': 'file contents',\n    'a-symlink': mock.symlink({\n      path: 'regular-file'\n    })\n  }\n});\n```\n\n### Restoring the file system\n\n### <a id='mockrestore'>`mock.restore()`</a>\n\nRestore the `fs` binding to the real file system.  This undoes the effect of calling `mock()`.  Typically, you would set up a mock file system before running a test and restore the original after.  Using a test runner with `beforeEach` and `afterEach` hooks, this might look like the following:\n\n```js\nbeforeEach(function() {\n  mock({\n    'fake-file': 'file contents'\n  });\n});\nafterEach(mock.restore);\n```\n\n### Bypassing the mock file system\n\n#### <a id='mockbypass'>`mock.bypass(fn)`</a>\n\nExecute calls to the real filesystem with mock.bypass()\n\n```js\n// This file exists only on the real FS, not on the mocked FS\nconst realFilePath = '/path/to/real/file.txt';\nconst myData = mock.bypass(() => fs.readFileSync(realFilePath, 'utf-8'));\n```\n\nIf you pass an asynchronous function or a promise-returning function to `bypass()`, a promise will be returned.\n\n#### <a id='bypassasync'>Async Warning</a>\n\nAsynchronous calls are supported, however, they are not recommended as they could produce unintended consequences if \nanything else tries to access the mocked filesystem before they've completed.\n\n```js\nasync function getFileInfo(fileName) {\n  return await mock.bypass(async () => {\n    const stats = await fs.promises.stat(fileName);\n    const data = await fs.promises.readFile(fileName);\n    return {stats, data};\n  });\n}\n```\n\n## Install\n\nUsing `npm`:\n\n```\nnpm install mock-fs --save-dev\n```\n\n## Caveats\n\nWhen you require `mock-fs`, Node's own `fs` module is patched to allow the binding to the underlying file system to be swapped out.  If you require `mock-fs` *before* any other modules that modify `fs` (e.g. `graceful-fs`), the mock should behave as expected.\n\n**Note** `mock-fs` is not compatible with `graceful-fs@3.x` but works with `graceful-fs@4.x`.\n\nMock file access is controlled based on file mode where `process.getuid()` and `process.getgid()` are available (POSIX systems).  On other systems (e.g. Windows) the file mode has no effect.\n\nTested on Linux, OSX, and Windows using Node 12 through 16.  Check the tickets for a list of [known issues](https://github.com/tschaub/mock-fs/issues).\n\n### Using with Jest Snapshot Testing\n\n`.toMatchSnapshot` in [Jest](https://jestjs.io/docs/en/snapshot-testing) uses `fs` to load existing snapshots.\nIf `mockFs` is active, Jest isn't able to load existing snapshots. In such case it accepts all snapshots\nwithout diffing the old ones, which breaks the concept of snapshot testing.\n\nCalling `mock.restore()` in `afterEach` is too late and it's necessary to call it before snapshot matching:\n\n```js\nconst actual = testedFunction()\nmock.restore()\nexpect(actual).toMatchSnapshot()\n```\n\nNote: it's safe to call `mock.restore` multiple times, so it can still be called in `afterEach` and then manually\nin test cases which use snapshot testing.",
      "readmeFilename": "readme.md",
      "gitHead": "735d81a9fd8950ac111d1f66997debdc006cf64f",
      "_id": "mock-fs@4.14.0-dev.1620839965863",
      "_nodeVersion": "16.1.0",
      "_npmVersion": "7.11.2",
      "dist": {
        "integrity": "sha512-c5t49SDptSep+YRmO18KTb7IKGCNnXZz3bmjXH+nlJLKbXs8G7UKCCcR7MbssQzqvtq/Axd02yF6UASjvZBmuQ==",
        "shasum": "cfd202c5a24a6652233811c469f6cc1eee70d99b",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-4.14.0-dev.1620839965863.tgz",
        "fileCount": 15,
        "unpackedSize": 102410,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgnA4fCRA9TVsSAnZWagAAP6UP/2yUYyg+AMu+IqA/H8wr\nHk3FiPRJzIhngcsEInRI8/Y2XgIvQD6cFDmF+Wm26jLPEilVLkZAPBTdcyUd\nPKYGYxYjMsELu6xuRDlsBm8NrVk8YSov46RqzsucqY8AJfTkXXtPtCvRhu/f\nzB7i/kJwBccYRAOETdySrcytBFktTbOschKZUP3ieJP4QqHqvjHzUpvA0CsS\nBudkQ5FeTtOVLXQylgfARDgOaciVSfazNpwCJYpR6SI+hDFpU11+7BUr3EhI\nor8TV/8H98XjGtwV81d6KYI2KTCrs9oWGnSXr1FMRXYml8eT8rsXWTXf4CrQ\ne4L3/SFZznpupa8r/1QXtSnvIz/HG2KRnQRPoklu61MvKV9yoDltyia5lFM7\nSicwnLSp5ycpaC+JRcGc7nm2KL5z+5pRrcsO84BNSY66jAg2iwcJLIXIUmtb\nfPJfW7iLvlkBDrhAsysZT0CklCEMazcKwTyvfeXWsIkXnlFFFdEMpfa1QEBm\nJ6urAUvYGzODnfjcp40LzWbpghLvJGHv6D7XC43L/xi36ETTqSspmFc2Ouoe\n5EG+d0d6XR2NWiwWxGVHcqJ7S7NwJiH45WbuBVBzZdm2eWwopzEOCVat68sH\n9H5LCofkJm81y6V3hh9kThWrgqN11r9YImcEVtbk6R7hKTVbz1mE0IqzFMLX\nT/Fb\r\n=ftzm\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICtKFuHFAgBSU9+NoEkY6aeECFAe52/qWd5ThpSPJggfAiAOLNhemN0MUoaqWl7K5wqAGJLzYiBGBeoh6CKs8twYxg=="
          }
        ]
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_4.14.0-dev.1620839965863_1620839966931_0.3986381212967587"
      },
      "_hasShrinkwrap": false
    },
    "5.0.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "5.0.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test tasks",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub",
        "parserOptions": {
          "ecmaVersion": 2020
        },
        "env": {
          "es2020": true
        }
      },
      "devDependencies": {
        "chai": "^4.3.4",
        "eslint": "^7.26.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^8.4.0",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5"
      },
      "gitHead": "535a9481e16e1e55e102f84acb4cb8896bb6bcc2",
      "_id": "mock-fs@5.0.0",
      "_nodeVersion": "16.0.0",
      "_npmVersion": "7.10.0",
      "dist": {
        "integrity": "sha512-A5mm/SpSDwwc/klSaEvvKMGQQtiGiQy8UcDAd/vpVO1fV+4zaHjt39yKgCSErFzv2zYxZIUx9Ud/7ybeHBf8Fg==",
        "shasum": "5574520ac824c01a10091bf951c66f677c71acaa",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-5.0.0.tgz",
        "fileCount": 15,
        "unpackedSize": 102391,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgqpgcCRA9TVsSAnZWagAAlbsP/2f8FUe59Oon1iBO5sEz\nJQ8UosJjLKys/7S+im8a2l2neAHpxdg0XQ1bRHPvbNEDHPodAZO6nR46z64W\nLxvetaApqd+S363dhcMRXoaGdsrL3UacmJuHvKPpdGYnOlBfg7JOr8lPvEjG\nhnFh0c3++8S14MdxeZAXRzSLDo3zS8vf9oAvanhr+uwtnlpkgyzKIXscFKFM\noQNiHJ3h2HsoJrcwqcHh8B+fcASUnpXolXfKpeg8+GfcYAOZ0ca5xTEUgM2L\nxL0YqOrSjIq3llv6VeFWR8jWTOBhLax4n+/moxH72h/soKQG6lyclZyWxblM\noGrK5fZUhfQ7k4CL1EZ5mXvPF1hxgALXQxfM87B5M+uIECCTA2doSZyOoIsX\n8vLEyNPTXf5YZuwBHaDyoGurpbCtMVSEhDKp9gSnn94UUqSNWiddEz7UeVXj\nErj9VWtjhkLRGs8YEvSeBpxFVR9ub4kJ1IoDwPYZWOfu4+iH+QdcbehAzdOj\nbpeal2i1fe2tM8cj2r5PQaoYXjTVozF1dYnvSWBGaWmtU1sCwNG+2RKn1Ydg\nESf5FmQC2D1p02D1CCxPKQsQCR+DCfBg0Nxd9TFBvwNQK3tsTmVPde60F18y\n5wCgnQXvFjLE6KYgf1+vOXFW2m3TbLFJ3RiLoloScV79q1BttfEluIN72JeE\nSUpA\r\n=cbib\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC/+SBcBk10jJGmlOtFnWSP7WUGPrU+16/N+vrEIpL0FgIhAPmGCJddjvfCpaf3LOXq++DjmA3SB1m+GdwooTBW7tJS"
          }
        ]
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_5.0.0_1621792795882_0.7550801852726936"
      },
      "_hasShrinkwrap": false
    },
    "5.0.0-dev.1621792812199": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "5.0.0-dev.1621792812199",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test tasks",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub",
        "parserOptions": {
          "ecmaVersion": 2020
        },
        "env": {
          "es2020": true
        }
      },
      "devDependencies": {
        "chai": "^4.3.4",
        "eslint": "^7.26.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^8.4.0",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5"
      },
      "readme": "[![Build Status](https://github.com/tschaub/mock-fs/workflows/Test/badge.svg)](https://github.com/tschaub/mock-fs/actions?workflow=Test)\n\n# `mock-fs`\n\nThe `mock-fs` module allows Node's built-in [`fs` module](http://nodejs.org/api/fs.html) to be backed temporarily by an in-memory, mock file system.  This lets you run tests against a set of mock files and directories instead of lugging around a bunch of test fixtures.\n\n## Example\n\nThe code below makes it so the `fs` module is temporarily backed by a mock file system with a few files and directories.\n\n```js\nconst mock = require('mock-fs');\n\nmock({\n  'path/to/fake/dir': {\n    'some-file.txt': 'file content here',\n    'empty-dir': {/** empty directory */}\n  },\n  'path/to/some.png': Buffer.from([8, 6, 7, 5, 3, 0, 9]),\n  'some/other/path': {/** another empty directory */}\n});\n```\n\nWhen you are ready to restore the `fs` module (so that it is backed by your real file system), call [`mock.restore()`](#mockrestore). Note that calling this may be **mandatory** in some cases. See [istanbuljs/nyc#324](https://github.com/istanbuljs/nyc/issues/324#issuecomment-234018654)\n\n```js\n// after a test runs\nmock.restore();\n```\n\n## Upgrading to version 4\n\nInstead of overriding all methods of the built-in `fs` module, the library now overrides `process.binding('fs')`.  The purpose of this change is to avoid conflicts with other libraries that override `fs` methods (e.g. `graceful-fs`) and to make it possible to work with multiple Node releases without maintaining copied and slightly modified versions of Node's `fs` module.\n\nBreaking changes:\n\n * The `mock.fs()` function has been removed.  This returned an object with `fs`-like methods without overriding the built-in `fs` module.\n * The object created by `fs.Stats` is no longer an instance of `fs.Stats` (though it has all the same properties and methods).\n * Lazy `require()` do not use the real filesystem.\n * Tests are no longer run in Node < 4.\n\nSome of these breaking changes may be restored in a future release.\n\n## Docs\n\n### <a id='mockconfigoptions'>`mock(config, options)`</a>\n\nConfigure the `fs` module so it is backed by an in-memory file system.\n\nCalling `mock` sets up a mock file system with two directories by default: `process.cwd()` and `os.tmpdir()` (or `os.tmpDir()` for older Node).  When called with no arguments, just these two directories are created.  When called with a `config` object, additional files, directories, and symlinks are created.  To avoid creating a directory for `process.cwd()` and `os.tmpdir()`, see the [`options`](#options) below.\n\nProperty names of the `config` object are interpreted as relative paths to resources (relative from `process.cwd()`).  Property values of the `config` object are interpreted as content or configuration for the generated resources.\n\n*Note that paths should always use forward slashes (`/`) - even on Windows.*\n\n### <a id='options'>`options`</a>\n\nThe second (optional) argument may include the properties below.\n\n * `createCwd` - `boolean` Create a directory for `process.cwd()`.  This is `true` by default.\n * `createTmp` - `boolean` Create a directory for `os.tmpdir()`.  This is `true` by default.\n\n### Loading real files & directories\n\nYou can load real files and directories into the mock system using `mock.load()`\n\n#### Notes\n\n- All stat information is duplicated (dates, permissions, etc) \n- By default, all files are lazy-loaded, unless you specify the `{lazy: false}` option\n\n#### <a id='mappingoptions'>options</a>\n\n| Option    | Type    | Default | Description |\n| --------- | ------- | ------- | ------------\n| lazy      | boolean | true    | File content isn't loaded until explicitly read\n| recursive | boolean | true    | Load all files and directories recursively\n \n#### `mock.load(path, options)`\n\n```js\nmock({\n  // Lazy-load file\n  'my-file.txt': mock.load(path.resolve(__dirname, 'assets/special-file.txt')),\n  \n  // Pre-load js file\n  'ready.js': mock.load(path.resolve(__dirname, 'scripts/ready.js'), {lazy: false}),\n\n  // Recursively loads all node_modules\n  'node_modules': mock.load(path.resolve(__dirname, '../node_modules')),\n\n  // Creates a directory named /tmp with only the files in /tmp/special_tmp_files (no subdirectories), pre-loading all content\n  '/tmp': mock.load('/tmp/special_tmp_files', {recursive: false, lazy:false}),\n\n  'fakefile.txt': 'content here'\n});\n```\n\n### Creating files\n\nWhen `config` property values are a `string` or `Buffer`, a file is created with the provided content.  For example, the following configuration creates a single file with string content (in addition to the two default directories).\n```js\nmock({\n  'path/to/file.txt': 'file content here'\n});\n```\n\nTo create a file with additional properties (owner, permissions, atime, etc.), use the [`mock.file()`](#mockfileproperties) function described below.\n\n### <a id='mockfileproperties'>`mock.file(properties)`</a>\n\nCreate a factory for new files.  Supported properties:\n\n * **content** - `string|Buffer` File contents.\n * **mode** - `number` File mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last file access time.  Defaults to `new Date()`.  Updated when file contents are accessed.\n * **ctime** - `Date` The last file change time.  Defaults to `new Date()`.  Updated when file owner or permissions change.\n * **mtime** - `Date` The last file modification time.  Defaults to `new Date()`.  Updated when file contents change.\n * **birthtime** - `Date` The time of file creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a very old file named `foo`, you could do something like this:\n```js\nmock({\n  foo: mock.file({\n    content: 'file content here',\n    ctime: new Date(1),\n    mtime: new Date(1)\n  })\n});\n```\n\nNote that if you want to create a file with the default properties, you can provide a `string` or `Buffer` directly instead of calling `mock.file()`.\n\n### Creating directories\n\nWhen `config` property values are an `Object`, a directory is created.  The structure of the object is the same as the `config` object itself.  So an empty directory can be created with a simple object literal (`{}`).  The following configuration creates a directory containing two files (in addition to the two default directories):\n```js\n// note that this could also be written as\n// mock({'path/to/dir': { /** config */ }})\nmock({\n  path: {\n    to: {\n      dir: {\n        file1: 'text content',\n        file2: Buffer.from([1, 2, 3, 4])\n      }\n    }\n  }\n});\n```\n\nTo create a directory with additional properties (owner, permissions, atime, etc.), use the [`mock.directory()`](mockdirectoryproperties) function described below.\n\n### <a id='mockdirectoryproperties'>`mock.directory(properties)`</a>\n\nCreate a factory for new directories.  Supported properties:\n\n * **mode** - `number` Directory mode (permission and sticky bits).  Defaults to `0777`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last directory access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last directory change time.  Defaults to `new Date()`.  Updated when owner or permissions change.\n * **mtime** - `Date` The last directory modification time.  Defaults to `new Date()`.  Updated when an item is added, removed, or renamed.\n * **birthtime** - `Date` The time of directory creation.  Defaults to `new Date()`.\n * **items** - `Object` Directory contents.  Members will generate additional files, directories, or symlinks.\n\nTo create a mock filesystem with a directory with the relative path `some/dir` that has a mode of `0755` and two child files, you could do something like this:\n```js\nmock({\n  'some/dir': mock.directory({\n    mode: 0755,\n    items: {\n      file1: 'file one content',\n      file2: Buffer.from([8, 6, 7, 5, 3, 0, 9])\n    }\n  })\n});\n```\n\nNote that if you want to create a directory with the default properties, you can provide an `Object` directly instead of calling `mock.directory()`.\n\n### Creating symlinks\n\nUsing a `string` or a `Buffer` is a shortcut for creating files with default properties.  Using an `Object` is a shortcut for creating a directory with default properties.  There is no shortcut for creating symlinks.  To create a symlink, you need to call the [`mock.symlink()`](#mocksymlinkproperties) function described below.\n\n### <a id='mocksymlinkproperties'>`mock.symlink(properties)`</a>\n\nCreate a factory for new symlinks.  Supported properties:\n\n * **path** - `string` Path to the source (required).\n * **mode** - `number` Symlink mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last symlink access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last symlink change time.  Defaults to `new Date()`.\n * **mtime** - `Date` The last symlink modification time.  Defaults to `new Date()`.\n * **birthtime** - `Date` The time of symlink creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a file and a symlink, you could do something like this:\n```js\nmock({\n  'some/dir': {\n    'regular-file': 'file contents',\n    'a-symlink': mock.symlink({\n      path: 'regular-file'\n    })\n  }\n});\n```\n\n### Restoring the file system\n\n### <a id='mockrestore'>`mock.restore()`</a>\n\nRestore the `fs` binding to the real file system.  This undoes the effect of calling `mock()`.  Typically, you would set up a mock file system before running a test and restore the original after.  Using a test runner with `beforeEach` and `afterEach` hooks, this might look like the following:\n\n```js\nbeforeEach(function() {\n  mock({\n    'fake-file': 'file contents'\n  });\n});\nafterEach(mock.restore);\n```\n\n### Bypassing the mock file system\n\n#### <a id='mockbypass'>`mock.bypass(fn)`</a>\n\nExecute calls to the real filesystem with mock.bypass()\n\n```js\n// This file exists only on the real FS, not on the mocked FS\nconst realFilePath = '/path/to/real/file.txt';\nconst myData = mock.bypass(() => fs.readFileSync(realFilePath, 'utf-8'));\n```\n\nIf you pass an asynchronous function or a promise-returning function to `bypass()`, a promise will be returned.\n\n#### <a id='bypassasync'>Async Warning</a>\n\nAsynchronous calls are supported, however, they are not recommended as they could produce unintended consequences if \nanything else tries to access the mocked filesystem before they've completed.\n\n```js\nasync function getFileInfo(fileName) {\n  return await mock.bypass(async () => {\n    const stats = await fs.promises.stat(fileName);\n    const data = await fs.promises.readFile(fileName);\n    return {stats, data};\n  });\n}\n```\n\n## Install\n\nUsing `npm`:\n\n```\nnpm install mock-fs --save-dev\n```\n\n## Caveats\n\nWhen you require `mock-fs`, Node's own `fs` module is patched to allow the binding to the underlying file system to be swapped out.  If you require `mock-fs` *before* any other modules that modify `fs` (e.g. `graceful-fs`), the mock should behave as expected.\n\n**Note** `mock-fs` is not compatible with `graceful-fs@3.x` but works with `graceful-fs@4.x`.\n\nMock file access is controlled based on file mode where `process.getuid()` and `process.getgid()` are available (POSIX systems).  On other systems (e.g. Windows) the file mode has no effect.\n\nTested on Linux, OSX, and Windows using Node 12 through 16.  Check the tickets for a list of [known issues](https://github.com/tschaub/mock-fs/issues).\n\n### Using with Jest Snapshot Testing\n\n`.toMatchSnapshot` in [Jest](https://jestjs.io/docs/en/snapshot-testing) uses `fs` to load existing snapshots.\nIf `mockFs` is active, Jest isn't able to load existing snapshots. In such case it accepts all snapshots\nwithout diffing the old ones, which breaks the concept of snapshot testing.\n\nCalling `mock.restore()` in `afterEach` is too late and it's necessary to call it before snapshot matching:\n\n```js\nconst actual = testedFunction()\nmock.restore()\nexpect(actual).toMatchSnapshot()\n```\n\nNote: it's safe to call `mock.restore` multiple times, so it can still be called in `afterEach` and then manually\nin test cases which use snapshot testing.",
      "readmeFilename": "readme.md",
      "gitHead": "535a9481e16e1e55e102f84acb4cb8896bb6bcc2",
      "_id": "mock-fs@5.0.0-dev.1621792812199",
      "_nodeVersion": "16.2.0",
      "_npmVersion": "7.13.0",
      "dist": {
        "integrity": "sha512-nQoIqSQF9xFF5cBOCbj/DUvVuglaQHnqG32d3gr88/pcmYuz6OKbf4+wpTeV2ml1Dde9s1YY9ZJ7l0A1ZvHUMA==",
        "shasum": "dc854d289e0466208d3f2cd49a793aff4bab43df",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-5.0.0-dev.1621792812199.tgz",
        "fileCount": 14,
        "unpackedSize": 90769,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgqpgtCRA9TVsSAnZWagAA1CAP/j9Ye0bs9KZKCSUTxVzK\nRi94JUFRjHZVZ/pACo+UWbEHjFAcbMPD99uq8pJrXLlC2qEVOJdSIh9eZsRX\nsVlH2qsUd3pv3mdfdUAkaf8Xh0VJutE8GjRe6UEhMgzGOagezwRkSQqGpxfV\n/ZlmqSShVlVKg9pJJsaIlOH0PcuItEcluDz7FQ9flwhahNlIisRL7k57Wwc4\nsRwavlcIKGpN10D6j1TDmSqIPpGOT3iHdC9n8mi5yyL2md1VIHXB8bbAAEae\nIo//JbYQAfSVS6K//SFxH++5qPqPrKrChktjBJad2mDWs+Cv0OSHGBv43I9v\nKEfib5Jc11RZOzbjrTEkv6vLZKa2ohyADFJQvbjtXtRtQyNpMsd7EfQElznh\n3OpMPQBUHkj8GFom4JutWCq8yIiS+/Z/vqTbdv4J0w1C7wsGDNeuq/Qgf+rZ\n/vJrAeDfHsHM4RhzloMmojzGldUKzK9P0Zx4zq2LJ7s5lPemvvdWrpCEA0CB\nt7r7gYagS3hdLvFnFGJ8SCl/sJQ5MhMzOsmZYzV8VRr80lzPR3on0+eO+vDG\niftdGtvrJMh0VgDjT6YeBezXOEwKrSnLWYopS/u3x+Z0cbijCEdHak5zwKcG\nbSApokedbbb3YGVqwCPQ3nldKJBUReqhb4K7Kl+zE5Z57/Jrgk3GHYag5+JB\nZs7s\r\n=v8fW\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIECn/uaXPmrajf7RzWO3ct8s5C45uJeTUTPH/3wnJdRnAiBnzDWjY+0cr2JAp2TYXyohfV0U5B+sWaB2AEAiRdSTBA=="
          }
        ]
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_5.0.0-dev.1621792812199_1621792813205_0.5809230948952979"
      },
      "_hasShrinkwrap": false
    },
    "5.0.0-dev.1631910876839": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "5.0.0-dev.1631910876839",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test tasks",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub",
        "parserOptions": {
          "ecmaVersion": 2020
        },
        "env": {
          "es2020": true
        }
      },
      "devDependencies": {
        "chai": "^4.3.4",
        "eslint": "^7.26.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^8.4.0",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5"
      },
      "readme": "[![Build Status](https://github.com/tschaub/mock-fs/workflows/Test/badge.svg)](https://github.com/tschaub/mock-fs/actions?workflow=Test)\n\n# `mock-fs`\n\nThe `mock-fs` module allows Node's built-in [`fs` module](http://nodejs.org/api/fs.html) to be backed temporarily by an in-memory, mock file system.  This lets you run tests against a set of mock files and directories instead of lugging around a bunch of test fixtures.\n\n## Example\n\nThe code below makes it so the `fs` module is temporarily backed by a mock file system with a few files and directories.\n\n```js\nconst mock = require('mock-fs');\n\nmock({\n  'path/to/fake/dir': {\n    'some-file.txt': 'file content here',\n    'empty-dir': {/** empty directory */}\n  },\n  'path/to/some.png': Buffer.from([8, 6, 7, 5, 3, 0, 9]),\n  'some/other/path': {/** another empty directory */}\n});\n```\n\nWhen you are ready to restore the `fs` module (so that it is backed by your real file system), call [`mock.restore()`](#mockrestore). Note that calling this may be **mandatory** in some cases. See [istanbuljs/nyc#324](https://github.com/istanbuljs/nyc/issues/324#issuecomment-234018654)\n\n```js\n// after a test runs\nmock.restore();\n```\n\n## Upgrading to version 4\n\nInstead of overriding all methods of the built-in `fs` module, the library now overrides `process.binding('fs')`.  The purpose of this change is to avoid conflicts with other libraries that override `fs` methods (e.g. `graceful-fs`) and to make it possible to work with multiple Node releases without maintaining copied and slightly modified versions of Node's `fs` module.\n\nBreaking changes:\n\n * The `mock.fs()` function has been removed.  This returned an object with `fs`-like methods without overriding the built-in `fs` module.\n * The object created by `fs.Stats` is no longer an instance of `fs.Stats` (though it has all the same properties and methods).\n * Lazy `require()` do not use the real filesystem.\n * Tests are no longer run in Node < 4.\n\nSome of these breaking changes may be restored in a future release.\n\n## Docs\n\n### <a id='mockconfigoptions'>`mock(config, options)`</a>\n\nConfigure the `fs` module so it is backed by an in-memory file system.\n\nCalling `mock` sets up a mock file system with two directories by default: `process.cwd()` and `os.tmpdir()` (or `os.tmpDir()` for older Node).  When called with no arguments, just these two directories are created.  When called with a `config` object, additional files, directories, and symlinks are created.  To avoid creating a directory for `process.cwd()` and `os.tmpdir()`, see the [`options`](#options) below.\n\nProperty names of the `config` object are interpreted as relative paths to resources (relative from `process.cwd()`).  Property values of the `config` object are interpreted as content or configuration for the generated resources.\n\n*Note that paths should always use forward slashes (`/`) - even on Windows.*\n\n### <a id='options'>`options`</a>\n\nThe second (optional) argument may include the properties below.\n\n * `createCwd` - `boolean` Create a directory for `process.cwd()`.  This is `true` by default.\n * `createTmp` - `boolean` Create a directory for `os.tmpdir()`.  This is `true` by default.\n\n### Loading real files & directories\n\nYou can load real files and directories into the mock system using `mock.load()`\n\n#### Notes\n\n- All stat information is duplicated (dates, permissions, etc) \n- By default, all files are lazy-loaded, unless you specify the `{lazy: false}` option\n\n#### <a id='mappingoptions'>options</a>\n\n| Option    | Type    | Default | Description |\n| --------- | ------- | ------- | ------------\n| lazy      | boolean | true    | File content isn't loaded until explicitly read\n| recursive | boolean | true    | Load all files and directories recursively\n \n#### `mock.load(path, options)`\n\n```js\nmock({\n  // Lazy-load file\n  'my-file.txt': mock.load(path.resolve(__dirname, 'assets/special-file.txt')),\n  \n  // Pre-load js file\n  'ready.js': mock.load(path.resolve(__dirname, 'scripts/ready.js'), {lazy: false}),\n\n  // Recursively loads all node_modules\n  'node_modules': mock.load(path.resolve(__dirname, '../node_modules')),\n\n  // Creates a directory named /tmp with only the files in /tmp/special_tmp_files (no subdirectories), pre-loading all content\n  '/tmp': mock.load('/tmp/special_tmp_files', {recursive: false, lazy:false}),\n\n  'fakefile.txt': 'content here'\n});\n```\n\n### Creating files\n\nWhen `config` property values are a `string` or `Buffer`, a file is created with the provided content.  For example, the following configuration creates a single file with string content (in addition to the two default directories).\n```js\nmock({\n  'path/to/file.txt': 'file content here'\n});\n```\n\nTo create a file with additional properties (owner, permissions, atime, etc.), use the [`mock.file()`](#mockfileproperties) function described below.\n\n### <a id='mockfileproperties'>`mock.file(properties)`</a>\n\nCreate a factory for new files.  Supported properties:\n\n * **content** - `string|Buffer` File contents.\n * **mode** - `number` File mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last file access time.  Defaults to `new Date()`.  Updated when file contents are accessed.\n * **ctime** - `Date` The last file change time.  Defaults to `new Date()`.  Updated when file owner or permissions change.\n * **mtime** - `Date` The last file modification time.  Defaults to `new Date()`.  Updated when file contents change.\n * **birthtime** - `Date` The time of file creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a very old file named `foo`, you could do something like this:\n```js\nmock({\n  foo: mock.file({\n    content: 'file content here',\n    ctime: new Date(1),\n    mtime: new Date(1)\n  })\n});\n```\n\nNote that if you want to create a file with the default properties, you can provide a `string` or `Buffer` directly instead of calling `mock.file()`.\n\n### Creating directories\n\nWhen `config` property values are an `Object`, a directory is created.  The structure of the object is the same as the `config` object itself.  So an empty directory can be created with a simple object literal (`{}`).  The following configuration creates a directory containing two files (in addition to the two default directories):\n```js\n// note that this could also be written as\n// mock({'path/to/dir': { /** config */ }})\nmock({\n  path: {\n    to: {\n      dir: {\n        file1: 'text content',\n        file2: Buffer.from([1, 2, 3, 4])\n      }\n    }\n  }\n});\n```\n\nTo create a directory with additional properties (owner, permissions, atime, etc.), use the [`mock.directory()`](mockdirectoryproperties) function described below.\n\n### <a id='mockdirectoryproperties'>`mock.directory(properties)`</a>\n\nCreate a factory for new directories.  Supported properties:\n\n * **mode** - `number` Directory mode (permission and sticky bits).  Defaults to `0777`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last directory access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last directory change time.  Defaults to `new Date()`.  Updated when owner or permissions change.\n * **mtime** - `Date` The last directory modification time.  Defaults to `new Date()`.  Updated when an item is added, removed, or renamed.\n * **birthtime** - `Date` The time of directory creation.  Defaults to `new Date()`.\n * **items** - `Object` Directory contents.  Members will generate additional files, directories, or symlinks.\n\nTo create a mock filesystem with a directory with the relative path `some/dir` that has a mode of `0755` and two child files, you could do something like this:\n```js\nmock({\n  'some/dir': mock.directory({\n    mode: 0755,\n    items: {\n      file1: 'file one content',\n      file2: Buffer.from([8, 6, 7, 5, 3, 0, 9])\n    }\n  })\n});\n```\n\nNote that if you want to create a directory with the default properties, you can provide an `Object` directly instead of calling `mock.directory()`.\n\n### Creating symlinks\n\nUsing a `string` or a `Buffer` is a shortcut for creating files with default properties.  Using an `Object` is a shortcut for creating a directory with default properties.  There is no shortcut for creating symlinks.  To create a symlink, you need to call the [`mock.symlink()`](#mocksymlinkproperties) function described below.\n\n### <a id='mocksymlinkproperties'>`mock.symlink(properties)`</a>\n\nCreate a factory for new symlinks.  Supported properties:\n\n * **path** - `string` Path to the source (required).\n * **mode** - `number` Symlink mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last symlink access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last symlink change time.  Defaults to `new Date()`.\n * **mtime** - `Date` The last symlink modification time.  Defaults to `new Date()`.\n * **birthtime** - `Date` The time of symlink creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a file and a symlink, you could do something like this:\n```js\nmock({\n  'some/dir': {\n    'regular-file': 'file contents',\n    'a-symlink': mock.symlink({\n      path: 'regular-file'\n    })\n  }\n});\n```\n\n### Restoring the file system\n\n### <a id='mockrestore'>`mock.restore()`</a>\n\nRestore the `fs` binding to the real file system.  This undoes the effect of calling `mock()`.  Typically, you would set up a mock file system before running a test and restore the original after.  Using a test runner with `beforeEach` and `afterEach` hooks, this might look like the following:\n\n```js\nbeforeEach(function() {\n  mock({\n    'fake-file': 'file contents'\n  });\n});\nafterEach(mock.restore);\n```\n\n### Bypassing the mock file system\n\n#### <a id='mockbypass'>`mock.bypass(fn)`</a>\n\nExecute calls to the real filesystem with mock.bypass()\n\n```js\n// This file exists only on the real FS, not on the mocked FS\nconst realFilePath = '/path/to/real/file.txt';\nconst myData = mock.bypass(() => fs.readFileSync(realFilePath, 'utf-8'));\n```\n\nIf you pass an asynchronous function or a promise-returning function to `bypass()`, a promise will be returned.\n\n#### <a id='bypassasync'>Async Warning</a>\n\nAsynchronous calls are supported, however, they are not recommended as they could produce unintended consequences if \nanything else tries to access the mocked filesystem before they've completed.\n\n```js\nasync function getFileInfo(fileName) {\n  return await mock.bypass(async () => {\n    const stats = await fs.promises.stat(fileName);\n    const data = await fs.promises.readFile(fileName);\n    return {stats, data};\n  });\n}\n```\n\n## Install\n\nUsing `npm`:\n\n```\nnpm install mock-fs --save-dev\n```\n\n## Caveats\n\nWhen you require `mock-fs`, Node's own `fs` module is patched to allow the binding to the underlying file system to be swapped out.  If you require `mock-fs` *before* any other modules that modify `fs` (e.g. `graceful-fs`), the mock should behave as expected.\n\n**Note** `mock-fs` is not compatible with `graceful-fs@3.x` but works with `graceful-fs@4.x`.\n\nMock file access is controlled based on file mode where `process.getuid()` and `process.getgid()` are available (POSIX systems).  On other systems (e.g. Windows) the file mode has no effect.\n\nTested on Linux, OSX, and Windows using Node 12 through 16.  Check the tickets for a list of [known issues](https://github.com/tschaub/mock-fs/issues).\n\n### Using with Jest Snapshot Testing\n\n`.toMatchSnapshot` in [Jest](https://jestjs.io/docs/en/snapshot-testing) uses `fs` to load existing snapshots.\nIf `mockFs` is active, Jest isn't able to load existing snapshots. In such case it accepts all snapshots\nwithout diffing the old ones, which breaks the concept of snapshot testing.\n\nCalling `mock.restore()` in `afterEach` is too late and it's necessary to call it before snapshot matching:\n\n```js\nconst actual = testedFunction()\nmock.restore()\nexpect(actual).toMatchSnapshot()\n```\n\nNote: it's safe to call `mock.restore` multiple times, so it can still be called in `afterEach` and then manually\nin test cases which use snapshot testing.",
      "readmeFilename": "readme.md",
      "gitHead": "ca4cfa237d10f62ff568d1aa6140e23225f0eff8",
      "_id": "mock-fs@5.0.0-dev.1631910876839",
      "_nodeVersion": "16.9.1",
      "_npmVersion": "7.21.1",
      "dist": {
        "integrity": "sha512-kJOsGjBS+ay0G6ruGV5Rq5Ae4FPS8DkGLvjPOWduCvKuSvojpcMEHs98MEVxaCVNWLWnlTwd/fUdKylece2DqQ==",
        "shasum": "d12d218dcbdfeca9746919fb5e90e9ad3ef9a047",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-5.0.0-dev.1631910876839.tgz",
        "fileCount": 15,
        "unpackedSize": 95757,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDDMCtuNGjwewrHYulJI0csMPXko8SnI/Pnn8B7Zgj6OQIgJVerJnnR4hzvbLZ/GhuT5YZ9qkBXmSoJC5Ft/blSqH8="
          }
        ]
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_5.0.0-dev.1631910876839_1631910877961_0.0021575872723695877"
      },
      "_hasShrinkwrap": false
    },
    "5.0.0-dev.1631911156056": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "5.0.0-dev.1631911156056",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test tasks",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub",
        "parserOptions": {
          "ecmaVersion": 2020
        },
        "env": {
          "es2020": true
        }
      },
      "devDependencies": {
        "chai": "^4.3.4",
        "eslint": "^7.26.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^8.4.0",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5"
      },
      "readme": "[![Build Status](https://github.com/tschaub/mock-fs/workflows/Test/badge.svg)](https://github.com/tschaub/mock-fs/actions?workflow=Test)\n\n# `mock-fs`\n\nThe `mock-fs` module allows Node's built-in [`fs` module](http://nodejs.org/api/fs.html) to be backed temporarily by an in-memory, mock file system.  This lets you run tests against a set of mock files and directories instead of lugging around a bunch of test fixtures.\n\n## Example\n\nThe code below makes it so the `fs` module is temporarily backed by a mock file system with a few files and directories.\n\n```js\nconst mock = require('mock-fs');\n\nmock({\n  'path/to/fake/dir': {\n    'some-file.txt': 'file content here',\n    'empty-dir': {/** empty directory */}\n  },\n  'path/to/some.png': Buffer.from([8, 6, 7, 5, 3, 0, 9]),\n  'some/other/path': {/** another empty directory */}\n});\n```\n\nWhen you are ready to restore the `fs` module (so that it is backed by your real file system), call [`mock.restore()`](#mockrestore). Note that calling this may be **mandatory** in some cases. See [istanbuljs/nyc#324](https://github.com/istanbuljs/nyc/issues/324#issuecomment-234018654)\n\n```js\n// after a test runs\nmock.restore();\n```\n\n## Upgrading to version 4\n\nInstead of overriding all methods of the built-in `fs` module, the library now overrides `process.binding('fs')`.  The purpose of this change is to avoid conflicts with other libraries that override `fs` methods (e.g. `graceful-fs`) and to make it possible to work with multiple Node releases without maintaining copied and slightly modified versions of Node's `fs` module.\n\nBreaking changes:\n\n * The `mock.fs()` function has been removed.  This returned an object with `fs`-like methods without overriding the built-in `fs` module.\n * The object created by `fs.Stats` is no longer an instance of `fs.Stats` (though it has all the same properties and methods).\n * Lazy `require()` do not use the real filesystem.\n * Tests are no longer run in Node < 4.\n\nSome of these breaking changes may be restored in a future release.\n\n## Docs\n\n### <a id='mockconfigoptions'>`mock(config, options)`</a>\n\nConfigure the `fs` module so it is backed by an in-memory file system.\n\nCalling `mock` sets up a mock file system with two directories by default: `process.cwd()` and `os.tmpdir()` (or `os.tmpDir()` for older Node).  When called with no arguments, just these two directories are created.  When called with a `config` object, additional files, directories, and symlinks are created.  To avoid creating a directory for `process.cwd()` and `os.tmpdir()`, see the [`options`](#options) below.\n\nProperty names of the `config` object are interpreted as relative paths to resources (relative from `process.cwd()`).  Property values of the `config` object are interpreted as content or configuration for the generated resources.\n\n*Note that paths should always use forward slashes (`/`) - even on Windows.*\n\n### <a id='options'>`options`</a>\n\nThe second (optional) argument may include the properties below.\n\n * `createCwd` - `boolean` Create a directory for `process.cwd()`.  This is `true` by default.\n * `createTmp` - `boolean` Create a directory for `os.tmpdir()`.  This is `true` by default.\n\n### Loading real files & directories\n\nYou can load real files and directories into the mock system using `mock.load()`\n\n#### Notes\n\n- All stat information is duplicated (dates, permissions, etc) \n- By default, all files are lazy-loaded, unless you specify the `{lazy: false}` option\n\n#### <a id='mappingoptions'>options</a>\n\n| Option    | Type    | Default | Description |\n| --------- | ------- | ------- | ------------\n| lazy      | boolean | true    | File content isn't loaded until explicitly read\n| recursive | boolean | true    | Load all files and directories recursively\n \n#### `mock.load(path, options)`\n\n```js\nmock({\n  // Lazy-load file\n  'my-file.txt': mock.load(path.resolve(__dirname, 'assets/special-file.txt')),\n  \n  // Pre-load js file\n  'ready.js': mock.load(path.resolve(__dirname, 'scripts/ready.js'), {lazy: false}),\n\n  // Recursively loads all node_modules\n  'node_modules': mock.load(path.resolve(__dirname, '../node_modules')),\n\n  // Creates a directory named /tmp with only the files in /tmp/special_tmp_files (no subdirectories), pre-loading all content\n  '/tmp': mock.load('/tmp/special_tmp_files', {recursive: false, lazy:false}),\n\n  'fakefile.txt': 'content here'\n});\n```\n\n### Creating files\n\nWhen `config` property values are a `string` or `Buffer`, a file is created with the provided content.  For example, the following configuration creates a single file with string content (in addition to the two default directories).\n```js\nmock({\n  'path/to/file.txt': 'file content here'\n});\n```\n\nTo create a file with additional properties (owner, permissions, atime, etc.), use the [`mock.file()`](#mockfileproperties) function described below.\n\n### <a id='mockfileproperties'>`mock.file(properties)`</a>\n\nCreate a factory for new files.  Supported properties:\n\n * **content** - `string|Buffer` File contents.\n * **mode** - `number` File mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last file access time.  Defaults to `new Date()`.  Updated when file contents are accessed.\n * **ctime** - `Date` The last file change time.  Defaults to `new Date()`.  Updated when file owner or permissions change.\n * **mtime** - `Date` The last file modification time.  Defaults to `new Date()`.  Updated when file contents change.\n * **birthtime** - `Date` The time of file creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a very old file named `foo`, you could do something like this:\n```js\nmock({\n  foo: mock.file({\n    content: 'file content here',\n    ctime: new Date(1),\n    mtime: new Date(1)\n  })\n});\n```\n\nNote that if you want to create a file with the default properties, you can provide a `string` or `Buffer` directly instead of calling `mock.file()`.\n\n### Creating directories\n\nWhen `config` property values are an `Object`, a directory is created.  The structure of the object is the same as the `config` object itself.  So an empty directory can be created with a simple object literal (`{}`).  The following configuration creates a directory containing two files (in addition to the two default directories):\n```js\n// note that this could also be written as\n// mock({'path/to/dir': { /** config */ }})\nmock({\n  path: {\n    to: {\n      dir: {\n        file1: 'text content',\n        file2: Buffer.from([1, 2, 3, 4])\n      }\n    }\n  }\n});\n```\n\nTo create a directory with additional properties (owner, permissions, atime, etc.), use the [`mock.directory()`](mockdirectoryproperties) function described below.\n\n### <a id='mockdirectoryproperties'>`mock.directory(properties)`</a>\n\nCreate a factory for new directories.  Supported properties:\n\n * **mode** - `number` Directory mode (permission and sticky bits).  Defaults to `0777`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last directory access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last directory change time.  Defaults to `new Date()`.  Updated when owner or permissions change.\n * **mtime** - `Date` The last directory modification time.  Defaults to `new Date()`.  Updated when an item is added, removed, or renamed.\n * **birthtime** - `Date` The time of directory creation.  Defaults to `new Date()`.\n * **items** - `Object` Directory contents.  Members will generate additional files, directories, or symlinks.\n\nTo create a mock filesystem with a directory with the relative path `some/dir` that has a mode of `0755` and two child files, you could do something like this:\n```js\nmock({\n  'some/dir': mock.directory({\n    mode: 0755,\n    items: {\n      file1: 'file one content',\n      file2: Buffer.from([8, 6, 7, 5, 3, 0, 9])\n    }\n  })\n});\n```\n\nNote that if you want to create a directory with the default properties, you can provide an `Object` directly instead of calling `mock.directory()`.\n\n### Creating symlinks\n\nUsing a `string` or a `Buffer` is a shortcut for creating files with default properties.  Using an `Object` is a shortcut for creating a directory with default properties.  There is no shortcut for creating symlinks.  To create a symlink, you need to call the [`mock.symlink()`](#mocksymlinkproperties) function described below.\n\n### <a id='mocksymlinkproperties'>`mock.symlink(properties)`</a>\n\nCreate a factory for new symlinks.  Supported properties:\n\n * **path** - `string` Path to the source (required).\n * **mode** - `number` Symlink mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last symlink access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last symlink change time.  Defaults to `new Date()`.\n * **mtime** - `Date` The last symlink modification time.  Defaults to `new Date()`.\n * **birthtime** - `Date` The time of symlink creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a file and a symlink, you could do something like this:\n```js\nmock({\n  'some/dir': {\n    'regular-file': 'file contents',\n    'a-symlink': mock.symlink({\n      path: 'regular-file'\n    })\n  }\n});\n```\n\n### Restoring the file system\n\n### <a id='mockrestore'>`mock.restore()`</a>\n\nRestore the `fs` binding to the real file system.  This undoes the effect of calling `mock()`.  Typically, you would set up a mock file system before running a test and restore the original after.  Using a test runner with `beforeEach` and `afterEach` hooks, this might look like the following:\n\n```js\nbeforeEach(function() {\n  mock({\n    'fake-file': 'file contents'\n  });\n});\nafterEach(mock.restore);\n```\n\n### Bypassing the mock file system\n\n#### <a id='mockbypass'>`mock.bypass(fn)`</a>\n\nExecute calls to the real filesystem with mock.bypass()\n\n```js\n// This file exists only on the real FS, not on the mocked FS\nconst realFilePath = '/path/to/real/file.txt';\nconst myData = mock.bypass(() => fs.readFileSync(realFilePath, 'utf-8'));\n```\n\nIf you pass an asynchronous function or a promise-returning function to `bypass()`, a promise will be returned.\n\n#### <a id='bypassasync'>Async Warning</a>\n\nAsynchronous calls are supported, however, they are not recommended as they could produce unintended consequences if \nanything else tries to access the mocked filesystem before they've completed.\n\n```js\nasync function getFileInfo(fileName) {\n  return await mock.bypass(async () => {\n    const stats = await fs.promises.stat(fileName);\n    const data = await fs.promises.readFile(fileName);\n    return {stats, data};\n  });\n}\n```\n\n## Install\n\nUsing `npm`:\n\n```\nnpm install mock-fs --save-dev\n```\n\n## Caveats\n\nWhen you require `mock-fs`, Node's own `fs` module is patched to allow the binding to the underlying file system to be swapped out.  If you require `mock-fs` *before* any other modules that modify `fs` (e.g. `graceful-fs`), the mock should behave as expected.\n\n**Note** `mock-fs` is not compatible with `graceful-fs@3.x` but works with `graceful-fs@4.x`.\n\nMock file access is controlled based on file mode where `process.getuid()` and `process.getgid()` are available (POSIX systems).  On other systems (e.g. Windows) the file mode has no effect.\n\nTested on Linux, OSX, and Windows using Node 12 through 16.  Check the tickets for a list of [known issues](https://github.com/tschaub/mock-fs/issues).\n\n### Using with Jest Snapshot Testing\n\n`.toMatchSnapshot` in [Jest](https://jestjs.io/docs/en/snapshot-testing) uses `fs` to load existing snapshots.\nIf `mockFs` is active, Jest isn't able to load existing snapshots. In such case it accepts all snapshots\nwithout diffing the old ones, which breaks the concept of snapshot testing.\n\nCalling `mock.restore()` in `afterEach` is too late and it's necessary to call it before snapshot matching:\n\n```js\nconst actual = testedFunction()\nmock.restore()\nexpect(actual).toMatchSnapshot()\n```\n\nNote: it's safe to call `mock.restore` multiple times, so it can still be called in `afterEach` and then manually\nin test cases which use snapshot testing.",
      "readmeFilename": "readme.md",
      "gitHead": "8ce809b8fff445903be9f572a71b5f40fa5a6e6b",
      "_id": "mock-fs@5.0.0-dev.1631911156056",
      "_nodeVersion": "16.9.1",
      "_npmVersion": "7.21.1",
      "dist": {
        "integrity": "sha512-9DsHkeg7FvPihJQqNiYg/Nc2diTrN1fiSBHHsfgVrPUr2BYlpqf1w6Y0KjVknTwGzBn6xvvI3RcFEQFsmXzNPw==",
        "shasum": "5859f3877538a50d5b6e0c309ca486cd61c80e35",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-5.0.0-dev.1631911156056.tgz",
        "fileCount": 15,
        "unpackedSize": 95757,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDA3yj+rCPIt3LHGCpZWKVFKfsTa/5C719r+NO2nhPGGQIgLaRyfZZoU2Q24e98/cA0Jn2a4J36TUNNdEV8b6rUq+8="
          }
        ]
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_5.0.0-dev.1631911156056_1631911157068_0.09290845021335858"
      },
      "_hasShrinkwrap": false
    },
    "5.1.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "5.1.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test tasks",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub",
        "parserOptions": {
          "ecmaVersion": 2020
        },
        "env": {
          "es2020": true
        }
      },
      "devDependencies": {
        "chai": "^4.3.4",
        "eslint": "^7.26.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^8.4.0",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5"
      },
      "gitHead": "8a6ad9099984ed6136317e3621b1a740b8f0cdec",
      "_id": "mock-fs@5.1.0",
      "_nodeVersion": "16.5.0",
      "_npmVersion": "7.19.1",
      "dist": {
        "integrity": "sha512-wXdQ2nIk81TYIGLphUnbXl8akQpjb9ItfZefMcTxZcoe+djMkd5POU8fQdSEErxVAeT4CgDHWveYquys4H6Cmw==",
        "shasum": "a9aebd4e6d74a626f84b86eae8a372bd061754e8",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-5.1.0.tgz",
        "fileCount": 15,
        "unpackedSize": 95739,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDRsuJJiDiN7v1Jq5I/ZxTokuQrO6Um/jX//gJegH5fYAiBzSVrAA6Dy6VgY6p6138oqYOmxIE8hsBI7+yXfwDNW0A=="
          }
        ]
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_5.1.0_1631911339696_0.52639537410509"
      },
      "_hasShrinkwrap": false
    },
    "5.1.0-dev.1631911363563": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "5.1.0-dev.1631911363563",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test tasks",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub",
        "parserOptions": {
          "ecmaVersion": 2020
        },
        "env": {
          "es2020": true
        }
      },
      "devDependencies": {
        "chai": "^4.3.4",
        "eslint": "^7.26.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^8.4.0",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5"
      },
      "readme": "[![Build Status](https://github.com/tschaub/mock-fs/workflows/Test/badge.svg)](https://github.com/tschaub/mock-fs/actions?workflow=Test)\n\n# `mock-fs`\n\nThe `mock-fs` module allows Node's built-in [`fs` module](http://nodejs.org/api/fs.html) to be backed temporarily by an in-memory, mock file system.  This lets you run tests against a set of mock files and directories instead of lugging around a bunch of test fixtures.\n\n## Example\n\nThe code below makes it so the `fs` module is temporarily backed by a mock file system with a few files and directories.\n\n```js\nconst mock = require('mock-fs');\n\nmock({\n  'path/to/fake/dir': {\n    'some-file.txt': 'file content here',\n    'empty-dir': {/** empty directory */}\n  },\n  'path/to/some.png': Buffer.from([8, 6, 7, 5, 3, 0, 9]),\n  'some/other/path': {/** another empty directory */}\n});\n```\n\nWhen you are ready to restore the `fs` module (so that it is backed by your real file system), call [`mock.restore()`](#mockrestore). Note that calling this may be **mandatory** in some cases. See [istanbuljs/nyc#324](https://github.com/istanbuljs/nyc/issues/324#issuecomment-234018654)\n\n```js\n// after a test runs\nmock.restore();\n```\n\n## Upgrading to version 4\n\nInstead of overriding all methods of the built-in `fs` module, the library now overrides `process.binding('fs')`.  The purpose of this change is to avoid conflicts with other libraries that override `fs` methods (e.g. `graceful-fs`) and to make it possible to work with multiple Node releases without maintaining copied and slightly modified versions of Node's `fs` module.\n\nBreaking changes:\n\n * The `mock.fs()` function has been removed.  This returned an object with `fs`-like methods without overriding the built-in `fs` module.\n * The object created by `fs.Stats` is no longer an instance of `fs.Stats` (though it has all the same properties and methods).\n * Lazy `require()` do not use the real filesystem.\n * Tests are no longer run in Node < 4.\n\nSome of these breaking changes may be restored in a future release.\n\n## Docs\n\n### <a id='mockconfigoptions'>`mock(config, options)`</a>\n\nConfigure the `fs` module so it is backed by an in-memory file system.\n\nCalling `mock` sets up a mock file system with two directories by default: `process.cwd()` and `os.tmpdir()` (or `os.tmpDir()` for older Node).  When called with no arguments, just these two directories are created.  When called with a `config` object, additional files, directories, and symlinks are created.  To avoid creating a directory for `process.cwd()` and `os.tmpdir()`, see the [`options`](#options) below.\n\nProperty names of the `config` object are interpreted as relative paths to resources (relative from `process.cwd()`).  Property values of the `config` object are interpreted as content or configuration for the generated resources.\n\n*Note that paths should always use forward slashes (`/`) - even on Windows.*\n\n### <a id='options'>`options`</a>\n\nThe second (optional) argument may include the properties below.\n\n * `createCwd` - `boolean` Create a directory for `process.cwd()`.  This is `true` by default.\n * `createTmp` - `boolean` Create a directory for `os.tmpdir()`.  This is `true` by default.\n\n### Loading real files & directories\n\nYou can load real files and directories into the mock system using `mock.load()`\n\n#### Notes\n\n- All stat information is duplicated (dates, permissions, etc) \n- By default, all files are lazy-loaded, unless you specify the `{lazy: false}` option\n\n#### <a id='mappingoptions'>options</a>\n\n| Option    | Type    | Default | Description |\n| --------- | ------- | ------- | ------------\n| lazy      | boolean | true    | File content isn't loaded until explicitly read\n| recursive | boolean | true    | Load all files and directories recursively\n \n#### `mock.load(path, options)`\n\n```js\nmock({\n  // Lazy-load file\n  'my-file.txt': mock.load(path.resolve(__dirname, 'assets/special-file.txt')),\n  \n  // Pre-load js file\n  'ready.js': mock.load(path.resolve(__dirname, 'scripts/ready.js'), {lazy: false}),\n\n  // Recursively loads all node_modules\n  'node_modules': mock.load(path.resolve(__dirname, '../node_modules')),\n\n  // Creates a directory named /tmp with only the files in /tmp/special_tmp_files (no subdirectories), pre-loading all content\n  '/tmp': mock.load('/tmp/special_tmp_files', {recursive: false, lazy:false}),\n\n  'fakefile.txt': 'content here'\n});\n```\n\n### Creating files\n\nWhen `config` property values are a `string` or `Buffer`, a file is created with the provided content.  For example, the following configuration creates a single file with string content (in addition to the two default directories).\n```js\nmock({\n  'path/to/file.txt': 'file content here'\n});\n```\n\nTo create a file with additional properties (owner, permissions, atime, etc.), use the [`mock.file()`](#mockfileproperties) function described below.\n\n### <a id='mockfileproperties'>`mock.file(properties)`</a>\n\nCreate a factory for new files.  Supported properties:\n\n * **content** - `string|Buffer` File contents.\n * **mode** - `number` File mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last file access time.  Defaults to `new Date()`.  Updated when file contents are accessed.\n * **ctime** - `Date` The last file change time.  Defaults to `new Date()`.  Updated when file owner or permissions change.\n * **mtime** - `Date` The last file modification time.  Defaults to `new Date()`.  Updated when file contents change.\n * **birthtime** - `Date` The time of file creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a very old file named `foo`, you could do something like this:\n```js\nmock({\n  foo: mock.file({\n    content: 'file content here',\n    ctime: new Date(1),\n    mtime: new Date(1)\n  })\n});\n```\n\nNote that if you want to create a file with the default properties, you can provide a `string` or `Buffer` directly instead of calling `mock.file()`.\n\n### Creating directories\n\nWhen `config` property values are an `Object`, a directory is created.  The structure of the object is the same as the `config` object itself.  So an empty directory can be created with a simple object literal (`{}`).  The following configuration creates a directory containing two files (in addition to the two default directories):\n```js\n// note that this could also be written as\n// mock({'path/to/dir': { /** config */ }})\nmock({\n  path: {\n    to: {\n      dir: {\n        file1: 'text content',\n        file2: Buffer.from([1, 2, 3, 4])\n      }\n    }\n  }\n});\n```\n\nTo create a directory with additional properties (owner, permissions, atime, etc.), use the [`mock.directory()`](mockdirectoryproperties) function described below.\n\n### <a id='mockdirectoryproperties'>`mock.directory(properties)`</a>\n\nCreate a factory for new directories.  Supported properties:\n\n * **mode** - `number` Directory mode (permission and sticky bits).  Defaults to `0777`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last directory access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last directory change time.  Defaults to `new Date()`.  Updated when owner or permissions change.\n * **mtime** - `Date` The last directory modification time.  Defaults to `new Date()`.  Updated when an item is added, removed, or renamed.\n * **birthtime** - `Date` The time of directory creation.  Defaults to `new Date()`.\n * **items** - `Object` Directory contents.  Members will generate additional files, directories, or symlinks.\n\nTo create a mock filesystem with a directory with the relative path `some/dir` that has a mode of `0755` and two child files, you could do something like this:\n```js\nmock({\n  'some/dir': mock.directory({\n    mode: 0755,\n    items: {\n      file1: 'file one content',\n      file2: Buffer.from([8, 6, 7, 5, 3, 0, 9])\n    }\n  })\n});\n```\n\nNote that if you want to create a directory with the default properties, you can provide an `Object` directly instead of calling `mock.directory()`.\n\n### Creating symlinks\n\nUsing a `string` or a `Buffer` is a shortcut for creating files with default properties.  Using an `Object` is a shortcut for creating a directory with default properties.  There is no shortcut for creating symlinks.  To create a symlink, you need to call the [`mock.symlink()`](#mocksymlinkproperties) function described below.\n\n### <a id='mocksymlinkproperties'>`mock.symlink(properties)`</a>\n\nCreate a factory for new symlinks.  Supported properties:\n\n * **path** - `string` Path to the source (required).\n * **mode** - `number` Symlink mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last symlink access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last symlink change time.  Defaults to `new Date()`.\n * **mtime** - `Date` The last symlink modification time.  Defaults to `new Date()`.\n * **birthtime** - `Date` The time of symlink creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a file and a symlink, you could do something like this:\n```js\nmock({\n  'some/dir': {\n    'regular-file': 'file contents',\n    'a-symlink': mock.symlink({\n      path: 'regular-file'\n    })\n  }\n});\n```\n\n### Restoring the file system\n\n### <a id='mockrestore'>`mock.restore()`</a>\n\nRestore the `fs` binding to the real file system.  This undoes the effect of calling `mock()`.  Typically, you would set up a mock file system before running a test and restore the original after.  Using a test runner with `beforeEach` and `afterEach` hooks, this might look like the following:\n\n```js\nbeforeEach(function() {\n  mock({\n    'fake-file': 'file contents'\n  });\n});\nafterEach(mock.restore);\n```\n\n### Bypassing the mock file system\n\n#### <a id='mockbypass'>`mock.bypass(fn)`</a>\n\nExecute calls to the real filesystem with mock.bypass()\n\n```js\n// This file exists only on the real FS, not on the mocked FS\nconst realFilePath = '/path/to/real/file.txt';\nconst myData = mock.bypass(() => fs.readFileSync(realFilePath, 'utf-8'));\n```\n\nIf you pass an asynchronous function or a promise-returning function to `bypass()`, a promise will be returned.\n\n#### <a id='bypassasync'>Async Warning</a>\n\nAsynchronous calls are supported, however, they are not recommended as they could produce unintended consequences if \nanything else tries to access the mocked filesystem before they've completed.\n\n```js\nasync function getFileInfo(fileName) {\n  return await mock.bypass(async () => {\n    const stats = await fs.promises.stat(fileName);\n    const data = await fs.promises.readFile(fileName);\n    return {stats, data};\n  });\n}\n```\n\n## Install\n\nUsing `npm`:\n\n```\nnpm install mock-fs --save-dev\n```\n\n## Caveats\n\nWhen you require `mock-fs`, Node's own `fs` module is patched to allow the binding to the underlying file system to be swapped out.  If you require `mock-fs` *before* any other modules that modify `fs` (e.g. `graceful-fs`), the mock should behave as expected.\n\n**Note** `mock-fs` is not compatible with `graceful-fs@3.x` but works with `graceful-fs@4.x`.\n\nMock file access is controlled based on file mode where `process.getuid()` and `process.getgid()` are available (POSIX systems).  On other systems (e.g. Windows) the file mode has no effect.\n\nTested on Linux, OSX, and Windows using Node 12 through 16.  Check the tickets for a list of [known issues](https://github.com/tschaub/mock-fs/issues).\n\n### Using with Jest Snapshot Testing\n\n`.toMatchSnapshot` in [Jest](https://jestjs.io/docs/en/snapshot-testing) uses `fs` to load existing snapshots.\nIf `mockFs` is active, Jest isn't able to load existing snapshots. In such case it accepts all snapshots\nwithout diffing the old ones, which breaks the concept of snapshot testing.\n\nCalling `mock.restore()` in `afterEach` is too late and it's necessary to call it before snapshot matching:\n\n```js\nconst actual = testedFunction()\nmock.restore()\nexpect(actual).toMatchSnapshot()\n```\n\nNote: it's safe to call `mock.restore` multiple times, so it can still be called in `afterEach` and then manually\nin test cases which use snapshot testing.",
      "readmeFilename": "readme.md",
      "gitHead": "8a6ad9099984ed6136317e3621b1a740b8f0cdec",
      "_id": "mock-fs@5.1.0-dev.1631911363563",
      "_nodeVersion": "16.9.1",
      "_npmVersion": "7.21.1",
      "dist": {
        "integrity": "sha512-d9o9c2j8HfETPvUzeLUFJ4lO1M7mDaYEhJuaHKt5aMUJVk4mbpZC9lKUWrmgcGfFWHWRnUlo1hAblamMtWcBNg==",
        "shasum": "715588b93e884160d77cf2d509dce27dcaa51bb5",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-5.1.0-dev.1631911363563.tgz",
        "fileCount": 15,
        "unpackedSize": 95757,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAPhXFhFSSIVg6QXCXbhtJ5QRRBv0mWep8QyPQBWi+TcAiEA2jyLzZ5PbXbdrR93Ew9RbDpu6FqOESqzOVmUx60M6aA="
          }
        ]
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_5.1.0-dev.1631911363563_1631911364843_0.6659466784999213"
      },
      "_hasShrinkwrap": false
    },
    "5.1.0-dev.1632400547829": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "5.1.0-dev.1632400547829",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test tasks",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub",
        "parserOptions": {
          "ecmaVersion": 2020
        },
        "env": {
          "es2020": true
        }
      },
      "devDependencies": {
        "chai": "^4.3.4",
        "eslint": "^7.26.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^8.4.0",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "readme": "[![Build Status](https://github.com/tschaub/mock-fs/workflows/Test/badge.svg)](https://github.com/tschaub/mock-fs/actions?workflow=Test)\n\n# `mock-fs`\n\nThe `mock-fs` module allows Node's built-in [`fs` module](http://nodejs.org/api/fs.html) to be backed temporarily by an in-memory, mock file system.  This lets you run tests against a set of mock files and directories instead of lugging around a bunch of test fixtures.\n\n## Example\n\nThe code below makes it so the `fs` module is temporarily backed by a mock file system with a few files and directories.\n\n```js\nconst mock = require('mock-fs');\n\nmock({\n  'path/to/fake/dir': {\n    'some-file.txt': 'file content here',\n    'empty-dir': {/** empty directory */}\n  },\n  'path/to/some.png': Buffer.from([8, 6, 7, 5, 3, 0, 9]),\n  'some/other/path': {/** another empty directory */}\n});\n```\n\nWhen you are ready to restore the `fs` module (so that it is backed by your real file system), call [`mock.restore()`](#mockrestore). Note that calling this may be **mandatory** in some cases. See [istanbuljs/nyc#324](https://github.com/istanbuljs/nyc/issues/324#issuecomment-234018654)\n\n```js\n// after a test runs\nmock.restore();\n```\n\n## Upgrading to version 4\n\nInstead of overriding all methods of the built-in `fs` module, the library now overrides `process.binding('fs')`.  The purpose of this change is to avoid conflicts with other libraries that override `fs` methods (e.g. `graceful-fs`) and to make it possible to work with multiple Node releases without maintaining copied and slightly modified versions of Node's `fs` module.\n\nBreaking changes:\n\n * The `mock.fs()` function has been removed.  This returned an object with `fs`-like methods without overriding the built-in `fs` module.\n * The object created by `fs.Stats` is no longer an instance of `fs.Stats` (though it has all the same properties and methods).\n * Lazy `require()` do not use the real filesystem.\n * Tests are no longer run in Node < 4.\n\nSome of these breaking changes may be restored in a future release.\n\n## Docs\n\n### <a id='mockconfigoptions'>`mock(config, options)`</a>\n\nConfigure the `fs` module so it is backed by an in-memory file system.\n\nCalling `mock` sets up a mock file system with two directories by default: `process.cwd()` and `os.tmpdir()` (or `os.tmpDir()` for older Node).  When called with no arguments, just these two directories are created.  When called with a `config` object, additional files, directories, and symlinks are created.  To avoid creating a directory for `process.cwd()` and `os.tmpdir()`, see the [`options`](#options) below.\n\nProperty names of the `config` object are interpreted as relative paths to resources (relative from `process.cwd()`).  Property values of the `config` object are interpreted as content or configuration for the generated resources.\n\n*Note that paths should always use forward slashes (`/`) - even on Windows.*\n\n### <a id='options'>`options`</a>\n\nThe second (optional) argument may include the properties below.\n\n * `createCwd` - `boolean` Create a directory for `process.cwd()`.  This is `true` by default.\n * `createTmp` - `boolean` Create a directory for `os.tmpdir()`.  This is `true` by default.\n\n### Loading real files & directories\n\nYou can load real files and directories into the mock system using `mock.load()`\n\n#### Notes\n\n- All stat information is duplicated (dates, permissions, etc) \n- By default, all files are lazy-loaded, unless you specify the `{lazy: false}` option\n\n#### <a id='mappingoptions'>options</a>\n\n| Option    | Type    | Default | Description |\n| --------- | ------- | ------- | ------------\n| lazy      | boolean | true    | File content isn't loaded until explicitly read\n| recursive | boolean | true    | Load all files and directories recursively\n \n#### `mock.load(path, options)`\n\n```js\nmock({\n  // Lazy-load file\n  'my-file.txt': mock.load(path.resolve(__dirname, 'assets/special-file.txt')),\n  \n  // Pre-load js file\n  'ready.js': mock.load(path.resolve(__dirname, 'scripts/ready.js'), {lazy: false}),\n\n  // Recursively loads all node_modules\n  'node_modules': mock.load(path.resolve(__dirname, '../node_modules')),\n\n  // Creates a directory named /tmp with only the files in /tmp/special_tmp_files (no subdirectories), pre-loading all content\n  '/tmp': mock.load('/tmp/special_tmp_files', {recursive: false, lazy:false}),\n\n  'fakefile.txt': 'content here'\n});\n```\n\n### Creating files\n\nWhen `config` property values are a `string` or `Buffer`, a file is created with the provided content.  For example, the following configuration creates a single file with string content (in addition to the two default directories).\n```js\nmock({\n  'path/to/file.txt': 'file content here'\n});\n```\n\nTo create a file with additional properties (owner, permissions, atime, etc.), use the [`mock.file()`](#mockfileproperties) function described below.\n\n### <a id='mockfileproperties'>`mock.file(properties)`</a>\n\nCreate a factory for new files.  Supported properties:\n\n * **content** - `string|Buffer` File contents.\n * **mode** - `number` File mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last file access time.  Defaults to `new Date()`.  Updated when file contents are accessed.\n * **ctime** - `Date` The last file change time.  Defaults to `new Date()`.  Updated when file owner or permissions change.\n * **mtime** - `Date` The last file modification time.  Defaults to `new Date()`.  Updated when file contents change.\n * **birthtime** - `Date` The time of file creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a very old file named `foo`, you could do something like this:\n```js\nmock({\n  foo: mock.file({\n    content: 'file content here',\n    ctime: new Date(1),\n    mtime: new Date(1)\n  })\n});\n```\n\nNote that if you want to create a file with the default properties, you can provide a `string` or `Buffer` directly instead of calling `mock.file()`.\n\n### Creating directories\n\nWhen `config` property values are an `Object`, a directory is created.  The structure of the object is the same as the `config` object itself.  So an empty directory can be created with a simple object literal (`{}`).  The following configuration creates a directory containing two files (in addition to the two default directories):\n```js\n// note that this could also be written as\n// mock({'path/to/dir': { /** config */ }})\nmock({\n  path: {\n    to: {\n      dir: {\n        file1: 'text content',\n        file2: Buffer.from([1, 2, 3, 4])\n      }\n    }\n  }\n});\n```\n\nTo create a directory with additional properties (owner, permissions, atime, etc.), use the [`mock.directory()`](mockdirectoryproperties) function described below.\n\n### <a id='mockdirectoryproperties'>`mock.directory(properties)`</a>\n\nCreate a factory for new directories.  Supported properties:\n\n * **mode** - `number` Directory mode (permission and sticky bits).  Defaults to `0777`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last directory access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last directory change time.  Defaults to `new Date()`.  Updated when owner or permissions change.\n * **mtime** - `Date` The last directory modification time.  Defaults to `new Date()`.  Updated when an item is added, removed, or renamed.\n * **birthtime** - `Date` The time of directory creation.  Defaults to `new Date()`.\n * **items** - `Object` Directory contents.  Members will generate additional files, directories, or symlinks.\n\nTo create a mock filesystem with a directory with the relative path `some/dir` that has a mode of `0755` and two child files, you could do something like this:\n```js\nmock({\n  'some/dir': mock.directory({\n    mode: 0755,\n    items: {\n      file1: 'file one content',\n      file2: Buffer.from([8, 6, 7, 5, 3, 0, 9])\n    }\n  })\n});\n```\n\nNote that if you want to create a directory with the default properties, you can provide an `Object` directly instead of calling `mock.directory()`.\n\n### Creating symlinks\n\nUsing a `string` or a `Buffer` is a shortcut for creating files with default properties.  Using an `Object` is a shortcut for creating a directory with default properties.  There is no shortcut for creating symlinks.  To create a symlink, you need to call the [`mock.symlink()`](#mocksymlinkproperties) function described below.\n\n### <a id='mocksymlinkproperties'>`mock.symlink(properties)`</a>\n\nCreate a factory for new symlinks.  Supported properties:\n\n * **path** - `string` Path to the source (required).\n * **mode** - `number` Symlink mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last symlink access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last symlink change time.  Defaults to `new Date()`.\n * **mtime** - `Date` The last symlink modification time.  Defaults to `new Date()`.\n * **birthtime** - `Date` The time of symlink creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a file and a symlink, you could do something like this:\n```js\nmock({\n  'some/dir': {\n    'regular-file': 'file contents',\n    'a-symlink': mock.symlink({\n      path: 'regular-file'\n    })\n  }\n});\n```\n\n### Restoring the file system\n\n### <a id='mockrestore'>`mock.restore()`</a>\n\nRestore the `fs` binding to the real file system.  This undoes the effect of calling `mock()`.  Typically, you would set up a mock file system before running a test and restore the original after.  Using a test runner with `beforeEach` and `afterEach` hooks, this might look like the following:\n\n```js\nbeforeEach(function() {\n  mock({\n    'fake-file': 'file contents'\n  });\n});\nafterEach(mock.restore);\n```\n\n### Bypassing the mock file system\n\n#### <a id='mockbypass'>`mock.bypass(fn)`</a>\n\nExecute calls to the real filesystem with mock.bypass()\n\n```js\n// This file exists only on the real FS, not on the mocked FS\nconst realFilePath = '/path/to/real/file.txt';\nconst myData = mock.bypass(() => fs.readFileSync(realFilePath, 'utf-8'));\n```\n\nIf you pass an asynchronous function or a promise-returning function to `bypass()`, a promise will be returned.\n\n#### <a id='bypassasync'>Async Warning</a>\n\nAsynchronous calls are supported, however, they are not recommended as they could produce unintended consequences if \nanything else tries to access the mocked filesystem before they've completed.\n\n```js\nasync function getFileInfo(fileName) {\n  return await mock.bypass(async () => {\n    const stats = await fs.promises.stat(fileName);\n    const data = await fs.promises.readFile(fileName);\n    return {stats, data};\n  });\n}\n```\n\n## Install\n\nUsing `npm`:\n\n```\nnpm install mock-fs --save-dev\n```\n\n## Caveats\n\nWhen you require `mock-fs`, Node's own `fs` module is patched to allow the binding to the underlying file system to be swapped out.  If you require `mock-fs` *before* any other modules that modify `fs` (e.g. `graceful-fs`), the mock should behave as expected.\n\n**Note** `mock-fs` is not compatible with `graceful-fs@3.x` but works with `graceful-fs@4.x`.\n\nMock file access is controlled based on file mode where `process.getuid()` and `process.getgid()` are available (POSIX systems).  On other systems (e.g. Windows) the file mode has no effect.\n\nTested on Linux, OSX, and Windows using Node 12 through 16.  Check the tickets for a list of [known issues](https://github.com/tschaub/mock-fs/issues).\n\n### Using with Jest Snapshot Testing\n\n`.toMatchSnapshot` in [Jest](https://jestjs.io/docs/en/snapshot-testing) uses `fs` to load existing snapshots.\nIf `mockFs` is active, Jest isn't able to load existing snapshots. In such case it accepts all snapshots\nwithout diffing the old ones, which breaks the concept of snapshot testing.\n\nCalling `mock.restore()` in `afterEach` is too late and it's necessary to call it before snapshot matching:\n\n```js\nconst actual = testedFunction()\nmock.restore()\nexpect(actual).toMatchSnapshot()\n```\n\nNote: it's safe to call `mock.restore` multiple times, so it can still be called in `afterEach` and then manually\nin test cases which use snapshot testing.",
      "readmeFilename": "readme.md",
      "gitHead": "31d901796c2130dce5863a611ce428787a62fe30",
      "_id": "mock-fs@5.1.0-dev.1632400547829",
      "_nodeVersion": "16.10.0",
      "_npmVersion": "7.24.0",
      "dist": {
        "integrity": "sha512-VFcjolswXhFWh4J+mYDQCM2W0R3uphsF0BaHdEpG9Eb7szKnTebndL1dH0apM7UvmKAX0wpnqrgxWDh7Kl/uaA==",
        "shasum": "53b729f63d555fd369911734146d402c49015f9c",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-5.1.0-dev.1632400547829.tgz",
        "fileCount": 15,
        "unpackedSize": 95800,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDPkcUj8xIfFSS5fioxjkydlc+wudwQZVfXg9E2OhZRIgIgTn2l08WuzdF+nz1aOKaaUMOdWApJLvEqH0OSND/GxOY="
          }
        ]
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_5.1.0-dev.1632400547829_1632400548865_0.055992009179271385"
      },
      "_hasShrinkwrap": false
    },
    "5.1.1": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "5.1.1",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test tasks",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub",
        "parserOptions": {
          "ecmaVersion": 2020
        },
        "env": {
          "es2020": true
        }
      },
      "devDependencies": {
        "chai": "^4.3.4",
        "eslint": "^7.26.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^8.4.0",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "gitHead": "313cd08c4a1c13b630db80804c0d6be4ccb2c36b",
      "_id": "mock-fs@5.1.1",
      "_nodeVersion": "16.5.0",
      "_npmVersion": "7.19.1",
      "dist": {
        "integrity": "sha512-p/8oZ3qvfKGPw+4wdVCyjDxa6wn2tP0TCf3WXC1UyUBAevezPn1TtOoxtMYVbZu/S/iExg+Ghed1busItj2CEw==",
        "shasum": "d4c95e916abf400664197079d7e399d133bb6048",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-5.1.1.tgz",
        "fileCount": 15,
        "unpackedSize": 95782,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDELNs1op2dUNQornG1/8Y9xHukheI5NCaAu4rJD+pHgQIgWdBUtXpX9LGLR3DUlcDIyEXyW6uxc/CEr2TGpxQT7FY="
          }
        ]
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_5.1.1_1632400700604_0.34604343151938877"
      },
      "_hasShrinkwrap": false
    },
    "5.1.1-dev.1632400720601": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "5.1.1-dev.1632400720601",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test tasks",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub",
        "parserOptions": {
          "ecmaVersion": 2020
        },
        "env": {
          "es2020": true
        }
      },
      "devDependencies": {
        "chai": "^4.3.4",
        "eslint": "^7.26.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^8.4.0",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "readme": "[![Build Status](https://github.com/tschaub/mock-fs/workflows/Test/badge.svg)](https://github.com/tschaub/mock-fs/actions?workflow=Test)\n\n# `mock-fs`\n\nThe `mock-fs` module allows Node's built-in [`fs` module](http://nodejs.org/api/fs.html) to be backed temporarily by an in-memory, mock file system.  This lets you run tests against a set of mock files and directories instead of lugging around a bunch of test fixtures.\n\n## Example\n\nThe code below makes it so the `fs` module is temporarily backed by a mock file system with a few files and directories.\n\n```js\nconst mock = require('mock-fs');\n\nmock({\n  'path/to/fake/dir': {\n    'some-file.txt': 'file content here',\n    'empty-dir': {/** empty directory */}\n  },\n  'path/to/some.png': Buffer.from([8, 6, 7, 5, 3, 0, 9]),\n  'some/other/path': {/** another empty directory */}\n});\n```\n\nWhen you are ready to restore the `fs` module (so that it is backed by your real file system), call [`mock.restore()`](#mockrestore). Note that calling this may be **mandatory** in some cases. See [istanbuljs/nyc#324](https://github.com/istanbuljs/nyc/issues/324#issuecomment-234018654)\n\n```js\n// after a test runs\nmock.restore();\n```\n\n## Upgrading to version 4\n\nInstead of overriding all methods of the built-in `fs` module, the library now overrides `process.binding('fs')`.  The purpose of this change is to avoid conflicts with other libraries that override `fs` methods (e.g. `graceful-fs`) and to make it possible to work with multiple Node releases without maintaining copied and slightly modified versions of Node's `fs` module.\n\nBreaking changes:\n\n * The `mock.fs()` function has been removed.  This returned an object with `fs`-like methods without overriding the built-in `fs` module.\n * The object created by `fs.Stats` is no longer an instance of `fs.Stats` (though it has all the same properties and methods).\n * Lazy `require()` do not use the real filesystem.\n * Tests are no longer run in Node < 4.\n\nSome of these breaking changes may be restored in a future release.\n\n## Docs\n\n### <a id='mockconfigoptions'>`mock(config, options)`</a>\n\nConfigure the `fs` module so it is backed by an in-memory file system.\n\nCalling `mock` sets up a mock file system with two directories by default: `process.cwd()` and `os.tmpdir()` (or `os.tmpDir()` for older Node).  When called with no arguments, just these two directories are created.  When called with a `config` object, additional files, directories, and symlinks are created.  To avoid creating a directory for `process.cwd()` and `os.tmpdir()`, see the [`options`](#options) below.\n\nProperty names of the `config` object are interpreted as relative paths to resources (relative from `process.cwd()`).  Property values of the `config` object are interpreted as content or configuration for the generated resources.\n\n*Note that paths should always use forward slashes (`/`) - even on Windows.*\n\n### <a id='options'>`options`</a>\n\nThe second (optional) argument may include the properties below.\n\n * `createCwd` - `boolean` Create a directory for `process.cwd()`.  This is `true` by default.\n * `createTmp` - `boolean` Create a directory for `os.tmpdir()`.  This is `true` by default.\n\n### Loading real files & directories\n\nYou can load real files and directories into the mock system using `mock.load()`\n\n#### Notes\n\n- All stat information is duplicated (dates, permissions, etc) \n- By default, all files are lazy-loaded, unless you specify the `{lazy: false}` option\n\n#### <a id='mappingoptions'>options</a>\n\n| Option    | Type    | Default | Description |\n| --------- | ------- | ------- | ------------\n| lazy      | boolean | true    | File content isn't loaded until explicitly read\n| recursive | boolean | true    | Load all files and directories recursively\n \n#### `mock.load(path, options)`\n\n```js\nmock({\n  // Lazy-load file\n  'my-file.txt': mock.load(path.resolve(__dirname, 'assets/special-file.txt')),\n  \n  // Pre-load js file\n  'ready.js': mock.load(path.resolve(__dirname, 'scripts/ready.js'), {lazy: false}),\n\n  // Recursively loads all node_modules\n  'node_modules': mock.load(path.resolve(__dirname, '../node_modules')),\n\n  // Creates a directory named /tmp with only the files in /tmp/special_tmp_files (no subdirectories), pre-loading all content\n  '/tmp': mock.load('/tmp/special_tmp_files', {recursive: false, lazy:false}),\n\n  'fakefile.txt': 'content here'\n});\n```\n\n### Creating files\n\nWhen `config` property values are a `string` or `Buffer`, a file is created with the provided content.  For example, the following configuration creates a single file with string content (in addition to the two default directories).\n```js\nmock({\n  'path/to/file.txt': 'file content here'\n});\n```\n\nTo create a file with additional properties (owner, permissions, atime, etc.), use the [`mock.file()`](#mockfileproperties) function described below.\n\n### <a id='mockfileproperties'>`mock.file(properties)`</a>\n\nCreate a factory for new files.  Supported properties:\n\n * **content** - `string|Buffer` File contents.\n * **mode** - `number` File mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last file access time.  Defaults to `new Date()`.  Updated when file contents are accessed.\n * **ctime** - `Date` The last file change time.  Defaults to `new Date()`.  Updated when file owner or permissions change.\n * **mtime** - `Date` The last file modification time.  Defaults to `new Date()`.  Updated when file contents change.\n * **birthtime** - `Date` The time of file creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a very old file named `foo`, you could do something like this:\n```js\nmock({\n  foo: mock.file({\n    content: 'file content here',\n    ctime: new Date(1),\n    mtime: new Date(1)\n  })\n});\n```\n\nNote that if you want to create a file with the default properties, you can provide a `string` or `Buffer` directly instead of calling `mock.file()`.\n\n### Creating directories\n\nWhen `config` property values are an `Object`, a directory is created.  The structure of the object is the same as the `config` object itself.  So an empty directory can be created with a simple object literal (`{}`).  The following configuration creates a directory containing two files (in addition to the two default directories):\n```js\n// note that this could also be written as\n// mock({'path/to/dir': { /** config */ }})\nmock({\n  path: {\n    to: {\n      dir: {\n        file1: 'text content',\n        file2: Buffer.from([1, 2, 3, 4])\n      }\n    }\n  }\n});\n```\n\nTo create a directory with additional properties (owner, permissions, atime, etc.), use the [`mock.directory()`](mockdirectoryproperties) function described below.\n\n### <a id='mockdirectoryproperties'>`mock.directory(properties)`</a>\n\nCreate a factory for new directories.  Supported properties:\n\n * **mode** - `number` Directory mode (permission and sticky bits).  Defaults to `0777`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last directory access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last directory change time.  Defaults to `new Date()`.  Updated when owner or permissions change.\n * **mtime** - `Date` The last directory modification time.  Defaults to `new Date()`.  Updated when an item is added, removed, or renamed.\n * **birthtime** - `Date` The time of directory creation.  Defaults to `new Date()`.\n * **items** - `Object` Directory contents.  Members will generate additional files, directories, or symlinks.\n\nTo create a mock filesystem with a directory with the relative path `some/dir` that has a mode of `0755` and two child files, you could do something like this:\n```js\nmock({\n  'some/dir': mock.directory({\n    mode: 0755,\n    items: {\n      file1: 'file one content',\n      file2: Buffer.from([8, 6, 7, 5, 3, 0, 9])\n    }\n  })\n});\n```\n\nNote that if you want to create a directory with the default properties, you can provide an `Object` directly instead of calling `mock.directory()`.\n\n### Creating symlinks\n\nUsing a `string` or a `Buffer` is a shortcut for creating files with default properties.  Using an `Object` is a shortcut for creating a directory with default properties.  There is no shortcut for creating symlinks.  To create a symlink, you need to call the [`mock.symlink()`](#mocksymlinkproperties) function described below.\n\n### <a id='mocksymlinkproperties'>`mock.symlink(properties)`</a>\n\nCreate a factory for new symlinks.  Supported properties:\n\n * **path** - `string` Path to the source (required).\n * **mode** - `number` Symlink mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last symlink access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last symlink change time.  Defaults to `new Date()`.\n * **mtime** - `Date` The last symlink modification time.  Defaults to `new Date()`.\n * **birthtime** - `Date` The time of symlink creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a file and a symlink, you could do something like this:\n```js\nmock({\n  'some/dir': {\n    'regular-file': 'file contents',\n    'a-symlink': mock.symlink({\n      path: 'regular-file'\n    })\n  }\n});\n```\n\n### Restoring the file system\n\n### <a id='mockrestore'>`mock.restore()`</a>\n\nRestore the `fs` binding to the real file system.  This undoes the effect of calling `mock()`.  Typically, you would set up a mock file system before running a test and restore the original after.  Using a test runner with `beforeEach` and `afterEach` hooks, this might look like the following:\n\n```js\nbeforeEach(function() {\n  mock({\n    'fake-file': 'file contents'\n  });\n});\nafterEach(mock.restore);\n```\n\n### Bypassing the mock file system\n\n#### <a id='mockbypass'>`mock.bypass(fn)`</a>\n\nExecute calls to the real filesystem with mock.bypass()\n\n```js\n// This file exists only on the real FS, not on the mocked FS\nconst realFilePath = '/path/to/real/file.txt';\nconst myData = mock.bypass(() => fs.readFileSync(realFilePath, 'utf-8'));\n```\n\nIf you pass an asynchronous function or a promise-returning function to `bypass()`, a promise will be returned.\n\n#### <a id='bypassasync'>Async Warning</a>\n\nAsynchronous calls are supported, however, they are not recommended as they could produce unintended consequences if \nanything else tries to access the mocked filesystem before they've completed.\n\n```js\nasync function getFileInfo(fileName) {\n  return await mock.bypass(async () => {\n    const stats = await fs.promises.stat(fileName);\n    const data = await fs.promises.readFile(fileName);\n    return {stats, data};\n  });\n}\n```\n\n## Install\n\nUsing `npm`:\n\n```\nnpm install mock-fs --save-dev\n```\n\n## Caveats\n\nWhen you require `mock-fs`, Node's own `fs` module is patched to allow the binding to the underlying file system to be swapped out.  If you require `mock-fs` *before* any other modules that modify `fs` (e.g. `graceful-fs`), the mock should behave as expected.\n\n**Note** `mock-fs` is not compatible with `graceful-fs@3.x` but works with `graceful-fs@4.x`.\n\nMock file access is controlled based on file mode where `process.getuid()` and `process.getgid()` are available (POSIX systems).  On other systems (e.g. Windows) the file mode has no effect.\n\nTested on Linux, OSX, and Windows using Node 12 through 16.  Check the tickets for a list of [known issues](https://github.com/tschaub/mock-fs/issues).\n\n### Using with Jest Snapshot Testing\n\n`.toMatchSnapshot` in [Jest](https://jestjs.io/docs/en/snapshot-testing) uses `fs` to load existing snapshots.\nIf `mockFs` is active, Jest isn't able to load existing snapshots. In such case it accepts all snapshots\nwithout diffing the old ones, which breaks the concept of snapshot testing.\n\nCalling `mock.restore()` in `afterEach` is too late and it's necessary to call it before snapshot matching:\n\n```js\nconst actual = testedFunction()\nmock.restore()\nexpect(actual).toMatchSnapshot()\n```\n\nNote: it's safe to call `mock.restore` multiple times, so it can still be called in `afterEach` and then manually\nin test cases which use snapshot testing.",
      "readmeFilename": "readme.md",
      "gitHead": "313cd08c4a1c13b630db80804c0d6be4ccb2c36b",
      "_id": "mock-fs@5.1.1-dev.1632400720601",
      "_nodeVersion": "16.10.0",
      "_npmVersion": "7.24.0",
      "dist": {
        "integrity": "sha512-XBnsFsSC0tyJSKi3dUafanMaaXrwwHR8XxjaawPhpkorhuBQqD5zdhwB8akIuy1N9j//mIpqhCRTKfQ49Mn1yQ==",
        "shasum": "5a3355fcbf582c9479fb235833dd946e2a3f1fba",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-5.1.1-dev.1632400720601.tgz",
        "fileCount": 15,
        "unpackedSize": 95800,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC59tCiZBlLuwW/VveNfB67MZ3BPhG0M1n0AAfeBw2VLwIhAKDKlB0SUVZguhTDRBUaZdeU2SQcr1X5E1TMjep4MtuS"
          }
        ]
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_5.1.1-dev.1632400720601_1632400721625_0.5741385814683706"
      },
      "_hasShrinkwrap": false
    },
    "5.1.1-dev.1636402047631": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "5.1.1-dev.1636402047631",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test tasks",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub",
        "parserOptions": {
          "ecmaVersion": 2020
        },
        "env": {
          "es2020": true
        }
      },
      "devDependencies": {
        "chai": "^4.3.4",
        "eslint": "^7.26.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^8.4.0",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "readme": "[![Build Status](https://github.com/tschaub/mock-fs/workflows/Test/badge.svg)](https://github.com/tschaub/mock-fs/actions?workflow=Test)\n\n# `mock-fs`\n\nThe `mock-fs` module allows Node's built-in [`fs` module](http://nodejs.org/api/fs.html) to be backed temporarily by an in-memory, mock file system.  This lets you run tests against a set of mock files and directories instead of lugging around a bunch of test fixtures.\n\n## Example\n\nThe code below makes it so the `fs` module is temporarily backed by a mock file system with a few files and directories.\n\n```js\nconst mock = require('mock-fs');\n\nmock({\n  'path/to/fake/dir': {\n    'some-file.txt': 'file content here',\n    'empty-dir': {/** empty directory */}\n  },\n  'path/to/some.png': Buffer.from([8, 6, 7, 5, 3, 0, 9]),\n  'some/other/path': {/** another empty directory */}\n});\n```\n\nWhen you are ready to restore the `fs` module (so that it is backed by your real file system), call [`mock.restore()`](#mockrestore). Note that calling this may be **mandatory** in some cases. See [istanbuljs/nyc#324](https://github.com/istanbuljs/nyc/issues/324#issuecomment-234018654)\n\n```js\n// after a test runs\nmock.restore();\n```\n\n## Upgrading to version 4\n\nInstead of overriding all methods of the built-in `fs` module, the library now overrides `process.binding('fs')`.  The purpose of this change is to avoid conflicts with other libraries that override `fs` methods (e.g. `graceful-fs`) and to make it possible to work with multiple Node releases without maintaining copied and slightly modified versions of Node's `fs` module.\n\nBreaking changes:\n\n * The `mock.fs()` function has been removed.  This returned an object with `fs`-like methods without overriding the built-in `fs` module.\n * The object created by `fs.Stats` is no longer an instance of `fs.Stats` (though it has all the same properties and methods).\n * Lazy `require()` do not use the real filesystem.\n * Tests are no longer run in Node < 4.\n\nSome of these breaking changes may be restored in a future release.\n\n## Docs\n\n### <a id='mockconfigoptions'>`mock(config, options)`</a>\n\nConfigure the `fs` module so it is backed by an in-memory file system.\n\nCalling `mock` sets up a mock file system with two directories by default: `process.cwd()` and `os.tmpdir()` (or `os.tmpDir()` for older Node).  When called with no arguments, just these two directories are created.  When called with a `config` object, additional files, directories, and symlinks are created.  To avoid creating a directory for `process.cwd()` and `os.tmpdir()`, see the [`options`](#options) below.\n\nProperty names of the `config` object are interpreted as relative paths to resources (relative from `process.cwd()`).  Property values of the `config` object are interpreted as content or configuration for the generated resources.\n\n*Note that paths should always use forward slashes (`/`) - even on Windows.*\n\n### <a id='options'>`options`</a>\n\nThe second (optional) argument may include the properties below.\n\n * `createCwd` - `boolean` Create a directory for `process.cwd()`.  This is `true` by default.\n * `createTmp` - `boolean` Create a directory for `os.tmpdir()`.  This is `true` by default.\n\n### Loading real files & directories\n\nYou can load real files and directories into the mock system using `mock.load()`\n\n#### Notes\n\n- All stat information is duplicated (dates, permissions, etc) \n- By default, all files are lazy-loaded, unless you specify the `{lazy: false}` option\n\n#### <a id='mappingoptions'>options</a>\n\n| Option    | Type    | Default | Description |\n| --------- | ------- | ------- | ------------\n| lazy      | boolean | true    | File content isn't loaded until explicitly read\n| recursive | boolean | true    | Load all files and directories recursively\n \n#### `mock.load(path, options)`\n\n```js\nmock({\n  // Lazy-load file\n  'my-file.txt': mock.load(path.resolve(__dirname, 'assets/special-file.txt')),\n  \n  // Pre-load js file\n  'ready.js': mock.load(path.resolve(__dirname, 'scripts/ready.js'), {lazy: false}),\n\n  // Recursively loads all node_modules\n  'node_modules': mock.load(path.resolve(__dirname, '../node_modules')),\n\n  // Creates a directory named /tmp with only the files in /tmp/special_tmp_files (no subdirectories), pre-loading all content\n  '/tmp': mock.load('/tmp/special_tmp_files', {recursive: false, lazy:false}),\n\n  'fakefile.txt': 'content here'\n});\n```\n\n### Creating files\n\nWhen `config` property values are a `string` or `Buffer`, a file is created with the provided content.  For example, the following configuration creates a single file with string content (in addition to the two default directories).\n```js\nmock({\n  'path/to/file.txt': 'file content here'\n});\n```\n\nTo create a file with additional properties (owner, permissions, atime, etc.), use the [`mock.file()`](#mockfileproperties) function described below.\n\n### <a id='mockfileproperties'>`mock.file(properties)`</a>\n\nCreate a factory for new files.  Supported properties:\n\n * **content** - `string|Buffer` File contents.\n * **mode** - `number` File mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last file access time.  Defaults to `new Date()`.  Updated when file contents are accessed.\n * **ctime** - `Date` The last file change time.  Defaults to `new Date()`.  Updated when file owner or permissions change.\n * **mtime** - `Date` The last file modification time.  Defaults to `new Date()`.  Updated when file contents change.\n * **birthtime** - `Date` The time of file creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a very old file named `foo`, you could do something like this:\n```js\nmock({\n  foo: mock.file({\n    content: 'file content here',\n    ctime: new Date(1),\n    mtime: new Date(1)\n  })\n});\n```\n\nNote that if you want to create a file with the default properties, you can provide a `string` or `Buffer` directly instead of calling `mock.file()`.\n\n### Creating directories\n\nWhen `config` property values are an `Object`, a directory is created.  The structure of the object is the same as the `config` object itself.  So an empty directory can be created with a simple object literal (`{}`).  The following configuration creates a directory containing two files (in addition to the two default directories):\n```js\n// note that this could also be written as\n// mock({'path/to/dir': { /** config */ }})\nmock({\n  path: {\n    to: {\n      dir: {\n        file1: 'text content',\n        file2: Buffer.from([1, 2, 3, 4])\n      }\n    }\n  }\n});\n```\n\nTo create a directory with additional properties (owner, permissions, atime, etc.), use the [`mock.directory()`](mockdirectoryproperties) function described below.\n\n### <a id='mockdirectoryproperties'>`mock.directory(properties)`</a>\n\nCreate a factory for new directories.  Supported properties:\n\n * **mode** - `number` Directory mode (permission and sticky bits).  Defaults to `0777`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last directory access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last directory change time.  Defaults to `new Date()`.  Updated when owner or permissions change.\n * **mtime** - `Date` The last directory modification time.  Defaults to `new Date()`.  Updated when an item is added, removed, or renamed.\n * **birthtime** - `Date` The time of directory creation.  Defaults to `new Date()`.\n * **items** - `Object` Directory contents.  Members will generate additional files, directories, or symlinks.\n\nTo create a mock filesystem with a directory with the relative path `some/dir` that has a mode of `0755` and two child files, you could do something like this:\n```js\nmock({\n  'some/dir': mock.directory({\n    mode: 0755,\n    items: {\n      file1: 'file one content',\n      file2: Buffer.from([8, 6, 7, 5, 3, 0, 9])\n    }\n  })\n});\n```\n\nNote that if you want to create a directory with the default properties, you can provide an `Object` directly instead of calling `mock.directory()`.\n\n### Creating symlinks\n\nUsing a `string` or a `Buffer` is a shortcut for creating files with default properties.  Using an `Object` is a shortcut for creating a directory with default properties.  There is no shortcut for creating symlinks.  To create a symlink, you need to call the [`mock.symlink()`](#mocksymlinkproperties) function described below.\n\n### <a id='mocksymlinkproperties'>`mock.symlink(properties)`</a>\n\nCreate a factory for new symlinks.  Supported properties:\n\n * **path** - `string` Path to the source (required).\n * **mode** - `number` Symlink mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last symlink access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last symlink change time.  Defaults to `new Date()`.\n * **mtime** - `Date` The last symlink modification time.  Defaults to `new Date()`.\n * **birthtime** - `Date` The time of symlink creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a file and a symlink, you could do something like this:\n```js\nmock({\n  'some/dir': {\n    'regular-file': 'file contents',\n    'a-symlink': mock.symlink({\n      path: 'regular-file'\n    })\n  }\n});\n```\n\n### Restoring the file system\n\n### <a id='mockrestore'>`mock.restore()`</a>\n\nRestore the `fs` binding to the real file system.  This undoes the effect of calling `mock()`.  Typically, you would set up a mock file system before running a test and restore the original after.  Using a test runner with `beforeEach` and `afterEach` hooks, this might look like the following:\n\n```js\nbeforeEach(function() {\n  mock({\n    'fake-file': 'file contents'\n  });\n});\nafterEach(mock.restore);\n```\n\n### Bypassing the mock file system\n\n#### <a id='mockbypass'>`mock.bypass(fn)`</a>\n\nExecute calls to the real filesystem with mock.bypass()\n\n```js\n// This file exists only on the real FS, not on the mocked FS\nconst realFilePath = '/path/to/real/file.txt';\nconst myData = mock.bypass(() => fs.readFileSync(realFilePath, 'utf-8'));\n```\n\nIf you pass an asynchronous function or a promise-returning function to `bypass()`, a promise will be returned.\n\n#### <a id='bypassasync'>Async Warning</a>\n\nAsynchronous calls are supported, however, they are not recommended as they could produce unintended consequences if \nanything else tries to access the mocked filesystem before they've completed.\n\n```js\nasync function getFileInfo(fileName) {\n  return await mock.bypass(async () => {\n    const stats = await fs.promises.stat(fileName);\n    const data = await fs.promises.readFile(fileName);\n    return {stats, data};\n  });\n}\n```\n\n## Install\n\nUsing `npm`:\n\n```\nnpm install mock-fs --save-dev\n```\n\n## Caveats\n\nWhen you require `mock-fs`, Node's own `fs` module is patched to allow the binding to the underlying file system to be swapped out.  If you require `mock-fs` *before* any other modules that modify `fs` (e.g. `graceful-fs`), the mock should behave as expected.\n\n**Note** `mock-fs` is not compatible with `graceful-fs@3.x` but works with `graceful-fs@4.x`.\n\nMock file access is controlled based on file mode where `process.getuid()` and `process.getgid()` are available (POSIX systems).  On other systems (e.g. Windows) the file mode has no effect.\n\nTested on Linux, OSX, and Windows using Node 12 through 16.  Check the tickets for a list of [known issues](https://github.com/tschaub/mock-fs/issues).\n\n### Using with Jest Snapshot Testing\n\n`.toMatchSnapshot` in [Jest](https://jestjs.io/docs/en/snapshot-testing) uses `fs` to load existing snapshots.\nIf `mockFs` is active, Jest isn't able to load existing snapshots. In such case it accepts all snapshots\nwithout diffing the old ones, which breaks the concept of snapshot testing.\n\nCalling `mock.restore()` in `afterEach` is too late and it's necessary to call it before snapshot matching:\n\n```js\nconst actual = testedFunction()\nmock.restore()\nexpect(actual).toMatchSnapshot()\n```\n\nNote: it's safe to call `mock.restore` multiple times, so it can still be called in `afterEach` and then manually\nin test cases which use snapshot testing.",
      "readmeFilename": "readme.md",
      "gitHead": "abd285a86e44a4c2f0e4fa26347bc0cae533a2c0",
      "_id": "mock-fs@5.1.1-dev.1636402047631",
      "_nodeVersion": "16.13.0",
      "_npmVersion": "8.1.0",
      "dist": {
        "integrity": "sha512-pFos+CJFZQXvts6bri2XkZHfSXj+tFYTV+xRtdro4WHDqwgS2VVEmXXvFq0uvFBV8gXcpGJumjowRo6qM5Lktg==",
        "shasum": "0f17a381e8e147f1a6681eae27504abb34125daa",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-5.1.1-dev.1636402047631.tgz",
        "fileCount": 15,
        "unpackedSize": 95871,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDzLAQ3LPQT+Ngs+/a25v7y2jbJLmC/rQMNKXpt/mRNQQIgFislMFuL1/gqfxSaj/FB9vNweHM9RVV2xs/HjC+Od1k="
          }
        ]
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_5.1.1-dev.1636402047631_1636402048756_0.5857082416810613"
      },
      "_hasShrinkwrap": false
    },
    "5.1.2": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "5.1.2",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test tasks",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub",
        "parserOptions": {
          "ecmaVersion": 2020
        },
        "env": {
          "es2020": true
        }
      },
      "devDependencies": {
        "chai": "^4.3.4",
        "eslint": "^7.26.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^8.4.0",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "gitHead": "ebfc4b7aa97bff408216bf5ac3f76e4a2abf46b8",
      "_id": "mock-fs@5.1.2",
      "_nodeVersion": "16.5.0",
      "_npmVersion": "7.19.1",
      "dist": {
        "integrity": "sha512-YkjQkdLulFrz0vD4BfNQdQRVmgycXTV7ykuHMlyv+C8WCHazpkiQRDthwa02kSyo8wKnY9wRptHfQLgmf0eR+A==",
        "shasum": "6fa486e06d00f8793a8d2228de980eff93ce6db7",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-5.1.2.tgz",
        "fileCount": 15,
        "unpackedSize": 95853,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh2zdzCRA9TVsSAnZWagAAstYP/iF19dqvaHTmVanlkgut\nxVA8Nk9sLceQMSa/4CRLeHdfsIDwb9lKcw/d394zx4ux2FblvxExHddZpxNi\nZCi6do2G4ug5+9G53Imgm27pnyPk8JJQL2sTPrPFkTvhic4Ta0xIcZMoRVOA\n3Z0pwOKE1I8jtS/iDN5NzhjrfrhdDiMXAS2g3oN/aXcxm2Mlmjg1lXo4paDg\nmmIaO0hTrTB/bOhm1KvTgjKATg7txRmC0N0cGy2stwLftDCDcS7VG0nLe8vn\nEsgv0DjSAQFrVJ0tX+k03O3aM5kTOAZy7GCX/oNzNregdVmzeWMK1EQd21Fw\nd5qoJpMIC1bOJ2+hCZxLdK1wvO3z0uSjuEK16V2++PHBFEEZAGs1N1PunZaM\nOUUPbHGpeQBp5xrWk6F3PpuBuG12UOsQjObNcEVLVp6G1HFTzgGxUN7pYW50\nb7cKkS+baidXcQsZ3BKmLrG6C0MBGIDZ+A2OeV2Nm0fGd3cBJLDS7CrUA838\npnleMAqrU5AZdzqKutYqs/BhJ1fD40oJWCdiz2EYRYfmBulKxkrmcraRmIKe\nbPVv8l4IsPe2LaivdgeclZRC08y2n8pZ8i0+E/2QaIMc+L7F3yzFfx2W/kau\n1mdN4/lv+lCU+BuxpyoVAGyHowrTqLT7MK8DqupQ+Y4cOXNvmePw9H7laGKN\ntXLJ\r\n=MG2u\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEFSTQD9U8gkCrlfTEaM4ZUI86TkU05VEJa9fn/9pwSuAiEAuA2UByqeNqk7lWZjMhCnaKfrrO/WdLkIZXnYqU2IS1A="
          }
        ]
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_5.1.2_1636402183453_0.8287424858278738"
      },
      "_hasShrinkwrap": false
    },
    "5.1.2-dev.1636402202771": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "5.1.2-dev.1636402202771",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test tasks",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub",
        "parserOptions": {
          "ecmaVersion": 2020
        },
        "env": {
          "es2020": true
        }
      },
      "devDependencies": {
        "chai": "^4.3.4",
        "eslint": "^7.26.0",
        "eslint-config-tschaub": "^13.1.0",
        "mocha": "^8.4.0",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "readme": "[![Build Status](https://github.com/tschaub/mock-fs/workflows/Test/badge.svg)](https://github.com/tschaub/mock-fs/actions?workflow=Test)\n\n# `mock-fs`\n\nThe `mock-fs` module allows Node's built-in [`fs` module](http://nodejs.org/api/fs.html) to be backed temporarily by an in-memory, mock file system.  This lets you run tests against a set of mock files and directories instead of lugging around a bunch of test fixtures.\n\n## Example\n\nThe code below makes it so the `fs` module is temporarily backed by a mock file system with a few files and directories.\n\n```js\nconst mock = require('mock-fs');\n\nmock({\n  'path/to/fake/dir': {\n    'some-file.txt': 'file content here',\n    'empty-dir': {/** empty directory */}\n  },\n  'path/to/some.png': Buffer.from([8, 6, 7, 5, 3, 0, 9]),\n  'some/other/path': {/** another empty directory */}\n});\n```\n\nWhen you are ready to restore the `fs` module (so that it is backed by your real file system), call [`mock.restore()`](#mockrestore). Note that calling this may be **mandatory** in some cases. See [istanbuljs/nyc#324](https://github.com/istanbuljs/nyc/issues/324#issuecomment-234018654)\n\n```js\n// after a test runs\nmock.restore();\n```\n\n## Upgrading to version 4\n\nInstead of overriding all methods of the built-in `fs` module, the library now overrides `process.binding('fs')`.  The purpose of this change is to avoid conflicts with other libraries that override `fs` methods (e.g. `graceful-fs`) and to make it possible to work with multiple Node releases without maintaining copied and slightly modified versions of Node's `fs` module.\n\nBreaking changes:\n\n * The `mock.fs()` function has been removed.  This returned an object with `fs`-like methods without overriding the built-in `fs` module.\n * The object created by `fs.Stats` is no longer an instance of `fs.Stats` (though it has all the same properties and methods).\n * Lazy `require()` do not use the real filesystem.\n * Tests are no longer run in Node < 4.\n\nSome of these breaking changes may be restored in a future release.\n\n## Docs\n\n### <a id='mockconfigoptions'>`mock(config, options)`</a>\n\nConfigure the `fs` module so it is backed by an in-memory file system.\n\nCalling `mock` sets up a mock file system with two directories by default: `process.cwd()` and `os.tmpdir()` (or `os.tmpDir()` for older Node).  When called with no arguments, just these two directories are created.  When called with a `config` object, additional files, directories, and symlinks are created.  To avoid creating a directory for `process.cwd()` and `os.tmpdir()`, see the [`options`](#options) below.\n\nProperty names of the `config` object are interpreted as relative paths to resources (relative from `process.cwd()`).  Property values of the `config` object are interpreted as content or configuration for the generated resources.\n\n*Note that paths should always use forward slashes (`/`) - even on Windows.*\n\n### <a id='options'>`options`</a>\n\nThe second (optional) argument may include the properties below.\n\n * `createCwd` - `boolean` Create a directory for `process.cwd()`.  This is `true` by default.\n * `createTmp` - `boolean` Create a directory for `os.tmpdir()`.  This is `true` by default.\n\n### Loading real files & directories\n\nYou can load real files and directories into the mock system using `mock.load()`\n\n#### Notes\n\n- All stat information is duplicated (dates, permissions, etc) \n- By default, all files are lazy-loaded, unless you specify the `{lazy: false}` option\n\n#### <a id='mappingoptions'>options</a>\n\n| Option    | Type    | Default | Description |\n| --------- | ------- | ------- | ------------\n| lazy      | boolean | true    | File content isn't loaded until explicitly read\n| recursive | boolean | true    | Load all files and directories recursively\n \n#### `mock.load(path, options)`\n\n```js\nmock({\n  // Lazy-load file\n  'my-file.txt': mock.load(path.resolve(__dirname, 'assets/special-file.txt')),\n  \n  // Pre-load js file\n  'ready.js': mock.load(path.resolve(__dirname, 'scripts/ready.js'), {lazy: false}),\n\n  // Recursively loads all node_modules\n  'node_modules': mock.load(path.resolve(__dirname, '../node_modules')),\n\n  // Creates a directory named /tmp with only the files in /tmp/special_tmp_files (no subdirectories), pre-loading all content\n  '/tmp': mock.load('/tmp/special_tmp_files', {recursive: false, lazy:false}),\n\n  'fakefile.txt': 'content here'\n});\n```\n\n### Creating files\n\nWhen `config` property values are a `string` or `Buffer`, a file is created with the provided content.  For example, the following configuration creates a single file with string content (in addition to the two default directories).\n```js\nmock({\n  'path/to/file.txt': 'file content here'\n});\n```\n\nTo create a file with additional properties (owner, permissions, atime, etc.), use the [`mock.file()`](#mockfileproperties) function described below.\n\n### <a id='mockfileproperties'>`mock.file(properties)`</a>\n\nCreate a factory for new files.  Supported properties:\n\n * **content** - `string|Buffer` File contents.\n * **mode** - `number` File mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last file access time.  Defaults to `new Date()`.  Updated when file contents are accessed.\n * **ctime** - `Date` The last file change time.  Defaults to `new Date()`.  Updated when file owner or permissions change.\n * **mtime** - `Date` The last file modification time.  Defaults to `new Date()`.  Updated when file contents change.\n * **birthtime** - `Date` The time of file creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a very old file named `foo`, you could do something like this:\n```js\nmock({\n  foo: mock.file({\n    content: 'file content here',\n    ctime: new Date(1),\n    mtime: new Date(1)\n  })\n});\n```\n\nNote that if you want to create a file with the default properties, you can provide a `string` or `Buffer` directly instead of calling `mock.file()`.\n\n### Creating directories\n\nWhen `config` property values are an `Object`, a directory is created.  The structure of the object is the same as the `config` object itself.  So an empty directory can be created with a simple object literal (`{}`).  The following configuration creates a directory containing two files (in addition to the two default directories):\n```js\n// note that this could also be written as\n// mock({'path/to/dir': { /** config */ }})\nmock({\n  path: {\n    to: {\n      dir: {\n        file1: 'text content',\n        file2: Buffer.from([1, 2, 3, 4])\n      }\n    }\n  }\n});\n```\n\nTo create a directory with additional properties (owner, permissions, atime, etc.), use the [`mock.directory()`](mockdirectoryproperties) function described below.\n\n### <a id='mockdirectoryproperties'>`mock.directory(properties)`</a>\n\nCreate a factory for new directories.  Supported properties:\n\n * **mode** - `number` Directory mode (permission and sticky bits).  Defaults to `0777`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last directory access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last directory change time.  Defaults to `new Date()`.  Updated when owner or permissions change.\n * **mtime** - `Date` The last directory modification time.  Defaults to `new Date()`.  Updated when an item is added, removed, or renamed.\n * **birthtime** - `Date` The time of directory creation.  Defaults to `new Date()`.\n * **items** - `Object` Directory contents.  Members will generate additional files, directories, or symlinks.\n\nTo create a mock filesystem with a directory with the relative path `some/dir` that has a mode of `0755` and two child files, you could do something like this:\n```js\nmock({\n  'some/dir': mock.directory({\n    mode: 0755,\n    items: {\n      file1: 'file one content',\n      file2: Buffer.from([8, 6, 7, 5, 3, 0, 9])\n    }\n  })\n});\n```\n\nNote that if you want to create a directory with the default properties, you can provide an `Object` directly instead of calling `mock.directory()`.\n\n### Creating symlinks\n\nUsing a `string` or a `Buffer` is a shortcut for creating files with default properties.  Using an `Object` is a shortcut for creating a directory with default properties.  There is no shortcut for creating symlinks.  To create a symlink, you need to call the [`mock.symlink()`](#mocksymlinkproperties) function described below.\n\n### <a id='mocksymlinkproperties'>`mock.symlink(properties)`</a>\n\nCreate a factory for new symlinks.  Supported properties:\n\n * **path** - `string` Path to the source (required).\n * **mode** - `number` Symlink mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last symlink access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last symlink change time.  Defaults to `new Date()`.\n * **mtime** - `Date` The last symlink modification time.  Defaults to `new Date()`.\n * **birthtime** - `Date` The time of symlink creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a file and a symlink, you could do something like this:\n```js\nmock({\n  'some/dir': {\n    'regular-file': 'file contents',\n    'a-symlink': mock.symlink({\n      path: 'regular-file'\n    })\n  }\n});\n```\n\n### Restoring the file system\n\n### <a id='mockrestore'>`mock.restore()`</a>\n\nRestore the `fs` binding to the real file system.  This undoes the effect of calling `mock()`.  Typically, you would set up a mock file system before running a test and restore the original after.  Using a test runner with `beforeEach` and `afterEach` hooks, this might look like the following:\n\n```js\nbeforeEach(function() {\n  mock({\n    'fake-file': 'file contents'\n  });\n});\nafterEach(mock.restore);\n```\n\n### Bypassing the mock file system\n\n#### <a id='mockbypass'>`mock.bypass(fn)`</a>\n\nExecute calls to the real filesystem with mock.bypass()\n\n```js\n// This file exists only on the real FS, not on the mocked FS\nconst realFilePath = '/path/to/real/file.txt';\nconst myData = mock.bypass(() => fs.readFileSync(realFilePath, 'utf-8'));\n```\n\nIf you pass an asynchronous function or a promise-returning function to `bypass()`, a promise will be returned.\n\n#### <a id='bypassasync'>Async Warning</a>\n\nAsynchronous calls are supported, however, they are not recommended as they could produce unintended consequences if \nanything else tries to access the mocked filesystem before they've completed.\n\n```js\nasync function getFileInfo(fileName) {\n  return await mock.bypass(async () => {\n    const stats = await fs.promises.stat(fileName);\n    const data = await fs.promises.readFile(fileName);\n    return {stats, data};\n  });\n}\n```\n\n## Install\n\nUsing `npm`:\n\n```\nnpm install mock-fs --save-dev\n```\n\n## Caveats\n\nWhen you require `mock-fs`, Node's own `fs` module is patched to allow the binding to the underlying file system to be swapped out.  If you require `mock-fs` *before* any other modules that modify `fs` (e.g. `graceful-fs`), the mock should behave as expected.\n\n**Note** `mock-fs` is not compatible with `graceful-fs@3.x` but works with `graceful-fs@4.x`.\n\nMock file access is controlled based on file mode where `process.getuid()` and `process.getgid()` are available (POSIX systems).  On other systems (e.g. Windows) the file mode has no effect.\n\nTested on Linux, OSX, and Windows using Node 12 through 16.  Check the tickets for a list of [known issues](https://github.com/tschaub/mock-fs/issues).\n\n### Using with Jest Snapshot Testing\n\n`.toMatchSnapshot` in [Jest](https://jestjs.io/docs/en/snapshot-testing) uses `fs` to load existing snapshots.\nIf `mockFs` is active, Jest isn't able to load existing snapshots. In such case it accepts all snapshots\nwithout diffing the old ones, which breaks the concept of snapshot testing.\n\nCalling `mock.restore()` in `afterEach` is too late and it's necessary to call it before snapshot matching:\n\n```js\nconst actual = testedFunction()\nmock.restore()\nexpect(actual).toMatchSnapshot()\n```\n\nNote: it's safe to call `mock.restore` multiple times, so it can still be called in `afterEach` and then manually\nin test cases which use snapshot testing.",
      "readmeFilename": "readme.md",
      "gitHead": "ebfc4b7aa97bff408216bf5ac3f76e4a2abf46b8",
      "_id": "mock-fs@5.1.2-dev.1636402202771",
      "_nodeVersion": "16.13.0",
      "_npmVersion": "8.1.0",
      "dist": {
        "integrity": "sha512-TsWwRT+3TYQxSBXmNaLJBV7es1TFeEyULgOP+GpQUkCyvKRy3Kc/attxryUnIP1Wlve1TViXEpAhKvhpCqTZjg==",
        "shasum": "07ee555b61158169d273bba86e408e32c0f1878d",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-5.1.2-dev.1636402202771.tgz",
        "fileCount": 15,
        "unpackedSize": 95871,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCXcLkvOATkygm5Idqe61GgdvVDT3UoEk7c25/D4tPq1wIgHJwfXynJW5CasZljiRVAscS+UnUnoQlsXxT2mpVQA1c="
          }
        ]
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_5.1.2-dev.1636402202771_1636402203873_0.40184849497915587"
      },
      "_hasShrinkwrap": false
    },
    "5.1.3": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "5.1.3",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test tasks",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub",
        "parserOptions": {
          "ecmaVersion": 2020
        },
        "env": {
          "es2020": true
        },
        "rules": {
          "prettier/prettier": [
            "error",
            {
              "endOfLine": "auto",
              "singleQuote": true,
              "bracketSpacing": false,
              "quoteProps": "preserve"
            }
          ]
        }
      },
      "devDependencies": {
        "chai": "^4.3.4",
        "eslint": "^8.21.0",
        "eslint-config-tschaub": "^14.1.2",
        "mocha": "^9.2.2",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "gitHead": "37324cce492d3846fb5a004425b692c5d92645e5",
      "_id": "mock-fs@5.1.3",
      "_nodeVersion": "18.4.0",
      "_npmVersion": "8.12.1",
      "dist": {
        "integrity": "sha512-6rAOGeJgXFYsHlRSsuwUsSIPHk3sA4JfCOLswTc0gSFIU6HTC2xaRXh14orYKYLAg5ygmnxaYsrRxC4xNUkxnw==",
        "shasum": "e5c0b4dd566dfaf322f7cd8bfe4625c9c6060941",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-5.1.3.tgz",
        "fileCount": 15,
        "unpackedSize": 98292,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIE91kMHoZEf8U0+AM8Fgdlpio9EQUj0eS5CUfFsuY2lgAiEA3I5ofXSLcvm5l6C4yxH1ctQJlEqVUOIidJx9uhD5q6o="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi6ZjUACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqMNQ//UtBW7uLm5JbI4A7W7wKZ1KqJ19hViLQC1zOX494Dd0C5Adr3\r\nSlN4EMVNEZ1bP56vrJChk2Qg6lAeReokPavtzHz8Yc1/vPpQ2OBUwR1UvAvb\r\ndNsIcagp8WJiYEcArK7Uly3UAkJT6aoj9jZFuszaKa9lv4oTM6eXTGA1JLD0\r\njwAP5Z/8OOEmMw/n7HGreyfSX3Qu6fnOvUGbFvgFOnkT+Wa8ELE5yIMucRBv\r\nnwu+rjxLD2ufHFL2rLSRUfPaxXJiR6Aa7DgM/Y71k2ILkTwcHnNCRTrKE7qM\r\neu/HSEyYyqT38/fg8zLm5SJbE1c2hhSWJQiKBtnzhcUg7wOm4Q2xsWk+qQ+H\r\nEE41RxglMil6kSfeBFyJZjt961dKVzZeWVg1kE7447mo6BsbXxbgkhB3F7Q5\r\nm54m6JSyz8LWxQrfJM/5ZX/J5dQYQSRftS7hlvNazi5tnmYdLnQQynjOKHQC\r\nIys+SW+pnaaYEBBSPAYtM7GcMZp2EBqepXQZybUkpxLRUuILgiJ/BscLSlnp\r\n0ZwzuzVsq+CIazQLfNXqwed5CJXaNEhkVq6QSlJoW1zZDKgQZBjdlmh0ZuUW\r\n8g5QYyQ/zpbAOQa/8HezmEGpgJkkquC18bnbZ6iw/CWJ/N+p+QXDvnvRf4AM\r\n69EPlT0+fdMRKj17iW+u6RTqBhY8UXp8UQQ=\r\n=l1Um\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_5.1.3_1659476179988_0.49960767658449123"
      },
      "_hasShrinkwrap": false
    },
    "5.1.4": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "5.1.4",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test tasks",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub",
        "parserOptions": {
          "ecmaVersion": 2020
        },
        "env": {
          "es2020": true
        },
        "rules": {
          "prettier/prettier": [
            "error",
            {
              "endOfLine": "auto",
              "singleQuote": true,
              "bracketSpacing": false,
              "quoteProps": "preserve"
            }
          ]
        }
      },
      "devDependencies": {
        "chai": "^4.3.4",
        "eslint": "^8.21.0",
        "eslint-config-tschaub": "^14.1.2",
        "mocha": "^9.2.2",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "gitHead": "39bdc3f0a743c71cad8a9257f997f29767259385",
      "_id": "mock-fs@5.1.4",
      "_nodeVersion": "18.4.0",
      "_npmVersion": "8.12.1",
      "dist": {
        "integrity": "sha512-sudhLjCjX37qWIcAlIv1OnAxB2wI4EmXByVuUjILh1rKGNGpGU8GNnzw+EAbrhdpBe0TL/KONbK1y3RXZk8SxQ==",
        "shasum": "d64dc37b2793613ca7148b510b1167b5b8afb6b8",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-5.1.4.tgz",
        "fileCount": 15,
        "unpackedSize": 98301,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQD3aaOCdoKq4S+QMT9ngsmxO4OU+n54wIUpySfBgq3jpAIgIh3YwJUVHEMVT+lLm7ZP3KVTXN5utSh3GupMln1+eaE="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi6zndACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrlNg//ZlUXZJ9djFVwM4wsdOhKU2kahch4R9Kgs/1rkwaYmlQxMxFF\r\nPrlqvq9oEPbdfyAcOaZ4Cd44ieKfL+TnqWeYLuN2Ehf4RV9plHOLIJS+co4R\r\nmNca0B3Z8+SevUB2hUD30KGTuqfzAWjxIdEBsJX8uOaVeguFBzFqrvaELLev\r\nx9TfHHkZPCfdlvJ+LQ/ziOzoA/I9e5X3QPuWrwIlRZXDxH07B92+9mV5cEIT\r\nKsJPhAOVSVyYMv2vt+QpsctVSJkQn+u5FdlqJP1r3y1OlVj2fJsnMpPo/tyT\r\n0KUSVdhq3t3n1ny1f+lrJcd8oWLXaRITrtqSQ8BLcXS5Tr+CsSQTtwSH+qCJ\r\nGaAkEuhKOHXwsHCnZCcFGaYJ9aaP1+GIAxoAJDxvGasVP5K/Jhvdpd8dH9qc\r\nob6s2Nm23CZKJYjxWsG4r5o1ec2TSpzvVwtBIWqhgZ053BCFpeyxRQfeMAPP\r\nBvNPLO7pYKiQsHcAYFJFtgqcKGe35dH+Id24zyFv8k4hEIgyo7IjPGQFqSgA\r\nKPcMbxqMXO5LHFHHWAQpV9COESx6OnqE6IMc7BHVWwcSqpET3ZHqWdPwkU6E\r\nmaRkuYcB4w+Ug9mvZJUDEnra4Vf0ufG2/vSuEgw4Ivpig0cKXIMHFova0a8w\r\nuCxtAAdBCN0+vrlLkHwtJWTWY8Jy5DSk+HM=\r\n=kDSJ\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_5.1.4_1659582940920_0.521148094529098"
      },
      "_hasShrinkwrap": false
    },
    "5.2.0": {
      "name": "mock-fs",
      "description": "A configurable mock file system.  You know, for testing.",
      "version": "5.2.0",
      "main": "lib/index.js",
      "homepage": "https://github.com/tschaub/mock-fs",
      "author": {
        "name": "Tim Schaub",
        "url": "http://tschaub.net/"
      },
      "keywords": [
        "mock",
        "fs",
        "test",
        "fixtures",
        "file system",
        "memory"
      ],
      "repository": {
        "type": "git",
        "url": "git://github.com/tschaub/mock-fs.git"
      },
      "bugs": {
        "url": "https://github.com/tschaub/mock-fs/issues"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint benchmarks lib test tasks",
        "pretest": "npm run lint",
        "test": "mocha --recursive test"
      },
      "eslintConfig": {
        "extends": "tschaub",
        "parserOptions": {
          "ecmaVersion": 2020
        },
        "env": {
          "es2020": true
        },
        "rules": {
          "prettier/prettier": [
            "error",
            {
              "endOfLine": "auto",
              "singleQuote": true,
              "bracketSpacing": false,
              "quoteProps": "preserve"
            }
          ]
        }
      },
      "devDependencies": {
        "chai": "^4.3.4",
        "eslint": "^8.21.0",
        "eslint-config-tschaub": "^14.1.2",
        "mocha": "^9.2.2",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "gitHead": "c53dbe7632548af5f154d5e8d1bcbf3dac9b5bba",
      "_id": "mock-fs@5.2.0",
      "_nodeVersion": "18.4.0",
      "_npmVersion": "8.18.0",
      "dist": {
        "integrity": "sha512-2dF2R6YMSZbpip1V1WHKGLNjr/k48uQClqMVb5H3MOvwc9qhYis3/IWbj02qIg/Y8MDXKFF4c5v0rxx2o6xTZw==",
        "shasum": "3502a9499c84c0a1218ee4bf92ae5bf2ea9b2b5e",
        "tarball": "https://registry.npmjs.org/mock-fs/-/mock-fs-5.2.0.tgz",
        "fileCount": 15,
        "unpackedSize": 100556,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFOAZvRqiaeMrmmsgx1PEgEeI1Blo4dD1M7l0cFlQ+p8AiA71jgdYvm7Yni4wvhf+1jWQiNjRMdrgBhVJZMIkNq1DA=="
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjXBmBACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmosqw//eAMVjdAB4toZJSKdxkNXcaXCj75fywoknkmkHSHTmKM3BEzF\r\nWsRUlYTKk8a46YPgvDS9Uy1Yx4oR3DxiOItTH5EDcyuHqlSt2RDVVS7RmTHV\r\nwv5bePsjNvu59DFqyuENcn8FhZUfHvHMXxNRJUnCHWEv/9zJdsnng419bYUo\r\njnhjUP1znFPc226a0D/HyO6yn1Fg+s3UfkO9BYWRAI4BbUX4aUgMC5H6ouUk\r\nhZkcIrjpNoG1gfjsKBIP/yxWI5vJHPn2XAhs7AnK53jXAXYYcc2R29axYzpy\r\nzr4VWpu/A/IwjXw0a0wPQ/JEvlNjkddKiM6GAZ1N3WBB8yK0/EEtWl9ewcxd\r\nyWRjyU0thgsGdaR/Gs9BZQOzORIexAqMxDYy+Goug6wG9ObOU8elQmce8huT\r\n4jlJdp7ELZgCOEHPx+N7jx0J6KcTMRIzmrXOnHkxd8vg9tc4xqkINce7RpWq\r\nV1YeAaR5URwfcMl2rYRbjmbsSv1D3/KkNQaRyoMjjH5ku0QNmoOpFCsnBrMu\r\n0bc7K1fZhNBlVDZpGh4q5pflGUAHKzOeg6WAWEAepX8dMEfEQh59ZsH0lqRw\r\nkPNOl2qabNKUwYs9WeHZ2j9EW/J5VWJbaiuzU7Zo4KuaJF7cS8jUB1SFsjFk\r\nIRonrKFZsz++P73IGv8zoWGXDeM65xLbngY=\r\n=6YO9\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "tschaub",
        "email": "tim.schaub@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "tschaub",
          "email": "tim.schaub@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/mock-fs_5.2.0_1666980225629_0.538783460029493"
      },
      "_hasShrinkwrap": false
    }
  },
  "readme": "[![Build Status](https://github.com/tschaub/mock-fs/workflows/Test/badge.svg)](https://github.com/tschaub/mock-fs/actions?workflow=Test)\n\n# `mock-fs`\n\nThe `mock-fs` module allows Node's built-in [`fs` module](http://nodejs.org/api/fs.html) to be backed temporarily by an in-memory, mock file system.  This lets you run tests against a set of mock files and directories instead of lugging around a bunch of test fixtures.\n\n## Example\n\nThe code below makes it so the `fs` module is temporarily backed by a mock file system with a few files and directories.\n\n```js\nconst mock = require('mock-fs');\n\nmock({\n  'path/to/fake/dir': {\n    'some-file.txt': 'file content here',\n    'empty-dir': {/** empty directory */}\n  },\n  'path/to/some.png': Buffer.from([8, 6, 7, 5, 3, 0, 9]),\n  'some/other/path': {/** another empty directory */}\n});\n```\n\nWhen you are ready to restore the `fs` module (so that it is backed by your real file system), call [`mock.restore()`](#mockrestore). Note that calling this may be **mandatory** in some cases. See [istanbuljs/nyc#324](https://github.com/istanbuljs/nyc/issues/324#issuecomment-234018654)\n\n```js\n// after a test runs\nmock.restore();\n```\n\n## Upgrading to version 4\n\nInstead of overriding all methods of the built-in `fs` module, the library now overrides `process.binding('fs')`.  The purpose of this change is to avoid conflicts with other libraries that override `fs` methods (e.g. `graceful-fs`) and to make it possible to work with multiple Node releases without maintaining copied and slightly modified versions of Node's `fs` module.\n\nBreaking changes:\n\n * The `mock.fs()` function has been removed.  This returned an object with `fs`-like methods without overriding the built-in `fs` module.\n * The object created by `fs.Stats` is no longer an instance of `fs.Stats` (though it has all the same properties and methods).\n * Lazy `require()` do not use the real filesystem.\n * Tests are no longer run in Node < 4.\n\nSome of these breaking changes may be restored in a future release.\n\n## Docs\n\n### <a id='mockconfigoptions'>`mock(config, options)`</a>\n\nConfigure the `fs` module so it is backed by an in-memory file system.\n\nCalling `mock` sets up a mock file system with two directories by default: `process.cwd()` and `os.tmpdir()` (or `os.tmpDir()` for older Node).  When called with no arguments, just these two directories are created.  When called with a `config` object, additional files, directories, and symlinks are created.  To avoid creating a directory for `process.cwd()` and `os.tmpdir()`, see the [`options`](#options) below.\n\nProperty names of the `config` object are interpreted as relative paths to resources (relative from `process.cwd()`).  Property values of the `config` object are interpreted as content or configuration for the generated resources.\n\n*Note that paths should always use forward slashes (`/`) - even on Windows.*\n\n### <a id='options'>`options`</a>\n\nThe second (optional) argument may include the properties below.\n\n * `createCwd` - `boolean` Create a directory for `process.cwd()`.  This is `true` by default.\n * `createTmp` - `boolean` Create a directory for `os.tmpdir()`.  This is `true` by default.\n\n### Loading real files & directories\n\nYou can load real files and directories into the mock system using `mock.load()`\n\n#### Notes\n\n- All stat information is duplicated (dates, permissions, etc) \n- By default, all files are lazy-loaded, unless you specify the `{lazy: false}` option\n\n#### <a id='mappingoptions'>options</a>\n\n| Option    | Type    | Default | Description |\n| --------- | ------- | ------- | ------------\n| lazy      | boolean | true    | File content isn't loaded until explicitly read\n| recursive | boolean | true    | Load all files and directories recursively\n \n#### `mock.load(path, options)`\n\n```js\nmock({\n  // Lazy-load file\n  'my-file.txt': mock.load(path.resolve(__dirname, 'assets/special-file.txt')),\n  \n  // Pre-load js file\n  'ready.js': mock.load(path.resolve(__dirname, 'scripts/ready.js'), {lazy: false}),\n\n  // Recursively loads all node_modules\n  'node_modules': mock.load(path.resolve(__dirname, '../node_modules')),\n\n  // Creates a directory named /tmp with only the files in /tmp/special_tmp_files (no subdirectories), pre-loading all content\n  '/tmp': mock.load('/tmp/special_tmp_files', {recursive: false, lazy:false}),\n\n  'fakefile.txt': 'content here'\n});\n```\n\n### Creating files\n\nWhen `config` property values are a `string` or `Buffer`, a file is created with the provided content.  For example, the following configuration creates a single file with string content (in addition to the two default directories).\n```js\nmock({\n  'path/to/file.txt': 'file content here'\n});\n```\n\nTo create a file with additional properties (owner, permissions, atime, etc.), use the [`mock.file()`](#mockfileproperties) function described below.\n\n### <a id='mockfileproperties'>`mock.file(properties)`</a>\n\nCreate a factory for new files.  Supported properties:\n\n * **content** - `string|Buffer` File contents.\n * **mode** - `number` File mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last file access time.  Defaults to `new Date()`.  Updated when file contents are accessed.\n * **ctime** - `Date` The last file change time.  Defaults to `new Date()`.  Updated when file owner or permissions change.\n * **mtime** - `Date` The last file modification time.  Defaults to `new Date()`.  Updated when file contents change.\n * **birthtime** - `Date` The time of file creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a very old file named `foo`, you could do something like this:\n```js\nmock({\n  foo: mock.file({\n    content: 'file content here',\n    ctime: new Date(1),\n    mtime: new Date(1)\n  })\n});\n```\n\nNote that if you want to create a file with the default properties, you can provide a `string` or `Buffer` directly instead of calling `mock.file()`.\n\n### Creating directories\n\nWhen `config` property values are an `Object`, a directory is created.  The structure of the object is the same as the `config` object itself.  So an empty directory can be created with a simple object literal (`{}`).  The following configuration creates a directory containing two files (in addition to the two default directories):\n```js\n// note that this could also be written as\n// mock({'path/to/dir': { /** config */ }})\nmock({\n  path: {\n    to: {\n      dir: {\n        file1: 'text content',\n        file2: Buffer.from([1, 2, 3, 4])\n      }\n    }\n  }\n});\n```\n\nTo create a directory with additional properties (owner, permissions, atime, etc.), use the [`mock.directory()`](mockdirectoryproperties) function described below.\n\n### <a id='mockdirectoryproperties'>`mock.directory(properties)`</a>\n\nCreate a factory for new directories.  Supported properties:\n\n * **mode** - `number` Directory mode (permission and sticky bits).  Defaults to `0777`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last directory access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last directory change time.  Defaults to `new Date()`.  Updated when owner or permissions change.\n * **mtime** - `Date` The last directory modification time.  Defaults to `new Date()`.  Updated when an item is added, removed, or renamed.\n * **birthtime** - `Date` The time of directory creation.  Defaults to `new Date()`.\n * **items** - `Object` Directory contents.  Members will generate additional files, directories, or symlinks.\n\nTo create a mock filesystem with a directory with the relative path `some/dir` that has a mode of `0755` and two child files, you could do something like this:\n```js\nmock({\n  'some/dir': mock.directory({\n    mode: 0755,\n    items: {\n      file1: 'file one content',\n      file2: Buffer.from([8, 6, 7, 5, 3, 0, 9])\n    }\n  })\n});\n```\n\nNote that if you want to create a directory with the default properties, you can provide an `Object` directly instead of calling `mock.directory()`.\n\n### Creating symlinks\n\nUsing a `string` or a `Buffer` is a shortcut for creating files with default properties.  Using an `Object` is a shortcut for creating a directory with default properties.  There is no shortcut for creating symlinks.  To create a symlink, you need to call the [`mock.symlink()`](#mocksymlinkproperties) function described below.\n\n### <a id='mocksymlinkproperties'>`mock.symlink(properties)`</a>\n\nCreate a factory for new symlinks.  Supported properties:\n\n * **path** - `string` Path to the source (required).\n * **mode** - `number` Symlink mode (permission and sticky bits).  Defaults to `0666`.\n * **uid** - `number` The user id.  Defaults to `process.getuid()`.\n * **gid** - `number` The group id.  Defaults to `process.getgid()`.\n * **atime** - `Date` The last symlink access time.  Defaults to `new Date()`.\n * **ctime** - `Date` The last symlink change time.  Defaults to `new Date()`.\n * **mtime** - `Date` The last symlink modification time.  Defaults to `new Date()`.\n * **birthtime** - `Date` The time of symlink creation.  Defaults to `new Date()`.\n\nTo create a mock filesystem with a file and a symlink, you could do something like this:\n```js\nmock({\n  'some/dir': {\n    'regular-file': 'file contents',\n    'a-symlink': mock.symlink({\n      path: 'regular-file'\n    })\n  }\n});\n```\n\n### Restoring the file system\n\n### <a id='mockrestore'>`mock.restore()`</a>\n\nRestore the `fs` binding to the real file system.  This undoes the effect of calling `mock()`.  Typically, you would set up a mock file system before running a test and restore the original after.  Using a test runner with `beforeEach` and `afterEach` hooks, this might look like the following:\n\n```js\nbeforeEach(function() {\n  mock({\n    'fake-file': 'file contents'\n  });\n});\nafterEach(mock.restore);\n```\n\n### Bypassing the mock file system\n\n#### <a id='mockbypass'>`mock.bypass(fn)`</a>\n\nExecute calls to the real filesystem with mock.bypass()\n\n```js\n// This file exists only on the real FS, not on the mocked FS\nconst realFilePath = '/path/to/real/file.txt';\nconst myData = mock.bypass(() => fs.readFileSync(realFilePath, 'utf-8'));\n```\n\nIf you pass an asynchronous function or a promise-returning function to `bypass()`, a promise will be returned.\n\n#### <a id='bypassasync'>Async Warning</a>\n\nAsynchronous calls are supported, however, they are not recommended as they could produce unintended consequences if \nanything else tries to access the mocked filesystem before they've completed.\n\n```js\nasync function getFileInfo(fileName) {\n  return await mock.bypass(async () => {\n    const stats = await fs.promises.stat(fileName);\n    const data = await fs.promises.readFile(fileName);\n    return {stats, data};\n  });\n}\n```\n\n## Install\n\nUsing `npm`:\n\n```\nnpm install mock-fs --save-dev\n```\n\n## Caveats\n\nWhen you require `mock-fs`, Node's own `fs` module is patched to allow the binding to the underlying file system to be swapped out.  If you require `mock-fs` *before* any other modules that modify `fs` (e.g. `graceful-fs`), the mock should behave as expected.\n\n**Note** `mock-fs` is not compatible with `graceful-fs@3.x` but works with `graceful-fs@4.x`.\n\nMock file access is controlled based on file mode where `process.getuid()` and `process.getgid()` are available (POSIX systems).  On other systems (e.g. Windows) the file mode has no effect.\n\nTested on Linux, OSX, and Windows using Node 12 through 16.  Check the tickets for a list of [known issues](https://github.com/tschaub/mock-fs/issues).\n\n### Using with Jest Snapshot Testing\n\n`.toMatchSnapshot` in [Jest](https://jestjs.io/docs/en/snapshot-testing) uses `fs` to load existing snapshots.\nIf `mockFs` is active, Jest isn't able to load existing snapshots. In such case it accepts all snapshots\nwithout diffing the old ones, which breaks the concept of snapshot testing.\n\nCalling `mock.restore()` in `afterEach` is too late and it's necessary to call it before snapshot matching:\n\n```js\nconst actual = testedFunction()\nmock.restore()\nexpect(actual).toMatchSnapshot()\n```\n\nNote: it's safe to call `mock.restore` multiple times, so it can still be called in `afterEach` and then manually\nin test cases which use snapshot testing.",
  "maintainers": [
    {
      "name": "tschaub",
      "email": "tim.schaub@gmail.com"
    }
  ],
  "time": {
    "modified": "2023-03-04T03:52:18.438Z",
    "created": "2013-11-16T17:40:20.597Z",
    "0.1.0": "2013-11-16T17:40:27.124Z",
    "0.2.0": "2013-11-17T20:41:47.982Z",
    "0.3.0": "2013-11-18T16:45:46.415Z",
    "0.4.0": "2013-11-24T04:22:32.387Z",
    "0.5.0": "2013-11-26T04:15:49.567Z",
    "0.6.0": "2013-11-27T05:54:01.822Z",
    "0.7.0": "2013-12-01T17:33:55.434Z",
    "0.8.0": "2013-12-01T18:55:46.611Z",
    "0.10.0": "2013-12-03T04:31:24.596Z",
    "0.10.1": "2013-12-03T23:37:38.686Z",
    "0.11.0": "2013-12-09T04:18:50.843Z",
    "0.12.0": "2013-12-10T05:56:47.555Z",
    "1.0.0": "2014-01-06T22:40:50.220Z",
    "1.1.0": "2014-01-07T00:24:42.398Z",
    "1.2.0": "2014-01-07T07:07:41.052Z",
    "1.3.0": "2014-01-07T17:17:49.149Z",
    "1.3.1": "2014-01-10T05:00:04.436Z",
    "2.0.0": "2014-01-11T22:18:41.476Z",
    "2.1.0": "2014-01-14T06:05:29.220Z",
    "2.1.1": "2014-01-14T06:12:25.064Z",
    "2.1.2": "2014-01-20T17:33:41.599Z",
    "2.2.0": "2014-02-04T07:29:59.011Z",
    "2.3.0": "2014-05-09T19:38:33.034Z",
    "2.3.1": "2014-05-16T21:13:28.921Z",
    "2.3.2": "2014-10-26T22:14:16.509Z",
    "2.4.0": "2015-02-09T00:32:20.229Z",
    "2.5.0": "2015-02-09T23:27:32.643Z",
    "2.6.0": "2015-04-27T06:32:40.885Z",
    "2.7.0": "2015-05-07T21:16:00.721Z",
    "2.7.1": "2015-06-11T16:08:04.701Z",
    "3.0.0": "2015-06-25T21:00:41.529Z",
    "3.1.0": "2015-08-13T14:07:33.939Z",
    "3.2.0": "2015-09-11T20:51:41.965Z",
    "3.3.0": "2015-10-04T16:26:59.350Z",
    "3.4.0": "2015-10-17T20:58:06.411Z",
    "3.5.0": "2015-11-29T02:27:52.475Z",
    "3.6.0": "2015-12-20T16:39:57.326Z",
    "3.7.0": "2016-01-31T21:05:40.544Z",
    "3.8.0": "2016-03-07T21:34:57.584Z",
    "3.9.0": "2016-04-29T15:50:21.603Z",
    "3.10.0": "2016-07-08T01:32:42.565Z",
    "3.11.0": "2016-07-09T13:14:24.488Z",
    "3.12.0": "2016-10-28T03:07:28.615Z",
    "3.12.1": "2016-11-01T02:27:04.388Z",
    "4.0.0-beta.1": "2016-12-08T17:29:22.359Z",
    "4.0.0": "2017-02-05T18:29:30.500Z",
    "4.1.0": "2017-02-25T20:27:29.163Z",
    "4.2.0": "2017-03-13T19:50:06.046Z",
    "4.3.0": "2017-04-30T15:37:15.502Z",
    "4.4.0": "2017-06-11T19:17:34.791Z",
    "4.4.1": "2017-06-11T19:18:49.203Z",
    "4.4.2": "2017-10-13T16:45:44.441Z",
    "4.5.0": "2018-05-07T18:57:01.043Z",
    "4.6.0": "2018-08-06T05:23:45.984Z",
    "4.7.0": "2018-09-11T18:55:41.957Z",
    "4.8.0": "2019-02-04T16:37:17.816Z",
    "4.9.0": "2019-04-22T14:58:04.037Z",
    "4.10.0": "2019-05-20T16:39:17.126Z",
    "4.10.1": "2019-06-05T03:08:26.793Z",
    "4.10.2": "2019-10-18T19:25:09.670Z",
    "4.10.3": "2019-11-03T17:58:40.004Z",
    "4.10.4": "2019-11-26T05:27:31.129Z",
    "4.11.0": "2020-02-24T21:20:21.502Z",
    "4.12.0": "2020-04-24T16:58:32.837Z",
    "4.13.0": "2020-08-20T23:27:24.471Z",
    "4.14.0": "2021-04-22T20:51:12.299Z",
    "5.0.0-beta.1": "2021-05-10T15:46:22.751Z",
    "4.14.0-dev.1620839965863": "2021-05-12T17:19:27.194Z",
    "5.0.0": "2021-05-23T17:59:56.031Z",
    "5.0.0-dev.1621792812199": "2021-05-23T18:00:13.340Z",
    "5.0.0-dev.1631910876839": "2021-09-17T20:34:38.127Z",
    "5.0.0-dev.1631911156056": "2021-09-17T20:39:17.214Z",
    "5.1.0": "2021-09-17T20:42:19.984Z",
    "5.1.0-dev.1631911363563": "2021-09-17T20:42:44.998Z",
    "5.1.0-dev.1632400547829": "2021-09-23T12:35:48.980Z",
    "5.1.1": "2021-09-23T12:38:20.771Z",
    "5.1.1-dev.1632400720601": "2021-09-23T12:38:41.766Z",
    "5.1.1-dev.1636402047631": "2021-11-08T20:07:28.960Z",
    "5.1.2": "2021-11-08T20:09:43.623Z",
    "5.1.2-dev.1636402202771": "2021-11-08T20:10:04.047Z",
    "5.1.3": "2022-08-02T21:36:20.199Z",
    "5.1.4": "2022-08-04T03:15:41.154Z",
    "5.2.0": "2022-10-28T18:03:45.865Z"
  },
  "author": {
    "name": "Tim Schaub",
    "url": "http://tschaub.net/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tschaub/mock-fs.git"
  },
  "readmeFilename": "readme.md",
  "users": {
    "pid": true,
    "2pi": true,
    "benjanecke": true,
    "balderdashy": true,
    "voxpelli": true,
    "fill": true,
    "floby": true,
    "vlkosinov": true,
    "grantcarthew": true,
    "maxrimue": true,
    "rom1504": true,
    "alfredwesterveld": true,
    "ridermansb": true,
    "kontrax": true,
    "rickyrattlesnake": true,
    "sqrtthree": true,
    "maoizm": true,
    "floppee": true,
    "gurunate": true,
    "quafoo": true,
    "alshamiri2": true,
    "chinawolf_wyp": true,
    "fabioper": true,
    "meeh": true,
    "hualei": true,
    "flumpus-dev": true
  },
  "homepage": "https://github.com/tschaub/mock-fs",
  "keywords": [
    "mock",
    "fs",
    "test",
    "fixtures",
    "file system",
    "memory"
  ],
  "bugs": {
    "url": "https://github.com/tschaub/mock-fs/issues"
  },
  "license": "MIT"
}