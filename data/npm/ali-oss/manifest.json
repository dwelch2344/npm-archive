{
  "_id": "ali-oss",
  "_rev": "172-c122b92fae060ea37125427da56168db",
  "name": "ali-oss",
  "description": "aliyun oss(object storage service) node client",
  "dist-tags": {
    "latest": "6.20.0",
    "latest-4": "4.16.0",
    "latest-5": "5.3.2",
    "beta": "6.17.0-beta.1",
    "test": "7.0.0-test.1",
    "audit": "6.19.0-audit.1"
  },
  "versions": {
    "0.0.0": {
      "name": "ali-oss",
      "version": "0.0.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "index.js",
      "scripts": {
        "test": "make test"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/node-modules/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/node-modules/ali-oss/issues"
      },
      "homepage": "https://github.com/node-modules/ali-oss",
      "_id": "ali-oss@0.0.0",
      "dist": {
        "shasum": "390bd4ecba9a6654bfe135b91dc77b64cd34b578",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-0.0.0.tgz",
        "integrity": "sha512-4qT4QrfSlzQ+FVLL8r986QNF/2bHZsrAu5FzzGwrxANxyv1jgofj/F/AwQEQYeR0H+o6W5tThHthM0SYajs/vA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGlNS2lKdduTJX1EKtvABmGBM1lbLfC2FYvxWDx2mMQ2AiEA0iJeMwE2iOyZSt6VGj5/leDTav529ZYtdzGl7zMNqyo="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.4.3",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        }
      ],
      "directories": {}
    },
    "0.0.1": {
      "name": "ali-oss",
      "version": "0.0.1",
      "description": "aliyun oss(open storage service) node client",
      "main": "index.js",
      "scripts": {
        "test": "make test",
        "prepublish": "make clean build"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/node-modules/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/node-modules/ali-oss/issues"
      },
      "homepage": "https://github.com/node-modules/ali-oss",
      "devDependencies": {
        "ali.regenerator": "*",
        "autod": "^0.1.2",
        "co": "^3.0.5",
        "co-mocha": "*",
        "mocha": "*",
        "should": "*"
      },
      "dependencies": {
        "co": "3.0.5",
        "co-read": "0.0.2",
        "co-urllib": "0.2.0",
        "copy-to": "0.0.3",
        "debug": "0.8.0",
        "generator-supported": "0.0.1",
        "is-type-of": "0.2.0",
        "mime": "1.2.11",
        "ms": "0.6.2",
        "xml2js": "0.4.2"
      },
      "_id": "ali-oss@0.0.1",
      "dist": {
        "shasum": "6b6dcade0c9937e763765bfc445dfced274d576e",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-0.0.1.tgz",
        "integrity": "sha512-U6083bEvC/0Gb61OpfGxlN1Lp+NmslUfwyshQhbM16k/Q8J/aZGrCRMFLri3EXOVgq1QKZMEpUHEoiaFsjLeEg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIARc0ySWnm2FIW48/r3bFNC5UOwAj4a/urNsSXfzEOy4AiEAhgo8dbS6CQPhUqJRJs8yXtHyalwTQtTcC2HyZ5ugP0E="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.4.3",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        }
      ],
      "directories": {}
    },
    "0.0.2": {
      "name": "ali-oss",
      "version": "0.0.2",
      "description": "aliyun oss(open storage service) node client",
      "main": "index.js",
      "scripts": {
        "test": "make test",
        "prepublish": "make clean build"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/node-modules/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/node-modules/ali-oss/issues"
      },
      "homepage": "https://github.com/node-modules/ali-oss",
      "devDependencies": {
        "ali.regenerator": "*",
        "autod": "^0.1.2",
        "co": "^3.0.5",
        "co-mocha": "*",
        "mocha": "*",
        "should": "*",
        "istanbul-harmony": "*"
      },
      "dependencies": {
        "co": "3.0.5",
        "co-read": "0.0.2",
        "co-urllib": "0.2.0",
        "copy-to": "0.0.3",
        "debug": "0.8.0",
        "generator-supported": "0.0.1",
        "is-type-of": "0.2.0",
        "mime": "1.2.11",
        "ms": "0.6.2",
        "xml2js": "0.4.2"
      },
      "_id": "ali-oss@0.0.2",
      "dist": {
        "shasum": "63bc0e1201498ead608816b0d865fe48d4a72d46",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-0.0.2.tgz",
        "integrity": "sha512-06XXvYFH8YDzlyloeDxm69T7omaDKD6QMTHUuEOnrkjal2APDJlTQ0BefHIz9ePFsipP4adPxb6HKoeJetYKzQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCZzYC1HupOV1uu6JiuTMFMSoJqHgj8Z/lZg9Tm0RFzAgIgRYc5COzcJxHVJIoEzyVnHLRyRl5QuBqMt8O9xARKu1E="
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.4.3",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        }
      ],
      "directories": {}
    },
    "0.0.3": {
      "name": "ali-oss",
      "version": "0.0.3",
      "description": "aliyun oss(open storage service) node client",
      "main": "index.js",
      "scripts": {
        "test": "make test",
        "prepublish": "make clean build"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/node-modules/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/node-modules/ali-oss/issues"
      },
      "homepage": "https://github.com/node-modules/ali-oss",
      "devDependencies": {
        "ali.regenerator": "*",
        "autod": "^0.1.2",
        "co": "^3.0.5",
        "co-mocha": "*",
        "mocha": "*",
        "should": "*",
        "istanbul-harmony": "*"
      },
      "dependencies": {
        "co": "3.0.5",
        "co-read": "0.0.2",
        "co-urllib": "0.2.1",
        "copy-to": "0.0.3",
        "debug": "0.8.0",
        "generator-supported": "0.0.1",
        "is-type-of": "0.2.0",
        "mime": "1.2.11",
        "ms": "0.6.2",
        "xml2js": "0.4.2"
      },
      "_id": "ali-oss@0.0.3",
      "dist": {
        "shasum": "43e363efdaf59df85a76a8ecc427740681a1f454",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-0.0.3.tgz",
        "integrity": "sha512-eLs5KxSwxUSIt9ZE9aTYKjDE4DY/R08smBhR7ucLvKPYhHMUMx/SZdKirfS3tyPr/2FdfiB6U+3/L6S6sWF2fQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCnK2mmQVxrl8lb0NIQu7OJQp+uZLiZdNuPWR/MkAbm9QIhAP2DSGNEL/GuhuWzGcDD36/YoHLQ4MkEJJq0xOUn6TXa"
          }
        ]
      },
      "_from": ".",
      "_npmVersion": "1.4.3",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        }
      ],
      "directories": {}
    },
    "1.0.0": {
      "name": "ali-oss",
      "version": "1.0.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "index.js",
      "scripts": {
        "test": "make test",
        "prepublish": "make clean build"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/alibaba/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/alibaba/ali-oss/issues"
      },
      "homepage": "https://github.com/alibaba/ali-oss",
      "devDependencies": {
        "ali.regenerator": "*",
        "autod": "1",
        "co": "^3.0.5",
        "co-mocha": "*",
        "istanbul-harmony": "*",
        "mocha": "*",
        "should": "*"
      },
      "dependencies": {
        "co": "~3.1.0",
        "co-read": "~0.1.1",
        "copy-to": "~2.0.1",
        "debug": "~2.1.0",
        "generator-supported": "~0.0.1",
        "is-type-of": "~0.3.1",
        "mime": "~1.2.11",
        "ms": "~0.6.2",
        "urllib": "~2.0.1",
        "xml2js": "~0.4.4"
      },
      "gitHead": "b883fc74e28384dedc1e8c06cb525908818bb7f5",
      "_id": "ali-oss@1.0.0",
      "_shasum": "6a4222a552dcb906a8f12782dfe842b1fe9e3d4c",
      "_from": ".",
      "_npmVersion": "2.0.0-beta.3",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        }
      ],
      "dist": {
        "shasum": "6a4222a552dcb906a8f12782dfe842b1fe9e3d4c",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-1.0.0.tgz",
        "integrity": "sha512-rRyGycC8nPMChqiWzxaz9u0DaddoA4CA9TUfYNat6v2iDuX+QE1nkqmS39HrjE3Wl3HFwSBe0+CSr8AZNj9PpA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCGy2b75NMUc7bb38wP3OpphcRi3TAM1XdD6PwetR88jAIhAOJmlp5M92l6FA7RxJAkA3QJgftB0RGn7Rkp2HWoK4oS"
          }
        ]
      },
      "directories": {}
    },
    "1.1.0": {
      "name": "ali-oss",
      "version": "1.1.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "index.js",
      "scripts": {
        "test": "make test",
        "prepublish": "make clean build"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/alibaba/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/alibaba/ali-oss/issues"
      },
      "homepage": "https://github.com/alibaba/ali-oss",
      "devDependencies": {
        "co": "3",
        "ali.regenerator": "*",
        "autod": "1",
        "co-mocha": "*",
        "istanbul-harmony": "*",
        "mocha": "*",
        "should": "*"
      },
      "dependencies": {
        "co-read": "~0.1.1",
        "copy-to": "~2.0.1",
        "debug": "~2.1.1",
        "generator-supported": "~0.0.1",
        "is-type-of": "~0.3.1",
        "mime": "~1.2.11",
        "ms": "~0.7.0",
        "urllib": "~2.2.2",
        "utility": "~1.2.1",
        "xml2js": "~0.4.4"
      },
      "gitHead": "001359cb16ecd8fd9629e8d606ac9a164010c993",
      "_id": "ali-oss@1.1.0",
      "_shasum": "97a5021e4ef62e777cdc933bba4415d516a43c4a",
      "_from": ".",
      "_npmVersion": "2.1.12",
      "_nodeVersion": "0.11.14",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "97a5021e4ef62e777cdc933bba4415d516a43c4a",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-1.1.0.tgz",
        "integrity": "sha512-WGOhu2yLYLOJCNJGNPEURYq8T+GrGFDv6gmPMR5KwqCGrObciRtFmTELfvaAyj5ARvZCGtBtA9gnFPMrASY0PQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFp7oqD+SWMUFnklxR7AV83GdLBhw43XrjGEjW4IzotlAiEAwpPNBMRLpPJIAjj98ZjcU5KPSnscQ9Mnx9KMHr+1l8s="
          }
        ]
      },
      "directories": {}
    },
    "2.0.0": {
      "name": "ali-oss",
      "version": "2.0.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "index.js",
      "files": [
        "index.js",
        "lib/"
      ],
      "scripts": {
        "test": "mocha --harmony --check-leaks -R spec -t 30000 -r co-mocha test/*.test.js",
        "test-cov": "node --harmony node_modules/.bin/istanbul cover node_modules/.bin/_mocha -- --check-leaks -t 30000 -r co-mocha test/*.test.js",
        "test-travis": "node --harmony node_modules/.bin/istanbul cover node_modules/.bin/_mocha --report lcovonly -- --check-leaks -t 30000 -r co-mocha test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~'",
        "cnpm": "npm install --registry=https://registry.npm.taobao.org",
        "contributors": "contributors -f plain -o AUTHORS"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/ali-sdk/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/ali-sdk/ali-oss/issues"
      },
      "homepage": "https://github.com/ali-sdk/ali-oss",
      "devDependencies": {
        "autod": "*",
        "co": "*",
        "co-fs": "~1.2.0",
        "co-mocha": "*",
        "istanbul-harmony": "*",
        "mocha": "*",
        "should": "*"
      },
      "dependencies": {
        "agentkeepalive": "~1.2.0",
        "copy-to": "~2.0.1",
        "debug": "~2.1.1",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~0.3.1",
        "merge-descriptors": "~0.0.2",
        "mime": "~1.3.4",
        "urllib": "~2.3.0",
        "utility": "~1.3.0",
        "xml2js": "~0.4.5"
      },
      "gitHead": "07c879b43f7fdd815e55c79ccb2c27a791118e0a",
      "_id": "ali-oss@2.0.0",
      "_shasum": "9db2aa349693e17b3b4d46b9ae58c01d398166d0",
      "_from": ".",
      "_npmVersion": "2.1.12",
      "_nodeVersion": "0.11.14",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "9db2aa349693e17b3b4d46b9ae58c01d398166d0",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-2.0.0.tgz",
        "integrity": "sha512-qkrKhumZ3KxLZiYoBft6lvNJgkXja5Hu19KzImmJ9lcWhnGc3HjKyilLG/XTp9ZyNdBPw4+FX3Qe+TDp18caAA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCMxsepXJAIFXC4ZRLQc9x3FgfMXEst9OooIH6PywsQGgIhANCdcZW+TwS6N3TQsJ4S5yoXy/g5xY09iFGixys3aSZQ"
          }
        ]
      },
      "directories": {}
    },
    "2.1.0": {
      "name": "ali-oss",
      "version": "2.1.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "index.js",
      "files": [
        "index.js",
        "lib/"
      ],
      "scripts": {
        "test": "mocha --harmony --check-leaks -R spec -t 30000 -r co-mocha test/*.test.js",
        "test-cov": "node --harmony node_modules/.bin/istanbul cover node_modules/.bin/_mocha -- --check-leaks -t 30000 -r co-mocha test/*.test.js",
        "test-travis": "node --harmony node_modules/.bin/istanbul cover node_modules/.bin/_mocha --report lcovonly -- --check-leaks -t 30000 -r co-mocha test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~'",
        "cnpm": "npm install --registry=https://registry.npm.taobao.org",
        "contributors": "contributors -f plain -o AUTHORS"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/ali-sdk/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/ali-sdk/ali-oss/issues"
      },
      "homepage": "https://github.com/ali-sdk/ali-oss",
      "devDependencies": {
        "autod": "*",
        "co": "*",
        "co-fs": "~1.2.0",
        "co-mocha": "*",
        "istanbul-harmony": "*",
        "mocha": "*",
        "should": "*"
      },
      "dependencies": {
        "agentkeepalive": "~1.2.0",
        "copy-to": "~2.0.1",
        "debug": "~2.1.1",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~0.3.1",
        "merge-descriptors": "~0.0.2",
        "mime": "~1.3.4",
        "urllib": "~2.3.0",
        "utility": "~1.3.0",
        "xml2js": "~0.4.5"
      },
      "gitHead": "faf9987d7f5d5632a38c554e7fdc1d7de7268edc",
      "_id": "ali-oss@2.1.0",
      "_shasum": "4ee593360ae545f849326ca1b3e01ce1a4377a67",
      "_from": ".",
      "_npmVersion": "2.7.1",
      "_nodeVersion": "1.6.2",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "4ee593360ae545f849326ca1b3e01ce1a4377a67",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-2.1.0.tgz",
        "integrity": "sha512-Xd54RERygFKxZyvNSBB7+ZQn9cx+wNELA/F+PmYRMZ9tFqq8XFe03Xuqh1+rXF1cXiPIz2xQBJNFC87NQPU5Tg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGaWoVMThsuTd4DJqH5qJkCf23CoTTBu3oDsP8ZuueL+AiEAi6hegVs1bHugK8wOiu+YKkTQbCB2zTX8m9lTyATacBk="
          }
        ]
      },
      "directories": {}
    },
    "2.2.0": {
      "name": "ali-oss",
      "version": "2.2.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "index.js",
      "files": [
        "index.js",
        "lib/"
      ],
      "scripts": {
        "test": "mocha --harmony --check-leaks -R spec -t 30000 -r co-mocha test/*.test.js",
        "test-cov": "node --harmony node_modules/.bin/istanbul cover node_modules/.bin/_mocha -- --check-leaks -t 30000 -r co-mocha test/*.test.js",
        "test-travis": "node --harmony node_modules/.bin/istanbul cover node_modules/.bin/_mocha --report lcovonly -- --check-leaks -t 30000 -r co-mocha test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~'",
        "cnpm": "npm install --registry=https://registry.npm.taobao.org",
        "contributors": "contributors -f plain -o AUTHORS"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/ali-sdk/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/ali-sdk/ali-oss/issues"
      },
      "homepage": "https://github.com/ali-sdk/ali-oss",
      "devDependencies": {
        "autod": "*",
        "co": "*",
        "co-fs": "~1.2.0",
        "co-mocha": "*",
        "istanbul-harmony": "*",
        "mocha": "*",
        "should": "*"
      },
      "dependencies": {
        "agentkeepalive": "~1.2.0",
        "copy-to": "~2.0.1",
        "debug": "~2.1.1",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~0.3.1",
        "merge-descriptors": "~0.0.2",
        "mime": "~1.3.4",
        "urllib": "~2.3.0",
        "utility": "~1.3.0",
        "xml2js": "~0.4.5"
      },
      "gitHead": "d49af9eb8fa48caedb4a434df5ca8f016f545eda",
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "_id": "ali-oss@2.2.0",
      "_shasum": "6681c1f098163f07076b07abb458958670c12cdd",
      "_from": ".",
      "_npmVersion": "2.7.4",
      "_nodeVersion": "1.6.3",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "6681c1f098163f07076b07abb458958670c12cdd",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-2.2.0.tgz",
        "integrity": "sha512-I96ddFCjszYWVINScSSTv0Ipmqz1ciM1zcBN1tT2paRX+qoXGE0nmv8JtrHAtfQM+57/7xipYo7+in4653jWfQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDKfkQiP4lL0AgrD2pXdHplTAyBtqVgkXM8OofkRAmMsgIhAIT5LvS2g8yRmP+63RvP9AVcW/iTjyeNPaXePJoH9cxp"
          }
        ]
      },
      "directories": {}
    },
    "2.4.0": {
      "name": "ali-oss",
      "version": "2.4.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "index.js",
      "files": [
        "index.js",
        "lib/"
      ],
      "scripts": {
        "test": "mocha --harmony --check-leaks -R spec -t 30000 -r co-mocha test/*.test.js",
        "test-cov": "node --harmony node_modules/.bin/istanbul cover node_modules/.bin/_mocha -- --check-leaks -t 30000 -r co-mocha test/*.test.js",
        "test-travis": "node --harmony node_modules/.bin/istanbul cover node_modules/.bin/_mocha --report lcovonly -- --check-leaks -t 30000 -r co-mocha test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~'",
        "cnpm": "npm install --registry=https://registry.npm.taobao.org",
        "contributors": "contributors -f plain -o AUTHORS"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/ali-sdk/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/ali-sdk/ali-oss/issues"
      },
      "homepage": "https://github.com/ali-sdk/ali-oss",
      "devDependencies": {
        "autod": "*",
        "co": "*",
        "co-fs": "1",
        "co-mocha": "*",
        "istanbul-harmony": "*",
        "mocha": "*",
        "should": "*"
      },
      "dependencies": {
        "agentkeepalive": "~2.0.2",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~0.3.1",
        "merge-descriptors": "~1.0.0",
        "mime": "~1.3.4",
        "urllib": "~2.3.9",
        "utility": "~1.4.0",
        "xml2js": "~0.4.9"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "1998560ca5a4bdf3c00ff4e5b3bb7aad878746dd",
      "_id": "ali-oss@2.4.0",
      "_shasum": "340aadfb28af3201ce1d0fd673cc1d942b2c0d72",
      "_from": ".",
      "_npmVersion": "2.12.0",
      "_nodeVersion": "2.4.0",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "340aadfb28af3201ce1d0fd673cc1d942b2c0d72",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-2.4.0.tgz",
        "integrity": "sha512-lykCSAVWgzbesOMKeEkoUG1Fb8v7nxZrbU5l6U+gNUVFQnNfco8b/Pi/TztDboUp1BzRhiKRgEvmL+hb8tA4Ow==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHmADWiW+rup1Le7A82eoH1HmjsG5XoNMzWkcv5vgSYpAiAJu0tvB03Kz0xW4OYWnJRd2kKBgD3Td78OJGE6O6mLbg=="
          }
        ]
      },
      "directories": {}
    },
    "2.5.0": {
      "name": "ali-oss",
      "version": "2.5.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "index.js",
      "files": [
        "index.js",
        "lib/"
      ],
      "scripts": {
        "test": "mocha --harmony --check-leaks -R spec -t 30000 -r co-mocha test/*.test.js",
        "test-cov": "node --harmony node_modules/.bin/istanbul cover node_modules/.bin/_mocha -- --check-leaks -t 30000 -r co-mocha test/*.test.js",
        "test-travis": "node --harmony node_modules/.bin/istanbul cover node_modules/.bin/_mocha --report lcovonly -- --check-leaks -t 30000 -r co-mocha test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~'",
        "cnpm": "npm install --registry=https://registry.npm.taobao.org",
        "contributors": "contributors -f plain -o AUTHORS"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/ali-sdk/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/ali-sdk/ali-oss/issues"
      },
      "homepage": "https://github.com/ali-sdk/ali-oss",
      "devDependencies": {
        "autod": "*",
        "co": "*",
        "co-fs": "1",
        "co-mocha": "*",
        "istanbul-harmony": "*",
        "mocha": "*",
        "should": "*"
      },
      "dependencies": {
        "agentkeepalive": "~2.0.2",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~0.3.1",
        "merge-descriptors": "~1.0.0",
        "mime": "~1.3.4",
        "urllib": "~2.3.9",
        "utility": "~1.4.0",
        "xml2js": "~0.4.9"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "acd54b013488cdec3237549e5b6ba90b0ee02f8f",
      "_id": "ali-oss@2.5.0",
      "_shasum": "87293257d08d77d1f8c3a9b2c3f3416e8dc11d24",
      "_from": ".",
      "_npmVersion": "2.13.2",
      "_nodeVersion": "2.5.2",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "87293257d08d77d1f8c3a9b2c3f3416e8dc11d24",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-2.5.0.tgz",
        "integrity": "sha512-uHixx+dFzB8hHavcNmZcltEXLFEyqQCsrzRTJoYTYd7kh9wzQhiFDLA+SLYlCDaqcarAxyHPui+iSGteoL2C1A==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBYMtHcwvPIzvc3festFn3r70I1qAMQ/zKy4i0xDQ5gvAiEAiXG7ZSlDDIutiYceUHcGUWd28u31g/TgBXFb4AclMxY="
          }
        ]
      },
      "directories": {}
    },
    "2.5.1": {
      "name": "ali-oss",
      "version": "2.5.1",
      "description": "aliyun oss(open storage service) node client",
      "main": "index.js",
      "files": [
        "index.js",
        "lib/"
      ],
      "scripts": {
        "test": "mocha --harmony --check-leaks -R spec -t 30000 -r co-mocha test/*.test.js",
        "test-cov": "node --harmony node_modules/.bin/istanbul cover node_modules/.bin/_mocha -- --check-leaks -t 30000 -r co-mocha test/*.test.js",
        "test-travis": "node --harmony node_modules/.bin/istanbul cover node_modules/.bin/_mocha --report lcovonly -- --check-leaks -t 30000 -r co-mocha test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~'",
        "cnpm": "npm install --registry=https://registry.npm.taobao.org",
        "contributors": "contributors -f plain -o AUTHORS"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/ali-sdk/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/ali-sdk/ali-oss/issues"
      },
      "homepage": "https://github.com/ali-sdk/ali-oss",
      "devDependencies": {
        "autod": "*",
        "co": "*",
        "co-fs": "1",
        "co-mocha": "*",
        "istanbul-harmony": "*",
        "mocha": "*",
        "should": "*"
      },
      "dependencies": {
        "agentkeepalive": "~2.0.2",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~0.3.1",
        "merge-descriptors": "~1.0.0",
        "mime": "~1.3.4",
        "urllib": "~2.3.9",
        "utility": "~1.4.0",
        "xml2js": "~0.4.9"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "47c367350c68f7b1639c7b70f2af61b4e758b512",
      "_id": "ali-oss@2.5.1",
      "_shasum": "a0f5ae7f7c53404c68971c26207fd58a54da74cf",
      "_from": ".",
      "_npmVersion": "2.13.2",
      "_nodeVersion": "2.5.3",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "a0f5ae7f7c53404c68971c26207fd58a54da74cf",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-2.5.1.tgz",
        "integrity": "sha512-biGKFpqdbaAFyL+ebDvrtwBDnNYHYyykElofDodpEFGL6vhODRttNLlCpfG2Xy2caCyqTm7lUqyot6HMNk9mUQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCICwh3dBWqwv/TuaHIHo5mYnyH1kJ2LH1tenomQJ71TIUAiEA8Ba9iTUu0TcNquYTIIsL+abBaAPSHTlayXSlmvmvwMs="
          }
        ]
      },
      "directories": {}
    },
    "2.6.0": {
      "name": "ali-oss",
      "version": "2.6.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "index.js",
      "files": [
        "index.js",
        "lib/"
      ],
      "scripts": {
        "test": "mocha --harmony --check-leaks -R dot -t 30000 -r co-mocha test/*.test.js",
        "test-cov": "node --harmony node_modules/.bin/istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r co-mocha test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~'",
        "cnpm": "npm install --registry=https://registry.npm.taobao.org",
        "contributors": "contributors -f plain -o AUTHORS"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/ali-sdk/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/ali-sdk/ali-oss/issues"
      },
      "homepage": "https://github.com/ali-sdk/ali-oss",
      "devDependencies": {
        "autod": "*",
        "co": "*",
        "co-fs": "1",
        "co-mocha": "*",
        "istanbul-harmony": "*",
        "mocha": "*",
        "should": "*"
      },
      "dependencies": {
        "agentkeepalive": "~2.0.3",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~0.3.1",
        "merge-descriptors": "~1.0.0",
        "mime": "~1.3.4",
        "urllib": "~2.3.9",
        "utility": "~1.4.0",
        "xml2js": "~0.4.9"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "6e5a1b23a1ded95a9bfd8d5e59c45f217927d664",
      "_id": "ali-oss@2.6.0",
      "_shasum": "64617a1aa6f4f06ca1acdc10cc3f1c8211afce88",
      "_from": ".",
      "_npmVersion": "2.13.2",
      "_nodeVersion": "2.5.1",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "64617a1aa6f4f06ca1acdc10cc3f1c8211afce88",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-2.6.0.tgz",
        "integrity": "sha512-ISywwsp304ubSPt76y4lWn6UqBUMxRaMKPTnB+Oi2PtQxIOo5W29BJ8gjLCDO2K/i4zX0z33RZbo3OC0RBQ9Sg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBb/GPQ+Ogo5baTP97ruJxJOoG3+EI3Y8v02GRHNVNI5AiEAiU4AhyMvir18KxSYnI4RDhfxDzNOC+S5eq0xh0ZzsPk="
          }
        ]
      },
      "directories": {}
    },
    "2.6.1": {
      "name": "ali-oss",
      "version": "2.6.1",
      "description": "aliyun oss(open storage service) node client",
      "main": "index.js",
      "files": [
        "index.js",
        "lib/"
      ],
      "scripts": {
        "test": "mocha --harmony --check-leaks -R dot -t 30000 -r co-mocha test/*.test.js",
        "test-cov": "node --harmony node_modules/.bin/istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r co-mocha test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~'",
        "cnpm": "npm install --registry=https://registry.npm.taobao.org",
        "contributors": "contributors -f plain -o AUTHORS"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/ali-sdk/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/ali-sdk/ali-oss/issues"
      },
      "homepage": "https://github.com/ali-sdk/ali-oss",
      "devDependencies": {
        "autod": "*",
        "co": "*",
        "co-fs": "1",
        "co-mocha": "*",
        "istanbul-harmony": "*",
        "mocha": "*",
        "should": "*"
      },
      "dependencies": {
        "agentkeepalive": "~2.0.3",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~0.3.1",
        "merge-descriptors": "~1.0.0",
        "mime": "~1.3.4",
        "urllib": "~2.3.9",
        "utility": "~1.4.0",
        "xml2js": "~0.4.9"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "831531c3b1c33e9ad39cd27d7c269afdb185ceef",
      "_id": "ali-oss@2.6.1",
      "_shasum": "01f94fb37bd2c36acd1124dd84c1b35ec141dfe9",
      "_from": ".",
      "_npmVersion": "2.14.2",
      "_nodeVersion": "4.0.0",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "01f94fb37bd2c36acd1124dd84c1b35ec141dfe9",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-2.6.1.tgz",
        "integrity": "sha512-9YXVzF2ewamHbGUhRZkUS3svHTnG3sbpFQrObRaw+FF09u3whIjDKY1DCx9eX7d2A4tUamLSD9iDVv8GWsiatg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCyVl+8Q+gQXXgFkotK+1l+GIT1bEq83K4fq97+qoahHwIhAKWIk72VcRlM9NeZhEtEhLVF7fTSccX4vG0re0+mWAcy"
          }
        ]
      },
      "directories": {}
    },
    "2.7.0": {
      "name": "ali-oss",
      "version": "2.7.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "index.js",
      "files": [
        "index.js",
        "lib/"
      ],
      "scripts": {
        "test": "mocha --harmony --check-leaks -R dot -t 30000 -r co-mocha test/*.test.js",
        "test-cov": "node --harmony node_modules/.bin/istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r co-mocha test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~'",
        "cnpm": "npm install --registry=https://registry.npm.taobao.org",
        "contributors": "contributors -f plain -o AUTHORS"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/ali-sdk/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/ali-sdk/ali-oss/issues"
      },
      "homepage": "https://github.com/ali-sdk/ali-oss",
      "devDependencies": {
        "autod": "*",
        "co": "*",
        "co-fs": "1",
        "co-mocha": "*",
        "istanbul-harmony": "*",
        "mocha": "*",
        "should": "*"
      },
      "dependencies": {
        "agentkeepalive": "~2.0.3",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~0.3.1",
        "merge-descriptors": "~1.0.0",
        "mime": "~1.3.4",
        "urllib": "~2.3.9",
        "utility": "~1.4.0",
        "xml2js": "~0.4.9"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "fec968d7a1726581f2ace6640e05647732297e52",
      "_id": "ali-oss@2.7.0",
      "_shasum": "db4115e72b9cd093a02efd3829d65090c2bec028",
      "_from": ".",
      "_npmVersion": "2.14.3",
      "_nodeVersion": "4.1.0",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "db4115e72b9cd093a02efd3829d65090c2bec028",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-2.7.0.tgz",
        "integrity": "sha512-LXHql4wUZ6Ym/yjrkBuMWqDGNmcYjnkfP6lv6CttA7Pm0b6VvIN+9+dxG2s+XI2o26sL5nffhQ8AnP0/otacyg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCYVCVsQA0DBwAADVX5aj/Jc2x7tFSkKDDVfEF2fJYZKQIgNIlwZjUM75UzWAFO7o0e2xvhXtZy2xIB5s75zp+r15I="
          }
        ]
      },
      "directories": {}
    },
    "2.8.0": {
      "name": "ali-oss",
      "version": "2.8.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha --harmony --check-leaks -t 30000 -r co-mocha -r should test/*.test.js",
        "test-cov": "node --harmony node_modules/.bin/istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r co-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~' -D mocha,autod,should,co-mocha,istanbul-harmony",
        "cnpm": "npm install --registry=https://registry.npm.taobao.org",
        "contributors": "contributors -f plain -o AUTHORS"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/ali-sdk/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/ali-sdk/ali-oss/issues"
      },
      "homepage": "https://github.com/ali-sdk/ali-oss",
      "devDependencies": {
        "autod": "~2.1.3",
        "co": "*",
        "co-fs": "~1.2.0",
        "co-mocha": "~1.1.2",
        "istanbul-harmony": "~0.3.16",
        "mm": "~1.3.4",
        "mocha": "~2.3.3",
        "should": "~7.1.0"
      },
      "dependencies": {
        "agentkeepalive": "~2.0.3",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~0.3.1",
        "merge-descriptors": "~1.0.0",
        "mime": "~1.3.4",
        "sdk-base": "~1.0.1",
        "urllib": "~2.4.0",
        "utility": "~1.4.0",
        "xml2js": "~0.4.12"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "1fe762bb2747920d939e8f77217e8a039b7b1652",
      "_id": "ali-oss@2.8.0",
      "_shasum": "c421e86dda2b66df4a8d63b842f5f67775321ba7",
      "_from": ".",
      "_npmVersion": "2.14.4",
      "_nodeVersion": "4.1.1",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "c421e86dda2b66df4a8d63b842f5f67775321ba7",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-2.8.0.tgz",
        "integrity": "sha512-baOLcl3F0J/3NEfvkO1gyOWwReFAsKAXKv+Ypz8zNnvm/GtCG5SRgspEvAEUO7862rv8XqXao13DGjEh9MbJew==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDdp/HNHjsqdVd4rEgocufYHHivePhve+qg1xs4LzrvdgIgOwBteVnQQ/JjjTUU/IWVkiKo/+JCTmEKtlQHCifUih8="
          }
        ]
      },
      "directories": {}
    },
    "3.0.0": {
      "name": "ali-oss",
      "version": "3.0.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha --check-leaks -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~' -D mocha,autod,should,thunk-mocha,istanbul"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/ali-sdk/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/ali-sdk/ali-oss/issues"
      },
      "homepage": "https://github.com/ali-sdk/ali-oss",
      "devDependencies": {
        "autod": "2",
        "co-fs": "1",
        "istanbul": "*",
        "mm": "1",
        "mocha": "2",
        "should": "7",
        "thunk-mocha": "0"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~0.3.1",
        "merge-descriptors": "~1.0.0",
        "mime": "~1.3.4",
        "sdk-base": "~1.0.1",
        "urllib": "~2.4.0",
        "utility": "~1.4.0",
        "xml2js": "~0.4.12"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "d4a71b2b69ee23a91eebbf48fe6410dab2eaeeec",
      "_id": "ali-oss@3.0.0",
      "_shasum": "f986384df8e95374f06bc24d0259ab6df5694513",
      "_from": ".",
      "_npmVersion": "2.12.0",
      "_nodeVersion": "4.0.0",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "f986384df8e95374f06bc24d0259ab6df5694513",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-3.0.0.tgz",
        "integrity": "sha512-QggvuG2CLj7s0JQtRfwGEt82KisKGX+r7mUYuPHVO0a+5JRZwaBADMRQzVGxUGmWI9U/ynmtql9vijQEjXgbTA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDsJWLTM6svEbxFQD7weopYEam07/r/tgppSzxE5+qu0AiEAyi7agZrW05iNC681LUVQH/oET97L4gNealDyZQJ3zkg="
          }
        ]
      },
      "directories": {}
    },
    "3.0.1": {
      "name": "ali-oss",
      "version": "3.0.1",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha --check-leaks -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~' --devprefix '^' -D mocha,autod,should,thunk-mocha,istanbul"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/ali-sdk/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/ali-sdk/ali-oss/issues"
      },
      "homepage": "https://github.com/ali-sdk/ali-oss",
      "devDependencies": {
        "autod": "^2.1.3",
        "co-fs": "^1.2.0",
        "istanbul": "^0.3.21",
        "mm": "^1.3.5",
        "mocha": "^2.3.3",
        "should": "^7.1.0",
        "thunk-mocha": "^0.1.1"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~0.3.1",
        "merge-descriptors": "~1.0.0",
        "mime": "~1.3.4",
        "sdk-base": "~1.0.1",
        "urllib": "~2.5.0",
        "utility": "~1.4.0",
        "xml2js": "~0.4.12"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "d809204471365e1620c88abf0c28ac31cf95efa3",
      "_id": "ali-oss@3.0.1",
      "_shasum": "e0bde05d899a6412be2c1a0a69a7fda45392c8b1",
      "_from": ".",
      "_npmVersion": "2.12.0",
      "_nodeVersion": "4.0.0",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "e0bde05d899a6412be2c1a0a69a7fda45392c8b1",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-3.0.1.tgz",
        "integrity": "sha512-8a+29EBagmV6N8ils7pD+TuNfiPWZdtclZHPuogk+6vmrVSIamxGTzhvrgdpwWHRJOCc6ugVmdqNdHEEP95NOg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAbwmfI2Xk8YSGHWy099YjRmUel7bakiFGCO/B4ftGoOAiEAp0qVrxOB/4oanHWwyhAos/SymI8lZj1qOoyKP8LZ6Vw="
          }
        ]
      },
      "directories": {}
    },
    "3.0.2": {
      "name": "ali-oss",
      "version": "3.0.2",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha --check-leaks -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~' --devprefix '^' -D mocha,autod,should,thunk-mocha,istanbul"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/ali-sdk/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/ali-sdk/ali-oss/issues"
      },
      "homepage": "https://github.com/ali-sdk/ali-oss",
      "devDependencies": {
        "autod": "^2.1.3",
        "co-fs": "^1.2.0",
        "istanbul": "^0.3.21",
        "mm": "^1.3.5",
        "mocha": "^2.3.3",
        "should": "^7.1.0",
        "thunk-mocha": "^0.1.1"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~0.3.1",
        "merge-descriptors": "~1.0.0",
        "mime": "~1.3.4",
        "sdk-base": "~1.0.1",
        "urllib": "~2.5.0",
        "utility": "~1.4.0",
        "xml2js": "~0.4.12"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "a738b42f2f60796bc48d08368274b09c11eb89f6",
      "_id": "ali-oss@3.0.2",
      "_shasum": "24646c96404dcca83d5f095c95948cca8b1f32dc",
      "_from": ".",
      "_npmVersion": "2.12.0",
      "_nodeVersion": "4.0.0",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "24646c96404dcca83d5f095c95948cca8b1f32dc",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-3.0.2.tgz",
        "integrity": "sha512-yBWGLHmTJfW23HBuc+98qcws9HIPt0dWNl5oeiiX66vV8kavUZgL6bNOAza0g/TZgCCeS8wSAJcDqwYtuFqVLA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDlTrDHi09M4apWhLW9KCL/5OxsXFl/7qzcmktFelNvEgIgJUNPP19oEgdeC2eyKBZrs0dOUXJvYYmNMmgUzhI7d1g="
          }
        ]
      },
      "directories": {}
    },
    "3.0.3": {
      "name": "ali-oss",
      "version": "3.0.3",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha --check-leaks -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~' --devprefix '^' -D mocha,autod,should,thunk-mocha,istanbul"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/ali-sdk/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/ali-sdk/ali-oss/issues"
      },
      "homepage": "https://github.com/ali-sdk/ali-oss",
      "devDependencies": {
        "autod": "^2.1.3",
        "co-fs": "^1.2.0",
        "istanbul": "^0.3.21",
        "mm": "^1.3.5",
        "mocha": "^2.3.3",
        "should": "^7.1.0",
        "thunk-mocha": "^0.1.1"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~0.3.1",
        "merge-descriptors": "~1.0.0",
        "mime": "~1.3.4",
        "sdk-base": "~1.0.1",
        "urllib": "~2.5.0",
        "utility": "~1.4.0",
        "xml2js": "~0.4.12"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "b36addf2e3d19bcbb85a3423e6489fe2d4a27773",
      "_id": "ali-oss@3.0.3",
      "_shasum": "dd611e691299da76e4db1ea42f23146b0ad3497e",
      "_from": ".",
      "_npmVersion": "2.12.0",
      "_nodeVersion": "4.0.0",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "dd611e691299da76e4db1ea42f23146b0ad3497e",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-3.0.3.tgz",
        "integrity": "sha512-ynHisMd8/RNUe+9mlOwXs8IP0qpaPO71/6cV3I/UCsDhQcxa/bE76va8aXBA3zZCIP0FKmYfrdlRN2pfhisf+Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFkdKXwaffZBuk3mR7fqLonDJuuTOgsV/i3Dr5qCCb/SAiEAws+Fo+G5sRfVY8iRcF+oO2R2e6m3TU5UITOAQFMimtc="
          }
        ]
      },
      "directories": {}
    },
    "3.1.0": {
      "name": "ali-oss",
      "version": "3.1.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha --check-leaks -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~' --devprefix '^' -D mocha,autod,should,thunk-mocha,istanbul"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=1.0.0"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "autod": "^2.1.3",
        "co-fs": "^1.2.0",
        "istanbul": "^0.3.21",
        "mm": "^1.3.5",
        "mocha": "^2.3.3",
        "should": "^7.1.0",
        "thunk-mocha": "^0.1.1"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~0.3.1",
        "merge-descriptors": "~1.0.0",
        "mime": "~1.3.4",
        "sdk-base": "~1.0.1",
        "urllib": "~2.5.0",
        "utility": "~1.4.0",
        "xml2js": "~0.4.12"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "22b1d7bc46f0ec7cc70186f3bce4579d5cee76ed",
      "_id": "ali-oss@3.1.0",
      "_shasum": "949a101a007db1e54575755a963b2416b345548d",
      "_from": ".",
      "_npmVersion": "2.14.7",
      "_nodeVersion": "4.2.1",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "949a101a007db1e54575755a963b2416b345548d",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-3.1.0.tgz",
        "integrity": "sha512-XZGYGgFvzpMWnQ68V4iXr4UdF/+SXgAUOVlhUjro9X1KFGzlJdErq7zThw9ZrnX/2aFYlcWVHdLu6Dvfekh5mw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDDCXnUjXowSOslKTHFCxYmh+w1c52Gds3WZFwpew86RwIhANATQ8McdQJOjCKAN6n7G4uVXYqultg49sDQEiFPBhdv"
          }
        ]
      },
      "directories": {}
    },
    "3.1.1": {
      "name": "ali-oss",
      "version": "3.1.1",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha --check-leaks -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~' --devprefix '^' -D mocha,autod,should,thunk-mocha,istanbul"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=1.0.0"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "autod": "^2.1.3",
        "co-fs": "^1.2.0",
        "istanbul": "^0.3.21",
        "mm": "^1.3.5",
        "mocha": "^2.3.3",
        "should": "^7.1.0",
        "thunk-mocha": "^0.1.1"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~0.3.1",
        "merge-descriptors": "~1.0.0",
        "mime": "~1.3.4",
        "sdk-base": "~1.0.1",
        "urllib": "~2.5.0",
        "utility": "~1.4.0",
        "xml2js": "~0.4.12"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "fca703b14ec33cec1e0e8c19f968ade051c68877",
      "_id": "ali-oss@3.1.1",
      "_shasum": "917bfe15164a5194ebd2dbe149a6c5ddc13ac8c9",
      "_from": ".",
      "_npmVersion": "2.14.7",
      "_nodeVersion": "4.2.1",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "917bfe15164a5194ebd2dbe149a6c5ddc13ac8c9",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-3.1.1.tgz",
        "integrity": "sha512-73ifzcoIP9tnF2y19WUbwvQoF/INdTc6/7jOJtztxce51dmZ5MYNRA7XLjA7vfEG+5KJs490ePb3dD2RX1kxRA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCmVvE3/t09P/c9KKI46U3sU3uEXHmvpn+ShkGnbI8OKQIgGawB/+RAigYqeKYjBeJAyRg0bn7N40fGd2KNYv6BIy4="
          }
        ]
      },
      "directories": {}
    },
    "3.1.2": {
      "name": "ali-oss",
      "version": "3.1.2",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha --check-leaks -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~' --devprefix '^' -D mocha,autod,should,thunk-mocha,istanbul"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=1.0.0"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "autod": "^2.1.3",
        "co-fs": "^1.2.0",
        "istanbul": "^0.3.21",
        "mm": "^1.3.5",
        "mocha": "^2.3.3",
        "should": "^7.1.0",
        "thunk-mocha": "^0.1.1"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~0.3.1",
        "merge-descriptors": "~1.0.0",
        "mime": "~1.3.4",
        "sdk-base": "~1.0.1",
        "urllib": "~2.5.0",
        "utility": "~1.4.0",
        "xml2js": "~0.4.12"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "170c5d3c557dcdc78c534f97fefdc507da43d759",
      "_id": "ali-oss@3.1.2",
      "_shasum": "6e17292c457805e1ab4879024140268f67768c51",
      "_from": ".",
      "_npmVersion": "2.12.0",
      "_nodeVersion": "4.0.0",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "dist": {
        "shasum": "6e17292c457805e1ab4879024140268f67768c51",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-3.1.2.tgz",
        "integrity": "sha512-oPfq+4QDnQpUX9ACFJCOvZ8eBIEinai0jNx7e9y/KNw8LPQpF03BJPyg4Zqw51CQPEt4fruU5JFEptlG02iG/A==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIAKdC3r8y58yKSUs4iXnCU0qK4KRZrF6D8QuX3foDC42AiB0fNCO+aiIJYmTKBJDHByldLk00B24c+hilJA5rRuoOQ=="
          }
        ]
      },
      "directories": {}
    },
    "3.1.3": {
      "name": "ali-oss",
      "version": "3.1.3",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha --check-leaks -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~' --devprefix '^' -D mocha,autod,should,thunk-mocha,istanbul"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=1.0.0"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "autod": "^2.2.0",
        "co-fs": "^1.2.0",
        "istanbul": "^0.4.1",
        "mm": "^1.3.5",
        "mocha": "^2.3.4",
        "should": "^7.1.0",
        "thunk-mocha": "^1.0.1"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.0",
        "mime": "~1.3.4",
        "sdk-base": "~1.1.0",
        "urllib": "~2.6.0",
        "utility": "~1.6.0",
        "xml2js": "~0.4.12"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "4c694ce49801ac52b080d801d43dc0442d3d6057",
      "_id": "ali-oss@3.1.3",
      "_shasum": "10eb93214c714a34a5a1d598c1965db0f206fc87",
      "_from": ".",
      "_npmVersion": "2.12.0",
      "_nodeVersion": "4.1.2",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "dist": {
        "shasum": "10eb93214c714a34a5a1d598c1965db0f206fc87",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-3.1.3.tgz",
        "integrity": "sha512-BGcKTMofHuzNOAgqIVVwCBy/Q2I6Od+JwYZEjPKjbyKQyjQ5my23XTAoWMtdvcyk7n3dyy5+/QEpqWkhtcYAMA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICN7mFBxAIYLngG310MusZFFf4JvEgrfCzkPdViBCvQsAiB/UjMLfh8HnWiFFOje4GVCZGXhgPvM0M+CCnXDerP6/g=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "directories": {}
    },
    "4.0.0": {
      "name": "ali-oss",
      "version": "4.0.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha --check-leaks -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~' --devprefix '^' -D mocha,autod,should,thunk-mocha,istanbul"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "autod": "^2.4.2",
        "co-fs": "^1.2.0",
        "istanbul": "^0.4.1",
        "mm": "^1.3.5",
        "mocha": "^2.3.4",
        "should": "^7.1.0",
        "thunk-mocha": "^1.0.1"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.1",
        "mime": "~1.3.4",
        "sdk-base": "~1.1.0",
        "urllib": "~2.6.0",
        "utility": "~1.6.0",
        "xml2js": "~0.4.12"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "094b4578894b3835fdc6aa2f33109aaecd38d09a",
      "_id": "ali-oss@4.0.0",
      "_shasum": "a21775ee0835c3aab6ac45adb1665307eab1bf3d",
      "_from": ".",
      "_npmVersion": "2.14.12",
      "_nodeVersion": "4.2.4",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "dist": {
        "shasum": "a21775ee0835c3aab6ac45adb1665307eab1bf3d",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.0.0.tgz",
        "integrity": "sha512-+RntL3l4BPPOhx/B4JP4eMwqwMQ2jLWlzF5vd8LumER9n6PLTEJB57p8xRfSGZHZUqumjB4GKIg/nMlRiKAx0g==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFoZcgslWKUcCXnlYfHBSHtlYBzc6RGwPACVtjBnSI1fAiEAk/dhJzSJVGOzMuEQ664LdSYXV+fm0jXD4NuHAOYuTxY="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "directories": {}
    },
    "4.0.1": {
      "name": "ali-oss",
      "version": "4.0.1",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha --check-leaks -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~' --devprefix '^' -D mocha,autod,should,thunk-mocha,istanbul"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "autod": "^2.4.2",
        "co-fs": "^1.2.0",
        "istanbul": "^0.4.1",
        "mm": "^1.3.5",
        "mocha": "^2.3.4",
        "should": "^7.1.0",
        "thunk-mocha": "^1.0.1",
        "filereader": "^0.10.3"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.1",
        "mime": "~1.3.4",
        "sdk-base": "~1.1.0",
        "urllib": "~2.6.0",
        "utility": "~1.6.0",
        "xml2js": "~0.4.12"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "863fb8d0bfa25c22d06af3c448d61df116927bcd",
      "_id": "ali-oss@4.0.1",
      "_shasum": "3ff4b8c03d69f10959572bf7b349483beae4fc6b",
      "_from": ".",
      "_npmVersion": "2.12.0",
      "_nodeVersion": "4.1.2",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "dist": {
        "shasum": "3ff4b8c03d69f10959572bf7b349483beae4fc6b",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.0.1.tgz",
        "integrity": "sha512-uo+QPNNCM4KUlhnkCPzKRaxLHpIUnHRr0kbSZwDXOoFB7C17S5W9TEk6stGzy7E5MWOqYezD5sDk41yl0aUm7w==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIENgCpv48OxS/kbIV52AukOd2PUqPGqpZk2A3KutYSPjAiEA6fQjJt+yhI18RkaARb0dCGGfhhKK9JBmTpWUIE5HpmU="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "directories": {}
    },
    "3.1.4": {
      "name": "ali-oss",
      "version": "3.1.4",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha --check-leaks -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~' --devprefix '^' -D mocha,autod,should,thunk-mocha,istanbul"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=1.0.0"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "autod": "^2.2.0",
        "co-fs": "^1.2.0",
        "istanbul": "^0.4.1",
        "mm": "^1.3.5",
        "mocha": "^2.3.4",
        "should": "^7.1.0",
        "thunk-mocha": "^1.0.1"
      },
      "publishConfig": {
        "tag": "release-3"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.0",
        "mime": "~1.3.4",
        "sdk-base": "~1.1.0",
        "urllib": "~2.6.0",
        "utility": "~1.6.0",
        "xml2js": "~0.4.12"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "5c0e9c8cef3c4be9f626ff26f14665ead72d49d4",
      "_id": "ali-oss@3.1.4",
      "_shasum": "026c461bbebbc56c8e63a60ae31c3944f2fae54a",
      "_from": ".",
      "_npmVersion": "2.12.0",
      "_nodeVersion": "4.2.3",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "dist": {
        "shasum": "026c461bbebbc56c8e63a60ae31c3944f2fae54a",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-3.1.4.tgz",
        "integrity": "sha512-wWlPRIwvnXKYvV9CT7/U10I83m+2BbJoJIRo+s3iuAppPdv2gVmYKY4dsRDwUUdgr/JkVzAE/8Z6/DwPJhCptg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCWyo7KZYvLIt/wdP6QvigL8plBCB4jxy6/1FEsvbG6ggIgfrSDATr4Y9/6UXNivmT0XRmJkYJzkXzztBpcPrTUfms="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "directories": {}
    },
    "4.1.0": {
      "name": "ali-oss",
      "version": "4.1.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha --check-leaks -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~' --devprefix '^' -D mocha,autod,should,thunk-mocha,istanbul"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "autod": "^2.4.2",
        "co-fs": "^1.2.0",
        "istanbul": "^0.4.1",
        "mm": "^1.3.5",
        "mocha": "^2.3.4",
        "should": "^7.1.0",
        "thunk-mocha": "^1.0.1",
        "filereader": "^0.10.3"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.1",
        "mime": "~1.3.4",
        "sdk-base": "~1.1.0",
        "urllib": "~2.6.0",
        "utility": "~1.6.0",
        "xml2js": "~0.4.12"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "773a2be3f320f50b544819b8f27b35a5e2b6ee85",
      "_id": "ali-oss@4.1.0",
      "_shasum": "e88ccfed2815171f8495af180366daf8cff9b58a",
      "_from": ".",
      "_npmVersion": "2.12.0",
      "_nodeVersion": "4.2.3",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "dist": {
        "shasum": "e88ccfed2815171f8495af180366daf8cff9b58a",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.1.0.tgz",
        "integrity": "sha512-0UrS5D+/J87m0/rmc5RYqvJrWmuUIT/rbA1zQcnM2u/LY++d6u/RJNgVwQlCxlKFqX+nG6Hr/dRaiXdQxhd7vA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDXQjdCdyhPT029OHnqWtcHakw8yjUUMd7dxisvZ9xu8AIhAMESnmd7NVy69rUcwKrxeac7IdUxPm8W9kkuvYOGeIHG"
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        }
      ],
      "directories": {}
    },
    "4.1.2": {
      "name": "ali-oss",
      "version": "4.1.2",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha --check-leaks -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "browserify browser.js -t babelify -s OSS > dist/aliyun-oss-sdk.js && uglifyjs dist/aliyun-oss-sdk.js -c > dist/aliyun-oss-sdk.min.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": "npm publish"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "autod": "^2.4.2",
        "babel-polyfill": "^6.3.14",
        "babel-preset-es2015": "^6.3.13",
        "babelify": "^7.2.0",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.0",
        "co-fs": "^1.2.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.2",
        "mm": "^1.3.5",
        "mocha": "^2.4.2",
        "should": "^8.2.0",
        "thunk-mocha": "^1.0.2",
        "uglifyjs": "^2.4.10"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.4",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.1",
        "mime": "~1.3.4",
        "sdk-base": "~1.1.0",
        "urllib": "~2.7.0",
        "utility": "~1.6.0",
        "xml2js": "~0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "0deeebe16dcb6a228f4672113ff44658baacd1d3",
      "_id": "ali-oss@4.1.2",
      "_shasum": "acdd9a2cc9f7293a1df5fecb112637134b823025",
      "_from": ".",
      "_npmVersion": "3.3.12",
      "_nodeVersion": "5.3.0",
      "_npmUser": {
        "name": "rockuw",
        "email": "rockuw@gmail.com"
      },
      "dist": {
        "shasum": "acdd9a2cc9f7293a1df5fecb112637134b823025",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.1.2.tgz",
        "integrity": "sha512-PsjWdd/SWnq4vYRe31dboMgZ4tmuY63Ao7qFKgFTDXbB4QXU9ZYGtBhfMx8cpd/Bdpk++LUcn6+Vrxk80+99yQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCJYTc7YvbFTYJ25xehGmzxO8Fk/md2WOfdkz8IVCYhvwIhAMOSzFKKCoWeqHR9bWP/U9uZz/POE+3Xd5OFvVxLAr23"
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "directories": {}
    },
    "4.1.3": {
      "name": "ali-oss",
      "version": "4.1.3",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha --check-leaks -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "browserify browser.js -t babelify -s OSS > dist/aliyun-oss-sdk.js && uglifyjs dist/aliyun-oss-sdk.js -c > dist/aliyun-oss-sdk.min.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": "npm publish"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "autod": "^2.4.2",
        "babel-polyfill": "^6.3.14",
        "babel-preset-es2015": "^6.3.13",
        "babelify": "^7.2.0",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.0",
        "co-fs": "^1.2.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.2",
        "mm": "^1.3.5",
        "mocha": "^2.4.2",
        "should": "^8.2.0",
        "thunk-mocha": "^1.0.2",
        "uglifyjs": "^2.4.10"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.4",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.1",
        "mime": "~1.3.4",
        "sdk-base": "~1.1.0",
        "urllib": "~2.7.0",
        "utility": "~1.6.0",
        "xml2js": "~0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "e6d3c9e1a82b4b7b4b33c6dfa682319e25167aea",
      "_id": "ali-oss@4.1.3",
      "_shasum": "99abcb701b0f1d07e3e72335ad130b42ca0db0a9",
      "_from": ".",
      "_npmVersion": "3.3.12",
      "_nodeVersion": "5.3.0",
      "_npmUser": {
        "name": "rockuw",
        "email": "rockuw@gmail.com"
      },
      "dist": {
        "shasum": "99abcb701b0f1d07e3e72335ad130b42ca0db0a9",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.1.3.tgz",
        "integrity": "sha512-dvK9B1wwsTMqnyoBHeLpGG1bdFIV6JK1nVFMhmSzhE/A2LBmRrMKVZ2X5LMu/846lMkXMChn06eR/1q+rfilHA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEF3Of4VwvYK4qvjTSa5/eHwh2HoueF1r0QeWO5nj4xDAiEAnh8GKZ17QeUIFCnWsYVWD77s5iGv2CF66+kjz49nXwc="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "directories": {}
    },
    "4.1.4": {
      "name": "ali-oss",
      "version": "4.1.4",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha --check-leaks -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "browserify browser.js -t babelify -s OSS > dist/aliyun-oss-sdk.js && uglifyjs dist/aliyun-oss-sdk.js -c > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": "npm publish && npm run publish-to-cdn"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "autod": "^2.4.2",
        "babel-polyfill": "^6.3.14",
        "babel-preset-es2015": "^6.3.13",
        "babelify": "^7.2.0",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.0",
        "co-fs": "^1.2.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.2",
        "mm": "^1.3.5",
        "mocha": "^2.4.2",
        "should": "^8.2.0",
        "thunk-mocha": "^1.0.2",
        "uglifyjs": "^2.4.10"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.4",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.1",
        "mime": "~1.3.4",
        "platform": "~1.3.1",
        "sdk-base": "~1.1.0",
        "urllib": "~2.7.0",
        "utility": "~1.6.0",
        "xml2js": "~0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "3e14a414585acbe2d3406293bad52f85917f2bab",
      "_id": "ali-oss@4.1.4",
      "_shasum": "c2c6171fe8922d47362db6ef5d4ad83c4a236e4e",
      "_from": ".",
      "_npmVersion": "3.3.12",
      "_nodeVersion": "5.3.0",
      "_npmUser": {
        "name": "rockuw",
        "email": "rockuw@gmail.com"
      },
      "dist": {
        "shasum": "c2c6171fe8922d47362db6ef5d4ad83c4a236e4e",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.1.4.tgz",
        "integrity": "sha512-L+PgMzSOd92s3hq/3BXV3BqTiexpkgwtkOGCH6Ve4BQJo9DsuPrVCBwUXjgX9t2iTVTv+UNSB1P8qu+T4hJNOw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGj3GYVEEIccKurwR9d1CMgPVqOmboQckXFt5l07E3uwAiEAli9Q8Ffwe+wiiTyv0+k/CUrxYlZ4+WSrIgNtTXFm1nM="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "directories": {}
    },
    "4.1.5": {
      "name": "ali-oss",
      "version": "4.1.5",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "browserify browser.js -t babelify -s OSS > dist/aliyun-oss-sdk.js && uglifyjs dist/aliyun-oss-sdk.js -c > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "autod": "^2.4.2",
        "babel-polyfill": "^6.3.14",
        "babel-preset-es2015": "^6.3.13",
        "babelify": "^7.2.0",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.0",
        "co-fs": "^1.2.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.2",
        "mm": "^1.3.5",
        "mocha": "^2.4.2",
        "should": "^8.2.0",
        "thunk-mocha": "^1.0.2",
        "uglifyjs": "^2.4.10"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.4",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.1",
        "mime": "~1.3.4",
        "platform": "~1.3.1",
        "sdk-base": "~1.1.0",
        "urllib": "~2.8.0",
        "utility": "~1.6.0",
        "xml2js": "~0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "e3d10f7b779371d4c751aef8d098bfc634eead0e",
      "_id": "ali-oss@4.1.5",
      "_shasum": "023b8f6719808e931deda9d424e522b95722a20b",
      "_from": ".",
      "_npmVersion": "3.3.12",
      "_nodeVersion": "5.3.0",
      "_npmUser": {
        "name": "rockuw",
        "email": "rockuw@gmail.com"
      },
      "dist": {
        "shasum": "023b8f6719808e931deda9d424e522b95722a20b",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.1.5.tgz",
        "integrity": "sha512-PLk7DUsJyIl6qZmzEKnL/PBb63wQRfyIbxQOU/yQsYxXPuFrfoTH0F12bmd5qg8fi5eUJy3c12buy/mhsLuX0Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDxeBdpL61H7kuKyK4UXvdrtZg3TRD4t3d37Sxe+2LoIgIgCqb+AqgunFlzIUyHLObH/MIEz0nJfkRj2hZ2r8VV0As="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.1.5.tgz_1456918717543_0.6825171664822847"
      },
      "directories": {}
    },
    "3.1.5": {
      "name": "ali-oss",
      "version": "3.1.5",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha --check-leaks -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot --check-leaks -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod -w --prefix '~' --devprefix '^' -D mocha,autod,should,thunk-mocha,istanbul"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=1.0.0"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "autod": "^2.2.0",
        "co-fs": "^1.2.0",
        "istanbul": "^0.4.1",
        "mm": "^1.3.5",
        "mocha": "^2.3.4",
        "should": "^7.1.0",
        "thunk-mocha": "^1.0.1"
      },
      "publishConfig": {
        "tag": "release-3"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.3",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.0",
        "mime": "~1.3.4",
        "sdk-base": "~1.1.0",
        "urllib": "~2.6.0",
        "utility": "~1.6.0",
        "xml2js": "~0.4.12"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "c68b611eb8ea6711c9c1b0036f701712e5e90969",
      "_id": "ali-oss@3.1.5",
      "_shasum": "581f98c4f4acc30574e70c149300c60fa37337b5",
      "_from": ".",
      "_npmVersion": "2.14.12",
      "_nodeVersion": "4.2.4",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "dist": {
        "shasum": "581f98c4f4acc30574e70c149300c60fa37337b5",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-3.1.5.tgz",
        "integrity": "sha512-q04q3xDsIkRZqAg8kShzoRjZ7PNVZvgNiUnnhEfbKj78yXcK2rXNZIwaIAhzoKbl83HD56xADzk3Wpx0BSB37Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGlZbQiJpsZeTvShl9qHCMojMGcdmIsuExvNMKSEez6PAiEA9/UL+qE2YSx9x4juXJ7YucVoL9/m8n8Cu1psx7Zdo/A="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ali-oss-3.1.5.tgz_1457420127208_0.5802326037082821"
      },
      "directories": {}
    },
    "4.1.6": {
      "name": "ali-oss",
      "version": "4.1.6",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "browserify browser.js -t babelify -s OSS > dist/aliyun-oss-sdk.js && uglifyjs dist/aliyun-oss-sdk.js -c > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "autod": "^2.4.2",
        "babel-runtime": "^6.6.1",
        "babel-plugin-transform-runtime": "^6.6.0",
        "babel-preset-es2015": "^6.3.13",
        "babelify": "^7.2.0",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.0",
        "co-fs": "^1.2.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.2",
        "mm": "^1.3.5",
        "mocha": "^2.4.2",
        "should": "^8.2.0",
        "thunk-mocha": "^1.0.2",
        "uglifyjs": "^2.4.10"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.4",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.1",
        "mime": "~1.3.4",
        "platform": "~1.3.1",
        "sdk-base": "~2.0.1",
        "urllib": "~2.8.0",
        "utility": "~1.6.0",
        "xml2js": "~0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "7feaf6c7953eb51d082b94fb7127c244886f0de6",
      "_id": "ali-oss@4.1.6",
      "_shasum": "704fedd00ceb0300f1bed5d176bb1a0dac9b6d18",
      "_from": ".",
      "_npmVersion": "3.3.12",
      "_nodeVersion": "5.3.0",
      "_npmUser": {
        "name": "rockuw",
        "email": "rockuw@gmail.com"
      },
      "dist": {
        "shasum": "704fedd00ceb0300f1bed5d176bb1a0dac9b6d18",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.1.6.tgz",
        "integrity": "sha512-HQ2Luut4P9DzWOb2UTqyZBKe7Cj2H0813vyE0ke3ht0DWObPIUQ7mSuInBSsVYfdK7xOBL92xY6uVVViQNRlRQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCOSTj6ZoyMh8/K4Km58kTs1iv1LkE3t2ltgjGsvGRVIwIhAPDm1wwRbrFcENXgxxknXJ2KbVHgMgD72DJFT8AuYi/p"
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.1.6.tgz_1458101995695_0.34816437447443604"
      },
      "directories": {}
    },
    "4.1.7": {
      "name": "ali-oss",
      "version": "4.1.7",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "browserify browser.js -t babelify -s OSS > dist/aliyun-oss-sdk.js && uglifyjs dist/aliyun-oss-sdk.js -c > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "autod": "^2.4.2",
        "babel-runtime": "^6.6.1",
        "babel-plugin-transform-runtime": "^6.6.0",
        "babel-preset-es2015": "^6.3.13",
        "babelify": "^7.2.0",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.0",
        "co-fs": "^1.2.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.2",
        "mm": "^1.3.5",
        "mocha": "^2.4.2",
        "should": "^8.2.0",
        "thunk-mocha": "^1.0.2",
        "uglifyjs": "^2.4.10"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.0.3",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.4",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.1",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.1",
        "mime": "~1.3.4",
        "platform": "~1.3.1",
        "sdk-base": "~2.0.1",
        "urllib": "~2.8.0",
        "utility": "~1.6.0",
        "xml2js": "~0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "c4584233cb420a3b4087fd0f569d439b9834a529",
      "_id": "ali-oss@4.1.7",
      "_shasum": "f84d0c7f429fa4c25d994eb1406c00f0c0a1ef3c",
      "_from": ".",
      "_npmVersion": "3.8.3",
      "_nodeVersion": "4.2.4",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "dist": {
        "shasum": "f84d0c7f429fa4c25d994eb1406c00f0c0a1ef3c",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.1.7.tgz",
        "integrity": "sha512-ViK0nphDqn2wTizGu0OeRFenf2/epiibWuvoBO9YqvOKAV2PITy6THdHp3D6e3N68P8IBTTuRghad1oVvITDxg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGHYWkm02Q1CinofnjCgUu5P/Anb8gZntiS+EbsksxtQAiBsSq81MSTuzn+yc5/8Ohvw1LznDCWT+KpQ7FhBN/Kygw=="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.1.7.tgz_1459329613562_0.77863833704032"
      },
      "directories": {}
    },
    "4.2.0": {
      "name": "ali-oss",
      "version": "4.2.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "browserify browser.js -t babelify -s OSS > dist/aliyun-oss-sdk.js && uglifyjs dist/aliyun-oss-sdk.js -c > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "autod": "^2.4.2",
        "babel-runtime": "^6.6.1",
        "babel-plugin-transform-runtime": "^6.6.0",
        "babel-preset-es2015": "^6.3.13",
        "babelify": "^7.2.0",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.0",
        "co-fs": "^1.2.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.2",
        "mm": "^1.3.5",
        "mocha": "^2.4.2",
        "should": "^8.2.0",
        "thunk-mocha": "^1.0.2",
        "uglifyjs": "^2.4.10"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.1.1",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.4",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.2",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.1",
        "mime": "~1.3.4",
        "platform": "~1.3.1",
        "sdk-base": "~2.0.1",
        "urllib": "~2.8.0",
        "utility": "~1.7.0",
        "xml2js": "~0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "72c8521dee17badd300e16c5b3f4db1fd3d2eaef",
      "_id": "ali-oss@4.2.0",
      "_shasum": "614305185c2e937a70a6b050e5f0f6983b502049",
      "_from": ".",
      "_npmVersion": "3.3.12",
      "_nodeVersion": "5.1.0",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "dist": {
        "shasum": "614305185c2e937a70a6b050e5f0f6983b502049",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.2.0.tgz",
        "integrity": "sha512-/p9jrIz3cY6N9DH7/O73GtPP5s4nmVPtMSBDDtT1dJ9UBvP1cL4A4QxhVqRsAqk95hgIBlsNvP/wV3Jfv3QGRA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIAJQ+n9RGmpXSrij1r4j7OK8ymAO5ohtx6dOBxBMI2cQAiBP1vgxycQlIMLnQbbQiIkpmwzkLd6NP0t4sDZmuYEJpA=="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.2.0.tgz_1460018852663_0.7401779724750668"
      },
      "directories": {}
    },
    "4.2.1": {
      "name": "ali-oss",
      "version": "4.2.1",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "browserify browser.js -t babelify -s OSS > dist/aliyun-oss-sdk.js && uglifyjs dist/aliyun-oss-sdk.js -c > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "autod": "^2.4.2",
        "babel-runtime": "^6.6.1",
        "babel-plugin-transform-runtime": "^6.6.0",
        "babel-preset-es2015": "^6.3.13",
        "babelify": "^7.2.0",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.0",
        "co-fs": "^1.2.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.2",
        "mm": "^1.3.5",
        "mocha": "^2.4.2",
        "should": "^8.2.0",
        "thunk-mocha": "^1.0.2",
        "uglifyjs": "^2.4.10"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.1.1",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.4",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.2",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.1",
        "mime": "~1.3.4",
        "platform": "~1.3.1",
        "sdk-base": "~2.0.1",
        "urllib": "~2.8.0",
        "utility": "~1.7.0",
        "xml2js": "~0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "c524a2469ae5a0c84d6e9f8bd27ee1b6ea024c50",
      "_id": "ali-oss@4.2.1",
      "_shasum": "539b059d6d82228d2faeac73f305af1ace86efda",
      "_from": ".",
      "_npmVersion": "2.15.0",
      "_nodeVersion": "4.4.2",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "dist": {
        "shasum": "539b059d6d82228d2faeac73f305af1ace86efda",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.2.1.tgz",
        "integrity": "sha512-bVFpc88ObYEGQxtaNbtgL2xrpkMyoucXA0AbHTaerwR7uOoxUy0HBIJCTaobXWaXaTf63s+7c2VXiBke3CVK1Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIC8hspcSLSG5P8bgW/5g8JT/Kcavy4tOgYuDL2r8K7UCAiEAjo6QWkJDxSk6/0d8M6VQ7IyNXJQiKH4YUWAuU3jLy3A="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.2.1.tgz_1460023842433_0.6826382849831134"
      },
      "directories": {}
    },
    "4.2.2": {
      "name": "ali-oss",
      "version": "4.2.2",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^1.9.0",
        "autod": "^2.4.2",
        "babel-runtime": "^6.6.1",
        "babel-plugin-transform-runtime": "^6.7.5",
        "babel-preset-es2015": "^6.3.13",
        "babelify": "^7.2.0",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.0",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.2",
        "mm": "^1.3.5",
        "mocha": "^2.4.2",
        "should": "^8.2.0",
        "thunk-mocha": "^1.0.2"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.1.1",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.4",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.2",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.1",
        "mime": "~1.3.4",
        "platform": "~1.3.1",
        "sdk-base": "~2.0.1",
        "urllib": "~2.8.0",
        "utility": "~1.7.0",
        "xml2js": "~0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "4cfb4fa26cfbd8c7ae49b9bc2912e916742a2abe",
      "_id": "ali-oss@4.2.2",
      "_shasum": "c90fccfdb48f18c4d67a52a6aa78293f2ec7e18c",
      "_from": ".",
      "_npmVersion": "3.3.12",
      "_nodeVersion": "5.3.0",
      "_npmUser": {
        "name": "rockuw",
        "email": "rockuw@gmail.com"
      },
      "dist": {
        "shasum": "c90fccfdb48f18c4d67a52a6aa78293f2ec7e18c",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.2.2.tgz",
        "integrity": "sha512-k9jdeDo/KUwoYp2BuNsKXMld9O/j+VUL/rdFXz2edRFYPrgYc+cc0xEJ+2JS/MQJ1RmKhX0FZhUO7JINXpGicA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDb31g6ve9ssxu4rYObTS9Ho3YVZKGRfCcEvUgz7WvSlAiEA6PqDA7PR79xGO+fftVZXUhVsQThtyke5AvI9mhrkc2U="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.2.2.tgz_1460457591175_0.7159514173399657"
      },
      "directories": {}
    },
    "4.3.0": {
      "name": "ali-oss",
      "version": "4.3.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^1.9.0",
        "autod": "^2.4.2",
        "babel-plugin-transform-runtime": "^6.7.5",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.2.0",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.0",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.2",
        "mm": "^1.3.5",
        "mocha": "^2.4.2",
        "should": "^8.2.0",
        "thunk-mocha": "^1.0.2",
        "uglify-js": "^2.6.2"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.1.1",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.4",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.2",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.1",
        "mime": "~1.3.4",
        "platform": "~1.3.1",
        "sdk-base": "~2.0.1",
        "urllib": "~2.8.0",
        "utility": "~1.7.0",
        "xml2js": "~0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "63044f6cb35609fc4d6a234714e3383c52764131",
      "_id": "ali-oss@4.3.0",
      "_shasum": "4ded46006426689d61add3f3d4d45ca25763c9fa",
      "_from": ".",
      "_npmVersion": "3.8.3",
      "_nodeVersion": "4.2.4",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "dist": {
        "shasum": "4ded46006426689d61add3f3d4d45ca25763c9fa",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.3.0.tgz",
        "integrity": "sha512-LCpk3xrxr1VOZftcj949Cq0QyaHaAciSGKf+eue+JsnwHgmSzrLhH13AnV8QIOF/IKZ7oCHz828Qd0evOQmQeQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDZ8vIUk1RtZI+nOkzDS5kRMnKqhbXhPXgubY8n4MHGagIgeSwP5RSjIuo4EA8J8BqT2Ruy29We7Eas+g/Ja35G+j4="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.3.0.tgz_1460613415614_0.8905940344557166"
      },
      "directories": {}
    },
    "4.4.0": {
      "name": "ali-oss",
      "version": "4.4.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.4.2",
        "babel-plugin-transform-runtime": "^6.7.5",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.2.0",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.0",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.2",
        "mm": "^1.3.5",
        "mocha": "^2.4.2",
        "should": "^8.2.0",
        "thunk-mocha": "^1.0.2",
        "uglify-js": "^2.6.2"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.1.1",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.4",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.2",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.1",
        "mime": "~1.3.4",
        "platform": "~1.3.1",
        "sdk-base": "~2.0.1",
        "urllib": "~2.9.0",
        "utility": "~1.7.0",
        "xml2js": "~0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "553ae2d0e8608225f623d77f4678b62eab7d91b7",
      "_id": "ali-oss@4.4.0",
      "_shasum": "c4daf4dd0574a74827d24e0d857eb30b6e4b505d",
      "_from": ".",
      "_npmVersion": "3.8.3",
      "_nodeVersion": "4.4.2",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "dist": {
        "shasum": "c4daf4dd0574a74827d24e0d857eb30b6e4b505d",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.4.0.tgz",
        "integrity": "sha512-vO9cKsZtZ3DKOCMsPWS9LK2L5DwA3n+6f8XoIiTFCVTxTrYuNbBD6rNPQe3Oxk1dCR/C6UbpF3weuiQvajLGYg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDsJxGBENbuzOWKciMq9dSbDwG9S96toCKGYqcM9nukdgIhAK5fcHsCt9bLQNUmTvr2cXIaZF72mpTavth2GGb6vW0H"
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.4.0.tgz_1461845705623_0.38002343382686377"
      },
      "directories": {}
    },
    "4.4.1": {
      "name": "ali-oss",
      "version": "4.4.1",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.4.2",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.2.0",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.0",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.2",
        "mm": "^1.3.5",
        "mocha": "^2.4.2",
        "should": "^8.2.0",
        "thunk-mocha": "^1.0.2",
        "uglify-js": "^2.6.2"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.1.1",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.4",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.2",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.1",
        "mime": "~1.3.4",
        "platform": "~1.3.1",
        "sdk-base": "~2.0.1",
        "urllib": "~2.9.0",
        "utility": "~1.7.0",
        "xml2js": "~0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "6527932aa7aec331ae9570d79f679eda1c23c3e8",
      "_id": "ali-oss@4.4.1",
      "_shasum": "806681fe5039dd01d394700441da75e30c040425",
      "_from": ".",
      "_npmVersion": "3.8.3",
      "_nodeVersion": "4.4.2",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "dist": {
        "shasum": "806681fe5039dd01d394700441da75e30c040425",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.4.1.tgz",
        "integrity": "sha512-8B78sV3iHT49wc2Orp+SZJs7CXOYjPBiQ20gJPJRDkrJImfacDdRyNeV1EBs856bJzm5Me7zljiUiMa6aNGOsQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD9GVqf/t0EqY2ewnR9egrm8S6+p/xSAjDdCJqneHQqBAIhAPKIAVBy+PrQACAjCW3voYsp6zEdaasukcxQHvMFj9EK"
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.4.1.tgz_1462339213379_0.8922336518298835"
      },
      "directories": {}
    },
    "4.4.2": {
      "name": "ali-oss",
      "version": "4.4.2",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.4.2",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.2.0",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.0",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.2",
        "mm": "^1.3.5",
        "mocha": "^2.4.2",
        "should": "^8.2.0",
        "thunk-mocha": "^1.0.2",
        "uglify-js": "^2.6.2"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.1.1",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.4",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.2",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.1",
        "mime": "~1.3.4",
        "platform": "~1.3.1",
        "sdk-base": "~2.0.1",
        "urllib": "~2.9.0",
        "utility": "~1.7.0",
        "xml2js": "~0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "326305b266488e7d83788c5b321872c1468b3b18",
      "_id": "ali-oss@4.4.2",
      "_shasum": "9af52ce7e2082df4a6d117259975ef541db4c8b2",
      "_from": ".",
      "_npmVersion": "3.8.3",
      "_nodeVersion": "4.4.2",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "dist": {
        "shasum": "9af52ce7e2082df4a6d117259975ef541db4c8b2",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.4.2.tgz",
        "integrity": "sha512-L3QlDZPc3of8E/0KE67m9oZJouNrh+bqee7DJVYUzh0TTwMvHe7K0utYkiZOXV5FBlaDlGTSkHX3EhqAgTs0Aw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCICaJ4sFgY0LvQtIMlWBpMHBntFKQpMjSgzxEAZ9T3PZ5AiEA70LgJa5CgDnhzxE5rCWu1fgJNXTTI1qc0Vbs9+peiqI="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.4.2.tgz_1462444145557_0.3677895632572472"
      },
      "directories": {}
    },
    "4.4.3": {
      "name": "ali-oss",
      "version": "4.4.3",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.4.2",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.2.0",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.0",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.2",
        "mm": "^1.3.5",
        "mocha": "^2.4.2",
        "should": "^8.2.0",
        "thunk-mocha": "^1.0.2",
        "uglify-js": "^2.6.2"
      },
      "dependencies": {
        "address": "~1.0.0",
        "agentkeepalive": "~2.1.1",
        "co": "~4.6.0",
        "co-defer": "~1.0.0",
        "copy-to": "~2.0.1",
        "debug": "~2.2.0",
        "destroy": "~1.0.4",
        "end-or-error": "~1.0.1",
        "get-ready": "~1.0.0",
        "humanize-ms": "~1.0.2",
        "is-type-of": "~1.0.0",
        "merge-descriptors": "~1.0.1",
        "mime": "~1.3.4",
        "platform": "~1.3.1",
        "sdk-base": "~2.0.1",
        "urllib": "~2.9.1",
        "utility": "~1.8.0",
        "xml2js": "~0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "ea5b00da6b8c18eb842dc2844c6294e9d157f970",
      "_id": "ali-oss@4.4.3",
      "_shasum": "3df4bca095cf5c3a5c7310a7f280cd41d87d9436",
      "_from": ".",
      "_npmVersion": "2.15.0",
      "_nodeVersion": "4.4.2",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "dist": {
        "shasum": "3df4bca095cf5c3a5c7310a7f280cd41d87d9436",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.4.3.tgz",
        "integrity": "sha512-j1saMBDjdSozEHjqSeZHkzt0UknK+Eu+W4CyLX4KVAiAt0ddUF06n5HEVqb1l1cup1ekhD8wLc7I+OYi3p+HAQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIC13HxB++CAOU22Fi/73L5d5+6rc0lxw18ZaGkCQ5zvLAiEAtQxtWokDrj61eos0D5Ww/yBpBv61g196lgwaDGUmRuA="
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.4.3.tgz_1463457797788_0.31325428490526974"
      },
      "directories": {}
    },
    "4.4.4": {
      "name": "ali-oss",
      "version": "4.4.4",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.1",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "mm": "^1.3.5",
        "mocha": "^2.5.3",
        "should": "^9.0.0",
        "thunk-mocha": "^1.0.3",
        "uglify-js": "^2.6.2"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^1.0.12",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.9.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "0f3428dbd004dfc43021206810d9b9b394b35828",
      "_id": "ali-oss@4.4.4",
      "_shasum": "22e5a04966897e75698970adc207e1e94012a06e",
      "_from": ".",
      "_npmVersion": "3.8.3",
      "_nodeVersion": "4.4.2",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "dist": {
        "shasum": "22e5a04966897e75698970adc207e1e94012a06e",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.4.4.tgz",
        "integrity": "sha512-P07AA7OLnMxVH29Xlpi1945Tmqd6lZwqaxwztYE+lCKu27SZkze+/D866Mw+9IUVpCF958H+RYjf9kWvueWv7w==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDm7gYcylO+ko2oG1DMhQovaCi/RCggKWIyEqwnNWyDFgIhAIIIThbgZhOdwMM687IDWsIrm3Dsan11cS6sELptu7eq"
          }
        ]
      },
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.4.4.tgz_1464973139663_0.7422168042976409"
      },
      "directories": {}
    },
    "4.5.0": {
      "name": "ali-oss",
      "version": "4.5.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.1",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "mm": "^2.0.0",
        "mocha": "^3.0.0",
        "should": "^11.0.0",
        "thunk-mocha": "^1.0.3",
        "uglify-js": "^2.7.1"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^1.0.12",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.16.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "aa58a9ca8f4da0dbe5dbab518fe782e0f649874b",
      "_id": "ali-oss@4.5.0",
      "_shasum": "8711ef4c94b93674557b9363cb0722c9ab43f07c",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.7.0",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "dist": {
        "shasum": "8711ef4c94b93674557b9363cb0722c9ab43f07c",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.5.0.tgz",
        "integrity": "sha512-fz4yMBA0AxAO6BUPnybP7WA3HrzjTHoRzUIMbknku8QWpeAHbP9xJi6lHnwDXFQRyzVTCbkQDVV46UOE6jQuIA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIAWVQk8Ooa8ClthTIAoFtO3lF809myrSi4BECnazlhr9AiBfrhvPO2FEa7ylr1eW9hJUOfClLkJ8wtmEt/k+S60iKQ=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.5.0.tgz_1476328262895_0.11515970109030604"
      },
      "directories": {}
    },
    "4.6.0": {
      "name": "ali-oss",
      "version": "4.6.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.1",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "mm": "^2.0.0",
        "mocha": "^3.0.0",
        "should": "^11.0.0",
        "thunk-mocha": "^1.0.3",
        "uglify-js": "^2.7.1"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "copy-to": "^2.0.1",
        "dateformat": "^1.0.12",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.16.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "a53f96704015ad945e2b9ca861a1699c2f2aa4ba",
      "_id": "ali-oss@4.6.0",
      "_shasum": "882d9ecccc5dfcaceab934e69dd58b87814329fb",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "4.4.7",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "dist": {
        "shasum": "882d9ecccc5dfcaceab934e69dd58b87814329fb",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.6.0.tgz",
        "integrity": "sha512-l/Gd3Jq2qH6Nu5zLfrBQhqSb9aFw8k22raNLZgiFvjoJ08m9GWNEomo9CXEQpeD3W7k0/uEuUPuWSoBwyLdNnA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDdifFN9ukN3lMdcjQ0pWFMuPKjzD1GIdzJ+SRNAiN9QgIgdmB0dEBQkjLZuXMllG9pD96cJnKH2rhrwTwu32t1BSk="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.6.0.tgz_1477573372326_0.6803097815718502"
      },
      "directories": {}
    },
    "4.6.2": {
      "name": "ali-oss",
      "version": "4.6.2",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.1",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "mm": "^2.0.0",
        "mocha": "^3.0.0",
        "should": "^11.0.0",
        "thunk-mocha": "^1.0.3",
        "uglify-js": "^2.7.1"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "copy-to": "^2.0.1",
        "dateformat": "^1.0.12",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.16.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "519d3a51d80e84d246588d220681fa3afde89ef6",
      "_id": "ali-oss@4.6.2",
      "_shasum": "0513939b3d61821fee521a9ac82a7a59a54a0fdc",
      "_from": ".",
      "_npmVersion": "3.10.8",
      "_nodeVersion": "6.9.1",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "dist": {
        "shasum": "0513939b3d61821fee521a9ac82a7a59a54a0fdc",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.6.2.tgz",
        "integrity": "sha512-ZnIcXbxyfcmdHHtGIk2e2cZi0vAsbrDrIplEFe0lVtRuDAk56Zcj3ktNVBtZ6v8ivuDPmdMxxD/Zb4eurcDOPA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCH3qdqRTa1w46gfEp08EVHdT3gSDDHM0JmUU3TiBMKD4CIQC1MCxr9F64WDow2PwGqEZYL3JNpbF5A/N9QLi11SA6qQ=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.6.2.tgz_1477656893078_0.5765404875855893"
      },
      "directories": {}
    },
    "4.6.3": {
      "name": "ali-oss",
      "version": "4.6.3",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.1",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "mm": "^2.0.0",
        "mocha": "^3.0.0",
        "should": "^11.0.0",
        "thunk-mocha": "^1.0.3",
        "uglify-js": "^2.7.1"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        }
      ],
      "gitHead": "7898d3e5c41e42933127b151b02073f7486f6337",
      "_id": "ali-oss@4.6.3",
      "_shasum": "892e6cc0971dd7769f5481e3d32b27bf84217fee",
      "_from": ".",
      "_npmVersion": "3.8.6",
      "_nodeVersion": "6.0.0",
      "_npmUser": {
        "name": "rockuw",
        "email": "rockuw@gmail.com"
      },
      "dist": {
        "shasum": "892e6cc0971dd7769f5481e3d32b27bf84217fee",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.6.3.tgz",
        "integrity": "sha512-KgxEI5mflAW6DlYOTktwqFVnvdamuSOY1IeR7/Z7hQLUuVTsYjB/hAyIhrQPbwhS+Am2WvnJGbk388CvPmZaDg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIC4pgzBmsnj9tJHT3uC5c+KgxJwRdykYCiD//fYy89xHAiBj9Kg0VTp9xnr4UvlcDuLMsvmSc85+1iyD013iZFH32w=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.6.3.tgz_1482224685186_0.865002206293866"
      },
      "directories": {}
    },
    "4.7.0": {
      "name": "ali-oss",
      "version": "4.7.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "bowser": "^1.6.0",
        "browserify": "^13.0.1",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "mm": "^2.0.0",
        "mocha": "^3.0.0",
        "should": "^11.0.0",
        "sinon": "^1.17.6",
        "thunk-mocha": "^1.0.3",
        "uglify-js": "^2.7.1"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        }
      ],
      "gitHead": "ae262ca2e7dfb8b023297ac3ba87b2ff9d853be0",
      "_id": "ali-oss@4.7.0",
      "_shasum": "9e8f63921557953b4ca0ddf8d22fd97bba80e023",
      "_from": ".",
      "_npmVersion": "3.10.9",
      "_nodeVersion": "6.9.2",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "dist": {
        "shasum": "9e8f63921557953b4ca0ddf8d22fd97bba80e023",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.7.0.tgz",
        "integrity": "sha512-YGosoumq1pLu7M+mfflAv6NITXm6T072GdDOe5jgslXg6rngXo4lIUomt1zSzD5mRaLsgzTlgIPsI5sMr3A4Xg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGNHHs38xH6E+pmJsHZtgVQCQ5s1lK9ab+xT/Lfo+lVQAiB//VqPq2dwXJWhzyJunGKHtAjewVxhZj0bmKpFKiKp3Q=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.7.0.tgz_1483626787937_0.725300250807777"
      },
      "directories": {}
    },
    "4.7.1": {
      "name": "ali-oss",
      "version": "4.7.1",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.1",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "mm": "^2.0.0",
        "mocha": "^3.0.0",
        "should": "^11.0.0",
        "sinon": "^1.17.6",
        "thunk-mocha": "^1.0.3",
        "uglify-js": "^2.7.1"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "2d4aa0603c31b66a251cac40bce57c0326fbbcd1",
      "_id": "ali-oss@4.7.1",
      "_shasum": "1f80966b31d82b3c0015569163daa5f30294eed7",
      "_from": ".",
      "_npmVersion": "3.10.9",
      "_nodeVersion": "6.9.2",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "dist": {
        "shasum": "1f80966b31d82b3c0015569163daa5f30294eed7",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.7.1.tgz",
        "integrity": "sha512-SfsouAtifkJp27xKuGIGRk4eFyp1r9fK3lll5+lVGch0BIi6GsKpHysJHBNC/F+GOMZiN6o7h0WGQ3SHu9Pz5w==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCDv62XKe0IK7bMpJ/UBCrfsz0NXHz3GrKPahyLAxwKzwIhAMfWT/yMaQ7WfY3z6q0q82+WZl2vcfrizYQITelJ5VdU"
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.7.1.tgz_1483633138643_0.921190258814022"
      },
      "directories": {}
    },
    "4.7.3": {
      "name": "ali-oss",
      "version": "4.7.3",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.1",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "mm": "^2.0.0",
        "mocha": "^3.0.0",
        "should": "^11.0.0",
        "sinon": "^1.17.6",
        "thunk-mocha": "^1.0.3",
        "uglify-js": "^2.7.1"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "a7a07eb1efdffaacb3aa525b064a4239766e2892",
      "_id": "ali-oss@4.7.3",
      "_shasum": "980efa728560c6f9f7c7d993837c735ab8b1d3ef",
      "_from": ".",
      "_npmVersion": "3.10.9",
      "_nodeVersion": "6.9.1",
      "_npmUser": {
        "name": "mars-coder",
        "email": "254202194@qq.com"
      },
      "dist": {
        "shasum": "980efa728560c6f9f7c7d993837c735ab8b1d3ef",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.7.3.tgz",
        "integrity": "sha512-1IYredqQjy13XwbCkb8miPgEsAY21e3tgM65dlvkptTp4+M2s5brCElrTn1XimzYqX8LgODgh+UFwJ1iNybo+A==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDC/n3xOXFf1YsXnUV7SuNt0nO2JHWkrEIgBtK+z2LUKQIhAJB0Lx99BfSWbjOCizKP1/lf7NDfE0fPrUdLpbdiXHes"
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "mars-coder",
          "email": "254202194@qq.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.7.3.tgz_1483702123236_0.9862335354555398"
      },
      "directories": {}
    },
    "4.8.0": {
      "name": "ali-oss",
      "version": "4.8.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 30000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.1",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "mm": "^2.0.0",
        "mocha": "^3.0.0",
        "should": "^11.0.0",
        "sinon": "^1.17.6",
        "thunk-mocha": "^1.0.3",
        "uglify-js": "^2.7.1"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "92075ab5eb5c948f627b9838c757162e72607885",
      "_id": "ali-oss@4.8.0",
      "_shasum": "4df201516959ddef1d95abffbf3ca26cdcff25db",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.9.4",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "dist": {
        "shasum": "4df201516959ddef1d95abffbf3ca26cdcff25db",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.8.0.tgz",
        "integrity": "sha512-btJHUOhjXVJ7od/ENnU4PSWII3F2kNgWQYfLpxw+9eIrxChkP4tao8gMoCIRA+hbClds0WPj8RLUDeXz8tNgAQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFnmZraJG5Rfn4dJmiHtQGWyryYZDT4sp9Xbu47Ef9YjAiEAvzBa5FwF/OhWge4yXyxCcXqeo6/D0yA/Sq1F1OKjKgc="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "mars-coder",
          "email": "254202194@qq.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/ali-oss-4.8.0.tgz_1484761237109_0.7773533966392279"
      },
      "directories": {}
    },
    "4.9.0": {
      "name": "ali-oss",
      "version": "4.9.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.1",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "mm": "^2.0.0",
        "mocha": "^3.0.0",
        "should": "^11.0.0",
        "sinon": "^1.17.6",
        "thunk-mocha": "^1.0.3",
        "uglify-js": "^2.7.1"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "c810ae0fce7b03b300da4c7ebf64bbd9f50c8e4e",
      "_id": "ali-oss@4.9.0",
      "_npmVersion": "5.3.0",
      "_nodeVersion": "8.2.1",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "dist": {
        "integrity": "sha512-/SnhFzXTBmomNc89eH+fkmPxZwB1Td3rvVcXkCdg4rCcHi6qMdMqXovvU1pMTsno5ebD28sSZwUUvSDTeQbd1Q==",
        "shasum": "192ee2987e56fc1c8697cc8541e8dfcfd866d453",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.9.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFRuQJiEM1hMm2CzW6O9VRw716lMbUh4XoTrJFFDFy7PAiBzyWtLVzd/DK2Xiy/0Wsx+YA/bEzdInsxv/lxzJaFqZw=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "mars-coder",
          "email": "254202194@qq.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss-4.9.0.tgz_1501226818679_0.7605694038793445"
      },
      "directories": {}
    },
    "4.10.0": {
      "name": "ali-oss",
      "version": "4.10.0",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.1",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "mm": "^2.0.0",
        "mocha": "^3.0.0",
        "should": "^11.0.0",
        "sinon": "^1.17.6",
        "thunk-mocha": "^1.0.3",
        "uglify-js": "^2.7.1"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "64feaaba54b587b43fe63fd8e1701a3ce4bae13f",
      "_id": "ali-oss@4.10.0",
      "_npmVersion": "5.3.0",
      "_nodeVersion": "8.2.1",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "dist": {
        "integrity": "sha512-wjUppdlpcYsRZ4Usg73yGIeav83mOUWbY4zA4NducWLo/wuphTqGjkoJeMCobUZB5n0aRPN4w8f7uW2pQamM7w==",
        "shasum": "47db5c792a27f29a7372a5b7d85307893eed5167",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.10.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDhVUoX/qfFtuIbHU0YML25ydffX3ycbFZtmbFWH4L0/AiB2hE9CPRuX98EH9tz2LRdYI5wsYeiW/9qrZexYNqBuRQ=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "mars-coder",
          "email": "254202194@qq.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss-4.10.0.tgz_1502120112456_0.43652331340126693"
      },
      "directories": {}
    },
    "4.10.1": {
      "name": "ali-oss",
      "version": "4.10.1",
      "description": "aliyun oss(open storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.1",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "mm": "^2.0.0",
        "mocha": "^3.0.0",
        "should": "^11.0.0",
        "sinon": "^1.17.6",
        "thunk-mocha": "^1.0.3",
        "uglify-js": "^2.7.1"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "fde176ea9d18a5d0a147b30541f873903640c7ad",
      "_id": "ali-oss@4.10.1",
      "_shasum": "713bc7227565c162f8cf4e2d2382d2dec4181524",
      "_from": ".",
      "_npmVersion": "3.10.9",
      "_nodeVersion": "6.9.1",
      "_npmUser": {
        "name": "mars-coder",
        "email": "254202194@qq.com"
      },
      "dist": {
        "shasum": "713bc7227565c162f8cf4e2d2382d2dec4181524",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.10.1.tgz",
        "integrity": "sha512-YAcHTkqX850TgaE1emPD7p2CAX0Yy/9GElg0mAjo/zV5noeEbq3v1jpjorBK0SpqXInfLKCJq0TO+v+b6VXrAQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDoBJlcjpxrJyroUm4VRUwG4LwOGImWvfpxqeZTeG/8JAiEAgzs0eMK90+IyZqvtI5rJkJZvOqm3Fn33udiyhKmRMSM="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "mars-coder",
          "email": "254202194@qq.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss-4.10.1.tgz_1504075977626_0.1665414017625153"
      },
      "directories": {}
    },
    "4.10.2": {
      "name": "ali-oss",
      "version": "4.10.2",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.3.13",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.0.1",
        "co-fs": "^1.2.0",
        "crypto-browserify": "^1.0.9",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "mm": "^2.0.0",
        "mocha": "^3.0.0",
        "should": "^11.0.0",
        "sinon": "^1.17.6",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "uglify-js": "^2.7.1"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "984baa183f6abef30be40949c6e2f13d137e129b",
      "_id": "ali-oss@4.10.2",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.4.0",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "dist": {
        "integrity": "sha512-ROfCQ67pCDdkGhTdFex281RJ4InxAHoESp8wB6rXEfIV2y4fIXjhUosMyungKIsPNcLD+BFCQI54VVPA4BezUw==",
        "shasum": "fe1901f7552e77774f8b954dca1af591f1576e40",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.10.2.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBfjdrY1AD1GJslpWHlkANtTviVY/a/0EuF0/bvplXGmAiEA6R9ON8WIUZbNDxBEz32U+1X2lARwTvW1lOriujnx+Q4="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "mars-coder",
          "email": "254202194@qq.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss-4.10.2.tgz_1508479735027_0.9832594839390367"
      },
      "directories": {}
    },
    "4.11.0": {
      "name": "ali-oss",
      "version": "4.11.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims"
      ],
      "browser": {
        "lib/client.js": "./lib/browser.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-browserify": "^1.0.9",
        "crypto-js": "^3.1.9-1",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-mocha": "^1.3.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "platform": "^1.3.4",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "241559927bd949d4548d84f92ea3da1fef53b621",
      "_id": "ali-oss@4.11.0",
      "_npmVersion": "5.4.2",
      "_nodeVersion": "8.7.0",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "dist": {
        "integrity": "sha512-1vQlTaDnjnuxPKTeWFrhNeDWQinhOCFpFYAskdsIlToHiZIdMK4RDpRSiap0400BE4m1cudRQXpFOP1Q+BRU6A==",
        "shasum": "eff2a05f5f5f73bf6d7946a3060bb692c33e34bc",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.11.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIB+Lz2LIrNrB17OXLp2mjfqZXwzhOoJF7C1NVRfUS+oBAiEA+Ng6p1eX1ik4ynqwQeM+Rkgq7juFXaJIrNcrCDTAFsk="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "mars-coder",
          "email": "254202194@qq.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss-4.11.0.tgz_1508900078867_0.4699403045233339"
      },
      "directories": {}
    },
    "4.11.1": {
      "name": "ali-oss",
      "version": "4.11.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims"
      ],
      "browser": {
        "lib/client.js": "./lib/browser.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-browserify": "^1.0.9",
        "crypto-js": "^3.1.9-1",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-mocha": "^1.3.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "platform": "^1.3.4",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "1fe95ebd9623bc1e6ad3505d87cf5f51d76a01f5",
      "_id": "ali-oss@4.11.1",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.9.0",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "dist": {
        "integrity": "sha512-VWuToPP/Nom49sLvqxK0gWNvvr95Jfr4qM+TqcHiCzLsWPr70QXbMbKOfz/5B1yo6tjU0GJV7rQmcCcCHszrBg==",
        "shasum": "6742c15b5eda269cade3bcf133b68c77ddf0eb02",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.11.1.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHNtl9WP3UzFFCyK+hnIaJpMLj5Ypv+83lSa2iF2a4M/AiEA2ZebHpdJhD6iN19ZjuupZMaHOs6k8GHv8XeiwJUuUcM="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "mars-coder",
          "email": "254202194@qq.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss-4.11.1.tgz_1510037228978_0.7034124098718166"
      },
      "directories": {}
    },
    "4.11.2": {
      "name": "ali-oss",
      "version": "4.11.2",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims"
      ],
      "browser": {
        "lib/client.js": "./lib/browser.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-browserify": "^1.0.9",
        "crypto-js": "^3.1.9-1",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-mocha": "^1.3.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "platform": "^1.3.4",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "7654190d7f6c9ece260ba3cb5d5ea000f9bac135",
      "_id": "ali-oss@4.11.2",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.4.0",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "dist": {
        "integrity": "sha512-NDMBR9f7t706i3W/dz5anmkZAex/XHPgISgjZCHLZI+Tnh4n2Rz7ASETw0qstJQFBQzEaiH/Q7F25L8eIlOCEA==",
        "shasum": "55a748fe8216dcf82aa8bfd539d40e3463a8ca2f",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.11.2.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIARr3daFuXiibYrgrIbRygprdXbhWBdvJYTNUrDRMuxTAiEAjpXM+9PFup6clKRM5owu7oYi8/03GY/+ss3KJUo7rtA="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "mars-coder",
          "email": "254202194@qq.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss-4.11.2.tgz_1510041308770_0.12479073042050004"
      },
      "directories": {}
    },
    "4.11.3": {
      "name": "ali-oss",
      "version": "4.11.3",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./lib/browser.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-browserify": "^1.0.9",
        "crypto-js": "^3.1.9-1",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-mocha": "^1.3.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "platform": "^1.3.4",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "b840b5758196c638b33bc1cd96851fa0bf44a6bf",
      "_id": "ali-oss@4.11.3",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.9.3",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "dist": {
        "integrity": "sha512-1jLsYgbsUrYdoInegmfsLvka9T24zhe0iySMF11aHB4aW33Ra7R6UOMrBwbjeNIEgIH8Dk4C4r+sVbDs1NJAlg==",
        "shasum": "968b84ae9d67e727209bc8aeed962c17f084087c",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.11.3.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFAo65aKE7odKhHNnKOEuLrNKUa2F+UJBg/XbhAQKz+TAiA2ajMtYZrv7ZSQ1S8dAwnhhAcTP9DRc7BJUIZlaptwVQ=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "mars-coder",
          "email": "254202194@qq.com"
        },
        {
          "name": "rockuw",
          "email": "rockuw@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss-4.11.3.tgz_1513847795620_0.1012958837673068"
      },
      "directories": {}
    },
    "4.11.4": {
      "name": "ali-oss",
      "version": "4.11.4",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./lib/browser.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-browserify": "^1.0.9",
        "crypto-js": "^3.1.9-1",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-mocha": "^1.3.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "platform": "^1.3.4",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "1e150eb062fa9afe74c9537f8a174dc4d88c5c54",
      "_id": "ali-oss@4.11.4",
      "_shasum": "4b719f39f6cd915b48fd13784401241402badd47",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.3",
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "dist": {
        "shasum": "4b719f39f6cd915b48fd13784401241402badd47",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.11.4.tgz",
        "integrity": "sha512-mmcd9UGMmOLOnWEMrrb7GmP2WJgh0Prumalirid6GwnHjtCC8yCy3aKqcWdBKJ1P0knx05FLID4hifPTUFbg6w==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIH9X0nByH9Pd/6KvTin1rq83x2Zad2zBIp0gtbolAYO1AiAN7OLHkLWHbWzYyfDS9zZKoZrwYfYARBsusgFa1AffVQ=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "peizerao@gmail.com",
          "name": "peizerao"
        },
        {
          "email": "254202194@qq.com",
          "name": "mars-coder"
        },
        {
          "email": "rockuw@gmail.com",
          "name": "rockuw"
        },
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss-4.11.4.tgz_1515488792831_0.03945060237310827"
      },
      "directories": {}
    },
    "4.12.1": {
      "name": "ali-oss",
      "version": "4.12.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./lib/browser.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-browserify": "^1.0.9",
        "crypto-js": "^3.1.9-1",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-mocha": "^1.3.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "platform": "^1.3.4",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "co-priority-queue": "^1.0.3",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "stream-http": "git+https://github.com/jhiesey/stream-http.git#16c1baf1781bd345083adc84bdad5012b6450e57"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "1ca889d29908a89f6468a03d7d0c19afb0b5de2a",
      "_id": "ali-oss@4.12.1",
      "_shasum": "4ecb1cdd0d5c18a299dd43f5ca01b5f44f9ba2a1",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.3",
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "dist": {
        "shasum": "4ecb1cdd0d5c18a299dd43f5ca01b5f44f9ba2a1",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.12.1.tgz",
        "integrity": "sha512-SHaUwhRn8erCDYj4cRIE+JqWrNjfN13GbYCm9EhQVoEghVkH1oyHpjQyCKvYsDx1kL1TLdHjT12O8fH4lx+Ehw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEaBCRNaIC2oC450cMt7tTrErKWQ+xYxIZA/+tNx2F+dAiB25agunnpTSSpJJ6NbHgV263gTJgBYGXw2NuTFL1LB9Q=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "peizerao@gmail.com",
          "name": "peizerao"
        },
        {
          "email": "254202194@qq.com",
          "name": "mars-coder"
        },
        {
          "email": "rockuw@gmail.com",
          "name": "rockuw"
        },
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss-4.12.1.tgz_1517455651810_0.6175645287148654"
      },
      "directories": {}
    },
    "4.12.2": {
      "name": "ali-oss",
      "version": "4.12.2",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./lib/browser.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-browserify": "^1.0.9",
        "crypto-js": "^3.1.9-1",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-mocha": "^1.3.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "platform": "^1.3.4",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0",
        "stream-http": "^2.8.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "co-priority-queue": "^1.0.3",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "0c682d905bc4b7689bda04c1ed7ea8c5229c6644",
      "_id": "ali-oss@4.12.2",
      "_shasum": "fde4ee552970d955345557c5622abcc2961cbd08",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.3",
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "dist": {
        "shasum": "fde4ee552970d955345557c5622abcc2961cbd08",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.12.2.tgz",
        "integrity": "sha512-w2zcgrfVzANrRQCW1dAApAStCqWKVL3Y+Vf4M+koLANG+/oJU9NftKEsb6blxDCzzhobNsZz7XzpWDV5lTigjA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDc23u5COi1MVP23xbbwnE+CUWXUaif71IrZiJlnBETxAiEAgQQTtMz7xVmnrnw/ftNS8dkCx6bY/n3ErR288dBV6oI="
          }
        ]
      },
      "maintainers": [
        {
          "email": "peizerao@gmail.com",
          "name": "peizerao"
        },
        {
          "email": "254202194@qq.com",
          "name": "mars-coder"
        },
        {
          "email": "rockuw@gmail.com",
          "name": "rockuw"
        },
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss-4.12.2.tgz_1517487850916_0.0718755112029612"
      },
      "directories": {}
    },
    "4.13.0": {
      "name": "ali-oss",
      "version": "4.13.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./lib/browser.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-browserify": "^1.0.9",
        "crypto-js": "^3.1.9-1",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-mocha": "^1.3.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "platform": "^1.3.4",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "co-priority-queue": "^1.0.3",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "stream-http": "^2.8.0",
        "any-promise": "^1.3.0"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "2639a05eb993f9b531a461c28d93e9123005b6db",
      "_id": "ali-oss@4.13.0",
      "_shasum": "a524e4efeb1054f055ef853f80e99718eed932b6",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.3",
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "dist": {
        "shasum": "a524e4efeb1054f055ef853f80e99718eed932b6",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.13.0.tgz",
        "fileCount": 30,
        "unpackedSize": 1440614,
        "integrity": "sha512-fSjQJ/yZYt4cw7j6zRTsEkNIX3FD9vgq0KKoEvBsfL0WYBRFm8gBP9Y1UJ+dxy1x7uQd2cXj6YQBl9hkgjQXwg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCnd0yalLZ3LbbC0hcbnSLwnLrDThhF9NO49jZDmB/u9wIhAJHjhAh+Env/ERBaH7KWFSvvZUO/trcFt7Dx/mWVRqzX"
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "254202194@qq.com",
          "name": "mars-coder"
        },
        {
          "email": "peizerao@gmail.com",
          "name": "peizerao"
        },
        {
          "email": "rockuw@gmail.com",
          "name": "rockuw"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_4.13.0_1520472622915_0.3162493482246962"
      },
      "_hasShrinkwrap": false
    },
    "4.13.1": {
      "name": "ali-oss",
      "version": "4.13.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./lib/browser.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-browserify": "^1.0.9",
        "crypto-js": "^3.1.9-1",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-mocha": "^1.3.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "platform": "^1.3.4",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "co-priority-queue": "^1.0.3",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "stream-http": "^2.8.0",
        "any-promise": "^1.3.0"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "865b14def3f1836f148acd5dc5224be8e3c6a925",
      "_id": "ali-oss@4.13.1",
      "_shasum": "9bacde1be140ecdf33412325a2929bd4b0a57f5f",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.3",
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "dist": {
        "shasum": "9bacde1be140ecdf33412325a2929bd4b0a57f5f",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.13.1.tgz",
        "fileCount": 30,
        "unpackedSize": 1441462,
        "integrity": "sha512-FtSbYTrJdVdE4uLhRS79MN8Awp7zwLy+k7RjKK4u+93LIEfoVOJs4EnsOcsXpTMYfSSTPB73V+S7gMSk0YY+9w==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCHEr0N26ijWJX6q7irmdDClE1naHfeB527Gm7/XDlkUgIgFBQQDNZeshffUuXPa+O7dtPK8IJcXTUfuXvkuCBMzx8="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "254202194@qq.com",
          "name": "mars-coder"
        },
        {
          "email": "peizerao@gmail.com",
          "name": "peizerao"
        },
        {
          "email": "rockuw@gmail.com",
          "name": "rockuw"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_4.13.1_1520776192338_0.7246988746838718"
      },
      "_hasShrinkwrap": false
    },
    "4.13.2": {
      "name": "ali-oss",
      "version": "4.13.2",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./lib/browser.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-browserify": "^1.0.9",
        "crypto-js": "^3.1.9-1",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-mocha": "^1.3.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "platform": "^1.3.4",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "co-priority-queue": "^1.0.3",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "stream-http": "^2.8.0",
        "any-promise": "^1.3.0"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "02fef3fbac60dfd024f51fa6dea7522310f89341",
      "_id": "ali-oss@4.13.2",
      "_shasum": "0c93d8ef4db1d7a7fe429d6182f9b3bb528891e6",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.3",
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "dist": {
        "shasum": "0c93d8ef4db1d7a7fe429d6182f9b3bb528891e6",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.13.2.tgz",
        "fileCount": 30,
        "unpackedSize": 1441698,
        "integrity": "sha512-FhP1OZAiVqZgPEPLTBCY03oqmPg1H5bo0RMWYbqSr7qeGa5ylm5kkNvwi2zqX5VPWX4P9xKCmRijR+TcgJqJJQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDewW9IKRjfMuzwbOVdVnADm53kUFCpp5O3yRF14EhvPwIhANlqvMk38KYbRTm4TcA04iam1TIvNPYlo9Gqh9DD/6zf"
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "254202194@qq.com",
          "name": "mars-coder"
        },
        {
          "email": "peizerao@gmail.com",
          "name": "peizerao"
        },
        {
          "email": "rockuw@gmail.com",
          "name": "rockuw"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_4.13.2_1520927393511_0.955918043133247"
      },
      "_hasShrinkwrap": false
    },
    "5.0.0": {
      "name": "ali-oss",
      "version": "5.0.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./lib/browser.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=6"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-safari-launcher": "^1.0.0",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "co-priority-queue": "^1.0.3",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "stream-http": "^2.8.0",
        "any-promise": "^1.3.0"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "188b5ffb246ec7c60f6207304ff2c1cec39a5da1",
      "_id": "ali-oss@5.0.0",
      "_shasum": "80f42ff18457ca18119036fb6cc25c50450acea6",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.3",
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "dist": {
        "shasum": "80f42ff18457ca18119036fb6cc25c50450acea6",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-5.0.0.tgz",
        "fileCount": 35,
        "unpackedSize": 1468879,
        "integrity": "sha512-lq8g7qCFAnsD0qIu4+n4eczkfN3PCw06CQs2EqTRCttv33zxz48OknaLaUiid3nrzrbNntKb/WtvELYcMMD3Kw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIH+23AKm8be5INgHWFyHIs+r2ZDGUhcRl+AlC/vncw4aAiACRTdxYImUE9yVl1GUMEKcqiwvWTtl9pzwDCV2FgCMLQ=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "254202194@qq.com",
          "name": "mars-coder"
        },
        {
          "email": "peizerao@gmail.com",
          "name": "peizerao"
        },
        {
          "email": "rockuw@gmail.com",
          "name": "rockuw"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_5.0.0_1522741966156_0.5323264013093847"
      },
      "_hasShrinkwrap": false
    },
    "4.14.2": {
      "name": "ali-oss",
      "version": "4.14.2",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./lib/browser.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-browserify": "^1.0.9",
        "crypto-js": "^3.1.9-1",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-mocha": "^1.3.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "platform": "^1.3.4",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "co-priority-queue": "^1.0.3",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "stream-http": "^2.8.0",
        "any-promise": "^1.3.0"
      },
      "publishConfig": {
        "tag": "release-4.x"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "readme": "oss-nodejs-sdk\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage][cov-image]][cov-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/ali-oss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/ali-oss\n[travis-image]: https://img.shields.io/travis/ali-sdk/ali-oss/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ali-sdk/ali-oss.svg?branch=master\n[cov-image]: http://codecov.io/github/ali-sdk/ali-oss/coverage.svg?branch=master\n[cov-url]: http://codecov.io/github/ali-sdk/ali-oss?branch=master\n[david-image]: https://img.shields.io/david/ali-sdk/ali-oss.svg?style=flat-square\n[david-url]: https://david-dm.org/ali-sdk/ali-oss\n\naliyun OSS(object storage service) Node.js client.\n\n## Install\n\n```bash\nnpm install ali-oss --save\n```\n\n## License\n\n[MIT](LICENSE)\n\n# OSS Usage\n\nOSS, Object Storage Service. Equal to well known Amazon [S3](http://aws.amazon.com/s3/).\n\n## Summary\n\n- [Data Regions](#data-regions)\n- [Create Account](#create-acount)\n- [Create A Bucket Instance](#create-a-bucket-instance)\n  - [#oss(options)](#ossoptions)\n- [Bucket Operations](#bucket-operations)\n  - Base\n    - [.listBuckets*(query[, options])](#listbucketsquery-options)\n    - [.putBucket*(name, region[, options])](#putbucketname-region-options)\n    - [.useBucket(name, region)](#usebucketname-region)\n    - [.deleteBucket*(name, region[, options])](#deletebucketname-region-options)\n  - ACL\n    - [.putBucketACL*(name, region, acl[, options])](#putbucketaclname-region-acl-options)\n    - [.getBucketACL*(name, region[, options])](#getbucketaclname-region-options)\n  - Logging\n    - [.putBucketLogging*(name, region, prefix[, options])](#putbucketloggingname-region-prefix-options)\n    - [.getBucketLogging*(name, region[, options])](#getbucketloggingname-region-options)\n    - [.deleteBucketLogging*(name, region[, options])](#deletebucketloggingname-region-options)\n  - Website\n    - [.putBucketWebsite*(name, region, config[, options])](#putbucketwebsitename-region-config-options)\n    - [.getBucketWebsite*(name, region[, options])](#getbucketwebsitename-region-options)\n    - [.deleteBucketWebsite*(name, region[, options])](#deletebucketwebsitename-region-options)\n  - Referer\n    - [.putBucketReferer*(name, region, allowEmpty, referers[, options])](#putbucketreferername-region-allowempty-referers-options)\n    - [.getBucketReferer*(name, region[, options])](#getbucketreferername-region-options)\n    - [.deleteBucketReferer*(name, region[, options])](#deletebucketreferername-region-options)\n  - Lifecycle\n    - [.putBucketLifecycle*(name, region, rules[, options])](#putbucketlifecyclename-region-rules-options)\n    - [.getBucketLifecycle*(name, region[, options])](#getbucketlifecyclename-region-options)\n    - [.deleteBucketLifecycle*(name, region[, options])](#deletebucketlifecyclename-region-options)\n  - CORS\n    - [.putBucketCORS*(name, region, rules[, options])](#putbucketcorsname-region-rules-options)\n    - [.getBucketCORS*(name, region[, options])](#getbucketcorsname-region-options)\n    - [.deleteBucketCORS*(name, region[, options])](#deletebucketcorsname-region-options)\n- [Object Operations](#object-operations)\n  - [.list*(query[, options])](#listquery-options)\n  - [.put*(name, file[, options])](#putname-file-options)\n  - [.putStream*(name, stream[, options])](#putstreamname-stream-options)\n  - [.append*(name, file[, options])](#apendname-file-options)\n  - [.getObjectUrl(name[, baseUrl])](#getobjecturlname-baseurl)\n  - [.head*(name[, options])](#headname-options)\n  - [.get*(name, file[, options])](#getname-file-options)\n  - [.getStream*(name[, options])](#getstreamname-options)\n  - [.delete*(name[, options])](#deletename-options)\n  - [.copy*(name, sourceName[, options])](#copyname-sourcename-options)\n  - [.putMeta*(name, meta[, options])](#putmetaname-meta-options)\n  - [.deleteMulti*(names[, options])](#deletemultinames-options)\n  - [.signatureUrl(name[, options])](#signatureurlname-options)\n  - [.putACL*(name, acl[, options])](#putaclname-acl-options)\n  - [.getACL*(name[, options])](#getaclname-options)\n  - [.initMultipartUpload*(name[, options])](#initmultipartuploadname-options)\n  - [.uploadPart*(name, uploadId, partNo, file, start, end[, options])](#uploadpartname-uploadid-partno-file-start-end-options)\n  - [.uploadPartCopy*(name, uploadId, partNo, range, sourceData[, options])](#uploadpartcopyname-uploadid-partno-range-sourcedata-options)\n  - [.completeMultipartUpload(name, uploadId, parts[, options])](#completemultipartuploadname-uploadid-parts-options)\n  - [.multipartUpload*(name, file[, options])](#multipartuploadname-file-options)\n  - [.multipartUploadCopy*(name, sourceData[, options])](#multipartuploadcopyname-sourcedata-options)\n  - [.listParts*(name, uploadId[, query, options])](#listparts-name-uploadid-query-options)\n  - [.listUploads*(query[, options])](#listuploadsquery-options)\n  - [.abortMultipartUpload*(name, uploadId[, options])](#abortmultipartuploadname-uploadid-options)\n- [RTMP Operations](#rtmp-operations)\n  - [.putChannel*(id, conf[, options])](#putchannelid-conf-options)\n  - [.getChannel*(id[, options])](#getchannelid-options)\n  - [.deleteChannel*(id[, options])](#deletechannelid-options)\n  - [.putChannelStatus*(id, status[, options])](#putchannelstatusid-status-options)\n  - [.getChannelStatus*(id[, options])](#getchannelstatusid-options)\n  - [.listChannels*(query[, options])](#listchannelsquery-options)\n  - [.getChannelHistory*(id[, options])](#getchannelhistoryid-options)\n  - [.createVod*(id, name, time[, options])](#createvodid-name-time-options)\n  - [.getRtmpUrl(channelId[, options])](#getrtmpurlchannelid-options)\n- [Create A Image Service Instance](#create-a-image-service-instance)\n  - [#oss.ImageClient(options)](#ossimageclientoptions)\n- [Image Operations](#image-operations)\n  - [imgClient.get*(name, file[, options])](#imgclientgetname-file-options)\n  - [imgClient.getStream*(name[, options])](#imgclientgetstreamname-options)\n  - [imgClient.getExif*(name[, options])](#imgclientgetexifname-options)\n  - [imgClient.getInfo*(name[, options])](#imgclientgetinfoname-options)\n  - [imgClient.putStyle*(name, style[, options])](#imgclientputstylename-style-options)\n  - [imgClient.getStyle*(name[, options])](#imgclientgetstylename-options)\n  - [imgClient.listStyle*([options])](#imgclientliststyleoptions)\n  - [imgClient.deleteStyle*(name[, options])](#imgclientdeletestylename-options)\n  - [imgClient.signatureUrl(name)](#imgclientsignatureurlname)\n- [Wrapper Usage](#wrapper-usage)\n- [Browser Usage](#browser-usage)\n- [Known Errors](#known-errors)\n\n## Data Regions\n\n[OSS current data regions](https://help.aliyun.com/document_detail/oss/user_guide/endpoint_region.html).\n\nregion | country | city | endpoint | internal endpoint\n---  | ---     | ---  | --- | ---\noss-cn-hangzhou | China | HangZhou | oss-cn-hangzhou.aliyuncs.com | oss-cn-hangzhou-internal.aliyuncs.com\noss-cn-shanghai | China | ShangHai | oss-cn-shanghai.aliyuncs.com | oss-cn-shanghai-internal.aliyuncs.com\noss-cn-qingdao | China | QingDao | oss-cn-qingdao.aliyuncs.com | oss-cn-qingdao-internal.aliyuncs.com\noss-cn-beijing | China | BeiJing | oss-cn-beijing.aliyuncs.com | oss-cn-beijing-internal.aliyuncs.com\noss-cn-shenzhen | China | ShenZhen | oss-cn-shenzhen.aliyuncs.com | oss-cn-shenzhen-internal.aliyuncs.com\noss-cn-hongkong | China | HongKong | oss-cn-hongkong.aliyuncs.com | oss-cn-hongkong-internal.aliyuncs.com\noss-us-west-1 | US | Silicon Valley | oss-us-west-1.aliyuncs.com | oss-us-west-1-internal.aliyuncs.com\noss-ap-southeast-1 | Singapore | Singapore | oss-ap-southeast-1.aliyuncs.com | oss-ap-southeast-1-internal.aliyuncs.com\n\n## Create Account\n\nGo to [OSS website](http://www.aliyun.com/product/oss/?lang=en), create a new account for new user.\n\nAfter account created, you can create the OSS instance and get the `accessKeyId` and `accessKeySecret`.\n\n## Create A Bucket Instance\n\nEach OSS instance required `accessKeyId`, `accessKeySecret` and `bucket`.\n\n### #oss(options)\n\nCreate a Bucket store instance.\n\noptions:\n\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- [stsToken] {String} used by temporary authorization, detail [see](https://www.alibabacloud.com/help/doc-detail/32077.htm)\n- [bucket] {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [endpoint] {String} oss region domain. It takes priority over `region`.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`.\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`.\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [secure] {Boolean} instruct OSS client to use HTTPS (secure: true) or HTTP (secure: false) protocol.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nvar oss = require('ali-oss');\n\nvar store = oss({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\n```\n\n## Bucket Operations\n\n### .listBuckets*(query[, options])\n\nList buckets in this account.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search buckets using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [max-keys] {String|Number} max buckets, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return buckets list on `buckets` properties.\n\n- buckets {Array<BucketMeta>} bucket meta info list\n  Each `BucketMeta` will contains blow properties:\n    - name {String} bucket name\n    - region {String} bucket store data region, e.g.: `oss-cn-hangzhou-a`\n    - creationDate {String} bucket create GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n- owner {Object} object owner, including `id` and `displayName`\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 buckets\n\n```js\nvar result = yield store.listBuckets({\n  \"max-keys\": 10\n});\nconsole.log(result);\n```\n\n### .putBucket*(name, region[, options])\n\nCreate a new bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket exists and not belong to current account, will throw BucketAlreadyExistsError.\n  If bucket not exists, will create a new bucket and set it's ACL.\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n  If change exists bucket region, will throw BucketAlreadyExistsError.\n  If region value invalid, will throw InvalidLocationConstraintError.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the bucket name on `bucket` properties.\n\n- bucket {String} bucket name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Create a bucket name `helloworld` location on HongKong\n\n```js\nyield store.putBucket('helloworld', 'oss-cn-hongkong');\n// use it by default\nstore.useBucket('helloworld', 'oss-cn-hongkong');\n```\n\n### .deleteBucket*(name, region[, options])\n\nDelete an empty bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket is not empty, will throw BucketNotEmptyError.\n  If bucket is not exists, will throw NoSuchBucketError.\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete the exists 'helloworld' bucket on 'oss-cn-hongkong'\n\n```js\nyield store.deleteBucket('helloworld', {\n  region: 'oss-cn-hongkong'\n});\n```\n\n### .useBucket(name, region)\n\nUse the bucket.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.useBucket('helloworld', 'oss-cn-hongkong');\n```\n\n---\n\n### .putBucketACL*(name, region, acl[, options])\n\nUpdate the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- acl {String} access control list, current available: `public-read-write`, `public-read` and `private`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set bucket `helloworld` to `public-read-write`\n\n```js\nyield store.putBucketACL('helloworld', 'oss-cn-hongkong', 'public-read-write');\n```\n\n### .getBucketACL*(name, region[, options])\n\nGet the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld`\n\n```js\nvar result = yield store.getBucketACL('helloworld', 'oss-cn-hongkong');\nconsole.log(result.acl);\n```\n\n---\n\n### .putBucketLogging*(name, region, prefix[, options])\n\nUpdate the bucket logging settings.\nLog file will create every one hour and name format: `<prefix><bucket>-YYYY-mm-DD-HH-MM-SS-UniqueString`.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [prefix] {String} prefix path name to store the log files\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Enable bucket `helloworld` logging and save with prefix `logs/`\n\n```js\nyield store.putBucketLogging('helloworld', 'oss-cn-hongkong', 'logs/');\n```\n\n### .getBucketLogging*(name, region[, options])\n\nGet the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- enable {Boolean} enable logging or not\n- prefix {String} prefix path name to store the log files, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld` logging settings\n\n```js\nvar result = yield store.getBucketLogging('helloworld', 'oss-cn-hongkong');\nconsole.log(result.enable, result.prefix);\n```\n\n### .deleteBucketLogging(name, region[, options])\n\nDelete the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketWebsite*(name, region, config[, options])\n\nSet the bucket as a static website.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- config {Object} website config, contains blow properties:\n  - index {String} default page, e.g.: `index.html`\n  - [error] {String} error page, e.g.: 'error.html'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketWebsite('hello', 'oss-cn-hangzhou', {\n  index: 'index.html'\n});\n```\n\n### .getBucketWebsite*(name, region[, options])\n\nGet the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- index {String} index page\n- error {String} error page, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketWebsite*(name, region[, options])\n\nDelete the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketReferer*(name, region, allowEmpty, referers[, options])\n\nSet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list, e.g.:\n  ```js\n  [\n    'https://npm.taobao.org',\n    'http://cnpmjs.org'\n  ]\n  ```\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketReferer('hello', 'oss-cn-hangzhou', false, [\n  'https://npm.taobao.org',\n  'http://cnpmjs.org'\n]);\n```\n\n### .getBucketReferer*(name, region[, options])\n\nGet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketReferer*(name, region[, options])\n\nDelete the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketLifecycle*(name, region, rules[, options])\n\nSet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- rules {Array<Rule>} rule config list, each `Rule` will contains blow properties:\n  - [id] {String} rule id, if not set, OSS will auto create it with random string.\n  - prefix {String} store prefix\n  - status {String} rule status, allow values: `Enabled` or `Disabled`\n  - [days] {Number|String} expire after the `days`\n  - [date] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `date` and `days` only set one.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketLifecycle('hello', 'oss-cn-hangzhou', [\n  {\n    id: 'delete after one day',\n    prefix: 'logs/',\n    status: 'Enabled',\n    days: 1\n  },\n  {\n    prefix: 'logs2/',\n    status: 'Disabled',\n    date: '2022-10-11T00:00:00.000Z'\n  }\n]);\n```\n\n### .getBucketLifecycle*(name, region[, options])\n\nGet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the lifecycle rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketLifecycle*(name, region[, options])\n\nDelete the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketCORS*(name, region, rules[, options])\n\nSet CORS rules of the bucket object\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- rules {Array<Rule>} rule config list, each `Rule` will contains below properties:\n  - allowedOrigin {String/Array} configure for Access-Control-Allow-Origin header\n  - allowedMethod {String/Array} configure for Access-Control-Allow-Methods header\n  - [allowedHeader] {String/Array} configure for Access-Control-Allow-Headers header\n  - [exposeHeader] {String/Array} configure for Access-Control-Expose-Headers header\n  - [maxAgeSeconds] {String} configure for Access-Control-Max-Age header\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketCORS('hello', 'oss-cn-hangzhou', [\n  {\n    allowedOrigin: '*',\n    allowedMethod: [\n      'GET',\n      'HEAD',\n    ],\n  }\n]);\n```\n\n### .getBucketCORS*(name, region[, options])\n\nGet CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the CORS rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketCORS*(name, region[, options])\n\nDelete CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n## Object Operations\n\nAll operations function is [generator], except `signatureUrl`.\n\ngenerator function format: `functionName*(...)`.\n\n### .put*(name, file[, options])\n\nAdd an object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br> \n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL. \n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var). \n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.  \n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- data {Object} callback server response data, sdk use JSON.parse() return\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through local file path\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.put('ossdemo/demo.txt', filepath);\nconsole.log(object);\n\n{\n  name: 'ossdemo/demo.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829244'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through content buffer\n\n```js\nvar object = yield store.put('ossdemo/buffer', new Buffer('foo content'));\nconsole.log(object);\n\n{\n  name: 'ossdemo/buffer',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/buffer',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"xxx\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829243'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through readstream\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.put('ossdemo/readstream.txt', fs.createReadStream(filepath));\nconsole.log(object);\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .putStream*(name, stream[, options])\n\nAdd a stream object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- stream {ReadStream} object ReadStream content instance\n- [options] {Object} optional parameters\n  - [contentLength] {Number} the stream length, `chunked encoding` will be used if absent\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br> \n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL. \n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var). \n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.  \n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through readstream\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.put('ossdemo/readstream.txt', fs.createReadStream(filepath));\nconsole.log(object);\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .append*(name, file[, options])\n\nAppend an object to the bucket, it's almost same as put, but it can add content to existing object rather than override it.\n\nAll parameters are same as put except for options.position\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [position] {String} specify the position which is the content length of the latest object\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nobject:\n\n- name {String} object name\n- url {String} the url of oss\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- nextAppendPosition {String} the next position\n\nexample:\n\n```js\nvar object = yield store.apend('ossdemo/buffer', new Buffer('foo'));\n\n// append content to the existing object\nobject = yield store.apend('ossdemo/buffer', new Buffer('bar'), {\n  position: object.nextAppendPosition,\n});\n```\n\n### .getObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `endpoint`.\n\ne.g.:\n\n```js\nconst cdnUrl = client.getObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .head*(name[, options])\n\nHead an object and get the meta info.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status, maybe 200 or 304\n- meta {Object} object user meta, if not set on `put()`, will return null.\n    If return status 304, meta will be null too\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Head an exists object and get user meta\n\n```js\nyield this.store.put('ossdemo/head-meta', new Buffer('foo'), {\n  meta: {\n    uid: 1,\n    path: 'foo/demo.txt'\n  }\n});\nvar object = this.store.head('ossdemo/head-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  meta: {\n    uid: '1',\n    path: 'foo/demo.txt'\n  },\n  res: { ... }\n}\n```\n\n- Head a not exists object\n\n```js\nvar object = this.store.head('ossdemo/head-meta');\n// will throw NoSuchKeyError\n```\n\n### .get*(name[, file, options])\n\nGet an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the content\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Range' get specifying range bytes content, e.g.: `Range: bytes=0-9`\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object and store it to the local file\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nyield store.get('ossdemo/demo.txt', filepath);\n```\n\n_ Store object to a writestream\n\n```js\nyield store.get('ossdemo/demo.txt', somestream);\n```\n\n- Get an object content buffer\n\n```js\nvar result = yield store.get('ossdemo/demo.txt');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a processed image and store it to the local file\n\n```js\nvar filepath = '/home/ossdemo/demo.png';\nyield store.get('ossdemo/demo.png', filepath, {process: 'image/resize,w_200'});\n```\n\n- Get a not exists object\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nyield store.get('ossdemo/not-exists-demo.txt', filepath);\n// will throw NoSuchKeyError\n```\n\n### .getStream*(name[, options])\n\nGet an object read stream.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object stream\n\n```js\nvar result = yield store.getStream('ossdemo/demo.txt');\nresult.stream.pipe(fs.createWriteStream('some file.txt'));\n```\n\n### .delete*(name[, options])\n\nDelete an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf delete object not exists, will also delete success.\n\nexample:\n\n- Delete an exists object\n\n```js\nyield store.delete('ossdemo/someobject');\n```\n\n- Delete a not exists object\n\n```js\nyield store.delete('ossdemo/some-not-exists-object');\n```\n\n### .copy*(name, sourceName[, options])\n\nCopy an object from `sourceName` to `name`.\n\nparameters:\n\n- name {String} object name store on OSS\n- sourceName {String} source object name\n  If `sourceName` start with `/`, meaning it's a full name contains the bucket name.\n  e.g.: `/otherbucket/logo.png` meaning copy `otherbucket` logn.png object to current bucket.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n    If the `meta` set, will override the source object meta.\n  - [headers] {Object} extra headers\n    - 'If-Match' do copy if source object etag equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' do copy if source object etag not equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-Modified-Since' do copy if source object modified after this time,\n        otherwise throw PreconditionFailedError\n    - 'If-Unmodified-Since' do copy if source object modified before this time,\n        otherwise throw PreconditionFailedError\n\nSuccess will return the copy result in `data` property.\n\nobject:\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT string\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf source object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Copy same bucket object\n\n```js\nvar result = yield store.copy('newName', 'oldName');\n```\n\n- Copy other bucket object\n\n```js\nvar result = yield store.copy('logo.png', '/other-bucket/logo.png');\n```\n\n### .putMeta*(name, meta[, options])\n\nSet an exists object meta.\n\nparameters:\n\n- name {String} object name store on OSS\n- meta {Object} user meta, will send with `x-oss-meta-` prefix string\n  e.g.: `{ uid: 123, pid: 110 }`\n  If `meta: null`, will clean up the exists meta\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the copy result in `data` property.\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Update exists object meta\n\n```js\nvar result = yield store.putMeta('ossdemo.txt', {\n  uid: 1, pid: 'p123'\n});\nconsole.log(result);\n```\n\n- Clean up object meta\n\n```js\nyield store.putMeta('ossdemo.txt', null);\n```\n\n### .deleteMulti*(names[, options])\n\nDelete multi objects in one request.\n\nparameters:\n\n- names {Array<String>} object names, max 1000 objects in once.\n- [options] {Object} optional parameters\n  - [quiet] {Boolean} quiet mode or verbose mode, default is `false`, verbose mode\n    quiet mode: if all objects delete succes, return emtpy response.\n      otherwise return delete error object results.\n    verbose mode: return all object delete results.\n  - [timeout] {Number} the operation timeout\n\nSuccess will return delete success objects in `deleted` property.\n\n- [deleted] {Array<String>} deleted object names list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete multi objects in quiet mode\n\n```js\nvar result = yield store.deleteMulti(['obj1', 'obj2', 'obj3'], {\n  quiet: true\n});\n```\n\n- Delete multi objects in verbose mode\n\n```js\nvar result = yield store.deleteMulti(['obj1', 'obj2', 'obj3']);\n```\n\n### .list*(query[, options])\n\nList objects in the bucket.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 objects\n\n```js\nvar result = yield store.list();\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nvar result = yield store.list({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nvar result = yield store.list({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n### .signatureUrl(name[, options])\n\nCreate a signature url for download or upload object.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [method] {String} the HTTP method, default is 'GET'\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [response] {Object} set the response headers for download\n    - [content-type] {String} set the response content type\n    - [content-disposition] {String} set the response content disposition\n    - [cache-control] {String} set the response cache control\n    - See more: https://help.aliyun.com/document_detail/oss/api-reference/object/GetObject.html\n\nSuccess will return signature url.\n\nexample:\n\n- Get signature url for object\n\n```js\nvar url = store.signatureUrl('ossdemo.txt');\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT'\n});\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  response: {\n    'content-type': 'text/custom',\n    'content-disposition': 'attachment'\n  }\n});\nconsole.log(url);\n```\n\n- Get a signature url for a processed image\n\n```js\nvar url = store.signatureUrl('ossdemo.png', {\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.png', {\n  expires: 3600,\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n```\n\n### .putACL*(name, acl[, options])\n\nSet object's ACL.\n\nparameters:\n\n- name {String} object name\n- acl {String} acl (private/public-read/public-read-write)\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set an object's ACL\n\n```js\nyield store.putACL('ossdemo.txt', 'public-read');\n```\n\n### .getACL*(name[, options])\n\nGet object's ACL.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get an object's ACL\n\n```js\nvar result = yield store.getACL('ossdemo.txt');\nconsole.log(result.acl);\n```\n\n### .initMultipartUpload(name[, options])\nBefore transmitting data in the Multipart Upload mode, \nyou must call the Initiate Multipart Upload interface to notify the OSS to initiate a Multipart Upload event. \nThe Initiate Multipart Upload interface returns a globally unique Upload ID created by the OSS server to identify this Multipart Upload event.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] Mime file type e.g.: application/octet-stream\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - [x-oss-server-side-encryption]\n    Specify the server-side encryption algorithm used to upload each part of this object,Type: string, Valid value: AES256 `x-oss-server-side-encryption: AES256`<br>\n    if use in browser you should be set cors expose header x-oss-server-side-encryption\n\nSuccess will return:\n  \n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-server-side-encryption] if set request header x-oss-server-side-encryption, will return \n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- uploadId {String} upload id, use for uploadPart, completeMultipart\n\nexample:    \n\n```js\n  var result = yield store.initMultipartUpload('object');\n  console.log(result);\n```\n\n### .uploadPart(name, uploadId, partNo, file, start, end[, options])\nAfter initiating a Multipart Upload event, you can upload data in parts based on the specified object name and Upload ID. \n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- file {File|String}  is File or FileName, the whole file<br>\n Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB. <br>\n In Node you can use File or FileName, but in browser you only can use File.\n- start {Number} part start bytes  e.g: 102400\n- end {Number} part end bytes  e.g: 204800\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n  \n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:    \n\n```js\n  var name = 'object';\n  var result = yield store.initMultipartUpload(name);\n  var uploadId = result.uploadId;\n  var file; //the data you want to upload, is a File or FileName(only in node)\n  //if file part is 10  \n  var partSize = 100 * 1024;\n  var fileSize = 10 * partSize;//you need to calculate\n  var dones = [];\n  for (var i = 1; i <= 10; i++) {\n    var start = partSize * (i -1);\n    var end = Math.min(start + partSize, fileSize);\n    var part = yield store.uploadPart(name, uploadId, i, file, start, end);\n    dones.push({\n      number: i,\n      etag: part.etag\n    });\n    console.log(part);\n  }\n  \n  //end need to call completeMultipartUpload api\n```\n\n### .uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])\nUsing Upload Part Copy, you can copy data from an existing object and upload a part of the data. \nWhen copying a file larger than 1 GB, you must use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- range {String} Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB, range value like `0-102400`\n- sourceData {Object} \n  - sourceKey {String} the source object name\n  - sourceBucketName {String} the source bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} The following request header is used for the source objects specified by x-oss-copy-source.\n    - [x-oss-copy-source-if-match]  default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message. \n    - [x-oss-copy-source-if-none-match]   default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message. \n    - [x-oss-copy-source-if-unmodified-since]   default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed. \n    - [x-oss-copy-source-if-modified-since]   default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message. \n  \nSuccess will return:\n  \n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n    \nexample:    \n\n```js\n  var name = 'object';\n  var result = yield store.initMultipartUpload(name);\n \n  var partSize = 100 * 1024;//100kb \n  //if file part is 10\n  for (var i = 1; i <= 10; i++) {\n    var start = partSize * (i -1);\n    var end = Math.min(start + partSize, fileSize);\n    var range = start + '-' + (end - 1);\n    var part = yield store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    });\n    console.log(part);\n  }\n  \n  //end need complete api\n```\n\n### .completeMultipartUpload(name, uploadId, parts[, options])\nAfter uploading all data parts, you must call the Complete Multipart Upload API to complete Multipart Upload for the entire file.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- parts {Array} more part {Object} from uploadPartCopy, , each in the structure:\n  - number {Number} partNo\n  - etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br> \n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL. \n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var). \n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.  \n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n        \n  \nSuccess will return:\n  \n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data , sdk use JSON.parse() return\n    \nexample:    \n\n```js\n    \n  //init multipart\n  var name = 'object';\n  var result = yield store.initMultipartUpload(name);\n \n  //upload part\n  var file; //the data you want to upload, this example size is 10 * 100 * 1024\n  var fileSize;//you need to calculate\n  var partSize = 100 * 1024;//100kb \n  var done = [];\n  //if file part is 10\n  for (var i = 1; i <= 10; i++) {\n    var start = partSize * (i -1);\n    var end = Math.min(start + partSize, fileSize);\n    var data = file.slice(start, end);\n    var part = yield store.uploadPart(name, result.uploadId, i, data);\n    console.log(part);\n    done.push({\n          number: i,\n          etag: part.res.headers.etag\n        });\n  }\n  \n  //complete\n  var completeData = yield store.completeMultipartUpload(name, result.uploadId, done);\n  console.log(completeData);\n```\n\n\n### .multipartUpload*(name, file[, options])\n\nUpload file with [OSS multipart][oss-multipart].<br>\nthis function contains initMultipartUpload, uploadPartCopy, completeMultipartUpload.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} thunk or generator, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [mime] {String} custom mime , will send with `Content-Type` entity header\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br> \n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL. \n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var). \n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.  \n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n          e.g.:\n         ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n         ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data, sdk use JSON.parse() return\n\nexample:\n\n- Upload using multipart\n\n```js\nvar result = yield store.multipartUpload('object', '/tmp/file');\nconsole.log(result);\n\nvar result = yield store.multipartUpload('object', '/tmp/file', {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function* (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nvar result = yield store.multipartUpload('object', '/tmp/file', {\n  checkpoint: savedCpt,\n  progress: function* (p, cpt, res) { //progress is generator\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\n```\n\n- multipartUpload progress example\n\n```js\n//thunk\nfunction thunkProgress(p, cpt, res) {\n  return function(done) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n    done();\n  }\n}\n\nvar result1 = yield store.multipartUpload('object', '/tmp/file', {\n  progress: thunkProgress\n});\n\n//generator\nfunction* generatorProgress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nvar result2 = yield store.multipartUpload('object', '/tmp/file', {\n  progress: generatorProgress\n});\n\n```\n\n- multipartUpload with cancel\n\n>tips: cancel multipartUpload, now only support browser.\n\n```js\n\n//start upload\ntry {\n  var result = yield store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function* (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance \nstore.cancel();\n\n```\n\n### .multipartUploadCopy*(name, sourceData[, options])\n\nCopy file with [OSS multipart][oss-multipart]. <br>\nthis function contains head, initMultipartUpload, uploadPartCopy, completeMultipartUpload.<br>\nWhen copying a file larger than 1 GB, you should use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} is thunk or generator, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [copyheaders] {Object} only uploadPartCopy api used, detail [see](https://www.alibabacloud.com/help/doc-detail/31994.htm)\n    - [x-oss-copy-source-if-match]  only uploadPartCopy api used, default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message. \n    - [x-oss-copy-source-if-none-match]  only uploadPartCopy api used, default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message. \n    - [x-oss-copy-source-if-unmodified-since]  only uploadPartCopy api used, default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed. \n    - [x-oss-copy-source-if-modified-since] only uploadPartCopy api used, default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message. \n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n- Copy using multipart \n\n```js\nvar result = yield store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n});\nconsole.log(result);\n\nvar result = yield store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function* (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\nvar result = yield store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function* (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\n```\n- multipartUploadCopy with cancel\n\n```js\n\n//start upload\ntry {\n  var result = yield store.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n    checkpoint: savedCpt,\n    progress: function* (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance \nstore.cancel();\n\n```\n\n### .listParts*(name, uploadId[, query, options])\n\nThe ListParts command can be used to list all successfully uploaded parts mapped to a specific upload ID, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- name {String} object key\n- uploadId {String} upload ID from initMultipartUpload api\n- [query] {Object} query parameters\n  - [max-parts] {Number} The maximum part number in the response of the OSS. default value: 1000.\n  - [part-number-marker] {Number} Starting position of a specific list. A part is listed only when the part number is greater than the value of this parameter.  \n  - [encoding-type] {String} Specify the encoding of the returned content and the encoding type. Optional value: url\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- uploadId {String} upload ID\n- bucket {String} Specify the bucket name. \n- name {String} object name\n- PartNumberMarker {Number} Starting position of the part numbers in the listing result. \n- nextPartNumberMarker {Number} If not all results are returned this time, the response request includes the NextPartNumberMarker element to indicate the value of PartNumberMarker in the next request. \n- maxParts {Number} upload ID\n- isTruncated {Boolean} Whether the returned result list for List Parts is truncated. The “true” indicates that not all results are returned; “false” indicates that all results are returned. \n- parts {Array} The container that saves part information, each in the structure:\n  - PartNumber {Number} Part number. \n  - LastModified {Date} Time when a part is uploaded. \n  - ETag {String} ETag value in the content of the uploaded part. \n  - Size {Number} Size of the uploaded part. \n\nexample:\n\n- List uploaded part\n\n```js\n\nvar result = yield store.listParts('objcet', 'uploadId', {\n  'max-parts': 1000\n});\nconsole.log(result);\n```\n\n### .listUploads*(query[, options])\n\nList on-going multipart uploads, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- query {Object} query parameters\n  - [prefix] {String} the object key prefix\n  - [max-uploads] {Number} the max uploads to return\n  - [key-marker] {String} the object key marker, if `upload-id-marker`\n    is not provided, return uploads with `key > marker`, otherwise\n    return uploads with `key >= marker && uploadId > id-marker`\n  - [upload-id-marker] {String} the upload id marker, must be used\n    **WITH** `key-marker`\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- List on-going multipart uploads\n\n```js\n\nvar result = yield store.listUploads({\n  'max-uploads': 100,\n  'key-marker': 'my-object',\n  'upload-id-marker': 'upload-id'\n});\nconsole.log(result);\n```\n\n### .abortMultipartUpload*(name, uploadId[, options])\n\nAbort a multipart upload for object.\n\nparameters:\n\n- name {String} the object name\n- uploadId {String} the upload id\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- Abort a multipart upload\n\n```js\nvar result = yield store.abortMultipartUpload('object', 'upload-id');\nconsole.log(result);\n```\n\n## RTMP Operations\n\nAll operations function is [generator], except `getRtmpUrl`.\n\ngenerator function format: `functionName*(...)`.\n\n### .putChannel*(id, conf[, options])\n\nCreate a live channel.\n\nparameters:\n\n- id {String} the channel id\n- conf {Object} the channel config\n  - [Description] {String} the channel description\n  - [Status] {String} the channel status: 'enabled' or 'disabled'\n  - [Target] {Object}\n    - [Type] {String} the data type for the channel, only 'HLS' is supported now\n    - [FragDuration] {Number} duration of a 'ts' segment\n    - [FragCount] {Number} the number of 'ts' segments in a 'm3u8'\n    - [PlaylistName] {String} the 'm3u8' name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- publishUrls {Array} the publish urls\n- playUrls {Array} the play urls\n- res {Object} response info\n\nexample:\n\n- Create a live channel\n\n```js\nvar cid = 'my-channel';\nvar conf = {\n  Description: 'this is channel 1',\n  Status: 'enabled',\n  Target: {\n    Type: 'HLS',\n    FragDuration: '10',\n    FragCount: '5',\n    PlaylistName: 'playlist.m3u8'\n  }\n};\n\nvar r = yield this.store.putChannel(cid, conf);\nconsole.log(r);\n```\n\n### .getChannel*(id[, options])\n\nGet live channel info.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- data {Object} channel info, same as conf in [.putChannel](#putchannelid-conf-options)\n- res {Object} response info\n\nexample:\n\n- Get live channel info\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.getChannel(cid);\nconsole.log(r);\n```\n\n### .deleteChannel*(id[, options])\n\nDelete a live channel.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response infomation.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Delete a live channel\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.deleteChannel(cid);\nconsole.log(r);\n```\n\n### .putChannelStatus*(id, status[, options])\n\nChange the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- status {String} the status: 'enabled' or 'disabled'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Disable a live channel\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.putChannelStatus(cid, 'disabled');\nconsole.log(r);\n```\n\n### .getChannelStatus*(id[, options])\n\nGet the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel status information.\n\nobject:\n\n- data {Object}\n  - Status {String} the channel status: 'Live' or 'Idle'\n  - [ConnectedTime] {String} the connected time of rtmp pushing\n  - [RemoteAddr] {String} the remote addr of rtmp pushing\n  - [Video] {Object} the video parameters (Width/Height/FrameRate/Bandwidth/Codec)\n  - [Audio] {Object} the audio parameters (Bandwidth/SampleRate/Codec)\n- res {Object} response info\n\nexample:\n\n- Get a live channel status\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.getChannelStatus(cid);\nconsole.log(r);\n\n// { Status: 'Live',\n//   ConnectedTime: '2016-04-12T11:51:03.000Z',\n//   RemoteAddr: '42.120.74.98:53931',\n//   Video:\n//   { Width: '672',\n//     Height: '378',\n//     FrameRate: '29',\n//     Bandwidth: '60951',\n//     Codec: 'H264' },\n//   Audio: { Bandwidth: '5959', SampleRate: '22050', Codec: 'AAC' }\n// }\n```\n\n### .listChannels*(query[, options])\n\nList channels.\n\nparameters:\n\n- query {Object} parameters for list\n  - prefix {String}: the channel id prefix (returns channels with this prefix)\n  - marker {String}: the channle id marker (returns channels after this id)\n  - max-keys {Number}: max number of channels to return\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel list.\n\nobject:\n\n- channels {Array} the channels, each in the structure:\n  - Name {String} the channel id\n  - Description {String} the channel description\n  - Status {String} the channel status\n  - LastModified {String} the last modification time of the channel\n  - PublishUrls {Array} the publish urls for the channel\n  - PlayUrls {Array} the play urls for the channel\n- nextMarker: result.data.NextMarker || null,\n- isTruncated: result.data.IsTruncated === 'true'\n- res {Object} response info\n\nexample:\n\n- List live channels\n\n```js\nvar r = yield this.store.listChannels({\n  prefix: 'my-channel',\n  'max-keys': 3\n});\nconsole.log(r);\n```\n\n### .getChannelHistory*(id[, options])\n\nGet the live channel history.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the history information.\n\nobject:\n\n- records {Object} the pushing records, each in the structure:\n  - StartTime {String} the start time\n  - EndTime {String} the end time\n  - RemoteAddr {String} the remote addr\n- res {Object} response info\n\nexample:\n\n- Get the live channel history\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.getChannelHistory(cid);\nconsole.log(r);\n```\n\n### .createVod*(id, name, time[, options])\n\nCreate a VOD playlist for the channel.\n\nparameters:\n\n- id {String} the channel id\n- name {String} the playlist name\n- time {Object} the duration time\n  - startTime {Number} the start time in epoch seconds\n  - endTime {Number} the end time in epoch seconds\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Create a vod playlist of a live channel\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.createVod(cid, 're-play', {\n  startTime: 1460464870,\n  endTime: 1460465877\n});\nconsole.log(r);\n```\n\n### .getRtmpUrl(channelId[, options])\n\nGet signatured rtmp url for publishing.\n\nparameters:\n\n- channelId {String} the channel id\n- [options] {Object} optional parameters\n  - [expires] {Number} the expire time in seconds of the url\n  - [params] {Object} the additional paramters for url, e.g.: {playlistName: 'play.m3u8'}\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the rtmp url.\n\nexample:\n\n- Get a rtmp url.\n\n```js\nvar cid = 'my-channel';\n\nvar url = this.store.getRtmpUrl(this.cid, {\n  params: {\n    playlistName: 'play.m3u8'\n  },\n  expires: 3600\n});\nconsole.log(url);\n// rtmp://ossliveshow.oss-cn-hangzhou.aliyuncs.com/live/tl-channel?OSSAccessKeyId=T0cqQWBk2ThfRS6m&Expires=1460466188&Signature=%2BnzTtpyxUWDuQn924jdS6b51vT8%3D\n```\n\n## Create A Image Service Instance\n\nEach Image Service instance required `accessKeyId`, `accessKeySecret`, `bucket` and `imageHost`.\n\n### oss.ImageClient(options)\n\nCreate a Image service instance.\n\noptions:\n- imageHost {String} your image service domain that binding to a OSS bucket\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- bucket {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nvar oss = require('ali-oss');\n\nvar imgClient = oss.ImageClient({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'my_image_bucket'\n  imageHost: 'thumbnail.myimageservice.com'\n});\n```\n\n## Image Operations\n\nAll operations function is [generator], except `imgClient.signatureUrl`.\n\ngenerator function format: `functionName*(...)`.\n\n### imgClient.get*(name, file[, options])\n\nGet an image from the image channel.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the image\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image with a style and store it to the local file\n\n```js\nvar imagepath = '/home/ossdemo/demo.jpg';\nyield imgClient.get('ossdemo/demo.jpg@200w_200h', filepath);\n```\n\n_ Store image to a writestream\n\n```js\nyield imgClient.get('ossdemo/demo.jpg@200w_200h', somestream);\n```\n\n- Get an image content buffer\n\n```js\nvar result = yield imgClient.get('ossdemo/demo.jpg@200w_200h');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a not exists object or a not image object\n\n```js\nvar imagepath = '/home/ossdemo/demo.jpg';\nyield imgClient.get('ossdemo/not-exists-demo.jpg@200w_200h', filepath);\n// will throw NoSuchKeyError\n```\n\n### imgClient.getStream*(name[, options])\n\nGet an image read stream.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image object stream\n\n```js\nvar result = yield imgClient.getStream('ossdemo/demo.jpg@200w_200h');\nresult.stream.pipe(fs.createWriteStream('some demo.jpg'));\n```\n\n### imgClient.getExif*(name[, options])\n\nGet a image exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nIf object don't have exif, will throw 400 BadRequest.\n\nexample:\n\n```js\nvar result = yield imgClient.getExif('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n### imgClient.getInfo*(name[, options])\n\nGet a image info and exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nexample:\n\n```js\nvar result = yield imgClient.getInfo('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     Format: \"jpg\",\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n\n### imgClient.putStyle*(name, style[, options])\n// TODO\n\n### imgClient.getStyle*(name[, options])\n\nGet a style by name from the image channel.\n\nparameters:\n- name {String} image style name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} styles object\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nvar result = yield imgClient.getStyle('400');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"234\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:58:20 GMT\"\n//     },\n//     size: 234,\n//     aborted: false,\n//     rt: 398,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }\n// }\n```\n\n### imgClient.listStyle*([options])\n\nGet all styles from the image channel.\n\nparameters:\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Array} styles array, a style object:\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nvar result = yield imgClient.listStyle();\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"913\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:47:32 GMT\"\n//     },\n//     size: 913,\n//     aborted: false,\n//     rt: 1911,\n//     keepAliveSocket: false\n//   },\n//   data: [{\n//     Name: \"200-200\",\n//     Content: \"0e_200w_200h_0c_0i_0o_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:28:08 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:28:08 GMT\"\n//   }, {\n//     Name: \"800\",\n//     Content: \"800w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:29:15 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:29:15 GMT\"\n//   }, {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }, {\n//     Name: \"600\",\n//     Content: \"600w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:35:02 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:35:02 GMT\"\n//   }]\n// }\n```\n\n### imgClient.deleteStyle*(name[, options])\n// TODO\n\n### imgClient.signatureUrl(name)\n\nCreate a signature url for directly download.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return full signature url.\n\nexample:\n\n```js\nvar url = imgClient.signatureUrl('\n');\n// http://thumbnail.myimageservice.com/demo.jpg@200w_200h?OSSAccessKeyId=uZxyLARzYZtGwHKY&Expires=1427803849&Signature=JSPRe06%2FjQpQSj5zlx2ld1V%2B35I%3D\n```\n\n## Cluster Mode\n\nCluster mode now only support object operations.\n\n```js\nvar Cluster = require('ali-oss').ClusterClient;\n\nvar client = Cluster({\n  cluster: [{\n    host: 'host1',\n    accessKeyId: 'id1',\n    accessKeySecret: 'secret1'\n  }, {\n    host: 'host2',\n    accessKeyId: 'id2',\n    accessKeySecret: 'secret2'\n  }],\n  schedule: 'masterSlave', //default is `roundRobin`\n});\n\n// listen error event to logging error\nclient.on('error', function(err) {\n  console.error(err.stack);\n});\n\n// client init ready\nclient.ready(function() {\n  console.log('cluster client init ready, go ahead!');\n});\n```\n\n### Get Methods\n\nWill choose an alive client by schedule(`masterSlave` or `roundRobin`).\n\n- `client.get()`\n- `client.head()`\n- `client.getStream()`\n- `client.list()`\n- `client.signatureUrl()`\n- `client.chooseAvailable()` - choose an available client by schedule.\n\n### Put Methods\n\nWill put to all clients.\n\n- `client.put()`\n- `client.putStream()`\n- `client.delete()`\n- `client.deleteMulti()`\n- `client.copy()`\n- `client.putMeta()`\n\n## Wrapper Usage\n\nWe provide an async wrapper which can be used without `co`. All the\nmethods are preserved, just in a async way:\n\n```js\n\nvar OSS = require('ali-oss').Wrapper;\nvar STS = OSS.STS;\n\nvar client = new OSS({ /* same options */});\n\nclient.put('hello', new Buffer('world')).then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n\nclient.get('hello').then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n\nvar url = client.signatureUrl('hello');\nconsole.log(url);\n\nvar stsClient = new STS({ /* same options */});\n\nvar role = 'role';\n\nstsClient.assumeRole(role).then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n```\n\n## Browser Usage\n\nYou can use most of the functionalities of `ali-oss` in browser with\nsome exceptions:\n\n- put object with streaming: no chunked encoding, we use multipart\n  upload instead\n- get object to local file: we cannot manipulate file system in\n  browser, we provide signed object url for downloading needs\n- bucket operations(listBuckets, putBucketLogging, etc) will fail: OSS\n  server currently do not support CORS requests for bucket operations\n  (will probably be fixed later)\n\n### Compatibility\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n\n### Setup\n\n#### Bucket setup\n\nAs browser-side javascript involves CORS operations. You need to setup\nyour bucket CORS rules to allow CORS operations:\n\n- set allowed origins to '\\*'\n- allowed methods to 'PUT, GET, POST, DELETE, HEAD'\n- set allowed headers to '\\*'\n- expose 'ETag' in expose headers\n\n#### STS setup\n\nAs we don't want to expose the accessKeyId/accessKeySecret in the\nbrowser, a [common practice][oss-sts] is to use STS to grant temporary\naccess.\n\n### Basic usage\n\nInclude the sdk lib in the `<script>` tag and you have `OSS` available\nfor creating client. We use `OSS.Wrapper` here to avoid using `co`:\n\n```html\n<script src=\"http://gosspublic.alicdn.com/aliyun-oss-sdk.min.js\"></script>\n<script type=\"text/javascript\">\n  var client = new OSS.Wrapper({\n    region: 'oss-cn-hangzhou',\n    accessKeyId: '<access-key-id>',\n    accessKeySecret: '<access-key-secret>',\n    bucket: '<bucket-name>'\n  });\n\n  client.list().then(function (result) {\n    console.log('objects: %j', result.objects);\n    return client.put('my-obj', new OSS.Buffer('hello world'));\n  }).then(function (result) {\n    console.log('put result: %j', result);\n    return client.get('my-obj');\n  }).then(function (result) {\n    console.log('get result: %j', result.content.toString());\n  });\n</script>\n```\nThe full sample can be found [here][browser-sample].\n\n### How to build\n\n```bash\nnpm run build-dist\n```\n\nAnd see the build artifacts under `dist/`.\n\n## Known Errors\n\nEach error return by OSS server will contains these properties:\n\n- name {String} error name\n- message {String} error message\n- requestId {String} uuid for this request, if you meet some unhandled problem,\n    you can send this request id to OSS engineer to find out what's happend.\n- hostId {String} OSS cluster name for this request\n\nname | status | message | message in Chinese\n---  | ---    | ---     | ---\nAccessDeniedError | 403 | Access Denied | 拒绝访问\nBucketAlreadyExistsError | 409 | Bucket already exists | Bucket 已经存在\nBucketNotEmptyError | 409 | Bucket is not empty | Bucket 不为空\nEntityTooLargeError | 400 | Entity too large | 实体过大\nEntityTooSmallError | 400 | Entity too small | 实体过小\nFileGroupTooLargeError | 400 | File group too large | 文件组过大\nInvalidLinkNameError | 400 | Link name can't be the same as the object name | Object Link 与指向的 Object 同名\nLinkPartNotExistError | 400 | Can't link to not exists object | Object Link 中指向的 Object 不存在\nObjectLinkTooLargeError | 400 | Too many links to this object | Object Link 中 Object 个数过多\nFieldItemTooLongError | 400 | Post form fields items too large | Post 请求中表单域过大\nFilePartInterityError | 400 | File part has changed | 文件 Part 已改变\nFilePartNotExistError | 400 | File part not exists | 文件 Part 不存在\nFilePartStaleError | 400 | File part stale | 文件 Part 过时\nIncorrectNumberOfFilesInPOSTRequestError | 400 | Post request contains invalid number of files | Post 请求中文件个数非法\nInvalidArgumentError | 400 | Invalid format argument | 参数格式错误\nInvalidAccessKeyIdError | 400 | Access key id not exists | Access Key ID 不存在\nInvalidBucketNameError | 400 | Invalid bucket name | 无效的 Bucket 名字\nInvalidDigestError | 400 | Invalid digest | 无效的摘要\nInvalidEncryptionAlgorithmError | 400 | Invalid encryption algorithm | 指定的熵编码加密算法错误\nInvalidObjectNameError | 400 | Invalid object name | 无效的 Object 名字\nInvalidPartError | 400 | Invalid part | 无效的 Part\nInvalidPartOrderError | 400 | Invalid part order | 无效的 part 顺序\nInvalidPolicyDocumentError | 400 | Invalid policy document | 无效的 Policy 文档\nInvalidTargetBucketForLoggingError | 400 | Invalid bucket on logging operation | Logging 操作中有无效的目标 bucket\nInternalError | 500 | OSS server internal error | OSS 内部发生错误\nMalformedXMLError | 400 | Malformed XML format | XML 格式非法\nMalformedPOSTRequestError | 400 | Invalid post body format | Post 请求的 body 格式非法\nMaxPOSTPreDataLengthExceededError | 400 | Post extra data too large | Post 请求上传文件内容之外的 body 过大\nMethodNotAllowedError | 405 | Not allowed method | 不支持的方法\nMissingArgumentError | 411 | Missing argument | 缺少参数\nMissingContentLengthError | 411 | Missing `Content-Length` header | 缺少内容长度\nNoSuchBucketError | 404 | Bucket not exists | Bucket 不存在\nNoSuchKeyError | 404 | Object not exists | 文件不存在\nNoSuchUploadError | 404 | Multipart upload id not exists | Multipart Upload ID 不存在\nNotImplementedError | 501 | Not implemented | 无法处理的方法\nPreconditionFailedError | 412 | Pre condition failed | 预处理错误\nRequestTimeTooSkewedError | 403 | Request time exceeds 15 minutes to server time | 发起请求的时间和服务器时间超出 15 分钟\nRequestTimeoutError | 400 | Request timeout | 请求超时\nRequestIsNotMultiPartContentError | 400 | Invalid post content-type | Post 请求 content-type 非法\nSignatureDoesNotMatchError | 403 | Invalid signature | 签名错误\nTooManyBucketsError | 400 | Too many buckets on this user | 用户的 Bucket 数目超过限制\nRequestError | -1 | network error | 网络出现中断或异常\nConnectionTimeout | -2 | request connect timeout | 请求连接超时\nSecurityTokenExpired | 403 | sts Security Token Expired | sts Security Token 超时失效\n\n[generator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n[oss-sts]: https://help.aliyun.com/document_detail/oss/practice/ram_guide.html\n[browser-sample]: https://github.com/rockuw/oss-in-browser\n[oss-multipart]: https://help.aliyun.com/document_detail/oss/api-reference/multipart-upload/InitiateMultipartUpload.html\n[disabled-browser-headers]: https://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n",
      "readmeFilename": "README.md",
      "gitHead": "117d2a0d29122d30f8c9ebd62b974150151d4a5e",
      "_id": "ali-oss@4.14.2",
      "_shasum": "24f5c7bcd8d83f2ff5588576004cdcaaf545a6f4",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.3",
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "dist": {
        "shasum": "24f5c7bcd8d83f2ff5588576004cdcaaf545a6f4",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.14.2.tgz",
        "fileCount": 31,
        "unpackedSize": 1442959,
        "integrity": "sha512-7qOjszZhshVSHJN8rNvtRZdjZDM67CNy31IwMCEn//MoZjUcW/aEXe/sIpOdniru65eapHQRvdQUmehGgC1K8Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHN8zpMSL/5/sTUE8T7VkmLMQGZkoA5Xoj4iUeDYpRWIAiBiHcuhWFuC5uXT6u8bMubqzPD8Rrw86XOwcL3qv+SCtA=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "254202194@qq.com",
          "name": "mars-coder"
        },
        {
          "email": "peizerao@gmail.com",
          "name": "peizerao"
        },
        {
          "email": "rockuw@gmail.com",
          "name": "rockuw"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_4.14.2_1522748498837_0.5464195746097014"
      },
      "_hasShrinkwrap": false
    },
    "5.0.1": {
      "name": "ali-oss",
      "version": "5.0.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- --require babel-register -R dot -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "co-priority-queue": "^1.0.3",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "stream-http": "^2.8.0",
        "any-promise": "^1.3.0"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "fdbd822f49e9863c735ec7986a4c5f5b4eb89827",
      "_id": "ali-oss@5.0.1",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.10.0",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "dist": {
        "integrity": "sha512-CrqlGvXyvZ+LvUBsRwXdLHXHYfYx8CfBs1cpj6ujaze7yE+ueumr3BS27NY8F5Df/77bCen6SE0i5/6AFcb2Vw==",
        "shasum": "7fea31bb740a1227ffbccbf774d52991b94f0fef",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-5.0.1.tgz",
        "fileCount": 35,
        "unpackedSize": 1469728,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHqRYpFIgDS3qrIqM/dqFn0+wzRCeEJwdXp4EWXdxpQrAiAfovM1lWAsPjGHbDqC0MXIooNSy5qo6/VQnLTpc6teZQ=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_5.0.1_1523590396406_0.07012725307345624"
      },
      "_hasShrinkwrap": false
    },
    "4.15.0": {
      "name": "ali-oss",
      "version": "4.15.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./lib/browser.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-browserify": "^1.0.9",
        "crypto-js": "^3.1.9-1",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-mocha": "^1.3.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "platform": "^1.3.4",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "co-priority-queue": "^1.0.3",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "stream-http": "^2.8.0",
        "any-promise": "^1.3.0"
      },
      "publishConfig": {
        "tag": "release-4.x"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "readme": "oss-nodejs-sdk\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage][cov-image]][cov-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/ali-oss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/ali-oss\n[travis-image]: https://img.shields.io/travis/ali-sdk/ali-oss/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ali-sdk/ali-oss.svg?branch=master\n[cov-image]: http://codecov.io/github/ali-sdk/ali-oss/coverage.svg?branch=master\n[cov-url]: http://codecov.io/github/ali-sdk/ali-oss?branch=master\n[david-image]: https://img.shields.io/david/ali-sdk/ali-oss.svg?style=flat-square\n[david-url]: https://david-dm.org/ali-sdk/ali-oss\n\naliyun OSS(object storage service) Node.js client.\n\n## Install\n\n```bash\nnpm install ali-oss --save\n```\n\n## License\n\n[MIT](LICENSE)\n\n# OSS Usage\n\nOSS, Object Storage Service. Equal to well known Amazon [S3](http://aws.amazon.com/s3/).\n\n## Summary\n\n- [Data Regions](#data-regions)\n- [Create Account](#create-acount)\n- [Create A Bucket Instance](#create-a-bucket-instance)\n  - [#oss(options)](#ossoptions)\n- [Bucket Operations](#bucket-operations)\n  - Base\n    - [.listBuckets*(query[, options])](#listbucketsquery-options)\n    - [.putBucket*(name, region[, options])](#putbucketname-region-options)\n    - [.useBucket(name, region)](#usebucketname-region)\n    - [.deleteBucket*(name, region[, options])](#deletebucketname-region-options)\n  - ACL\n    - [.putBucketACL*(name, region, acl[, options])](#putbucketaclname-region-acl-options)\n    - [.getBucketACL*(name, region[, options])](#getbucketaclname-region-options)\n  - Logging\n    - [.putBucketLogging*(name, region, prefix[, options])](#putbucketloggingname-region-prefix-options)\n    - [.getBucketLogging*(name, region[, options])](#getbucketloggingname-region-options)\n    - [.deleteBucketLogging*(name, region[, options])](#deletebucketloggingname-region-options)\n  - Website\n    - [.putBucketWebsite*(name, region, config[, options])](#putbucketwebsitename-region-config-options)\n    - [.getBucketWebsite*(name, region[, options])](#getbucketwebsitename-region-options)\n    - [.deleteBucketWebsite*(name, region[, options])](#deletebucketwebsitename-region-options)\n  - Referer\n    - [.putBucketReferer*(name, region, allowEmpty, referers[, options])](#putbucketreferername-region-allowempty-referers-options)\n    - [.getBucketReferer*(name, region[, options])](#getbucketreferername-region-options)\n    - [.deleteBucketReferer*(name, region[, options])](#deletebucketreferername-region-options)\n  - Lifecycle\n    - [.putBucketLifecycle*(name, region, rules[, options])](#putbucketlifecyclename-region-rules-options)\n    - [.getBucketLifecycle*(name, region[, options])](#getbucketlifecyclename-region-options)\n    - [.deleteBucketLifecycle*(name, region[, options])](#deletebucketlifecyclename-region-options)\n  - CORS\n    - [.putBucketCORS*(name, region, rules[, options])](#putbucketcorsname-region-rules-options)\n    - [.getBucketCORS*(name, region[, options])](#getbucketcorsname-region-options)\n    - [.deleteBucketCORS*(name, region[, options])](#deletebucketcorsname-region-options)\n- [Object Operations](#object-operations)\n  - [.list*(query[, options])](#listquery-options)\n  - [.put*(name, file[, options])](#putname-file-options)\n  - [.putStream*(name, stream[, options])](#putstreamname-stream-options)\n  - [.append*(name, file[, options])](#apendname-file-options)\n  - [.getObjectUrl(name[, baseUrl])](#getobjecturlname-baseurl)\n  - [.head*(name[, options])](#headname-options)\n  - [.get*(name, file[, options])](#getname-file-options)\n  - [.getStream*(name[, options])](#getstreamname-options)\n  - [.delete*(name[, options])](#deletename-options)\n  - [.copy*(name, sourceName[, options])](#copyname-sourcename-options)\n  - [.putMeta*(name, meta[, options])](#putmetaname-meta-options)\n  - [.deleteMulti*(names[, options])](#deletemultinames-options)\n  - [.signatureUrl(name[, options])](#signatureurlname-options)\n  - [.putACL*(name, acl[, options])](#putaclname-acl-options)\n  - [.getACL*(name[, options])](#getaclname-options)\n  - [.initMultipartUpload*(name[, options])](#initmultipartuploadname-options)\n  - [.uploadPart*(name, uploadId, partNo, file, start, end[, options])](#uploadpartname-uploadid-partno-file-start-end-options)\n  - [.uploadPartCopy*(name, uploadId, partNo, range, sourceData[, options])](#uploadpartcopyname-uploadid-partno-range-sourcedata-options)\n  - [.completeMultipartUpload(name, uploadId, parts[, options])](#completemultipartuploadname-uploadid-parts-options)\n  - [.multipartUpload*(name, file[, options])](#multipartuploadname-file-options)\n  - [.multipartUploadCopy*(name, sourceData[, options])](#multipartuploadcopyname-sourcedata-options)\n  - [.listParts*(name, uploadId[, query, options])](#listparts-name-uploadid-query-options)\n  - [.listUploads*(query[, options])](#listuploadsquery-options)\n  - [.abortMultipartUpload*(name, uploadId[, options])](#abortmultipartuploadname-uploadid-options)\n- [RTMP Operations](#rtmp-operations)\n  - [.putChannel*(id, conf[, options])](#putchannelid-conf-options)\n  - [.getChannel*(id[, options])](#getchannelid-options)\n  - [.deleteChannel*(id[, options])](#deletechannelid-options)\n  - [.putChannelStatus*(id, status[, options])](#putchannelstatusid-status-options)\n  - [.getChannelStatus*(id[, options])](#getchannelstatusid-options)\n  - [.listChannels*(query[, options])](#listchannelsquery-options)\n  - [.getChannelHistory*(id[, options])](#getchannelhistoryid-options)\n  - [.createVod*(id, name, time[, options])](#createvodid-name-time-options)\n  - [.getRtmpUrl(channelId[, options])](#getrtmpurlchannelid-options)\n- [Create A Image Service Instance](#create-a-image-service-instance)\n  - [#oss.ImageClient(options)](#ossimageclientoptions)\n- [Image Operations](#image-operations)\n  - [imgClient.get*(name, file[, options])](#imgclientgetname-file-options)\n  - [imgClient.getStream*(name[, options])](#imgclientgetstreamname-options)\n  - [imgClient.getExif*(name[, options])](#imgclientgetexifname-options)\n  - [imgClient.getInfo*(name[, options])](#imgclientgetinfoname-options)\n  - [imgClient.putStyle*(name, style[, options])](#imgclientputstylename-style-options)\n  - [imgClient.getStyle*(name[, options])](#imgclientgetstylename-options)\n  - [imgClient.listStyle*([options])](#imgclientliststyleoptions)\n  - [imgClient.deleteStyle*(name[, options])](#imgclientdeletestylename-options)\n  - [imgClient.signatureUrl(name)](#imgclientsignatureurlname)\n- [Wrapper Usage](#wrapper-usage)\n- [Browser Usage](#browser-usage)\n- [Known Errors](#known-errors)\n\n## Data Regions\n\n[OSS current data regions](https://help.aliyun.com/document_detail/oss/user_guide/endpoint_region.html).\n\nregion | country | city | endpoint | internal endpoint\n---  | ---     | ---  | --- | ---\noss-cn-hangzhou | China | HangZhou | oss-cn-hangzhou.aliyuncs.com | oss-cn-hangzhou-internal.aliyuncs.com\noss-cn-shanghai | China | ShangHai | oss-cn-shanghai.aliyuncs.com | oss-cn-shanghai-internal.aliyuncs.com\noss-cn-qingdao | China | QingDao | oss-cn-qingdao.aliyuncs.com | oss-cn-qingdao-internal.aliyuncs.com\noss-cn-beijing | China | BeiJing | oss-cn-beijing.aliyuncs.com | oss-cn-beijing-internal.aliyuncs.com\noss-cn-shenzhen | China | ShenZhen | oss-cn-shenzhen.aliyuncs.com | oss-cn-shenzhen-internal.aliyuncs.com\noss-cn-hongkong | China | HongKong | oss-cn-hongkong.aliyuncs.com | oss-cn-hongkong-internal.aliyuncs.com\noss-us-west-1 | US | Silicon Valley | oss-us-west-1.aliyuncs.com | oss-us-west-1-internal.aliyuncs.com\noss-ap-southeast-1 | Singapore | Singapore | oss-ap-southeast-1.aliyuncs.com | oss-ap-southeast-1-internal.aliyuncs.com\n\n## Create Account\n\nGo to [OSS website](http://www.aliyun.com/product/oss/?lang=en), create a new account for new user.\n\nAfter account created, you can create the OSS instance and get the `accessKeyId` and `accessKeySecret`.\n\n## Create A Bucket Instance\n\nEach OSS instance required `accessKeyId`, `accessKeySecret` and `bucket`.\n\n### #oss(options)\n\nCreate a Bucket store instance.\n\noptions:\n\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- [stsToken] {String} used by temporary authorization, detail [see](https://www.alibabacloud.com/help/doc-detail/32077.htm)\n- [bucket] {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [endpoint] {String} oss region domain. It takes priority over `region`.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`.\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`.\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [secure] {Boolean} instruct OSS client to use HTTPS (secure: true) or HTTP (secure: false) protocol.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nvar oss = require('ali-oss');\n\nvar store = oss({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\n```\n\n## Bucket Operations\n\n### .listBuckets*(query[, options])\n\nList buckets in this account.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search buckets using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [max-keys] {String|Number} max buckets, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return buckets list on `buckets` properties.\n\n- buckets {Array<BucketMeta>} bucket meta info list\n  Each `BucketMeta` will contains blow properties:\n    - name {String} bucket name\n    - region {String} bucket store data region, e.g.: `oss-cn-hangzhou-a`\n    - creationDate {String} bucket create GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n- owner {Object} object owner, including `id` and `displayName`\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 buckets\n\n```js\nvar result = yield store.listBuckets({\n  \"max-keys\": 10\n});\nconsole.log(result);\n```\n\n### .putBucket*(name, region[, options])\n\nCreate a new bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket exists and not belong to current account, will throw BucketAlreadyExistsError.\n  If bucket not exists, will create a new bucket and set it's ACL.\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n  If change exists bucket region, will throw BucketAlreadyExistsError.\n  If region value invalid, will throw InvalidLocationConstraintError.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the bucket name on `bucket` properties.\n\n- bucket {String} bucket name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Create a bucket name `helloworld` location on HongKong\n\n```js\nyield store.putBucket('helloworld', 'oss-cn-hongkong');\n// use it by default\nstore.useBucket('helloworld', 'oss-cn-hongkong');\n```\n\n### .deleteBucket*(name, region[, options])\n\nDelete an empty bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket is not empty, will throw BucketNotEmptyError.\n  If bucket is not exists, will throw NoSuchBucketError.\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete the exists 'helloworld' bucket on 'oss-cn-hongkong'\n\n```js\nyield store.deleteBucket('helloworld', {\n  region: 'oss-cn-hongkong'\n});\n```\n\n### .useBucket(name, region)\n\nUse the bucket.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.useBucket('helloworld', 'oss-cn-hongkong');\n```\n\n---\n\n### .putBucketACL*(name, region, acl[, options])\n\nUpdate the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- acl {String} access control list, current available: `public-read-write`, `public-read` and `private`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set bucket `helloworld` to `public-read-write`\n\n```js\nyield store.putBucketACL('helloworld', 'oss-cn-hongkong', 'public-read-write');\n```\n\n### .getBucketACL*(name, region[, options])\n\nGet the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld`\n\n```js\nvar result = yield store.getBucketACL('helloworld', 'oss-cn-hongkong');\nconsole.log(result.acl);\n```\n\n---\n\n### .putBucketLogging*(name, region, prefix[, options])\n\nUpdate the bucket logging settings.\nLog file will create every one hour and name format: `<prefix><bucket>-YYYY-mm-DD-HH-MM-SS-UniqueString`.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [prefix] {String} prefix path name to store the log files\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Enable bucket `helloworld` logging and save with prefix `logs/`\n\n```js\nyield store.putBucketLogging('helloworld', 'oss-cn-hongkong', 'logs/');\n```\n\n### .getBucketLogging*(name, region[, options])\n\nGet the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- enable {Boolean} enable logging or not\n- prefix {String} prefix path name to store the log files, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld` logging settings\n\n```js\nvar result = yield store.getBucketLogging('helloworld', 'oss-cn-hongkong');\nconsole.log(result.enable, result.prefix);\n```\n\n### .deleteBucketLogging(name, region[, options])\n\nDelete the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketWebsite*(name, region, config[, options])\n\nSet the bucket as a static website.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- config {Object} website config, contains blow properties:\n  - index {String} default page, e.g.: `index.html`\n  - [error] {String} error page, e.g.: 'error.html'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketWebsite('hello', 'oss-cn-hangzhou', {\n  index: 'index.html'\n});\n```\n\n### .getBucketWebsite*(name, region[, options])\n\nGet the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- index {String} index page\n- error {String} error page, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketWebsite*(name, region[, options])\n\nDelete the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketReferer*(name, region, allowEmpty, referers[, options])\n\nSet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list, e.g.:\n  ```js\n  [\n    'https://npm.taobao.org',\n    'http://cnpmjs.org'\n  ]\n  ```\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketReferer('hello', 'oss-cn-hangzhou', false, [\n  'https://npm.taobao.org',\n  'http://cnpmjs.org'\n]);\n```\n\n### .getBucketReferer*(name, region[, options])\n\nGet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketReferer*(name, region[, options])\n\nDelete the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketLifecycle*(name, region, rules[, options])\n\nSet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- rules {Array<Rule>} rule config list, each `Rule` will contains blow properties:\n  - [id] {String} rule id, if not set, OSS will auto create it with random string.\n  - prefix {String} store prefix\n  - status {String} rule status, allow values: `Enabled` or `Disabled`\n  - [days] {Number|String} expire after the `days`\n  - [date] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `date` and `days` only set one.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketLifecycle('hello', 'oss-cn-hangzhou', [\n  {\n    id: 'delete after one day',\n    prefix: 'logs/',\n    status: 'Enabled',\n    days: 1\n  },\n  {\n    prefix: 'logs2/',\n    status: 'Disabled',\n    date: '2022-10-11T00:00:00.000Z'\n  }\n]);\n```\n\n### .getBucketLifecycle*(name, region[, options])\n\nGet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the lifecycle rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketLifecycle*(name, region[, options])\n\nDelete the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketCORS*(name, region, rules[, options])\n\nSet CORS rules of the bucket object\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- rules {Array<Rule>} rule config list, each `Rule` will contains below properties:\n  - allowedOrigin {String/Array} configure for Access-Control-Allow-Origin header\n  - allowedMethod {String/Array} configure for Access-Control-Allow-Methods header\n  - [allowedHeader] {String/Array} configure for Access-Control-Allow-Headers header\n  - [exposeHeader] {String/Array} configure for Access-Control-Expose-Headers header\n  - [maxAgeSeconds] {String} configure for Access-Control-Max-Age header\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketCORS('hello', 'oss-cn-hangzhou', [\n  {\n    allowedOrigin: '*',\n    allowedMethod: [\n      'GET',\n      'HEAD',\n    ],\n  }\n]);\n```\n\n### .getBucketCORS*(name, region[, options])\n\nGet CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the CORS rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketCORS*(name, region[, options])\n\nDelete CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n## Object Operations\n\nAll operations function is [generator], except `signatureUrl`.\n\ngenerator function format: `functionName*(...)`.\n\n### .put*(name, file[, options])\n\nAdd an object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- data {Object} callback server response data, sdk use JSON.parse() return\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through local file path\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.put('ossdemo/demo.txt', filepath);\nconsole.log(object);\n\n{\n  name: 'ossdemo/demo.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829244'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through content buffer\n\n```js\nvar object = yield store.put('ossdemo/buffer', new Buffer('foo content'));\nconsole.log(object);\n\n{\n  name: 'ossdemo/buffer',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/buffer',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"xxx\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829243'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through readstream\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.put('ossdemo/readstream.txt', fs.createReadStream(filepath));\nconsole.log(object);\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .putStream*(name, stream[, options])\n\nAdd a stream object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- stream {ReadStream} object ReadStream content instance\n- [options] {Object} optional parameters\n  - [contentLength] {Number} the stream length, `chunked encoding` will be used if absent\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through readstream\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.put('ossdemo/readstream.txt', fs.createReadStream(filepath));\nconsole.log(object);\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .append*(name, file[, options])\n\nAppend an object to the bucket, it's almost same as put, but it can add content to existing object rather than override it.\n\nAll parameters are same as put except for options.position\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [position] {String} specify the position which is the content length of the latest object\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nobject:\n\n- name {String} object name\n- url {String} the url of oss\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- nextAppendPosition {String} the next position\n\nexample:\n\n```js\nvar object = yield store.apend('ossdemo/buffer', new Buffer('foo'));\n\n// append content to the existing object\nobject = yield store.apend('ossdemo/buffer', new Buffer('bar'), {\n  position: object.nextAppendPosition,\n});\n```\n\n### .getObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `endpoint`.\n\ne.g.:\n\n```js\nconst cdnUrl = client.getObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .head*(name[, options])\n\nHead an object and get the meta info.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status, maybe 200 or 304\n- meta {Object} object user meta, if not set on `put()`, will return null.\n    If return status 304, meta will be null too\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Head an exists object and get user meta\n\n```js\nyield this.store.put('ossdemo/head-meta', new Buffer('foo'), {\n  meta: {\n    uid: 1,\n    path: 'foo/demo.txt'\n  }\n});\nvar object = this.store.head('ossdemo/head-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  meta: {\n    uid: '1',\n    path: 'foo/demo.txt'\n  },\n  res: { ... }\n}\n```\n\n- Head a not exists object\n\n```js\nvar object = this.store.head('ossdemo/head-meta');\n// will throw NoSuchKeyError\n```\n\n### .get*(name[, file, options])\n\nGet an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the content\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Range' get specifying range bytes content, e.g.: `Range: bytes=0-9`\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object and store it to the local file\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nyield store.get('ossdemo/demo.txt', filepath);\n```\n\n_ Store object to a writestream\n\n```js\nyield store.get('ossdemo/demo.txt', somestream);\n```\n\n- Get an object content buffer\n\n```js\nvar result = yield store.get('ossdemo/demo.txt');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a processed image and store it to the local file\n\n```js\nvar filepath = '/home/ossdemo/demo.png';\nyield store.get('ossdemo/demo.png', filepath, {process: 'image/resize,w_200'});\n```\n\n- Get a not exists object\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nyield store.get('ossdemo/not-exists-demo.txt', filepath);\n// will throw NoSuchKeyError\n```\n\n### .getStream*(name[, options])\n\nGet an object read stream.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object stream\n\n```js\nvar result = yield store.getStream('ossdemo/demo.txt');\nresult.stream.pipe(fs.createWriteStream('some file.txt'));\n```\n\n### .delete*(name[, options])\n\nDelete an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf delete object not exists, will also delete success.\n\nexample:\n\n- Delete an exists object\n\n```js\nyield store.delete('ossdemo/someobject');\n```\n\n- Delete a not exists object\n\n```js\nyield store.delete('ossdemo/some-not-exists-object');\n```\n\n### .copy*(name, sourceName[, options])\n\nCopy an object from `sourceName` to `name`.\n\nparameters:\n\n- name {String} object name store on OSS\n- sourceName {String} source object name\n  If `sourceName` start with `/`, meaning it's a full name contains the bucket name.\n  e.g.: `/otherbucket/logo.png` meaning copy `otherbucket` logn.png object to current bucket.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n    If the `meta` set, will override the source object meta.\n  - [headers] {Object} extra headers\n    - 'If-Match' do copy if source object etag equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' do copy if source object etag not equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-Modified-Since' do copy if source object modified after this time,\n        otherwise throw PreconditionFailedError\n    - 'If-Unmodified-Since' do copy if source object modified before this time,\n        otherwise throw PreconditionFailedError\n\nSuccess will return the copy result in `data` property.\n\nobject:\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT string\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf source object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Copy same bucket object\n\n```js\nvar result = yield store.copy('newName', 'oldName');\n```\n\n- Copy other bucket object\n\n```js\nvar result = yield store.copy('logo.png', '/other-bucket/logo.png');\n```\n\n### .putMeta*(name, meta[, options])\n\nSet an exists object meta.\n\nparameters:\n\n- name {String} object name store on OSS\n- meta {Object} user meta, will send with `x-oss-meta-` prefix string\n  e.g.: `{ uid: 123, pid: 110 }`\n  If `meta: null`, will clean up the exists meta\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the copy result in `data` property.\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Update exists object meta\n\n```js\nvar result = yield store.putMeta('ossdemo.txt', {\n  uid: 1, pid: 'p123'\n});\nconsole.log(result);\n```\n\n- Clean up object meta\n\n```js\nyield store.putMeta('ossdemo.txt', null);\n```\n\n### .deleteMulti*(names[, options])\n\nDelete multi objects in one request.\n\nparameters:\n\n- names {Array<String>} object names, max 1000 objects in once.\n- [options] {Object} optional parameters\n  - [quiet] {Boolean} quiet mode or verbose mode, default is `false`, verbose mode\n    quiet mode: if all objects delete succes, return emtpy response.\n      otherwise return delete error object results.\n    verbose mode: return all object delete results.\n  - [timeout] {Number} the operation timeout\n\nSuccess will return delete success objects in `deleted` property.\n\n- [deleted] {Array<String>} deleted object names list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete multi objects in quiet mode\n\n```js\nvar result = yield store.deleteMulti(['obj1', 'obj2', 'obj3'], {\n  quiet: true\n});\n```\n\n- Delete multi objects in verbose mode\n\n```js\nvar result = yield store.deleteMulti(['obj1', 'obj2', 'obj3']);\n```\n\n### .list*(query[, options])\n\nList objects in the bucket.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 objects\n\n```js\nvar result = yield store.list();\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nvar result = yield store.list({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nvar result = yield store.list({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n### .signatureUrl(name[, options])\n\nCreate a signature url for download or upload object.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [method] {String} the HTTP method, default is 'GET'\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [response] {Object} set the response headers for download\n    - [content-type] {String} set the response content type\n    - [content-disposition] {String} set the response content disposition\n    - [cache-control] {String} set the response cache control\n    - See more: https://help.aliyun.com/document_detail/oss/api-reference/object/GetObject.html\n\nSuccess will return signature url.\n\nexample:\n\n- Get signature url for object\n\n```js\nvar url = store.signatureUrl('ossdemo.txt');\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT'\n});\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  response: {\n    'content-type': 'text/custom',\n    'content-disposition': 'attachment'\n  }\n});\nconsole.log(url);\n```\n\n- Get a signature url for a processed image\n\n```js\nvar url = store.signatureUrl('ossdemo.png', {\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.png', {\n  expires: 3600,\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n```\n\n### .putACL*(name, acl[, options])\n\nSet object's ACL.\n\nparameters:\n\n- name {String} object name\n- acl {String} acl (private/public-read/public-read-write)\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set an object's ACL\n\n```js\nyield store.putACL('ossdemo.txt', 'public-read');\n```\n\n### .getACL*(name[, options])\n\nGet object's ACL.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get an object's ACL\n\n```js\nvar result = yield store.getACL('ossdemo.txt');\nconsole.log(result.acl);\n```\n\n### .initMultipartUpload(name[, options])\nBefore transmitting data in the Multipart Upload mode,\nyou must call the Initiate Multipart Upload interface to notify the OSS to initiate a Multipart Upload event.\nThe Initiate Multipart Upload interface returns a globally unique Upload ID created by the OSS server to identify this Multipart Upload event.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] Mime file type e.g.: application/octet-stream\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - [x-oss-server-side-encryption]\n    Specify the server-side encryption algorithm used to upload each part of this object,Type: string, Valid value: AES256 `x-oss-server-side-encryption: AES256`<br>\n    if use in browser you should be set cors expose header x-oss-server-side-encryption\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-server-side-encryption] if set request header x-oss-server-side-encryption, will return\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- uploadId {String} upload id, use for uploadPart, completeMultipart\n\nexample:\n\n```js\n  var result = yield store.initMultipartUpload('object');\n  console.log(result);\n```\n\n### .uploadPart(name, uploadId, partNo, file, start, end[, options])\nAfter initiating a Multipart Upload event, you can upload data in parts based on the specified object name and Upload ID.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- file {File|String}  is File or FileName, the whole file<br>\n Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB. <br>\n In Node you can use File or FileName, but in browser you only can use File.\n- start {Number} part start bytes  e.g: 102400\n- end {Number} part end bytes  e.g: 204800\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  var name = 'object';\n  var result = yield store.initMultipartUpload(name);\n  var uploadId = result.uploadId;\n  var file; //the data you want to upload, is a File or FileName(only in node)\n  //if file part is 10\n  var partSize = 100 * 1024;\n  var fileSize = 10 * partSize;//you need to calculate\n  var dones = [];\n  for (var i = 1; i <= 10; i++) {\n    var start = partSize * (i -1);\n    var end = Math.min(start + partSize, fileSize);\n    var part = yield store.uploadPart(name, uploadId, i, file, start, end);\n    dones.push({\n      number: i,\n      etag: part.etag\n    });\n    console.log(part);\n  }\n\n  //end need to call completeMultipartUpload api\n```\n\n### .uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])\nUsing Upload Part Copy, you can copy data from an existing object and upload a part of the data.\nWhen copying a file larger than 1 GB, you must use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- range {String} Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB, range value like `0-102400`\n- sourceData {Object}\n  - sourceKey {String} the source object name\n  - sourceBucketName {String} the source bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} The following request header is used for the source objects specified by x-oss-copy-source.\n    - [x-oss-copy-source-if-match]  default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]   default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]   default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since]   default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  var name = 'object';\n  var result = yield store.initMultipartUpload(name);\n\n  var partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (var i = 1; i <= 10; i++) {\n    var start = partSize * (i -1);\n    var end = Math.min(start + partSize, fileSize);\n    var range = start + '-' + (end - 1);\n    var part = yield store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n### .completeMultipartUpload(name, uploadId, parts[, options])\nAfter uploading all data parts, you must call the Complete Multipart Upload API to complete Multipart Upload for the entire file.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- parts {Array} more part {Object} from uploadPartCopy, , each in the structure:\n  - number {Number} partNo\n  - etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data , sdk use JSON.parse() return\n\nexample:\n\n```js\n\n  //init multipart\n  var name = 'object';\n  var result = yield store.initMultipartUpload(name);\n\n  //upload part\n  var file; //the data you want to upload, this example size is 10 * 100 * 1024\n  var fileSize;//you need to calculate\n  var partSize = 100 * 1024;//100kb\n  var done = [];\n  //if file part is 10\n  for (var i = 1; i <= 10; i++) {\n    var start = partSize * (i -1);\n    var end = Math.min(start + partSize, fileSize);\n    var data = file.slice(start, end);\n    var part = yield store.uploadPart(name, result.uploadId, i, data);\n    console.log(part);\n    done.push({\n          number: i,\n          etag: part.res.headers.etag\n        });\n  }\n\n  //complete\n  var completeData = yield store.completeMultipartUpload(name, result.uploadId, done);\n  console.log(completeData);\n```\n\n\n### .multipartUpload*(name, file[, options])\n\nUpload file with [OSS multipart][oss-multipart].<br>\nthis function contains initMultipartUpload, uploadPartCopy, completeMultipartUpload.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} thunk or generator, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [mime] {String} custom mime , will send with `Content-Type` entity header\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n          e.g.:\n         ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n         ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data, sdk use JSON.parse() return\n\nexample:\n\n- Upload using multipart\n\n```js\nvar result = yield store.multipartUpload('object', '/tmp/file');\nconsole.log(result);\n\nvar result = yield store.multipartUpload('object', '/tmp/file', {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function* (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nvar result = yield store.multipartUpload('object', '/tmp/file', {\n  checkpoint: savedCpt,\n  progress: function* (p, cpt, res) { //progress is generator\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\n```\n\n- multipartUpload progress example\n\n```js\n//thunk\nfunction thunkProgress(p, cpt, res) {\n  return function(done) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n    done();\n  }\n}\n\nvar result1 = yield store.multipartUpload('object', '/tmp/file', {\n  progress: thunkProgress\n});\n\n//generator\nfunction* generatorProgress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nvar result2 = yield store.multipartUpload('object', '/tmp/file', {\n  progress: generatorProgress\n});\n\n```\n\n- multipartUpload with cancel\n\n>tips: cancel multipartUpload, now only support browser.\n\n```js\n\n//start upload\ntry {\n  var result = yield store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function* (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n### .multipartUploadCopy*(name, sourceData[, options])\n\nCopy file with [OSS multipart][oss-multipart]. <br>\nthis function contains head, initMultipartUpload, uploadPartCopy, completeMultipartUpload.<br>\nWhen copying a file larger than 1 GB, you should use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} is thunk or generator, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [copyheaders] {Object} only uploadPartCopy api used, detail [see](https://www.alibabacloud.com/help/doc-detail/31994.htm)\n    - [x-oss-copy-source-if-match]  only uploadPartCopy api used, default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]  only uploadPartCopy api used, default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]  only uploadPartCopy api used, default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since] only uploadPartCopy api used, default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n- Copy using multipart\n\n```js\nvar result = yield store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n});\nconsole.log(result);\n\nvar result = yield store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function* (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\nvar result = yield store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function* (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\n```\n- multipartUploadCopy with cancel\n\n```js\n\n//start upload\ntry {\n  var result = yield store.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n    checkpoint: savedCpt,\n    progress: function* (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n### .listParts*(name, uploadId[, query, options])\n\nThe ListParts command can be used to list all successfully uploaded parts mapped to a specific upload ID, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- name {String} object key\n- uploadId {String} upload ID from initMultipartUpload api\n- [query] {Object} query parameters\n  - [max-parts] {Number} The maximum part number in the response of the OSS. default value: 1000.\n  - [part-number-marker] {Number} Starting position of a specific list. A part is listed only when the part number is greater than the value of this parameter.\n  - [encoding-type] {String} Specify the encoding of the returned content and the encoding type. Optional value: url\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- uploadId {String} upload ID\n- bucket {String} Specify the bucket name.\n- name {String} object name\n- PartNumberMarker {Number} Starting position of the part numbers in the listing result.\n- nextPartNumberMarker {Number} If not all results are returned this time, the response request includes the NextPartNumberMarker element to indicate the value of PartNumberMarker in the next request.\n- maxParts {Number} upload ID\n- isTruncated {Boolean} Whether the returned result list for List Parts is truncated. The “true” indicates that not all results are returned; “false” indicates that all results are returned.\n- parts {Array} The container that saves part information, each in the structure:\n  - PartNumber {Number} Part number.\n  - LastModified {Date} Time when a part is uploaded.\n  - ETag {String} ETag value in the content of the uploaded part.\n  - Size {Number} Size of the uploaded part.\n\nexample:\n\n- List uploaded part\n\n```js\n\nvar result = yield store.listParts('objcet', 'uploadId', {\n  'max-parts': 1000\n});\nconsole.log(result);\n```\n\n### .listUploads*(query[, options])\n\nList on-going multipart uploads, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- query {Object} query parameters\n  - [prefix] {String} the object key prefix\n  - [max-uploads] {Number} the max uploads to return\n  - [key-marker] {String} the object key marker, if `upload-id-marker`\n    is not provided, return uploads with `key > marker`, otherwise\n    return uploads with `key >= marker && uploadId > id-marker`\n  - [upload-id-marker] {String} the upload id marker, must be used\n    **WITH** `key-marker`\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- List on-going multipart uploads\n\n```js\n\nvar result = yield store.listUploads({\n  'max-uploads': 100,\n  'key-marker': 'my-object',\n  'upload-id-marker': 'upload-id'\n});\nconsole.log(result);\n```\n\n### .abortMultipartUpload*(name, uploadId[, options])\n\nAbort a multipart upload for object.\n\nparameters:\n\n- name {String} the object name\n- uploadId {String} the upload id\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- Abort a multipart upload\n\n```js\nvar result = yield store.abortMultipartUpload('object', 'upload-id');\nconsole.log(result);\n```\n\n## RTMP Operations\n\nAll operations function is [generator], except `getRtmpUrl`.\n\ngenerator function format: `functionName*(...)`.\n\n### .putChannel*(id, conf[, options])\n\nCreate a live channel.\n\nparameters:\n\n- id {String} the channel id\n- conf {Object} the channel config\n  - [Description] {String} the channel description\n  - [Status] {String} the channel status: 'enabled' or 'disabled'\n  - [Target] {Object}\n    - [Type] {String} the data type for the channel, only 'HLS' is supported now\n    - [FragDuration] {Number} duration of a 'ts' segment\n    - [FragCount] {Number} the number of 'ts' segments in a 'm3u8'\n    - [PlaylistName] {String} the 'm3u8' name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- publishUrls {Array} the publish urls\n- playUrls {Array} the play urls\n- res {Object} response info\n\nexample:\n\n- Create a live channel\n\n```js\nvar cid = 'my-channel';\nvar conf = {\n  Description: 'this is channel 1',\n  Status: 'enabled',\n  Target: {\n    Type: 'HLS',\n    FragDuration: '10',\n    FragCount: '5',\n    PlaylistName: 'playlist.m3u8'\n  }\n};\n\nvar r = yield this.store.putChannel(cid, conf);\nconsole.log(r);\n```\n\n### .getChannel*(id[, options])\n\nGet live channel info.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- data {Object} channel info, same as conf in [.putChannel](#putchannelid-conf-options)\n- res {Object} response info\n\nexample:\n\n- Get live channel info\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.getChannel(cid);\nconsole.log(r);\n```\n\n### .deleteChannel*(id[, options])\n\nDelete a live channel.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response infomation.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Delete a live channel\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.deleteChannel(cid);\nconsole.log(r);\n```\n\n### .putChannelStatus*(id, status[, options])\n\nChange the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- status {String} the status: 'enabled' or 'disabled'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Disable a live channel\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.putChannelStatus(cid, 'disabled');\nconsole.log(r);\n```\n\n### .getChannelStatus*(id[, options])\n\nGet the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel status information.\n\nobject:\n\n- data {Object}\n  - Status {String} the channel status: 'Live' or 'Idle'\n  - [ConnectedTime] {String} the connected time of rtmp pushing\n  - [RemoteAddr] {String} the remote addr of rtmp pushing\n  - [Video] {Object} the video parameters (Width/Height/FrameRate/Bandwidth/Codec)\n  - [Audio] {Object} the audio parameters (Bandwidth/SampleRate/Codec)\n- res {Object} response info\n\nexample:\n\n- Get a live channel status\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.getChannelStatus(cid);\nconsole.log(r);\n\n// { Status: 'Live',\n//   ConnectedTime: '2016-04-12T11:51:03.000Z',\n//   RemoteAddr: '42.120.74.98:53931',\n//   Video:\n//   { Width: '672',\n//     Height: '378',\n//     FrameRate: '29',\n//     Bandwidth: '60951',\n//     Codec: 'H264' },\n//   Audio: { Bandwidth: '5959', SampleRate: '22050', Codec: 'AAC' }\n// }\n```\n\n### .listChannels*(query[, options])\n\nList channels.\n\nparameters:\n\n- query {Object} parameters for list\n  - prefix {String}: the channel id prefix (returns channels with this prefix)\n  - marker {String}: the channle id marker (returns channels after this id)\n  - max-keys {Number}: max number of channels to return\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel list.\n\nobject:\n\n- channels {Array} the channels, each in the structure:\n  - Name {String} the channel id\n  - Description {String} the channel description\n  - Status {String} the channel status\n  - LastModified {String} the last modification time of the channel\n  - PublishUrls {Array} the publish urls for the channel\n  - PlayUrls {Array} the play urls for the channel\n- nextMarker: result.data.NextMarker || null,\n- isTruncated: result.data.IsTruncated === 'true'\n- res {Object} response info\n\nexample:\n\n- List live channels\n\n```js\nvar r = yield this.store.listChannels({\n  prefix: 'my-channel',\n  'max-keys': 3\n});\nconsole.log(r);\n```\n\n### .getChannelHistory*(id[, options])\n\nGet the live channel history.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the history information.\n\nobject:\n\n- records {Object} the pushing records, each in the structure:\n  - StartTime {String} the start time\n  - EndTime {String} the end time\n  - RemoteAddr {String} the remote addr\n- res {Object} response info\n\nexample:\n\n- Get the live channel history\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.getChannelHistory(cid);\nconsole.log(r);\n```\n\n### .createVod*(id, name, time[, options])\n\nCreate a VOD playlist for the channel.\n\nparameters:\n\n- id {String} the channel id\n- name {String} the playlist name\n- time {Object} the duration time\n  - startTime {Number} the start time in epoch seconds\n  - endTime {Number} the end time in epoch seconds\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Create a vod playlist of a live channel\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.createVod(cid, 're-play', {\n  startTime: 1460464870,\n  endTime: 1460465877\n});\nconsole.log(r);\n```\n\n### .getRtmpUrl(channelId[, options])\n\nGet signatured rtmp url for publishing.\n\nparameters:\n\n- channelId {String} the channel id\n- [options] {Object} optional parameters\n  - [expires] {Number} the expire time in seconds of the url\n  - [params] {Object} the additional paramters for url, e.g.: {playlistName: 'play.m3u8'}\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the rtmp url.\n\nexample:\n\n- Get a rtmp url.\n\n```js\nvar cid = 'my-channel';\n\nvar url = this.store.getRtmpUrl(this.cid, {\n  params: {\n    playlistName: 'play.m3u8'\n  },\n  expires: 3600\n});\nconsole.log(url);\n// rtmp://ossliveshow.oss-cn-hangzhou.aliyuncs.com/live/tl-channel?OSSAccessKeyId=T0cqQWBk2ThfRS6m&Expires=1460466188&Signature=%2BnzTtpyxUWDuQn924jdS6b51vT8%3D\n```\n\n## Create A Image Service Instance\n\nEach Image Service instance required `accessKeyId`, `accessKeySecret`, `bucket` and `imageHost`.\n\n### oss.ImageClient(options)\n\nCreate a Image service instance.\n\noptions:\n- imageHost {String} your image service domain that binding to a OSS bucket\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- bucket {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nvar oss = require('ali-oss');\n\nvar imgClient = oss.ImageClient({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'my_image_bucket'\n  imageHost: 'thumbnail.myimageservice.com'\n});\n```\n\n## Image Operations\n\nAll operations function is [generator], except `imgClient.signatureUrl`.\n\ngenerator function format: `functionName*(...)`.\n\n### imgClient.get*(name, file[, options])\n\nGet an image from the image channel.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the image\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image with a style and store it to the local file\n\n```js\nvar imagepath = '/home/ossdemo/demo.jpg';\nyield imgClient.get('ossdemo/demo.jpg@200w_200h', filepath);\n```\n\n_ Store image to a writestream\n\n```js\nyield imgClient.get('ossdemo/demo.jpg@200w_200h', somestream);\n```\n\n- Get an image content buffer\n\n```js\nvar result = yield imgClient.get('ossdemo/demo.jpg@200w_200h');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a not exists object or a not image object\n\n```js\nvar imagepath = '/home/ossdemo/demo.jpg';\nyield imgClient.get('ossdemo/not-exists-demo.jpg@200w_200h', filepath);\n// will throw NoSuchKeyError\n```\n\n### imgClient.getStream*(name[, options])\n\nGet an image read stream.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image object stream\n\n```js\nvar result = yield imgClient.getStream('ossdemo/demo.jpg@200w_200h');\nresult.stream.pipe(fs.createWriteStream('some demo.jpg'));\n```\n\n### imgClient.getExif*(name[, options])\n\nGet a image exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nIf object don't have exif, will throw 400 BadRequest.\n\nexample:\n\n```js\nvar result = yield imgClient.getExif('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n### imgClient.getInfo*(name[, options])\n\nGet a image info and exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nexample:\n\n```js\nvar result = yield imgClient.getInfo('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     Format: \"jpg\",\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n\n### imgClient.putStyle*(name, style[, options])\n// TODO\n\n### imgClient.getStyle*(name[, options])\n\nGet a style by name from the image channel.\n\nparameters:\n- name {String} image style name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} styles object\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nvar result = yield imgClient.getStyle('400');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"234\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:58:20 GMT\"\n//     },\n//     size: 234,\n//     aborted: false,\n//     rt: 398,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }\n// }\n```\n\n### imgClient.listStyle*([options])\n\nGet all styles from the image channel.\n\nparameters:\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Array} styles array, a style object:\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nvar result = yield imgClient.listStyle();\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"913\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:47:32 GMT\"\n//     },\n//     size: 913,\n//     aborted: false,\n//     rt: 1911,\n//     keepAliveSocket: false\n//   },\n//   data: [{\n//     Name: \"200-200\",\n//     Content: \"0e_200w_200h_0c_0i_0o_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:28:08 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:28:08 GMT\"\n//   }, {\n//     Name: \"800\",\n//     Content: \"800w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:29:15 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:29:15 GMT\"\n//   }, {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }, {\n//     Name: \"600\",\n//     Content: \"600w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:35:02 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:35:02 GMT\"\n//   }]\n// }\n```\n\n### imgClient.deleteStyle*(name[, options])\n// TODO\n\n### imgClient.signatureUrl(name)\n\nCreate a signature url for directly download.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return full signature url.\n\nexample:\n\n```js\nvar url = imgClient.signatureUrl('\n');\n// http://thumbnail.myimageservice.com/demo.jpg@200w_200h?OSSAccessKeyId=uZxyLARzYZtGwHKY&Expires=1427803849&Signature=JSPRe06%2FjQpQSj5zlx2ld1V%2B35I%3D\n```\n\n## Cluster Mode\n\nCluster mode now only support object operations.\n\n```js\nvar Cluster = require('ali-oss').ClusterClient;\n\nvar client = Cluster({\n  cluster: [{\n    host: 'host1',\n    accessKeyId: 'id1',\n    accessKeySecret: 'secret1'\n  }, {\n    host: 'host2',\n    accessKeyId: 'id2',\n    accessKeySecret: 'secret2'\n  }],\n  schedule: 'masterSlave', //default is `roundRobin`\n});\n\n// listen error event to logging error\nclient.on('error', function(err) {\n  console.error(err.stack);\n});\n\n// client init ready\nclient.ready(function() {\n  console.log('cluster client init ready, go ahead!');\n});\n```\n\n### Get Methods\n\nWill choose an alive client by schedule(`masterSlave` or `roundRobin`).\n\n- `client.get()`\n- `client.head()`\n- `client.getStream()`\n- `client.list()`\n- `client.signatureUrl()`\n- `client.chooseAvailable()` - choose an available client by schedule.\n- `client.getACL()`\n\n### Put Methods\n\nWill put to all clients.\n\n- `client.put()`\n- `client.putStream()`\n- `client.delete()`\n- `client.deleteMulti()`\n- `client.copy()`\n- `client.putMeta()`\n- `client.putACL()`\n\n## Wrapper Usage\n\nWe provide an async wrapper which can be used without `co`. All the\nmethods are preserved, just in a async way:\n\n```js\n\nvar OSS = require('ali-oss').Wrapper;\nvar STS = OSS.STS;\n\nvar client = new OSS({ /* same options */});\n\nclient.put('hello', new Buffer('world')).then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n\nclient.get('hello').then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n\nvar url = client.signatureUrl('hello');\nconsole.log(url);\n\nvar stsClient = new STS({ /* same options */});\n\nvar role = 'role';\n\nstsClient.assumeRole(role).then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n```\n\n## Browser Usage\n\nYou can use most of the functionalities of `ali-oss` in browser with\nsome exceptions:\n\n- put object with streaming: no chunked encoding, we use multipart\n  upload instead\n- get object to local file: we cannot manipulate file system in\n  browser, we provide signed object url for downloading needs\n- bucket operations(listBuckets, putBucketLogging, etc) will fail: OSS\n  server currently do not support CORS requests for bucket operations\n  (will probably be fixed later)\n\n### Compatibility\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n\n### Setup\n\n#### Bucket setup\n\nAs browser-side javascript involves CORS operations. You need to setup\nyour bucket CORS rules to allow CORS operations:\n\n- set allowed origins to '\\*'\n- allowed methods to 'PUT, GET, POST, DELETE, HEAD'\n- set allowed headers to '\\*'\n- expose 'ETag' in expose headers\n\n#### STS setup\n\nAs we don't want to expose the accessKeyId/accessKeySecret in the\nbrowser, a [common practice][oss-sts] is to use STS to grant temporary\naccess.\n\n### Basic usage\n\nInclude the sdk lib in the `<script>` tag and you have `OSS` available\nfor creating client. We use `OSS.Wrapper` here to avoid using `co`:\n\n```html\n<script src=\"http://gosspublic.alicdn.com/aliyun-oss-sdk.min.js\"></script>\n<script type=\"text/javascript\">\n  var client = new OSS.Wrapper({\n    region: 'oss-cn-hangzhou',\n    accessKeyId: '<access-key-id>',\n    accessKeySecret: '<access-key-secret>',\n    bucket: '<bucket-name>'\n  });\n\n  client.list().then(function (result) {\n    console.log('objects: %j', result.objects);\n    return client.put('my-obj', new OSS.Buffer('hello world'));\n  }).then(function (result) {\n    console.log('put result: %j', result);\n    return client.get('my-obj');\n  }).then(function (result) {\n    console.log('get result: %j', result.content.toString());\n  });\n</script>\n```\nThe full sample can be found [here][browser-sample].\n\n### How to build\n\n```bash\nnpm run build-dist\n```\n\nAnd see the build artifacts under `dist/`.\n\n## Known Errors\n\nEach error return by OSS server will contains these properties:\n\n- name {String} error name\n- message {String} error message\n- requestId {String} uuid for this request, if you meet some unhandled problem,\n    you can send this request id to OSS engineer to find out what's happend.\n- hostId {String} OSS cluster name for this request\n\nname | status | message | message in Chinese\n---  | ---    | ---     | ---\nAccessDeniedError | 403 | Access Denied | 拒绝访问\nBucketAlreadyExistsError | 409 | Bucket already exists | Bucket 已经存在\nBucketNotEmptyError | 409 | Bucket is not empty | Bucket 不为空\nEntityTooLargeError | 400 | Entity too large | 实体过大\nEntityTooSmallError | 400 | Entity too small | 实体过小\nFileGroupTooLargeError | 400 | File group too large | 文件组过大\nInvalidLinkNameError | 400 | Link name can't be the same as the object name | Object Link 与指向的 Object 同名\nLinkPartNotExistError | 400 | Can't link to not exists object | Object Link 中指向的 Object 不存在\nObjectLinkTooLargeError | 400 | Too many links to this object | Object Link 中 Object 个数过多\nFieldItemTooLongError | 400 | Post form fields items too large | Post 请求中表单域过大\nFilePartInterityError | 400 | File part has changed | 文件 Part 已改变\nFilePartNotExistError | 400 | File part not exists | 文件 Part 不存在\nFilePartStaleError | 400 | File part stale | 文件 Part 过时\nIncorrectNumberOfFilesInPOSTRequestError | 400 | Post request contains invalid number of files | Post 请求中文件个数非法\nInvalidArgumentError | 400 | Invalid format argument | 参数格式错误\nInvalidAccessKeyIdError | 400 | Access key id not exists | Access Key ID 不存在\nInvalidBucketNameError | 400 | Invalid bucket name | 无效的 Bucket 名字\nInvalidDigestError | 400 | Invalid digest | 无效的摘要\nInvalidEncryptionAlgorithmError | 400 | Invalid encryption algorithm | 指定的熵编码加密算法错误\nInvalidObjectNameError | 400 | Invalid object name | 无效的 Object 名字\nInvalidPartError | 400 | Invalid part | 无效的 Part\nInvalidPartOrderError | 400 | Invalid part order | 无效的 part 顺序\nInvalidPolicyDocumentError | 400 | Invalid policy document | 无效的 Policy 文档\nInvalidTargetBucketForLoggingError | 400 | Invalid bucket on logging operation | Logging 操作中有无效的目标 bucket\nInternalError | 500 | OSS server internal error | OSS 内部发生错误\nMalformedXMLError | 400 | Malformed XML format | XML 格式非法\nMalformedPOSTRequestError | 400 | Invalid post body format | Post 请求的 body 格式非法\nMaxPOSTPreDataLengthExceededError | 400 | Post extra data too large | Post 请求上传文件内容之外的 body 过大\nMethodNotAllowedError | 405 | Not allowed method | 不支持的方法\nMissingArgumentError | 411 | Missing argument | 缺少参数\nMissingContentLengthError | 411 | Missing `Content-Length` header | 缺少内容长度\nNoSuchBucketError | 404 | Bucket not exists | Bucket 不存在\nNoSuchKeyError | 404 | Object not exists | 文件不存在\nNoSuchUploadError | 404 | Multipart upload id not exists | Multipart Upload ID 不存在\nNotImplementedError | 501 | Not implemented | 无法处理的方法\nPreconditionFailedError | 412 | Pre condition failed | 预处理错误\nRequestTimeTooSkewedError | 403 | Request time exceeds 15 minutes to server time | 发起请求的时间和服务器时间超出 15 分钟\nRequestTimeoutError | 400 | Request timeout | 请求超时\nRequestIsNotMultiPartContentError | 400 | Invalid post content-type | Post 请求 content-type 非法\nSignatureDoesNotMatchError | 403 | Invalid signature | 签名错误\nTooManyBucketsError | 400 | Too many buckets on this user | 用户的 Bucket 数目超过限制\nRequestError | -1 | network error | 网络出现中断或异常\nConnectionTimeout | -2 | request connect timeout | 请求连接超时\nSecurityTokenExpired | 403 | sts Security Token Expired | sts Security Token 超时失效\n\n[generator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n[oss-sts]: https://help.aliyun.com/document_detail/oss/practice/ram_guide.html\n[browser-sample]: https://github.com/rockuw/oss-in-browser\n[oss-multipart]: https://help.aliyun.com/document_detail/oss/api-reference/multipart-upload/InitiateMultipartUpload.html\n[disabled-browser-headers]: https://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n",
      "readmeFilename": "README.md",
      "gitHead": "b693a4bf2b9edb341347bc3341d174eaa15fccea",
      "_id": "ali-oss@4.15.0",
      "_npmVersion": "5.3.0",
      "_nodeVersion": "8.9.1",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "dist": {
        "integrity": "sha512-3WK0vI5Q7CSgp34Ke46rng9h3uXXHVTu2bJv6ni2/RbmklPzpbAFdPC3WYLdWEWA87J4ugokWYEfMhAMaZZVfA==",
        "shasum": "87e2e6050096e58b17f590b4830b9bbee30642a9",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.15.0.tgz",
        "fileCount": 31,
        "unpackedSize": 319660,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa0b5MCRA9TVsSAnZWagAAZLcP/RYTlaba9jD+YXKVN6en\njMHE0tLdnkgKTiTPSHkLfSCVpa+wHZQ/mr5kLij5Pu1MbLmCNfJ+fd02gWWS\naBbq+oEv38e/89traRp9Ao1AUHEkUmCL6KoCNlu6cUnAJSqA+E/9oo8HSxOz\n26y5zudDFVWYBNztfSuAd1lq9PzatCinu5fVldPyNhmh/PxZHdJKAQ0EKycK\n33wkszL8hEYekO75pKFQivwtVg5ySoEcDTwgAwpEVf4bTSAd17J+Rvil36KP\nOi07blky+PEooP9BR6LNqZ+H9yzFBRUA0hYnbOTAZx4Vh6QuQyt8Jr7himDp\nPxK3AKA+mzolfGJ7MRYlN9FMC60hUap8PBi7oJgEruV6XNPEyKkBZUiu6iLz\nERO3k6qBETdx9EtF2BYu7tVSHFRfH/SDWhB163uPsmRYxPZnwU97M56Dcp2K\ngzq6Z+cl/42+h6+E1D7IOAp1Bj5otdDFCEqAHzxy3xQAejxf199M5+yfkXhj\n4TKvkwxhdBV3Hx66BEfAyddMR1P5ar3yOMFbAc+OL+b3tW7C8m1eEjdz/PHs\ndSfEEWbrwrP2D3d9abLuPXKiE43vHi64FZJV571z8kpvrnwuRA7/bHMPbaxY\nrh6T5LTUnX2reesmQoN3JiABvLo5b70LRgrD9CgcbxPw71s032W3U2WSRrkA\nd2eZ\r\n=zLb0\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIBU3K+7VvqtshuXakhTNdM36NN3nWFj/jYvMJAh0jXeoAiAZFFXudQP9pp7ZHyfseVS+nVa/MpxASeSJ2NkbUlVJ0A=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_4.15.0_1523695179578_0.8325507181499034"
      },
      "_hasShrinkwrap": false
    },
    "5.1.0": {
      "name": "ali-oss",
      "version": "5.1.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- --require babel-register -R dot -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "co-priority-queue": "^1.0.3",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "stream-http": "^2.8.0",
        "any-promise": "^1.3.0"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "eca42388f1ea9aa60cbd414a84cd8eaea8688393",
      "_id": "ali-oss@5.1.0",
      "_npmVersion": "5.3.0",
      "_nodeVersion": "8.9.1",
      "_npmUser": {
        "name": "dead_horse",
        "email": "dead_horse@qq.com"
      },
      "dist": {
        "integrity": "sha512-P3pSpaY6XJ7L5y3nivnKZqvKcoIeOEglUfS1qjgu5B/IcIaTmGIRQY5HiHGNiSuYot0DspcmBT8/PkuhN6mm0g==",
        "shasum": "d02f0d148d3ba5354cc1af91d6f518b87c218371",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-5.1.0.tgz",
        "fileCount": 35,
        "unpackedSize": 337729,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa0b+0CRA9TVsSAnZWagAAreMQAICP67tp6DRaO3+KABit\nfL/8Y4y6IetqczYH+TyuubMzuFq8QozC1N1S1IPdpBzQrdEkTRnM4xEpXCnb\nnwI7wzDnrN3PjqjDgN/27cVQ/gMcRc14T+hacZQ4HDpMfRiU/X8VsGWVjhQd\nhfocgNinXrvfbQ5GpnFt/XSCVzfNJdRqmkQv+tuu0bkWMgkKrrbyr3/h658O\nkLN+QgOpTnXJ4CDJkxZmXwkfh+OSoUZBnIazugHuyIhZvBJE/0Oy+M2f1y2u\noInnJyIt7EfvC5TDmCzuuU/VrET4uIJrdghNd64b/cWWtKPTm4uB31YF4cfX\nqnYACrG78YijhVpPrQZecZ059kL/zZnIntaBLMFi1z0fGCS3BOpyiBlA9QyA\nYXT9pZnKpaHhYPpovjhDEPPoFyUXsmyMG4PEYZFNlI7AkypEKPHYkwT9zePF\nLTk03sTceT2SffexXnHrKsDSYKmKZRnL8xwgfi3k284UQuc7u71hcDZoshe+\nGayHTWMhmgeV9TBrQJxJdIKGAjZAl0wUUTOpPDuTMhvo5p8CAXN2qVqBwUdi\naF99Bvh9oQlAUjiiqx80Mhj6zyMPHYAWHPKgSeAziKrH5CBECtyeTErvGxJr\n4Idtgg6OGhmNPfO/9SEvuQBf3F/RG3wbE6NssFywywczAbzuRjp0kKHFYmue\nzGf7\r\n=/kPW\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGMRf8/9sKJEOoBPyB2P/ttyKssziBcBjhgv8KHhxfrTAiA4rfwiiIDo+GVpvTAxnuSI87vvUGDmRR9LrgWeSVooIA=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_5.1.0_1523695537541_0.5872199059702339"
      },
      "_hasShrinkwrap": false
    },
    "5.1.1": {
      "name": "ali-oss",
      "version": "5.1.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- --require babel-register -R dot -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "co-priority-queue": "^1.0.3",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "stream-http": "^2.8.0",
        "any-promise": "^1.3.0"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "1c9ded20bd0c788374ad573584921e8d6f544663",
      "_id": "ali-oss@5.1.1",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.11.1",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "dist": {
        "integrity": "sha512-LC4JKum3iVFbA0tyFKapDHNnpmmg8ZiRrA53UHELeSmwaNaYE6iNSyg+K5gjB6ujjSH1qCTMAXSLf8By4V98Wg==",
        "shasum": "ba4db7937d6a55f5784be97e48b86ed022ee0856",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-5.1.1.tgz",
        "fileCount": 35,
        "unpackedSize": 1473135,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa1JDECRA9TVsSAnZWagAAKhAP/37WhZXS5ecM27a0fNbu\nNDcrKyUnUdlNr9blkNpGiaPzqFOaCImroeWFvsTF3jEf/8zczghe11O43Hfd\nGFgoJ6akQl++S055dvx8l9bH+rwuMkDup6sNc7/R/USqShQIaxib80sxGUHN\nLo38RCkW48rRgZZdQXPRFcYpHwFavgQH93XYbUw4IHatGUKCrmC7n4n9kEZm\n/+ARrl3s4/aPa4qHvMZwAv+sHGr79l+ssqgrQvLiwAnyfDx9Myyuo9fREEaC\nflyOJCZ4eL533HB8Hh2Tbeh2otsuSLqmtY4juPYZceAp8pdRZfQ8JtO8O9dy\nFf1EmHeF/Y0RKP43Y2B0SOnLvzmkN/8tTGf/z+IsdC/mKalFDW+wtGd6mvuq\nU31kxt3jA7ZauVf2IMRH6VozoG0idqE+r18m5cYBiwrITMPasRSePruBoK9Y\nl9W9vcj+hm/z2uUCL111Dl69GAMVNG2Khg/2quES9Dtk9gc9qo+qXLpIUYfQ\n33bDqV0CuFviqKf++O63Gk5YBFfKTkd/h0dX22s6qzSeOUHe3SEr9Gp0VzpV\nrDWyb3kxJFdCujbaBjGgH1GodleDv3GBrFtesVd0JH0cR/ZcHSupc5IhdYdH\nVp/CGJbJeV8qYdaxiZRxqhN/eM3a6drOKhe+p/OV2Hlg91uB66UbLiz6wcCY\nagAT\r\n=+3WM\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEkR+Gx0qU/s6OaNIfQLDaWj8k/HAWEVy1mant2uwP+eAiBPFGbDmBIk0UW6FdNOXjmxLQNVML/BW43LiFgbsDO5aQ=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_5.1.1_1523880129676_0.11671767963172353"
      },
      "_hasShrinkwrap": false
    },
    "5.2.0": {
      "name": "ali-oss",
      "version": "5.2.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "co-priority-queue": "^1.0.3",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "stream-http": "^2.8.0",
        "any-promise": "^1.3.0"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "9c5c735e8ee945c55b4a523e37d0827cf6f4484f",
      "_id": "ali-oss@5.2.0",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "8.10.0",
      "_npmUser": {
        "name": "haibing.w",
        "email": "binghaiwang@gmail.com"
      },
      "dist": {
        "integrity": "sha512-RV8HmPera4/M6wCRQQgwD15jdfD14qaUQarwTflD7icxXtEnb1rU4exIJxDjbJ5O4LL/DQaro2FqXe9Wqe5wlw==",
        "shasum": "b80c382278487feec4071d35566bc5d6b16b60b3",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-5.2.0.tgz",
        "fileCount": 37,
        "unpackedSize": 1492272,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa8Tw0CRA9TVsSAnZWagAAacQP/imtgjcS4HqQ+oUOMW0S\nowh+YTEau4qK2V98gahX9HXiWOa4Ge6audTpqfooInIXk0tFshOpqVUGt2hq\npP3Hz7bWd5HvhwlPwR3gTFWhNXJ7ncq2PKTn0YDIBpQ6LThSfR32fnqvgMal\nKRfLYfuMSpgip4Go9LLpjRtC42jaBFHJDl4Q6ULMgMaOB9V7oAx9WZ+TqKUA\n4VHQ60nQLeUBIp4/zY58nwBsTtS8kENt5DqEMlXNSIgDzSN5P/yELPP6Hq0w\naaBdIXJ4LTpcF2PCyy09/m+BbMSjQ+yM+m+n6XdwokQ/SgECTxx34kYl+qlx\nOGOGNOhBAgIw1s57HTP7wcvUTiy83Flpd8tqyuq4/908om5QAa245cgAG6Y+\nMcnQcLcWI54eUdpU5VIEahhv7KupiM9hw42+oHU/AjAnSeYs6T6ngAgtqflB\n+3X1TO1oTG8NnBO4wqbDm31Oo2WPNjniXPKKXqKATkkCRFaO/lYVjerQkmf7\nEHHh9zup9o4JUBem9P3bxPcuy5vKTz4h9eCv/nd7FCNEALxhP4AjG2Pn7Jse\n5xUcRoJGQWXZABqE0/DYATnBjtB/rXVwhTg6+Y1pKIA9kcDuLIYRQjbABI5U\n0/omlDtw+H56l+39eTWgI6rAny63dFNjI1+ADMR7afpQLSQShKVuZ6iZTEc+\n9My4\r\n=Ih51\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCID+tNuiWhnBXO1lVDRskSOziqlmqjFAaEkbBFXxJKbSxAiAtTX6F3Lv9rZk6IWtvao4eVN19VWoTZYAG7rI4dwx5LQ=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_5.2.0_1525759025121_0.7264801772776193"
      },
      "_hasShrinkwrap": false
    },
    "5.3.0": {
      "name": "ali-oss",
      "version": "5.3.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "co-priority-queue": "^1.0.3",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "stream-http": "^2.8.0",
        "any-promise": "^1.3.0"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "e65166718a7c9a33bcc4da2cd5704e469a332db3",
      "_id": "ali-oss@5.3.0",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.9.1",
      "_npmUser": {
        "name": "jackycheung888",
        "email": "2378278470@qq.com"
      },
      "dist": {
        "integrity": "sha512-wHELobwvmDasw7KcJva2pi1QvdDZKMI/vpIe3zqI3juS+2kD9970CHKVFIX+ra3hGHGHytTO/u0lpskVWXKshw==",
        "shasum": "07caf54647f2124c5842e32df27a1430abbb4d15",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-5.3.0.tgz",
        "fileCount": 36,
        "unpackedSize": 1493475,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbKfJ0CRA9TVsSAnZWagAAABsP+gLp/vfolUAlNRYn2Tu9\nd6hF6XzaRKpLqmUcqTIq+PgKPSIvUeDx9Jzp2w++zc81bLQwohBGNZj0WyJe\n15zPaGxBeDhpUnQCZuWW7O8xE+qsD1BGGZCqwsoouBaN3jI9TzOSNguzX4nT\na36cs9Ec0c4h7ZoBm9Rrl3Rqx6zB23Pu5lvvA7J3KReVycLlGw6iI2mxHdDf\nYr/MimYO8Bvpnn8TpNmriKBo/+lVLJEK349I1ihCNVd5NKzBtT64Vo8gaRDe\nqIrrqQ/HgdIIj8Tk0RC1gSSL56Ye/2S4VkyUHfcBrj4Xt/bjnTXLhtA82Dpy\nuFE9pci68lJyaSluFa6ae1wwE+cSs0GEuh1ODcXp3HK1mXZ/DLQQKgYhazsV\nPlepHS68gZeq/KlS7ij51Gv1oYBBh9D7n3xGYKbGCEFbqc+m2SnyPARcGGPR\n410UJggJXZg9XgoGkc9ZqoR2FlNHwB0JDHqj3/vDUPZ0Qfo6Q2RSd9/7ujPH\nJsvxSWd5uYtqcM0jZegO4+i4t44Ff6noip++MmsQ2qh+tT/f0RzO1njKPJYW\nY6LI75K/Z0zYBnFauFlMTEWylWcwZxxv9nr9vubOT3cu2IC55v26STaMoZxg\n/9qOThLU6Z9U+0F+FGWxSIgl0S8iF3WeMBEGcNqS646skDOyO9O5OYbF6MfH\niXdh\r\n=7N9L\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC0649mWqyvwyI42gy4Vr0mlU8wLgz4Lj6ol683vGyz1gIhAL8l5vLWNAoXlKCdNJRCNt9GgEmRiLMkF/+fiphckmGo"
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_5.3.0_1529475698424_0.18658945367827107"
      },
      "_hasShrinkwrap": false
    },
    "5.3.1": {
      "name": "ali-oss",
      "version": "5.3.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "co-priority-queue": "^1.0.3",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "stream-http": "2.8.2",
        "any-promise": "^1.3.0"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "63df586279dfadd2494f89eb4234b3dc52ade542",
      "_id": "ali-oss@5.3.1",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.9.1",
      "_npmUser": {
        "name": "jackycheung888",
        "email": "2378278470@qq.com"
      },
      "dist": {
        "integrity": "sha512-gb1LjKzkCpGi4k96Ogz7xHavPF4WJdiyyTP38i/udPRx7BTAV6hF13CIgCVAIqr7ilYKXGLVcA79wT9Hi+V65g==",
        "shasum": "b70c0f6b5776699ff4891f49fa0bf5a50cfd5f59",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-5.3.1.tgz",
        "fileCount": 36,
        "unpackedSize": 1496609,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbNE38CRA9TVsSAnZWagAA5zUQAJdcDyDDUtBe+6fHsl6L\n/Q/x6G56EDAYVKMNN02BgWltY9lQ9pfxpWqitujmMmrWx9bJ0CEWMfUe1ajn\nPo+FecoU26LPvYNtVLbBpPRm95LiozSOm1zi2bAy8v4mH8fBzU7dhBxiWmqS\nw1NzkKCavxWIak8X2x0vAKF5GOBoE6DZon75+9b0+sMG/iq/3ONvrvf/C6wO\nV1QvmuJRGutZo+Z+wLzaJV+ZcTPRe95Z+3lpUjSlfV8BT1v/8y6xb58korqx\nJnczoyZOBupjpeS4a27yAW2yky+M5Ig81sInc7ieUbG55H8rDGQg59tmaPEt\nqDWk5D71u4iWB7d0feA+qGGU0Ghqe9R6hgxvKEHu68f4pFC4WtdIcM8PAYmj\nXyKCk3yDp0jMb4fiNW4pP9LewICyaEXoQXYrSFoU+s3T6qcaKMEfb8NJONbo\nKoguNqabqD8WD2v+3DrzHiAydvWC0aloiBSwmCkTGoLSbLDcbJeFBIjqf7NK\nSmbUdcxCxJkJd0sjze+pEEbeKlRz8X57PetTm5hK2E5/PQFJQvlflMelgYXR\npzJlkSj10hPJCcR3RRtwvX31LhW6ww5F3r9A8CczjdUgjqQ6bBDXEPkzrRuA\nR5qrr5BTDWlVPKZezNbT8JuN0kBrGN8xfY3ZoxyzuYfBVRbEN2cFFm2RoQfl\n9cBB\r\n=kBo7\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDV5VCJr1oJTj3lWhyPA4XYpyrFySUcPKLnheyOOfjAYgIgfpCuHgcgHn+JzDInOpJRVdahXPkX11pcYAxjo8Io7T0="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_5.3.1_1530154492708_0.2629392799794825"
      },
      "_hasShrinkwrap": false
    },
    "6.0.0": {
      "name": "ali-oss",
      "version": "6.0.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^2.1.1",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "stream-http": "2.8.2",
        "any-promise": "^1.3.0"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "0f3b21bb8b0f51f051284349f794669069682de8",
      "_id": "ali-oss@6.0.0",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.9.1",
      "_npmUser": {
        "name": "jackycheung888",
        "email": "2378278470@qq.com"
      },
      "dist": {
        "integrity": "sha512-rHZ+d+BM5ATeuhoseNegXTbPbDP2Rxi8bzfwktKnwxzv7OOWlXQWOs0dpwKAMJmNL1Vl/Xiq1TWVLJF037hUgQ==",
        "shasum": "b5698595b3791aa101041c8e76c67e61c7931107",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.0.0.tgz",
        "fileCount": 34,
        "unpackedSize": 3016083,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbRH16CRA9TVsSAnZWagAAmC0P/3Vi4ABJaJvBBX9yHExq\nJ/SUwsJj6cgl7eJk2lH+Hn41aN9B/t+/Vb6ZkTpQ8ARYHVrCKxsGxrhh6pdX\nan/fnEb1x+j1auctXTza2a/r+M3SlqjZ9n0ol4IVKWCDPcSFGM1FiFYTHiRg\nyca1neYgXeZvKWetQ3/vyY9SCQglDQttRzmVrr3YEOrjBsdAZqJdp8BhD0xU\nSsUrTbdaz2Pyz9GkDjYMPKIBzSWILj2b3xbazqnOy5gQDvx/haKnnHY6xi3C\nGoNbuRPOeRzM0yt8Vc9UGmlS9k8iol7zZG3BJZBZxLVJwsZ7gcXDaEpPMYUZ\nFC88r+0m8qxpTotfCq3cPLK+VKl8gvUNlvTnPrgUr/fKpNcsgHEMwuPlP6Sr\nC4MJI36iWRaBrS+gqBmB3AHfbSkivw1xYZeLn2N0eGLc3HgyFOKcP27E4NbX\nX3bwa07jFaNZwxWE91az20fb9JBiD0IXB0O00csM3lFtGAu5ffrwh0hOoHF1\nNXklacxUPQpyY2X5krmatBnTHZieTMmFxMoslyh0eTJtBCX8z1R7WkDhsbSh\nivtjEAweIQRYPrExEu4dLWbbSJWPUoZiKKkDWUjFHgeOmqSoGxNFjvf3wC4S\nYgNDQg4J1yAbW7k/q26zod7lLmevbY6NxvvgEUI9c02vCCNHg60al+QkyEm3\nQePK\r\n=/6Z7\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCrDUj3eDynM+x9MUXpZ4GjjPslUchWE1zBmbubBv3GLgIhAJeXFmv1/9EeEy5TFCBtE+/CBk6qqhJkR4eDO6dQtMAB"
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.0.0_1531215226719_0.9731360048652236"
      },
      "_hasShrinkwrap": false
    },
    "5.3.2": {
      "name": "ali-oss",
      "version": "5.3.2",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "publishConfig": {
        "tag": "latest-5"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "co-priority-queue": "^1.0.3",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "readme": "oss-nodejs-sdk\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage][cov-image]][cov-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/ali-oss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/ali-oss\n[travis-image]: https://img.shields.io/travis/ali-sdk/ali-oss/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ali-sdk/ali-oss.svg?branch=master\n[cov-image]: http://codecov.io/github/ali-sdk/ali-oss/coverage.svg?branch=master\n[cov-url]: http://codecov.io/github/ali-sdk/ali-oss?branch=master\n[david-image]: https://img.shields.io/david/ali-sdk/ali-oss.svg?style=flat-square\n[david-url]: https://david-dm.org/ali-sdk/ali-oss\n\naliyun OSS(object storage service) Node.js client.\n\n## Install\n\n```bash\nnpm install ali-oss --save\n```\n\n## Compatibility\n\n### Node\nNode.js >= 8.0.0 required. You can use 4.x in Node.js < 8.\n\n### Browser\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n\n## License\n\n[MIT](LICENSE)\n\n# OSS Usage\n\nOSS, Object Storage Service. Equal to well known Amazon [S3](http://aws.amazon.com/s3/).\n\n## Summary\n\n- [Data Regions](#data-regions)\n- [Create Account](#create-acount)\n- [Create A Bucket Instance](#create-a-bucket-instance)\n  - [#oss(options)](#ossoptions)\n- [Bucket Operations](#bucket-operations)\n  - Base\n    - [.listBuckets*(query[, options])](#listbucketsquery-options)\n    - [.putBucket*(name, region[, options])](#putbucketname-region-options)\n    - [.useBucket(name, region)](#usebucketname-region)\n    - [.deleteBucket*(name, region[, options])](#deletebucketname-region-options)\n    - [.getBucketInfo*(name)](#getbucketinfoname)\n    - [.getBucketLocation*(name)](#getbucketlocationname)\n  - ACL\n    - [.putBucketACL*(name, region, acl[, options])](#putbucketaclname-region-acl-options)\n    - [.getBucketACL*(name, region[, options])](#getbucketaclname-region-options)\n  - Logging\n    - [.putBucketLogging*(name, region, prefix[, options])](#putbucketloggingname-region-prefix-options)\n    - [.getBucketLogging*(name, region[, options])](#getbucketloggingname-region-options)\n    - [.deleteBucketLogging*(name, region[, options])](#deletebucketloggingname-region-options)\n  - Website\n    - [.putBucketWebsite*(name, region, config[, options])](#putbucketwebsitename-region-config-options)\n    - [.getBucketWebsite*(name, region[, options])](#getbucketwebsitename-region-options)\n    - [.deleteBucketWebsite*(name, region[, options])](#deletebucketwebsitename-region-options)\n  - Referer\n    - [.putBucketReferer*(name, region, allowEmpty, referers[, options])](#putbucketreferername-region-allowempty-referers-options)\n    - [.getBucketReferer*(name, region[, options])](#getbucketreferername-region-options)\n    - [.deleteBucketReferer*(name, region[, options])](#deletebucketreferername-region-options)\n  - Lifecycle\n    - [.putBucketLifecycle*(name, region, rules[, options])](#putbucketlifecyclename-region-rules-options)\n    - [.getBucketLifecycle*(name, region[, options])](#getbucketlifecyclename-region-options)\n    - [.deleteBucketLifecycle*(name, region[, options])](#deletebucketlifecyclename-region-options)\n  - CORS\n    - [.putBucketCORS*(name, region, rules[, options])](#putbucketcorsname-region-rules-options)\n    - [.getBucketCORS*(name, region[, options])](#getbucketcorsname-region-options)\n    - [.deleteBucketCORS*(name, region[, options])](#deletebucketcorsname-region-options)\n- [Object Operations](#object-operations)\n  - [.list*(query[, options])](#listquery-options)\n  - [.put*(name, file[, options])](#putname-file-options)\n  - [.putStream*(name, stream[, options])](#putstreamname-stream-options)\n  - [.append*(name, file[, options])](#apendname-file-options)\n  - [.getObjectUrl(name[, baseUrl])](#getobjecturlname-baseurl)\n  - [.generateObjectUrl(name[, baseUrl])](#generateobjecturlname-baseurl)\n  - [.head*(name[, options])](#headname-options)\n  - [.get*(name, file[, options])](#getname-file-options)\n  - [.getStream*(name[, options])](#getstreamname-options)\n  - [.delete*(name[, options])](#deletename-options)\n  - [.copy*(name, sourceName[, options])](#copyname-sourcename-options)\n  - [.putMeta*(name, meta[, options])](#putmetaname-meta-options)\n  - [.deleteMulti*(names[, options])](#deletemultinames-options)\n  - [.signatureUrl(name[, options])](#signatureurlname-options)\n  - [.putACL*(name, acl[, options])](#putaclname-acl-options)\n  - [.getACL*(name[, options])](#getaclname-options)\n  - [.restore*(name[, options])](#restorename-options)\n  - [.initMultipartUpload*(name[, options])](#initmultipartuploadname-options)\n  - [.uploadPart*(name, uploadId, partNo, file, start, end[, options])](#uploadpartname-uploadid-partno-file-start-end-options)\n  - [.uploadPartCopy*(name, uploadId, partNo, range, sourceData[, options])](#uploadpartcopyname-uploadid-partno-range-sourcedata-options)\n  - [.completeMultipartUpload(name, uploadId, parts[, options])](#completemultipartuploadname-uploadid-parts-options)\n  - [.multipartUpload*(name, file[, options])](#multipartuploadname-file-options)\n  - [.multipartUploadCopy*(name, sourceData[, options])](#multipartuploadcopyname-sourcedata-options)\n  - [.listParts*(name, uploadId[, query, options])](#listparts-name-uploadid-query-options)\n  - [.listUploads*(query[, options])](#listuploadsquery-options)\n  - [.abortMultipartUpload*(name, uploadId[, options])](#abortmultipartuploadname-uploadid-options)\n- [RTMP Operations](#rtmp-operations)\n  - [.putChannel*(id, conf[, options])](#putchannelid-conf-options)\n  - [.getChannel*(id[, options])](#getchannelid-options)\n  - [.deleteChannel*(id[, options])](#deletechannelid-options)\n  - [.putChannelStatus*(id, status[, options])](#putchannelstatusid-status-options)\n  - [.getChannelStatus*(id[, options])](#getchannelstatusid-options)\n  - [.listChannels*(query[, options])](#listchannelsquery-options)\n  - [.getChannelHistory*(id[, options])](#getchannelhistoryid-options)\n  - [.createVod*(id, name, time[, options])](#createvodid-name-time-options)\n  - [.getRtmpUrl(channelId[, options])](#getrtmpurlchannelid-options)\n- [Create A Image Service Instance](#create-a-image-service-instance)\n  - [#oss.ImageClient(options)](#ossimageclientoptions)\n- [Image Operations](#image-operations)\n  - [imgClient.get*(name, file[, options])](#imgclientgetname-file-options)\n  - [imgClient.getStream*(name[, options])](#imgclientgetstreamname-options)\n  - [imgClient.getExif*(name[, options])](#imgclientgetexifname-options)\n  - [imgClient.getInfo*(name[, options])](#imgclientgetinfoname-options)\n  - [imgClient.putStyle*(name, style[, options])](#imgclientputstylename-style-options)\n  - [imgClient.getStyle*(name[, options])](#imgclientgetstylename-options)\n  - [imgClient.listStyle*([options])](#imgclientliststyleoptions)\n  - [imgClient.deleteStyle*(name[, options])](#imgclientdeletestylename-options)\n  - [imgClient.signatureUrl(name)](#imgclientsignatureurlname)\n- [Wrapper Usage](#wrapper-usage)\n- [Browser Usage](#browser-usage)\n- [Known Errors](#known-errors)\n\n## Data Regions\n\n[OSS current data regions](https://help.aliyun.com/document_detail/oss/user_guide/endpoint_region.html).\n\nregion | country | city | endpoint | internal endpoint\n---  | ---     | ---  | --- | ---\noss-cn-hangzhou | China | HangZhou | oss-cn-hangzhou.aliyuncs.com | oss-cn-hangzhou-internal.aliyuncs.com\noss-cn-shanghai | China | ShangHai | oss-cn-shanghai.aliyuncs.com | oss-cn-shanghai-internal.aliyuncs.com\noss-cn-qingdao | China | QingDao | oss-cn-qingdao.aliyuncs.com | oss-cn-qingdao-internal.aliyuncs.com\noss-cn-beijing | China | BeiJing | oss-cn-beijing.aliyuncs.com | oss-cn-beijing-internal.aliyuncs.com\noss-cn-shenzhen | China | ShenZhen | oss-cn-shenzhen.aliyuncs.com | oss-cn-shenzhen-internal.aliyuncs.com\noss-cn-hongkong | China | HongKong | oss-cn-hongkong.aliyuncs.com | oss-cn-hongkong-internal.aliyuncs.com\noss-us-west-1 | US | Silicon Valley | oss-us-west-1.aliyuncs.com | oss-us-west-1-internal.aliyuncs.com\noss-ap-southeast-1 | Singapore | Singapore | oss-ap-southeast-1.aliyuncs.com | oss-ap-southeast-1-internal.aliyuncs.com\n\n## Create Account\n\nGo to [OSS website](http://www.aliyun.com/product/oss/?lang=en), create a new account for new user.\n\nAfter account created, you can create the OSS instance and get the `accessKeyId` and `accessKeySecret`.\n\n## Create A Bucket Instance\n\nEach OSS instance required `accessKeyId`, `accessKeySecret` and `bucket`.\n\n## oss(options)\n\nCreate a Bucket store instance.\n\noptions:\n\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- [stsToken] {String} used by temporary authorization, detail [see](https://www.alibabacloud.com/help/doc-detail/32077.htm)\n- [bucket] {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [endpoint] {String} oss region domain. It takes priority over `region`.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`.\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`.\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [secure] {Boolean} instruct OSS client to use HTTPS (secure: true) or HTTP (secure: false) protocol.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nvar oss = require('ali-oss');\n\nvar store = oss({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\n```\n\n## Bucket Operations\n\n### .listBuckets*(query[, options])\n\nList buckets in this account.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search buckets using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [max-keys] {String|Number} max buckets, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return buckets list on `buckets` properties.\n\n- buckets {Array<BucketMeta>} bucket meta info list\n  Each `BucketMeta` will contains blow properties:\n    - name {String} bucket name\n    - region {String} bucket store data region, e.g.: `oss-cn-hangzhou-a`\n    - creationDate {String} bucket create GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n- owner {Object} object owner, including `id` and `displayName`\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 buckets\n\n```js\nvar result = yield store.listBuckets({\n  \"max-keys\": 10\n});\nconsole.log(result);\n```\n\n### .putBucket*(name, region[, options])\n\nCreate a new bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket exists and not belong to current account, will throw BucketAlreadyExistsError.\n  If bucket not exists, will create a new bucket and set it's ACL.\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n  If change exists bucket region, will throw BucketAlreadyExistsError.\n  If region value invalid, will throw InvalidLocationConstraintError.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [StorageClass] {String} the storeage type include (Standard,IA,Archive)\n\nSuccess will return the bucket name on `bucket` properties.\n\n- bucket {String} bucket name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Create a bucket name `helloworld` location on HongKong\n\n```js\nyield store.putBucket('helloworld', 'oss-cn-hongkong');\n// use it by default\nstore.useBucket('helloworld', 'oss-cn-hongkong');\n```\n\n- Create a bucket name `helloworld` location on HongKong StorageClass `Archive`\n\n```js\nyield store.putBucket('helloworld', 'oss-cn-hongkong', { StorageClass: 'Archive' });\n// use it by default\nstore.useBucket('helloworld', 'oss-cn-hongkong');\n```\n\n### .deleteBucket*(name, region[, options])\n\nDelete an empty bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket is not empty, will throw BucketNotEmptyError.\n  If bucket is not exists, will throw NoSuchBucketError.\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete the exists 'helloworld' bucket on 'oss-cn-hongkong'\n\n```js\nyield store.deleteBucket('helloworld', {\n  region: 'oss-cn-hongkong'\n});\n```\n\n### .useBucket(name, region)\n\nUse the bucket.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.useBucket('helloworld', 'oss-cn-hongkong');\n```\n\n### .getBucketInfo(name)\n\nGet bucket information,include CreationDate、ExtranetEndpoint、IntranetEndpoint、Location、Name、StorageClass、\nOwner、AccessControlList\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketInfo('helloworld').then( (res) => {\n    console.log(res.bucket)\n})\n```\n\n### .getBucketLocation(name)\n\nGet bucket location\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketLocation('helloworld').then( (res) => {\n    console.log(res.location)\n})\n```\n\n---\n\n### .putBucketACL*(name, region, acl[, options])\n\nUpdate the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- acl {String} access control list, current available: `public-read-write`, `public-read` and `private`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set bucket `helloworld` to `public-read-write`\n\n```js\nyield store.putBucketACL('helloworld', 'oss-cn-hongkong', 'public-read-write');\n```\n\n### .getBucketACL*(name, region[, options])\n\nGet the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld`\n\n```js\nvar result = yield store.getBucketACL('helloworld', 'oss-cn-hongkong');\nconsole.log(result.acl);\n```\n\n---\n\n### .putBucketLogging*(name, region, prefix[, options])\n\nUpdate the bucket logging settings.\nLog file will create every one hour and name format: `<prefix><bucket>-YYYY-mm-DD-HH-MM-SS-UniqueString`.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [prefix] {String} prefix path name to store the log files\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Enable bucket `helloworld` logging and save with prefix `logs/`\n\n```js\nyield store.putBucketLogging('helloworld', 'oss-cn-hongkong', 'logs/');\n```\n\n### .getBucketLogging*(name, region[, options])\n\nGet the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- enable {Boolean} enable logging or not\n- prefix {String} prefix path name to store the log files, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld` logging settings\n\n```js\nvar result = yield store.getBucketLogging('helloworld', 'oss-cn-hongkong');\nconsole.log(result.enable, result.prefix);\n```\n\n### .deleteBucketLogging(name, region[, options])\n\nDelete the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketWebsite*(name, region, config[, options])\n\nSet the bucket as a static website.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- config {Object} website config, contains blow properties:\n  - index {String} default page, e.g.: `index.html`\n  - [error] {String} error page, e.g.: 'error.html'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketWebsite('hello', 'oss-cn-hangzhou', {\n  index: 'index.html'\n});\n```\n\n### .getBucketWebsite*(name, region[, options])\n\nGet the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- index {String} index page\n- error {String} error page, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketWebsite*(name, region[, options])\n\nDelete the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketReferer*(name, region, allowEmpty, referers[, options])\n\nSet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list, e.g.:\n  ```js\n  [\n    'https://npm.taobao.org',\n    'http://cnpmjs.org'\n  ]\n  ```\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketReferer('hello', 'oss-cn-hangzhou', false, [\n  'https://npm.taobao.org',\n  'http://cnpmjs.org'\n]);\n```\n\n### .getBucketReferer*(name, region[, options])\n\nGet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketReferer*(name, region[, options])\n\nDelete the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketLifecycle*(name, region, rules[, options])\n\nSet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- rules {Array<Rule>} rule config list, each `Rule` will contains blow properties:\n  - [id] {String} rule id, if not set, OSS will auto create it with random string.\n  - prefix {String} store prefix\n  - status {String} rule status, allow values: `Enabled` or `Disabled`\n  - [days] {Number|String} expire after the `days`\n  - [date] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `date` and `days` only set one.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketLifecycle('hello', 'oss-cn-hangzhou', [\n  {\n    id: 'delete after one day',\n    prefix: 'logs/',\n    status: 'Enabled',\n    days: 1\n  },\n  {\n    prefix: 'logs2/',\n    status: 'Disabled',\n    date: '2022-10-11T00:00:00.000Z'\n  }\n]);\n```\n\n### .getBucketLifecycle*(name, region[, options])\n\nGet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the lifecycle rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketLifecycle*(name, region[, options])\n\nDelete the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketCORS*(name, region, rules[, options])\n\nSet CORS rules of the bucket object\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- rules {Array<Rule>} rule config list, each `Rule` will contains below properties:\n  - allowedOrigin {String/Array} configure for Access-Control-Allow-Origin header\n  - allowedMethod {String/Array} configure for Access-Control-Allow-Methods header\n  - [allowedHeader] {String/Array} configure for Access-Control-Allow-Headers header\n  - [exposeHeader] {String/Array} configure for Access-Control-Expose-Headers header\n  - [maxAgeSeconds] {String} configure for Access-Control-Max-Age header\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketCORS('hello', 'oss-cn-hangzhou', [\n  {\n    allowedOrigin: '*',\n    allowedMethod: [\n      'GET',\n      'HEAD',\n    ],\n  }\n]);\n```\n\n### .getBucketCORS*(name, region[, options])\n\nGet CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the CORS rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketCORS*(name, region[, options])\n\nDelete CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n## Object Operations\n\nAll operations function is [generator], except `signatureUrl`.\n\ngenerator function format: `functionName*(...)`.\n\n### .put*(name, file[, options])\n\nAdd an object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream|File(only support Browser)|Blob(only support Browser)} object local path, content buffer or ReadStream content instance use in Node, Blob and html5 File\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- data {Object} callback server response data, sdk use JSON.parse() return\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through local file path\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.put('ossdemo/demo.txt', filepath);\nconsole.log(object);\n\n{\n  name: 'ossdemo/demo.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829244'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through content buffer\n\n```js\nvar object = yield store.put('ossdemo/buffer', new Buffer('foo content'));\nconsole.log(object);\n\n{\n  name: 'ossdemo/buffer',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/buffer',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"xxx\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829243'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through readstream\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.put('ossdemo/readstream.txt', fs.createReadStream(filepath));\nconsole.log(object);\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .putStream*(name, stream[, options])\n\nAdd a stream object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- stream {ReadStream} object ReadStream content instance\n- [options] {Object} optional parameters\n  - [contentLength] {Number} the stream length, `chunked encoding` will be used if absent\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through readstream\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.putStream('ossdemo/readstream.txt', fs.createReadStream(filepath));\nconsole.log(object);\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .append*(name, file[, options])\n\nAppend an object to the bucket, it's almost same as put, but it can add content to existing object rather than override it.\n\nAll parameters are same as put except for options.position\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [position] {String} specify the position which is the content length of the latest object\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nobject:\n\n- name {String} object name\n- url {String} the url of oss\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- nextAppendPosition {String} the next position\n\nexample:\n\n```js\nvar object = yield store.apend('ossdemo/buffer', new Buffer('foo'));\n\n// append content to the existing object\nobject = yield store.apend('ossdemo/buffer', new Buffer('bar'), {\n  position: object.nextAppendPosition,\n});\n```\n\n### .getObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `endpoint`.\n\ne.g.:\n\n```js\nconst cdnUrl = client.getObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .generateObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `bucket and endpoint `.\nSuggest use generateObjectUrl instead of getObjectUrl.\n\ne.g.:\n\n```js\nconst url = client.generateObjectUrl('foo/bar.jpg');\n// cdnUrl should be `https://${bucketname}.${endpotint}foo/bar.jpg`\n\nconst cdnUrl = client.generateObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .head*(name[, options])\n\nHead an object and get the meta info.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status, maybe 200 or 304\n- meta {Object} object user meta, if not set on `put()`, will return null.\n    If return status 304, meta will be null too\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Head an exists object and get user meta\n\n```js\nyield this.store.put('ossdemo/head-meta', new Buffer('foo'), {\n  meta: {\n    uid: 1,\n    path: 'foo/demo.txt'\n  }\n});\nvar object = this.store.head('ossdemo/head-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  meta: {\n    uid: '1',\n    path: 'foo/demo.txt'\n  },\n  res: { ... }\n}\n```\n\n- Head a not exists object\n\n```js\nvar object = this.store.head('ossdemo/head-meta');\n// will throw NoSuchKeyError\n```\n\n### .get*(name[, file, options])\n\nGet an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the content\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Range' get specifying range bytes content, e.g.: `Range: bytes=0-9`\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object and store it to the local file\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nyield store.get('ossdemo/demo.txt', filepath);\n```\n\n_ Store object to a writestream\n\n```js\nyield store.get('ossdemo/demo.txt', somestream);\n```\n\n- Get an object content buffer\n\n```js\nvar result = yield store.get('ossdemo/demo.txt');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a processed image and store it to the local file\n\n```js\nvar filepath = '/home/ossdemo/demo.png';\nyield store.get('ossdemo/demo.png', filepath, {process: 'image/resize,w_200'});\n```\n\n- Get a not exists object\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nyield store.get('ossdemo/not-exists-demo.txt', filepath);\n// will throw NoSuchKeyError\n```\n\n### .getStream*(name[, options])\n\nGet an object read stream.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object stream\n\n```js\nvar result = yield store.getStream('ossdemo/demo.txt');\nresult.stream.pipe(fs.createWriteStream('some file.txt'));\n```\n\n### .delete*(name[, options])\n\nDelete an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf delete object not exists, will also delete success.\n\nexample:\n\n- Delete an exists object\n\n```js\nyield store.delete('ossdemo/someobject');\n```\n\n- Delete a not exists object\n\n```js\nyield store.delete('ossdemo/some-not-exists-object');\n```\n\n### .copy*(name, sourceName[, options])\n\nCopy an object from `sourceName` to `name`.\n\nparameters:\n\n- name {String} object name store on OSS\n- sourceName {String} source object name\n  If `sourceName` start with `/`, meaning it's a full name contains the bucket name.\n  e.g.: `/otherbucket/logo.png` meaning copy `otherbucket` logn.png object to current bucket.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n    If the `meta` set, will override the source object meta.\n  - [headers] {Object} extra headers\n    - 'If-Match' do copy if source object etag equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' do copy if source object etag not equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-Modified-Since' do copy if source object modified after this time,\n        otherwise throw PreconditionFailedError\n    - 'If-Unmodified-Since' do copy if source object modified before this time,\n        otherwise throw PreconditionFailedError\n\nSuccess will return the copy result in `data` property.\n\nobject:\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT string\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf source object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Copy same bucket object\n\n```js\nvar result = yield store.copy('newName', 'oldName');\n```\n\n- Copy other bucket object\n\n```js\nvar result = yield store.copy('logo.png', '/other-bucket/logo.png');\n```\n\n### .putMeta*(name, meta[, options])\n\nSet an exists object meta.\n\nparameters:\n\n- name {String} object name store on OSS\n- meta {Object} user meta, will send with `x-oss-meta-` prefix string\n  e.g.: `{ uid: 123, pid: 110 }`\n  If `meta: null`, will clean up the exists meta\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the copy result in `data` property.\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Update exists object meta\n\n```js\nvar result = yield store.putMeta('ossdemo.txt', {\n  uid: 1, pid: 'p123'\n});\nconsole.log(result);\n```\n\n- Clean up object meta\n\n```js\nyield store.putMeta('ossdemo.txt', null);\n```\n\n### .deleteMulti*(names[, options])\n\nDelete multi objects in one request.\n\nparameters:\n\n- names {Array<String>} object names, max 1000 objects in once.\n- [options] {Object} optional parameters\n  - [quiet] {Boolean} quiet mode or verbose mode, default is `false`, verbose mode\n    quiet mode: if all objects delete succes, return emtpy response.\n      otherwise return delete error object results.\n    verbose mode: return all object delete results.\n  - [timeout] {Number} the operation timeout\n\nSuccess will return delete success objects in `deleted` property.\n\n- [deleted] {Array<String>} deleted object names list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete multi objects in quiet mode\n\n```js\nvar result = yield store.deleteMulti(['obj1', 'obj2', 'obj3'], {\n  quiet: true\n});\n```\n\n- Delete multi objects in verbose mode\n\n```js\nvar result = yield store.deleteMulti(['obj1', 'obj2', 'obj3']);\n```\n\n### .list*(query[, options])\n\nList objects in the bucket.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 objects\n\n```js\nvar result = yield store.list();\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nvar result = yield store.list({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nvar result = yield store.list({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n### .signatureUrl(name[, options])\n\nCreate a signature url for download or upload object.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [method] {String} the HTTP method, default is 'GET'\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [response] {Object} set the response headers for download\n    - [content-type] {String} set the response content type\n    - [content-disposition] {String} set the response content disposition\n    - [cache-control] {String} set the response cache control\n    - See more: https://help.aliyun.com/document_detail/oss/api-reference/object/GetObject.html\n  - [callback] {Object} set the callback for the operation\n    - url {String} set the url for callback\n    - [host] {String} set the host for callback\n    - body {String} set the body for callback\n    - [contentType] {String} set the type for body\n    - [customValue] {Object} set the custom value for callback,eg. {var1: value1,var2:value2}\n\nSuccess will return signature url.\n\nexample:\n\n- Get signature url for object\n\n```js\nvar url = store.signatureUrl('ossdemo.txt');\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT'\n});\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  response: {\n    'content-type': 'text/custom',\n    'content-disposition': 'attachment'\n  }\n});\nconsole.log(url);\n```\n\n- Get a signature url for a processed image\n\n```js\nvar url = store.signatureUrl('ossdemo.png', {\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.png', {\n  expires: 3600,\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n```\n\n### .putACL*(name, acl[, options])\n\nSet object's ACL.\n\nparameters:\n\n- name {String} object name\n- acl {String} acl (private/public-read/public-read-write)\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set an object's ACL\n\n```js\nyield store.putACL('ossdemo.txt', 'public-read');\n```\n\n### .getACL*(name[, options])\n\nGet object's ACL.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get an object's ACL\n\n```js\nvar result = yield store.getACL('ossdemo.txt');\nconsole.log(result.acl);\n```\n\n### .restore*(name[, options])\n\nRestore Object.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Restore an object\n\n```js\nvar result = yield store.restore('ossdemo.txt');\nconsole.log(result.status);\n```\n\n### .initMultipartUpload(name[, options])\nBefore transmitting data in the Multipart Upload mode,\nyou must call the Initiate Multipart Upload interface to notify the OSS to initiate a Multipart Upload event.\nThe Initiate Multipart Upload interface returns a globally unique Upload ID created by the OSS server to identify this Multipart Upload event.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] Mime file type e.g.: application/octet-stream\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - [x-oss-server-side-encryption]\n    Specify the server-side encryption algorithm used to upload each part of this object,Type: string, Valid value: AES256 `x-oss-server-side-encryption: AES256`<br>\n    if use in browser you should be set cors expose header x-oss-server-side-encryption\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-server-side-encryption] if set request header x-oss-server-side-encryption, will return\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- uploadId {String} upload id, use for uploadPart, completeMultipart\n\nexample:\n\n```js\n  var result = yield store.initMultipartUpload('object');\n  console.log(result);\n```\n\n### .uploadPart(name, uploadId, partNo, file, start, end[, options])\nAfter initiating a Multipart Upload event, you can upload data in parts based on the specified object name and Upload ID.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- file {File|String}  is File or FileName, the whole file<br>\n Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB. <br>\n In Node you can use File or FileName, but in browser you only can use File.\n- start {Number} part start bytes  e.g: 102400\n- end {Number} part end bytes  e.g: 204800\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  var name = 'object';\n  var result = yield store.initMultipartUpload(name);\n  var uploadId = result.uploadId;\n  var file; //the data you want to upload, is a File or FileName(only in node)\n  //if file part is 10\n  var partSize = 100 * 1024;\n  var fileSize = 10 * partSize;//you need to calculate\n  var dones = [];\n  for (var i = 1; i <= 10; i++) {\n    var start = partSize * (i -1);\n    var end = Math.min(start + partSize, fileSize);\n    var part = yield store.uploadPart(name, uploadId, i, file, start, end);\n    dones.push({\n      number: i,\n      etag: part.etag\n    });\n    console.log(part);\n  }\n\n  //end need to call completeMultipartUpload api\n```\n\n### .uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])\nUsing Upload Part Copy, you can copy data from an existing object and upload a part of the data.\nWhen copying a file larger than 1 GB, you must use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- range {String} Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB, range value like `0-102400`\n- sourceData {Object}\n  - sourceKey {String} the source object name\n  - sourceBucketName {String} the source bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} The following request header is used for the source objects specified by x-oss-copy-source.\n    - [x-oss-copy-source-if-match]  default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]   default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]   default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since]   default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  var name = 'object';\n  var result = yield store.initMultipartUpload(name);\n\n  var partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (var i = 1; i <= 10; i++) {\n    var start = partSize * (i -1);\n    var end = Math.min(start + partSize, fileSize);\n    var range = start + '-' + (end - 1);\n    var part = yield store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n### .completeMultipartUpload(name, uploadId, parts[, options])\nAfter uploading all data parts, you must call the Complete Multipart Upload API to complete Multipart Upload for the entire file.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- parts {Array} more part {Object} from uploadPartCopy, , each in the structure:\n  - number {Number} partNo\n  - etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data , sdk use JSON.parse() return\n\nexample:\n\n```js\n\n  //init multipart\n  var name = 'object';\n  var result = yield store.initMultipartUpload(name);\n\n  //upload part\n  var file; //the data you want to upload, this example size is 10 * 100 * 1024\n  var fileSize;//you need to calculate\n  var partSize = 100 * 1024;//100kb\n  var done = [];\n  //if file part is 10\n  for (var i = 1; i <= 10; i++) {\n    var start = partSize * (i -1);\n    var end = Math.min(start + partSize, fileSize);\n    var data = file.slice(start, end);\n    var part = yield store.uploadPart(name, result.uploadId, i, data);\n    console.log(part);\n    done.push({\n          number: i,\n          etag: part.res.headers.etag\n        });\n  }\n\n  //complete\n  var completeData = yield store.completeMultipartUpload(name, result.uploadId, done);\n  console.log(completeData);\n```\n\n\n### .multipartUpload*(name, file[, options])\n\nUpload file with [OSS multipart][oss-multipart].<br>\nthis function contains initMultipartUpload, uploadPart, completeMultipartUpload.\n\nparameters:\n\n- name {String} object name\n- file {String|File(only support Browser)|Blob(only support Browser)} file path or HTML5 Web File or web Blob\n- [options] {Object} optional args\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} thunk or generator, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n    - file {File} The file object selected by the user, if the browser is restarted, it needs the user to manually trigger the settings\n    - name {String} object key\n    - fileSize {Number} file size\n    - partSize {Number} part size\n    - uploadId {String} upload id\n    - doneParts {Array} An array of pieces that have been completed, including the object structure as follows\n       - number {Number} part number\n       - etag {String} part etag\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [mime] {String} custom mime , will send with `Content-Type` entity header\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n          e.g.:\n         ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n         ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data, sdk use JSON.parse() return\n\nexample:\n\n- Upload using multipart\n\n```js\nvar result = yield store.multipartUpload('object', '/tmp/file');\nconsole.log(result);\n\nvar result = yield store.multipartUpload('object', '/tmp/file', {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function* (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nvar result = yield store.multipartUpload('object', '/tmp/file', {\n  checkpoint: savedCpt,\n  progress: function* (p, cpt, res) { //progress is generator\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\n```\n\n- multipartUpload progress example\n\n```js\n//thunk\nfunction thunkProgress(p, cpt, res) {\n  return function(done) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n    done();\n  }\n}\n\nvar result1 = yield store.multipartUpload('object', '/tmp/file', {\n  progress: thunkProgress\n});\n\n//generator\nfunction* generatorProgress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nvar result2 = yield store.multipartUpload('object', '/tmp/file', {\n  progress: generatorProgress\n});\n\n```\n\n- multipartUpload with cancel\n\n>tips: cancel multipartUpload, now only support browser.\n\n```js\n\n//start upload\ntry {\n  var result = yield store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function* (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n### .multipartUploadCopy*(name, sourceData[, options])\n\nCopy file with [OSS multipart][oss-multipart]. <br>\nthis function contains head, initMultipartUpload, uploadPartCopy, completeMultipartUpload.<br>\nWhen copying a file larger than 1 GB, you should use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} is thunk or generator, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [copyheaders] {Object} only uploadPartCopy api used, detail [see](https://www.alibabacloud.com/help/doc-detail/31994.htm)\n    - [x-oss-copy-source-if-match]  only uploadPartCopy api used, default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]  only uploadPartCopy api used, default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]  only uploadPartCopy api used, default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since] only uploadPartCopy api used, default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n- Copy using multipart\n\n```js\nvar result = yield store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n});\nconsole.log(result);\n\nvar result = yield store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function* (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\nvar result = yield store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function* (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\n```\n- multipartUploadCopy with cancel\n\n```js\n\n//start upload\ntry {\n  var result = yield store.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n    checkpoint: savedCpt,\n    progress: function* (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n### .listParts*(name, uploadId[, query, options])\n\nThe ListParts command can be used to list all successfully uploaded parts mapped to a specific upload ID, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- name {String} object key\n- uploadId {String} upload ID from initMultipartUpload api\n- [query] {Object} query parameters\n  - [max-parts] {Number} The maximum part number in the response of the OSS. default value: 1000.\n  - [part-number-marker] {Number} Starting position of a specific list. A part is listed only when the part number is greater than the value of this parameter.\n  - [encoding-type] {String} Specify the encoding of the returned content and the encoding type. Optional value: url\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- uploadId {String} upload ID\n- bucket {String} Specify the bucket name.\n- name {String} object name\n- PartNumberMarker {Number} Starting position of the part numbers in the listing result.\n- nextPartNumberMarker {Number} If not all results are returned this time, the response request includes the NextPartNumberMarker element to indicate the value of PartNumberMarker in the next request.\n- maxParts {Number} upload ID\n- isTruncated {Boolean} Whether the returned result list for List Parts is truncated. The “true” indicates that not all results are returned; “false” indicates that all results are returned.\n- parts {Array} The container that saves part information, each in the structure:\n  - PartNumber {Number} Part number.\n  - LastModified {Date} Time when a part is uploaded.\n  - ETag {String} ETag value in the content of the uploaded part.\n  - Size {Number} Size of the uploaded part.\n\nexample:\n\n- List uploaded part\n\n```js\n\nvar result = yield store.listParts('objcet', 'uploadId', {\n  'max-parts': 1000\n});\nconsole.log(result);\n```\n\n### .listUploads*(query[, options])\n\nList on-going multipart uploads, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- query {Object} query parameters\n  - [prefix] {String} the object key prefix\n  - [max-uploads] {Number} the max uploads to return\n  - [key-marker] {String} the object key marker, if `upload-id-marker`\n    is not provided, return uploads with `key > marker`, otherwise\n    return uploads with `key >= marker && uploadId > id-marker`\n  - [upload-id-marker] {String} the upload id marker, must be used\n    **WITH** `key-marker`\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- List on-going multipart uploads\n\n```js\n\nvar result = yield store.listUploads({\n  'max-uploads': 100,\n  'key-marker': 'my-object',\n  'upload-id-marker': 'upload-id'\n});\nconsole.log(result);\n```\n\n### .abortMultipartUpload*(name, uploadId[, options])\n\nAbort a multipart upload for object.\n\nparameters:\n\n- name {String} the object name\n- uploadId {String} the upload id\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- Abort a multipart upload\n\n```js\nvar result = yield store.abortMultipartUpload('object', 'upload-id');\nconsole.log(result);\n```\n\n## RTMP Operations\n\nAll operations function is [generator], except `getRtmpUrl`.\n\ngenerator function format: `functionName*(...)`.\n\n### .putChannel*(id, conf[, options])\n\nCreate a live channel.\n\nparameters:\n\n- id {String} the channel id\n- conf {Object} the channel config\n  - [Description] {String} the channel description\n  - [Status] {String} the channel status: 'enabled' or 'disabled'\n  - [Target] {Object}\n    - [Type] {String} the data type for the channel, only 'HLS' is supported now\n    - [FragDuration] {Number} duration of a 'ts' segment\n    - [FragCount] {Number} the number of 'ts' segments in a 'm3u8'\n    - [PlaylistName] {String} the 'm3u8' name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- publishUrls {Array} the publish urls\n- playUrls {Array} the play urls\n- res {Object} response info\n\nexample:\n\n- Create a live channel\n\n```js\nvar cid = 'my-channel';\nvar conf = {\n  Description: 'this is channel 1',\n  Status: 'enabled',\n  Target: {\n    Type: 'HLS',\n    FragDuration: '10',\n    FragCount: '5',\n    PlaylistName: 'playlist.m3u8'\n  }\n};\n\nvar r = yield this.store.putChannel(cid, conf);\nconsole.log(r);\n```\n\n### .getChannel*(id[, options])\n\nGet live channel info.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- data {Object} channel info, same as conf in [.putChannel](#putchannelid-conf-options)\n- res {Object} response info\n\nexample:\n\n- Get live channel info\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.getChannel(cid);\nconsole.log(r);\n```\n\n### .deleteChannel*(id[, options])\n\nDelete a live channel.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response infomation.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Delete a live channel\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.deleteChannel(cid);\nconsole.log(r);\n```\n\n### .putChannelStatus*(id, status[, options])\n\nChange the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- status {String} the status: 'enabled' or 'disabled'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Disable a live channel\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.putChannelStatus(cid, 'disabled');\nconsole.log(r);\n```\n\n### .getChannelStatus*(id[, options])\n\nGet the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel status information.\n\nobject:\n\n- data {Object}\n  - Status {String} the channel status: 'Live' or 'Idle'\n  - [ConnectedTime] {String} the connected time of rtmp pushing\n  - [RemoteAddr] {String} the remote addr of rtmp pushing\n  - [Video] {Object} the video parameters (Width/Height/FrameRate/Bandwidth/Codec)\n  - [Audio] {Object} the audio parameters (Bandwidth/SampleRate/Codec)\n- res {Object} response info\n\nexample:\n\n- Get a live channel status\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.getChannelStatus(cid);\nconsole.log(r);\n\n// { Status: 'Live',\n//   ConnectedTime: '2016-04-12T11:51:03.000Z',\n//   RemoteAddr: '42.120.74.98:53931',\n//   Video:\n//   { Width: '672',\n//     Height: '378',\n//     FrameRate: '29',\n//     Bandwidth: '60951',\n//     Codec: 'H264' },\n//   Audio: { Bandwidth: '5959', SampleRate: '22050', Codec: 'AAC' }\n// }\n```\n\n### .listChannels*(query[, options])\n\nList channels.\n\nparameters:\n\n- query {Object} parameters for list\n  - prefix {String}: the channel id prefix (returns channels with this prefix)\n  - marker {String}: the channle id marker (returns channels after this id)\n  - max-keys {Number}: max number of channels to return\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel list.\n\nobject:\n\n- channels {Array} the channels, each in the structure:\n  - Name {String} the channel id\n  - Description {String} the channel description\n  - Status {String} the channel status\n  - LastModified {String} the last modification time of the channel\n  - PublishUrls {Array} the publish urls for the channel\n  - PlayUrls {Array} the play urls for the channel\n- nextMarker: result.data.NextMarker || null,\n- isTruncated: result.data.IsTruncated === 'true'\n- res {Object} response info\n\nexample:\n\n- List live channels\n\n```js\nvar r = yield this.store.listChannels({\n  prefix: 'my-channel',\n  'max-keys': 3\n});\nconsole.log(r);\n```\n\n### .getChannelHistory*(id[, options])\n\nGet the live channel history.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the history information.\n\nobject:\n\n- records {Object} the pushing records, each in the structure:\n  - StartTime {String} the start time\n  - EndTime {String} the end time\n  - RemoteAddr {String} the remote addr\n- res {Object} response info\n\nexample:\n\n- Get the live channel history\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.getChannelHistory(cid);\nconsole.log(r);\n```\n\n### .createVod*(id, name, time[, options])\n\nCreate a VOD playlist for the channel.\n\nparameters:\n\n- id {String} the channel id\n- name {String} the playlist name\n- time {Object} the duration time\n  - startTime {Number} the start time in epoch seconds\n  - endTime {Number} the end time in epoch seconds\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Create a vod playlist of a live channel\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.createVod(cid, 're-play', {\n  startTime: 1460464870,\n  endTime: 1460465877\n});\nconsole.log(r);\n```\n\n### .getRtmpUrl(channelId[, options])\n\nGet signatured rtmp url for publishing.\n\nparameters:\n\n- channelId {String} the channel id\n- [options] {Object} optional parameters\n  - [expires] {Number} the expire time in seconds of the url\n  - [params] {Object} the additional paramters for url, e.g.: {playlistName: 'play.m3u8'}\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the rtmp url.\n\nexample:\n\n- Get a rtmp url.\n\n```js\nvar cid = 'my-channel';\n\nvar url = this.store.getRtmpUrl(this.cid, {\n  params: {\n    playlistName: 'play.m3u8'\n  },\n  expires: 3600\n});\nconsole.log(url);\n// rtmp://ossliveshow.oss-cn-hangzhou.aliyuncs.com/live/tl-channel?OSSAccessKeyId=T0cqQWBk2ThfRS6m&Expires=1460466188&Signature=%2BnzTtpyxUWDuQn924jdS6b51vT8%3D\n```\n\n## Create A Image Service Instance\n\nEach Image Service instance required `accessKeyId`, `accessKeySecret`, `bucket` and `imageHost`.\n\n### oss.ImageClient(options)\n\nCreate a Image service instance.\n\noptions:\n- imageHost {String} your image service domain that binding to a OSS bucket\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- bucket {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nvar oss = require('ali-oss');\n\nvar imgClient = oss.ImageClient({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'my_image_bucket'\n  imageHost: 'thumbnail.myimageservice.com'\n});\n```\n\n## Image Operations\n\nAll operations function is [generator], except `imgClient.signatureUrl`.\n\ngenerator function format: `functionName*(...)`.\n\n### imgClient.get*(name, file[, options])\n\nGet an image from the image channel.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the image\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image with a style and store it to the local file\n\n```js\nvar imagepath = '/home/ossdemo/demo.jpg';\nyield imgClient.get('ossdemo/demo.jpg@200w_200h', filepath);\n```\n\n_ Store image to a writestream\n\n```js\nyield imgClient.get('ossdemo/demo.jpg@200w_200h', somestream);\n```\n\n- Get an image content buffer\n\n```js\nvar result = yield imgClient.get('ossdemo/demo.jpg@200w_200h');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a not exists object or a not image object\n\n```js\nvar imagepath = '/home/ossdemo/demo.jpg';\nyield imgClient.get('ossdemo/not-exists-demo.jpg@200w_200h', filepath);\n// will throw NoSuchKeyError\n```\n\n### imgClient.getStream*(name[, options])\n\nGet an image read stream.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image object stream\n\n```js\nvar result = yield imgClient.getStream('ossdemo/demo.jpg@200w_200h');\nresult.stream.pipe(fs.createWriteStream('some demo.jpg'));\n```\n\n### imgClient.getExif*(name[, options])\n\nGet a image exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nIf object don't have exif, will throw 400 BadRequest.\n\nexample:\n\n```js\nvar result = yield imgClient.getExif('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n### imgClient.getInfo*(name[, options])\n\nGet a image info and exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nexample:\n\n```js\nvar result = yield imgClient.getInfo('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     Format: \"jpg\",\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n\n### imgClient.putStyle*(name, style[, options])\n// TODO\n\n### imgClient.getStyle*(name[, options])\n\nGet a style by name from the image channel.\n\nparameters:\n- name {String} image style name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} styles object\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nvar result = yield imgClient.getStyle('400');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"234\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:58:20 GMT\"\n//     },\n//     size: 234,\n//     aborted: false,\n//     rt: 398,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }\n// }\n```\n\n### imgClient.listStyle*([options])\n\nGet all styles from the image channel.\n\nparameters:\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Array} styles array, a style object:\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nvar result = yield imgClient.listStyle();\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"913\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:47:32 GMT\"\n//     },\n//     size: 913,\n//     aborted: false,\n//     rt: 1911,\n//     keepAliveSocket: false\n//   },\n//   data: [{\n//     Name: \"200-200\",\n//     Content: \"0e_200w_200h_0c_0i_0o_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:28:08 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:28:08 GMT\"\n//   }, {\n//     Name: \"800\",\n//     Content: \"800w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:29:15 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:29:15 GMT\"\n//   }, {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }, {\n//     Name: \"600\",\n//     Content: \"600w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:35:02 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:35:02 GMT\"\n//   }]\n// }\n```\n\n### imgClient.deleteStyle*(name[, options])\n// TODO\n\n### imgClient.signatureUrl(name)\n\nCreate a signature url for directly download.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return full signature url.\n\nexample:\n\n```js\nvar url = imgClient.signatureUrl('\n');\n// http://thumbnail.myimageservice.com/demo.jpg@200w_200h?OSSAccessKeyId=uZxyLARzYZtGwHKY&Expires=1427803849&Signature=JSPRe06%2FjQpQSj5zlx2ld1V%2B35I%3D\n```\n\n## Cluster Mode\n\nCluster mode now only support object operations.\n\n```js\nvar Cluster = require('ali-oss').ClusterClient;\n\nvar client = Cluster({\n  cluster: [{\n    host: 'host1',\n    accessKeyId: 'id1',\n    accessKeySecret: 'secret1'\n  }, {\n    host: 'host2',\n    accessKeyId: 'id2',\n    accessKeySecret: 'secret2'\n  }],\n  schedule: 'masterSlave', //default is `roundRobin`\n});\n\n// listen error event to logging error\nclient.on('error', function(err) {\n  console.error(err.stack);\n});\n\n// client init ready\nclient.ready(function() {\n  console.log('cluster client init ready, go ahead!');\n});\n```\n\n### Get Methods\n\nWill choose an alive client by schedule(`masterSlave` or `roundRobin`).\n\n- `client.get()`\n- `client.head()`\n- `client.getStream()`\n- `client.list()`\n- `client.signatureUrl()`\n- `client.chooseAvailable()` - choose an available client by schedule.\n- `client.getACL()`\n\n### Put Methods\n\nWill put to all clients.\n\n- `client.put()`\n- `client.putStream()`\n- `client.delete()`\n- `client.deleteMulti()`\n- `client.copy()`\n- `client.putMeta()`\n- `client.putACL()`\n- `client.restore()`\n\n## Wrapper Usage\n\nWe provide an async wrapper which can be used without `co`. All the\nmethods are preserved, just in a async way:\n\n```js\n\nvar OSS = require('ali-oss').Wrapper;\nvar STS = OSS.STS;\n\nvar client = new OSS({ /* same options */});\n\nclient.put('hello', new Buffer('world')).then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n\nclient.get('hello').then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n\nvar url = client.signatureUrl('hello');\nconsole.log(url);\n\nvar stsClient = new STS({ /* same options */});\n\nvar role = 'role';\n\nstsClient.assumeRole(role).then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n```\n\n## Browser Usage\n\nYou can use most of the functionalities of `ali-oss` in browser with\nsome exceptions:\n\n- put object with streaming: no chunked encoding, we use multipart\n  upload instead\n- get object to local file: we cannot manipulate file system in\n  browser, we provide signed object url for downloading needs\n- bucket operations(listBuckets, putBucketLogging, etc) will fail: OSS\n  server currently do not support CORS requests for bucket operations\n  (will probably be fixed later)\n\n### Setup\n\n#### Bucket setup\n\nAs browser-side javascript involves CORS operations. You need to setup\nyour bucket CORS rules to allow CORS operations:\n\n- set allowed origins to '\\*'\n- allowed methods to 'PUT, GET, POST, DELETE, HEAD'\n- set allowed headers to '\\*'\n- expose 'ETag' in expose headers\n\n#### STS setup\n\nAs we don't want to expose the accessKeyId/accessKeySecret in the\nbrowser, a [common practice][oss-sts] is to use STS to grant temporary\naccess.\n\n### Basic usage\n\nInclude the sdk lib in the `<script>` tag and you have `OSS` available\nfor creating client. We use `OSS.Wrapper` here to avoid using `co`:\n\n```html\n// x.x.x The specific version number represented \n// we recommend introducing offline resources, because the usability of online resources depends on the stability of the cdn server. \n<!-- Introducing online resources -->\n<script src=\"http://gosspublic.alicdn.com/aliyun-oss-sdk-x.x.x.min.js\"></script>\n<!-- Introducing offline resources -->\n<script src=\"./aliyun-oss-sdk-x.x.x.min.js\"></script>\n<script type=\"text/javascript\">\n  var client = new OSS.Wrapper({\n    region: 'oss-cn-hangzhou',\n    accessKeyId: '<access-key-id>',\n    accessKeySecret: '<access-key-secret>',\n    bucket: '<bucket-name>'\n  });\n\n  client.list().then(function (result) {\n    console.log('objects: %j', result.objects);\n    return client.put('my-obj', new OSS.Buffer('hello world'));\n  }).then(function (result) {\n    console.log('put result: %j', result);\n    return client.get('my-obj');\n  }).then(function (result) {\n    console.log('get result: %j', result.content.toString());\n  });\n</script>\n```\nThe full sample can be found [here][browser-sample].\n\n### How to build\n\n```bash\nnpm run build-dist\n```\n\nAnd see the build artifacts under `dist/`.\n\n## Known Errors\n\nEach error return by OSS server will contains these properties:\n\n- name {String} error name\n- message {String} error message\n- requestId {String} uuid for this request, if you meet some unhandled problem,\n    you can send this request id to OSS engineer to find out what's happend.\n- hostId {String} OSS cluster name for this request\n\nname | code | status | message | message in Chinese\n---  | ---  | --- | ---     | ---\nAccessDeniedError | AccessDenied | 403 | Access Denied | 拒绝访问\nBucketAlreadyExistsError | BucketAlreadyExists | 409 | Bucket already exists | Bucket 已经存在\nBucketNotEmptyError | BucketNotEmpty | 409 | Bucket is not empty | Bucket 不为空\nRestoreAlreadyInProgressError | RestoreAlreadyInProgress | 409 | The restore operation is in progress. | restore 操作正在进行中\nOperationNotSupportedError | OperationNotSupported | 400 | The operation is not supported for this resource | 该资源暂不支持restore操作\nEntityTooLargeError | EntityTooLarge | 400 | Entity too large | 实体过大\nEntityTooSmallError | EntityTooSmall | 400 | Entity too small | 实体过小\nFileGroupTooLargeError | FileGroupTooLarge | 400 | File group too large | 文件组过大\nInvalidLinkNameError | InvalidLinkName | 400 | Link name can't be the same as the object name | Object Link 与指向的 Object 同名\nLinkPartNotExistError | LinkPartNotExist | 400 | Can't link to not exists object | Object Link 中指向的 Object 不存在\nObjectLinkTooLargeError | ObjectLinkTooLarge | 400 | Too many links to this object | Object Link 中 Object 个数过多\nFieldItemTooLongError | FieldItemTooLong | 400 | Post form fields items too large | Post 请求中表单域过大\nFilePartInterityError | FilePartInterity | 400 | File part has changed | 文件 Part 已改变\nFilePartNotExistError | FilePartNotExist | 400 | File part not exists | 文件 Part 不存在\nFilePartStaleError | FilePartStale| 400 | File part stale | 文件 Part 过时\nIncorrectNumberOfFilesInPOSTRequestError | IncorrectNumberOfFilesInPOSTRequest | 400 | Post request contains invalid number of files | Post 请求中文件个数非法\nInvalidArgumentError | InvalidArgument | 400 | Invalid format argument | 参数格式错误\nInvalidAccessKeyIdError | InvalidAccessKeyId | 400 | Access key id not exists | Access Key ID 不存在\nInvalidBucketNameError | InvalidBucketName | 400 | Invalid bucket name | 无效的 Bucket 名字\nInvalidDigestError | InvalidDigest | 400 | Invalid digest | 无效的摘要\nInvalidEncryptionAlgorithmError | InvalidEncryptionAlgorithm | 400 | Invalid encryption algorithm | 指定的熵编码加密算法错误\nInvalidObjectNameError | InvalidObjectName | 400 | Invalid object name | 无效的 Object 名字\nInvalidPartError | InvalidPart | 400 | Invalid part | 无效的 Part\nInvalidPartOrderError | InvalidPartOrder | 400 | Invalid part order | 无效的 part 顺序\nInvalidPolicyDocumentError | InvalidPolicyDocument | 400 | Invalid policy document | 无效的 Policy 文档\nInvalidTargetBucketForLoggingError | InvalidTargetBucketForLogging | 400 | Invalid bucket on logging operation | Logging 操作中有无效的目标 bucket\nInternalError | Internal | 500 | OSS server internal error | OSS 内部发生错误\nMalformedXMLError | MalformedXML | 400 | Malformed XML format | XML 格式非法\nMalformedPOSTRequestError | MalformedPOSTRequest | 400 | Invalid post body format | Post 请求的 body 格式非法\nMaxPOSTPreDataLengthExceededError | MaxPOSTPreDataLengthExceeded | 400 | Post extra data too large | Post 请求上传文件内容之外的 body 过大\nMethodNotAllowedError | MethodNotAllowed | 405 | Not allowed method | 不支持的方法\nMissingArgumentError | MissingArgument | 411 | Missing argument | 缺少参数\nMissingContentLengthError | MissingContentLength | 411 | Missing `Content-Length` header | 缺少内容长度\nNoSuchBucketError | NoSuchBucket | 404 | Bucket not exists | Bucket 不存在\nNoSuchKeyError | NoSuchKey | 404 | Object not exists | 文件不存在\nNoSuchUploadError | NoSuchUpload | 404 | Multipart upload id not exists | Multipart Upload ID 不存在\nNotImplementedError | NotImplemented | 501 | Not implemented | 无法处理的方法\nPreconditionFailedError | PreconditionFailed | 412 | Pre condition failed | 预处理错误\nRequestTimeTooSkewedError | RequestTimeTooSkewed | 403 | Request time exceeds 15 minutes to server time | 发起请求的时间和服务器时间超出 15 分钟\nRequestTimeoutError | RequestTimeout | 400 | Request timeout | 请求超时\nRequestIsNotMultiPartContentError | RequestIsNotMultiPartContent | 400 | Invalid post content-type | Post 请求 content-type 非法\nSignatureDoesNotMatchError | SignatureDoesNotMatch | 403 | Invalid signature | 签名错误\nTooManyBucketsError | TooManyBuckets | 400 | Too many buckets on this user | 用户的 Bucket 数目超过限制\nRequestError | RequestError | -1 | network error | 网络出现中断或异常\nConnectionTimeoutError | ConnectionTimeoutError | -2 | request connect timeout | 请求连接超时\nSecurityTokenExpiredError | SecurityTokenExpired | 403 | sts Security Token Expired | sts Security Token 超时失效\n\n[generator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n[oss-sts]: https://help.aliyun.com/document_detail/oss/practice/ram_guide.html\n[browser-sample]: https://github.com/rockuw/oss-in-browser\n[oss-multipart]: https://help.aliyun.com/document_detail/oss/api-reference/multipart-upload/InitiateMultipartUpload.html\n[disabled-browser-headers]: https://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n",
      "readmeFilename": "README.md",
      "gitHead": "65e8daf4d4547d73e25a62dbe20a0eb15dad2cf5",
      "_id": "ali-oss@5.3.2",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.9.1",
      "_npmUser": {
        "name": "jackycheung888",
        "email": "2378278470@qq.com"
      },
      "dist": {
        "integrity": "sha512-027NdIg+egthwF/LmXmVdOetchQx/GxyP9wLMyaymlawjSuVmOQM8G0L9ppQSgREp+ERvgKWXq+fw3+ctOSHWQ==",
        "shasum": "11259062c838102149bd626cac0e82b513abbdc1",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-5.3.2.tgz",
        "fileCount": 36,
        "unpackedSize": 1501141,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbTix+CRA9TVsSAnZWagAAeWQP/1PzVAorgLWvRZkIhIh0\nq9ZJ4MyczDa2jbBkhoeBnpPf5f+0NMeBhYZ9xZLS0LwK01xifsern/n02foO\noLNS1QnXs2itTKIQGU1sx8n0vTVTnYsmBqXxesEpJMoNQzKSzQuskHsdORts\nW6CoL9CYbZrV4EwYDfUDRXZtUzqI15j3r0u8kzslpHGvoUp6Moe/EoLjPCY2\n9r91FsCMjR20PNllGc6lCQWPRTNg5CJDvA0g+1Ct4EMb63WoeaW6KQWqwVpf\nt3b9ETYZBVolvym3XtCu8DY9Sq9jbfF2Rvs0uIex7euNZjVxaflhl7kDiiQB\nuqUy/04pT5E1qbVF/hh05iQJWxC4Ev84o2pYOMnBcHfjljHSqmCsYK2q0epW\nRu8xa5ZNpr8jwVe+Ktf9WsgKipTgLXpwdkYJsuCEjiFkofpFcc8k6BS80GxF\n0k4kTTEF/JMhKP8Ba5vh5ZY2ShF0qdMqk5MHm+4AKdh+0pk6Op87VmRwOiTj\ndgbWenklNR7uWlMd2KdjBV4yLlzTIF397uqbMnCSqkw+DLhC9kjjeaO/DsR9\nR/sCuswZrOCkie39h4+HFlZG1NEOVWlaHBx5GlfGQ3LmkSE9RwrHFAoKFHuQ\n1l4tcq3dKZ90PduGMpnCzu/SnkBR0/5kChpwMpCjEt9cV8aXmbIDbG1XIofi\njqDo\r\n=YByt\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFdXZtX2iw7703cNY5dnSbbvmKQeUiLOAUwuwqt2/BcbAiEA0oHZKCKzoyyU3EmZ0Q11l/e1jn9Ui36suoyaMFkXDJg="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_5.3.2_1531849854828_0.20876504896250747"
      },
      "_hasShrinkwrap": false
    },
    "6.0.1": {
      "name": "ali-oss",
      "version": "6.0.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "867a5c763f7904128329a92543fc2859db26dfcf",
      "_id": "ali-oss@6.0.1",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.9.1",
      "_npmUser": {
        "name": "jackycheung888",
        "email": "2378278470@qq.com"
      },
      "dist": {
        "integrity": "sha512-JXeEGZXudZtSoC0AoftCK/N0YOBrySHNkQxZjEckhodVhu/tJmKCOwsoyws+vd0iNuUOYNrPmw/ZJA+ADUmkSw==",
        "shasum": "27648230db3070dc39cb7492e963562437c661f0",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.0.1.tgz",
        "fileCount": 34,
        "unpackedSize": 3027101,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbTx3yCRA9TVsSAnZWagAARNAP/3uD9oRGB0M0dTds7mE1\nhFNvhEQ8Z6ZgulhG6nH/Di643FYouNqyN9TcrwQsGnOfjL8/8kzu4voclYQh\nCJoNyG9xgDKsxSnre39ftpSLPUDAqJlrr99JlOv/3ApjhhncjNIxuOYORleS\nR33oLdgxlIjYkD0ENx84UE/xySh5pYNBj+tFUettByQAQuOOcaGYdAYkxsGn\nXGYbtoHAORLLEG9NurDzt5IjacN5VmMnwsXtjoulsC0iN+b66xDYCs8maM6T\nSUotOsRziv6sIrQGX1HS4AiXIbRA1gdo0u52U8s3U2aksbd5K1EPxid11Cz7\nHlzJa7Y4dZpSIRCVr4um+raPwXXtlZCQPosfW4XL/JyYslwbBKlnnHyHhcQd\nDFbd/3tavSpQXz7j/Wm6KCm6F5nhfMqGnCZeH2Lefira5rPkFyiABoKIRN0w\nz/zHdx8lwnIAovJgGk0/4anVqo6IQPnubSNCQUgHxmdIoYSC9q5ozEGVkLGP\ns+N4QLJ1dkifUSzhzrXuqGdgZCoXn1KJl6lbWUEcg8iWkMWXy129o8WfJRbx\nHpoQeeZaxAt5sZMI+kJa0YJiBBnR6oWrXxC0iWIHbTrrTXoGW7cAlLNE49AV\nvsDvDa81co+AFYloRKiwGm7fl1sDHwgYz3EF41ipq0At9Qt1ff0ZnBwOa50Q\nUclo\r\n=xWxr\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFjqZp05U8gC/R1bcQwfMhQvtMcs6VewO8xvEVLiXi5/AiAfVNJ5Q0ul6arAZxZzMxAqKAfJs2fD4J1qXAABiRhJdA=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.0.1_1531911666057_0.7330368512932723"
      },
      "_hasShrinkwrap": false
    },
    "4.15.1": {
      "name": "ali-oss",
      "version": "4.15.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "files": [
        "lib",
        "shims",
        "dist"
      ],
      "browser": {
        "lib/client.js": "./lib/browser.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-browserify": "^1.0.9",
        "crypto-js": "^3.1.9-1",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-mocha": "^1.3.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.4",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "co-priority-queue": "^1.0.3",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "^2.8.0",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "publishConfig": {
        "tag": "latest-4"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "readme": "oss-nodejs-sdk\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage][cov-image]][cov-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/ali-oss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/ali-oss\n[travis-image]: https://img.shields.io/travis/ali-sdk/ali-oss/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ali-sdk/ali-oss.svg?branch=master\n[cov-image]: http://codecov.io/github/ali-sdk/ali-oss/coverage.svg?branch=master\n[cov-url]: http://codecov.io/github/ali-sdk/ali-oss?branch=master\n[david-image]: https://img.shields.io/david/ali-sdk/ali-oss.svg?style=flat-square\n[david-url]: https://david-dm.org/ali-sdk/ali-oss\n\naliyun OSS(object storage service) Node.js client.\n\n## Install\n\n```bash\nnpm install ali-oss --save\n```\n\n## License\n\n[MIT](LICENSE)\n\n# OSS Usage\n\nOSS, Object Storage Service. Equal to well known Amazon [S3](http://aws.amazon.com/s3/).\n\n## Summary\n\n- [Data Regions](#data-regions)\n- [Create Account](#create-acount)\n- [Create A Bucket Instance](#create-a-bucket-instance)\n  - [#oss(options)](#ossoptions)\n- [Bucket Operations](#bucket-operations)\n  - Base\n    - [.listBuckets*(query[, options])](#listbucketsquery-options)\n    - [.putBucket*(name, region[, options])](#putbucketname-region-options)\n    - [.useBucket(name, region)](#usebucketname-region)\n    - [.deleteBucket*(name, region[, options])](#deletebucketname-region-options)\n  - ACL\n    - [.putBucketACL*(name, region, acl[, options])](#putbucketaclname-region-acl-options)\n    - [.getBucketACL*(name, region[, options])](#getbucketaclname-region-options)\n  - Logging\n    - [.putBucketLogging*(name, region, prefix[, options])](#putbucketloggingname-region-prefix-options)\n    - [.getBucketLogging*(name, region[, options])](#getbucketloggingname-region-options)\n    - [.deleteBucketLogging*(name, region[, options])](#deletebucketloggingname-region-options)\n  - Website\n    - [.putBucketWebsite*(name, region, config[, options])](#putbucketwebsitename-region-config-options)\n    - [.getBucketWebsite*(name, region[, options])](#getbucketwebsitename-region-options)\n    - [.deleteBucketWebsite*(name, region[, options])](#deletebucketwebsitename-region-options)\n  - Referer\n    - [.putBucketReferer*(name, region, allowEmpty, referers[, options])](#putbucketreferername-region-allowempty-referers-options)\n    - [.getBucketReferer*(name, region[, options])](#getbucketreferername-region-options)\n    - [.deleteBucketReferer*(name, region[, options])](#deletebucketreferername-region-options)\n  - Lifecycle\n    - [.putBucketLifecycle*(name, region, rules[, options])](#putbucketlifecyclename-region-rules-options)\n    - [.getBucketLifecycle*(name, region[, options])](#getbucketlifecyclename-region-options)\n    - [.deleteBucketLifecycle*(name, region[, options])](#deletebucketlifecyclename-region-options)\n  - CORS\n    - [.putBucketCORS*(name, region, rules[, options])](#putbucketcorsname-region-rules-options)\n    - [.getBucketCORS*(name, region[, options])](#getbucketcorsname-region-options)\n    - [.deleteBucketCORS*(name, region[, options])](#deletebucketcorsname-region-options)\n- [Object Operations](#object-operations)\n  - [.list*(query[, options])](#listquery-options)\n  - [.put*(name, file[, options])](#putname-file-options)\n  - [.putStream*(name, stream[, options])](#putstreamname-stream-options)\n  - [.append*(name, file[, options])](#apendname-file-options)\n  - [.getObjectUrl(name[, baseUrl])](#getobjecturlname-baseurl)\n  - [.head*(name[, options])](#headname-options)\n  - [.get*(name, file[, options])](#getname-file-options)\n  - [.getStream*(name[, options])](#getstreamname-options)\n  - [.delete*(name[, options])](#deletename-options)\n  - [.copy*(name, sourceName[, options])](#copyname-sourcename-options)\n  - [.putMeta*(name, meta[, options])](#putmetaname-meta-options)\n  - [.deleteMulti*(names[, options])](#deletemultinames-options)\n  - [.signatureUrl(name[, options])](#signatureurlname-options)\n  - [.putACL*(name, acl[, options])](#putaclname-acl-options)\n  - [.getACL*(name[, options])](#getaclname-options)\n  - [.initMultipartUpload*(name[, options])](#initmultipartuploadname-options)\n  - [.uploadPart*(name, uploadId, partNo, file, start, end[, options])](#uploadpartname-uploadid-partno-file-start-end-options)\n  - [.uploadPartCopy*(name, uploadId, partNo, range, sourceData[, options])](#uploadpartcopyname-uploadid-partno-range-sourcedata-options)\n  - [.completeMultipartUpload(name, uploadId, parts[, options])](#completemultipartuploadname-uploadid-parts-options)\n  - [.multipartUpload*(name, file[, options])](#multipartuploadname-file-options)\n  - [.multipartUploadCopy*(name, sourceData[, options])](#multipartuploadcopyname-sourcedata-options)\n  - [.listParts*(name, uploadId[, query, options])](#listparts-name-uploadid-query-options)\n  - [.listUploads*(query[, options])](#listuploadsquery-options)\n  - [.abortMultipartUpload*(name, uploadId[, options])](#abortmultipartuploadname-uploadid-options)\n- [RTMP Operations](#rtmp-operations)\n  - [.putChannel*(id, conf[, options])](#putchannelid-conf-options)\n  - [.getChannel*(id[, options])](#getchannelid-options)\n  - [.deleteChannel*(id[, options])](#deletechannelid-options)\n  - [.putChannelStatus*(id, status[, options])](#putchannelstatusid-status-options)\n  - [.getChannelStatus*(id[, options])](#getchannelstatusid-options)\n  - [.listChannels*(query[, options])](#listchannelsquery-options)\n  - [.getChannelHistory*(id[, options])](#getchannelhistoryid-options)\n  - [.createVod*(id, name, time[, options])](#createvodid-name-time-options)\n  - [.getRtmpUrl(channelId[, options])](#getrtmpurlchannelid-options)\n- [Create A Image Service Instance](#create-a-image-service-instance)\n  - [#oss.ImageClient(options)](#ossimageclientoptions)\n- [Image Operations](#image-operations)\n  - [imgClient.get*(name, file[, options])](#imgclientgetname-file-options)\n  - [imgClient.getStream*(name[, options])](#imgclientgetstreamname-options)\n  - [imgClient.getExif*(name[, options])](#imgclientgetexifname-options)\n  - [imgClient.getInfo*(name[, options])](#imgclientgetinfoname-options)\n  - [imgClient.putStyle*(name, style[, options])](#imgclientputstylename-style-options)\n  - [imgClient.getStyle*(name[, options])](#imgclientgetstylename-options)\n  - [imgClient.listStyle*([options])](#imgclientliststyleoptions)\n  - [imgClient.deleteStyle*(name[, options])](#imgclientdeletestylename-options)\n  - [imgClient.signatureUrl(name)](#imgclientsignatureurlname)\n- [Wrapper Usage](#wrapper-usage)\n- [Browser Usage](#browser-usage)\n- [Known Errors](#known-errors)\n\n## Data Regions\n\n[OSS current data regions](https://help.aliyun.com/document_detail/oss/user_guide/endpoint_region.html).\n\nregion | country | city | endpoint | internal endpoint\n---  | ---     | ---  | --- | ---\noss-cn-hangzhou | China | HangZhou | oss-cn-hangzhou.aliyuncs.com | oss-cn-hangzhou-internal.aliyuncs.com\noss-cn-shanghai | China | ShangHai | oss-cn-shanghai.aliyuncs.com | oss-cn-shanghai-internal.aliyuncs.com\noss-cn-qingdao | China | QingDao | oss-cn-qingdao.aliyuncs.com | oss-cn-qingdao-internal.aliyuncs.com\noss-cn-beijing | China | BeiJing | oss-cn-beijing.aliyuncs.com | oss-cn-beijing-internal.aliyuncs.com\noss-cn-shenzhen | China | ShenZhen | oss-cn-shenzhen.aliyuncs.com | oss-cn-shenzhen-internal.aliyuncs.com\noss-cn-hongkong | China | HongKong | oss-cn-hongkong.aliyuncs.com | oss-cn-hongkong-internal.aliyuncs.com\noss-us-west-1 | US | Silicon Valley | oss-us-west-1.aliyuncs.com | oss-us-west-1-internal.aliyuncs.com\noss-ap-southeast-1 | Singapore | Singapore | oss-ap-southeast-1.aliyuncs.com | oss-ap-southeast-1-internal.aliyuncs.com\n\n## Create Account\n\nGo to [OSS website](http://www.aliyun.com/product/oss/?lang=en), create a new account for new user.\n\nAfter account created, you can create the OSS instance and get the `accessKeyId` and `accessKeySecret`.\n\n## Create A Bucket Instance\n\nEach OSS instance required `accessKeyId`, `accessKeySecret` and `bucket`.\n\n### #oss(options)\n\nCreate a Bucket store instance.\n\noptions:\n\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- [stsToken] {String} used by temporary authorization, detail [see](https://www.alibabacloud.com/help/doc-detail/32077.htm)\n- [bucket] {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [endpoint] {String} oss region domain. It takes priority over `region`.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`.\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`.\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [secure] {Boolean} instruct OSS client to use HTTPS (secure: true) or HTTP (secure: false) protocol.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nvar oss = require('ali-oss');\n\nvar store = oss({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\n```\n\n## Bucket Operations\n\n### .listBuckets*(query[, options])\n\nList buckets in this account.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search buckets using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [max-keys] {String|Number} max buckets, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return buckets list on `buckets` properties.\n\n- buckets {Array<BucketMeta>} bucket meta info list\n  Each `BucketMeta` will contains blow properties:\n    - name {String} bucket name\n    - region {String} bucket store data region, e.g.: `oss-cn-hangzhou-a`\n    - creationDate {String} bucket create GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n- owner {Object} object owner, including `id` and `displayName`\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 buckets\n\n```js\nvar result = yield store.listBuckets({\n  \"max-keys\": 10\n});\nconsole.log(result);\n```\n\n### .putBucket*(name, region[, options])\n\nCreate a new bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket exists and not belong to current account, will throw BucketAlreadyExistsError.\n  If bucket not exists, will create a new bucket and set it's ACL.\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n  If change exists bucket region, will throw BucketAlreadyExistsError.\n  If region value invalid, will throw InvalidLocationConstraintError.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the bucket name on `bucket` properties.\n\n- bucket {String} bucket name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Create a bucket name `helloworld` location on HongKong\n\n```js\nyield store.putBucket('helloworld', 'oss-cn-hongkong');\n// use it by default\nstore.useBucket('helloworld', 'oss-cn-hongkong');\n```\n\n### .deleteBucket*(name, region[, options])\n\nDelete an empty bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket is not empty, will throw BucketNotEmptyError.\n  If bucket is not exists, will throw NoSuchBucketError.\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete the exists 'helloworld' bucket on 'oss-cn-hongkong'\n\n```js\nyield store.deleteBucket('helloworld', {\n  region: 'oss-cn-hongkong'\n});\n```\n\n### .useBucket(name, region)\n\nUse the bucket.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.useBucket('helloworld', 'oss-cn-hongkong');\n```\n\n---\n\n### .putBucketACL*(name, region, acl[, options])\n\nUpdate the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- acl {String} access control list, current available: `public-read-write`, `public-read` and `private`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set bucket `helloworld` to `public-read-write`\n\n```js\nyield store.putBucketACL('helloworld', 'oss-cn-hongkong', 'public-read-write');\n```\n\n### .getBucketACL*(name, region[, options])\n\nGet the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld`\n\n```js\nvar result = yield store.getBucketACL('helloworld', 'oss-cn-hongkong');\nconsole.log(result.acl);\n```\n\n---\n\n### .putBucketLogging*(name, region, prefix[, options])\n\nUpdate the bucket logging settings.\nLog file will create every one hour and name format: `<prefix><bucket>-YYYY-mm-DD-HH-MM-SS-UniqueString`.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [prefix] {String} prefix path name to store the log files\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Enable bucket `helloworld` logging and save with prefix `logs/`\n\n```js\nyield store.putBucketLogging('helloworld', 'oss-cn-hongkong', 'logs/');\n```\n\n### .getBucketLogging*(name, region[, options])\n\nGet the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- enable {Boolean} enable logging or not\n- prefix {String} prefix path name to store the log files, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld` logging settings\n\n```js\nvar result = yield store.getBucketLogging('helloworld', 'oss-cn-hongkong');\nconsole.log(result.enable, result.prefix);\n```\n\n### .deleteBucketLogging(name, region[, options])\n\nDelete the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketWebsite*(name, region, config[, options])\n\nSet the bucket as a static website.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- config {Object} website config, contains blow properties:\n  - index {String} default page, e.g.: `index.html`\n  - [error] {String} error page, e.g.: 'error.html'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketWebsite('hello', 'oss-cn-hangzhou', {\n  index: 'index.html'\n});\n```\n\n### .getBucketWebsite*(name, region[, options])\n\nGet the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- index {String} index page\n- error {String} error page, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketWebsite*(name, region[, options])\n\nDelete the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketReferer*(name, region, allowEmpty, referers[, options])\n\nSet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list, e.g.:\n  ```js\n  [\n    'https://npm.taobao.org',\n    'http://cnpmjs.org'\n  ]\n  ```\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketReferer('hello', 'oss-cn-hangzhou', false, [\n  'https://npm.taobao.org',\n  'http://cnpmjs.org'\n]);\n```\n\n### .getBucketReferer*(name, region[, options])\n\nGet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketReferer*(name, region[, options])\n\nDelete the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketLifecycle*(name, region, rules[, options])\n\nSet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- rules {Array<Rule>} rule config list, each `Rule` will contains blow properties:\n  - [id] {String} rule id, if not set, OSS will auto create it with random string.\n  - prefix {String} store prefix\n  - status {String} rule status, allow values: `Enabled` or `Disabled`\n  - [days] {Number|String} expire after the `days`\n  - [date] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `date` and `days` only set one.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketLifecycle('hello', 'oss-cn-hangzhou', [\n  {\n    id: 'delete after one day',\n    prefix: 'logs/',\n    status: 'Enabled',\n    days: 1\n  },\n  {\n    prefix: 'logs2/',\n    status: 'Disabled',\n    date: '2022-10-11T00:00:00.000Z'\n  }\n]);\n```\n\n### .getBucketLifecycle*(name, region[, options])\n\nGet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the lifecycle rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketLifecycle*(name, region[, options])\n\nDelete the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketCORS*(name, region, rules[, options])\n\nSet CORS rules of the bucket object\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- rules {Array<Rule>} rule config list, each `Rule` will contains below properties:\n  - allowedOrigin {String/Array} configure for Access-Control-Allow-Origin header\n  - allowedMethod {String/Array} configure for Access-Control-Allow-Methods header\n  - [allowedHeader] {String/Array} configure for Access-Control-Allow-Headers header\n  - [exposeHeader] {String/Array} configure for Access-Control-Expose-Headers header\n  - [maxAgeSeconds] {String} configure for Access-Control-Max-Age header\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketCORS('hello', 'oss-cn-hangzhou', [\n  {\n    allowedOrigin: '*',\n    allowedMethod: [\n      'GET',\n      'HEAD',\n    ],\n  }\n]);\n```\n\n### .getBucketCORS*(name, region[, options])\n\nGet CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the CORS rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketCORS*(name, region[, options])\n\nDelete CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n## Object Operations\n\nAll operations function is [generator], except `signatureUrl`.\n\ngenerator function format: `functionName*(...)`.\n\n### .put*(name, file[, options])\n\nAdd an object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- data {Object} callback server response data, sdk use JSON.parse() return\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through local file path\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.put('ossdemo/demo.txt', filepath);\nconsole.log(object);\n\n{\n  name: 'ossdemo/demo.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829244'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through content buffer\n\n```js\nvar object = yield store.put('ossdemo/buffer', new Buffer('foo content'));\nconsole.log(object);\n\n{\n  name: 'ossdemo/buffer',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/buffer',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"xxx\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829243'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through readstream\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.put('ossdemo/readstream.txt', fs.createReadStream(filepath));\nconsole.log(object);\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .putStream*(name, stream[, options])\n\nAdd a stream object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- stream {ReadStream} object ReadStream content instance\n- [options] {Object} optional parameters\n  - [contentLength] {Number} the stream length, `chunked encoding` will be used if absent\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through readstream\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.put('ossdemo/readstream.txt', fs.createReadStream(filepath));\nconsole.log(object);\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .append*(name, file[, options])\n\nAppend an object to the bucket, it's almost same as put, but it can add content to existing object rather than override it.\n\nAll parameters are same as put except for options.position\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [position] {String} specify the position which is the content length of the latest object\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nobject:\n\n- name {String} object name\n- url {String} the url of oss\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- nextAppendPosition {String} the next position\n\nexample:\n\n```js\nvar object = yield store.apend('ossdemo/buffer', new Buffer('foo'));\n\n// append content to the existing object\nobject = yield store.apend('ossdemo/buffer', new Buffer('bar'), {\n  position: object.nextAppendPosition,\n});\n```\n\n### .getObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `endpoint`.\n\ne.g.:\n\n```js\nconst cdnUrl = client.getObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .head*(name[, options])\n\nHead an object and get the meta info.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status, maybe 200 or 304\n- meta {Object} object user meta, if not set on `put()`, will return null.\n    If return status 304, meta will be null too\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Head an exists object and get user meta\n\n```js\nyield this.store.put('ossdemo/head-meta', new Buffer('foo'), {\n  meta: {\n    uid: 1,\n    path: 'foo/demo.txt'\n  }\n});\nvar object = this.store.head('ossdemo/head-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  meta: {\n    uid: '1',\n    path: 'foo/demo.txt'\n  },\n  res: { ... }\n}\n```\n\n- Head a not exists object\n\n```js\nvar object = this.store.head('ossdemo/head-meta');\n// will throw NoSuchKeyError\n```\n\n### .get*(name[, file, options])\n\nGet an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the content\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Range' get specifying range bytes content, e.g.: `Range: bytes=0-9`\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object and store it to the local file\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nyield store.get('ossdemo/demo.txt', filepath);\n```\n\n_ Store object to a writestream\n\n```js\nyield store.get('ossdemo/demo.txt', somestream);\n```\n\n- Get an object content buffer\n\n```js\nvar result = yield store.get('ossdemo/demo.txt');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a processed image and store it to the local file\n\n```js\nvar filepath = '/home/ossdemo/demo.png';\nyield store.get('ossdemo/demo.png', filepath, {process: 'image/resize,w_200'});\n```\n\n- Get a not exists object\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nyield store.get('ossdemo/not-exists-demo.txt', filepath);\n// will throw NoSuchKeyError\n```\n\n### .getStream*(name[, options])\n\nGet an object read stream.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object stream\n\n```js\nvar result = yield store.getStream('ossdemo/demo.txt');\nresult.stream.pipe(fs.createWriteStream('some file.txt'));\n```\n\n### .delete*(name[, options])\n\nDelete an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf delete object not exists, will also delete success.\n\nexample:\n\n- Delete an exists object\n\n```js\nyield store.delete('ossdemo/someobject');\n```\n\n- Delete a not exists object\n\n```js\nyield store.delete('ossdemo/some-not-exists-object');\n```\n\n### .copy*(name, sourceName[, options])\n\nCopy an object from `sourceName` to `name`.\n\nparameters:\n\n- name {String} object name store on OSS\n- sourceName {String} source object name\n  If `sourceName` start with `/`, meaning it's a full name contains the bucket name.\n  e.g.: `/otherbucket/logo.png` meaning copy `otherbucket` logn.png object to current bucket.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n    If the `meta` set, will override the source object meta.\n  - [headers] {Object} extra headers\n    - 'If-Match' do copy if source object etag equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' do copy if source object etag not equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-Modified-Since' do copy if source object modified after this time,\n        otherwise throw PreconditionFailedError\n    - 'If-Unmodified-Since' do copy if source object modified before this time,\n        otherwise throw PreconditionFailedError\n\nSuccess will return the copy result in `data` property.\n\nobject:\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT string\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf source object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Copy same bucket object\n\n```js\nvar result = yield store.copy('newName', 'oldName');\n```\n\n- Copy other bucket object\n\n```js\nvar result = yield store.copy('logo.png', '/other-bucket/logo.png');\n```\n\n### .putMeta*(name, meta[, options])\n\nSet an exists object meta.\n\nparameters:\n\n- name {String} object name store on OSS\n- meta {Object} user meta, will send with `x-oss-meta-` prefix string\n  e.g.: `{ uid: 123, pid: 110 }`\n  If `meta: null`, will clean up the exists meta\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the copy result in `data` property.\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Update exists object meta\n\n```js\nvar result = yield store.putMeta('ossdemo.txt', {\n  uid: 1, pid: 'p123'\n});\nconsole.log(result);\n```\n\n- Clean up object meta\n\n```js\nyield store.putMeta('ossdemo.txt', null);\n```\n\n### .deleteMulti*(names[, options])\n\nDelete multi objects in one request.\n\nparameters:\n\n- names {Array<String>} object names, max 1000 objects in once.\n- [options] {Object} optional parameters\n  - [quiet] {Boolean} quiet mode or verbose mode, default is `false`, verbose mode\n    quiet mode: if all objects delete succes, return emtpy response.\n      otherwise return delete error object results.\n    verbose mode: return all object delete results.\n  - [timeout] {Number} the operation timeout\n\nSuccess will return delete success objects in `deleted` property.\n\n- [deleted] {Array<String>} deleted object names list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete multi objects in quiet mode\n\n```js\nvar result = yield store.deleteMulti(['obj1', 'obj2', 'obj3'], {\n  quiet: true\n});\n```\n\n- Delete multi objects in verbose mode\n\n```js\nvar result = yield store.deleteMulti(['obj1', 'obj2', 'obj3']);\n```\n\n### .list*(query[, options])\n\nList objects in the bucket.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 objects\n\n```js\nvar result = yield store.list();\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nvar result = yield store.list({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nvar result = yield store.list({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n### .signatureUrl(name[, options])\n\nCreate a signature url for download or upload object.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [method] {String} the HTTP method, default is 'GET'\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [response] {Object} set the response headers for download\n    - [content-type] {String} set the response content type\n    - [content-disposition] {String} set the response content disposition\n    - [cache-control] {String} set the response cache control\n    - See more: https://help.aliyun.com/document_detail/oss/api-reference/object/GetObject.html\n\nSuccess will return signature url.\n\nexample:\n\n- Get signature url for object\n\n```js\nvar url = store.signatureUrl('ossdemo.txt');\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT'\n});\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  response: {\n    'content-type': 'text/custom',\n    'content-disposition': 'attachment'\n  }\n});\nconsole.log(url);\n```\n\n- Get a signature url for a processed image\n\n```js\nvar url = store.signatureUrl('ossdemo.png', {\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.png', {\n  expires: 3600,\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n```\n\n### .putACL*(name, acl[, options])\n\nSet object's ACL.\n\nparameters:\n\n- name {String} object name\n- acl {String} acl (private/public-read/public-read-write)\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set an object's ACL\n\n```js\nyield store.putACL('ossdemo.txt', 'public-read');\n```\n\n### .getACL*(name[, options])\n\nGet object's ACL.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get an object's ACL\n\n```js\nvar result = yield store.getACL('ossdemo.txt');\nconsole.log(result.acl);\n```\n\n### .initMultipartUpload(name[, options])\nBefore transmitting data in the Multipart Upload mode,\nyou must call the Initiate Multipart Upload interface to notify the OSS to initiate a Multipart Upload event.\nThe Initiate Multipart Upload interface returns a globally unique Upload ID created by the OSS server to identify this Multipart Upload event.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] Mime file type e.g.: application/octet-stream\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - [x-oss-server-side-encryption]\n    Specify the server-side encryption algorithm used to upload each part of this object,Type: string, Valid value: AES256 `x-oss-server-side-encryption: AES256`<br>\n    if use in browser you should be set cors expose header x-oss-server-side-encryption\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-server-side-encryption] if set request header x-oss-server-side-encryption, will return\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- uploadId {String} upload id, use for uploadPart, completeMultipart\n\nexample:\n\n```js\n  var result = yield store.initMultipartUpload('object');\n  console.log(result);\n```\n\n### .uploadPart(name, uploadId, partNo, file, start, end[, options])\nAfter initiating a Multipart Upload event, you can upload data in parts based on the specified object name and Upload ID.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- file {File|String}  is File or FileName, the whole file<br>\n Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB. <br>\n In Node you can use File or FileName, but in browser you only can use File.\n- start {Number} part start bytes  e.g: 102400\n- end {Number} part end bytes  e.g: 204800\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  var name = 'object';\n  var result = yield store.initMultipartUpload(name);\n  var uploadId = result.uploadId;\n  var file; //the data you want to upload, is a File or FileName(only in node)\n  //if file part is 10\n  var partSize = 100 * 1024;\n  var fileSize = 10 * partSize;//you need to calculate\n  var dones = [];\n  for (var i = 1; i <= 10; i++) {\n    var start = partSize * (i -1);\n    var end = Math.min(start + partSize, fileSize);\n    var part = yield store.uploadPart(name, uploadId, i, file, start, end);\n    dones.push({\n      number: i,\n      etag: part.etag\n    });\n    console.log(part);\n  }\n\n  //end need to call completeMultipartUpload api\n```\n\n### .uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])\nUsing Upload Part Copy, you can copy data from an existing object and upload a part of the data.\nWhen copying a file larger than 1 GB, you must use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- range {String} Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB, range value like `0-102400`\n- sourceData {Object}\n  - sourceKey {String} the source object name\n  - sourceBucketName {String} the source bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} The following request header is used for the source objects specified by x-oss-copy-source.\n    - [x-oss-copy-source-if-match]  default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]   default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]   default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since]   default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  var name = 'object';\n  var result = yield store.initMultipartUpload(name);\n\n  var partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (var i = 1; i <= 10; i++) {\n    var start = partSize * (i -1);\n    var end = Math.min(start + partSize, fileSize);\n    var range = start + '-' + (end - 1);\n    var part = yield store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n### .completeMultipartUpload(name, uploadId, parts[, options])\nAfter uploading all data parts, you must call the Complete Multipart Upload API to complete Multipart Upload for the entire file.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- parts {Array} more part {Object} from uploadPartCopy, , each in the structure:\n  - number {Number} partNo\n  - etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data , sdk use JSON.parse() return\n\nexample:\n\n```js\n\n  //init multipart\n  var name = 'object';\n  var result = yield store.initMultipartUpload(name);\n\n  //upload part\n  var file; //the data you want to upload, this example size is 10 * 100 * 1024\n  var fileSize;//you need to calculate\n  var partSize = 100 * 1024;//100kb\n  var done = [];\n  //if file part is 10\n  for (var i = 1; i <= 10; i++) {\n    var start = partSize * (i -1);\n    var end = Math.min(start + partSize, fileSize);\n    var data = file.slice(start, end);\n    var part = yield store.uploadPart(name, result.uploadId, i, data);\n    console.log(part);\n    done.push({\n          number: i,\n          etag: part.res.headers.etag\n        });\n  }\n\n  //complete\n  var completeData = yield store.completeMultipartUpload(name, result.uploadId, done);\n  console.log(completeData);\n```\n\n\n### .multipartUpload*(name, file[, options])\n\nUpload file with [OSS multipart][oss-multipart].<br>\nthis function contains initMultipartUpload, uploadPartCopy, completeMultipartUpload.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} thunk or generator, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [mime] {String} custom mime , will send with `Content-Type` entity header\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n          e.g.:\n         ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n         ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data, sdk use JSON.parse() return\n\nexample:\n\n- Upload using multipart\n\n```js\nvar result = yield store.multipartUpload('object', '/tmp/file');\nconsole.log(result);\n\nvar result = yield store.multipartUpload('object', '/tmp/file', {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function* (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nvar result = yield store.multipartUpload('object', '/tmp/file', {\n  checkpoint: savedCpt,\n  progress: function* (p, cpt, res) { //progress is generator\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\n```\n\n- multipartUpload progress example\n\n```js\n//thunk\nfunction thunkProgress(p, cpt, res) {\n  return function(done) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n    done();\n  }\n}\n\nvar result1 = yield store.multipartUpload('object', '/tmp/file', {\n  progress: thunkProgress\n});\n\n//generator\nfunction* generatorProgress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nvar result2 = yield store.multipartUpload('object', '/tmp/file', {\n  progress: generatorProgress\n});\n\n```\n\n- multipartUpload with cancel\n\n>tips: cancel multipartUpload, now only support browser.\n\n```js\n\n//start upload\ntry {\n  var result = yield store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function* (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n### .multipartUploadCopy*(name, sourceData[, options])\n\nCopy file with [OSS multipart][oss-multipart]. <br>\nthis function contains head, initMultipartUpload, uploadPartCopy, completeMultipartUpload.<br>\nWhen copying a file larger than 1 GB, you should use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} is thunk or generator, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [copyheaders] {Object} only uploadPartCopy api used, detail [see](https://www.alibabacloud.com/help/doc-detail/31994.htm)\n    - [x-oss-copy-source-if-match]  only uploadPartCopy api used, default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]  only uploadPartCopy api used, default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]  only uploadPartCopy api used, default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since] only uploadPartCopy api used, default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n- Copy using multipart\n\n```js\nvar result = yield store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n});\nconsole.log(result);\n\nvar result = yield store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function* (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\nvar result = yield store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function* (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\n```\n- multipartUploadCopy with cancel\n\n```js\n\n//start upload\ntry {\n  var result = yield store.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n    checkpoint: savedCpt,\n    progress: function* (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n### .listParts*(name, uploadId[, query, options])\n\nThe ListParts command can be used to list all successfully uploaded parts mapped to a specific upload ID, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- name {String} object key\n- uploadId {String} upload ID from initMultipartUpload api\n- [query] {Object} query parameters\n  - [max-parts] {Number} The maximum part number in the response of the OSS. default value: 1000.\n  - [part-number-marker] {Number} Starting position of a specific list. A part is listed only when the part number is greater than the value of this parameter.\n  - [encoding-type] {String} Specify the encoding of the returned content and the encoding type. Optional value: url\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- uploadId {String} upload ID\n- bucket {String} Specify the bucket name.\n- name {String} object name\n- PartNumberMarker {Number} Starting position of the part numbers in the listing result.\n- nextPartNumberMarker {Number} If not all results are returned this time, the response request includes the NextPartNumberMarker element to indicate the value of PartNumberMarker in the next request.\n- maxParts {Number} upload ID\n- isTruncated {Boolean} Whether the returned result list for List Parts is truncated. The “true” indicates that not all results are returned; “false” indicates that all results are returned.\n- parts {Array} The container that saves part information, each in the structure:\n  - PartNumber {Number} Part number.\n  - LastModified {Date} Time when a part is uploaded.\n  - ETag {String} ETag value in the content of the uploaded part.\n  - Size {Number} Size of the uploaded part.\n\nexample:\n\n- List uploaded part\n\n```js\n\nvar result = yield store.listParts('objcet', 'uploadId', {\n  'max-parts': 1000\n});\nconsole.log(result);\n```\n\n### .listUploads*(query[, options])\n\nList on-going multipart uploads, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- query {Object} query parameters\n  - [prefix] {String} the object key prefix\n  - [max-uploads] {Number} the max uploads to return\n  - [key-marker] {String} the object key marker, if `upload-id-marker`\n    is not provided, return uploads with `key > marker`, otherwise\n    return uploads with `key >= marker && uploadId > id-marker`\n  - [upload-id-marker] {String} the upload id marker, must be used\n    **WITH** `key-marker`\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- List on-going multipart uploads\n\n```js\n\nvar result = yield store.listUploads({\n  'max-uploads': 100,\n  'key-marker': 'my-object',\n  'upload-id-marker': 'upload-id'\n});\nconsole.log(result);\n```\n\n### .abortMultipartUpload*(name, uploadId[, options])\n\nAbort a multipart upload for object.\n\nparameters:\n\n- name {String} the object name\n- uploadId {String} the upload id\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- Abort a multipart upload\n\n```js\nvar result = yield store.abortMultipartUpload('object', 'upload-id');\nconsole.log(result);\n```\n\n## RTMP Operations\n\nAll operations function is [generator], except `getRtmpUrl`.\n\ngenerator function format: `functionName*(...)`.\n\n### .putChannel*(id, conf[, options])\n\nCreate a live channel.\n\nparameters:\n\n- id {String} the channel id\n- conf {Object} the channel config\n  - [Description] {String} the channel description\n  - [Status] {String} the channel status: 'enabled' or 'disabled'\n  - [Target] {Object}\n    - [Type] {String} the data type for the channel, only 'HLS' is supported now\n    - [FragDuration] {Number} duration of a 'ts' segment\n    - [FragCount] {Number} the number of 'ts' segments in a 'm3u8'\n    - [PlaylistName] {String} the 'm3u8' name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- publishUrls {Array} the publish urls\n- playUrls {Array} the play urls\n- res {Object} response info\n\nexample:\n\n- Create a live channel\n\n```js\nvar cid = 'my-channel';\nvar conf = {\n  Description: 'this is channel 1',\n  Status: 'enabled',\n  Target: {\n    Type: 'HLS',\n    FragDuration: '10',\n    FragCount: '5',\n    PlaylistName: 'playlist.m3u8'\n  }\n};\n\nvar r = yield this.store.putChannel(cid, conf);\nconsole.log(r);\n```\n\n### .getChannel*(id[, options])\n\nGet live channel info.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- data {Object} channel info, same as conf in [.putChannel](#putchannelid-conf-options)\n- res {Object} response info\n\nexample:\n\n- Get live channel info\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.getChannel(cid);\nconsole.log(r);\n```\n\n### .deleteChannel*(id[, options])\n\nDelete a live channel.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response infomation.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Delete a live channel\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.deleteChannel(cid);\nconsole.log(r);\n```\n\n### .putChannelStatus*(id, status[, options])\n\nChange the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- status {String} the status: 'enabled' or 'disabled'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Disable a live channel\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.putChannelStatus(cid, 'disabled');\nconsole.log(r);\n```\n\n### .getChannelStatus*(id[, options])\n\nGet the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel status information.\n\nobject:\n\n- data {Object}\n  - Status {String} the channel status: 'Live' or 'Idle'\n  - [ConnectedTime] {String} the connected time of rtmp pushing\n  - [RemoteAddr] {String} the remote addr of rtmp pushing\n  - [Video] {Object} the video parameters (Width/Height/FrameRate/Bandwidth/Codec)\n  - [Audio] {Object} the audio parameters (Bandwidth/SampleRate/Codec)\n- res {Object} response info\n\nexample:\n\n- Get a live channel status\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.getChannelStatus(cid);\nconsole.log(r);\n\n// { Status: 'Live',\n//   ConnectedTime: '2016-04-12T11:51:03.000Z',\n//   RemoteAddr: '42.120.74.98:53931',\n//   Video:\n//   { Width: '672',\n//     Height: '378',\n//     FrameRate: '29',\n//     Bandwidth: '60951',\n//     Codec: 'H264' },\n//   Audio: { Bandwidth: '5959', SampleRate: '22050', Codec: 'AAC' }\n// }\n```\n\n### .listChannels*(query[, options])\n\nList channels.\n\nparameters:\n\n- query {Object} parameters for list\n  - prefix {String}: the channel id prefix (returns channels with this prefix)\n  - marker {String}: the channle id marker (returns channels after this id)\n  - max-keys {Number}: max number of channels to return\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel list.\n\nobject:\n\n- channels {Array} the channels, each in the structure:\n  - Name {String} the channel id\n  - Description {String} the channel description\n  - Status {String} the channel status\n  - LastModified {String} the last modification time of the channel\n  - PublishUrls {Array} the publish urls for the channel\n  - PlayUrls {Array} the play urls for the channel\n- nextMarker: result.data.NextMarker || null,\n- isTruncated: result.data.IsTruncated === 'true'\n- res {Object} response info\n\nexample:\n\n- List live channels\n\n```js\nvar r = yield this.store.listChannels({\n  prefix: 'my-channel',\n  'max-keys': 3\n});\nconsole.log(r);\n```\n\n### .getChannelHistory*(id[, options])\n\nGet the live channel history.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the history information.\n\nobject:\n\n- records {Object} the pushing records, each in the structure:\n  - StartTime {String} the start time\n  - EndTime {String} the end time\n  - RemoteAddr {String} the remote addr\n- res {Object} response info\n\nexample:\n\n- Get the live channel history\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.getChannelHistory(cid);\nconsole.log(r);\n```\n\n### .createVod*(id, name, time[, options])\n\nCreate a VOD playlist for the channel.\n\nparameters:\n\n- id {String} the channel id\n- name {String} the playlist name\n- time {Object} the duration time\n  - startTime {Number} the start time in epoch seconds\n  - endTime {Number} the end time in epoch seconds\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Create a vod playlist of a live channel\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.createVod(cid, 're-play', {\n  startTime: 1460464870,\n  endTime: 1460465877\n});\nconsole.log(r);\n```\n\n### .getRtmpUrl(channelId[, options])\n\nGet signatured rtmp url for publishing.\n\nparameters:\n\n- channelId {String} the channel id\n- [options] {Object} optional parameters\n  - [expires] {Number} the expire time in seconds of the url\n  - [params] {Object} the additional paramters for url, e.g.: {playlistName: 'play.m3u8'}\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the rtmp url.\n\nexample:\n\n- Get a rtmp url.\n\n```js\nvar cid = 'my-channel';\n\nvar url = this.store.getRtmpUrl(this.cid, {\n  params: {\n    playlistName: 'play.m3u8'\n  },\n  expires: 3600\n});\nconsole.log(url);\n// rtmp://ossliveshow.oss-cn-hangzhou.aliyuncs.com/live/tl-channel?OSSAccessKeyId=T0cqQWBk2ThfRS6m&Expires=1460466188&Signature=%2BnzTtpyxUWDuQn924jdS6b51vT8%3D\n```\n\n## Create A Image Service Instance\n\nEach Image Service instance required `accessKeyId`, `accessKeySecret`, `bucket` and `imageHost`.\n\n### oss.ImageClient(options)\n\nCreate a Image service instance.\n\noptions:\n- imageHost {String} your image service domain that binding to a OSS bucket\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- bucket {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nvar oss = require('ali-oss');\n\nvar imgClient = oss.ImageClient({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'my_image_bucket'\n  imageHost: 'thumbnail.myimageservice.com'\n});\n```\n\n## Image Operations\n\nAll operations function is [generator], except `imgClient.signatureUrl`.\n\ngenerator function format: `functionName*(...)`.\n\n### imgClient.get*(name, file[, options])\n\nGet an image from the image channel.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the image\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image with a style and store it to the local file\n\n```js\nvar imagepath = '/home/ossdemo/demo.jpg';\nyield imgClient.get('ossdemo/demo.jpg@200w_200h', filepath);\n```\n\n_ Store image to a writestream\n\n```js\nyield imgClient.get('ossdemo/demo.jpg@200w_200h', somestream);\n```\n\n- Get an image content buffer\n\n```js\nvar result = yield imgClient.get('ossdemo/demo.jpg@200w_200h');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a not exists object or a not image object\n\n```js\nvar imagepath = '/home/ossdemo/demo.jpg';\nyield imgClient.get('ossdemo/not-exists-demo.jpg@200w_200h', filepath);\n// will throw NoSuchKeyError\n```\n\n### imgClient.getStream*(name[, options])\n\nGet an image read stream.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image object stream\n\n```js\nvar result = yield imgClient.getStream('ossdemo/demo.jpg@200w_200h');\nresult.stream.pipe(fs.createWriteStream('some demo.jpg'));\n```\n\n### imgClient.getExif*(name[, options])\n\nGet a image exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nIf object don't have exif, will throw 400 BadRequest.\n\nexample:\n\n```js\nvar result = yield imgClient.getExif('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n### imgClient.getInfo*(name[, options])\n\nGet a image info and exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nexample:\n\n```js\nvar result = yield imgClient.getInfo('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     Format: \"jpg\",\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n\n### imgClient.putStyle*(name, style[, options])\n// TODO\n\n### imgClient.getStyle*(name[, options])\n\nGet a style by name from the image channel.\n\nparameters:\n- name {String} image style name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} styles object\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nvar result = yield imgClient.getStyle('400');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"234\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:58:20 GMT\"\n//     },\n//     size: 234,\n//     aborted: false,\n//     rt: 398,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }\n// }\n```\n\n### imgClient.listStyle*([options])\n\nGet all styles from the image channel.\n\nparameters:\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Array} styles array, a style object:\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nvar result = yield imgClient.listStyle();\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"913\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:47:32 GMT\"\n//     },\n//     size: 913,\n//     aborted: false,\n//     rt: 1911,\n//     keepAliveSocket: false\n//   },\n//   data: [{\n//     Name: \"200-200\",\n//     Content: \"0e_200w_200h_0c_0i_0o_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:28:08 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:28:08 GMT\"\n//   }, {\n//     Name: \"800\",\n//     Content: \"800w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:29:15 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:29:15 GMT\"\n//   }, {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }, {\n//     Name: \"600\",\n//     Content: \"600w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:35:02 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:35:02 GMT\"\n//   }]\n// }\n```\n\n### imgClient.deleteStyle*(name[, options])\n// TODO\n\n### imgClient.signatureUrl(name)\n\nCreate a signature url for directly download.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return full signature url.\n\nexample:\n\n```js\nvar url = imgClient.signatureUrl('\n');\n// http://thumbnail.myimageservice.com/demo.jpg@200w_200h?OSSAccessKeyId=uZxyLARzYZtGwHKY&Expires=1427803849&Signature=JSPRe06%2FjQpQSj5zlx2ld1V%2B35I%3D\n```\n\n## Cluster Mode\n\nCluster mode now only support object operations.\n\n```js\nvar Cluster = require('ali-oss').ClusterClient;\n\nvar client = Cluster({\n  cluster: [{\n    host: 'host1',\n    accessKeyId: 'id1',\n    accessKeySecret: 'secret1'\n  }, {\n    host: 'host2',\n    accessKeyId: 'id2',\n    accessKeySecret: 'secret2'\n  }],\n  schedule: 'masterSlave', //default is `roundRobin`\n});\n\n// listen error event to logging error\nclient.on('error', function(err) {\n  console.error(err.stack);\n});\n\n// client init ready\nclient.ready(function() {\n  console.log('cluster client init ready, go ahead!');\n});\n```\n\n### Get Methods\n\nWill choose an alive client by schedule(`masterSlave` or `roundRobin`).\n\n- `client.get()`\n- `client.head()`\n- `client.getStream()`\n- `client.list()`\n- `client.signatureUrl()`\n- `client.chooseAvailable()` - choose an available client by schedule.\n- `client.getACL()`\n\n### Put Methods\n\nWill put to all clients.\n\n- `client.put()`\n- `client.putStream()`\n- `client.delete()`\n- `client.deleteMulti()`\n- `client.copy()`\n- `client.putMeta()`\n- `client.putACL()`\n\n## Wrapper Usage\n\nWe provide an async wrapper which can be used without `co`. All the\nmethods are preserved, just in a async way:\n\n```js\n\nvar OSS = require('ali-oss').Wrapper;\nvar STS = OSS.STS;\n\nvar client = new OSS({ /* same options */});\n\nclient.put('hello', new Buffer('world')).then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n\nclient.get('hello').then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n\nvar url = client.signatureUrl('hello');\nconsole.log(url);\n\nvar stsClient = new STS({ /* same options */});\n\nvar role = 'role';\n\nstsClient.assumeRole(role).then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n```\n\n## Browser Usage\n\nYou can use most of the functionalities of `ali-oss` in browser with\nsome exceptions:\n\n- put object with streaming: no chunked encoding, we use multipart\n  upload instead\n- get object to local file: we cannot manipulate file system in\n  browser, we provide signed object url for downloading needs\n- bucket operations(listBuckets, putBucketLogging, etc) will fail: OSS\n  server currently do not support CORS requests for bucket operations\n  (will probably be fixed later)\n\n### Compatibility\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n\n### Setup\n\n#### Bucket setup\n\nAs browser-side javascript involves CORS operations. You need to setup\nyour bucket CORS rules to allow CORS operations:\n\n- set allowed origins to '\\*'\n- allowed methods to 'PUT, GET, POST, DELETE, HEAD'\n- set allowed headers to '\\*'\n- expose 'ETag' in expose headers\n\n#### STS setup\n\nAs we don't want to expose the accessKeyId/accessKeySecret in the\nbrowser, a [common practice][oss-sts] is to use STS to grant temporary\naccess.\n\n### Basic usage\n\nInclude the sdk lib in the `<script>` tag and you have `OSS` available\nfor creating client. We use `OSS.Wrapper` here to avoid using `co`:\n\n```html\n<script src=\"http://gosspublic.alicdn.com/aliyun-oss-sdk.min.js\"></script>\n<script type=\"text/javascript\">\n  var client = new OSS.Wrapper({\n    region: 'oss-cn-hangzhou',\n    accessKeyId: '<access-key-id>',\n    accessKeySecret: '<access-key-secret>',\n    bucket: '<bucket-name>'\n  });\n\n  client.list().then(function (result) {\n    console.log('objects: %j', result.objects);\n    return client.put('my-obj', new OSS.Buffer('hello world'));\n  }).then(function (result) {\n    console.log('put result: %j', result);\n    return client.get('my-obj');\n  }).then(function (result) {\n    console.log('get result: %j', result.content.toString());\n  });\n</script>\n```\nThe full sample can be found [here][browser-sample].\n\n### How to build\n\n```bash\nnpm run build-dist\n```\n\nAnd see the build artifacts under `dist/`.\n\n## Known Errors\n\nEach error return by OSS server will contains these properties:\n\n- name {String} error name\n- message {String} error message\n- requestId {String} uuid for this request, if you meet some unhandled problem,\n    you can send this request id to OSS engineer to find out what's happend.\n- hostId {String} OSS cluster name for this request\n\nname | status | message | message in Chinese\n---  | ---    | ---     | ---\nAccessDeniedError | 403 | Access Denied | 拒绝访问\nBucketAlreadyExistsError | 409 | Bucket already exists | Bucket 已经存在\nBucketNotEmptyError | 409 | Bucket is not empty | Bucket 不为空\nEntityTooLargeError | 400 | Entity too large | 实体过大\nEntityTooSmallError | 400 | Entity too small | 实体过小\nFileGroupTooLargeError | 400 | File group too large | 文件组过大\nInvalidLinkNameError | 400 | Link name can't be the same as the object name | Object Link 与指向的 Object 同名\nLinkPartNotExistError | 400 | Can't link to not exists object | Object Link 中指向的 Object 不存在\nObjectLinkTooLargeError | 400 | Too many links to this object | Object Link 中 Object 个数过多\nFieldItemTooLongError | 400 | Post form fields items too large | Post 请求中表单域过大\nFilePartInterityError | 400 | File part has changed | 文件 Part 已改变\nFilePartNotExistError | 400 | File part not exists | 文件 Part 不存在\nFilePartStaleError | 400 | File part stale | 文件 Part 过时\nIncorrectNumberOfFilesInPOSTRequestError | 400 | Post request contains invalid number of files | Post 请求中文件个数非法\nInvalidArgumentError | 400 | Invalid format argument | 参数格式错误\nInvalidAccessKeyIdError | 400 | Access key id not exists | Access Key ID 不存在\nInvalidBucketNameError | 400 | Invalid bucket name | 无效的 Bucket 名字\nInvalidDigestError | 400 | Invalid digest | 无效的摘要\nInvalidEncryptionAlgorithmError | 400 | Invalid encryption algorithm | 指定的熵编码加密算法错误\nInvalidObjectNameError | 400 | Invalid object name | 无效的 Object 名字\nInvalidPartError | 400 | Invalid part | 无效的 Part\nInvalidPartOrderError | 400 | Invalid part order | 无效的 part 顺序\nInvalidPolicyDocumentError | 400 | Invalid policy document | 无效的 Policy 文档\nInvalidTargetBucketForLoggingError | 400 | Invalid bucket on logging operation | Logging 操作中有无效的目标 bucket\nInternalError | 500 | OSS server internal error | OSS 内部发生错误\nMalformedXMLError | 400 | Malformed XML format | XML 格式非法\nMalformedPOSTRequestError | 400 | Invalid post body format | Post 请求的 body 格式非法\nMaxPOSTPreDataLengthExceededError | 400 | Post extra data too large | Post 请求上传文件内容之外的 body 过大\nMethodNotAllowedError | 405 | Not allowed method | 不支持的方法\nMissingArgumentError | 411 | Missing argument | 缺少参数\nMissingContentLengthError | 411 | Missing `Content-Length` header | 缺少内容长度\nNoSuchBucketError | 404 | Bucket not exists | Bucket 不存在\nNoSuchKeyError | 404 | Object not exists | 文件不存在\nNoSuchUploadError | 404 | Multipart upload id not exists | Multipart Upload ID 不存在\nNotImplementedError | 501 | Not implemented | 无法处理的方法\nPreconditionFailedError | 412 | Pre condition failed | 预处理错误\nRequestTimeTooSkewedError | 403 | Request time exceeds 15 minutes to server time | 发起请求的时间和服务器时间超出 15 分钟\nRequestTimeoutError | 400 | Request timeout | 请求超时\nRequestIsNotMultiPartContentError | 400 | Invalid post content-type | Post 请求 content-type 非法\nSignatureDoesNotMatchError | 403 | Invalid signature | 签名错误\nTooManyBucketsError | 400 | Too many buckets on this user | 用户的 Bucket 数目超过限制\nRequestError | -1 | network error | 网络出现中断或异常\nConnectionTimeout | -2 | request connect timeout | 请求连接超时\nSecurityTokenExpired | 403 | sts Security Token Expired | sts Security Token 超时失效\n\n[generator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n[oss-sts]: https://help.aliyun.com/document_detail/oss/practice/ram_guide.html\n[browser-sample]: https://github.com/rockuw/oss-in-browser\n[oss-multipart]: https://help.aliyun.com/document_detail/oss/api-reference/multipart-upload/InitiateMultipartUpload.html\n[disabled-browser-headers]: https://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n",
      "readmeFilename": "README.md",
      "gitHead": "50adf8eedd173ff64c4ce0fb3575b996cd3f69f4",
      "_id": "ali-oss@4.15.1",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.4.0",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "dist": {
        "integrity": "sha512-JqE5gKvynNabXlVHAZUZ4lXL0fw5wWY6/UM7zIefhCuQmWeU8rl3KONXdNW76huWkEktOv6jF2g4AZlCQDql6g==",
        "shasum": "e64a7aa9ddfca4573f8c143a59f55dddb1f49305",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.15.1.tgz",
        "fileCount": 31,
        "unpackedSize": 320627,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbUEd9CRA9TVsSAnZWagAAH88P/1YjmqZsMXOLdl7wMSXC\n6dyCXnn5S/H43DcswNyIOI4sW80IuCY916YnoLcNFPKsxtszG2/uMlrPfORv\nwcmd2QDQclPpuu9lttHCn6+TQ9ZAV1ish4zNMIaiNeRYOEBa3m0GYg7YmQFW\nu7c989i0DhJHZWTx9SRDLNty3tFSXwiU3Lv0y4JyVK2iD2zvYTxo+pZgU2Dw\nLS+qi84lTpaGqaYfcVmH+oEQRuXUwB6SRzcuQTS7ztUNsYkxRTiB7eBA2Ro7\nCwwo1BNmCm9sY+by/Fxn/0HRHDKOprqkoZK8c6QG5torJ2damYZ/S95LTblg\n8w5xKfOQ+2QCoRvK5oRt4ovmRp14qVD5NFaiDXsJvCI/5DnvqXr0nmuI56j+\nlzpxxuT+K+BFjkL/XehEHHUUenaIk10LNR6g5HSyXBAYNL9JNOGYp+hyVBMX\naOlGVQK88geQidxe/MibrofQFUOyKpqFznZMkbuQRTYIGB2msCF/gcDvf9Y8\nDeWIDEhhzsaTsoDlB58bYRLP9hvPz3DceIIG6xlHSp+E43+RF6znMmOZMZko\nJTfmWsA3f6yiNk81KOy4c1xB0Zt2IWtmJGoqHKOCWXPbVuoeih1V9ccf118N\nLD/MAhPBMegIvqQ0wGx6LTgK2lG66FgV26JuyY7yLLBgu16lxWjeF5j1Bp/L\nKvvQ\r\n=Sm7l\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCvyC2ND6PIXonLaL7HWpVKSX4vuiky4nOWWeCf7LOQhAIgbmD8FQ0y3VfrRL8wvjfLm6ovWraN73DcyhD0LwzDwCY="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_4.15.1_1531987837829_0.5705832848890815"
      },
      "_hasShrinkwrap": false
    },
    "6.0.2": {
      "name": "ali-oss",
      "version": "6.0.2",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "f2b77514cabc5bba79e8fb6e59018deac1f856c8",
      "_id": "ali-oss@6.0.2",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.9.2",
      "_npmUser": {
        "name": "jackycheung888",
        "email": "2378278470@qq.com"
      },
      "dist": {
        "integrity": "sha512-HMmlmab75/es5T0jFjqjt4pPwMkgEzUb/gqL0N4ADdr0JtYglXsNV0l/W6oxsHunRN49pStj85GVW442CkwHnA==",
        "shasum": "0fce862819998db168e8f24fe3b20f4790e696ce",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.0.2.tgz",
        "fileCount": 35,
        "unpackedSize": 3034807,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcDdmHCRA9TVsSAnZWagAAl4YP/2lzNPdZD0PBBp4dXg1F\nOSQdaI2/9NhFPZdnvCkVIIWqL68YlfRu3MEc8DAy/cz4bND59ah+pmZIrVIn\nwnZ/soARR69jBn19lFJadELQOWmXxcL81zKtPQIxa/u51y7+Pat+TA30bMh5\nZnUM3KN/fyYgs9eePnpyb3ygmx0p9aR+Y/ARKM83NzGK23nh8iVZECUoxLR0\n8QzFQmkvn97hy9rKr1IoaGEkgGCh4LqfQSL0zlo9O3nC6eKnYi7TbjL0tm3Q\n5y78bkkwkaL/ZVd4rDAuPkLTPvdCqaZ7iWoniavziB3tK2Ii/eMmrGJ1g2jd\nS7zgdX2E3fzwJqd0Mks/KORmpEcKdT0P3B0zDdQfmEDZsOhSegUXPrb9dA8w\nx9R++K/SPCxf8aOtAZDsOBepXJVRIY6/Gv3Qi8u0gMn84ru2tEl8xwjhFge4\n+IMo4FW/38pSq0q8EYld0ttyG/xhWjFNZCQf7kDQjfVgguHzuad8nG7cJmrE\n4ihU3agmW9CkuiWnmFKhaBLYCxT02zJ8V7vm6Fe3C/EDSbBE9pyIEnsb0npb\nSAi4M5gw+Pl4mioXMt8AMAO1rAyMJldGg3mpbCj0mc/YtHu2QhseaWaN0sFL\nlt1DehAE00aS+YaVE3mzCVUlkBJrwOrTAXTW9thFLer5j/iVFvCr3vwtzss/\n81zT\r\n=eZyz\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAxttLrvWV9joZooXty3BzK2N4FoOa4myzDb6mFWWLpjAiEA2I6UZWnpVJ+3QWNJpgpKrtQoqYvSoWwgRQaULa7sYkY="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.0.2_1544411526532_0.754944403612585"
      },
      "_hasShrinkwrap": false
    },
    "6.1.0": {
      "name": "ali-oss",
      "version": "6.1.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "4f2c8a0aa793255af63adc71b05d3055caa62e53",
      "_id": "ali-oss@6.1.0",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.9.2",
      "_npmUser": {
        "name": "jackycheung888",
        "email": "2378278470@qq.com"
      },
      "dist": {
        "integrity": "sha512-hTl6PsZcWptF7YDtTJMJuxsPwwTTgqxyR1QDKmZlHRN9E3d/ao5tk9v8EBFPdorroQL+Niahju4rGYd1N/71VQ==",
        "shasum": "c5a62c42d9424a903781d0555962b087c71fa5fc",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.1.0.tgz",
        "fileCount": 35,
        "unpackedSize": 3036379,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcMsqSCRA9TVsSAnZWagAADYUP/jWXJGIRiHwPPgvvy/Ft\n4xnbWuHyTutKh5fTRjvdw6xjvfRizhPcnNxydUSvEfODdlWP79UFjzJR+pC4\nVMzpvE3ZxB3m32AntA1Q5Fxz4CJx3LTP3M0ioJYYST/KHuwdFXg7dj8+zemO\nu7D2UM2kIhAdU7aZV5RoGwHD/7F3VYOykq4dkDeHC0P6H0ikguqsznDD9u/F\ntY+kQ3XXBhC5VFteailJrcooCfUnAPzTfeKeKOGdyYfwp8merVPt/qTuEYw9\nHkytcGOVcxMHi3B1Xyj2mzYzVyX+EBT/JIf+dKQpUVZVslAOey9ROIN1cq5H\ntMyGiKXHMO0iPIzYmnJjw8oVCJ/6jXj/pzr4gt5jDbAy8ddVtbqpUhj38dbZ\nRCsLJW0ZuXa86ebCJyt3fCrWjh0ItWhBbZd5PMVM7XKGUfFUGHkAQtsf8FCA\nS3FFnYVSS+/74GtCcyGtplqey1XcC4BLnXUvh5TUi/KJFL/ODcMspqeciSRT\nzcnPOZvwQeFwhtEzDDbyWig7H8LVeraDKnVbnYoNRH2650sUqxixwGPsxuj1\nDVHClqD/Lpm3TVVmdU4OI54AcJE1CZm1my7RJMbWyGJH0KAhGofljDNqZDwH\nPX6y4pWfJCDHQ1s/DzK2AwlPMy6JuclIZx7TKm69WM69AfXgbLj5Kl5+TO0b\neNTV\r\n=RzeA\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCQe5Ci4M1cnWzr5YctyY9ABVw4gOK9F/Hm9kMk55qa1QIhAPsxQNDCeDoF3EkTkbtDoLtCMTHdniJ2KQyJbJlG6S3u"
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.1.0_1546832529609_0.20782958471307245"
      },
      "_hasShrinkwrap": false
    },
    "6.1.1-beta.1": {
      "name": "ali-oss",
      "version": "6.1.1-beta.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "e009d92ec11d8c6e250603bc5d9adb843bbaa2df",
      "_id": "ali-oss@6.1.1-beta.1",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.9.2",
      "_npmUser": {
        "name": "jackycheung888",
        "email": "2378278470@qq.com"
      },
      "dist": {
        "integrity": "sha512-ZyvdAYrmsbXifaYIks8BFjoY/dUetjBx+BHVWChpABfIeZaIwHK7chp9d7kjWWvZ/jAedTocMnxpTYZT+2vrFg==",
        "shasum": "ae552bf5da0fe2b1f524c70f1f19c817cf41fb02",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.1.1-beta.1.tgz",
        "fileCount": 34,
        "unpackedSize": 3031413,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcrC+CCRA9TVsSAnZWagAACVUP/3iMNTmti8/d40Liwb6L\nsVxBmumX8H+PzZCHB9JHK0bh+Zn8L50xsSIRWJg9wIHfO9epKU8KV0L2fJQA\n2+qmzEGEMX3PHr/Mx6HWTacqEqDTr1sEMzqb7fAjjDtgfwMcDgLwilsvbsT4\nDXKpTjgUIY5vHdj3W8Ja950hbUXZfAUdDOlbN6njzWCq7MBFEgIDtMfwM95Z\nDorMI5byDudAWmorQBWEvDbWVdbscxlczTnBZUVC2PFe7IaeJupcPOlkexET\ngCnXiHZSJeiLD61VMGu3gxFFzNatno7SqtygbZjWx7L0DTSiYXdtX+5XCts1\nozFFrDNBATpcDAjefnaKlp/yWl0o+G5g5mDL0o/52efG56GeGT71EU8BDWmW\nX5qCFVVbeDBHnaJ+2TwiEZbNTAGauhCiTvca8GRXl+mVu1Xz8v2WbN9lAo+j\nyDzQSBfl4KomKxwuBXhDSggZdVugXGW/JeyOVRbviabE8sXSe3SIEXRZU+9F\nT4f3yLkyrVXuqxFlA1GB9dYgoOzd7lnot4QIXVuN6Enc7l+1O0Sjl50lTj6o\nxdPVGcJS+HVI094tuFm/SzM6woRsagr5AK4j8UaQsZ+FZfVRZmXNoUe26W54\n9ZvjZ7U3EAOgaABAAT82+n/CawP44E8xyX1h78mtMRrdK85aXv9Kan4RNf69\np3jS\r\n=whvb\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCLqK1D3SKURYiT/ZU4ntGQUpO4+jOr1aDneI4fwSSH8wIhANJ0hRiiKqVGBme8cTSnHnR6OMXS9HFJSpZQYXlKrQrH"
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.1.1-beta.1_1554788225448_0.7229922917861389"
      },
      "_hasShrinkwrap": false
    },
    "6.1.1": {
      "name": "ali-oss",
      "version": "6.1.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "e86dcc06536b1c140949ae3d30912a4d6adec45c",
      "_id": "ali-oss@6.1.1",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.9.2",
      "_npmUser": {
        "name": "jackycheung888",
        "email": "2378278470@qq.com"
      },
      "dist": {
        "integrity": "sha512-+BKZlX/+aPjFF8al0fS5j93ynWlKy779p/i1nVxElUjyQA457ccbhoQTUKL6cbr8EMetIAUHnhS9XTI4RgW1PA==",
        "shasum": "1a310a27a6070571a493e73a015a82656217e0df",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.1.1.tgz",
        "fileCount": 34,
        "unpackedSize": 3030476,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcraF5CRA9TVsSAnZWagAAutoP/jFn0tX/YUc+FOQoz+VQ\nbfBz+7bhkR3MGKRS8bSOqJ01KsIg4aS7xREnYOAbAwpWQt91G+pkq7evtSLj\nmPdN+53aKehdDry6Rm1lb0FB8VQ9ktjbpn/2yHM1bsUC4/eSTCX27MkOw+Py\nIz6CF/PQMWYCSr/5O5uEsc0FRWK0IfjtJw51yfQaRkKCtsFK7p5XdR32PGMp\nVUGQkl4qUFdco+xOtdmofet8FqHPMZk2rHHUyuR+FD+ZPevWLtGTYnrBk+/1\nSIibroups1lc1+IXmxWhhv2TmUf0FYp+1ONbmjeyKc7VPZz13DLQcnvXyvoK\nW2F5IMkXYANFss5awo1fz7J2xJBfChU/4hOXYkhsUpHHi4wsF9436oeKAotE\nlHnmNBpakzNF70CAlff2/q/I1WghIVMNCGiA6FMdmDlUbILl37pdZC4QASa0\nF9Cb4lsFNN5JD4UvPxcZ72khP6r6pW8sth85F9VlWR/UeIrM6SEF4lt3P8t/\nQntPUReia+Zqtm4sqyuMzDchdm+hfaOw9bNxS7eMvhz6y+WQZJ/70Aghv0nL\ni8LYc4EuL6HvMnH2v8l1WFWrcpOWb0xVK4cmjgBiOmT8b+QnSxKuRvWDynW/\nfcc9+/ownRg9KfjgTGU6Sp1wMjX4xlu4GFw1AOh41HjyU0+zJ6XJs01hsGpR\nV60r\r\n=X3Tx\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAhmkaQF83jXb6SUqOiPQqp5UaqACGVKaovw3BK/DkRBAiEAvVF/DvIT9LC9rfl+GSqgMiWbaguVCCEhfpm/SDa5RGs="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.1.1_1554882936140_0.14620774456052543"
      },
      "_hasShrinkwrap": false
    },
    "4.16.0": {
      "name": "ali-oss",
      "version": "4.16.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./lib/browser.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "test": "mocha -t 60000 -r thunk-mocha -r should test/*.test.js",
        "test-cov": "istanbul cover node_modules/.bin/_mocha -- -R dot -t 60000 -r thunk-mocha -r should test/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-cdn": "node publish.js"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm publish",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=4"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-browserify": "^1.0.9",
        "crypto-js": "^3.1.9-1",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "istanbul": "^0.4.3",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-mocha": "^1.3.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.4",
        "promise-polyfill": "^6.0.2",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co": "^4.6.0",
        "co-defer": "^1.0.0",
        "co-gather": "^0.0.1",
        "co-priority-queue": "^1.0.3",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "^2.8.0",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.17.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "publishConfig": {
        "tag": "latest-4"
      },
      "contributors": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "readme": "oss-nodejs-sdk\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage][cov-image]][cov-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/ali-oss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/ali-oss\n[travis-image]: https://img.shields.io/travis/ali-sdk/ali-oss/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ali-sdk/ali-oss.svg?branch=master\n[cov-image]: http://codecov.io/github/ali-sdk/ali-oss/coverage.svg?branch=master\n[cov-url]: http://codecov.io/github/ali-sdk/ali-oss?branch=master\n[david-image]: https://img.shields.io/david/ali-sdk/ali-oss.svg?style=flat-square\n[david-url]: https://david-dm.org/ali-sdk/ali-oss\n\naliyun OSS(object storage service) Node.js client.\n\n## Install\n\n```bash\nnpm install ali-oss --save\n```\n\n## License\n\n[MIT](LICENSE)\n\n# OSS Usage\n\nOSS, Object Storage Service. Equal to well known Amazon [S3](http://aws.amazon.com/s3/).\n\n## Summary\n\n- [Data Regions](#data-regions)\n- [Create Account](#create-acount)\n- [Create A Bucket Instance](#create-a-bucket-instance)\n  - [#oss(options)](#ossoptions)\n- [Bucket Operations](#bucket-operations)\n  - Base\n    - [.listBuckets*(query[, options])](#listbucketsquery-options)\n    - [.putBucket*(name, region[, options])](#putbucketname-region-options)\n    - [.useBucket(name, region)](#usebucketname-region)\n    - [.deleteBucket*(name, region[, options])](#deletebucketname-region-options)\n  - ACL\n    - [.putBucketACL*(name, region, acl[, options])](#putbucketaclname-region-acl-options)\n    - [.getBucketACL*(name, region[, options])](#getbucketaclname-region-options)\n  - Logging\n    - [.putBucketLogging*(name, region, prefix[, options])](#putbucketloggingname-region-prefix-options)\n    - [.getBucketLogging*(name, region[, options])](#getbucketloggingname-region-options)\n    - [.deleteBucketLogging*(name, region[, options])](#deletebucketloggingname-region-options)\n  - Website\n    - [.putBucketWebsite*(name, region, config[, options])](#putbucketwebsitename-region-config-options)\n    - [.getBucketWebsite*(name, region[, options])](#getbucketwebsitename-region-options)\n    - [.deleteBucketWebsite*(name, region[, options])](#deletebucketwebsitename-region-options)\n  - Referer\n    - [.putBucketReferer*(name, region, allowEmpty, referers[, options])](#putbucketreferername-region-allowempty-referers-options)\n    - [.getBucketReferer*(name, region[, options])](#getbucketreferername-region-options)\n    - [.deleteBucketReferer*(name, region[, options])](#deletebucketreferername-region-options)\n  - Lifecycle\n    - [.putBucketLifecycle*(name, region, rules[, options])](#putbucketlifecyclename-region-rules-options)\n    - [.getBucketLifecycle*(name, region[, options])](#getbucketlifecyclename-region-options)\n    - [.deleteBucketLifecycle*(name, region[, options])](#deletebucketlifecyclename-region-options)\n  - CORS\n    - [.putBucketCORS*(name, region, rules[, options])](#putbucketcorsname-region-rules-options)\n    - [.getBucketCORS*(name, region[, options])](#getbucketcorsname-region-options)\n    - [.deleteBucketCORS*(name, region[, options])](#deletebucketcorsname-region-options)\n- [Object Operations](#object-operations)\n  - [.list*(query[, options])](#listquery-options)\n  - [.put*(name, file[, options])](#putname-file-options)\n  - [.putStream*(name, stream[, options])](#putstreamname-stream-options)\n  - [.append*(name, file[, options])](#apendname-file-options)\n  - [.getObjectUrl(name[, baseUrl])](#getobjecturlname-baseurl)\n  - [.head*(name[, options])](#headname-options)\n  - [.get*(name, file[, options])](#getname-file-options)\n  - [.getStream*(name[, options])](#getstreamname-options)\n  - [.delete*(name[, options])](#deletename-options)\n  - [.copy*(name, sourceName[, options])](#copyname-sourcename-options)\n  - [.putMeta*(name, meta[, options])](#putmetaname-meta-options)\n  - [.deleteMulti*(names[, options])](#deletemultinames-options)\n  - [.signatureUrl(name[, options])](#signatureurlname-options)\n  - [.putACL*(name, acl[, options])](#putaclname-acl-options)\n  - [.getACL*(name[, options])](#getaclname-options)\n  - [.initMultipartUpload*(name[, options])](#initmultipartuploadname-options)\n  - [.uploadPart*(name, uploadId, partNo, file, start, end[, options])](#uploadpartname-uploadid-partno-file-start-end-options)\n  - [.uploadPartCopy*(name, uploadId, partNo, range, sourceData[, options])](#uploadpartcopyname-uploadid-partno-range-sourcedata-options)\n  - [.completeMultipartUpload(name, uploadId, parts[, options])](#completemultipartuploadname-uploadid-parts-options)\n  - [.multipartUpload*(name, file[, options])](#multipartuploadname-file-options)\n  - [.multipartUploadCopy*(name, sourceData[, options])](#multipartuploadcopyname-sourcedata-options)\n  - [.listParts*(name, uploadId[, query, options])](#listparts-name-uploadid-query-options)\n  - [.listUploads*(query[, options])](#listuploadsquery-options)\n  - [.abortMultipartUpload*(name, uploadId[, options])](#abortmultipartuploadname-uploadid-options)\n- [RTMP Operations](#rtmp-operations)\n  - [.putChannel*(id, conf[, options])](#putchannelid-conf-options)\n  - [.getChannel*(id[, options])](#getchannelid-options)\n  - [.deleteChannel*(id[, options])](#deletechannelid-options)\n  - [.putChannelStatus*(id, status[, options])](#putchannelstatusid-status-options)\n  - [.getChannelStatus*(id[, options])](#getchannelstatusid-options)\n  - [.listChannels*(query[, options])](#listchannelsquery-options)\n  - [.getChannelHistory*(id[, options])](#getchannelhistoryid-options)\n  - [.createVod*(id, name, time[, options])](#createvodid-name-time-options)\n  - [.getRtmpUrl(channelId[, options])](#getrtmpurlchannelid-options)\n- [Create A Image Service Instance](#create-a-image-service-instance)\n  - [#oss.ImageClient(options)](#ossimageclientoptions)\n- [Image Operations](#image-operations)\n  - [imgClient.get*(name, file[, options])](#imgclientgetname-file-options)\n  - [imgClient.getStream*(name[, options])](#imgclientgetstreamname-options)\n  - [imgClient.getExif*(name[, options])](#imgclientgetexifname-options)\n  - [imgClient.getInfo*(name[, options])](#imgclientgetinfoname-options)\n  - [imgClient.putStyle*(name, style[, options])](#imgclientputstylename-style-options)\n  - [imgClient.getStyle*(name[, options])](#imgclientgetstylename-options)\n  - [imgClient.listStyle*([options])](#imgclientliststyleoptions)\n  - [imgClient.deleteStyle*(name[, options])](#imgclientdeletestylename-options)\n  - [imgClient.signatureUrl(name)](#imgclientsignatureurlname)\n- [Wrapper Usage](#wrapper-usage)\n- [Browser Usage](#browser-usage)\n- [Known Errors](#known-errors)\n\n## Data Regions\n\n[OSS current data regions](https://help.aliyun.com/document_detail/oss/user_guide/endpoint_region.html).\n\nregion | country | city | endpoint | internal endpoint\n---  | ---     | ---  | --- | ---\noss-cn-hangzhou | China | HangZhou | oss-cn-hangzhou.aliyuncs.com | oss-cn-hangzhou-internal.aliyuncs.com\noss-cn-shanghai | China | ShangHai | oss-cn-shanghai.aliyuncs.com | oss-cn-shanghai-internal.aliyuncs.com\noss-cn-qingdao | China | QingDao | oss-cn-qingdao.aliyuncs.com | oss-cn-qingdao-internal.aliyuncs.com\noss-cn-beijing | China | BeiJing | oss-cn-beijing.aliyuncs.com | oss-cn-beijing-internal.aliyuncs.com\noss-cn-shenzhen | China | ShenZhen | oss-cn-shenzhen.aliyuncs.com | oss-cn-shenzhen-internal.aliyuncs.com\noss-cn-hongkong | China | HongKong | oss-cn-hongkong.aliyuncs.com | oss-cn-hongkong-internal.aliyuncs.com\noss-us-west-1 | US | Silicon Valley | oss-us-west-1.aliyuncs.com | oss-us-west-1-internal.aliyuncs.com\noss-ap-southeast-1 | Singapore | Singapore | oss-ap-southeast-1.aliyuncs.com | oss-ap-southeast-1-internal.aliyuncs.com\n\n## Create Account\n\nGo to [OSS website](http://www.aliyun.com/product/oss/?lang=en), create a new account for new user.\n\nAfter account created, you can create the OSS instance and get the `accessKeyId` and `accessKeySecret`.\n\n## Create A Bucket Instance\n\nEach OSS instance required `accessKeyId`, `accessKeySecret` and `bucket`.\n\n### #oss(options)\n\nCreate a Bucket store instance.\n\noptions:\n\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- [stsToken] {String} used by temporary authorization, detail [see](https://www.alibabacloud.com/help/doc-detail/32077.htm)\n- [bucket] {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [endpoint] {String} oss region domain. It takes priority over `region`.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`.\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`.\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [secure] {Boolean} instruct OSS client to use HTTPS (secure: true) or HTTP (secure: false) protocol.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nvar oss = require('ali-oss');\n\nvar store = oss({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\n```\n\n## Bucket Operations\n\n### .listBuckets*(query[, options])\n\nList buckets in this account.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search buckets using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [max-keys] {String|Number} max buckets, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return buckets list on `buckets` properties.\n\n- buckets {Array<BucketMeta>} bucket meta info list\n  Each `BucketMeta` will contains blow properties:\n    - name {String} bucket name\n    - region {String} bucket store data region, e.g.: `oss-cn-hangzhou-a`\n    - creationDate {String} bucket create GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n- owner {Object} object owner, including `id` and `displayName`\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 buckets\n\n```js\nvar result = yield store.listBuckets({\n  \"max-keys\": 10\n});\nconsole.log(result);\n```\n\n### .putBucket*(name, region[, options])\n\nCreate a new bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket exists and not belong to current account, will throw BucketAlreadyExistsError.\n  If bucket not exists, will create a new bucket and set it's ACL.\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n  If change exists bucket region, will throw BucketAlreadyExistsError.\n  If region value invalid, will throw InvalidLocationConstraintError.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the bucket name on `bucket` properties.\n\n- bucket {String} bucket name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Create a bucket name `helloworld` location on HongKong\n\n```js\nyield store.putBucket('helloworld', 'oss-cn-hongkong');\n// use it by default\nstore.useBucket('helloworld', 'oss-cn-hongkong');\n```\n\n### .deleteBucket*(name, region[, options])\n\nDelete an empty bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket is not empty, will throw BucketNotEmptyError.\n  If bucket is not exists, will throw NoSuchBucketError.\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete the exists 'helloworld' bucket on 'oss-cn-hongkong'\n\n```js\nyield store.deleteBucket('helloworld', {\n  region: 'oss-cn-hongkong'\n});\n```\n\n### .useBucket(name, region)\n\nUse the bucket.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.useBucket('helloworld', 'oss-cn-hongkong');\n```\n\n---\n\n### .putBucketACL*(name, region, acl[, options])\n\nUpdate the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- acl {String} access control list, current available: `public-read-write`, `public-read` and `private`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set bucket `helloworld` to `public-read-write`\n\n```js\nyield store.putBucketACL('helloworld', 'oss-cn-hongkong', 'public-read-write');\n```\n\n### .getBucketACL*(name, region[, options])\n\nGet the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld`\n\n```js\nvar result = yield store.getBucketACL('helloworld', 'oss-cn-hongkong');\nconsole.log(result.acl);\n```\n\n---\n\n### .putBucketLogging*(name, region, prefix[, options])\n\nUpdate the bucket logging settings.\nLog file will create every one hour and name format: `<prefix><bucket>-YYYY-mm-DD-HH-MM-SS-UniqueString`.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [prefix] {String} prefix path name to store the log files\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Enable bucket `helloworld` logging and save with prefix `logs/`\n\n```js\nyield store.putBucketLogging('helloworld', 'oss-cn-hongkong', 'logs/');\n```\n\n### .getBucketLogging*(name, region[, options])\n\nGet the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- enable {Boolean} enable logging or not\n- prefix {String} prefix path name to store the log files, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld` logging settings\n\n```js\nvar result = yield store.getBucketLogging('helloworld', 'oss-cn-hongkong');\nconsole.log(result.enable, result.prefix);\n```\n\n### .deleteBucketLogging(name, region[, options])\n\nDelete the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketWebsite*(name, region, config[, options])\n\nSet the bucket as a static website.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- config {Object} website config, contains blow properties:\n  - index {String} default page, e.g.: `index.html`\n  - [error] {String} error page, e.g.: 'error.html'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketWebsite('hello', 'oss-cn-hangzhou', {\n  index: 'index.html'\n});\n```\n\n### .getBucketWebsite*(name, region[, options])\n\nGet the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- index {String} index page\n- error {String} error page, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketWebsite*(name, region[, options])\n\nDelete the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketReferer*(name, region, allowEmpty, referers[, options])\n\nSet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list, e.g.:\n  ```js\n  [\n    'https://npm.taobao.org',\n    'http://cnpmjs.org'\n  ]\n  ```\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketReferer('hello', 'oss-cn-hangzhou', false, [\n  'https://npm.taobao.org',\n  'http://cnpmjs.org'\n]);\n```\n\n### .getBucketReferer*(name, region[, options])\n\nGet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketReferer*(name, region[, options])\n\nDelete the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketLifecycle*(name, region, rules[, options])\n\nSet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- rules {Array<Rule>} rule config list, each `Rule` will contains blow properties:\n  - [id] {String} rule id, if not set, OSS will auto create it with random string.\n  - prefix {String} store prefix\n  - status {String} rule status, allow values: `Enabled` or `Disabled`\n  - [days] {Number|String} expire after the `days`\n  - [date] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `date` and `days` only set one.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketLifecycle('hello', 'oss-cn-hangzhou', [\n  {\n    id: 'delete after one day',\n    prefix: 'logs/',\n    status: 'Enabled',\n    days: 1\n  },\n  {\n    prefix: 'logs2/',\n    status: 'Disabled',\n    date: '2022-10-11T00:00:00.000Z'\n  }\n]);\n```\n\n### .getBucketLifecycle*(name, region[, options])\n\nGet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the lifecycle rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketLifecycle*(name, region[, options])\n\nDelete the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketCORS*(name, region, rules[, options])\n\nSet CORS rules of the bucket object\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- rules {Array<Rule>} rule config list, each `Rule` will contains below properties:\n  - allowedOrigin {String/Array} configure for Access-Control-Allow-Origin header\n  - allowedMethod {String/Array} configure for Access-Control-Allow-Methods header\n  - [allowedHeader] {String/Array} configure for Access-Control-Allow-Headers header\n  - [exposeHeader] {String/Array} configure for Access-Control-Expose-Headers header\n  - [maxAgeSeconds] {String} configure for Access-Control-Max-Age header\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nyield store.putBucketCORS('hello', 'oss-cn-hangzhou', [\n  {\n    allowedOrigin: '*',\n    allowedMethod: [\n      'GET',\n      'HEAD',\n    ],\n  }\n]);\n```\n\n### .getBucketCORS*(name, region[, options])\n\nGet CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the CORS rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketCORS*(name, region[, options])\n\nDelete CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- region {String} the bucket data region location, please see [Data Regions](#data-regions),\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n## Object Operations\n\nAll operations function is [generator], except `signatureUrl`.\n\ngenerator function format: `functionName*(...)`.\n\n### .put*(name, file[, options])\n\nAdd an object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- data {Object} callback server response data, sdk use JSON.parse() return\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through local file path\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.put('ossdemo/demo.txt', filepath);\nconsole.log(object);\n\n{\n  name: 'ossdemo/demo.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829244'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through content buffer\n\n```js\nvar object = yield store.put('ossdemo/buffer', new Buffer('foo content'));\nconsole.log(object);\n\n{\n  name: 'ossdemo/buffer',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/buffer',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"xxx\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829243'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through readstream\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.put('ossdemo/readstream.txt', fs.createReadStream(filepath));\nconsole.log(object);\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .putStream*(name, stream[, options])\n\nAdd a stream object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- stream {ReadStream} object ReadStream content instance\n- [options] {Object} optional parameters\n  - [contentLength] {Number} the stream length, `chunked encoding` will be used if absent\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through readstream\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nvar object = yield store.put('ossdemo/readstream.txt', fs.createReadStream(filepath));\nconsole.log(object);\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .append*(name, file[, options])\n\nAppend an object to the bucket, it's almost same as put, but it can add content to existing object rather than override it.\n\nAll parameters are same as put except for options.position\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [position] {String} specify the position which is the content length of the latest object\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nobject:\n\n- name {String} object name\n- url {String} the url of oss\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- nextAppendPosition {String} the next position\n\nexample:\n\n```js\nvar object = yield store.apend('ossdemo/buffer', new Buffer('foo'));\n\n// append content to the existing object\nobject = yield store.apend('ossdemo/buffer', new Buffer('bar'), {\n  position: object.nextAppendPosition,\n});\n```\n\n### .getObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `endpoint`.\n\ne.g.:\n\n```js\nconst cdnUrl = client.getObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .head*(name[, options])\n\nHead an object and get the meta info.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status, maybe 200 or 304\n- meta {Object} object user meta, if not set on `put()`, will return null.\n    If return status 304, meta will be null too\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Head an exists object and get user meta\n\n```js\nyield this.store.put('ossdemo/head-meta', new Buffer('foo'), {\n  meta: {\n    uid: 1,\n    path: 'foo/demo.txt'\n  }\n});\nvar object = this.store.head('ossdemo/head-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  meta: {\n    uid: '1',\n    path: 'foo/demo.txt'\n  },\n  res: { ... }\n}\n```\n\n- Head a not exists object\n\n```js\nvar object = this.store.head('ossdemo/head-meta');\n// will throw NoSuchKeyError\n```\n\n### .get*(name[, file, options])\n\nGet an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the content\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Range' get specifying range bytes content, e.g.: `Range: bytes=0-9`\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object and store it to the local file\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nyield store.get('ossdemo/demo.txt', filepath);\n```\n\n_ Store object to a writestream\n\n```js\nyield store.get('ossdemo/demo.txt', somestream);\n```\n\n- Get an object content buffer\n\n```js\nvar result = yield store.get('ossdemo/demo.txt');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a processed image and store it to the local file\n\n```js\nvar filepath = '/home/ossdemo/demo.png';\nyield store.get('ossdemo/demo.png', filepath, {process: 'image/resize,w_200'});\n```\n\n- Get a not exists object\n\n```js\nvar filepath = '/home/ossdemo/demo.txt';\nyield store.get('ossdemo/not-exists-demo.txt', filepath);\n// will throw NoSuchKeyError\n```\n\n### .getStream*(name[, options])\n\nGet an object read stream.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object stream\n\n```js\nvar result = yield store.getStream('ossdemo/demo.txt');\nresult.stream.pipe(fs.createWriteStream('some file.txt'));\n```\n\n### .delete*(name[, options])\n\nDelete an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf delete object not exists, will also delete success.\n\nexample:\n\n- Delete an exists object\n\n```js\nyield store.delete('ossdemo/someobject');\n```\n\n- Delete a not exists object\n\n```js\nyield store.delete('ossdemo/some-not-exists-object');\n```\n\n### .copy*(name, sourceName[, options])\n\nCopy an object from `sourceName` to `name`.\n\nparameters:\n\n- name {String} object name store on OSS\n- sourceName {String} source object name\n  If `sourceName` start with `/`, meaning it's a full name contains the bucket name.\n  e.g.: `/otherbucket/logo.png` meaning copy `otherbucket` logn.png object to current bucket.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n    If the `meta` set, will override the source object meta.\n  - [headers] {Object} extra headers\n    - 'If-Match' do copy if source object etag equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' do copy if source object etag not equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-Modified-Since' do copy if source object modified after this time,\n        otherwise throw PreconditionFailedError\n    - 'If-Unmodified-Since' do copy if source object modified before this time,\n        otherwise throw PreconditionFailedError\n\nSuccess will return the copy result in `data` property.\n\nobject:\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT string\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf source object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Copy same bucket object\n\n```js\nvar result = yield store.copy('newName', 'oldName');\n```\n\n- Copy other bucket object\n\n```js\nvar result = yield store.copy('logo.png', '/other-bucket/logo.png');\n```\n\n### .putMeta*(name, meta[, options])\n\nSet an exists object meta.\n\nparameters:\n\n- name {String} object name store on OSS\n- meta {Object} user meta, will send with `x-oss-meta-` prefix string\n  e.g.: `{ uid: 123, pid: 110 }`\n  If `meta: null`, will clean up the exists meta\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the copy result in `data` property.\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Update exists object meta\n\n```js\nvar result = yield store.putMeta('ossdemo.txt', {\n  uid: 1, pid: 'p123'\n});\nconsole.log(result);\n```\n\n- Clean up object meta\n\n```js\nyield store.putMeta('ossdemo.txt', null);\n```\n\n### .deleteMulti*(names[, options])\n\nDelete multi objects in one request.\n\nparameters:\n\n- names {Array<String>} object names, max 1000 objects in once.\n- [options] {Object} optional parameters\n  - [quiet] {Boolean} quiet mode or verbose mode, default is `false`, verbose mode\n    quiet mode: if all objects delete succes, return emtpy response.\n      otherwise return delete error object results.\n    verbose mode: return all object delete results.\n  - [timeout] {Number} the operation timeout\n\nSuccess will return delete success objects in `deleted` property.\n\n- [deleted] {Array<String>} deleted object names list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete multi objects in quiet mode\n\n```js\nvar result = yield store.deleteMulti(['obj1', 'obj2', 'obj3'], {\n  quiet: true\n});\n```\n\n- Delete multi objects in verbose mode\n\n```js\nvar result = yield store.deleteMulti(['obj1', 'obj2', 'obj3']);\n```\n\n### .list*(query[, options])\n\nList objects in the bucket.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 objects\n\n```js\nvar result = yield store.list();\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nvar result = yield store.list({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nvar result = yield store.list({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n### .signatureUrl(name[, options])\n\nCreate a signature url for download or upload object.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [method] {String} the HTTP method, default is 'GET'\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [response] {Object} set the response headers for download\n    - [content-type] {String} set the response content type\n    - [content-disposition] {String} set the response content disposition\n    - [cache-control] {String} set the response cache control\n    - See more: https://help.aliyun.com/document_detail/oss/api-reference/object/GetObject.html\n\nSuccess will return signature url.\n\nexample:\n\n- Get signature url for object\n\n```js\nvar url = store.signatureUrl('ossdemo.txt');\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT'\n});\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  response: {\n    'content-type': 'text/custom',\n    'content-disposition': 'attachment'\n  }\n});\nconsole.log(url);\n```\n\n- Get a signature url for a processed image\n\n```js\nvar url = store.signatureUrl('ossdemo.png', {\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n\nvar url = store.signatureUrl('ossdemo.png', {\n  expires: 3600,\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n```\n\n### .putACL*(name, acl[, options])\n\nSet object's ACL.\n\nparameters:\n\n- name {String} object name\n- acl {String} acl (private/public-read/public-read-write)\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set an object's ACL\n\n```js\nyield store.putACL('ossdemo.txt', 'public-read');\n```\n\n### .getACL*(name[, options])\n\nGet object's ACL.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get an object's ACL\n\n```js\nvar result = yield store.getACL('ossdemo.txt');\nconsole.log(result.acl);\n```\n\n### .initMultipartUpload(name[, options])\nBefore transmitting data in the Multipart Upload mode,\nyou must call the Initiate Multipart Upload interface to notify the OSS to initiate a Multipart Upload event.\nThe Initiate Multipart Upload interface returns a globally unique Upload ID created by the OSS server to identify this Multipart Upload event.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] Mime file type e.g.: application/octet-stream\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - [x-oss-server-side-encryption]\n    Specify the server-side encryption algorithm used to upload each part of this object,Type: string, Valid value: AES256 `x-oss-server-side-encryption: AES256`<br>\n    if use in browser you should be set cors expose header x-oss-server-side-encryption\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-server-side-encryption] if set request header x-oss-server-side-encryption, will return\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- uploadId {String} upload id, use for uploadPart, completeMultipart\n\nexample:\n\n```js\n  var result = yield store.initMultipartUpload('object');\n  console.log(result);\n```\n\n### .uploadPart(name, uploadId, partNo, file, start, end[, options])\nAfter initiating a Multipart Upload event, you can upload data in parts based on the specified object name and Upload ID.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- file {File|String}  is File or FileName, the whole file<br>\n Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB. <br>\n In Node you can use File or FileName, but in browser you only can use File.\n- start {Number} part start bytes  e.g: 102400\n- end {Number} part end bytes  e.g: 204800\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  var name = 'object';\n  var result = yield store.initMultipartUpload(name);\n  var uploadId = result.uploadId;\n  var file; //the data you want to upload, is a File or FileName(only in node)\n  //if file part is 10\n  var partSize = 100 * 1024;\n  var fileSize = 10 * partSize;//you need to calculate\n  var dones = [];\n  for (var i = 1; i <= 10; i++) {\n    var start = partSize * (i -1);\n    var end = Math.min(start + partSize, fileSize);\n    var part = yield store.uploadPart(name, uploadId, i, file, start, end);\n    dones.push({\n      number: i,\n      etag: part.etag\n    });\n    console.log(part);\n  }\n\n  //end need to call completeMultipartUpload api\n```\n\n### .uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])\nUsing Upload Part Copy, you can copy data from an existing object and upload a part of the data.\nWhen copying a file larger than 1 GB, you must use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- range {String} Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB, range value like `0-102400`\n- sourceData {Object}\n  - sourceKey {String} the source object name\n  - sourceBucketName {String} the source bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} The following request header is used for the source objects specified by x-oss-copy-source.\n    - [x-oss-copy-source-if-match]  default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]   default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]   default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since]   default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  var name = 'object';\n  var result = yield store.initMultipartUpload(name);\n\n  var partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (var i = 1; i <= 10; i++) {\n    var start = partSize * (i -1);\n    var end = Math.min(start + partSize, fileSize);\n    var range = start + '-' + (end - 1);\n    var part = yield store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n### .completeMultipartUpload(name, uploadId, parts[, options])\nAfter uploading all data parts, you must call the Complete Multipart Upload API to complete Multipart Upload for the entire file.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- parts {Array} more part {Object} from uploadPartCopy, , each in the structure:\n  - number {Number} partNo\n  - etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data , sdk use JSON.parse() return\n\nexample:\n\n```js\n\n  //init multipart\n  var name = 'object';\n  var result = yield store.initMultipartUpload(name);\n\n  //upload part\n  var file; //the data you want to upload, this example size is 10 * 100 * 1024\n  var fileSize;//you need to calculate\n  var partSize = 100 * 1024;//100kb\n  var done = [];\n  //if file part is 10\n  for (var i = 1; i <= 10; i++) {\n    var start = partSize * (i -1);\n    var end = Math.min(start + partSize, fileSize);\n    var data = file.slice(start, end);\n    var part = yield store.uploadPart(name, result.uploadId, i, data);\n    console.log(part);\n    done.push({\n          number: i,\n          etag: part.res.headers.etag\n        });\n  }\n\n  //complete\n  var completeData = yield store.completeMultipartUpload(name, result.uploadId, done);\n  console.log(completeData);\n```\n\n\n### .multipartUpload*(name, file[, options])\n\nUpload file with [OSS multipart][oss-multipart].<br>\nthis function contains initMultipartUpload, uploadPartCopy, completeMultipartUpload.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} thunk or generator, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [mime] {String} custom mime , will send with `Content-Type` entity header\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n          e.g.:\n         ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n         ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data, sdk use JSON.parse() return\n\nexample:\n\n- Upload using multipart\n\n```js\nvar result = yield store.multipartUpload('object', '/tmp/file');\nconsole.log(result);\n\nvar result = yield store.multipartUpload('object', '/tmp/file', {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function* (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nvar result = yield store.multipartUpload('object', '/tmp/file', {\n  checkpoint: savedCpt,\n  progress: function* (p, cpt, res) { //progress is generator\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\n```\n\n- multipartUpload progress example\n\n```js\n//thunk\nfunction thunkProgress(p, cpt, res) {\n  return function(done) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n    done();\n  }\n}\n\nvar result1 = yield store.multipartUpload('object', '/tmp/file', {\n  progress: thunkProgress\n});\n\n//generator\nfunction* generatorProgress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nvar result2 = yield store.multipartUpload('object', '/tmp/file', {\n  progress: generatorProgress\n});\n\n```\n\n- multipartUpload with cancel\n\n>tips: cancel multipartUpload, now only support browser.\n\n```js\n\n//start upload\ntry {\n  var result = yield store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function* (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n### .multipartUploadCopy*(name, sourceData[, options])\n\nCopy file with [OSS multipart][oss-multipart]. <br>\nthis function contains head, initMultipartUpload, uploadPartCopy, completeMultipartUpload.<br>\nWhen copying a file larger than 1 GB, you should use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} is thunk or generator, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [copyheaders] {Object} only uploadPartCopy api used, detail [see](https://www.alibabacloud.com/help/doc-detail/31994.htm)\n    - [x-oss-copy-source-if-match]  only uploadPartCopy api used, default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]  only uploadPartCopy api used, default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]  only uploadPartCopy api used, default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since] only uploadPartCopy api used, default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n- Copy using multipart\n\n```js\nvar result = yield store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n});\nconsole.log(result);\n\nvar result = yield store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function* (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\nvar result = yield store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function* (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\n```\n- multipartUploadCopy with cancel\n\n```js\n\n//start upload\ntry {\n  var result = yield store.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n    checkpoint: savedCpt,\n    progress: function* (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n### .listParts*(name, uploadId[, query, options])\n\nThe ListParts command can be used to list all successfully uploaded parts mapped to a specific upload ID, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- name {String} object key\n- uploadId {String} upload ID from initMultipartUpload api\n- [query] {Object} query parameters\n  - [max-parts] {Number} The maximum part number in the response of the OSS. default value: 1000.\n  - [part-number-marker] {Number} Starting position of a specific list. A part is listed only when the part number is greater than the value of this parameter.\n  - [encoding-type] {String} Specify the encoding of the returned content and the encoding type. Optional value: url\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- uploadId {String} upload ID\n- bucket {String} Specify the bucket name.\n- name {String} object name\n- PartNumberMarker {Number} Starting position of the part numbers in the listing result.\n- nextPartNumberMarker {Number} If not all results are returned this time, the response request includes the NextPartNumberMarker element to indicate the value of PartNumberMarker in the next request.\n- maxParts {Number} upload ID\n- isTruncated {Boolean} Whether the returned result list for List Parts is truncated. The “true” indicates that not all results are returned; “false” indicates that all results are returned.\n- parts {Array} The container that saves part information, each in the structure:\n  - PartNumber {Number} Part number.\n  - LastModified {Date} Time when a part is uploaded.\n  - ETag {String} ETag value in the content of the uploaded part.\n  - Size {Number} Size of the uploaded part.\n\nexample:\n\n- List uploaded part\n\n```js\n\nvar result = yield store.listParts('objcet', 'uploadId', {\n  'max-parts': 1000\n});\nconsole.log(result);\n```\n\n### .listUploads*(query[, options])\n\nList on-going multipart uploads, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- query {Object} query parameters\n  - [prefix] {String} the object key prefix\n  - [max-uploads] {Number} the max uploads to return\n  - [key-marker] {String} the object key marker, if `upload-id-marker`\n    is not provided, return uploads with `key > marker`, otherwise\n    return uploads with `key >= marker && uploadId > id-marker`\n  - [upload-id-marker] {String} the upload id marker, must be used\n    **WITH** `key-marker`\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- List on-going multipart uploads\n\n```js\n\nvar result = yield store.listUploads({\n  'max-uploads': 100,\n  'key-marker': 'my-object',\n  'upload-id-marker': 'upload-id'\n});\nconsole.log(result);\n```\n\n### .abortMultipartUpload*(name, uploadId[, options])\n\nAbort a multipart upload for object.\n\nparameters:\n\n- name {String} the object name\n- uploadId {String} the upload id\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- Abort a multipart upload\n\n```js\nvar result = yield store.abortMultipartUpload('object', 'upload-id');\nconsole.log(result);\n```\n\n## RTMP Operations\n\nAll operations function is [generator], except `getRtmpUrl`.\n\ngenerator function format: `functionName*(...)`.\n\n### .putChannel*(id, conf[, options])\n\nCreate a live channel.\n\nparameters:\n\n- id {String} the channel id\n- conf {Object} the channel config\n  - [Description] {String} the channel description\n  - [Status] {String} the channel status: 'enabled' or 'disabled'\n  - [Target] {Object}\n    - [Type] {String} the data type for the channel, only 'HLS' is supported now\n    - [FragDuration] {Number} duration of a 'ts' segment\n    - [FragCount] {Number} the number of 'ts' segments in a 'm3u8'\n    - [PlaylistName] {String} the 'm3u8' name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- publishUrls {Array} the publish urls\n- playUrls {Array} the play urls\n- res {Object} response info\n\nexample:\n\n- Create a live channel\n\n```js\nvar cid = 'my-channel';\nvar conf = {\n  Description: 'this is channel 1',\n  Status: 'enabled',\n  Target: {\n    Type: 'HLS',\n    FragDuration: '10',\n    FragCount: '5',\n    PlaylistName: 'playlist.m3u8'\n  }\n};\n\nvar r = yield this.store.putChannel(cid, conf);\nconsole.log(r);\n```\n\n### .getChannel*(id[, options])\n\nGet live channel info.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- data {Object} channel info, same as conf in [.putChannel](#putchannelid-conf-options)\n- res {Object} response info\n\nexample:\n\n- Get live channel info\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.getChannel(cid);\nconsole.log(r);\n```\n\n### .deleteChannel*(id[, options])\n\nDelete a live channel.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response infomation.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Delete a live channel\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.deleteChannel(cid);\nconsole.log(r);\n```\n\n### .putChannelStatus*(id, status[, options])\n\nChange the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- status {String} the status: 'enabled' or 'disabled'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Disable a live channel\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.putChannelStatus(cid, 'disabled');\nconsole.log(r);\n```\n\n### .getChannelStatus*(id[, options])\n\nGet the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel status information.\n\nobject:\n\n- data {Object}\n  - Status {String} the channel status: 'Live' or 'Idle'\n  - [ConnectedTime] {String} the connected time of rtmp pushing\n  - [RemoteAddr] {String} the remote addr of rtmp pushing\n  - [Video] {Object} the video parameters (Width/Height/FrameRate/Bandwidth/Codec)\n  - [Audio] {Object} the audio parameters (Bandwidth/SampleRate/Codec)\n- res {Object} response info\n\nexample:\n\n- Get a live channel status\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.getChannelStatus(cid);\nconsole.log(r);\n\n// { Status: 'Live',\n//   ConnectedTime: '2016-04-12T11:51:03.000Z',\n//   RemoteAddr: '42.120.74.98:53931',\n//   Video:\n//   { Width: '672',\n//     Height: '378',\n//     FrameRate: '29',\n//     Bandwidth: '60951',\n//     Codec: 'H264' },\n//   Audio: { Bandwidth: '5959', SampleRate: '22050', Codec: 'AAC' }\n// }\n```\n\n### .listChannels*(query[, options])\n\nList channels.\n\nparameters:\n\n- query {Object} parameters for list\n  - prefix {String}: the channel id prefix (returns channels with this prefix)\n  - marker {String}: the channle id marker (returns channels after this id)\n  - max-keys {Number}: max number of channels to return\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel list.\n\nobject:\n\n- channels {Array} the channels, each in the structure:\n  - Name {String} the channel id\n  - Description {String} the channel description\n  - Status {String} the channel status\n  - LastModified {String} the last modification time of the channel\n  - PublishUrls {Array} the publish urls for the channel\n  - PlayUrls {Array} the play urls for the channel\n- nextMarker: result.data.NextMarker || null,\n- isTruncated: result.data.IsTruncated === 'true'\n- res {Object} response info\n\nexample:\n\n- List live channels\n\n```js\nvar r = yield this.store.listChannels({\n  prefix: 'my-channel',\n  'max-keys': 3\n});\nconsole.log(r);\n```\n\n### .getChannelHistory*(id[, options])\n\nGet the live channel history.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the history information.\n\nobject:\n\n- records {Object} the pushing records, each in the structure:\n  - StartTime {String} the start time\n  - EndTime {String} the end time\n  - RemoteAddr {String} the remote addr\n- res {Object} response info\n\nexample:\n\n- Get the live channel history\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.getChannelHistory(cid);\nconsole.log(r);\n```\n\n### .createVod*(id, name, time[, options])\n\nCreate a VOD playlist for the channel.\n\nparameters:\n\n- id {String} the channel id\n- name {String} the playlist name\n- time {Object} the duration time\n  - startTime {Number} the start time in epoch seconds\n  - endTime {Number} the end time in epoch seconds\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Create a vod playlist of a live channel\n\n```js\nvar cid = 'my-channel';\n\nvar r = yield this.store.createVod(cid, 're-play', {\n  startTime: 1460464870,\n  endTime: 1460465877\n});\nconsole.log(r);\n```\n\n### .getRtmpUrl(channelId[, options])\n\nGet signatured rtmp url for publishing.\n\nparameters:\n\n- channelId {String} the channel id\n- [options] {Object} optional parameters\n  - [expires] {Number} the expire time in seconds of the url\n  - [params] {Object} the additional paramters for url, e.g.: {playlistName: 'play.m3u8'}\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the rtmp url.\n\nexample:\n\n- Get a rtmp url.\n\n```js\nvar cid = 'my-channel';\n\nvar url = this.store.getRtmpUrl(this.cid, {\n  params: {\n    playlistName: 'play.m3u8'\n  },\n  expires: 3600\n});\nconsole.log(url);\n// rtmp://ossliveshow.oss-cn-hangzhou.aliyuncs.com/live/tl-channel?OSSAccessKeyId=T0cqQWBk2ThfRS6m&Expires=1460466188&Signature=%2BnzTtpyxUWDuQn924jdS6b51vT8%3D\n```\n\n## Create A Image Service Instance\n\nEach Image Service instance required `accessKeyId`, `accessKeySecret`, `bucket` and `imageHost`.\n\n### oss.ImageClient(options)\n\nCreate a Image service instance.\n\noptions:\n- imageHost {String} your image service domain that binding to a OSS bucket\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- bucket {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nvar oss = require('ali-oss');\n\nvar imgClient = oss.ImageClient({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'my_image_bucket'\n  imageHost: 'thumbnail.myimageservice.com'\n});\n```\n\n## Image Operations\n\nAll operations function is [generator], except `imgClient.signatureUrl`.\n\ngenerator function format: `functionName*(...)`.\n\n### imgClient.get*(name, file[, options])\n\nGet an image from the image channel.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the image\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image with a style and store it to the local file\n\n```js\nvar imagepath = '/home/ossdemo/demo.jpg';\nyield imgClient.get('ossdemo/demo.jpg@200w_200h', filepath);\n```\n\n_ Store image to a writestream\n\n```js\nyield imgClient.get('ossdemo/demo.jpg@200w_200h', somestream);\n```\n\n- Get an image content buffer\n\n```js\nvar result = yield imgClient.get('ossdemo/demo.jpg@200w_200h');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a not exists object or a not image object\n\n```js\nvar imagepath = '/home/ossdemo/demo.jpg';\nyield imgClient.get('ossdemo/not-exists-demo.jpg@200w_200h', filepath);\n// will throw NoSuchKeyError\n```\n\n### imgClient.getStream*(name[, options])\n\nGet an image read stream.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image object stream\n\n```js\nvar result = yield imgClient.getStream('ossdemo/demo.jpg@200w_200h');\nresult.stream.pipe(fs.createWriteStream('some demo.jpg'));\n```\n\n### imgClient.getExif*(name[, options])\n\nGet a image exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nIf object don't have exif, will throw 400 BadRequest.\n\nexample:\n\n```js\nvar result = yield imgClient.getExif('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n### imgClient.getInfo*(name[, options])\n\nGet a image info and exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nexample:\n\n```js\nvar result = yield imgClient.getInfo('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     Format: \"jpg\",\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n\n### imgClient.putStyle*(name, style[, options])\n// TODO\n\n### imgClient.getStyle*(name[, options])\n\nGet a style by name from the image channel.\n\nparameters:\n- name {String} image style name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} styles object\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nvar result = yield imgClient.getStyle('400');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"234\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:58:20 GMT\"\n//     },\n//     size: 234,\n//     aborted: false,\n//     rt: 398,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }\n// }\n```\n\n### imgClient.listStyle*([options])\n\nGet all styles from the image channel.\n\nparameters:\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Array} styles array, a style object:\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nvar result = yield imgClient.listStyle();\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"913\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:47:32 GMT\"\n//     },\n//     size: 913,\n//     aborted: false,\n//     rt: 1911,\n//     keepAliveSocket: false\n//   },\n//   data: [{\n//     Name: \"200-200\",\n//     Content: \"0e_200w_200h_0c_0i_0o_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:28:08 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:28:08 GMT\"\n//   }, {\n//     Name: \"800\",\n//     Content: \"800w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:29:15 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:29:15 GMT\"\n//   }, {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }, {\n//     Name: \"600\",\n//     Content: \"600w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:35:02 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:35:02 GMT\"\n//   }]\n// }\n```\n\n### imgClient.deleteStyle*(name[, options])\n// TODO\n\n### imgClient.signatureUrl(name)\n\nCreate a signature url for directly download.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return full signature url.\n\nexample:\n\n```js\nvar url = imgClient.signatureUrl('\n');\n// http://thumbnail.myimageservice.com/demo.jpg@200w_200h?OSSAccessKeyId=uZxyLARzYZtGwHKY&Expires=1427803849&Signature=JSPRe06%2FjQpQSj5zlx2ld1V%2B35I%3D\n```\n\n## Cluster Mode\n\nCluster mode now only support object operations.\n\n```js\nvar Cluster = require('ali-oss').ClusterClient;\n\nvar client = Cluster({\n  cluster: [{\n    host: 'host1',\n    accessKeyId: 'id1',\n    accessKeySecret: 'secret1'\n  }, {\n    host: 'host2',\n    accessKeyId: 'id2',\n    accessKeySecret: 'secret2'\n  }],\n  schedule: 'masterSlave', // default is `roundRobin`\n});\n\n// listen error event to logging error\nclient.on('error', function(err) {\n  console.error(err.stack);\n});\n\n// client init ready\nclient.ready(function() {\n  console.log('cluster client init ready, go ahead!');\n});\n```\n\n### Get Methods\n\nWill choose an alive client by schedule(`masterSlave` or `roundRobin`).\n\n- `client.get()`\n- `client.head()`\n- `client.getStream()`\n- `client.list()`\n- `client.signatureUrl()`\n- `client.chooseAvailable()` - choose an available client by schedule.\n- `client.getACL()`\n\n### Put Methods\n\nWill put to all clients.\n\n- `client.put()`\n- `client.putStream()`\n- `client.delete()`\n- `client.deleteMulti()`\n- `client.copy()`\n- `client.putMeta()`\n- `client.putACL()`\n\n## Wrapper Usage\n\nWe provide an async wrapper which can be used without `co`. All the\nmethods are preserved, just in a async way:\n\n```js\n\nvar OSS = require('ali-oss').Wrapper;\nvar STS = OSS.STS;\n\nvar client = new OSS({ /* same options */});\n\nclient.put('hello', new Buffer('world')).then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n\nclient.get('hello').then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n\nvar url = client.signatureUrl('hello');\nconsole.log(url);\n\nvar stsClient = new STS({ /* same options */});\n\nvar role = 'role';\n\nstsClient.assumeRole(role).then(function (val) {\n  console.log('result: %j', val);\n}).catch (function (err) {\n  console.log('error: %j', err);\n});\n```\n\n## Browser Usage\n\nYou can use most of the functionalities of `ali-oss` in browser with\nsome exceptions:\n\n- put object with streaming: no chunked encoding, we use multipart\n  upload instead\n- get object to local file: we cannot manipulate file system in\n  browser, we provide signed object url for downloading needs\n- bucket operations(listBuckets, putBucketLogging, etc) will fail: OSS\n  server currently do not support CORS requests for bucket operations\n  (will probably be fixed later)\n\n### Compatibility\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n\n### Setup\n\n#### Bucket setup\n\nAs browser-side javascript involves CORS operations. You need to setup\nyour bucket CORS rules to allow CORS operations:\n\n- set allowed origins to '\\*'\n- allowed methods to 'PUT, GET, POST, DELETE, HEAD'\n- set allowed headers to '\\*'\n- expose 'ETag' in expose headers\n\n#### STS setup\n\nAs we don't want to expose the accessKeyId/accessKeySecret in the\nbrowser, a [common practice][oss-sts] is to use STS to grant temporary\naccess.\n\n### Basic usage\n\nInclude the sdk lib in the `<script>` tag and you have `OSS` available\nfor creating client. We use `OSS.Wrapper` here to avoid using `co`:\n\n```html\n<script src=\"http://gosspublic.alicdn.com/aliyun-oss-sdk.min.js\"></script>\n<script type=\"text/javascript\">\n  var client = new OSS.Wrapper({\n    region: 'oss-cn-hangzhou',\n    accessKeyId: '<access-key-id>',\n    accessKeySecret: '<access-key-secret>',\n    bucket: '<bucket-name>'\n  });\n\n  client.list().then(function (result) {\n    console.log('objects: %j', result.objects);\n    return client.put('my-obj', new OSS.Buffer('hello world'));\n  }).then(function (result) {\n    console.log('put result: %j', result);\n    return client.get('my-obj');\n  }).then(function (result) {\n    console.log('get result: %j', result.content.toString());\n  });\n</script>\n```\nThe full sample can be found [here][browser-sample].\n\n### How to build\n\n```bash\nnpm run build-dist\n```\n\nAnd see the build artifacts under `dist/`.\n\n## Known Errors\n\nEach error return by OSS server will contains these properties:\n\n- name {String} error name\n- message {String} error message\n- requestId {String} uuid for this request, if you meet some unhandled problem,\n    you can send this request id to OSS engineer to find out what's happend.\n- hostId {String} OSS cluster name for this request\n\nname | status | message | message in Chinese\n---  | ---    | ---     | ---\nAccessDeniedError | 403 | Access Denied | 拒绝访问\nBucketAlreadyExistsError | 409 | Bucket already exists | Bucket 已经存在\nBucketNotEmptyError | 409 | Bucket is not empty | Bucket 不为空\nEntityTooLargeError | 400 | Entity too large | 实体过大\nEntityTooSmallError | 400 | Entity too small | 实体过小\nFileGroupTooLargeError | 400 | File group too large | 文件组过大\nInvalidLinkNameError | 400 | Link name can't be the same as the object name | Object Link 与指向的 Object 同名\nLinkPartNotExistError | 400 | Can't link to not exists object | Object Link 中指向的 Object 不存在\nObjectLinkTooLargeError | 400 | Too many links to this object | Object Link 中 Object 个数过多\nFieldItemTooLongError | 400 | Post form fields items too large | Post 请求中表单域过大\nFilePartInterityError | 400 | File part has changed | 文件 Part 已改变\nFilePartNotExistError | 400 | File part not exists | 文件 Part 不存在\nFilePartStaleError | 400 | File part stale | 文件 Part 过时\nIncorrectNumberOfFilesInPOSTRequestError | 400 | Post request contains invalid number of files | Post 请求中文件个数非法\nInvalidArgumentError | 400 | Invalid format argument | 参数格式错误\nInvalidAccessKeyIdError | 400 | Access key id not exists | Access Key ID 不存在\nInvalidBucketNameError | 400 | Invalid bucket name | 无效的 Bucket 名字\nInvalidDigestError | 400 | Invalid digest | 无效的摘要\nInvalidEncryptionAlgorithmError | 400 | Invalid encryption algorithm | 指定的熵编码加密算法错误\nInvalidObjectNameError | 400 | Invalid object name | 无效的 Object 名字\nInvalidPartError | 400 | Invalid part | 无效的 Part\nInvalidPartOrderError | 400 | Invalid part order | 无效的 part 顺序\nInvalidPolicyDocumentError | 400 | Invalid policy document | 无效的 Policy 文档\nInvalidTargetBucketForLoggingError | 400 | Invalid bucket on logging operation | Logging 操作中有无效的目标 bucket\nInternalError | 500 | OSS server internal error | OSS 内部发生错误\nMalformedXMLError | 400 | Malformed XML format | XML 格式非法\nMalformedPOSTRequestError | 400 | Invalid post body format | Post 请求的 body 格式非法\nMaxPOSTPreDataLengthExceededError | 400 | Post extra data too large | Post 请求上传文件内容之外的 body 过大\nMethodNotAllowedError | 405 | Not allowed method | 不支持的方法\nMissingArgumentError | 411 | Missing argument | 缺少参数\nMissingContentLengthError | 411 | Missing `Content-Length` header | 缺少内容长度\nNoSuchBucketError | 404 | Bucket not exists | Bucket 不存在\nNoSuchKeyError | 404 | Object not exists | 文件不存在\nNoSuchUploadError | 404 | Multipart upload id not exists | Multipart Upload ID 不存在\nNotImplementedError | 501 | Not implemented | 无法处理的方法\nPreconditionFailedError | 412 | Pre condition failed | 预处理错误\nRequestTimeTooSkewedError | 403 | Request time exceeds 15 minutes to server time | 发起请求的时间和服务器时间超出 15 分钟\nRequestTimeoutError | 400 | Request timeout | 请求超时\nRequestIsNotMultiPartContentError | 400 | Invalid post content-type | Post 请求 content-type 非法\nSignatureDoesNotMatchError | 403 | Invalid signature | 签名错误\nTooManyBucketsError | 400 | Too many buckets on this user | 用户的 Bucket 数目超过限制\nRequestError | -1 | network error | 网络出现中断或异常\nConnectionTimeout | -2 | request connect timeout | 请求连接超时\nSecurityTokenExpired | 403 | sts Security Token Expired | sts Security Token 超时失效\n\n[generator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n[oss-sts]: https://help.aliyun.com/document_detail/oss/practice/ram_guide.html\n[browser-sample]: https://github.com/rockuw/oss-in-browser\n[oss-multipart]: https://help.aliyun.com/document_detail/oss/api-reference/multipart-upload/InitiateMultipartUpload.html\n[disabled-browser-headers]: https://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n",
      "readmeFilename": "README.md",
      "gitHead": "a80a63f32b2a0b0604ec39f262c7a9f5ce7d903b",
      "_id": "ali-oss@4.16.0",
      "_npmVersion": "6.5.0",
      "_nodeVersion": "12.1.0",
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "dist": {
        "integrity": "sha512-gIl5aewzHOKWIz7bC8faRq2vvE8X50TfHiLiyZs9drIEAtcYWrF7sWcnZK61p+Okk+K8E02V9dflyhhWf6aDeg==",
        "shasum": "b3f9350911d3260f2dbedf7d5ef5cb84a9706043",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-4.16.0.tgz",
        "fileCount": 31,
        "unpackedSize": 321044,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc2s5hCRA9TVsSAnZWagAAXJEQAJpu/kOMmMYLxkQu5ekZ\ngpPlwu5MUsHMXLUXgzpo3DEiS06mH+nhyR0vSn9EtyVSQcn0RpewN2LgiHyg\nQLD84UwzM8HHF/0SK+KN/ikwY5Ye0IZgoaxGZFXWNQjxplqY5VL9Ad61xKGf\nwtwCmm1ZOkBoF5p1qDY6nmPQoXWyVu/JVwdK0uKsj6O/mzvQxS444Wb895sI\n6dJoAH8Gt3nZs/CTiN5AgB8dEAgnD+zNuruuxLctR5wksSmZ3+TJS31aJcjb\nHJcfdscqqiNlpBH46zKCgdX3T1naO0+YTZnYydGLr2/8BgpVPwEP2i+QUuiT\n9n3+sr6gnXpAw03F8fZ9V3ZW8M/yk6/CApLIW7w9r5q6s/uCbOXfK81v5Dbn\n3zgHyl7KkoNEOI3rmB2a3KVJJIlAbzBk+NJOPGunrpIQTz4d84rFUEhZK7un\n9FQBWpqwsKt1wmtoaUc94j46fZSx8TN3/ym4IeNajzL/JLXINd4bpLjKo/xS\n0zmG85raEYEJE1eiot6D4sVuDocQMUzXw+bxZS13ob7HlmpxJmeq2MCnfu0k\nVPJ5F0YOMe7T5rLowcawkhCcyPhCOBS9QVZR54moWD0gmJKx5ZUGNs8u6SUt\nmUeRaaGzoSH6MYAmXlbuFp7yeyFsObnFcOVAly/Hul63asenHxxcKicRpRR5\ndJjs\r\n=pQiY\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEqLcKTvyHPuW7R/AYYEfnx4oVDyCRUzGEbVlt3tHtdTAiBPkugg6dK0F84BrsLlUt+MvNdbuq7pwXk7DhGfUvfvjg=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_4.16.0_1557843553088_0.9244460126659144"
      },
      "_hasShrinkwrap": false
    },
    "6.2.0": {
      "name": "ali-oss",
      "version": "6.2.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.1.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "snyk": "^1.231.0"
      },
      "snyk": true,
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "d14569ca54c2aebac040b57c976bc0ab6cd9841e",
      "_id": "ali-oss@6.2.0",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "8.9.2",
      "_npmUser": {
        "name": "jackycheung888",
        "email": "2378278470@qq.com"
      },
      "dist": {
        "integrity": "sha512-y9kCCbZxhWm0LY0kcZ0rjCdDlhS8OqHaG2wOAE8sBjABHOjo6jKrSpFHFiJdSjvTB5y0V98ql8SCPrAGyLoLdg==",
        "shasum": "668d0d3e1830688c903d5ea9c3e2156276a7b6b1",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.2.0.tgz",
        "fileCount": 40,
        "unpackedSize": 3582287,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdzM25CRA9TVsSAnZWagAAtV4P/0fnN5wbSMWWP1G/2cF0\nzgJK6NxiwSU5wRWh2IGmHWgFG3zKvkBG9UVYG77owpA9xHKFYhTfbRqzuPSa\nhC2WOxJxiwHTSn40khjzYO5ESuYhnlfWaPJMtDmWn98Zm5+ToYxxLj32jiIQ\nI7tQnv6eoMpXpIckDeMwMSo1kdS2XxsocwRyVb5AigPfZ2VIBZn9ecssDxzB\n3fml6YzAmznMZ/bBAYa7m0OQdR+QvhS9eIfBcUZFyA4EbeWZ1JqLalsvUmQn\nkMjkBR0JgLkeAq6mKvDcCtHRry5hMd2Pxsx0TE2Qx5KYfkLgSEgAxJYAQC32\nMgt0S9VfHUjBTimvr3WOzR8P1R/rURQVRXLEJvzVwxXGcNTsWRIDz0gxKkJm\nNw1tBW5zCF0u7QCHxaB0C1v90n3aGh8ToQPGGV5/LM/87HVse3UqQsBwZSme\n8f1iXL23w/8ArY8J9O067kUmwN3ai8Q83vkzCG3xiioiSJW3P4jtrWdcKE+e\nn6/GvegTMJn0hv7BvyU/7L10Mactc3q2SAy4E9E+gfx2llwvAAUNhKFjvnYI\nLtItzlkY/SbAx0T9aNP5TgFGRrUnYC6QkDMqxMwb0FUf5MWFVhW0ISHXAxSA\nU3KHxj/t4oLXMytgC8OI8Ge1hFl8FVztNwlm4WV9Rpd/puSz4of4O0bLA7v8\nsCUO\r\n=zBZJ\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIE4sQrPORCn/HNVv14we757DW9GCJ5HCMfiaL8h08Sk7AiAqEyachvvNtkj7JGJnbn3MYPgWN6hdqNGXAYMCJh/AVw=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.2.0_1573703096340_0.30264809210944854"
      },
      "_hasShrinkwrap": false
    },
    "6.2.1": {
      "name": "ali-oss",
      "version": "6.2.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.1.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "snyk": "^1.231.0"
      },
      "snyk": true,
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "31d4bf4117ad3718ec1cfa039db8bdd7d7d90cf0",
      "_id": "ali-oss@6.2.1",
      "_nodeVersion": "10.12.0",
      "_npmVersion": "6.13.0",
      "dist": {
        "integrity": "sha512-A1qLmK1/eqbjVIe3E2e5H2qrviARanN+ZrRt8TQRkg7flhAZj+5JcE+7KGtk2hG9GadKejMwiKKCU4NCd8Ugvw==",
        "shasum": "990af42ed31618c5cce1e403e9509784e20ab91c",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.2.1.tgz",
        "fileCount": 40,
        "unpackedSize": 3582740,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdzndjCRA9TVsSAnZWagAAcpUQAJPTuAaTDr9dctlVQ6oK\n22P87jBHvNV7o//pGuux5Rlz7NQ5uW0Jh7eU+XjEw6AaV3HFNBYuCfaFGm5g\nCzFsnYh2lfhdtvJ7l7T4vSLE+HF84ksB6LiDB7jY0L2P0txaCRUgvFmrMPAF\no0lN/ptARbMTuucYopgudBmZH8VeCFF1GtS8kAEzN2B8wa05prpLWTOmkou9\n1rI+XaHRZEP4Lqow9VvVD8J4RlannsjQ8pp98d5zg1nZKEyZwLMoNWrK7WrO\nvr6sORV9rNrGx7HE7EvwzFsld9FkovSmD6s3X6Jrr8DSRQpOE+6yILt7oeRu\ngHnfOzmlB+IozJvkhirjyD6YEKobglHnKYHgxMvbcPB/rUnth3O+vxQHmh2L\n1pE6pYNdNDgpD8AMN2XZJ79PKn5dYQKnyXdOCX66tp4dr3h2XlkQf/rujg5l\nDoF1h8TZ0DB7blGn46oixvZDDCtkB5BY8ArICxGKXCJqEUjL5uA3Ubd6BbVT\no1WHeH1LlT830qMuSTAH8gCTs+HXsHhxOnsoj2lEXLH5x+XEbd9yeesUMCLM\nwsJpD0zTjE0zfaPuXbeIDgUphD8wTp0Tz9qHmSdbEHq1/N1lGNazaVE3FkUI\na45hWStGOGCd29noqJ0Pg4NjCevN9VXTHlmi5+LNMJn4XKpntDPkXIVXNFqP\nfGUG\r\n=iRz+\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC49spCdOKnMnLAlrmyQP6jgSI+VXLqWB2rxzEwz+SvPwIhAKxGcDEG6t9BCcPmvCujmb1eEfCvci39zolIiMPECzRu"
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.2.1_1573812066658_0.3975163323664903"
      },
      "_hasShrinkwrap": false
    },
    "6.3.0": {
      "name": "ali-oss",
      "version": "6.3.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.1.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "snyk": "^1.231.0"
      },
      "snyk": true,
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "eb0cf586bd75cd65217e4d5838cdf7f498252c7d",
      "_id": "ali-oss@6.3.0",
      "_nodeVersion": "10.12.0",
      "_npmVersion": "6.13.0",
      "dist": {
        "integrity": "sha512-6ijwjcaQ7fYkekKBVWkG/0ZJOipFZBaW0vpr5b2Nuq/Ly4cW1Jog7qat8ioHmS4AlzMm4oYGwpeBvQ0XPWIsSw==",
        "shasum": "ea3db8352b59978cbed2c594cb63ce2d59a9b8b4",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.3.0.tgz",
        "fileCount": 46,
        "unpackedSize": 3589671,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd5HnaCRA9TVsSAnZWagAA8LwQAI6Ih4f13aFcJnwl7jeb\njPT/ZvOXzjSQ0sPo0nyvwwjLw22j+Tm1EAvd0k4HhDl0IzDsi+lY1mKTnOO5\nc1gGEqhzG+6vnZWSCYjgkkNhy5jX7GbK7QgrkB7uj+SIs2C9dlRUZ+iOLNFc\n6FpGF1AgvgACqAh2ojHsyMCLjQKr3f7fGaAXs51XhGOjmkKR0yakvc+YW4LK\nJNWGhCmt4qDu584Y4NUCyOcDQFMadpNCtIwZEEQecnXahxbkYIejXR+mf3hh\nI24cacsex2Q++hkFXF9Lk+R4N5rywGAku7HzoDNmFwf0Mgq1KTqOxsqz7fLw\njhG5phgn0XwLuqc/dGZ14vsG57hiptySCNYDa0s5VjY97Xgd0zD2FIOigbpV\nqhF/lFttMCbpQPYQs9IRB+Q0mc246hGo5EZF0QYRrJQXTGypktCcb5ljAywP\nwKvHm/arMHX8eq2TVieRja/w5wl91cqSRAQ1uZD9m7pzmo74NrGwVAV0DsQe\niLOSu/mivo8mYXRM+aqMNfUCzLAer+rSeD6IUS96aMF9sYNOdRgfwJT1wTZ4\nxkpFB6b20cXqDawypDy5LcOqjRb2SW4l5M/xUwBYYEj8chOydZGg5DkEPwlv\nDBGqsyMwnkz5cIZlRZqM1NGYVOiG/9JBfkzhHpcmJNiBO4AxrcyBBIHfdFiy\nKXrZ\r\n=vpli\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIBpk7QD+ay8KNhdfDIPYQImoPDpptYSqVJwZBhdJvJDPAiASldSA2N2bERrkFRx+wefquljzoYBCe2wM0pFcsaEytw=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.3.0_1575254489082_0.4638116781879802"
      },
      "_hasShrinkwrap": false
    },
    "6.3.1": {
      "name": "ali-oss",
      "version": "6.3.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^4.18.1",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.1.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16",
        "snyk": "^1.231.0"
      },
      "snyk": true,
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "48b2528404a4b789aebb47d02af575cf58c2a3de",
      "_id": "ali-oss@6.3.1",
      "_nodeVersion": "10.12.0",
      "_npmVersion": "6.13.0",
      "dist": {
        "integrity": "sha512-mvgsioXJe6FPIXAbXEzgWDHfntctix84woHdBypLMpLZIRlsBjr29HZxs7UH7sEzynUWf9k0QCs7lcx3YDZXCw==",
        "shasum": "e89749c137eecd00df6c493573d5658186a9ec71",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.3.1.tgz",
        "fileCount": 45,
        "unpackedSize": 3594157,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd5ggaCRA9TVsSAnZWagAAOy8QAISiTgtq04xmlKoZ8g6x\nH1EdjMYyMvVbj3JRbbnCLqV0vG1TvT274/ZZWvyOKrF3A0Rf4HN3l2Pc+aIT\nu5/yiPG+PyQRr0HmxFWFgweTd/lOQr/mM/LhJDD5tsC9fNH8M1kSYjUQ/Xa2\nO4ojTbNoavHMSjcSbvdabyfvSWB4KljyAj6C7CZCuEyT6XeDbybP5p4dl6Ju\nHDBbk/Aj8k2ZE3H0+3r3cdg/59F0k9J419aTzcAg7EQosJoqkw7ugPJ9QZoH\n5NnwGh82+nltykZAvpN/sjbr712PIushNJneBr+GR2TXtNBwN0N9/QyPr7ql\nTYw7kkQhENjDszS7CeAHdSEw2obVagUTdVXqvUrs0TUM+muFdKBi+IZ6K9lH\nXg1rWBEn/I/kgeHCejXzhY3rvO60uERuo+KOnzUKSVTDISlm007vCnOLJgfo\nWeEX2eSsBq2RO2Sd12bMk3gEF/liLcqt4woJiOHXhOt8SSpbv0MZsWSIv/qm\nmqwx4HJQo0P7JXj8lqwK/HOAq8XX6fUXkWBrD+EgI/sH8hQrbGUKEpN0LTWn\nnxjPSAit5EOUXcnJyvEPsn21tpW59pCN00gaFVWWEU8FusEIYfq0FcKfYSWc\n1GHFzXPlUkhXqsTtyXN1jWmH+GNJm4NYbHkLufXRvFfg1j0FmQfYrscI1HLp\nBUSt\r\n=r+q7\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIAvB+JE3Yi47WxqqYjr33FmERbRGTLezkqXPJKFg7ldgAiEA3VOcNWuwzjd3qp+lon9E3HjiajVsCG6zcf2c1wUmjE4="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.3.1_1575356441793_0.9062983100282245"
      },
      "_hasShrinkwrap": false
    },
    "6.4.0": {
      "name": "ali-oss",
      "version": "6.4.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^6.7.2",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.1.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "f63e40b3b93a0445c80a5c62a25df853f5e78bc6",
      "_id": "ali-oss@6.4.0",
      "_nodeVersion": "10.12.0",
      "_npmVersion": "6.13.0",
      "dist": {
        "integrity": "sha512-GRsrGhjdIpwISNPvWs21ggFNZlHJySw87jdlE5Uo7g+pAlmsM03k9MaFCgzu3iaiD97fnkZsuPqd2BogbJ7gKw==",
        "shasum": "1f567f22f7827f8c59dd21dd397ebc9a01d2ee24",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.4.0.tgz",
        "fileCount": 49,
        "unpackedSize": 3605556,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeBcDzCRA9TVsSAnZWagAAQv4P/1yrI/kVSL1CpsZCivCZ\nPajp2oZVbyZfoFeygyikXwfyRq9OczXc0okWh+QkMr09tYzwz4cdQiG0300G\nKttmW9L0hWfwvZEuFW8Yj63yO19rB9tt5V1mqHQ2BF8j1Im/ejNqydQ4/ZyE\nD68ERaODHEtPgYCj2GOK47eKIPyIalBBoJr4fsO4kZeO1+sMeudR+i2U/JtD\n2OK+tWB0jx9opMtARgXk578XcY98M6g+rRJp98G9QS3ka79/H7010A5ESBwy\nCWoezfIGT/c0yxrdcirosT/1cuP3GDD8snzBLycnZfS58sPsKspROR3tZDAy\nB98pc6ivl9dw6hr8wjRB1UiEBAvpir6q6HmxtR4wDI85/va0z+E5hKYng0U4\nOZHq3XiifdsiSAdOFGN2GPdkZDL+73Ri1t4CU1cZTnJ144z+hEA2JKkm4MQU\nbh6tPWtlqShWaBj5GQZTfZ0gFhbZw4+vVxN4zYjwaFlIIwljF7Ye/pQMBhD8\n06A74MoPCKl4x5bPn2ntTNZ/oqBsazY2XqKrwmqXBTtNJMJifSZyOWdJLeDQ\nWaJP4qosRkAo96izFQ9s0cy+lYpg0qOPb1q9AlVKnebjwce70GxMbKuJUZtM\n/+swiY8ErQ+Z+PI4orIQ2sOIKT0sOa5kJzcCX30LCPddWUiP+SydaVWtk8AR\nmELR\r\n=OqSW\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICEf10cZd2vy6nEOfqul0GOe17yo4sQqz4QVGEmAiJmaAiBAhD33qSwAUHxaYCAUhWyWs4+xO0xW6dZS1hLPgRdhbQ=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.4.0_1577435379027_0.5276897426382965"
      },
      "_hasShrinkwrap": false
    },
    "6.4.0-beta": {
      "name": "ali-oss",
      "version": "6.4.0-beta",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^6.7.2",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.1.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "d65634af2613fb208af10c59f3459f7139f9afa8",
      "readme": "oss-js-sdk\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage][cov-image]][cov-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/ali-oss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/ali-oss\n[travis-image]: https://img.shields.io/travis/ali-sdk/ali-oss/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ali-sdk/ali-oss.svg?branch=master\n[cov-image]: http://codecov.io/github/ali-sdk/ali-oss/coverage.svg?branch=master\n[cov-url]: http://codecov.io/github/ali-sdk/ali-oss?branch=master\n[david-image]: https://img.shields.io/david/ali-sdk/ali-oss.svg?style=flat-square\n[david-url]: https://david-dm.org/ali-sdk/ali-oss\n\naliyun OSS(Object Storage Service) js client for Node and Browser env.\n\n`NOTE`： For SDK `5.X` document, please go to [README.md](https://github.com/ali-sdk/ali-oss/blob/5.x/README.md)\n\n## Install\n\n```bash\nnpm install ali-oss --save\n```\n\n## Compatibility\n\n### Node\nNode.js >= 8.0.0 required. You can use 4.x in Node.js < 8.\n\n### Browser\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n\n`Note`:\n- For Lower browsers you can refer to [PostObject](https://help.aliyun.com/document_detail/31988.html), if you want to see more practices ,please refer to [Web Post](https://help.aliyun.com/document_detail/31923.html)\n\n## License\n\n[MIT](LICENSE)\n\n# OSS Usage\n\nOSS, Object Storage Service. Equal to well known Amazon [S3](http://aws.amazon.com/s3/).\n\nAll operation use es7 async/await to implement. All api is async function.\n\n## Summary\n\n- [Node Usage](#node-usage)\n- [Browser Usage](#browser-usage)\n- [Data Regions](#data-regions)\n- [Create Account](#create-acount)\n- [Create A Bucket Instance](#create-a-bucket-instance)\n  - [oss(options)](#ossoptions)\n- [Bucket Operations](#bucket-operations)\n  - Base\n    - [.listBuckets(query[, options])](#listbucketsquery-options)\n    - [.putBucket(name[, options])](#putbucketname-options)\n    - [.useBucket(name)](#usebucketname)\n    - [.deleteBucket(name[, options])](#deletebucketname-options)\n    - [.getBucketInfo(name)](#getbucketinfoname)\n    - [.getBucketLocation(name)](#getbucketlocationname)\n  - ACL\n    - [.putBucketACL(name, acl[, options])](#putbucketaclname-acl-options)\n    - [.getBucketACL(name[, options])](#getbucketaclname-options)\n  - Logging\n    - [.putBucketLogging(name, prefix[, options])](#putbucketloggingname-prefix-options)\n    - [.getBucketLogging(name[, options])](#getbucketloggingname-options)\n    - [.deleteBucketLogging(name[, options])](#deletebucketloggingname-options)\n  - Website\n    - [.putBucketWebsite(name, config[, options])](#putbucketwebsitename-config-options)\n    - [.getBucketWebsite(name[, options])](#getbucketwebsitename-options)\n    - [.deleteBucketWebsite(name, region[, options])](#deletebucketwebsitename-options)\n  - Referer\n    - [.putBucketReferer(name, allowEmpty, referers[, options])](#putbucketreferername-allowempty-referers-options)\n    - [.getBucketReferer(name[, options])](#getbucketreferername-options)\n    - [.deleteBucketReferer(name[, options])](#deletebucketreferername-options)\n  - Lifecycle\n    - [.putBucketLifecycle(name, rules[, options])](#putbucketlifecyclename-rules-options)\n    - [.getBucketLifecycle(name[, options])](#getbucketlifecyclename-options)\n    - [.deleteBucketLifecycle(name[, options])](#deletebucketlifecyclename-options)\n  - CORS\n    - [.putBucketCORS(name, rules[, options])](#putbucketcorsname-rules-options)\n    - [.getBucketCORS(name[, options])](#getbucketcorsname-options)\n    - [.deleteBucketCORS(name[, options])](#deletebucketcorsname-options)\n  - RequestPayment\n    - [.getBucketRequestPayment(bucketName[, options])](#getbucketrequestpaymentbucketname-options)\n    - [.putBucketRequestPayment(bucketName, payer[, options])](#putBucketRequestpaymentbucketname-payer-options)\n  - BucketEncryption\n    - [.putBucketEncryption(name[, options])](#putbucketencryptionbucketname-options)\n    - [.getBucketEncryption(name)](#getbucketencryptionbucketname-options)\n    - [.deleteBucketEncryption(name)](#deletebucketencryptionbucketname-options)\n- [Object Operations](#object-operations)\n  - [.list(query[, options])](#listquery-options)\n  - [.put(name, file[, options])](#putname-file-options)\n  - [.putStream(name, stream[, options])](#putstreamname-stream-options)\n  - [.append(name, file[, options])](#appendname-file-options)\n  - [.getObjectUrl(name[, baseUrl])](#getobjecturlname-baseurl)\n  - [.generateObjectUrl(name[, baseUrl])](#generateobjecturlname-baseurl)\n  - [.head(name[, options])](#headname-options)\n  - [.getObjectMeta(name)](#getobjectmetaname)\n  - [.get(name[, file, options])](#getname-file-options)\n  - [.getStream(name[, options])](#getstreamname-options)\n  - [.delete(name[, options])](#deletename-options)\n  - [.copy(name, sourceName[, sourceBucket, options])](#copyname-sourcename-sourcebucket-options)\n  - [.putMeta(name, meta[, options])](#putmetaname-meta-options)\n  - [.deleteMulti(names[, options])](#deletemultinames-options)\n  - [.signatureUrl(name[, options])](#signatureurlname-options)\n  - [.putACL(name, acl[, options])](#putaclname-acl-options)\n  - [.getACL(name[, options])](#getaclname-options)\n  - [.restore(name[, options])](#restorename-options)\n  - [.putSymlink(name, targetName[, options])](#putsymlinkname-targetname-options)\n  - [.getSymlink(name[, options])](#getsymlinkname-options)\n  - [.initMultipartUpload(name[, options])](#initmultipartuploadname-options)\n  - [.uploadPart(name, uploadId, partNo, file, start, end[, options])](#uploadpartname-uploadid-partno-file-start-end-options)\n  - [.uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])](#uploadpartcopyname-uploadid-partno-range-sourcedata-options)\n  - [.completeMultipartUpload(name, uploadId, parts[, options])](#completemultipartuploadname-uploadid-parts-options)\n  - [.multipartUpload(name, file[, options])](#multipartuploadname-file-options)\n  - [.multipartUploadCopy(name, sourceData[, options])](#multipartuploadcopyname-sourcedata-options)\n  - [.listParts(name, uploadId[, query, options])](#listparts-name-uploadid-query-options)\n  - [.listUploads(query[, options])](#listuploadsquery-options)\n  - [.abortMultipartUpload(name, uploadId[, options])](#abortmultipartuploadname-uploadid-options)\n- [RTMP Operations](#rtmp-operations)\n  - [.putChannel(id, conf[, options])](#putchannelid-conf-options)\n  - [.getChannel(id[, options])](#getchannelid-options)\n  - [.deleteChannel(id[, options])](#deletechannelid-options)\n  - [.putChannelStatus(id, status[, options])](#putchannelstatusid-status-options)\n  - [.getChannelStatus(id[, options])](#getchannelstatusid-options)\n  - [.listChannels(query[, options])](#listchannelsquery-options)\n  - [.getChannelHistory(id[, options])](#getchannelhistoryid-options)\n  - [.createVod(id, name, time[, options])](#createvodid-name-time-options)\n  - [.getRtmpUrl(channelId[, options])](#getrtmpurlchannelid-options)\n- [Create A Image Service Instance](#create-a-image-service-instance)\n  - [oss.ImageClient(options)](#ossimageclientoptions)\n- [Image Operations](#image-operations)\n  - [imgClient.get(name, file[, options])](#imgclientgetname-file-options)\n  - [imgClient.getStream(name[, options])](#imgclientgetstreamname-options)\n  - [imgClient.getExif(name[, options])](#imgclientgetexifname-options)\n  - [imgClient.getInfo(name[, options])](#imgclientgetinfoname-options)\n  - [imgClient.putStyle(name, style[, options])](#imgclientputstylename-style-options)\n  - [imgClient.getStyle(name[, options])](#imgclientgetstylename-options)\n  - [imgClient.listStyle([options])](#imgclientliststyleoptions)\n  - [imgClient.deleteStyle(name[, options])](#imgclientdeletestylename-options)\n  - [imgClient.signatureUrl(name)](#imgclientsignatureurlname)\n- [Known Errors](#known-errors)\n\n## Node Usage\n\n### Compatibility\n- Node: >= 8.0.0\n\n### Basic usage\n1.install SDK using npm\n```\nnpm install ali-oss --save\n```\n2.for example:\n```js\nconst OSS = require('ali-oss');\nconst client = new OSS({\n  region: '<oss region>',\n  accessKeyId: '<Your accessKeyId>',\n  accessKeySecret: '<Your accessKeySecret>',\n  bucket: '<Your bucket name>'\n});\n```\n## Browser Usage\n\nYou can use most of the functionalities of `ali-oss` in browser with\nsome exceptions:\n\n- put object with streaming: no chunked encoding, we use multipart\n  upload instead\n- get object to local file: we cannot manipulate file system in\n  browser, we provide signed object url for downloading needs\n- bucket operations(listBuckets, putBucketLogging, etc) will fail: OSS\n  server currently do not support CORS requests for bucket operations\n  (will probably be fixed later)\n\n### Compatibility\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n    >Note: Because some browsers do not support promises, you need to introduce promise compatible libraries.<br>\n    For example: IE10 and IE11 need to introduce a promise-polyfill.\n\n### Setup\n\n#### Bucket setup\n\nAs browser-side javascript involves CORS operations. You need to setup\nyour bucket CORS rules to allow CORS operations:\n\n- set allowed origins to '\\*'\n- allowed methods to 'PUT, GET, POST, DELETE, HEAD'\n- set allowed headers to '\\*'\n- expose 'ETag' in expose headers\n\n#### STS setup\n\nAs we don't want to expose the accessKeyId/accessKeySecret in the\nbrowser, a [common practice][oss-sts] is to use STS to grant temporary\naccess.\n\n### Basic usage\n\nInclude the sdk lib in the `<script>` tag and you have `OSS` available\nfor creating client.\n\n```html\n // x.x.x The specific version number represented\n // we recommend introducing offline resources, because the usability of online resources depends on the stability of the cdn server.\n <!-- Introducing online resources -->\n <script src=\"http://gosspublic.alicdn.com/aliyun-oss-sdk-x.x.x.min.js\"></script>\n <!-- Introducing offline resources -->\n <script src=\"./aliyun-oss-sdk-x.x.x.min.js\"></script>\n\n<script type=\"text/javascript\">\n  const client = new OSS({\n    region: 'oss-cn-hangzhou',\n    accessKeyId: '<access-key-id>',\n    accessKeySecret: '<access-key-secret>',\n    bucket: '<bucket-name>',\n    stsToken: '<security-token>'\n  });\n\n  client.list().then((result) => {\n    console.log('objects: %j', result.objects);\n    return client.put('my-obj', new OSS.Buffer('hello world'));\n  }).then((result) => {\n    console.log('put result: %j', result);\n    return client.get('my-obj');\n  }).then((result) => {\n    console.log('get result: %j', result.content.toString());\n  });\n</script>\n```\nThe full sample can be found [here][browser-sample].\n\n### How to build\n\n```bash\nnpm run build-dist\n```\n\nAnd see the build artifacts under `dist/`.\n\n\n## Data Regions\n\n[OSS current data regions](https://help.aliyun.com/document_detail/oss/user_guide/endpoint_region.html).\n\nregion | country | city | endpoint | internal endpoint\n---  | ---     | ---  | --- | ---\noss-cn-hangzhou | China | HangZhou | oss-cn-hangzhou.aliyuncs.com | oss-cn-hangzhou-internal.aliyuncs.com\noss-cn-shanghai | China | ShangHai | oss-cn-shanghai.aliyuncs.com | oss-cn-shanghai-internal.aliyuncs.com\noss-cn-qingdao | China | QingDao | oss-cn-qingdao.aliyuncs.com | oss-cn-qingdao-internal.aliyuncs.com\noss-cn-beijing | China | BeiJing | oss-cn-beijing.aliyuncs.com | oss-cn-beijing-internal.aliyuncs.com\noss-cn-shenzhen | China | ShenZhen | oss-cn-shenzhen.aliyuncs.com | oss-cn-shenzhen-internal.aliyuncs.com\noss-cn-hongkong | China | HongKong | oss-cn-hongkong.aliyuncs.com | oss-cn-hongkong-internal.aliyuncs.com\noss-us-west-1 | US | Silicon Valley | oss-us-west-1.aliyuncs.com | oss-us-west-1-internal.aliyuncs.com\noss-ap-southeast-1 | Singapore | Singapore | oss-ap-southeast-1.aliyuncs.com | oss-ap-southeast-1-internal.aliyuncs.com\n\n## Create Account\n\nGo to [OSS website](http://www.aliyun.com/product/oss/?lang=en), create a new account for new user.\n\nAfter account created, you can create the OSS instance and get the `accessKeyId` and `accessKeySecret`.\n\n## Create A Bucket Instance\n\nEach OSS instance required `accessKeyId`, `accessKeySecret` and `bucket`.\n\n## oss(options)\n\nCreate a Bucket store instance.\n\noptions:\n\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- [stsToken] {String} used by temporary authorization, detail [see](https://www.alibabacloud.com/help/doc-detail/32077.htm)\n- [bucket] {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [endpoint] {String} oss region domain. It takes priority over `region`.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`.\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`.\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [secure] {Boolean} instruct OSS client to use HTTPS (secure: true) or HTTP (secure: false) protocol.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`.\n- [cname] {Boolean}, default false, access oss with custom domain name. if true, you can fill `endpoint` field with your custom domain name,\n- [isRequestPay] {Boolean}, default false, whether request payer function of the bucket is open, if true, will send headers `'x-oss-request-payer': 'requester'` to oss server.\n  the details you can see [requestPay](https://help.aliyun.com/document_detail/91337.htm)\n- [useFetch] {Boolean}, default false, it just work in Browser, if true,it means upload object with \n`fetch` mode ,else `XMLHttpRequest`\n\nexample:\n\n```js\nconst oss = require('ali-oss');\n\nconst store = oss({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\n```\n\n## Bucket Operations\n\n### .listBuckets(query[, options])\n\nList buckets in this account.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search buckets using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [max-keys] {String|Number} max buckets, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return buckets list on `buckets` properties.\n\n- buckets {Array<BucketMeta>} bucket meta info list\n  Each `BucketMeta` will contains blow properties:\n    - name {String} bucket name\n    - region {String} bucket store data region, e.g.: `oss-cn-hangzhou-a`\n    - creationDate {String} bucket create GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n- owner {Object} object owner, including `id` and `displayName`\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 buckets\n\n```js\nstore.listBuckets({\n  \"max-keys\": 10\n}).then((result) => {\n  console.log(result);\n});\n\n```\n\n### .putBucket(name[, options])\n\nCreate a new bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket exists and not belong to current account, will throw BucketAlreadyExistsError.\n  If bucket not exists, will create a new bucket and set it's ACL.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [StorageClass] {String} the storage type include (Standard,IA,Archive)\n\nSuccess will return the bucket name on `bucket` properties.\n\n- bucket {String} bucket name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Create a bucket name `helloworld` location on HongKong\n\n```js\nstore.putBucket('helloworld').then((result) => {\n  // use it by default\n  store.useBucket('helloworld');\n});\n```\n\n- Create a bucket name `helloworld` location on HongKong StorageClass `Archive`\n\n```js\nawait store.putBucket('helloworld', { StorageClass: 'Archive' });\n// use it by default\nstore.useBucket('helloworld');\n```\n\n### .deleteBucket(name[, options])\n\nDelete an empty bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket is not empty, will throw BucketNotEmptyError.\n  If bucket is not exists, will throw NoSuchBucketError.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete the exists 'helloworld' bucket on 'oss-cn-hongkong'\n\n```js\nstore.deleteBucket('helloworld').then((result) => {});\n```\n\n### .useBucket(name)\n\nUse the bucket.\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.useBucket('helloworld');\n```\n\n### .getBucketInfo(name)\n\nGet bucket information,include CreationDate、ExtranetEndpoint、IntranetEndpoint、Location、Name、StorageClass、\nOwner、AccessControlList\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketInfo('helloworld').then( (res) => {\n  console.log(res.bucket)\n})\n```\n\n### .getBucketLocation(name)\n\nGet bucket location\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketLocation('helloworld').then( (res) => {\n  console.log(res.location)\n})\n```\n\n---\n\n### .putBucketACL(name, acl[, options])\n\nUpdate the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- acl {String} access control list, current available: `public-read-write`, `public-read` and `private`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set bucket `helloworld` to `public-read-write`\n\n```js\nstore.putBucketACL('helloworld', 'public-read-write').then((result) => {\n});\n```\n\n### .getBucketACL(name[, options])\n\nGet the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld`\n\n```js\nstore.getBucketACL('helloworld').then((result) => {\n  console.log(result.acl);\n});\n```\n\n---\n\n### .putBucketLogging(name, prefix[, options])\n\nUpdate the bucket logging settings.\nLog file will create every one hour and name format: `<prefix><bucket>-YYYY-mm-DD-HH-MM-SS-UniqueString`.\n\nparameters:\n\n- name {String} bucket name\n- [prefix] {String} prefix path name to store the log files\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Enable bucket `helloworld` logging and save with prefix `logs/`\n\n```js\nstore.putBucketLogging('helloworld', 'logs/').then((result) => {\n});\n```\n\n### .getBucketLogging(name[, options])\n\nGet the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- enable {Boolean} enable logging or not\n- prefix {String} prefix path name to store the log files, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld` logging settings\n\n```js\nstore.getBucketLogging('helloworld').then((result) => {\n  console.log(result.enable, result.prefix);\n});\n```\n\n### .deleteBucketLogging(name[, options])\n\nDelete the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketWebsite(name, config[, options])\n\nSet the bucket as a static website.\n\nparameters:\n\n- name {String} bucket name\n- config {Object} website config, contains blow properties:\n  - index {String} default page, e.g.: `index.html`\n  - [error] {String} error page, e.g.: 'error.html'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketWebsite('hello', {\n  index: 'index.html'\n}).then((result) => {\n});\n```\n\n### .getBucketWebsite(name[, options])\n\nGet the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- index {String} index page\n- error {String} error page, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketWebsite(name[, options])\n\nDelete the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketReferer(name, allowEmpty, referers[, options])\n\nSet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list, e.g.:\n  ```js\n  [\n    'https://npm.taobao.org',\n    'http://cnpmjs.org'\n  ]\n  ```\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketReferer('hello', false, [\n  'https://npm.taobao.org',\n  'http://cnpmjs.org'\n]).then((result) => {\n});\n```\n\n### .getBucketReferer(name[, options])\n\nGet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketReferer(name[, options])\n\nDelete the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketLifecycle(name, rules[, options])\n\nSet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains blow properties:\n  - [id] {String} rule id, if not set, OSS will auto create it with random string.\n  - prefix {String} store prefix\n  - status {String} rule status, allow values: `Enabled` or `Disabled`\n  - [days] {Number|String} expire after the `days`\n  - [date] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `date` and `days` only set one.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketLifecycle('hello', [\n  {\n    id: 'delete after one day',\n    prefix: 'logs/',\n    status: 'Enabled',\n    days: 1\n  },\n  {\n    prefix: 'logs2/',\n    status: 'Disabled',\n    date: '2022-10-11T00:00:00.000Z'\n  }\n]).then((result) => {});\n```\n\n### .getBucketLifecycle(name[, options])\n\nGet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the lifecycle rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketLifecycle(name[, options])\n\nDelete the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketCORS(name, rules[, options])\n\nSet CORS rules of the bucket object\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains below properties:\n  - allowedOrigin {String/Array} configure for Access-Control-Allow-Origin header\n  - allowedMethod {String/Array} configure for Access-Control-Allow-Methods header\n  - [allowedHeader] {String/Array} configure for Access-Control-Allow-Headers header\n  - [exposeHeader] {String/Array} configure for Access-Control-Expose-Headers header\n  - [maxAgeSeconds] {String} configure for Access-Control-Max-Age header\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketCORS('hello', [\n  {\n    allowedOrigin: '*',\n    allowedMethod: [\n      'GET',\n      'HEAD',\n    ],\n  }\n]).then((result) => {});\n```\n\n### .getBucketCORS(name[, options])\n\nGet CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the CORS rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketCORS(name[, options])\n\nDelete CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .getBucketRequestPayment(bucketName[, options])\n\nget RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String} bucket name\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- payer {String} payer, BucketOwner or Requester\n- res {Object} response info, including\n  - data {Buffer} xml\n\n---\n\n### .putBucketRequestPayment(bucketName, payer[, options])\n\nput RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String}\n- payer {String} payer\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketEncryption(name, rules)\n\nput BucketEncryption value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [rules] {Object} parameters\n  - SSEAlgorithm {String} encryption type, expect AES256 or KMS\n  - {KMSMasterKeyID} {String} needed when encryption type is KMS\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketEncryption(name)\n\nget BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n- encryption {Object} rules\n  - SSEAlgorithm {String} encryption type, AES256 or KMS\n  - {KMSMasterKeyID} {String} will be return when encryption type is KMS\n\n---\n\n### .deleteBucketEncryption(name)\n\ndelete BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n## Object Operations\n\nAll operations function return Promise, except `signatureUrl`.\n\n### .put(name, file[, options])\n\nAdd an object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream|File(only support Browser)|Blob(only support Browser)} object local path, content buffer or ReadStream content instance use in Node, Blob and html5 File\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - See more: [PutObject](https://help.aliyun.com/document_detail/31978.html#title-yxe-96d-x61)\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- data {Object} callback server response data, sdk use JSON.parse() return\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through local file path\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/demo.txt', filepath).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/demo.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829244'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through content buffer\n\n```js\nstore.put('ossdemo/buffer', Buffer.from('foo content')).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/buffer',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/buffer',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"xxx\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829243'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .putStream(name, stream[, options])\n\nAdd a stream object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- stream {ReadStream} object ReadStream content instance\n- [options] {Object} optional parameters\n  - [contentLength] {Number} the stream length, `chunked encoding` will be used if absent\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.putStream('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .append(name, file[, options])\n\nAppend an object to the bucket, it's almost same as put, but it can add content to existing object rather than override it.\n\nAll parameters are same as put except for options.position\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [position] {String} specify the position which is the content length of the latest object\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nobject:\n\n- name {String} object name\n- url {String} the url of oss\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- nextAppendPosition {String} the next position\n\nexample:\n\n```js\nlet object = await store.append('ossdemo/buffer', Buffer.from('foo'));\n\n// append content to the existing object\nobject = await store.append('ossdemo/buffer', Buffer.from('bar'), {\n  position: object.nextAppendPosition,\n});\n```\n\n### .getObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `endpoint`.\n\ne.g.:\n\n```js\nconst cdnUrl = client.getObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .generateObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `bucket and endpoint `.\nSuggest use generateObjectUrl instead of getObjectUrl.\n\ne.g.:\n\n```js\nconst url = client.generateObjectUrl('foo/bar.jpg');\n// cdnUrl should be `https://${bucketname}.${endpotint}foo/bar.jpg`\n\nconst cdnUrl = client.generateObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .head(name[, options])\n\nHead an object and get the meta info.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status, maybe 200 or 304\n- meta {Object} object user meta, if not set on `put()`, will return null.\n    If return status 304, meta will be null too\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Head an exists object and get user meta\n\n```js\nawait this.store.put('ossdemo/head-meta', Buffer.from('foo'), {\n  meta: {\n    uid: 1,\n    path: 'foo/demo.txt'\n  }\n});\nconst object = await this.store.head('ossdemo/head-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  meta: {\n    uid: '1',\n    path: 'foo/demo.txt'\n  },\n  res: { ... }\n}\n```\n\n- Head a not exists object\n\n```js\nconst object = await this.store.head('ossdemo/head-meta');\n// will throw NoSuchKeyError\n```\n\n### .getObjectMeta(name)\n\nGet an  object meta info include ETag、Size、LastModified and so on, not return object content.\n\nparameters:\n\n- name {String} object name store on OSS\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info, including\n  - headers {Object} response headers\n\nexample:\n\n- Head an exists object and get object meta info\n\n```js\nawait this.store.put('ossdemo/object-meta', Buffer.from('foo'));\nconst object = await this.store.getObjectMeta('ossdemo/object-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  res: { ... }\n}\n```\n\n### .get(name[, file, options])\n\nGet an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the content\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Range' get specifying range bytes content, e.g.: `Range: bytes=0-9`\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/demo.txt', filepath);\n```\n\n_ Store object to a writestream\n\n```js\nawait store.get('ossdemo/demo.txt', somestream);\n```\n\n- Get an object content buffer\n\n```js\nconst result = await store.get('ossdemo/demo.txt');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a processed image and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.png';\nawait store.get('ossdemo/demo.png', filepath, {process: 'image/resize,w_200'});\n```\n\n- Get a not exists object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/not-exists-demo.txt', filepath);\n// will throw NoSuchKeyError\n```\n\n### .getStream(name[, options])\n\nGet an object read stream.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object stream\n\n```js\nconst result = await store.getStream('ossdemo/demo.txt');\nresult.stream.pipe(fs.createWriteStream('some file.txt'));\n```\n\n### .delete(name[, options])\n\nDelete an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf delete object not exists, will also delete success.\n\nexample:\n\n- Delete an exists object\n\n```js\nawait store.delete('ossdemo/someobject');\n```\n\n- Delete a not exists object\n\n```js\nawait store.delete('ossdemo/some-not-exists-object');\n```\n\n### .copy(name, sourceName[, sourceBucket, options])\n\nCopy an object from `sourceName` to `name`.\n\nparameters:\n\n- name {String} object name store on OSS\n- sourceName {String} source object name\n- [sourceBucket] {String} source Bucket. if doesn't exist，`sourceBucket` is same bucket. \n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n    If the `meta` set, will override the source object meta.\n  - [headers] {Object} extra headers\n    - 'If-Match' do copy if source object etag equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' do copy if source object etag not equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-Modified-Since' do copy if source object modified after this time,\n        otherwise throw PreconditionFailedError\n    - 'If-Unmodified-Since' do copy if source object modified before this time,\n        otherwise throw PreconditionFailedError\n    - See more: [CopyObject](https://help.aliyun.com/document_detail/31979.html?#title-tzy-vxc-ncx)\n\nSuccess will return the copy result in `data` property.\n\nobject:\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT string\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf source object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Copy same bucket object\n\n```js\nstore.copy('newName', 'oldName').then((result) => {\n  console.log(result);\n});\n```\n\n- Copy other bucket object\n\n```js\nstore.copy('logo.png', 'logo.png', 'other-bucket').then((result) => {\n  console.log(result);\n});\n```\n\n### .putMeta(name, meta[, options])\n\nSet an exists object meta.\n\nparameters:\n\n- name {String} object name store on OSS\n- meta {Object} user meta, will send with `x-oss-meta-` prefix string\n  e.g.: `{ uid: 123, pid: 110 }`\n  If `meta: null`, will clean up the exists meta\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the putMeta result in `data` property.\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Update exists object meta\n\n```js\nconst result = await store.putMeta('ossdemo.txt', {\n  uid: 1, pid: 'p123'\n});\nconsole.log(result);\n```\n\n- Clean up object meta\n\n```js\nawait store.putMeta('ossdemo.txt', null);\n```\n\n### .deleteMulti(names[, options])\n\nDelete multi objects in one request.\n\nparameters:\n\n- names {Array<String>} object names, max 1000 objects in once.\n- [options] {Object} optional parameters\n  - [quiet] {Boolean} quiet mode or verbose mode, default is `false`, verbose mode\n    quiet mode: if all objects delete succes, return emtpy response.\n      otherwise return delete error object results.\n    verbose mode: return all object delete results.\n  - [timeout] {Number} the operation timeout\n\nSuccess will return delete success objects in `deleted` property.\n\n- [deleted] {Array<String>} deleted object names list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete multi objects in quiet mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3'], {\n  quiet: true\n});\n```\n\n- Delete multi objects in verbose mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3']);\n```\n\n### .list(query[, options])\n\nList objects in the bucket.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 objects\n\n```js\nconst result = await store.list();\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nconst result = await store.list({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nconst result = await store.list({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n### .signatureUrl(name[, options])\n\nCreate a signature url for download or upload object. When you put object with signatureUrl ,you need to pass `Content-Type`.Please look at the example.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [method] {String} the HTTP method, default is 'GET'\n  - [Content-Type] {String} set the request content type\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [response] {Object} set the response headers for download\n    - [content-type] {String} set the response content type\n    - [content-disposition] {String} set the response content disposition\n    - [cache-control] {String} set the response cache control\n    - See more: https://help.aliyun.com/document_detail/oss/api-reference/object/GetObject.html\n  - [callback] {Object} set the callback for the operation\n    - url {String} set the url for callback\n    - [host] {String} set the host for callback\n    - body {String} set the body for callback\n    - [contentType] {String} set the type for body\n    - [customValue] {Object} set the custom value for callback,eg. {var1: value1,var2:value2}\n\nSuccess will return signature url.\n\nexample:\n\n- Get signature url for object\n\n```js\nconst url = store.signatureUrl('ossdemo.txt');\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT'\n});\nconsole.log(url);\n\n//  put object with signatureUrl\n// -------------------------------------------------\n\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT',\n  'Content-Type': 'text/plain; charset=UTF-8',\n});\nconsole.log(url);\n\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  response: {\n    'content-type': 'text/custom',\n    'content-disposition': 'attachment'\n  }\n});\nconsole.log(url);\n\n// put operation\n```\n\n- Get a signature url for a processed image\n\n```js\nconst url = store.signatureUrl('ossdemo.png', {\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.png', {\n  expires: 3600,\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n```\n\n### .putACL(name, acl[, options])\n\nSet object's ACL.\n\nparameters:\n\n- name {String} object name\n- acl {String} acl (private/public-read/public-read-write)\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set an object's ACL\n\n```js\nawait store.putACL('ossdemo.txt', 'public-read');\n```\n\n### .getACL(name[, options])\n\nGet object's ACL.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get an object's ACL\n\n```js\nconst result = await store.getACL('ossdemo.txt');\nconsole.log(result.acl);\n```\n\n### .restore(name[, options])\n\nRestore Object.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Restore an object\n\n```js\nconst result = await store.restore('ossdemo.txt');\nconsole.log(result.status);\n```\n\n### .putSymlink(name, targetName[, options])\n\nPutSymlink\n\nparameters:\n\n- name {String} object name\n- targetName {String} target object name\n- [options] {Object} optional parameters\n  - [storageClass] {String} the storage type include (Standard,IA,Archive)\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers, detail see [PutSymlink](https://help.aliyun.com/document_detail/45126.html#title-x71-l2b-7i8)\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst options = {\n  storageClass: 'IA',\n  meta: {\n    uid: '1',\n    slus: 'test.html' \n  }\n}\nconst result = await store.putSymlink('ossdemo.txt', 'targetName', options)\nconsole.log(result.status)\n```\n\n### .getSymlink(name[, options])\n\nGetSymlink\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n\nSuccess will return\n\n- targetName {String} target object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst result = await store.getSymlink('ossdemo.txt')\nconsole.log(result.targetName)\n```\n\n### .initMultipartUpload(name[, options])\nBefore transmitting data in the Multipart Upload mode,\nyou must call the Initiate Multipart Upload interface to notify the OSS to initiate a Multipart Upload event.\nThe Initiate Multipart Upload interface returns a globally unique Upload ID created by the OSS server to identify this Multipart Upload event.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] Mime file type e.g.: application/octet-stream\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - [x-oss-server-side-encryption]\n    Specify the server-side encryption algorithm used to upload each part of this object,Type: string, Valid value: AES256 `x-oss-server-side-encryption: AES256`<br>\n    if use in browser you should be set cors expose header x-oss-server-side-encryption\n    - See more: [InitiateMultipartUpload](https://help.aliyun.com/document_detail/31992.html?#title-wh0-a2h-rur)\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-server-side-encryption] if set request header x-oss-server-side-encryption, will return\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- uploadId {String} upload id, use for uploadPart, completeMultipart\n\nexample:\n\n```js\n  const result = await store.initMultipartUpload('object');\n  console.log(result);\n```\n\n### .uploadPart(name, uploadId, partNo, file, start, end[, options])\nAfter initiating a Multipart Upload event, you can upload data in parts based on the specified object name and Upload ID.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- file {File|String}  is File or FileName, the whole file<br>\n Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB. <br>\n In Node you can use File or FileName, but in browser you only can use File.\n- start {Number} part start bytes  e.g: 102400\n- end {Number} part end bytes  e.g: 204800\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n  const uploadId = result.uploadId;\n  const file; //the data you want to upload, is a File or FileName(only in node)\n  //if file part is 10\n  const partSize = 100 * 1024;\n  const fileSize = 10 * partSize;//you need to calculate\n  const dones = [];\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const part = await store.uploadPart(name, uploadId, i, file, start, end);\n    dones.push({\n      number: i,\n      etag: part.etag\n    });\n    console.log(part);\n  }\n\n  //end need to call completeMultipartUpload api\n```\n\n### .uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])\nUsing Upload Part Copy, you can copy data from an existing object and upload a part of the data.\nWhen copying a file larger than 1 GB, you must use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- range {String} Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB, range value like `0-102400`\n- sourceData {Object}\n  - sourceKey {String} the source object name\n  - sourceBucketName {String} the source bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} The following request header is used for the source objects specified by x-oss-copy-source.\n    - [x-oss-copy-source-if-match]  default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]   default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]   default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since]   default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  const partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const range = start + '-' + (end - 1);\n    const part = await store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n### .completeMultipartUpload(name, uploadId, parts[, options])\nAfter uploading all data parts, you must call the Complete Multipart Upload API to complete Multipart Upload for the entire file.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- parts {Array} more part {Object} from uploadPartCopy, , each in the structure:\n  - number {Number} partNo\n  - etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [CompleteMultipartUpload](https://help.aliyun.com/document_detail/31995.html?#title-nan-5y3-rjd)\n\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data , sdk use JSON.parse() return\n\nexample:\n\n```js\n\n  //init multipart\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  //upload part\n  const file; //the data you want to upload, this example size is 10 * 100 * 1024\n  const fileSize;//you need to calculate\n  const partSize = 100 * 1024;//100kb\n  const done = [];\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const data = file.slice(start, end);\n    const part = yield store.uploadPart(name, result.uploadId, i, data);\n    console.log(part);\n    done.push({\n          number: i,\n          etag: part.res.headers.etag\n        });\n  }\n\n  //complete\n  const completeData = await store.completeMultipartUpload(name, result.uploadId, done);\n  console.log(completeData);\n```\n\n\n### .multipartUpload(name, file[, options])\n\nUpload file with [OSS multipart][oss-multipart].<br>\nthis function contains initMultipartUpload, uploadPart, completeMultipartUpload.\nWhen you use multipartUpload api，if you encounter problems with ConnectionTimeoutError, you should handle ConnectionTimeoutError in your business code. How to resolve ConnectionTimeoutError, you can decrease `partSize` size 、 Increase `timeout` 、Retry request ,\nor give tips in your business code;\n\nparameters:\n\n- name {String} object name\n- file {String|File(only support Browser)|Blob(only support Browser)} file path or HTML5 Web File or web Blob\n- [options] {Object} optional args\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n    - file {File} The file object selected by the user, if the browser is restarted, it needs the user to manually trigger the settings\n    - name {String} object key\n    - fileSize {Number} file size\n    - partSize {Number} part size\n    - uploadId {String} upload id\n    - doneParts {Array} An array of pieces that have been completed, including the object structure as follows\n       - number {Number} part number\n       - etag {String} part etag\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [mime] {String} custom mime , will send with `Content-Type` entity header\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n          e.g.:\n         ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n         ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data, sdk use JSON.parse() return\n\nexample:\n\n- Upload using multipart\n\n```js\nconst result = await store.multipartUpload('object', '/tmp/file');\nconsole.log(result);\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) { //progress is generator\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\n```\n\n- multipartUpload progress example\n\n```js\n\n//async function\nasync function asyncProgress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result1 = await store.multipartUpload('object', '/tmp/file', {\n  progress: asyncProgress\n});\n\n//function\nfunction progress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result2 = await store.multipartUpload('object', '/tmp/file', {\n  progress: progress\n});\n\n```\n\n- multipartUpload with cancel\n\n>tips: cancel multipartUpload support on node and browser\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n- multipartUpload with capture `ConnectionTimeoutError`  error\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  if (err.code === 'ConnectionTimeoutError') {\n    console.log(\"Woops,Woops ,timeout error!!!\");\n    // do ConnectionTimeoutError operation\n  }\n}\n\n```\n\n### .multipartUploadCopy(name, sourceData[, options])\n\nCopy file with [OSS multipart][oss-multipart]. <br>\nthis function contains head, initMultipartUpload, uploadPartCopy, completeMultipartUpload.<br>\nWhen copying a file larger than 1 GB, you should use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [copyheaders] {Object} only uploadPartCopy api used, detail [see](https://www.alibabacloud.com/help/doc-detail/31994.htm)\n    - [x-oss-copy-source-if-match]  only uploadPartCopy api used, default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]  only uploadPartCopy api used, default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]  only uploadPartCopy api used, default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since] only uploadPartCopy api used, default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n- Copy using multipart\n\n```js\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n});\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\n```\n- multipartUploadCopy with cancel\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n### .listParts(name, uploadId[, query, options])\n\nThe ListParts command can be used to list all successfully uploaded parts mapped to a specific upload ID, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- name {String} object key\n- uploadId {String} upload ID from initMultipartUpload api\n- [query] {Object} query parameters\n  - [max-parts] {Number} The maximum part number in the response of the OSS. default value: 1000.\n  - [part-number-marker] {Number} Starting position of a specific list. A part is listed only when the part number is greater than the value of this parameter.\n  - [encoding-type] {String} Specify the encoding of the returned content and the encoding type. Optional value: url\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- uploadId {String} upload ID\n- bucket {String} Specify the bucket name.\n- name {String} object name\n- PartNumberMarker {Number} Starting position of the part numbers in the listing result.\n- nextPartNumberMarker {Number} If not all results are returned this time, the response request includes the NextPartNumberMarker element to indicate the value of PartNumberMarker in the next request.\n- maxParts {Number} upload ID\n- isTruncated {Boolean} Whether the returned result list for List Parts is truncated. The “true” indicates that not all results are returned; “false” indicates that all results are returned.\n- parts {Array} The container that saves part information, each in the structure:\n  - PartNumber {Number} Part number.\n  - LastModified {Date} Time when a part is uploaded.\n  - ETag {String} ETag value in the content of the uploaded part.\n  - Size {Number} Size of the uploaded part.\n\nexample:\n\n- List uploaded part\n\n```js\n\nconst result = await store.listParts('objcet', 'uploadId', {\n  'max-parts': 1000\n});\nconsole.log(result);\n```\n\n### .listUploads(query[, options])\n\nList on-going multipart uploads, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- query {Object} query parameters\n  - [prefix] {String} the object key prefix\n  - [max-uploads] {Number} the max uploads to return\n  - [key-marker] {String} the object key marker, if `upload-id-marker`\n    is not provided, return uploads with `key > marker`, otherwise\n    return uploads with `key >= marker && uploadId > id-marker`\n  - [upload-id-marker] {String} the upload id marker, must be used\n    **WITH** `key-marker`\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- List on-going multipart uploads\n\n```js\n\nconst result = await store.listUploads({\n  'max-uploads': 100,\n  'key-marker': 'my-object',\n  'upload-id-marker': 'upload-id'\n});\nconsole.log(result);\n```\n\n### .abortMultipartUpload(name, uploadId[, options])\n\nAbort a multipart upload for object.\n\nparameters:\n\n- name {String} the object name\n- uploadId {String} the upload id\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- Abort a multipart upload\n\n```js\nconst result = await store.abortMultipartUpload('object', 'upload-id');\nconsole.log(result);\n```\n\n## RTMP Operations\n\nAll operations function is [async], except `getRtmpUrl`.\n\nasync function format: `async functionName(...)`.\n\n### .putChannel(id, conf[, options])\n\nCreate a live channel.\n\nparameters:\n\n- id {String} the channel id\n- conf {Object} the channel config\n  - [Description] {String} the channel description\n  - [Status] {String} the channel status: 'enabled' or 'disabled'\n  - [Target] {Object}\n    - [Type] {String} the data type for the channel, only 'HLS' is supported now\n    - [FragDuration] {Number} duration of a 'ts' segment\n    - [FragCount] {Number} the number of 'ts' segments in a 'm3u8'\n    - [PlaylistName] {String} the 'm3u8' name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- publishUrls {Array} the publish urls\n- playUrls {Array} the play urls\n- res {Object} response info\n\nexample:\n\n- Create a live channel\n\n```js\nconst cid = 'my-channel';\nconst conf = {\n  Description: 'this is channel 1',\n  Status: 'enabled',\n  Target: {\n    Type: 'HLS',\n    FragDuration: '10',\n    FragCount: '5',\n    PlaylistName: 'playlist.m3u8'\n  }\n};\n\nconst r = await this.store.putChannel(cid, conf);\nconsole.log(r);\n```\n\n### .getChannel(id[, options])\n\nGet live channel info.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- data {Object} channel info, same as conf in [.putChannel](#putchannelid-conf-options)\n- res {Object} response info\n\nexample:\n\n- Get live channel info\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannel(cid);\nconsole.log(r);\n```\n\n### .deleteChannel(id[, options])\n\nDelete a live channel.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response infomation.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Delete a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.deleteChannel(cid);\nconsole.log(r);\n```\n\n### .putChannelStatus(id, status[, options])\n\nChange the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- status {String} the status: 'enabled' or 'disabled'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Disable a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.putChannelStatus(cid, 'disabled');\nconsole.log(r);\n```\n\n### .getChannelStatus(id[, options])\n\nGet the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel status information.\n\nobject:\n\n- data {Object}\n  - Status {String} the channel status: 'Live' or 'Idle'\n  - [ConnectedTime] {String} the connected time of rtmp pushing\n  - [RemoteAddr] {String} the remote addr of rtmp pushing\n  - [Video] {Object} the video parameters (Width/Height/FrameRate/Bandwidth/Codec)\n  - [Audio] {Object} the audio parameters (Bandwidth/SampleRate/Codec)\n- res {Object} response info\n\nexample:\n\n- Get a live channel status\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelStatus(cid);\nconsole.log(r);\n\n// { Status: 'Live',\n//   ConnectedTime: '2016-04-12T11:51:03.000Z',\n//   RemoteAddr: '42.120.74.98:53931',\n//   Video:\n//   { Width: '672',\n//     Height: '378',\n//     FrameRate: '29',\n//     Bandwidth: '60951',\n//     Codec: 'H264' },\n//   Audio: { Bandwidth: '5959', SampleRate: '22050', Codec: 'AAC' }\n// }\n```\n\n### .listChannels(query[, options])\n\nList channels.\n\nparameters:\n\n- query {Object} parameters for list\n  - prefix {String}: the channel id prefix (returns channels with this prefix)\n  - marker {String}: the channle id marker (returns channels after this id)\n  - max-keys {Number}: max number of channels to return\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel list.\n\nobject:\n\n- channels {Array} the channels, each in the structure:\n  - Name {String} the channel id\n  - Description {String} the channel description\n  - Status {String} the channel status\n  - LastModified {String} the last modification time of the channel\n  - PublishUrls {Array} the publish urls for the channel\n  - PlayUrls {Array} the play urls for the channel\n- nextMarker: result.data.NextMarker || null,\n- isTruncated: result.data.IsTruncated === 'true'\n- res {Object} response info\n\nexample:\n\n- List live channels\n\n```js\nconst r = await this.store.listChannels({\n  prefix: 'my-channel',\n  'max-keys': 3\n});\nconsole.log(r);\n```\n\n### .getChannelHistory(id[, options])\n\nGet the live channel history.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the history information.\n\nobject:\n\n- records {Object} the pushing records, each in the structure:\n  - StartTime {String} the start time\n  - EndTime {String} the end time\n  - RemoteAddr {String} the remote addr\n- res {Object} response info\n\nexample:\n\n- Get the live channel history\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelHistory(cid);\nconsole.log(r);\n```\n\n### .createVod(id, name, time[, options])\n\nCreate a VOD playlist for the channel.\n\nparameters:\n\n- id {String} the channel id\n- name {String} the playlist name\n- time {Object} the duration time\n  - startTime {Number} the start time in epoch seconds\n  - endTime {Number} the end time in epoch seconds\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Create a vod playlist of a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.createVod(cid, 're-play', {\n  startTime: 1460464870,\n  endTime: 1460465877\n});\nconsole.log(r);\n```\n\n### .getRtmpUrl(channelId[, options])\n\nGet signatured rtmp url for publishing.\n\nparameters:\n\n- channelId {String} the channel id\n- [options] {Object} optional parameters\n  - [expires] {Number} the expire time in seconds of the url\n  - [params] {Object} the additional paramters for url, e.g.: {playlistName: 'play.m3u8'}\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the rtmp url.\n\nexample:\n\n- Get a rtmp url.\n\n```js\nconst cid = 'my-channel';\n\nconst url = this.store.getRtmpUrl(this.cid, {\n  params: {\n    playlistName: 'play.m3u8'\n  },\n  expires: 3600\n});\nconsole.log(url);\n// rtmp://ossliveshow.oss-cn-hangzhou.aliyuncs.com/live/tl-channel?OSSAccessKeyId=T0cqQWBk2ThfRS6m&Expires=1460466188&Signature=%2BnzTtpyxUWDuQn924jdS6b51vT8%3D\n```\n\n## Create A Image Service Instance\n\nEach Image Service instance required `accessKeyId`, `accessKeySecret`, `bucket` and `imageHost`.\n\n### oss.ImageClient(options)\n\nCreate a Image service instance.\n\noptions:\n- imageHost {String} your image service domain that binding to a OSS bucket\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- bucket {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nconst oss = require('ali-oss');\n\nconst imgClient = oss.ImageClient({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'my_image_bucket'\n  imageHost: 'thumbnail.myimageservice.com'\n});\n```\n\n## Image Operations\n\nAll operations function is [async], except `imgClient.signatureUrl`.\n\nasync function format: `async functionName(...)`.\n\n### imgClient.get(name, file[, options])\n\nGet an image from the image channel.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the image\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image with a style and store it to the local file\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', filepath);\n```\n\n_ Store image to a writestream\n\n```js\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', somestream);\n```\n\n- Get an image content buffer\n\n```js\nconst result = await imgClient.get('ossdemo/demo.jpg@200w_200h');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a not exists object or a not image object\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/not-exists-demo.jpg@200w_200h', filepath);\n// will throw NoSuchKeyError\n```\n\n### imgClient.getStream(name[, options])\n\nGet an image read stream.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image object stream\n\n```js\nconst result = await imgClient.getStream('ossdemo/demo.jpg@200w_200h');\nresult.stream.pipe(fs.createWriteStream('some demo.jpg'));\n```\n\n### imgClient.getExif(name[, options])\n\nGet a image exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nIf object don't have exif, will throw 400 BadRequest.\n\nexample:\n\n```js\nconst result = await imgClient.getExif('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n### imgClient.getInfo(name[, options])\n\nGet a image info and exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nexample:\n\n```js\nconst result = await imgClient.getInfo('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     Format: \"jpg\",\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n\n### imgClient.putStyle(name, style[, options])\n// TODO\n\n### imgClient.getStyle(name[, options])\n\nGet a style by name from the image channel.\n\nparameters:\n- name {String} image style name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} styles object\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.getStyle('400');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"234\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:58:20 GMT\"\n//     },\n//     size: 234,\n//     aborted: false,\n//     rt: 398,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }\n// }\n```\n\n### imgClient.listStyle([options])\n\nGet all styles from the image channel.\n\nparameters:\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Array} styles array, a style object:\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.listStyle();\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"913\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:47:32 GMT\"\n//     },\n//     size: 913,\n//     aborted: false,\n//     rt: 1911,\n//     keepAliveSocket: false\n//   },\n//   data: [{\n//     Name: \"200-200\",\n//     Content: \"0e_200w_200h_0c_0i_0o_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:28:08 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:28:08 GMT\"\n//   }, {\n//     Name: \"800\",\n//     Content: \"800w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:29:15 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:29:15 GMT\"\n//   }, {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }, {\n//     Name: \"600\",\n//     Content: \"600w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:35:02 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:35:02 GMT\"\n//   }]\n// }\n```\n\n### imgClient.deleteStyle(name[, options])\n// TODO\n\n### imgClient.signatureUrl(name)\n\nCreate a signature url for directly download.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return full signature url.\n\nexample:\n\n```js\nconst url = imgClient.signatureUrl('\n');\n// http://thumbnail.myimageservice.com/demo.jpg@200w_200h?OSSAccessKeyId=uZxyLARzYZtGwHKY&Expires=1427803849&Signature=JSPRe06%2FjQpQSj5zlx2ld1V%2B35I%3D\n```\n\n## Cluster Mode\n\nCluster mode now only support object operations.\n\n```js\nconst Cluster = require('ali-oss').ClusterClient;\n\nconst client = Cluster({\n  cluster: [{\n    host: 'host1',\n    accessKeyId: 'id1',\n    accessKeySecret: 'secret1'\n  }, {\n    host: 'host2',\n    accessKeyId: 'id2',\n    accessKeySecret: 'secret2'\n  }],\n  schedule: 'masterSlave', //default is `roundRobin`\n});\n\n// listen error event to logging error\nclient.on('error', function(err) {\n  console.error(err.stack);\n});\n\n// client init ready\nclient.ready(function() {\n  console.log('cluster client init ready, go ahead!');\n});\n```\n\n### Get Methods\n\nWill choose an alive client by schedule(`masterSlave` or `roundRobin`).\n\n- `client.get()`\n- `client.head()`\n- `client.getStream()`\n- `client.list()`\n- `client.signatureUrl()`\n- `client.chooseAvailable()` - choose an available client by schedule.\n- `client.getACL()`\n\n### Put Methods\n\nWill put to all clients.\n\n- `client.put()`\n- `client.putStream()`\n- `client.delete()`\n- `client.deleteMulti()`\n- `client.copy()`\n- `client.putMeta()`\n- `client.putACL()`\n- `client.restore()`\n\n## Known Errors\n\nEach error return by OSS server will contains these properties:\n\n- name {String} error name\n- message {String} error message\n- requestId {String} uuid for this request, if you meet some unhandled problem,\n    you can send this request id to OSS engineer to find out what's happend.\n- hostId {String} OSS cluster name for this request\n\nname | code | status | message | message in Chinese\n---  | ---  | --- | ---     | ---\nAccessDeniedError | AccessDenied | 403 | Access Denied | 拒绝访问\nBucketAlreadyExistsError | BucketAlreadyExists | 409 | Bucket already exists | Bucket 已经存在\nBucketNotEmptyError | BucketNotEmpty | 409 | Bucket is not empty | Bucket 不为空\nRestoreAlreadyInProgressError | RestoreAlreadyInProgress | 409 | The restore operation is in progress. | restore 操作正在进行中\nOperationNotSupportedError | OperationNotSupported | 400 | The operation is not supported for this resource | 该资源暂不支持restore操作\nEntityTooLargeError | EntityTooLarge | 400 | Entity too large | 实体过大\nEntityTooSmallError | EntityTooSmall | 400 | Entity too small | 实体过小\nFileGroupTooLargeError | FileGroupTooLarge | 400 | File group too large | 文件组过大\nInvalidLinkNameError | InvalidLinkName | 400 | Link name can't be the same as the object name | Object Link 与指向的 Object 同名\nLinkPartNotExistError | LinkPartNotExist | 400 | Can't link to not exists object | Object Link 中指向的 Object 不存在\nObjectLinkTooLargeError | ObjectLinkTooLarge | 400 | Too many links to this object | Object Link 中 Object 个数过多\nFieldItemTooLongError | FieldItemTooLong | 400 | Post form fields items too large | Post 请求中表单域过大\nFilePartInterityError | FilePartInterity | 400 | File part has changed | 文件 Part 已改变\nFilePartNotExistError | FilePartNotExist | 400 | File part not exists | 文件 Part 不存在\nFilePartStaleError | FilePartStale| 400 | File part stale | 文件 Part 过时\nIncorrectNumberOfFilesInPOSTRequestError | IncorrectNumberOfFilesInPOSTRequest | 400 | Post request contains invalid number of files | Post 请求中文件个数非法\nInvalidArgumentError | InvalidArgument | 400 | Invalid format argument | 参数格式错误\nInvalidAccessKeyIdError | InvalidAccessKeyId | 400 | Access key id not exists | Access Key ID 不存在\nInvalidBucketNameError | InvalidBucketName | 400 | Invalid bucket name | 无效的 Bucket 名字\nInvalidDigestError | InvalidDigest | 400 | Invalid digest | 无效的摘要\nInvalidEncryptionAlgorithmError | InvalidEncryptionAlgorithm | 400 | Invalid encryption algorithm | 指定的熵编码加密算法错误\nInvalidObjectNameError | InvalidObjectName | 400 | Invalid object name | 无效的 Object 名字\nInvalidPartError | InvalidPart | 400 | Invalid part | 无效的 Part\nInvalidPartOrderError | InvalidPartOrder | 400 | Invalid part order | 无效的 part 顺序\nInvalidPolicyDocumentError | InvalidPolicyDocument | 400 | Invalid policy document | 无效的 Policy 文档\nInvalidTargetBucketForLoggingError | InvalidTargetBucketForLogging | 400 | Invalid bucket on logging operation | Logging 操作中有无效的目标 bucket\nInternalError | Internal | 500 | OSS server internal error | OSS 内部发生错误\nMalformedXMLError | MalformedXML | 400 | Malformed XML format | XML 格式非法\nMalformedPOSTRequestError | MalformedPOSTRequest | 400 | Invalid post body format | Post 请求的 body 格式非法\nMaxPOSTPreDataLengthExceededError | MaxPOSTPreDataLengthExceeded | 400 | Post extra data too large | Post 请求上传文件内容之外的 body 过大\nMethodNotAllowedError | MethodNotAllowed | 405 | Not allowed method | 不支持的方法\nMissingArgumentError | MissingArgument | 411 | Missing argument | 缺少参数\nMissingContentLengthError | MissingContentLength | 411 | Missing `Content-Length` header | 缺少内容长度\nNoSuchBucketError | NoSuchBucket | 404 | Bucket not exists | Bucket 不存在\nNoSuchKeyError | NoSuchKey | 404 | Object not exists | 文件不存在\nNoSuchUploadError | NoSuchUpload | 404 | Multipart upload id not exists | Multipart Upload ID 不存在\nNotImplementedError | NotImplemented | 501 | Not implemented | 无法处理的方法\nPreconditionFailedError | PreconditionFailed | 412 | Pre condition failed | 预处理错误\nRequestTimeTooSkewedError | RequestTimeTooSkewed | 403 | Request time exceeds 15 minutes to server time | 发起请求的时间和服务器时间超出 15 分钟\nRequestTimeoutError | RequestTimeout | 400 | Request timeout | 请求超时\nRequestIsNotMultiPartContentError | RequestIsNotMultiPartContent | 400 | Invalid post content-type | Post 请求 content-type 非法\nSignatureDoesNotMatchError | SignatureDoesNotMatch | 403 | Invalid signature | 签名错误\nTooManyBucketsError | TooManyBuckets | 400 | Too many buckets on this user | 用户的 Bucket 数目超过限制\nRequestError | RequestError | -1 | network error | 网络出现中断或异常\nConnectionTimeoutError | ConnectionTimeoutError | -2 | request connect timeout | 请求连接超时\nSecurityTokenExpiredError | SecurityTokenExpired | 403 | sts Security Token Expired | sts Security Token 超时失效\n\n[generator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n[oss-sts]: https://help.aliyun.com/document_detail/oss/practice/ram_guide.html\n[browser-sample]: https://github.com/rockuw/oss-in-browser\n[oss-multipart]: https://help.aliyun.com/document_detail/oss/api-reference/multipart-upload/InitiateMultipartUpload.html\n[disabled-browser-headers]: https://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n",
      "readmeFilename": "README.md",
      "_id": "ali-oss@6.4.0-beta",
      "_nodeVersion": "10.12.0",
      "_npmVersion": "6.13.0",
      "dist": {
        "integrity": "sha512-yvmmkcnJQrQn44RCZOiAT4FbdyRWtISAlAGGRA0vfNhG0j/dUQP51raCOtN7TN4CzsMIlRqbd0U2F/gzjjxjew==",
        "shasum": "49ef7aa28f21ebc94bd58da51c65ffae1a75e8ca",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.4.0-beta.tgz",
        "fileCount": 49,
        "unpackedSize": 3605561,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeEpJvCRA9TVsSAnZWagAA1WQP/RQlftfm5pC46izeHR/g\nGlRWveCr/0KfvrgY1OtDnn+h1ox6SS1GXlePGurjyYXYbQtw2FCFxAfttlHM\nhXuoHu2GjsbVNvijqMQONdQ9fZtJKUMfLdbpmncxyKgSbpcMJwWIq9rYyP+c\nZJIbRD6h6EcCoRp55OUIfUB60HUPQXnYuqOJOmgn2TN7IeJLm6sRZZxJREf2\nHr0yc5YuCfh6OgEK+PDoDs6bvCNjTUazAL34oYWJt9ILp7iRqQyUfMKjpdZs\nu5zDhdLhXZx18b+ELy8RNUITnqH5u7Dzqiej6g72QeR0k2xTMj47zgRtqy9k\nKyOjSM6nPf2wmYe4fLeNJ5ieTxBVTi2MUDOYNYLWtGnV8O+e0TL9pA6xtWRZ\nLMU4epV4JOflaq1AlYUxmF/INIQqjspFZ7yba42tOPHCfzC1ya56QTK0bMRD\naf28XEQ7kHc0YI1FX1GeydHgP7Z/ickszt9e0gLk7vJOMivEc01wW8IKIUV3\napiGypO/iKVTV5dkOg1GuRT+lKZyYyGbCIIyMjvFMee8NtldQpoUrW6SLu8Q\nlBkcHvjSF7T/K52sN44zEPXwwPol67ef4j4Ayg67CIpn0eA22lUZtesZ35Tq\nKl4Q/SBeqsBDy2fWKZa8+D57JyZoBF9VxZVEissdqbF8SBKD6yTALComoLil\n20tf\r\n=WRn4\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCLAXu+6/xkEQpoRjqBelhqdLVsO3f5zHB9HrrgmkHlBQIhAPRVEx7BE1lE5d+PCCtyhi9CbNHlE4ITNxMBKDvTBdMj"
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.4.0-beta_1578275439388_0.18811808117060713"
      },
      "_hasShrinkwrap": false
    },
    "6.4.0-beta-1": {
      "name": "ali-oss",
      "version": "6.4.0-beta-1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.min.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "node browser-build.js > test/browser/build/aliyun-oss-sdk.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^6.7.2",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.1.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "d65634af2613fb208af10c59f3459f7139f9afa8",
      "readme": "oss-js-sdk\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage][cov-image]][cov-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/ali-oss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/ali-oss\n[travis-image]: https://img.shields.io/travis/ali-sdk/ali-oss/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ali-sdk/ali-oss.svg?branch=master\n[cov-image]: http://codecov.io/github/ali-sdk/ali-oss/coverage.svg?branch=master\n[cov-url]: http://codecov.io/github/ali-sdk/ali-oss?branch=master\n[david-image]: https://img.shields.io/david/ali-sdk/ali-oss.svg?style=flat-square\n[david-url]: https://david-dm.org/ali-sdk/ali-oss\n\naliyun OSS(Object Storage Service) js client for Node and Browser env.\n\n`NOTE`： For SDK `5.X` document, please go to [README.md](https://github.com/ali-sdk/ali-oss/blob/5.x/README.md)\n\n## Install\n\n```bash\nnpm install ali-oss --save\n```\n\n## Compatibility\n\n### Node\nNode.js >= 8.0.0 required. You can use 4.x in Node.js < 8.\n\n### Browser\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n\n`Note`:\n- For Lower browsers you can refer to [PostObject](https://help.aliyun.com/document_detail/31988.html), if you want to see more practices ,please refer to [Web Post](https://help.aliyun.com/document_detail/31923.html)\n\n## License\n\n[MIT](LICENSE)\n\n# OSS Usage\n\nOSS, Object Storage Service. Equal to well known Amazon [S3](http://aws.amazon.com/s3/).\n\nAll operation use es7 async/await to implement. All api is async function.\n\n## Summary\n\n- [Node Usage](#node-usage)\n- [Browser Usage](#browser-usage)\n- [Data Regions](#data-regions)\n- [Create Account](#create-acount)\n- [Create A Bucket Instance](#create-a-bucket-instance)\n  - [oss(options)](#ossoptions)\n- [Bucket Operations](#bucket-operations)\n  - Base\n    - [.listBuckets(query[, options])](#listbucketsquery-options)\n    - [.putBucket(name[, options])](#putbucketname-options)\n    - [.useBucket(name)](#usebucketname)\n    - [.deleteBucket(name[, options])](#deletebucketname-options)\n    - [.getBucketInfo(name)](#getbucketinfoname)\n    - [.getBucketLocation(name)](#getbucketlocationname)\n  - ACL\n    - [.putBucketACL(name, acl[, options])](#putbucketaclname-acl-options)\n    - [.getBucketACL(name[, options])](#getbucketaclname-options)\n  - Logging\n    - [.putBucketLogging(name, prefix[, options])](#putbucketloggingname-prefix-options)\n    - [.getBucketLogging(name[, options])](#getbucketloggingname-options)\n    - [.deleteBucketLogging(name[, options])](#deletebucketloggingname-options)\n  - Website\n    - [.putBucketWebsite(name, config[, options])](#putbucketwebsitename-config-options)\n    - [.getBucketWebsite(name[, options])](#getbucketwebsitename-options)\n    - [.deleteBucketWebsite(name, region[, options])](#deletebucketwebsitename-options)\n  - Referer\n    - [.putBucketReferer(name, allowEmpty, referers[, options])](#putbucketreferername-allowempty-referers-options)\n    - [.getBucketReferer(name[, options])](#getbucketreferername-options)\n    - [.deleteBucketReferer(name[, options])](#deletebucketreferername-options)\n  - Lifecycle\n    - [.putBucketLifecycle(name, rules[, options])](#putbucketlifecyclename-rules-options)\n    - [.getBucketLifecycle(name[, options])](#getbucketlifecyclename-options)\n    - [.deleteBucketLifecycle(name[, options])](#deletebucketlifecyclename-options)\n  - CORS\n    - [.putBucketCORS(name, rules[, options])](#putbucketcorsname-rules-options)\n    - [.getBucketCORS(name[, options])](#getbucketcorsname-options)\n    - [.deleteBucketCORS(name[, options])](#deletebucketcorsname-options)\n  - RequestPayment\n    - [.getBucketRequestPayment(bucketName[, options])](#getbucketrequestpaymentbucketname-options)\n    - [.putBucketRequestPayment(bucketName, payer[, options])](#putBucketRequestpaymentbucketname-payer-options)\n  - BucketEncryption\n    - [.putBucketEncryption(name[, options])](#putbucketencryptionbucketname-options)\n    - [.getBucketEncryption(name)](#getbucketencryptionbucketname-options)\n    - [.deleteBucketEncryption(name)](#deletebucketencryptionbucketname-options)\n- [Object Operations](#object-operations)\n  - [.list(query[, options])](#listquery-options)\n  - [.put(name, file[, options])](#putname-file-options)\n  - [.putStream(name, stream[, options])](#putstreamname-stream-options)\n  - [.append(name, file[, options])](#appendname-file-options)\n  - [.getObjectUrl(name[, baseUrl])](#getobjecturlname-baseurl)\n  - [.generateObjectUrl(name[, baseUrl])](#generateobjecturlname-baseurl)\n  - [.head(name[, options])](#headname-options)\n  - [.getObjectMeta(name)](#getobjectmetaname)\n  - [.get(name[, file, options])](#getname-file-options)\n  - [.getStream(name[, options])](#getstreamname-options)\n  - [.delete(name[, options])](#deletename-options)\n  - [.copy(name, sourceName[, sourceBucket, options])](#copyname-sourcename-sourcebucket-options)\n  - [.putMeta(name, meta[, options])](#putmetaname-meta-options)\n  - [.deleteMulti(names[, options])](#deletemultinames-options)\n  - [.signatureUrl(name[, options])](#signatureurlname-options)\n  - [.putACL(name, acl[, options])](#putaclname-acl-options)\n  - [.getACL(name[, options])](#getaclname-options)\n  - [.restore(name[, options])](#restorename-options)\n  - [.putSymlink(name, targetName[, options])](#putsymlinkname-targetname-options)\n  - [.getSymlink(name[, options])](#getsymlinkname-options)\n  - [.initMultipartUpload(name[, options])](#initmultipartuploadname-options)\n  - [.uploadPart(name, uploadId, partNo, file, start, end[, options])](#uploadpartname-uploadid-partno-file-start-end-options)\n  - [.uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])](#uploadpartcopyname-uploadid-partno-range-sourcedata-options)\n  - [.completeMultipartUpload(name, uploadId, parts[, options])](#completemultipartuploadname-uploadid-parts-options)\n  - [.multipartUpload(name, file[, options])](#multipartuploadname-file-options)\n  - [.multipartUploadCopy(name, sourceData[, options])](#multipartuploadcopyname-sourcedata-options)\n  - [.listParts(name, uploadId[, query, options])](#listparts-name-uploadid-query-options)\n  - [.listUploads(query[, options])](#listuploadsquery-options)\n  - [.abortMultipartUpload(name, uploadId[, options])](#abortmultipartuploadname-uploadid-options)\n- [RTMP Operations](#rtmp-operations)\n  - [.putChannel(id, conf[, options])](#putchannelid-conf-options)\n  - [.getChannel(id[, options])](#getchannelid-options)\n  - [.deleteChannel(id[, options])](#deletechannelid-options)\n  - [.putChannelStatus(id, status[, options])](#putchannelstatusid-status-options)\n  - [.getChannelStatus(id[, options])](#getchannelstatusid-options)\n  - [.listChannels(query[, options])](#listchannelsquery-options)\n  - [.getChannelHistory(id[, options])](#getchannelhistoryid-options)\n  - [.createVod(id, name, time[, options])](#createvodid-name-time-options)\n  - [.getRtmpUrl(channelId[, options])](#getrtmpurlchannelid-options)\n- [Create A Image Service Instance](#create-a-image-service-instance)\n  - [oss.ImageClient(options)](#ossimageclientoptions)\n- [Image Operations](#image-operations)\n  - [imgClient.get(name, file[, options])](#imgclientgetname-file-options)\n  - [imgClient.getStream(name[, options])](#imgclientgetstreamname-options)\n  - [imgClient.getExif(name[, options])](#imgclientgetexifname-options)\n  - [imgClient.getInfo(name[, options])](#imgclientgetinfoname-options)\n  - [imgClient.putStyle(name, style[, options])](#imgclientputstylename-style-options)\n  - [imgClient.getStyle(name[, options])](#imgclientgetstylename-options)\n  - [imgClient.listStyle([options])](#imgclientliststyleoptions)\n  - [imgClient.deleteStyle(name[, options])](#imgclientdeletestylename-options)\n  - [imgClient.signatureUrl(name)](#imgclientsignatureurlname)\n- [Known Errors](#known-errors)\n\n## Node Usage\n\n### Compatibility\n- Node: >= 8.0.0\n\n### Basic usage\n1.install SDK using npm\n```\nnpm install ali-oss --save\n```\n2.for example:\n```js\nconst OSS = require('ali-oss');\nconst client = new OSS({\n  region: '<oss region>',\n  accessKeyId: '<Your accessKeyId>',\n  accessKeySecret: '<Your accessKeySecret>',\n  bucket: '<Your bucket name>'\n});\n```\n## Browser Usage\n\nYou can use most of the functionalities of `ali-oss` in browser with\nsome exceptions:\n\n- put object with streaming: no chunked encoding, we use multipart\n  upload instead\n- get object to local file: we cannot manipulate file system in\n  browser, we provide signed object url for downloading needs\n- bucket operations(listBuckets, putBucketLogging, etc) will fail: OSS\n  server currently do not support CORS requests for bucket operations\n  (will probably be fixed later)\n\n### Compatibility\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n    >Note: Because some browsers do not support promises, you need to introduce promise compatible libraries.<br>\n    For example: IE10 and IE11 need to introduce a promise-polyfill.\n\n### Setup\n\n#### Bucket setup\n\nAs browser-side javascript involves CORS operations. You need to setup\nyour bucket CORS rules to allow CORS operations:\n\n- set allowed origins to '\\*'\n- allowed methods to 'PUT, GET, POST, DELETE, HEAD'\n- set allowed headers to '\\*'\n- expose 'ETag' in expose headers\n\n#### STS setup\n\nAs we don't want to expose the accessKeyId/accessKeySecret in the\nbrowser, a [common practice][oss-sts] is to use STS to grant temporary\naccess.\n\n### Basic usage\n\nInclude the sdk lib in the `<script>` tag and you have `OSS` available\nfor creating client.\n\n```html\n // x.x.x The specific version number represented\n // we recommend introducing offline resources, because the usability of online resources depends on the stability of the cdn server.\n <!-- Introducing online resources -->\n <script src=\"http://gosspublic.alicdn.com/aliyun-oss-sdk-x.x.x.min.js\"></script>\n <!-- Introducing offline resources -->\n <script src=\"./aliyun-oss-sdk-x.x.x.min.js\"></script>\n\n<script type=\"text/javascript\">\n  const client = new OSS({\n    region: 'oss-cn-hangzhou',\n    accessKeyId: '<access-key-id>',\n    accessKeySecret: '<access-key-secret>',\n    bucket: '<bucket-name>',\n    stsToken: '<security-token>'\n  });\n\n  client.list().then((result) => {\n    console.log('objects: %j', result.objects);\n    return client.put('my-obj', new OSS.Buffer('hello world'));\n  }).then((result) => {\n    console.log('put result: %j', result);\n    return client.get('my-obj');\n  }).then((result) => {\n    console.log('get result: %j', result.content.toString());\n  });\n</script>\n```\nThe full sample can be found [here][browser-sample].\n\n### How to build\n\n```bash\nnpm run build-dist\n```\n\nAnd see the build artifacts under `dist/`.\n\n\n## Data Regions\n\n[OSS current data regions](https://help.aliyun.com/document_detail/oss/user_guide/endpoint_region.html).\n\nregion | country | city | endpoint | internal endpoint\n---  | ---     | ---  | --- | ---\noss-cn-hangzhou | China | HangZhou | oss-cn-hangzhou.aliyuncs.com | oss-cn-hangzhou-internal.aliyuncs.com\noss-cn-shanghai | China | ShangHai | oss-cn-shanghai.aliyuncs.com | oss-cn-shanghai-internal.aliyuncs.com\noss-cn-qingdao | China | QingDao | oss-cn-qingdao.aliyuncs.com | oss-cn-qingdao-internal.aliyuncs.com\noss-cn-beijing | China | BeiJing | oss-cn-beijing.aliyuncs.com | oss-cn-beijing-internal.aliyuncs.com\noss-cn-shenzhen | China | ShenZhen | oss-cn-shenzhen.aliyuncs.com | oss-cn-shenzhen-internal.aliyuncs.com\noss-cn-hongkong | China | HongKong | oss-cn-hongkong.aliyuncs.com | oss-cn-hongkong-internal.aliyuncs.com\noss-us-west-1 | US | Silicon Valley | oss-us-west-1.aliyuncs.com | oss-us-west-1-internal.aliyuncs.com\noss-ap-southeast-1 | Singapore | Singapore | oss-ap-southeast-1.aliyuncs.com | oss-ap-southeast-1-internal.aliyuncs.com\n\n## Create Account\n\nGo to [OSS website](http://www.aliyun.com/product/oss/?lang=en), create a new account for new user.\n\nAfter account created, you can create the OSS instance and get the `accessKeyId` and `accessKeySecret`.\n\n## Create A Bucket Instance\n\nEach OSS instance required `accessKeyId`, `accessKeySecret` and `bucket`.\n\n## oss(options)\n\nCreate a Bucket store instance.\n\noptions:\n\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- [stsToken] {String} used by temporary authorization, detail [see](https://www.alibabacloud.com/help/doc-detail/32077.htm)\n- [bucket] {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [endpoint] {String} oss region domain. It takes priority over `region`.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`.\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`.\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [secure] {Boolean} instruct OSS client to use HTTPS (secure: true) or HTTP (secure: false) protocol.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`.\n- [cname] {Boolean}, default false, access oss with custom domain name. if true, you can fill `endpoint` field with your custom domain name,\n- [isRequestPay] {Boolean}, default false, whether request payer function of the bucket is open, if true, will send headers `'x-oss-request-payer': 'requester'` to oss server.\n  the details you can see [requestPay](https://help.aliyun.com/document_detail/91337.htm)\n- [useFetch] {Boolean}, default false, it just work in Browser, if true,it means upload object with \n`fetch` mode ,else `XMLHttpRequest`\n\nexample:\n\n```js\nconst oss = require('ali-oss');\n\nconst store = oss({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\n```\n\n## Bucket Operations\n\n### .listBuckets(query[, options])\n\nList buckets in this account.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search buckets using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [max-keys] {String|Number} max buckets, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return buckets list on `buckets` properties.\n\n- buckets {Array<BucketMeta>} bucket meta info list\n  Each `BucketMeta` will contains blow properties:\n    - name {String} bucket name\n    - region {String} bucket store data region, e.g.: `oss-cn-hangzhou-a`\n    - creationDate {String} bucket create GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n- owner {Object} object owner, including `id` and `displayName`\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 buckets\n\n```js\nstore.listBuckets({\n  \"max-keys\": 10\n}).then((result) => {\n  console.log(result);\n});\n\n```\n\n### .putBucket(name[, options])\n\nCreate a new bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket exists and not belong to current account, will throw BucketAlreadyExistsError.\n  If bucket not exists, will create a new bucket and set it's ACL.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [StorageClass] {String} the storage type include (Standard,IA,Archive)\n\nSuccess will return the bucket name on `bucket` properties.\n\n- bucket {String} bucket name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Create a bucket name `helloworld` location on HongKong\n\n```js\nstore.putBucket('helloworld').then((result) => {\n  // use it by default\n  store.useBucket('helloworld');\n});\n```\n\n- Create a bucket name `helloworld` location on HongKong StorageClass `Archive`\n\n```js\nawait store.putBucket('helloworld', { StorageClass: 'Archive' });\n// use it by default\nstore.useBucket('helloworld');\n```\n\n### .deleteBucket(name[, options])\n\nDelete an empty bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket is not empty, will throw BucketNotEmptyError.\n  If bucket is not exists, will throw NoSuchBucketError.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete the exists 'helloworld' bucket on 'oss-cn-hongkong'\n\n```js\nstore.deleteBucket('helloworld').then((result) => {});\n```\n\n### .useBucket(name)\n\nUse the bucket.\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.useBucket('helloworld');\n```\n\n### .getBucketInfo(name)\n\nGet bucket information,include CreationDate、ExtranetEndpoint、IntranetEndpoint、Location、Name、StorageClass、\nOwner、AccessControlList\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketInfo('helloworld').then( (res) => {\n  console.log(res.bucket)\n})\n```\n\n### .getBucketLocation(name)\n\nGet bucket location\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketLocation('helloworld').then( (res) => {\n  console.log(res.location)\n})\n```\n\n---\n\n### .putBucketACL(name, acl[, options])\n\nUpdate the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- acl {String} access control list, current available: `public-read-write`, `public-read` and `private`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set bucket `helloworld` to `public-read-write`\n\n```js\nstore.putBucketACL('helloworld', 'public-read-write').then((result) => {\n});\n```\n\n### .getBucketACL(name[, options])\n\nGet the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld`\n\n```js\nstore.getBucketACL('helloworld').then((result) => {\n  console.log(result.acl);\n});\n```\n\n---\n\n### .putBucketLogging(name, prefix[, options])\n\nUpdate the bucket logging settings.\nLog file will create every one hour and name format: `<prefix><bucket>-YYYY-mm-DD-HH-MM-SS-UniqueString`.\n\nparameters:\n\n- name {String} bucket name\n- [prefix] {String} prefix path name to store the log files\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Enable bucket `helloworld` logging and save with prefix `logs/`\n\n```js\nstore.putBucketLogging('helloworld', 'logs/').then((result) => {\n});\n```\n\n### .getBucketLogging(name[, options])\n\nGet the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- enable {Boolean} enable logging or not\n- prefix {String} prefix path name to store the log files, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld` logging settings\n\n```js\nstore.getBucketLogging('helloworld').then((result) => {\n  console.log(result.enable, result.prefix);\n});\n```\n\n### .deleteBucketLogging(name[, options])\n\nDelete the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketWebsite(name, config[, options])\n\nSet the bucket as a static website.\n\nparameters:\n\n- name {String} bucket name\n- config {Object} website config, contains blow properties:\n  - index {String} default page, e.g.: `index.html`\n  - [error] {String} error page, e.g.: 'error.html'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketWebsite('hello', {\n  index: 'index.html'\n}).then((result) => {\n});\n```\n\n### .getBucketWebsite(name[, options])\n\nGet the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- index {String} index page\n- error {String} error page, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketWebsite(name[, options])\n\nDelete the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketReferer(name, allowEmpty, referers[, options])\n\nSet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list, e.g.:\n  ```js\n  [\n    'https://npm.taobao.org',\n    'http://cnpmjs.org'\n  ]\n  ```\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketReferer('hello', false, [\n  'https://npm.taobao.org',\n  'http://cnpmjs.org'\n]).then((result) => {\n});\n```\n\n### .getBucketReferer(name[, options])\n\nGet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketReferer(name[, options])\n\nDelete the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketLifecycle(name, rules[, options])\n\nSet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains blow properties:\n  - [id] {String} rule id, if not set, OSS will auto create it with random string.\n  - prefix {String} store prefix\n  - status {String} rule status, allow values: `Enabled` or `Disabled`\n  - [days] {Number|String} expire after the `days`\n  - [date] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `date` and `days` only set one.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketLifecycle('hello', [\n  {\n    id: 'delete after one day',\n    prefix: 'logs/',\n    status: 'Enabled',\n    days: 1\n  },\n  {\n    prefix: 'logs2/',\n    status: 'Disabled',\n    date: '2022-10-11T00:00:00.000Z'\n  }\n]).then((result) => {});\n```\n\n### .getBucketLifecycle(name[, options])\n\nGet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the lifecycle rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketLifecycle(name[, options])\n\nDelete the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketCORS(name, rules[, options])\n\nSet CORS rules of the bucket object\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains below properties:\n  - allowedOrigin {String/Array} configure for Access-Control-Allow-Origin header\n  - allowedMethod {String/Array} configure for Access-Control-Allow-Methods header\n  - [allowedHeader] {String/Array} configure for Access-Control-Allow-Headers header\n  - [exposeHeader] {String/Array} configure for Access-Control-Expose-Headers header\n  - [maxAgeSeconds] {String} configure for Access-Control-Max-Age header\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketCORS('hello', [\n  {\n    allowedOrigin: '*',\n    allowedMethod: [\n      'GET',\n      'HEAD',\n    ],\n  }\n]).then((result) => {});\n```\n\n### .getBucketCORS(name[, options])\n\nGet CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the CORS rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketCORS(name[, options])\n\nDelete CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .getBucketRequestPayment(bucketName[, options])\n\nget RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String} bucket name\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- payer {String} payer, BucketOwner or Requester\n- res {Object} response info, including\n  - data {Buffer} xml\n\n---\n\n### .putBucketRequestPayment(bucketName, payer[, options])\n\nput RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String}\n- payer {String} payer\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketEncryption(name, rules)\n\nput BucketEncryption value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [rules] {Object} parameters\n  - SSEAlgorithm {String} encryption type, expect AES256 or KMS\n  - {KMSMasterKeyID} {String} needed when encryption type is KMS\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketEncryption(name)\n\nget BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n- encryption {Object} rules\n  - SSEAlgorithm {String} encryption type, AES256 or KMS\n  - {KMSMasterKeyID} {String} will be return when encryption type is KMS\n\n---\n\n### .deleteBucketEncryption(name)\n\ndelete BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n## Object Operations\n\nAll operations function return Promise, except `signatureUrl`.\n\n### .put(name, file[, options])\n\nAdd an object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream|File(only support Browser)|Blob(only support Browser)} object local path, content buffer or ReadStream content instance use in Node, Blob and html5 File\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - See more: [PutObject](https://help.aliyun.com/document_detail/31978.html#title-yxe-96d-x61)\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- data {Object} callback server response data, sdk use JSON.parse() return\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through local file path\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/demo.txt', filepath).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/demo.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829244'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through content buffer\n\n```js\nstore.put('ossdemo/buffer', Buffer.from('foo content')).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/buffer',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/buffer',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"xxx\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829243'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .putStream(name, stream[, options])\n\nAdd a stream object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- stream {ReadStream} object ReadStream content instance\n- [options] {Object} optional parameters\n  - [contentLength] {Number} the stream length, `chunked encoding` will be used if absent\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.putStream('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .append(name, file[, options])\n\nAppend an object to the bucket, it's almost same as put, but it can add content to existing object rather than override it.\n\nAll parameters are same as put except for options.position\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [position] {String} specify the position which is the content length of the latest object\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nobject:\n\n- name {String} object name\n- url {String} the url of oss\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- nextAppendPosition {String} the next position\n\nexample:\n\n```js\nlet object = await store.append('ossdemo/buffer', Buffer.from('foo'));\n\n// append content to the existing object\nobject = await store.append('ossdemo/buffer', Buffer.from('bar'), {\n  position: object.nextAppendPosition,\n});\n```\n\n### .getObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `endpoint`.\n\ne.g.:\n\n```js\nconst cdnUrl = client.getObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .generateObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `bucket and endpoint `.\nSuggest use generateObjectUrl instead of getObjectUrl.\n\ne.g.:\n\n```js\nconst url = client.generateObjectUrl('foo/bar.jpg');\n// cdnUrl should be `https://${bucketname}.${endpotint}foo/bar.jpg`\n\nconst cdnUrl = client.generateObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .head(name[, options])\n\nHead an object and get the meta info.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status, maybe 200 or 304\n- meta {Object} object user meta, if not set on `put()`, will return null.\n    If return status 304, meta will be null too\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Head an exists object and get user meta\n\n```js\nawait this.store.put('ossdemo/head-meta', Buffer.from('foo'), {\n  meta: {\n    uid: 1,\n    path: 'foo/demo.txt'\n  }\n});\nconst object = await this.store.head('ossdemo/head-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  meta: {\n    uid: '1',\n    path: 'foo/demo.txt'\n  },\n  res: { ... }\n}\n```\n\n- Head a not exists object\n\n```js\nconst object = await this.store.head('ossdemo/head-meta');\n// will throw NoSuchKeyError\n```\n\n### .getObjectMeta(name)\n\nGet an  object meta info include ETag、Size、LastModified and so on, not return object content.\n\nparameters:\n\n- name {String} object name store on OSS\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info, including\n  - headers {Object} response headers\n\nexample:\n\n- Head an exists object and get object meta info\n\n```js\nawait this.store.put('ossdemo/object-meta', Buffer.from('foo'));\nconst object = await this.store.getObjectMeta('ossdemo/object-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  res: { ... }\n}\n```\n\n### .get(name[, file, options])\n\nGet an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the content\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Range' get specifying range bytes content, e.g.: `Range: bytes=0-9`\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/demo.txt', filepath);\n```\n\n_ Store object to a writestream\n\n```js\nawait store.get('ossdemo/demo.txt', somestream);\n```\n\n- Get an object content buffer\n\n```js\nconst result = await store.get('ossdemo/demo.txt');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a processed image and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.png';\nawait store.get('ossdemo/demo.png', filepath, {process: 'image/resize,w_200'});\n```\n\n- Get a not exists object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/not-exists-demo.txt', filepath);\n// will throw NoSuchKeyError\n```\n\n### .getStream(name[, options])\n\nGet an object read stream.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object stream\n\n```js\nconst result = await store.getStream('ossdemo/demo.txt');\nresult.stream.pipe(fs.createWriteStream('some file.txt'));\n```\n\n### .delete(name[, options])\n\nDelete an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf delete object not exists, will also delete success.\n\nexample:\n\n- Delete an exists object\n\n```js\nawait store.delete('ossdemo/someobject');\n```\n\n- Delete a not exists object\n\n```js\nawait store.delete('ossdemo/some-not-exists-object');\n```\n\n### .copy(name, sourceName[, sourceBucket, options])\n\nCopy an object from `sourceName` to `name`.\n\nparameters:\n\n- name {String} object name store on OSS\n- sourceName {String} source object name\n- [sourceBucket] {String} source Bucket. if doesn't exist，`sourceBucket` is same bucket. \n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n    If the `meta` set, will override the source object meta.\n  - [headers] {Object} extra headers\n    - 'If-Match' do copy if source object etag equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' do copy if source object etag not equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-Modified-Since' do copy if source object modified after this time,\n        otherwise throw PreconditionFailedError\n    - 'If-Unmodified-Since' do copy if source object modified before this time,\n        otherwise throw PreconditionFailedError\n    - See more: [CopyObject](https://help.aliyun.com/document_detail/31979.html?#title-tzy-vxc-ncx)\n\nSuccess will return the copy result in `data` property.\n\nobject:\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT string\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf source object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Copy same bucket object\n\n```js\nstore.copy('newName', 'oldName').then((result) => {\n  console.log(result);\n});\n```\n\n- Copy other bucket object\n\n```js\nstore.copy('logo.png', 'logo.png', 'other-bucket').then((result) => {\n  console.log(result);\n});\n```\n\n### .putMeta(name, meta[, options])\n\nSet an exists object meta.\n\nparameters:\n\n- name {String} object name store on OSS\n- meta {Object} user meta, will send with `x-oss-meta-` prefix string\n  e.g.: `{ uid: 123, pid: 110 }`\n  If `meta: null`, will clean up the exists meta\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the putMeta result in `data` property.\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Update exists object meta\n\n```js\nconst result = await store.putMeta('ossdemo.txt', {\n  uid: 1, pid: 'p123'\n});\nconsole.log(result);\n```\n\n- Clean up object meta\n\n```js\nawait store.putMeta('ossdemo.txt', null);\n```\n\n### .deleteMulti(names[, options])\n\nDelete multi objects in one request.\n\nparameters:\n\n- names {Array<String>} object names, max 1000 objects in once.\n- [options] {Object} optional parameters\n  - [quiet] {Boolean} quiet mode or verbose mode, default is `false`, verbose mode\n    quiet mode: if all objects delete succes, return emtpy response.\n      otherwise return delete error object results.\n    verbose mode: return all object delete results.\n  - [timeout] {Number} the operation timeout\n\nSuccess will return delete success objects in `deleted` property.\n\n- [deleted] {Array<String>} deleted object names list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete multi objects in quiet mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3'], {\n  quiet: true\n});\n```\n\n- Delete multi objects in verbose mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3']);\n```\n\n### .list(query[, options])\n\nList objects in the bucket.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 objects\n\n```js\nconst result = await store.list();\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nconst result = await store.list({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nconst result = await store.list({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n### .signatureUrl(name[, options])\n\nCreate a signature url for download or upload object. When you put object with signatureUrl ,you need to pass `Content-Type`.Please look at the example.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [method] {String} the HTTP method, default is 'GET'\n  - [Content-Type] {String} set the request content type\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [response] {Object} set the response headers for download\n    - [content-type] {String} set the response content type\n    - [content-disposition] {String} set the response content disposition\n    - [cache-control] {String} set the response cache control\n    - See more: https://help.aliyun.com/document_detail/oss/api-reference/object/GetObject.html\n  - [callback] {Object} set the callback for the operation\n    - url {String} set the url for callback\n    - [host] {String} set the host for callback\n    - body {String} set the body for callback\n    - [contentType] {String} set the type for body\n    - [customValue] {Object} set the custom value for callback,eg. {var1: value1,var2:value2}\n\nSuccess will return signature url.\n\nexample:\n\n- Get signature url for object\n\n```js\nconst url = store.signatureUrl('ossdemo.txt');\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT'\n});\nconsole.log(url);\n\n//  put object with signatureUrl\n// -------------------------------------------------\n\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT',\n  'Content-Type': 'text/plain; charset=UTF-8',\n});\nconsole.log(url);\n\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  response: {\n    'content-type': 'text/custom',\n    'content-disposition': 'attachment'\n  }\n});\nconsole.log(url);\n\n// put operation\n```\n\n- Get a signature url for a processed image\n\n```js\nconst url = store.signatureUrl('ossdemo.png', {\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.png', {\n  expires: 3600,\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n```\n\n### .putACL(name, acl[, options])\n\nSet object's ACL.\n\nparameters:\n\n- name {String} object name\n- acl {String} acl (private/public-read/public-read-write)\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set an object's ACL\n\n```js\nawait store.putACL('ossdemo.txt', 'public-read');\n```\n\n### .getACL(name[, options])\n\nGet object's ACL.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get an object's ACL\n\n```js\nconst result = await store.getACL('ossdemo.txt');\nconsole.log(result.acl);\n```\n\n### .restore(name[, options])\n\nRestore Object.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Restore an object\n\n```js\nconst result = await store.restore('ossdemo.txt');\nconsole.log(result.status);\n```\n\n### .putSymlink(name, targetName[, options])\n\nPutSymlink\n\nparameters:\n\n- name {String} object name\n- targetName {String} target object name\n- [options] {Object} optional parameters\n  - [storageClass] {String} the storage type include (Standard,IA,Archive)\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers, detail see [PutSymlink](https://help.aliyun.com/document_detail/45126.html#title-x71-l2b-7i8)\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst options = {\n  storageClass: 'IA',\n  meta: {\n    uid: '1',\n    slus: 'test.html' \n  }\n}\nconst result = await store.putSymlink('ossdemo.txt', 'targetName', options)\nconsole.log(result.status)\n```\n\n### .getSymlink(name[, options])\n\nGetSymlink\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n\nSuccess will return\n\n- targetName {String} target object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst result = await store.getSymlink('ossdemo.txt')\nconsole.log(result.targetName)\n```\n\n### .initMultipartUpload(name[, options])\nBefore transmitting data in the Multipart Upload mode,\nyou must call the Initiate Multipart Upload interface to notify the OSS to initiate a Multipart Upload event.\nThe Initiate Multipart Upload interface returns a globally unique Upload ID created by the OSS server to identify this Multipart Upload event.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] Mime file type e.g.: application/octet-stream\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - [x-oss-server-side-encryption]\n    Specify the server-side encryption algorithm used to upload each part of this object,Type: string, Valid value: AES256 `x-oss-server-side-encryption: AES256`<br>\n    if use in browser you should be set cors expose header x-oss-server-side-encryption\n    - See more: [InitiateMultipartUpload](https://help.aliyun.com/document_detail/31992.html?#title-wh0-a2h-rur)\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-server-side-encryption] if set request header x-oss-server-side-encryption, will return\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- uploadId {String} upload id, use for uploadPart, completeMultipart\n\nexample:\n\n```js\n  const result = await store.initMultipartUpload('object');\n  console.log(result);\n```\n\n### .uploadPart(name, uploadId, partNo, file, start, end[, options])\nAfter initiating a Multipart Upload event, you can upload data in parts based on the specified object name and Upload ID.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- file {File|String}  is File or FileName, the whole file<br>\n Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB. <br>\n In Node you can use File or FileName, but in browser you only can use File.\n- start {Number} part start bytes  e.g: 102400\n- end {Number} part end bytes  e.g: 204800\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n  const uploadId = result.uploadId;\n  const file; //the data you want to upload, is a File or FileName(only in node)\n  //if file part is 10\n  const partSize = 100 * 1024;\n  const fileSize = 10 * partSize;//you need to calculate\n  const dones = [];\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const part = await store.uploadPart(name, uploadId, i, file, start, end);\n    dones.push({\n      number: i,\n      etag: part.etag\n    });\n    console.log(part);\n  }\n\n  //end need to call completeMultipartUpload api\n```\n\n### .uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])\nUsing Upload Part Copy, you can copy data from an existing object and upload a part of the data.\nWhen copying a file larger than 1 GB, you must use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- range {String} Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB, range value like `0-102400`\n- sourceData {Object}\n  - sourceKey {String} the source object name\n  - sourceBucketName {String} the source bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} The following request header is used for the source objects specified by x-oss-copy-source.\n    - [x-oss-copy-source-if-match]  default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]   default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]   default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since]   default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  const partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const range = start + '-' + (end - 1);\n    const part = await store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n### .completeMultipartUpload(name, uploadId, parts[, options])\nAfter uploading all data parts, you must call the Complete Multipart Upload API to complete Multipart Upload for the entire file.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- parts {Array} more part {Object} from uploadPartCopy, , each in the structure:\n  - number {Number} partNo\n  - etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [CompleteMultipartUpload](https://help.aliyun.com/document_detail/31995.html?#title-nan-5y3-rjd)\n\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data , sdk use JSON.parse() return\n\nexample:\n\n```js\n\n  //init multipart\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  //upload part\n  const file; //the data you want to upload, this example size is 10 * 100 * 1024\n  const fileSize;//you need to calculate\n  const partSize = 100 * 1024;//100kb\n  const done = [];\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const data = file.slice(start, end);\n    const part = yield store.uploadPart(name, result.uploadId, i, data);\n    console.log(part);\n    done.push({\n          number: i,\n          etag: part.res.headers.etag\n        });\n  }\n\n  //complete\n  const completeData = await store.completeMultipartUpload(name, result.uploadId, done);\n  console.log(completeData);\n```\n\n\n### .multipartUpload(name, file[, options])\n\nUpload file with [OSS multipart][oss-multipart].<br>\nthis function contains initMultipartUpload, uploadPart, completeMultipartUpload.\nWhen you use multipartUpload api，if you encounter problems with ConnectionTimeoutError, you should handle ConnectionTimeoutError in your business code. How to resolve ConnectionTimeoutError, you can decrease `partSize` size 、 Increase `timeout` 、Retry request ,\nor give tips in your business code;\n\nparameters:\n\n- name {String} object name\n- file {String|File(only support Browser)|Blob(only support Browser)} file path or HTML5 Web File or web Blob\n- [options] {Object} optional args\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n    - file {File} The file object selected by the user, if the browser is restarted, it needs the user to manually trigger the settings\n    - name {String} object key\n    - fileSize {Number} file size\n    - partSize {Number} part size\n    - uploadId {String} upload id\n    - doneParts {Array} An array of pieces that have been completed, including the object structure as follows\n       - number {Number} part number\n       - etag {String} part etag\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [mime] {String} custom mime , will send with `Content-Type` entity header\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n          e.g.:\n         ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n         ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data, sdk use JSON.parse() return\n\nexample:\n\n- Upload using multipart\n\n```js\nconst result = await store.multipartUpload('object', '/tmp/file');\nconsole.log(result);\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) { //progress is generator\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\n```\n\n- multipartUpload progress example\n\n```js\n\n//async function\nasync function asyncProgress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result1 = await store.multipartUpload('object', '/tmp/file', {\n  progress: asyncProgress\n});\n\n//function\nfunction progress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result2 = await store.multipartUpload('object', '/tmp/file', {\n  progress: progress\n});\n\n```\n\n- multipartUpload with cancel\n\n>tips: cancel multipartUpload support on node and browser\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n- multipartUpload with capture `ConnectionTimeoutError`  error\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  if (err.code === 'ConnectionTimeoutError') {\n    console.log(\"Woops,Woops ,timeout error!!!\");\n    // do ConnectionTimeoutError operation\n  }\n}\n\n```\n\n### .multipartUploadCopy(name, sourceData[, options])\n\nCopy file with [OSS multipart][oss-multipart]. <br>\nthis function contains head, initMultipartUpload, uploadPartCopy, completeMultipartUpload.<br>\nWhen copying a file larger than 1 GB, you should use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [copyheaders] {Object} only uploadPartCopy api used, detail [see](https://www.alibabacloud.com/help/doc-detail/31994.htm)\n    - [x-oss-copy-source-if-match]  only uploadPartCopy api used, default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]  only uploadPartCopy api used, default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]  only uploadPartCopy api used, default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since] only uploadPartCopy api used, default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n- Copy using multipart\n\n```js\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n});\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\n```\n- multipartUploadCopy with cancel\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n### .listParts(name, uploadId[, query, options])\n\nThe ListParts command can be used to list all successfully uploaded parts mapped to a specific upload ID, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- name {String} object key\n- uploadId {String} upload ID from initMultipartUpload api\n- [query] {Object} query parameters\n  - [max-parts] {Number} The maximum part number in the response of the OSS. default value: 1000.\n  - [part-number-marker] {Number} Starting position of a specific list. A part is listed only when the part number is greater than the value of this parameter.\n  - [encoding-type] {String} Specify the encoding of the returned content and the encoding type. Optional value: url\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- uploadId {String} upload ID\n- bucket {String} Specify the bucket name.\n- name {String} object name\n- PartNumberMarker {Number} Starting position of the part numbers in the listing result.\n- nextPartNumberMarker {Number} If not all results are returned this time, the response request includes the NextPartNumberMarker element to indicate the value of PartNumberMarker in the next request.\n- maxParts {Number} upload ID\n- isTruncated {Boolean} Whether the returned result list for List Parts is truncated. The “true” indicates that not all results are returned; “false” indicates that all results are returned.\n- parts {Array} The container that saves part information, each in the structure:\n  - PartNumber {Number} Part number.\n  - LastModified {Date} Time when a part is uploaded.\n  - ETag {String} ETag value in the content of the uploaded part.\n  - Size {Number} Size of the uploaded part.\n\nexample:\n\n- List uploaded part\n\n```js\n\nconst result = await store.listParts('objcet', 'uploadId', {\n  'max-parts': 1000\n});\nconsole.log(result);\n```\n\n### .listUploads(query[, options])\n\nList on-going multipart uploads, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- query {Object} query parameters\n  - [prefix] {String} the object key prefix\n  - [max-uploads] {Number} the max uploads to return\n  - [key-marker] {String} the object key marker, if `upload-id-marker`\n    is not provided, return uploads with `key > marker`, otherwise\n    return uploads with `key >= marker && uploadId > id-marker`\n  - [upload-id-marker] {String} the upload id marker, must be used\n    **WITH** `key-marker`\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- List on-going multipart uploads\n\n```js\n\nconst result = await store.listUploads({\n  'max-uploads': 100,\n  'key-marker': 'my-object',\n  'upload-id-marker': 'upload-id'\n});\nconsole.log(result);\n```\n\n### .abortMultipartUpload(name, uploadId[, options])\n\nAbort a multipart upload for object.\n\nparameters:\n\n- name {String} the object name\n- uploadId {String} the upload id\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- Abort a multipart upload\n\n```js\nconst result = await store.abortMultipartUpload('object', 'upload-id');\nconsole.log(result);\n```\n\n## RTMP Operations\n\nAll operations function is [async], except `getRtmpUrl`.\n\nasync function format: `async functionName(...)`.\n\n### .putChannel(id, conf[, options])\n\nCreate a live channel.\n\nparameters:\n\n- id {String} the channel id\n- conf {Object} the channel config\n  - [Description] {String} the channel description\n  - [Status] {String} the channel status: 'enabled' or 'disabled'\n  - [Target] {Object}\n    - [Type] {String} the data type for the channel, only 'HLS' is supported now\n    - [FragDuration] {Number} duration of a 'ts' segment\n    - [FragCount] {Number} the number of 'ts' segments in a 'm3u8'\n    - [PlaylistName] {String} the 'm3u8' name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- publishUrls {Array} the publish urls\n- playUrls {Array} the play urls\n- res {Object} response info\n\nexample:\n\n- Create a live channel\n\n```js\nconst cid = 'my-channel';\nconst conf = {\n  Description: 'this is channel 1',\n  Status: 'enabled',\n  Target: {\n    Type: 'HLS',\n    FragDuration: '10',\n    FragCount: '5',\n    PlaylistName: 'playlist.m3u8'\n  }\n};\n\nconst r = await this.store.putChannel(cid, conf);\nconsole.log(r);\n```\n\n### .getChannel(id[, options])\n\nGet live channel info.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- data {Object} channel info, same as conf in [.putChannel](#putchannelid-conf-options)\n- res {Object} response info\n\nexample:\n\n- Get live channel info\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannel(cid);\nconsole.log(r);\n```\n\n### .deleteChannel(id[, options])\n\nDelete a live channel.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response infomation.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Delete a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.deleteChannel(cid);\nconsole.log(r);\n```\n\n### .putChannelStatus(id, status[, options])\n\nChange the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- status {String} the status: 'enabled' or 'disabled'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Disable a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.putChannelStatus(cid, 'disabled');\nconsole.log(r);\n```\n\n### .getChannelStatus(id[, options])\n\nGet the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel status information.\n\nobject:\n\n- data {Object}\n  - Status {String} the channel status: 'Live' or 'Idle'\n  - [ConnectedTime] {String} the connected time of rtmp pushing\n  - [RemoteAddr] {String} the remote addr of rtmp pushing\n  - [Video] {Object} the video parameters (Width/Height/FrameRate/Bandwidth/Codec)\n  - [Audio] {Object} the audio parameters (Bandwidth/SampleRate/Codec)\n- res {Object} response info\n\nexample:\n\n- Get a live channel status\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelStatus(cid);\nconsole.log(r);\n\n// { Status: 'Live',\n//   ConnectedTime: '2016-04-12T11:51:03.000Z',\n//   RemoteAddr: '42.120.74.98:53931',\n//   Video:\n//   { Width: '672',\n//     Height: '378',\n//     FrameRate: '29',\n//     Bandwidth: '60951',\n//     Codec: 'H264' },\n//   Audio: { Bandwidth: '5959', SampleRate: '22050', Codec: 'AAC' }\n// }\n```\n\n### .listChannels(query[, options])\n\nList channels.\n\nparameters:\n\n- query {Object} parameters for list\n  - prefix {String}: the channel id prefix (returns channels with this prefix)\n  - marker {String}: the channle id marker (returns channels after this id)\n  - max-keys {Number}: max number of channels to return\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel list.\n\nobject:\n\n- channels {Array} the channels, each in the structure:\n  - Name {String} the channel id\n  - Description {String} the channel description\n  - Status {String} the channel status\n  - LastModified {String} the last modification time of the channel\n  - PublishUrls {Array} the publish urls for the channel\n  - PlayUrls {Array} the play urls for the channel\n- nextMarker: result.data.NextMarker || null,\n- isTruncated: result.data.IsTruncated === 'true'\n- res {Object} response info\n\nexample:\n\n- List live channels\n\n```js\nconst r = await this.store.listChannels({\n  prefix: 'my-channel',\n  'max-keys': 3\n});\nconsole.log(r);\n```\n\n### .getChannelHistory(id[, options])\n\nGet the live channel history.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the history information.\n\nobject:\n\n- records {Object} the pushing records, each in the structure:\n  - StartTime {String} the start time\n  - EndTime {String} the end time\n  - RemoteAddr {String} the remote addr\n- res {Object} response info\n\nexample:\n\n- Get the live channel history\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelHistory(cid);\nconsole.log(r);\n```\n\n### .createVod(id, name, time[, options])\n\nCreate a VOD playlist for the channel.\n\nparameters:\n\n- id {String} the channel id\n- name {String} the playlist name\n- time {Object} the duration time\n  - startTime {Number} the start time in epoch seconds\n  - endTime {Number} the end time in epoch seconds\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Create a vod playlist of a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.createVod(cid, 're-play', {\n  startTime: 1460464870,\n  endTime: 1460465877\n});\nconsole.log(r);\n```\n\n### .getRtmpUrl(channelId[, options])\n\nGet signatured rtmp url for publishing.\n\nparameters:\n\n- channelId {String} the channel id\n- [options] {Object} optional parameters\n  - [expires] {Number} the expire time in seconds of the url\n  - [params] {Object} the additional paramters for url, e.g.: {playlistName: 'play.m3u8'}\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the rtmp url.\n\nexample:\n\n- Get a rtmp url.\n\n```js\nconst cid = 'my-channel';\n\nconst url = this.store.getRtmpUrl(this.cid, {\n  params: {\n    playlistName: 'play.m3u8'\n  },\n  expires: 3600\n});\nconsole.log(url);\n// rtmp://ossliveshow.oss-cn-hangzhou.aliyuncs.com/live/tl-channel?OSSAccessKeyId=T0cqQWBk2ThfRS6m&Expires=1460466188&Signature=%2BnzTtpyxUWDuQn924jdS6b51vT8%3D\n```\n\n## Create A Image Service Instance\n\nEach Image Service instance required `accessKeyId`, `accessKeySecret`, `bucket` and `imageHost`.\n\n### oss.ImageClient(options)\n\nCreate a Image service instance.\n\noptions:\n- imageHost {String} your image service domain that binding to a OSS bucket\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- bucket {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nconst oss = require('ali-oss');\n\nconst imgClient = oss.ImageClient({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'my_image_bucket'\n  imageHost: 'thumbnail.myimageservice.com'\n});\n```\n\n## Image Operations\n\nAll operations function is [async], except `imgClient.signatureUrl`.\n\nasync function format: `async functionName(...)`.\n\n### imgClient.get(name, file[, options])\n\nGet an image from the image channel.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the image\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image with a style and store it to the local file\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', filepath);\n```\n\n_ Store image to a writestream\n\n```js\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', somestream);\n```\n\n- Get an image content buffer\n\n```js\nconst result = await imgClient.get('ossdemo/demo.jpg@200w_200h');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a not exists object or a not image object\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/not-exists-demo.jpg@200w_200h', filepath);\n// will throw NoSuchKeyError\n```\n\n### imgClient.getStream(name[, options])\n\nGet an image read stream.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image object stream\n\n```js\nconst result = await imgClient.getStream('ossdemo/demo.jpg@200w_200h');\nresult.stream.pipe(fs.createWriteStream('some demo.jpg'));\n```\n\n### imgClient.getExif(name[, options])\n\nGet a image exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nIf object don't have exif, will throw 400 BadRequest.\n\nexample:\n\n```js\nconst result = await imgClient.getExif('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n### imgClient.getInfo(name[, options])\n\nGet a image info and exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nexample:\n\n```js\nconst result = await imgClient.getInfo('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     Format: \"jpg\",\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n\n### imgClient.putStyle(name, style[, options])\n// TODO\n\n### imgClient.getStyle(name[, options])\n\nGet a style by name from the image channel.\n\nparameters:\n- name {String} image style name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} styles object\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.getStyle('400');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"234\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:58:20 GMT\"\n//     },\n//     size: 234,\n//     aborted: false,\n//     rt: 398,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }\n// }\n```\n\n### imgClient.listStyle([options])\n\nGet all styles from the image channel.\n\nparameters:\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Array} styles array, a style object:\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.listStyle();\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"913\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:47:32 GMT\"\n//     },\n//     size: 913,\n//     aborted: false,\n//     rt: 1911,\n//     keepAliveSocket: false\n//   },\n//   data: [{\n//     Name: \"200-200\",\n//     Content: \"0e_200w_200h_0c_0i_0o_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:28:08 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:28:08 GMT\"\n//   }, {\n//     Name: \"800\",\n//     Content: \"800w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:29:15 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:29:15 GMT\"\n//   }, {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }, {\n//     Name: \"600\",\n//     Content: \"600w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:35:02 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:35:02 GMT\"\n//   }]\n// }\n```\n\n### imgClient.deleteStyle(name[, options])\n// TODO\n\n### imgClient.signatureUrl(name)\n\nCreate a signature url for directly download.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return full signature url.\n\nexample:\n\n```js\nconst url = imgClient.signatureUrl('\n');\n// http://thumbnail.myimageservice.com/demo.jpg@200w_200h?OSSAccessKeyId=uZxyLARzYZtGwHKY&Expires=1427803849&Signature=JSPRe06%2FjQpQSj5zlx2ld1V%2B35I%3D\n```\n\n## Cluster Mode\n\nCluster mode now only support object operations.\n\n```js\nconst Cluster = require('ali-oss').ClusterClient;\n\nconst client = Cluster({\n  cluster: [{\n    host: 'host1',\n    accessKeyId: 'id1',\n    accessKeySecret: 'secret1'\n  }, {\n    host: 'host2',\n    accessKeyId: 'id2',\n    accessKeySecret: 'secret2'\n  }],\n  schedule: 'masterSlave', //default is `roundRobin`\n});\n\n// listen error event to logging error\nclient.on('error', function(err) {\n  console.error(err.stack);\n});\n\n// client init ready\nclient.ready(function() {\n  console.log('cluster client init ready, go ahead!');\n});\n```\n\n### Get Methods\n\nWill choose an alive client by schedule(`masterSlave` or `roundRobin`).\n\n- `client.get()`\n- `client.head()`\n- `client.getStream()`\n- `client.list()`\n- `client.signatureUrl()`\n- `client.chooseAvailable()` - choose an available client by schedule.\n- `client.getACL()`\n\n### Put Methods\n\nWill put to all clients.\n\n- `client.put()`\n- `client.putStream()`\n- `client.delete()`\n- `client.deleteMulti()`\n- `client.copy()`\n- `client.putMeta()`\n- `client.putACL()`\n- `client.restore()`\n\n## Known Errors\n\nEach error return by OSS server will contains these properties:\n\n- name {String} error name\n- message {String} error message\n- requestId {String} uuid for this request, if you meet some unhandled problem,\n    you can send this request id to OSS engineer to find out what's happend.\n- hostId {String} OSS cluster name for this request\n\nname | code | status | message | message in Chinese\n---  | ---  | --- | ---     | ---\nAccessDeniedError | AccessDenied | 403 | Access Denied | 拒绝访问\nBucketAlreadyExistsError | BucketAlreadyExists | 409 | Bucket already exists | Bucket 已经存在\nBucketNotEmptyError | BucketNotEmpty | 409 | Bucket is not empty | Bucket 不为空\nRestoreAlreadyInProgressError | RestoreAlreadyInProgress | 409 | The restore operation is in progress. | restore 操作正在进行中\nOperationNotSupportedError | OperationNotSupported | 400 | The operation is not supported for this resource | 该资源暂不支持restore操作\nEntityTooLargeError | EntityTooLarge | 400 | Entity too large | 实体过大\nEntityTooSmallError | EntityTooSmall | 400 | Entity too small | 实体过小\nFileGroupTooLargeError | FileGroupTooLarge | 400 | File group too large | 文件组过大\nInvalidLinkNameError | InvalidLinkName | 400 | Link name can't be the same as the object name | Object Link 与指向的 Object 同名\nLinkPartNotExistError | LinkPartNotExist | 400 | Can't link to not exists object | Object Link 中指向的 Object 不存在\nObjectLinkTooLargeError | ObjectLinkTooLarge | 400 | Too many links to this object | Object Link 中 Object 个数过多\nFieldItemTooLongError | FieldItemTooLong | 400 | Post form fields items too large | Post 请求中表单域过大\nFilePartInterityError | FilePartInterity | 400 | File part has changed | 文件 Part 已改变\nFilePartNotExistError | FilePartNotExist | 400 | File part not exists | 文件 Part 不存在\nFilePartStaleError | FilePartStale| 400 | File part stale | 文件 Part 过时\nIncorrectNumberOfFilesInPOSTRequestError | IncorrectNumberOfFilesInPOSTRequest | 400 | Post request contains invalid number of files | Post 请求中文件个数非法\nInvalidArgumentError | InvalidArgument | 400 | Invalid format argument | 参数格式错误\nInvalidAccessKeyIdError | InvalidAccessKeyId | 400 | Access key id not exists | Access Key ID 不存在\nInvalidBucketNameError | InvalidBucketName | 400 | Invalid bucket name | 无效的 Bucket 名字\nInvalidDigestError | InvalidDigest | 400 | Invalid digest | 无效的摘要\nInvalidEncryptionAlgorithmError | InvalidEncryptionAlgorithm | 400 | Invalid encryption algorithm | 指定的熵编码加密算法错误\nInvalidObjectNameError | InvalidObjectName | 400 | Invalid object name | 无效的 Object 名字\nInvalidPartError | InvalidPart | 400 | Invalid part | 无效的 Part\nInvalidPartOrderError | InvalidPartOrder | 400 | Invalid part order | 无效的 part 顺序\nInvalidPolicyDocumentError | InvalidPolicyDocument | 400 | Invalid policy document | 无效的 Policy 文档\nInvalidTargetBucketForLoggingError | InvalidTargetBucketForLogging | 400 | Invalid bucket on logging operation | Logging 操作中有无效的目标 bucket\nInternalError | Internal | 500 | OSS server internal error | OSS 内部发生错误\nMalformedXMLError | MalformedXML | 400 | Malformed XML format | XML 格式非法\nMalformedPOSTRequestError | MalformedPOSTRequest | 400 | Invalid post body format | Post 请求的 body 格式非法\nMaxPOSTPreDataLengthExceededError | MaxPOSTPreDataLengthExceeded | 400 | Post extra data too large | Post 请求上传文件内容之外的 body 过大\nMethodNotAllowedError | MethodNotAllowed | 405 | Not allowed method | 不支持的方法\nMissingArgumentError | MissingArgument | 411 | Missing argument | 缺少参数\nMissingContentLengthError | MissingContentLength | 411 | Missing `Content-Length` header | 缺少内容长度\nNoSuchBucketError | NoSuchBucket | 404 | Bucket not exists | Bucket 不存在\nNoSuchKeyError | NoSuchKey | 404 | Object not exists | 文件不存在\nNoSuchUploadError | NoSuchUpload | 404 | Multipart upload id not exists | Multipart Upload ID 不存在\nNotImplementedError | NotImplemented | 501 | Not implemented | 无法处理的方法\nPreconditionFailedError | PreconditionFailed | 412 | Pre condition failed | 预处理错误\nRequestTimeTooSkewedError | RequestTimeTooSkewed | 403 | Request time exceeds 15 minutes to server time | 发起请求的时间和服务器时间超出 15 分钟\nRequestTimeoutError | RequestTimeout | 400 | Request timeout | 请求超时\nRequestIsNotMultiPartContentError | RequestIsNotMultiPartContent | 400 | Invalid post content-type | Post 请求 content-type 非法\nSignatureDoesNotMatchError | SignatureDoesNotMatch | 403 | Invalid signature | 签名错误\nTooManyBucketsError | TooManyBuckets | 400 | Too many buckets on this user | 用户的 Bucket 数目超过限制\nRequestError | RequestError | -1 | network error | 网络出现中断或异常\nConnectionTimeoutError | ConnectionTimeoutError | -2 | request connect timeout | 请求连接超时\nSecurityTokenExpiredError | SecurityTokenExpired | 403 | sts Security Token Expired | sts Security Token 超时失效\n\n[generator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n[oss-sts]: https://help.aliyun.com/document_detail/oss/practice/ram_guide.html\n[browser-sample]: https://github.com/rockuw/oss-in-browser\n[oss-multipart]: https://help.aliyun.com/document_detail/oss/api-reference/multipart-upload/InitiateMultipartUpload.html\n[disabled-browser-headers]: https://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n",
      "readmeFilename": "README.md",
      "_id": "ali-oss@6.4.0-beta-1",
      "_nodeVersion": "10.12.0",
      "_npmVersion": "6.13.0",
      "dist": {
        "integrity": "sha512-VkiBW9aVqBArRudlzpqNHLfi48XI7AYCO3W2UfJWgS5wJb9uX1ctNnCN1ZRhYv4h0wB/Qo0Shd6k0IlafEBUxA==",
        "shasum": "63cb778c87f272e81e36dce2d5e5887b6f8984d8",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.4.0-beta-1.tgz",
        "fileCount": 49,
        "unpackedSize": 3605567,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeFDwNCRA9TVsSAnZWagAA9qgP/361GNwEodQPV2D9wf3X\nVzRy8SRemr/CS0InpSGz/4z9sQdoSiD9rsdIOJC94ODAr2RLNciItvgnPBS4\nZYoPjGmACQwFF+kXUJlFQygEFqDAoa0oceXNW6y2mL2fwXxtwz5z3YoKi8IX\nZmuBezX4qIb43JBJIRk00N5EQIcPkIrVDrZ7unEIzRvfUftnmcTTLkycy+L/\neA3aOgxjTk40lsv8kgnhXfIJnaZqMvNgNE6ZcL+35HWuqetvov/5+tJEGZnc\n76tglRHcXnKPy6DIq5LkHlaMD5IkZP+Cr4wCOzVs0vTC9BKYGDegxcWCbaY9\naEzm+0sqTYykD45V7HbwksZqtLqJzsLTM3YVHv2YU3lKsF1gvGba0STp4D9c\njWlyM54w8i1dplpzsXJCrxanFOPgwYewMIYF86sisBf3zDRp2Qnkkou/BqBc\nb9wa5OdVXCXTx+Qzre2/DhhGTYRpqlL9OO4XTpRybOV6K5rhrKKGKAa4nvQZ\ngdvJRUUBl6zqyiRrsXusJA2n0vw9EDBfcIkPNjlIK4IoRdHr7jwehOEuX87a\n1BEux6ySl6AAYuYMF9N3NGJARByCfEs/TElN6FdO5T8MbvGZeRCXnowZZ38H\njFgh6ElTN9oKRWcvt6ismdAAc0gckD9xc5ksWf029Od3VmyVapgAer98NA04\nDLut\r\n=qNoU\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDBZkXIXD7DnQZa9RceKCW0S7O4vtqW01tV/mL20woAHAIhALIpl1QnisNKaexz8DE6vV33xhHH+QZ9NvzDNG4k6Yi0"
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.4.0-beta-1_1578384396771_0.835887748878207"
      },
      "_hasShrinkwrap": false
    },
    "6.5.0": {
      "name": "ali-oss",
      "version": "6.5.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.min.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^6.7.2",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.1.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "a6ccdaf7c223e3e4e058e3c1109e4c7baa33b4e9",
      "_id": "ali-oss@6.5.0",
      "_nodeVersion": "10.12.0",
      "_npmVersion": "6.13.6",
      "dist": {
        "integrity": "sha512-maU7JXQOHR05v30eY1tlc67uZtOAji/EHknTZvI1wUP/GjP4CnTilegqwRz1WTxL3omnx7vam7WRxYrj1oZWRw==",
        "shasum": "be7ccf1f75ade6db7ec856f43476778646c337fd",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.5.0.tgz",
        "fileCount": 61,
        "unpackedSize": 3650096,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeICfDCRA9TVsSAnZWagAA8bMP/j0FwBIG0DqTION6Al4T\nOvuJr3sYqDThRukIoppk1o1yHlolhf+OXHMUJpQaWForIAs9l2psU1Rw5SEt\nGApcBaUwWtukLQ5wJpu+tKiHFbwtSwrG7KjmmhFT6dpvuTrVo4lzgOMie7jx\n4qy3w4daFHvtWS7PIu1OLl/pSgYUP5mQqx+OOy+ByR/wBoEoLo4Z5nk0kgus\nIhgdcKKXVjFtbPl7vwKV/qRT4HzP4l3kMDJu3dbg1m46sEN/JIHMewE2lnxW\n2XA6tFDR8RtroKRkJ1DE3IP0Ag2Hgs6hZ+/L12y9wwFpXWYMR8tJUHKxVrRi\n8m/nksqoK26zdVAEIbSiraKh+6V6KnFk5cpOt7Xjla5pIxVsIkkhNGH/2u5y\nqF0ZuYLIERWZqtCs4CIT5VOgcZDe8vxunFOY7KR7La0FcqLSp3JIvL4FweNw\nGrw9LOy27Kw0dJLDGeyryfTi6kAAvAoZu6mlUZWnEhMrGdWVLK396ET8BJNY\nW9NhKkN4qKnocl9sgyIFkLN/xbY2nb1l/uQtYBi7Lmibik6r82yJIh5j1mAU\nTu2ru1+LWj9Gfv7uCPTwg2/MRnT7qolm9h8TKuxbV3SDIiywRqv29to+8vGT\nshBDMzVgpyqd4DRK+xB5wQP46/LUDnLaecgPR1NaAS/ynDPv1FyA6W2Zx7en\nd20g\r\n=w9jN\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBusTRRAPGbEKQFxOOZJ9u14n3za2pk/fWDnFq3y5yreAiEA/o3+RWPwM0bCgFnybtW0/Rcr1oXJXBQf/hbvmKuFIZ4="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.5.0_1579165634570_0.3435039457894089"
      },
      "_hasShrinkwrap": false
    },
    "6.5.1": {
      "name": "ali-oss",
      "version": "6.5.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^6.7.2",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.1.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "ab7389989d142d014da72f46c1e4e2cc513daf56",
      "_id": "ali-oss@6.5.1",
      "_nodeVersion": "10.12.0",
      "_npmVersion": "6.13.6",
      "dist": {
        "integrity": "sha512-dnKL35PyotYfS0+Dcll1DKyQy7u+f5mOI2uBQ3Ndp1+j/gzE0y104QsCEyeXbMaNNZm+1WL8NL4KEnOMbzwYfQ==",
        "shasum": "e1461e9e4d4f6a01686cd94e4617350702576f2b",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.5.1.tgz",
        "fileCount": 61,
        "unpackedSize": 3650092,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeIYX8CRA9TVsSAnZWagAApYcP/3RbsKcWBrI6faIjy0Al\nMMwbmCvF7v7TyOUwrku4RLSB8pbOeDMJX8En1fZDLhSl947/FxpkpcIyRZYg\nNzp5XmTtsYXmjMd73GRYjvS75JDvD+VbDgrC+hMxsPlQrF5lVW+YlQYIzJCH\nEPUOM1WhcNU6YBnbPupdGuUHnNOq1ZVv/hOYvWGu3cYIQdAQFsmpYQRfwLKb\nWxovvs/c3Trr9ruT08IS2glFtZ9GS7uh6x3jIsc38prcXoud8E222mTTqkrW\nXwUR3rCj9gPJET1JZTPI+Jeatz6VljGcxLe7NLCcvelnqAMthItNxDkqf2JA\nyKZ7ahvnoHFBDXJd3f8r5Q/h3WZTPWAB/oEK3VZlOq7+AcUffNT4H4Thz5Ry\ns6zM8Npbv5l1jytM6m+MR5ul6Pv8iUEUkcoN3mlnaLFMwBkA2XqxoeG8H5CX\ndHzmpZIpXKFy5/2qKFOl9yIJcitRrtq5n7NwqskZdOKrgT/ihF2hgOStfwvz\n3CzpApBlKslzA35Z8+d5xLv58ojsIFJSClM380kpZvlZb4U/moIrSqKOCGlJ\n6YZRyJ/ldYzx8ToyNzHxes/S41/6bCMHa4OHCFg8vOE3A8voSmYR6bk0Q+UG\nA4dMv6aakUbdzMygnnRxB78EQsJdD5sqDAkR+9W9fHoOL/CCRfzwyRaawl40\nl6B8\r\n=ambo\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC8oArZWL3Itv680Ex5VUPWhPa4LHTkPF//sxeLfKdETQIhAPYX9c0CWwHrPoV4ZAOh3/wxuoAj0tdpS+LXFlYALJa0"
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.5.1_1579255291880_0.9097173924392064"
      },
      "_hasShrinkwrap": false
    },
    "6.6.0": {
      "name": "ali-oss",
      "version": "6.6.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^6.7.2",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.1.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "e786d116ac7e46ed53f99c778bed3cfc1dec7077",
      "_id": "ali-oss@6.6.0",
      "_nodeVersion": "10.12.0",
      "_npmVersion": "6.14.1",
      "dist": {
        "integrity": "sha512-AoXY3+D+5DfjaTtQlF3wuyK5So1wus8urr19LqrsB7kNb88QhLYm4hcKQx8Yh+wN6Ta11eLoBksNxiAuZJEUjw==",
        "shasum": "ba69bc04282eae3fac15ae2c5adffad5f8964c6d",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.6.0.tgz",
        "fileCount": 76,
        "unpackedSize": 1844096,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJejC0ZCRA9TVsSAnZWagAAC7AP/1ZQAfVds1vECg1/2BW2\nxZMljZrlD4dY+mxNC0P4pbKT6UG+AsiXW24QwltW4kwV+LynnghIk9fS8MnT\nyCypz+rXy8iqD/TufaeuhXeTCUK4iIeE2zUbmzZU+z6ni2ssrI+qLOSABNI3\nd67M9UT1o02KJjTDUoWsm5hgfKiYt5e4mNOvjqrJoIiAySoSpY+gfBLmD+I8\nlyvGuxulC6R1OH2g2sIaiR5L1jGC0KNjgGQrsFWVhSQ0vIDsDidHA8Nt2RBO\nWsWU/rBG3k8yr9iHm6q5kgKdak4qjXK67elONhrAmFFXeYlphOIIfc2fDVlW\nNIP/HPWS+7Ts+5N/jlNrpJx/4PaqO35xqJLJIs0DCspg+m6qk/yF+IUKcsOy\n65sBM9Yp/k+fnn9YiQIgn3IcG7mPbbjz8q+Fd6zzZ0zTsGG2Tp8ZbBBxG2Ni\nFDGMIctPTdz/AL6SqddU1fSTJpVoiItXosZqnGpwMY+oFIq4lcBXCL55DQQD\nBf/K8AYUyVemO97MmeI8iL0sFfIzhd0+NTKAZiPfoU6G74QkF9l4Pt7wTv+B\nUy1PW1WWNDeGT3wPo/luTaLJoSfFx/AoxD4kOV43EP3Hp5KOhVDN0cjJnl4+\nea21Pe2YTrxcaYwDS6cEfWa5FGy7yNpBn/NgdGnGwsTYSJVl7EyH7wsJrivz\nHpk5\r\n=i5ZO\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCxqkV3juGLwlqIA0Qet/XfXDpxrbnIym0A0EUUcKxilgIhAOhnxioF5h183rRzzROPvoZ73Qs3Uug9f+sex3OB4Egg"
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.6.0_1586244888748_0.7437741824765898"
      },
      "_hasShrinkwrap": false
    },
    "6.7.0": {
      "name": "ali-oss",
      "version": "6.7.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^6.7.2",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.1.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "20f40a761f89a494e3436a1c0ea840df1de22c2f",
      "_id": "ali-oss@6.7.0",
      "_nodeVersion": "10.12.0",
      "_npmVersion": "6.14.1",
      "dist": {
        "integrity": "sha512-WVvrF8iStVUuEKDjEdaT/ZgL03elPxnQWqx/H+VgUfeIByQZqniwuJXy8/oFaCapan9fydh7Xlfnb00SZJYYGA==",
        "shasum": "7581564fb670a72ca831ad5075128dc02265b49a",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.7.0.tgz",
        "fileCount": 76,
        "unpackedSize": 1845466,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJemULpCRA9TVsSAnZWagAAfx8QAIA1bgjwbb7aN685Djt+\narqghJCVP1l6Ui6EgeKmOZgy5D0dZewyVv6Xqwnq0N1FtheNSiyare/o8lez\nwPT+JKshDansJdUPzSOsQfFoZl+nWEP9BIkn2N1F8wdFpELzyxlM4HR+qVIg\nZZnjRdljJ+hJJx89p0mEoKiQrTHpPN6tbxGRfofm8Ma6bKvCqRGLrMGosXmI\nD3OedXby9PLfNpjya2roXwx2SyPBzOj1E4n+3ZX1Y2diHMn2fPSy7E6sFCed\nCo3GaPDG5pfyXqIIFN/KXxB07H2pm/RovOmGsA5U4laZwscjnNmLI+DLdIoL\nRl4OPSnhl3Z2PsgMlRJcuW/AJR82Ii6rxjEuHALcPFAfJSVhPIgufrt4nEGv\ni5Oz382CFNLqSWCIou497ksQEzZ0+Tzhda6ri342VZNZg9fgg+LqYCIPmLav\naz6gh1F0bQMuaFTDhkHYb28SsMgTdcG/Y7mJAessA7Q02tqak7EA1e8iBtbX\nrm7Sd71Gk9QDKV6E/RxHM7r+NtIxR3aPwwZWq9us2PGKZSvHI/DTfbKk5/Cg\nhreFuMAjHwiQ0BbqmKL6/gV3toNuI4vK856YxccVKVi+eG1k+zEYinE0YuTH\n5+RojvMJ+RnrCVPf+KAvNFEwLgeszeMrA93IXCgAZEUP1+J1SOLkGdr07aYK\neotz\r\n=JIpb\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFI8IidZ4FUNYdMymz8ZxUbyFYiVB2QkUk96rFEGUbbVAiEAzdCJhy8W0m2HNZWOzrjClKLKzeqYwN28X2s+W0pdOVY="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.7.0_1587102440774_0.895910960039455"
      },
      "_hasShrinkwrap": false
    },
    "6.8.0-beta": {
      "name": "ali-oss",
      "version": "6.8.0-beta",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^6.7.2",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.1.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "d2b2aaf023f68c51c4a92dd87fdc73435185c25d",
      "readme": "oss-js-sdk\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage][cov-image]][cov-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/ali-oss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/ali-oss\n[travis-image]: https://img.shields.io/travis/ali-sdk/ali-oss/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ali-sdk/ali-oss.svg?branch=master\n[cov-image]: http://codecov.io/github/ali-sdk/ali-oss/coverage.svg?branch=master\n[cov-url]: http://codecov.io/github/ali-sdk/ali-oss?branch=master\n[david-image]: https://img.shields.io/david/ali-sdk/ali-oss.svg?style=flat-square\n[david-url]: https://david-dm.org/ali-sdk/ali-oss\n\naliyun OSS(Object Storage Service) js client for Node and Browser env.\n\n`NOTE`： For SDK `5.X` document, please go to [README.md](https://github.com/ali-sdk/ali-oss/blob/5.x/README.md)\n\n## Install\n\n```bash\nnpm install ali-oss --save\n```\n\n## Compatibility\n\n### Node\nNode.js >= 8.0.0 required. You can use 4.x in Node.js < 8.\n\n### Browser\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n\n`Note`:\n- For Lower browsers you can refer to [PostObject](https://help.aliyun.com/document_detail/31988.html), if you want to see more practices ,please refer to [Web Post](https://help.aliyun.com/document_detail/31923.html)\n\n## License\n\n[MIT](LICENSE)\n\n# OSS Usage\n\nOSS, Object Storage Service. Equal to well known Amazon [S3](http://aws.amazon.com/s3/).\n\nAll operation use es7 async/await to implement. All api is async function.\n\n## Summary\n\n- [Node Usage](#node-usage)\n- [Browser Usage](#browser-usage)\n- [Data Regions](#data-regions)\n- [Create Account](#create-acount)\n- [Create A Bucket Instance](#create-a-bucket-instance)\n  - [oss(options)](#ossoptions)\n- [Bucket Operations](#bucket-operations)\n  - Base\n    - [.listBuckets(query[, options])](#listbucketsquery-options)\n    - [.putBucket(name[, options])](#putbucketname-options)\n    - [.useBucket(name)](#usebucketname)\n    - [.deleteBucket(name[, options])](#deletebucketname-options)\n    - [.getBucketInfo(name)](#getbucketinfoname)\n    - [.getBucketLocation(name)](#getbucketlocationname)\n  - ACL\n    - [.putBucketACL(name, acl[, options])](#putbucketaclname-acl-options)\n    - [.getBucketACL(name[, options])](#getbucketaclname-options)\n  - Logging\n    - [.putBucketLogging(name, prefix[, options])](#putbucketloggingname-prefix-options)\n    - [.getBucketLogging(name[, options])](#getbucketloggingname-options)\n    - [.deleteBucketLogging(name[, options])](#deletebucketloggingname-options)\n  - Website\n    - [.putBucketWebsite(name, config[, options])](#putbucketwebsitename-config-options)\n    - [.getBucketWebsite(name[, options])](#getbucketwebsitename-options)\n    - [.deleteBucketWebsite(name, region[, options])](#deletebucketwebsitename-options)\n  - Referer\n    - [.putBucketReferer(name, allowEmpty, referers[, options])](#putbucketreferername-allowempty-referers-options)\n    - [.getBucketReferer(name[, options])](#getbucketreferername-options)\n    - [.deleteBucketReferer(name[, options])](#deletebucketreferername-options)\n  - Lifecycle\n    - [.putBucketLifecycle(name, rules[, options])](#putbucketlifecyclename-rules-options)\n    - [.getBucketLifecycle(name[, options])](#getbucketlifecyclename-options)\n    - [.deleteBucketLifecycle(name[, options])](#deletebucketlifecyclename-options)\n  - CORS\n    - [.putBucketCORS(name, rules[, options])](#putbucketcorsname-rules-options)\n    - [.getBucketCORS(name[, options])](#getbucketcorsname-options)\n    - [.deleteBucketCORS(name[, options])](#deletebucketcorsname-options)\n  - RequestPayment\n    - [.getBucketRequestPayment(bucketName[, options])](#getbucketrequestpaymentbucketname-options)\n    - [.putBucketRequestPayment(bucketName, payer[, options])](#putBucketRequestpaymentbucketname-payer-options)\n  - BucketEncryption\n    - [.putBucketEncryption(name[, options])](#putbucketencryptionbucketname-options)\n    - [.getBucketEncryption(name)](#getbucketencryptionbucketname-options)\n    - [.deleteBucketEncryption(name)](#deletebucketencryptionbucketname-options)\n  - tagging\n    - [.putBucketTags(name, tag[, options])](#putBucketTagsname-tag-options)\n    - [.getBucketTags(name, [, options])](#getBucketTagsname-options)\n    - [.deleteBucketTags(name, [, options])](#deleteBucketTagsname-options)\n  - policy\n    - [.putBucketPolicy(name, policy[, options])](#putBucketPolicyname-policy-options)\n    - [.getBucketPolicy(name, [, options])](#getBucketPolicyname-options)\n    - [.deleteBucketPolicy(name, [, options])](#deleteBucketPolicyname-options)\n  - versioning\n    - [.getBucketVersioning(name, [, options])](#getBucketVersioningname-options)\n    - [.putBucketVersioning(name, status[, options])](#putBucketVersioningname-status-options)\n\n- [Object Operations](#object-operations)\n  - [.list(query[, options])](#listquery-options)\n  - [.getBucketVersions(query[, options])](#getBucketVersionsquery-options)\n  - [.put(name, file[, options])](#putname-file-options)\n  - [.putStream(name, stream[, options])](#putstreamname-stream-options)\n  - [.append(name, file[, options])](#appendname-file-options)\n  - [.getObjectUrl(name[, baseUrl])](#getobjecturlname-baseurl)\n  - [.generateObjectUrl(name[, baseUrl])](#generateobjecturlname-baseurl)\n  - [.head(name[, options])](#headname-options)\n  - [.getObjectMeta(name)](#getobjectmetaname)\n  - [.get(name[, file, options])](#getname-file-options)\n  - [.getStream(name[, options])](#getstreamname-options)\n  - [.delete(name[, options])](#deletename-options)\n  - [.copy(name, sourceName[, sourceBucket, options])](#copyname-sourcename-sourcebucket-options)\n  - [.putMeta(name, meta[, options])](#putmetaname-meta-options)\n  - [.deleteMulti(names[, options])](#deletemultinames-options)\n  - [.signatureUrl(name[, options])](#signatureurlname-options)\n  - [.putACL(name, acl[, options])](#putaclname-acl-options)\n  - [.getACL(name[, options])](#getaclname-options)\n  - [.restore(name[, options])](#restorename-options)\n  - [.putSymlink(name, targetName[, options])](#putsymlinkname-targetname-options)\n  - [.getSymlink(name[, options])](#getsymlinkname-options)\n  - [.initMultipartUpload(name[, options])](#initmultipartuploadname-options)\n  - [.uploadPart(name, uploadId, partNo, file, start, end[, options])](#uploadpartname-uploadid-partno-file-start-end-options)\n  - [.uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])](#uploadpartcopyname-uploadid-partno-range-sourcedata-options)\n  - [.completeMultipartUpload(name, uploadId, parts[, options])](#completemultipartuploadname-uploadid-parts-options)\n  - [.multipartUpload(name, file[, options])](#multipartuploadname-file-options)\n  - [.multipartUploadCopy(name, sourceData[, options])](#multipartuploadcopyname-sourcedata-options)\n  - [.listParts(name, uploadId[, query, options])](#listparts-name-uploadid-query-options)\n  - [.listUploads(query[, options])](#listuploadsquery-options)\n  - [.abortMultipartUpload(name, uploadId[, options])](#abortmultipartuploadname-uploadid-options)\n  - [.calculatePostSignature(policy)](#calculatePostSignaturepolicy)\n  - [.getObjectTagging(name, [, options])](#getObjectTaggingname-options)\n  - [.putObjectTagging(name, tag[, options])](#putObjectTaggingname-tag-options)\n  - [.deleteObjectTagging(name, [, options])](#deleteObjectTaggingname-options)\n- [RTMP Operations](#rtmp-operations)\n  - [.putChannel(id, conf[, options])](#putchannelid-conf-options)\n  - [.getChannel(id[, options])](#getchannelid-options)\n  - [.deleteChannel(id[, options])](#deletechannelid-options)\n  - [.putChannelStatus(id, status[, options])](#putchannelstatusid-status-options)\n  - [.getChannelStatus(id[, options])](#getchannelstatusid-options)\n  - [.listChannels(query[, options])](#listchannelsquery-options)\n  - [.getChannelHistory(id[, options])](#getchannelhistoryid-options)\n  - [.createVod(id, name, time[, options])](#createvodid-name-time-options)\n  - [.getRtmpUrl(channelId[, options])](#getrtmpurlchannelid-options)\n- [Create A Image Service Instance](#create-a-image-service-instance)\n  - [oss.ImageClient(options)](#ossimageclientoptions)\n- [Image Operations](#image-operations)\n  - [imgClient.get(name, file[, options])](#imgclientgetname-file-options)\n  - [imgClient.getStream(name[, options])](#imgclientgetstreamname-options)\n  - [imgClient.getExif(name[, options])](#imgclientgetexifname-options)\n  - [imgClient.getInfo(name[, options])](#imgclientgetinfoname-options)\n  - [imgClient.putStyle(name, style[, options])](#imgclientputstylename-style-options)\n  - [imgClient.getStyle(name[, options])](#imgclientgetstylename-options)\n  - [imgClient.listStyle([options])](#imgclientliststyleoptions)\n  - [imgClient.deleteStyle(name[, options])](#imgclientdeletestylename-options)\n  - [imgClient.signatureUrl(name)](#imgclientsignatureurlname)\n- [Known Errors](#known-errors)\n\n## Node Usage\n\n### Compatibility\n- Node: >= 8.0.0\n\n### Basic usage\n1.install SDK using npm\n```\nnpm install ali-oss --save\n```\n2.for example:\n```js\nconst OSS = require('ali-oss');\nconst client = new OSS({\n  region: '<oss region>',\n  accessKeyId: '<Your accessKeyId>',\n  accessKeySecret: '<Your accessKeySecret>',\n  bucket: '<Your bucket name>'\n});\n```\n## Browser Usage\n\nYou can use most of the functionalities of `ali-oss` in browser with\nsome exceptions:\n\n- put object with streaming: no chunked encoding, we use multipart\n  upload instead\n- get object to local file: we cannot manipulate file system in\n  browser, we provide signed object url for downloading needs\n- bucket operations(listBuckets, putBucketLogging, etc) will fail: OSS\n  server currently do not support CORS requests for bucket operations\n  (will probably be fixed later)\n\n### Compatibility\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n    >Note: Because some browsers do not support promises, you need to introduce promise compatible libraries.<br>\n    For example: IE10 and IE11 need to introduce a promise-polyfill.\n\n### Setup\n\n#### Bucket setup\n\nAs browser-side javascript involves CORS operations. You need to setup\nyour bucket CORS rules to allow CORS operations:\n\n- set allowed origins to '\\*'\n- allowed methods to 'PUT, GET, POST, DELETE, HEAD'\n- set allowed headers to '\\*'\n- expose 'ETag' in expose headers\n\n#### STS setup\n\nAs we don't want to expose the accessKeyId/accessKeySecret in the\nbrowser, a [common practice][oss-sts] is to use STS to grant temporary\naccess.\n\n### Basic usage\n\nInclude the sdk lib in the `<script>` tag and you have `OSS` available\nfor creating client.\n\n```html\n // x.x.x The specific version number represented\n // we recommend introducing offline resources, because the usability of online resources depends on the stability of the cdn server.\n <!-- Introducing online resources -->\n <script src=\"http://gosspublic.alicdn.com/aliyun-oss-sdk-x.x.x.min.js\"></script>\n <!-- Introducing offline resources -->\n <script src=\"./aliyun-oss-sdk-x.x.x.min.js\"></script>\n\n<script type=\"text/javascript\">\n  const client = new OSS({\n    region: 'oss-cn-hangzhou',\n    accessKeyId: '<access-key-id>',\n    accessKeySecret: '<access-key-secret>',\n    bucket: '<bucket-name>',\n    stsToken: '<security-token>'\n  });\n\n  client.list().then((result) => {\n    console.log('objects: %j', result.objects);\n    return client.put('my-obj', new OSS.Buffer('hello world'));\n  }).then((result) => {\n    console.log('put result: %j', result);\n    return client.get('my-obj');\n  }).then((result) => {\n    console.log('get result: %j', result.content.toString());\n  });\n</script>\n```\nThe full sample can be found [here][browser-sample].\n\n### How to build\n\n```bash\nnpm run build-dist\n```\n\nAnd see the build artifacts under `dist/`.\n\n\n## Data Regions\n\n[OSS current data regions](https://help.aliyun.com/document_detail/oss/user_guide/endpoint_region.html).\n\nregion | country | city | endpoint | internal endpoint\n---  | ---     | ---  | --- | ---\noss-cn-hangzhou | China | HangZhou | oss-cn-hangzhou.aliyuncs.com | oss-cn-hangzhou-internal.aliyuncs.com\noss-cn-shanghai | China | ShangHai | oss-cn-shanghai.aliyuncs.com | oss-cn-shanghai-internal.aliyuncs.com\noss-cn-qingdao | China | QingDao | oss-cn-qingdao.aliyuncs.com | oss-cn-qingdao-internal.aliyuncs.com\noss-cn-beijing | China | BeiJing | oss-cn-beijing.aliyuncs.com | oss-cn-beijing-internal.aliyuncs.com\noss-cn-shenzhen | China | ShenZhen | oss-cn-shenzhen.aliyuncs.com | oss-cn-shenzhen-internal.aliyuncs.com\noss-cn-hongkong | China | HongKong | oss-cn-hongkong.aliyuncs.com | oss-cn-hongkong-internal.aliyuncs.com\noss-us-west-1 | US | Silicon Valley | oss-us-west-1.aliyuncs.com | oss-us-west-1-internal.aliyuncs.com\noss-ap-southeast-1 | Singapore | Singapore | oss-ap-southeast-1.aliyuncs.com | oss-ap-southeast-1-internal.aliyuncs.com\n\n## Create Account\n\nGo to [OSS website](http://www.aliyun.com/product/oss/?lang=en), create a new account for new user.\n\nAfter account created, you can create the OSS instance and get the `accessKeyId` and `accessKeySecret`.\n\n## Create A Bucket Instance\n\nEach OSS instance required `accessKeyId`, `accessKeySecret` and `bucket`.\n\n## oss(options)\n\nCreate a Bucket store instance.\n\noptions:\n\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- [stsToken] {String} used by temporary authorization, detail [see](https://www.alibabacloud.com/help/doc-detail/32077.htm)\n- [bucket] {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [endpoint] {String} oss region domain. It takes priority over `region`.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`.\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`.\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [secure] {Boolean} instruct OSS client to use HTTPS (secure: true) or HTTP (secure: false) protocol.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`.\n- [cname] {Boolean}, default false, access oss with custom domain name. if true, you can fill `endpoint` field with your custom domain name,\n- [isRequestPay] {Boolean}, default false, whether request payer function of the bucket is open, if true, will send headers `'x-oss-request-payer': 'requester'` to oss server.\n  the details you can see [requestPay](https://help.aliyun.com/document_detail/91337.htm)\n- [useFetch] {Boolean}, default false, it just work in Browser, if true,it means upload object with \n`fetch` mode ,else `XMLHttpRequest`\n\nexample:\n\n```js\nconst oss = require('ali-oss');\n\nconst store = oss({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\n```\n\n## Bucket Operations\n\n### .listBuckets(query[, options])\n\nList buckets in this account.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search buckets using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [max-keys] {String|Number} max buckets, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return buckets list on `buckets` properties.\n\n- buckets {Array<BucketMeta>} bucket meta info list\n  Each `BucketMeta` will contains blow properties:\n    - name {String} bucket name\n    - region {String} bucket store data region, e.g.: `oss-cn-hangzhou-a`\n    - creationDate {String} bucket create GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n- owner {Object} object owner, including `id` and `displayName`\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 buckets\n\n```js\nstore.listBuckets({\n  \"max-keys\": 10\n}).then((result) => {\n  console.log(result);\n});\n\n```\n\n### .putBucket(name[, options])\n\nCreate a new bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket exists and not belong to current account, will throw BucketAlreadyExistsError.\n  If bucket not exists, will create a new bucket and set it's ACL.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [StorageClass] {String} the storage type include (Standard,IA,Archive)\n\nSuccess will return the bucket name on `bucket` properties.\n\n- bucket {String} bucket name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Create a bucket name `helloworld` location on HongKong\n\n```js\nstore.putBucket('helloworld').then((result) => {\n  // use it by default\n  store.useBucket('helloworld');\n});\n```\n\n- Create a bucket name `helloworld` location on HongKong StorageClass `Archive`\n\n```js\nawait store.putBucket('helloworld', { StorageClass: 'Archive' });\n// use it by default\nstore.useBucket('helloworld');\n```\n\n### .deleteBucket(name[, options])\n\nDelete an empty bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket is not empty, will throw BucketNotEmptyError.\n  If bucket is not exists, will throw NoSuchBucketError.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete the exists 'helloworld' bucket on 'oss-cn-hongkong'\n\n```js\nstore.deleteBucket('helloworld').then((result) => {});\n```\n\n### .useBucket(name)\n\nUse the bucket.\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.useBucket('helloworld');\n```\n\n### .getBucketInfo(name)\n\nGet bucket information,include CreationDate、ExtranetEndpoint、IntranetEndpoint、Location、Name、StorageClass、\nOwner、AccessControlList\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketInfo('helloworld').then( (res) => {\n  console.log(res.bucket)\n})\n```\n\n### .getBucketLocation(name)\n\nGet bucket location\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketLocation('helloworld').then( (res) => {\n  console.log(res.location)\n})\n```\n\n---\n\n### .putBucketACL(name, acl[, options])\n\nUpdate the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- acl {String} access control list, current available: `public-read-write`, `public-read` and `private`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set bucket `helloworld` to `public-read-write`\n\n```js\nstore.putBucketACL('helloworld', 'public-read-write').then((result) => {\n});\n```\n\n### .getBucketACL(name[, options])\n\nGet the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld`\n\n```js\nstore.getBucketACL('helloworld').then((result) => {\n  console.log(result.acl);\n});\n```\n\n---\n\n### .putBucketLogging(name, prefix[, options])\n\nUpdate the bucket logging settings.\nLog file will create every one hour and name format: `<prefix><bucket>-YYYY-mm-DD-HH-MM-SS-UniqueString`.\n\nparameters:\n\n- name {String} bucket name\n- [prefix] {String} prefix path name to store the log files\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Enable bucket `helloworld` logging and save with prefix `logs/`\n\n```js\nstore.putBucketLogging('helloworld', 'logs/').then((result) => {\n});\n```\n\n### .getBucketLogging(name[, options])\n\nGet the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- enable {Boolean} enable logging or not\n- prefix {String} prefix path name to store the log files, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld` logging settings\n\n```js\nstore.getBucketLogging('helloworld').then((result) => {\n  console.log(result.enable, result.prefix);\n});\n```\n\n### .deleteBucketLogging(name[, options])\n\nDelete the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketWebsite(name, config[, options])\n\nSet the bucket as a static website.\n\nparameters:\n\n- name {String} bucket name\n- config {Object} website config, contains blow properties:\n  - index {String} default page, e.g.: `index.html`\n  - [error] {String} error page, e.g.: 'error.html'\n  - [supportSubDir] {String} default vaule false\n  - [type] {String} default value 0\n  - [routingRules] {Array} RoutingRules\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketWebsite('hello', {\n  index: 'index.html'\n}).then((result) => {\n});\n```\n\n### .getBucketWebsite(name[, options])\n\nGet the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- index {String} index page\n- error {String} error page, maybe `null`\n- supportSubDir {String}\n- type {String}\n- routingRules {Array}\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketWebsite(name[, options])\n\nDelete the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketReferer(name, allowEmpty, referers[, options])\n\nSet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list, e.g.:\n  ```js\n  [\n    'https://npm.taobao.org',\n    'http://cnpmjs.org'\n  ]\n  ```\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketReferer('hello', false, [\n  'https://npm.taobao.org',\n  'http://cnpmjs.org'\n]).then((result) => {\n});\n```\n\n### .getBucketReferer(name[, options])\n\nGet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketReferer(name[, options])\n\nDelete the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketLifecycle(name, rules[, options])\n\nSet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains blow properties:\n  - [id] {String} rule id, if not set, OSS will auto create it with random string.\n  - prefix {String} store prefix\n  - status {String} rule status, allow values: `Enabled` or `Disabled`\n  - [expiration] {Object} specifies the expiration attribute of the lifecycle rules for the object.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `createdBeforeDate` and `days` must have one.\n  - [abortMultipartUpload] {Object} Specifies the expiration attribute of the multipart upload tasks that are not complete.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `createdBeforeDate` and `days` must have one.\n  - [transition] {Object} Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle.\n    - storageClass {String} Specifies the storage class that objects that conform to the rule are converted into. allow values: `IA` or `Archive`\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `createdBeforeDate` and `days` must have one.\n  `expiration`、 `abortMultipartUpload`、 `transition` must have one.\n  - [tag] {Object} Specifies the object tag applicable to a rule. Multiple tags are supported.\n    - key {String} Indicates the tag key.\n    - value {String} Indicates the tag value.\n    `tag` cannot be used with `abortMultipartUpload`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketLifecycle('hello', [\n  {\n    id: 'delete after one day',\n    prefix: 'logs/',\n    status: 'Enabled',\n    days: 1\n  },\n  {\n    prefix: 'logs2/',\n    status: 'Disabled',\n    date: '2022-10-11T00:00:00.000Z'\n  }\n]).then((result) => {});\n```\n\n### .getBucketLifecycle(name[, options])\n\nGet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the lifecycle rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketLifecycle(name[, options])\n\nDelete the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketCORS(name, rules[, options])\n\nSet CORS rules of the bucket object\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains below properties:\n  - allowedOrigin {String/Array} configure for Access-Control-Allow-Origin header\n  - allowedMethod {String/Array} configure for Access-Control-Allow-Methods header\n  - [allowedHeader] {String/Array} configure for Access-Control-Allow-Headers header\n  - [exposeHeader] {String/Array} configure for Access-Control-Expose-Headers header\n  - [maxAgeSeconds] {String} configure for Access-Control-Max-Age header\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketCORS('hello', [\n  {\n    allowedOrigin: '*',\n    allowedMethod: [\n      'GET',\n      'HEAD',\n    ],\n  }\n]).then((result) => {});\n```\n\n### .getBucketCORS(name[, options])\n\nGet CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the CORS rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketCORS(name[, options])\n\nDelete CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .getBucketRequestPayment(bucketName[, options])\n\nget RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String} bucket name\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- payer {String} payer, BucketOwner or Requester\n- res {Object} response info, including\n  - data {Buffer} xml\n\n---\n\n### .putBucketRequestPayment(bucketName, payer[, options])\n\nput RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String}\n- payer {String} payer\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketEncryption(name, rules)\n\nput BucketEncryption value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [rules] {Object} parameters\n  - SSEAlgorithm {String} encryption type, expect AES256 or KMS\n  - {KMSMasterKeyID} {String} needed when encryption type is KMS\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketEncryption(name)\n\nget BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n- encryption {Object} rules\n  - SSEAlgorithm {String} encryption type, AES256 or KMS\n  - {KMSMasterKeyID} {String} will be return when encryption type is KMS\n\n---\n\n### .deleteBucketEncryption(name)\n\ndelete BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketTags(name, tag[, options])\n\nAdds tags for a bucket or modify the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketTags(name[, options])\n\nObtains the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- tag {Object} the tag of object\n- res {Object} response info\n\n---\n\n### .deleteBucketTags(name[, options])\n\nDeletes the tags added for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketPolicy(name, policy[, options])\n\nAdds or modify policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- policy {Object} bucket policy\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\nexample:\n```js\nconst policy = {\n  Version: '1',\n  Statement: [\n    {\n      Action: ['oss:PutObject', 'oss:GetObject'],\n      Effect: 'Deny',\n      Principal: ['1234567890'],\n      Resource: ['acs:oss:*:1234567890:*/*']\n    }\n  ]\n};\nconst result = await store.putBucketPolicy(bucket, policy);\nconsole.log(result);\n```\n---\n\n### .getBucketPolicy(name[, options])\n\nObtains the policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- policy {Object} the policy of bucket, if not exist, the value is null\n- res {Object} response info\n- status {Number} response status\n\n---\n\n### .deleteBucketPolicy(name[, options])\n\nDeletes the policy added for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n### .getBucketVersioning(name[, options])\n\nObtains the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- versionStatus {String | undefined} version status, `Suspended` or `Enabled`. default value: `undefined`\n- res {Object} response info\n\n---\n\n### .putBucketVersioning(name, status[, options])\n\nset the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- status {String} version status, allow values: `Enabled` or `Suspended`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n## Object Operations\n\nAll operations function return Promise, except `signatureUrl`.\n\n### .put(name, file[, options])\n\nAdd an object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream|File(only support Browser)|Blob(only support Browser)} object local path, content buffer or ReadStream content instance use in Node, Blob and html5 File\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - See more: [PutObject](https://help.aliyun.com/document_detail/31978.html#title-yxe-96d-x61)\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- data {Object} callback server response data, sdk use JSON.parse() return\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through local file path\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/demo.txt', filepath).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/demo.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829244'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through content buffer\n\n```js\nstore.put('ossdemo/buffer', Buffer.from('foo content')).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/buffer',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/buffer',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"xxx\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829243'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .putStream(name, stream[, options])\n\nAdd a stream object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- stream {ReadStream} object ReadStream content instance\n- [options] {Object} optional parameters\n  - [contentLength] {Number} the stream length, `chunked encoding` will be used if absent\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.putStream('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .append(name, file[, options])\n\nAppend an object to the bucket, it's almost same as put, but it can add content to existing object rather than override it.\n\nAll parameters are same as put except for options.position\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [position] {String} specify the position which is the content length of the latest object\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nobject:\n\n- name {String} object name\n- url {String} the url of oss\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- nextAppendPosition {String} the next position\n\nexample:\n\n```js\nlet object = await store.append('ossdemo/buffer', Buffer.from('foo'));\n\n// append content to the existing object\nobject = await store.append('ossdemo/buffer', Buffer.from('bar'), {\n  position: object.nextAppendPosition,\n});\n```\n\n### .getObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `endpoint`.\n\ne.g.:\n\n```js\nconst cdnUrl = client.getObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .generateObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `bucket and endpoint `.\nSuggest use generateObjectUrl instead of getObjectUrl.\n\ne.g.:\n\n```js\nconst url = client.generateObjectUrl('foo/bar.jpg');\n// cdnUrl should be `https://${bucketname}.${endpotint}foo/bar.jpg`\n\nconst cdnUrl = client.generateObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .head(name[, options])\n\nHead an object and get the meta info.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status, maybe 200 or 304\n- meta {Object} object user meta, if not set on `put()`, will return null.\n    If return status 304, meta will be null too\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Head an exists object and get user meta\n\n```js\nawait this.store.put('ossdemo/head-meta', Buffer.from('foo'), {\n  meta: {\n    uid: 1,\n    path: 'foo/demo.txt'\n  }\n});\nconst object = await this.store.head('ossdemo/head-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  meta: {\n    uid: '1',\n    path: 'foo/demo.txt'\n  },\n  res: { ... }\n}\n```\n\n- Head a not exists object\n\n```js\nconst object = await this.store.head('ossdemo/head-meta');\n// will throw NoSuchKeyError\n```\n\n### .getObjectMeta(name)\n\nGet an  object meta info include ETag、Size、LastModified and so on, not return object content.\n\nparameters:\n\n- name {String} object name store on OSS\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info, including\n  - headers {Object} response headers\n\nexample:\n\n- Head an exists object and get object meta info\n\n```js\nawait this.store.put('ossdemo/object-meta', Buffer.from('foo'));\nconst object = await this.store.getObjectMeta('ossdemo/object-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  res: { ... }\n}\n```\n\n### .get(name[, file, options])\n\nGet an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the content\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Range' get specifying range bytes content, e.g.: `Range: bytes=0-9`\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/demo.txt', filepath);\n```\n\n_ Store object to a writestream\n\n```js\nawait store.get('ossdemo/demo.txt', somestream);\n```\n\n- Get an object content buffer\n\n```js\nconst result = await store.get('ossdemo/demo.txt');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a processed image and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.png';\nawait store.get('ossdemo/demo.png', filepath, {process: 'image/resize,w_200'});\n```\n\n- Get a not exists object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/not-exists-demo.txt', filepath);\n// will throw NoSuchKeyError\n```\n\n### .getStream(name[, options])\n\nGet an object read stream.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object stream\n\n```js\nconst result = await store.getStream('ossdemo/demo.txt');\nresult.stream.pipe(fs.createWriteStream('some file.txt'));\n```\n\n### .delete(name[, options])\n\nDelete an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf delete object not exists, will also delete success.\n\nexample:\n\n- Delete an exists object\n\n```js\nawait store.delete('ossdemo/someobject');\n```\n\n- Delete a not exists object\n\n```js\nawait store.delete('ossdemo/some-not-exists-object');\n```\n\n### .copy(name, sourceName[, sourceBucket, options])\n\nCopy an object from `sourceName` to `name`.\n\nparameters:\n\n- name {String} object name store on OSS\n- sourceName {String} source object name\n- [sourceBucket] {String} source Bucket. if doesn't exist，`sourceBucket` is same bucket. \n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n    If the `meta` set, will override the source object meta.\n  - [headers] {Object} extra headers\n    - 'If-Match' do copy if source object etag equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' do copy if source object etag not equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-Modified-Since' do copy if source object modified after this time,\n        otherwise throw PreconditionFailedError\n    - 'If-Unmodified-Since' do copy if source object modified before this time,\n        otherwise throw PreconditionFailedError\n    - See more: [CopyObject](https://help.aliyun.com/document_detail/31979.html?#title-tzy-vxc-ncx)\n\nSuccess will return the copy result in `data` property.\n\nobject:\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT string\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf source object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Copy same bucket object\n\n```js\nstore.copy('newName', 'oldName').then((result) => {\n  console.log(result);\n});\n```\n\n- Copy other bucket object\n\n```js\nstore.copy('logo.png', 'logo.png', 'other-bucket').then((result) => {\n  console.log(result);\n});\n```\n\n### .putMeta(name, meta[, options])\n\nSet an exists object meta.\n\nparameters:\n\n- name {String} object name store on OSS\n- meta {Object} user meta, will send with `x-oss-meta-` prefix string\n  e.g.: `{ uid: 123, pid: 110 }`\n  If `meta: null`, will clean up the exists meta\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the putMeta result in `data` property.\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Update exists object meta\n\n```js\nconst result = await store.putMeta('ossdemo.txt', {\n  uid: 1, pid: 'p123'\n});\nconsole.log(result);\n```\n\n- Clean up object meta\n\n```js\nawait store.putMeta('ossdemo.txt', null);\n```\n\n### .deleteMulti(names[, options])\n\nDelete multi objects in one request.\n\nparameters:\n\n- names {Array<Object>} object names, max 1000 objects in once.\n  - key {String} object name\n  - [versionId] {String} version id\n- [options] {Object} optional parameters\n  - [quiet] {Boolean} quiet mode or verbose mode, default is `false`, verbose mode\n    quiet mode: if all objects delete succes, return emtpy response.\n      otherwise return delete error object results.\n    verbose mode: return all object delete results.\n  - [timeout] {Number} the operation timeout\n\nSuccess will return delete success objects in `deleted` property.\n\n- [deleted] {Array<Object>} deleted object or deleteMarker info list\n  - [Key] object name\n  - [VersionId] object versionId\n  - [DeleteMarker] generate or delete marker\n  - [DeleteMarkerVersionId] marker versionId \n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete multi objects in quiet mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3'], {\n  quiet: true\n});\n```\n\n- Delete multi objects in verbose mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3']);\n```\n\n### .list(query[, options])\n\nList objects in the bucket.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 objects\n\n```js\nconst result = await store.list();\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nconst result = await store.list({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nconst result = await store.list({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n### .getBucketVersions(query[, options])\n\nList objects in the bucket.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [versionIdMarker] {String} set the result to return from the version ID marker of the key marker object and sort by the versions\n  - [keyMarker] {String} search start from `keyMarker`, including `keyMarker` key\n  - [encodingType] {String} specifies that the returned content is encoded, and specifies the type of encoding\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [maxKeys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - isLatest {Boolean}\n    - versionId {String} object versionId\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- deleteMarker {Array<ObjectDeleteMarker>} object delete marker info list\n  Each `ObjectDeleteMarker`\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - versionId {String} object versionId\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- NextVersionIdMarker {String} next version ID marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- View all versions of objects and deleteMarker of bucket\n\n```js\nconst result = await store.getBucketVersions();\nconsole.log(result.objects);\nconsole.log(result.deleteMarker);\n```\n\n- List from key-marker\n\n```js\nconst result = await store.getBucketVersions({\n  'keyMarker': 'keyMarker'\n});\nconsole.log(result.objects);\n```\n\n- List from the version-id-marker of key-marker\n\n```js\nconst result = await store.getBucketVersions({\n  'versionIdMarker': 'versionIdMarker',\n  'keyMarker': 'keyMarker'\n});\nconsole.log(result.objects);\n```\n\n### .signatureUrl(name[, options])\n\nCreate a signature url for download or upload object. When you put object with signatureUrl ,you need to pass `Content-Type`.Please look at the example.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [method] {String} the HTTP method, default is 'GET'\n  - [Content-Type] {String} set the request content type\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [trafficLimit] {Number} traffic limit, range: `819200`~`838860800`.\n  - [subResource] {Object} additional signature parameters in url.\n  - [response] {Object} set the response headers for download\n    - [content-type] {String} set the response content type\n    - [content-disposition] {String} set the response content disposition\n    - [cache-control] {String} set the response cache control\n    - See more: https://help.aliyun.com/document_detail/oss/api-reference/object/GetObject.html\n  - [callback] {Object} set the callback for the operation\n    - url {String} set the url for callback\n    - [host] {String} set the host for callback\n    - body {String} set the body for callback\n    - [contentType] {String} set the type for body\n    - [customValue] {Object} set the custom value for callback,eg. {var1: value1,var2:value2}\n\nSuccess will return signature url.\n\nexample:\n\n- Get signature url for object\n\n```js\nconst url = store.signatureUrl('ossdemo.txt');\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT'\n});\nconsole.log(url);\n\n//  put object with signatureUrl\n// -------------------------------------------------\n\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT',\n  'Content-Type': 'text/plain; charset=UTF-8',\n});\nconsole.log(url);\n\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  response: {\n    'content-type': 'text/custom',\n    'content-disposition': 'attachment'\n  }\n});\nconsole.log(url);\n\n// put operation\n```\n\n- Get a signature url for a processed image\n\n```js\nconst url = store.signatureUrl('ossdemo.png', {\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.png', {\n  expires: 3600,\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n```\n\n### .putACL(name, acl[, options])\n\nSet object's ACL.\n\nparameters:\n\n- name {String} object name\n- acl {String} acl (private/public-read/public-read-write)\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set an object's ACL\n\n```js\nawait store.putACL('ossdemo.txt', 'public-read');\n```\n\n### .getACL(name[, options])\n\nGet object's ACL.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get an object's ACL\n\n```js\nconst result = await store.getACL('ossdemo.txt');\nconsole.log(result.acl);\n```\n\n### .restore(name[, options])\n\nRestore Object.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Restore an object\n\n```js\nconst result = await store.restore('ossdemo.txt');\nconsole.log(result.status);\n```\n\n### .putSymlink(name, targetName[, options])\n\nPutSymlink\n\nparameters:\n\n- name {String} object name\n- targetName {String} target object name\n- [options] {Object} optional parameters\n  - [storageClass] {String} the storage type include (Standard,IA,Archive)\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers, detail see [PutSymlink](https://help.aliyun.com/document_detail/45126.html#title-x71-l2b-7i8)\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst options = {\n  storageClass: 'IA',\n  meta: {\n    uid: '1',\n    slus: 'test.html' \n  }\n}\nconst result = await store.putSymlink('ossdemo.txt', 'targetName', options)\nconsole.log(result.status)\n```\n\n### .getSymlink(name[, options])\n\nGetSymlink\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n\nSuccess will return\n\n- targetName {String} target object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst result = await store.getSymlink('ossdemo.txt')\nconsole.log(result.targetName)\n```\n\n### .initMultipartUpload(name[, options])\nBefore transmitting data in the Multipart Upload mode,\nyou must call the Initiate Multipart Upload interface to notify the OSS to initiate a Multipart Upload event.\nThe Initiate Multipart Upload interface returns a globally unique Upload ID created by the OSS server to identify this Multipart Upload event.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] Mime file type e.g.: application/octet-stream\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - [x-oss-server-side-encryption]\n    Specify the server-side encryption algorithm used to upload each part of this object,Type: string, Valid value: AES256 `x-oss-server-side-encryption: AES256`<br>\n    if use in browser you should be set cors expose header x-oss-server-side-encryption\n    - See more: [InitiateMultipartUpload](https://help.aliyun.com/document_detail/31992.html?#title-wh0-a2h-rur)\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-server-side-encryption] if set request header x-oss-server-side-encryption, will return\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- uploadId {String} upload id, use for uploadPart, completeMultipart\n\nexample:\n\n```js\n  const result = await store.initMultipartUpload('object');\n  console.log(result);\n```\n\n### .uploadPart(name, uploadId, partNo, file, start, end[, options])\nAfter initiating a Multipart Upload event, you can upload data in parts based on the specified object name and Upload ID.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- file {File|String}  is File or FileName, the whole file<br>\n Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB. <br>\n In Node you can use File or FileName, but in browser you only can use File.\n- start {Number} part start bytes  e.g: 102400\n- end {Number} part end bytes  e.g: 204800\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n  const uploadId = result.uploadId;\n  const file; //the data you want to upload, is a File or FileName(only in node)\n  //if file part is 10\n  const partSize = 100 * 1024;\n  const fileSize = 10 * partSize;//you need to calculate\n  const dones = [];\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const part = await store.uploadPart(name, uploadId, i, file, start, end);\n    dones.push({\n      number: i,\n      etag: part.etag\n    });\n    console.log(part);\n  }\n\n  //end need to call completeMultipartUpload api\n```\n\n### .uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])\nUsing Upload Part Copy, you can copy data from an existing object and upload a part of the data.\nWhen copying a file larger than 1 GB, you must use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- range {String} Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB, range value like `0-102400`\n- sourceData {Object}\n  - sourceKey {String} the source object name\n  - sourceBucketName {String} the source bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} The following request header is used for the source objects specified by x-oss-copy-source.\n    - [x-oss-copy-source-if-match]  default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]   default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]   default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since]   default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  const partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const range = start + '-' + (end - 1);\n    const part = await store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n### .completeMultipartUpload(name, uploadId, parts[, options])\nAfter uploading all data parts, you must call the Complete Multipart Upload API to complete Multipart Upload for the entire file.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- parts {Array} more part {Object} from uploadPartCopy, , each in the structure:\n  - number {Number} partNo\n  - etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [CompleteMultipartUpload](https://help.aliyun.com/document_detail/31995.html?#title-nan-5y3-rjd)\n\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data , sdk use JSON.parse() return\n\nexample:\n\n```js\n\n  //init multipart\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  //upload part\n  const file; //the data you want to upload, this example size is 10 * 100 * 1024\n  const fileSize;//you need to calculate\n  const partSize = 100 * 1024;//100kb\n  const done = [];\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const data = file.slice(start, end);\n    const part = yield store.uploadPart(name, result.uploadId, i, data);\n    console.log(part);\n    done.push({\n          number: i,\n          etag: part.res.headers.etag\n        });\n  }\n\n  //complete\n  const completeData = await store.completeMultipartUpload(name, result.uploadId, done);\n  console.log(completeData);\n```\n\n\n### .multipartUpload(name, file[, options])\n\nUpload file with [OSS multipart][oss-multipart].<br>\nthis function contains initMultipartUpload, uploadPart, completeMultipartUpload.\nWhen you use multipartUpload api，if you encounter problems with ConnectionTimeoutError, you should handle ConnectionTimeoutError in your business code. How to resolve ConnectionTimeoutError, you can decrease `partSize` size 、 Increase `timeout` 、Retry request ,\nor give tips in your business code;\n\nparameters:\n\n- name {String} object name\n- file {String|File(only support Browser)|Blob(only support Browser)} file path or HTML5 Web File or web Blob\n- [options] {Object} optional args\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n    - file {File} The file object selected by the user, if the browser is restarted, it needs the user to manually trigger the settings\n    - name {String} object key\n    - fileSize {Number} file size\n    - partSize {Number} part size\n    - uploadId {String} upload id\n    - doneParts {Array} An array of pieces that have been completed, including the object structure as follows\n       - number {Number} part number\n       - etag {String} part etag\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [mime] {String} custom mime , will send with `Content-Type` entity header\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n          e.g.:\n         ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n         ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data, sdk use JSON.parse() return\n\nexample:\n\n- Upload using multipart\n\n```js\nconst result = await store.multipartUpload('object', '/tmp/file');\nconsole.log(result);\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) { //progress is generator\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\n```\n\n- multipartUpload progress example\n\n```js\n\n//async function\nasync function asyncProgress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result1 = await store.multipartUpload('object', '/tmp/file', {\n  progress: asyncProgress\n});\n\n//function\nfunction progress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result2 = await store.multipartUpload('object', '/tmp/file', {\n  progress: progress\n});\n\n```\n\n- multipartUpload with cancel\n\n>tips: cancel multipartUpload support on node and browser\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n- multipartUpload with capture `ConnectionTimeoutError`  error\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  if (err.code === 'ConnectionTimeoutError') {\n    console.log(\"Woops,Woops ,timeout error!!!\");\n    // do ConnectionTimeoutError operation\n  }\n}\n\n```\n\n### .multipartUploadCopy(name, sourceData[, options])\n\nCopy file with [OSS multipart][oss-multipart]. <br>\nthis function contains head, initMultipartUpload, uploadPartCopy, completeMultipartUpload.<br>\nWhen copying a file larger than 1 GB, you should use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [copyheaders] {Object} only uploadPartCopy api used, detail [see](https://www.alibabacloud.com/help/doc-detail/31994.htm)\n    - [x-oss-copy-source-if-match]  only uploadPartCopy api used, default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]  only uploadPartCopy api used, default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]  only uploadPartCopy api used, default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since] only uploadPartCopy api used, default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n- Copy using multipart\n\n```js\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n});\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\n```\n- multipartUploadCopy with cancel\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n### .listParts(name, uploadId[, query, options])\n\nThe ListParts command can be used to list all successfully uploaded parts mapped to a specific upload ID, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- name {String} object key\n- uploadId {String} upload ID from initMultipartUpload api\n- [query] {Object} query parameters\n  - [max-parts] {Number} The maximum part number in the response of the OSS. default value: 1000.\n  - [part-number-marker] {Number} Starting position of a specific list. A part is listed only when the part number is greater than the value of this parameter.\n  - [encoding-type] {String} Specify the encoding of the returned content and the encoding type. Optional value: url\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- uploadId {String} upload ID\n- bucket {String} Specify the bucket name.\n- name {String} object name\n- PartNumberMarker {Number} Starting position of the part numbers in the listing result.\n- nextPartNumberMarker {Number} If not all results are returned this time, the response request includes the NextPartNumberMarker element to indicate the value of PartNumberMarker in the next request.\n- maxParts {Number} upload ID\n- isTruncated {Boolean} Whether the returned result list for List Parts is truncated. The “true” indicates that not all results are returned; “false” indicates that all results are returned.\n- parts {Array} The container that saves part information, each in the structure:\n  - PartNumber {Number} Part number.\n  - LastModified {Date} Time when a part is uploaded.\n  - ETag {String} ETag value in the content of the uploaded part.\n  - Size {Number} Size of the uploaded part.\n\nexample:\n\n- List uploaded part\n\n```js\n\nconst result = await store.listParts('objcet', 'uploadId', {\n  'max-parts': 1000\n});\nconsole.log(result);\n```\n\n### .listUploads(query[, options])\n\nList on-going multipart uploads, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- query {Object} query parameters\n  - [prefix] {String} the object key prefix\n  - [max-uploads] {Number} the max uploads to return\n  - [key-marker] {String} the object key marker, if `upload-id-marker`\n    is not provided, return uploads with `key > marker`, otherwise\n    return uploads with `key >= marker && uploadId > id-marker`\n  - [upload-id-marker] {String} the upload id marker, must be used\n    **WITH** `key-marker`\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- List on-going multipart uploads\n\n```js\n\nconst result = await store.listUploads({\n  'max-uploads': 100,\n  'key-marker': 'my-object',\n  'upload-id-marker': 'upload-id'\n});\nconsole.log(result);\n```\n\n### .abortMultipartUpload(name, uploadId[, options])\n\nAbort a multipart upload for object.\n\nparameters:\n\n- name {String} the object name\n- uploadId {String} the upload id\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- Abort a multipart upload\n\n```js\nconst result = await store.abortMultipartUpload('object', 'upload-id');\nconsole.log(result);\n```\n\n### .calculatePostSignature(policy)\n\nget postObject params \n\nparameters:\n\n- policy {JSON or Object} policy must contain expiration and conditions.\n\nSuccess will return postObject Api params.\n\nObject:\n\n- OSSAccessKeyId {String}\n- Signature {String}\n- policy {Object} response info\n\n### .getObjectTagging(name[, options])\n\nObtains the tags of an object.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return the channel information.\n\nobject:\n\n- tag {Object} the tag of object\n- res {Object} response info\n\n### .putObjectTagging(name, tag[, options])\n\nConfigures or updates the tags of an object.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n### .deleteObjectTagging(name[, options])\n\nDeletes the tag of a specified object.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n### .processObjectSave(sourceObject, targetObject, process[, targetBucket])\n\nPersistency indicates that images are asynchronously stored in the specified Bucket\n\nparameters:\n\n- sourceObject {String} source object name\n- targetObject {String} target object name\n- process {String} process string\n- [targetBucket] {String} target bucket\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n\n```js\nconst sourceObject = 'a.png'\nconst targetObject = 'b.png'\nconst process = 'image/watermark,text_aGVsbG8g5Zu+54mH5pyN5Yqh77yB,color_ff6a00'\n\nawait this.store.processObjectSave(sourceObject, targetObject, process);\n```\n\n## RTMP Operations\n\nAll operations function is [async], except `getRtmpUrl`.\n\nasync function format: `async functionName(...)`.\n\n### .putChannel(id, conf[, options])\n\nCreate a live channel.\n\nparameters:\n\n- id {String} the channel id\n- conf {Object} the channel config\n  - [Description] {String} the channel description\n  - [Status] {String} the channel status: 'enabled' or 'disabled'\n  - [Target] {Object}\n    - [Type] {String} the data type for the channel, only 'HLS' is supported now\n    - [FragDuration] {Number} duration of a 'ts' segment\n    - [FragCount] {Number} the number of 'ts' segments in a 'm3u8'\n    - [PlaylistName] {String} the 'm3u8' name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- publishUrls {Array} the publish urls\n- playUrls {Array} the play urls\n- res {Object} response info\n\nexample:\n\n- Create a live channel\n\n```js\nconst cid = 'my-channel';\nconst conf = {\n  Description: 'this is channel 1',\n  Status: 'enabled',\n  Target: {\n    Type: 'HLS',\n    FragDuration: '10',\n    FragCount: '5',\n    PlaylistName: 'playlist.m3u8'\n  }\n};\n\nconst r = await this.store.putChannel(cid, conf);\nconsole.log(r);\n```\n\n### .getChannel(id[, options])\n\nGet live channel info.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- data {Object} channel info, same as conf in [.putChannel](#putchannelid-conf-options)\n- res {Object} response info\n\nexample:\n\n- Get live channel info\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannel(cid);\nconsole.log(r);\n```\n\n### .deleteChannel(id[, options])\n\nDelete a live channel.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response infomation.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Delete a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.deleteChannel(cid);\nconsole.log(r);\n```\n\n### .putChannelStatus(id, status[, options])\n\nChange the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- status {String} the status: 'enabled' or 'disabled'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Disable a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.putChannelStatus(cid, 'disabled');\nconsole.log(r);\n```\n\n### .getChannelStatus(id[, options])\n\nGet the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel status information.\n\nobject:\n\n- data {Object}\n  - Status {String} the channel status: 'Live' or 'Idle'\n  - [ConnectedTime] {String} the connected time of rtmp pushing\n  - [RemoteAddr] {String} the remote addr of rtmp pushing\n  - [Video] {Object} the video parameters (Width/Height/FrameRate/Bandwidth/Codec)\n  - [Audio] {Object} the audio parameters (Bandwidth/SampleRate/Codec)\n- res {Object} response info\n\nexample:\n\n- Get a live channel status\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelStatus(cid);\nconsole.log(r);\n\n// { Status: 'Live',\n//   ConnectedTime: '2016-04-12T11:51:03.000Z',\n//   RemoteAddr: '42.120.74.98:53931',\n//   Video:\n//   { Width: '672',\n//     Height: '378',\n//     FrameRate: '29',\n//     Bandwidth: '60951',\n//     Codec: 'H264' },\n//   Audio: { Bandwidth: '5959', SampleRate: '22050', Codec: 'AAC' }\n// }\n```\n\n### .listChannels(query[, options])\n\nList channels.\n\nparameters:\n\n- query {Object} parameters for list\n  - prefix {String}: the channel id prefix (returns channels with this prefix)\n  - marker {String}: the channle id marker (returns channels after this id)\n  - max-keys {Number}: max number of channels to return\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel list.\n\nobject:\n\n- channels {Array} the channels, each in the structure:\n  - Name {String} the channel id\n  - Description {String} the channel description\n  - Status {String} the channel status\n  - LastModified {String} the last modification time of the channel\n  - PublishUrls {Array} the publish urls for the channel\n  - PlayUrls {Array} the play urls for the channel\n- nextMarker: result.data.NextMarker || null,\n- isTruncated: result.data.IsTruncated === 'true'\n- res {Object} response info\n\nexample:\n\n- List live channels\n\n```js\nconst r = await this.store.listChannels({\n  prefix: 'my-channel',\n  'max-keys': 3\n});\nconsole.log(r);\n```\n\n### .getChannelHistory(id[, options])\n\nGet the live channel history.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the history information.\n\nobject:\n\n- records {Object} the pushing records, each in the structure:\n  - StartTime {String} the start time\n  - EndTime {String} the end time\n  - RemoteAddr {String} the remote addr\n- res {Object} response info\n\nexample:\n\n- Get the live channel history\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelHistory(cid);\nconsole.log(r);\n```\n\n### .createVod(id, name, time[, options])\n\nCreate a VOD playlist for the channel.\n\nparameters:\n\n- id {String} the channel id\n- name {String} the playlist name\n- time {Object} the duration time\n  - startTime {Number} the start time in epoch seconds\n  - endTime {Number} the end time in epoch seconds\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Create a vod playlist of a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.createVod(cid, 're-play', {\n  startTime: 1460464870,\n  endTime: 1460465877\n});\nconsole.log(r);\n```\n\n### .getRtmpUrl(channelId[, options])\n\nGet signatured rtmp url for publishing.\n\nparameters:\n\n- channelId {String} the channel id\n- [options] {Object} optional parameters\n  - [expires] {Number} the expire time in seconds of the url\n  - [params] {Object} the additional paramters for url, e.g.: {playlistName: 'play.m3u8'}\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the rtmp url.\n\nexample:\n\n- Get a rtmp url.\n\n```js\nconst cid = 'my-channel';\n\nconst url = this.store.getRtmpUrl(this.cid, {\n  params: {\n    playlistName: 'play.m3u8'\n  },\n  expires: 3600\n});\nconsole.log(url);\n// rtmp://ossliveshow.oss-cn-hangzhou.aliyuncs.com/live/tl-channel?OSSAccessKeyId=T0cqQWBk2ThfRS6m&Expires=1460466188&Signature=%2BnzTtpyxUWDuQn924jdS6b51vT8%3D\n```\n\n## Create A Image Service Instance\n\nEach Image Service instance required `accessKeyId`, `accessKeySecret`, `bucket` and `imageHost`.\n\n### oss.ImageClient(options)\n\nCreate a Image service instance.\n\noptions:\n- imageHost {String} your image service domain that binding to a OSS bucket\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- bucket {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nconst oss = require('ali-oss');\n\nconst imgClient = oss.ImageClient({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'my_image_bucket'\n  imageHost: 'thumbnail.myimageservice.com'\n});\n```\n\n## Image Operations\n\nAll operations function is [async], except `imgClient.signatureUrl`.\n\nasync function format: `async functionName(...)`.\n\n### imgClient.get(name, file[, options])\n\nGet an image from the image channel.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the image\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image with a style and store it to the local file\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', filepath);\n```\n\n_ Store image to a writestream\n\n```js\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', somestream);\n```\n\n- Get an image content buffer\n\n```js\nconst result = await imgClient.get('ossdemo/demo.jpg@200w_200h');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a not exists object or a not image object\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/not-exists-demo.jpg@200w_200h', filepath);\n// will throw NoSuchKeyError\n```\n\n### imgClient.getStream(name[, options])\n\nGet an image read stream.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image object stream\n\n```js\nconst result = await imgClient.getStream('ossdemo/demo.jpg@200w_200h');\nresult.stream.pipe(fs.createWriteStream('some demo.jpg'));\n```\n\n### imgClient.getExif(name[, options])\n\nGet a image exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nIf object don't have exif, will throw 400 BadRequest.\n\nexample:\n\n```js\nconst result = await imgClient.getExif('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n### imgClient.getInfo(name[, options])\n\nGet a image info and exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nexample:\n\n```js\nconst result = await imgClient.getInfo('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     Format: \"jpg\",\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n\n### imgClient.putStyle(name, style[, options])\n// TODO\n\n### imgClient.getStyle(name[, options])\n\nGet a style by name from the image channel.\n\nparameters:\n- name {String} image style name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} styles object\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.getStyle('400');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"234\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:58:20 GMT\"\n//     },\n//     size: 234,\n//     aborted: false,\n//     rt: 398,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }\n// }\n```\n\n### imgClient.listStyle([options])\n\nGet all styles from the image channel.\n\nparameters:\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Array} styles array, a style object:\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.listStyle();\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"913\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:47:32 GMT\"\n//     },\n//     size: 913,\n//     aborted: false,\n//     rt: 1911,\n//     keepAliveSocket: false\n//   },\n//   data: [{\n//     Name: \"200-200\",\n//     Content: \"0e_200w_200h_0c_0i_0o_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:28:08 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:28:08 GMT\"\n//   }, {\n//     Name: \"800\",\n//     Content: \"800w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:29:15 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:29:15 GMT\"\n//   }, {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }, {\n//     Name: \"600\",\n//     Content: \"600w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:35:02 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:35:02 GMT\"\n//   }]\n// }\n```\n\n### imgClient.deleteStyle(name[, options])\n// TODO\n\n### imgClient.signatureUrl(name)\n\nCreate a signature url for directly download.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return full signature url.\n\nexample:\n\n```js\nconst url = imgClient.signatureUrl('\n');\n// http://thumbnail.myimageservice.com/demo.jpg@200w_200h?OSSAccessKeyId=uZxyLARzYZtGwHKY&Expires=1427803849&Signature=JSPRe06%2FjQpQSj5zlx2ld1V%2B35I%3D\n```\n\n## Cluster Mode\n\nCluster mode now only support object operations.\n\n```js\nconst Cluster = require('ali-oss').ClusterClient;\n\nconst client = Cluster({\n  cluster: [{\n    host: 'host1',\n    accessKeyId: 'id1',\n    accessKeySecret: 'secret1'\n  }, {\n    host: 'host2',\n    accessKeyId: 'id2',\n    accessKeySecret: 'secret2'\n  }],\n  schedule: 'masterSlave', //default is `roundRobin`\n});\n\n// listen error event to logging error\nclient.on('error', function(err) {\n  console.error(err.stack);\n});\n\n// client init ready\nclient.ready(function() {\n  console.log('cluster client init ready, go ahead!');\n});\n```\n\n### Get Methods\n\nWill choose an alive client by schedule(`masterSlave` or `roundRobin`).\n\n- `client.get()`\n- `client.head()`\n- `client.getStream()`\n- `client.list()`\n- `client.signatureUrl()`\n- `client.chooseAvailable()` - choose an available client by schedule.\n- `client.getACL()`\n\n### Put Methods\n\nWill put to all clients.\n\n- `client.put()`\n- `client.putStream()`\n- `client.delete()`\n- `client.deleteMulti()`\n- `client.copy()`\n- `client.putMeta()`\n- `client.putACL()`\n- `client.restore()`\n\n## Known Errors\n\nEach error return by OSS server will contains these properties:\n\n- name {String} error name\n- message {String} error message\n- requestId {String} uuid for this request, if you meet some unhandled problem,\n    you can send this request id to OSS engineer to find out what's happend.\n- hostId {String} OSS cluster name for this request\n\nname | code | status | message | message in Chinese\n---  | ---  | --- | ---     | ---\nAccessDeniedError | AccessDenied | 403 | Access Denied | 拒绝访问\nBucketAlreadyExistsError | BucketAlreadyExists | 409 | Bucket already exists | Bucket 已经存在\nBucketNotEmptyError | BucketNotEmpty | 409 | Bucket is not empty | Bucket 不为空\nRestoreAlreadyInProgressError | RestoreAlreadyInProgress | 409 | The restore operation is in progress. | restore 操作正在进行中\nOperationNotSupportedError | OperationNotSupported | 400 | The operation is not supported for this resource | 该资源暂不支持restore操作\nEntityTooLargeError | EntityTooLarge | 400 | Entity too large | 实体过大\nEntityTooSmallError | EntityTooSmall | 400 | Entity too small | 实体过小\nFileGroupTooLargeError | FileGroupTooLarge | 400 | File group too large | 文件组过大\nInvalidLinkNameError | InvalidLinkName | 400 | Link name can't be the same as the object name | Object Link 与指向的 Object 同名\nLinkPartNotExistError | LinkPartNotExist | 400 | Can't link to not exists object | Object Link 中指向的 Object 不存在\nObjectLinkTooLargeError | ObjectLinkTooLarge | 400 | Too many links to this object | Object Link 中 Object 个数过多\nFieldItemTooLongError | FieldItemTooLong | 400 | Post form fields items too large | Post 请求中表单域过大\nFilePartInterityError | FilePartInterity | 400 | File part has changed | 文件 Part 已改变\nFilePartNotExistError | FilePartNotExist | 400 | File part not exists | 文件 Part 不存在\nFilePartStaleError | FilePartStale| 400 | File part stale | 文件 Part 过时\nIncorrectNumberOfFilesInPOSTRequestError | IncorrectNumberOfFilesInPOSTRequest | 400 | Post request contains invalid number of files | Post 请求中文件个数非法\nInvalidArgumentError | InvalidArgument | 400 | Invalid format argument | 参数格式错误\nInvalidAccessKeyIdError | InvalidAccessKeyId | 400 | Access key id not exists | Access Key ID 不存在\nInvalidBucketNameError | InvalidBucketName | 400 | Invalid bucket name | 无效的 Bucket 名字\nInvalidDigestError | InvalidDigest | 400 | Invalid digest | 无效的摘要\nInvalidEncryptionAlgorithmError | InvalidEncryptionAlgorithm | 400 | Invalid encryption algorithm | 指定的熵编码加密算法错误\nInvalidObjectNameError | InvalidObjectName | 400 | Invalid object name | 无效的 Object 名字\nInvalidPartError | InvalidPart | 400 | Invalid part | 无效的 Part\nInvalidPartOrderError | InvalidPartOrder | 400 | Invalid part order | 无效的 part 顺序\nInvalidPolicyDocumentError | InvalidPolicyDocument | 400 | Invalid policy document | 无效的 Policy 文档\nInvalidTargetBucketForLoggingError | InvalidTargetBucketForLogging | 400 | Invalid bucket on logging operation | Logging 操作中有无效的目标 bucket\nInternalError | Internal | 500 | OSS server internal error | OSS 内部发生错误\nMalformedXMLError | MalformedXML | 400 | Malformed XML format | XML 格式非法\nMalformedPOSTRequestError | MalformedPOSTRequest | 400 | Invalid post body format | Post 请求的 body 格式非法\nMaxPOSTPreDataLengthExceededError | MaxPOSTPreDataLengthExceeded | 400 | Post extra data too large | Post 请求上传文件内容之外的 body 过大\nMethodNotAllowedError | MethodNotAllowed | 405 | Not allowed method | 不支持的方法\nMissingArgumentError | MissingArgument | 411 | Missing argument | 缺少参数\nMissingContentLengthError | MissingContentLength | 411 | Missing `Content-Length` header | 缺少内容长度\nNoSuchBucketError | NoSuchBucket | 404 | Bucket not exists | Bucket 不存在\nNoSuchKeyError | NoSuchKey | 404 | Object not exists | 文件不存在\nNoSuchUploadError | NoSuchUpload | 404 | Multipart upload id not exists | Multipart Upload ID 不存在\nNotImplementedError | NotImplemented | 501 | Not implemented | 无法处理的方法\nPreconditionFailedError | PreconditionFailed | 412 | Pre condition failed | 预处理错误\nRequestTimeTooSkewedError | RequestTimeTooSkewed | 403 | Request time exceeds 15 minutes to server time | 发起请求的时间和服务器时间超出 15 分钟\nRequestTimeoutError | RequestTimeout | 400 | Request timeout | 请求超时\nRequestIsNotMultiPartContentError | RequestIsNotMultiPartContent | 400 | Invalid post content-type | Post 请求 content-type 非法\nSignatureDoesNotMatchError | SignatureDoesNotMatch | 403 | Invalid signature | 签名错误\nTooManyBucketsError | TooManyBuckets | 400 | Too many buckets on this user | 用户的 Bucket 数目超过限制\nRequestError | RequestError | -1 | network error | 网络出现中断或异常\nConnectionTimeoutError | ConnectionTimeoutError | -2 | request connect timeout | 请求连接超时\nSecurityTokenExpiredError | SecurityTokenExpired | 403 | sts Security Token Expired | sts Security Token 超时失效\n\n[generator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n[oss-sts]: https://help.aliyun.com/document_detail/oss/practice/ram_guide.html\n[browser-sample]: https://github.com/rockuw/oss-in-browser\n[oss-multipart]: https://help.aliyun.com/document_detail/oss/api-reference/multipart-upload/InitiateMultipartUpload.html\n[disabled-browser-headers]: https://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n\n\n### QA\nYou can join DingDing Talk Group, [Group Link](https://qr.dingtalk.com/action/joingroup?code=v1,k1,inkSDqCxm7LilkaR/kknRVBDQ8PDA0Lj5hj4Cf9io3w=&_dt_no_comment=1&origin=11)\n\n<img src=\"task/dingding.jpg\" height=\"400\" title=\"dingding\" width=\"300\">\n",
      "readmeFilename": "README.md",
      "_id": "ali-oss@6.8.0-beta",
      "_nodeVersion": "10.12.0",
      "_npmVersion": "6.14.4",
      "dist": {
        "integrity": "sha512-DlYq3539+D3Q0oQ59mmAAdUiz7a3Iaxt6RBIqDzQzfnU+KiacB9B09zX+n+Cb0PMHS7jCletylvPiF5PNyfoEQ==",
        "shasum": "07fb98e9a3176c1737901c62442dcae4af778843",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.8.0-beta.tgz",
        "fileCount": 84,
        "unpackedSize": 1866644,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeqA4kCRA9TVsSAnZWagAAZYcQAJoDGrma+cur+CYJKEnj\nJBH1Nk0iEsuGWBn8P2ARaz0y1l7Gqstg0LcFNFjlvs/s0S1aYfb5qTRbCDUG\nv2Y9xt19DEv5xHHw4x2oxZYbGKO+I4Vx6XiZaAkCM1hLKDGHlv8dul31+ZFV\n6jnexv/FfyOmyP+fFisiDuStUisWOpr2tXdvI05cXuiUMqSQYWHyMHy9wkW4\nObiFAstpbQWGF7z/KH6lwNwsR5kclRWzzzKBVlZBUNKpk+oN0d3hNmRXedFx\nvczYYPFUzud3JRHbkBBaFHlBqUHr0ZrvKuuAOv3/Kfm3DP26THycTp57APIC\nFgqrTVEcaufffRrJbMHF1dKY01afNXQFjzD1vjFhOMBcLHczyq8Jl+45Dn2i\nVySoNUmmVH3pCyFsnsYjIfkIlZEN393GG+clK8Q3ELNP1vjjID9FlRlMYtFP\n4qiK9O++HzLijuWv7OqLUc174LJ5TMzowiIxqhKD3ZC2iwNdHAHVAeZ/qI/x\nCcai7ytJueieNBWwhSmXafeNJGkB1WufZFYd6l7TjmL+FFvGJRNfQzBecO/d\n1hCIKK+j3EQpdyMuNozwlpd7+tCPtzHjKn4uhQxpT/G242hGjxejXaygtGPl\n7kggLouesIDF0y6L6oyVi1pM5fma40EXhiUXQHBliUdYju/ifxqBZDJWsm26\nW/XI\r\n=kgkP\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGQj+9blmD42Qy77PWdm30NqCTiq3lDwOIjmGFbBgHd4AiEAr7Lc4Vy6uL/mjH2blnGgV3pcHEhe1g6ep6vmrk+sjYo="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.8.0-beta_1588071972058_0.12681634539183517"
      },
      "_hasShrinkwrap": false
    },
    "6.8.0": {
      "name": "ali-oss",
      "version": "6.8.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "./shims/mime.js",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "fs": false,
        "child_process": false
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^6.7.2",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.1.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^1.3.4",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "d0bd1b777d60f18bfb4ac5d783100688024bc966",
      "_id": "ali-oss@6.8.0",
      "_nodeVersion": "10.12.0",
      "_npmVersion": "6.14.5",
      "dist": {
        "integrity": "sha512-EaT1VTWwDDxe1fXZm6P23xsBJNaJ77xERz+lDO9iU+qb0bhn/BhiVtyZueanLrTyjmK0TDgpsjw6ga/P+VILSw==",
        "shasum": "5bbe906e6762d5e5051c35103fbee10f9d98bcf8",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.8.0.tgz",
        "fileCount": 86,
        "unpackedSize": 1871005,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeulZHCRA9TVsSAnZWagAAU78P/AzkM5E7JeSAtAiFpGa5\nCLn8vKZYzyfXqspjhCaVo8gvi8UbbBVbqknoJraVIjHLUmGON1Rqj0/CiaS+\nThbv8kM5h0MD8g83LG0E83Nt1q54q+E+kK1+AkC8eGBCMUkElBCdugEHMhXl\nbskPHnSzv2F18nOD/RmxL7r954GIdndZJt5qd+SHw3T4/BPHgfkdDgjYrUhr\n63rn7Cz4OS4QmEUmol0aRlhmv7A+bLg4OyX7pOjM3CisMqaCX06a/FantYnT\nmzZkmp6efiMGOKIZYe932tYWwO/cXz1KVSJSim5hoQLuTz0jNw/4/rEqVr1C\n8jO1VTNieXBtm+abFIn7IDpZuP6294eqjxrMH2bBX6ZaS5hGKLEPnTP502Xi\nwtc67chCUSY+qN8unNlwISbIVQ+7np3nSwRmSxulnpgKF2IHB/BwUyHuI6Eq\nzAJt3qsWUOi3eZoQocfVK2vd3Wmtq4JrZCcbU+e4xtl+nQYFT+6RMdJ4NQZF\nFxqkaicCNcsHkC+VswqAdBSaxtft5K8tQ0njO8Kc/sb7CTfjjriYYKh3ehI7\nWKNe43LC/aRIL7u874HJWRcSoukqZbZ2G9QIjHbYqpioCilDmUTDiUhWz26Z\ng+fxfreIZuJWFV4Sqd3LcTGUkmoc2fyqw8XIHkWXVNKXkfzdEkM6+o5irK4B\nl9oq\r\n=uyWj\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDyg539MVKf2A9FAcg2bWtCjgH1DKzkmse86GtZQ6lCXgIgfpRUXj4G6JihH3p6+fqpyLKnqTF26UCpxWFu1DS4k7M="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.8.0_1589270086584_0.4485620869507463"
      },
      "_hasShrinkwrap": false
    },
    "6.9.0": {
      "name": "ali-oss",
      "version": "6.9.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^6.7.2",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-plugin-import": "^2.9.0",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "ef1e44ae895efa58ef04df4426163d2700f7cca8",
      "_id": "ali-oss@6.9.0",
      "_nodeVersion": "10.12.0",
      "_npmVersion": "6.14.5",
      "dist": {
        "integrity": "sha512-gJlWMzwN4qPx4CJn45kUasAXjDsOdtB72ldCyAKMmDbp+g2AdE2KEUOCva/+HAyqxPvRR6CegsSYP8uir5HEfw==",
        "shasum": "9df3256434647be8b8dd50e7b01915c3b3b270b5",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.9.0.tgz",
        "fileCount": 89,
        "unpackedSize": 1658189,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe2gp5CRA9TVsSAnZWagAATgoP/iNNZRpLcHRQoHCXB2dt\nqUJWPpE7voCDiD0eXRcsA3jYH4CBINcl8xfg2X5adzpG4EKQ4M5ydrlofwSe\ngwyCvyDdl+D9E+lP/phuzvjHlfE9c2Kb2CeEFW6H4R18pbuEWW7KRuILXTFi\ndRyNg6fNMxt+f67ScokGxakjmPi5leJRoINeIWR2eg1TfzmUz2NgP9JyjgxH\neZkoq4OLdsJXaDEpYCHlHu8BoU/XlISB2Ciutw1rPW/RNXIyoNwDtY0MtKKK\nn9s3yefkOO/Z9H1p/eXf6CAr5g2cqSI8B86PH72Ev4MKcUE+dBWesgrvckyH\nZu8SRGqYklF9K5XAp5Sb7A4PbrmCUIObIyrU4dGMIfDLUo2RL6NDsFMCZwLJ\nT0z5daj48oiJISWEX6XP0fq82GmXg46SWlOfvQM9gnvArVubYn22u5VLklUP\nL+vMmvcffL45fzTzxR5iJNw9Ex/pkh3rG7Ny1XGriAr31Uu4TlMU3OV1e6TP\nRkzwnCuKuK6izSjLZmTUWAj4dAX222Htklh6LgusrqQrBd4LeQN7ICzSmMmf\n055CfU41ZgFmXWJuo8/o3urRzMbrIqAXS7FTckwQ7p5pAY92gM6PYqwk9j8c\n0Y1rSoTYAXrRJUCKJOiNfN2S5lCfFhM+f5bWzEQ+9h3E1nBaP6QEv2ha3w/Y\nwKF5\r\n=qusK\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCugYo4aSBesQZl4fhnfbbWODhdqD4C1MTua8si9cJeEQIgVSWi/NvhZ+hCUoIwyL+3BCS0Ad9vi2X8xXSAKbLb/g0="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.9.0_1591347832843_0.9931705303057532"
      },
      "_hasShrinkwrap": false
    },
    "6.9.1": {
      "name": "ali-oss",
      "version": "6.9.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "7dbdee72666031767a741d9f3e054a69b3eed10f",
      "_id": "ali-oss@6.9.1",
      "_nodeVersion": "10.21.0",
      "_npmVersion": "6.14.4",
      "dist": {
        "integrity": "sha512-9l7Deeg/S4Q/sMUYawkqvs3wmV6/VCQmqj3VpV0PZvV8oJKmTK2pyWDv7+6agfs15YmyzUq/c/n0itU5xNEDCA==",
        "shasum": "769cd52a488b080b1f4192fba205fc141816d4f8",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.9.1.tgz",
        "fileCount": 139,
        "unpackedSize": 1689957,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe5zLuCRA9TVsSAnZWagAAqx4P/2zPM8SZvkN6/2GIGh/o\nzcFP2tnAFpO15GxveYgHd0g2QwrXdr2Sj7BM+zq7S6gX45Z+GyUJ0GYOrfI9\ngm9pm/mQGZoe2Yv/eSwtsohFUxeTPw2MxO4/pZMegbGPGJ7Sc0WWVLwdjygm\nXBHcH0/d/pJ37JEISzF0V5Jpd9iY6fUSak/WJG9nj+nRENkEJ9+V9Emtit71\nLJQcxEIRIeD4gCdmXJuTJn8YYXcVy9fWTNYRl4CPXrcowjxpfSEMAWOqiOQU\nSI+iShNDqhRl5uQCR4N4osU9nC1XTZ/m/v7nS7YfUn5A7kAc9yNjxabt1iUJ\nWxYFEzWky4Iv7FOrx8hlql/wM98LkK1wkc2E9b1oS3Yev0JQ8sP8G3ORGOQU\nimZBNooA2nSMS5+3pppmNA0UuvzOqvsQY1aF/J+lMLgr8TczUPw8gty00dEQ\nzI/9KiFIh2GWw5elTI0kGn8bTOmU8yfLWnlhjhT+096qR4QWGEwau1AjxVub\nFwIzfG9oVuuYihQoz7iZU1BF4cwhtrbZxglD4J3Rf4ZI7DxRH5HGpO8VqIO/\nY3P5QywvgvBnmFSIo5Xg5UyxQbhT0KGej1YkG1pi9PUC9Fnlr9q9WY2W4fLE\nsWFZmbOIHgmF/cIDOaAH3K8dff6TyRPP/hUAxBWDjElP5jWX7yQ5MW4XujGZ\nF2+Q\r\n=sSfX\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDDI8OSqzwxDE9QBLNyPq7wveZGJ+/KLreiT5zOlAj5lgIhAOwnTa8sqN4VcCz1w9Quml6sB65Hv+9Ir/+jtFv/ySsi"
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.9.1_1592210157723_0.95410032113818"
      },
      "_hasShrinkwrap": false
    },
    "6.10.0": {
      "name": "ali-oss",
      "version": "6.10.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^8.0.1",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "e436a3b025460cf5bb59148d6932c8b652c2ebff",
      "_id": "ali-oss@6.10.0",
      "_nodeVersion": "10.21.0",
      "_npmVersion": "6.14.5",
      "dist": {
        "integrity": "sha512-kWguelLe4QZCvqisN3i9i+kyaG2JCj+4AqXbc+HKJ3b4WYwkn2hS9INJHtrUSlo95yn9FKSNXwTAfLMrXyQlnA==",
        "shasum": "9b6d61586259851d3f7e33ae9e2ed58e77e5257e",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.10.0.tgz",
        "fileCount": 142,
        "unpackedSize": 1698839,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfDRewCRA9TVsSAnZWagAAuGYQAIBBJBgCTid5CWi03rC1\nFCmKBKJZaaf2As4oNqb4Cd3rbeSFsKrC8G4JeYZcdwy3fWxvYeDjh1txK3td\nRbCOriT61+mJhPYwdYUff9N7WFSDYLA17qmn44/PunVGpF8qGrW6139ba/ac\nOa8ZyWucHMX3cvyIbchCgbaP/1x2RGnn7lDqY9JWFX+TD9nxyn+lzEsraDqr\n8HYUPlA5TBnMf616JRf1vCOGzy3vk0d0BZBovNi9fYKiiNa2ieK/RITA8JuX\ni49UXt/TztjNhEoqR0HuB1m7TM1nDV5pAfDcu+E4eTC5vtYdjie7B6LtIDcL\n8yY33IHQEQGAdDc7rp/a3sK0+aycTzX1Ri/HUToGiTRivHHONcEUpjnCRR50\n+Tow0SH8hr+EwoIOOfRtP9TWQifyTKsg2YSACEUfR32VxicBtB2uCygufohP\n4VqY4cz/GnBSCuZ3Phlb/G0RmXcJEDPihqlmvUwGIiTmsnFZw4uXnITL9dv1\n+A6AUnVZQwte4u5XDwel9kkvsgXD164SQ6YqBae1PAoQl7Wl0Dvlb9dzsJCr\ncgKsnljD7fwFX3PKI7AoMFtA4mjcYGHFAQLOCVOvZSrxND6HjiDnAdxKdwkr\ncTEdPTitZH+lnVTdI6jR1woBwFJ/gMg/N8sIi5C7Hc9uz5uZ7AmKjzvgeP5D\ndkNR\r\n=Z2EB\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDvFMRuyN+kxwfGXqk9z5i12xdj/q16RVJVx0E1/mb27AiAtskqksK4FJlg8QZUuXyWqYUkLsr7333w0Sdh4M3b/aA=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.10.0_1594693552083_0.03934052656053777"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-beta.1": {
      "name": "ali-oss",
      "version": "7.0.0-beta.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/node/index.js",
      "browser": {
        "lib/node/index.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && tsc:build",
        "tsc:build": "tsc -b tsconfig-es.json tsconfig-cjs.json && node task/handle-es-export.js",
        "tsc:watch": "tsc -b tsconfig-es.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig-es.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babel-plugin-transform-regenerator": "^6.26.0",
        "babel-plugin-transform-runtime": "^6.8.0",
        "babel-preset-es2015": "^6.24.1",
        "babel-register": "^6.26.0",
        "babel-runtime": "^6.6.1",
        "babelify": "^7.3.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^13.3.0",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^4.4.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "5b1326b382313b13ee757c4494d63acae39128f3",
      "readme": "oss-js-sdk\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage][cov-image]][cov-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/ali-oss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/ali-oss\n[travis-image]: https://img.shields.io/travis/ali-sdk/ali-oss/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ali-sdk/ali-oss.svg?branch=master\n[cov-image]: http://codecov.io/github/ali-sdk/ali-oss/coverage.svg?branch=master\n[cov-url]: http://codecov.io/github/ali-sdk/ali-oss?branch=master\n[david-image]: https://img.shields.io/david/ali-sdk/ali-oss.svg?style=flat-square\n[david-url]: https://david-dm.org/ali-sdk/ali-oss\n\naliyun OSS(Object Storage Service) js client for Node and Browser env.\n\n`NOTE`： For SDK `5.X` document, please go to [README.md](https://github.com/ali-sdk/ali-oss/blob/5.x/README.md)\n\n## Install\n\n```bash\nnpm install ali-oss --save\n```\n\n## Compatibility\n\n### Node\nNode.js >= 8.0.0 required. You can use 4.x in Node.js < 8.\n\n### Browser\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n\n`Note`:\n- For Lower browsers you can refer to [PostObject](https://help.aliyun.com/document_detail/31988.html), if you want to see more practices ,please refer to [Web Post](https://help.aliyun.com/document_detail/31923.html)\n\n### QA\nYou can join DingDing Talk Group, [Group Link](https://qr.dingtalk.com/action/joingroup?code=v1,k1,inkSDqCxm7LilkaR/kknRVBDQ8PDA0Lj5hj4Cf9io3w=&_dt_no_comment=1&origin=11)\n\n<img src=\"task/dingding.jpg\" height=\"400\" title=\"dingding\" width=\"300\">\n\n## License\n\n[MIT](LICENSE)\n\n# OSS Usage\n\nOSS, Object Storage Service. Equal to well known Amazon [S3](http://aws.amazon.com/s3/).\n\nAll operation use es7 async/await to implement. All api is async function.\n\n## Summary\n\n- [Node Usage](#node-usage)\n- [Browser Usage](#browser-usage)\n- [Data Regions](#data-regions)\n- [Create Account](#create-acount)\n- [Create A Bucket Instance](#create-a-bucket-instance)\n  - [oss(options)](#ossoptions)\n- [Bucket Operations](#bucket-operations)\n  - Base\n    - [.listBuckets(query[, options])](#listbucketsquery-options)\n    - [.putBucket(name[, options])](#putbucketname-options)\n    - [.useBucket(name)](#usebucketname)\n    - [.deleteBucket(name[, options])](#deletebucketname-options)\n    - [.getBucketInfo(name)](#getbucketinfoname)\n    - [.getBucketLocation(name)](#getbucketlocationname)\n  - ACL\n    - [.putBucketACL(name, acl[, options])](#putbucketaclname-acl-options)\n    - [.getBucketACL(name[, options])](#getbucketaclname-options)\n  - Logging\n    - [.putBucketLogging(name, prefix[, options])](#putbucketloggingname-prefix-options)\n    - [.getBucketLogging(name[, options])](#getbucketloggingname-options)\n    - [.deleteBucketLogging(name[, options])](#deletebucketloggingname-options)\n  - Website\n    - [.putBucketWebsite(name, config[, options])](#putbucketwebsitename-config-options)\n    - [.getBucketWebsite(name[, options])](#getbucketwebsitename-options)\n    - [.deleteBucketWebsite(name, region[, options])](#deletebucketwebsitename-options)\n  - Referer\n    - [.putBucketReferer(name, allowEmpty, referers[, options])](#putbucketreferername-allowempty-referers-options)\n    - [.getBucketReferer(name[, options])](#getbucketreferername-options)\n    - [.deleteBucketReferer(name[, options])](#deletebucketreferername-options)\n  - Lifecycle\n    - [.putBucketLifecycle(name, rules[, options])](#putbucketlifecyclename-rules-options)\n    - [.getBucketLifecycle(name[, options])](#getbucketlifecyclename-options)\n    - [.deleteBucketLifecycle(name[, options])](#deletebucketlifecyclename-options)\n  - CORS\n    - [.putBucketCORS(name, rules[, options])](#putbucketcorsname-rules-options)\n    - [.getBucketCORS(name[, options])](#getbucketcorsname-options)\n    - [.deleteBucketCORS(name[, options])](#deletebucketcorsname-options)\n  - RequestPayment\n    - [.getBucketRequestPayment(bucketName[, options])](#getbucketrequestpaymentbucketname-options)\n    - [.putBucketRequestPayment(bucketName, payer[, options])](#putBucketRequestpaymentbucketname-payer-options)\n  - BucketEncryption\n    - [.putBucketEncryption(name[, options])](#putbucketencryptionbucketname-options)\n    - [.getBucketEncryption(name)](#getbucketencryptionbucketname-options)\n    - [.deleteBucketEncryption(name)](#deletebucketencryptionbucketname-options)\n  - tagging\n    - [.putBucketTags(name, tag[, options])](#putBucketTagsname-tag-options)\n    - [.getBucketTags(name, [, options])](#getBucketTagsname-options)\n    - [.deleteBucketTags(name, [, options])](#deleteBucketTagsname-options)\n  - policy\n    - [.putBucketPolicy(name, policy[, options])](#putBucketPolicyname-policy-options)\n    - [.getBucketPolicy(name, [, options])](#getBucketPolicyname-options)\n    - [.deleteBucketPolicy(name, [, options])](#deleteBucketPolicyname-options)\n  - versioning\n    - [.getBucketVersioning(name, [, options])](#getBucketVersioningname-options)\n    - [.putBucketVersioning(name, status[, options])](#putBucketVersioningname-status-options)\n\n- [Object Operations](#object-operations)\n  - [.list(query[, options])](#listquery-options)\n  - [.getBucketVersions(query[, options])](#getBucketVersionsquery-options)\n  - [.put(name, file[, options])](#putname-file-options)\n  - [.putStream(name, stream[, options])](#putstreamname-stream-options)\n  - [.append(name, file[, options])](#appendname-file-options)\n  - [.getObjectUrl(name[, baseUrl])](#getobjecturlname-baseurl)\n  - [.generateObjectUrl(name[, baseUrl])](#generateobjecturlname-baseurl)\n  - [.head(name[, options])](#headname-options)\n  - [.getObjectMeta(name[, options])](#getobjectmetaname-options)\n  - [.get(name[, file, options])](#getname-file-options)\n  - [.getStream(name[, options])](#getstreamname-options)\n  - [.delete(name[, options])](#deletename-options)\n  - [.copy(name, sourceName[, sourceBucket, options])](#copyname-sourcename-sourcebucket-options)\n  - [.putMeta(name, meta[, options])](#putmetaname-meta-options)\n  - [.deleteMulti(names[, options])](#deletemultinames-options)\n  - [.signatureUrl(name[, options])](#signatureurlname-options)\n  - [.putACL(name, acl[, options])](#putaclname-acl-options)\n  - [.getACL(name[, options])](#getaclname-options)\n  - [.restore(name[, options])](#restorename-options)\n  - [.putSymlink(name, targetName[, options])](#putsymlinkname-targetname-options)\n  - [.getSymlink(name[, options])](#getsymlinkname-options)\n  - [.initMultipartUpload(name[, options])](#initmultipartuploadname-options)\n  - [.uploadPart(name, uploadId, partNo, file, start, end[, options])](#uploadpartname-uploadid-partno-file-start-end-options)\n  - [.uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])](#uploadpartcopyname-uploadid-partno-range-sourcedata-options)\n  - [.completeMultipartUpload(name, uploadId, parts[, options])](#completemultipartuploadname-uploadid-parts-options)\n  - [.multipartUpload(name, file[, options])](#multipartuploadname-file-options)\n  - [.multipartUploadCopy(name, sourceData[, options])](#multipartuploadcopyname-sourcedata-options)\n  - [.listParts(name, uploadId[, query, options])](#listparts-name-uploadid-query-options)\n  - [.listUploads(query[, options])](#listuploadsquery-options)\n  - [.abortMultipartUpload(name, uploadId[, options])](#abortmultipartuploadname-uploadid-options)\n  - [.calculatePostSignature(policy)](#calculatePostSignaturepolicy)\n  - [.getObjectTagging(name, [, options])](#getObjectTaggingname-options)\n  - [.putObjectTagging(name, tag[, options])](#putObjectTaggingname-tag-options)\n  - [.deleteObjectTagging(name, [, options])](#deleteObjectTaggingname-options)\n- [RTMP Operations](#rtmp-operations)\n  - [.putChannel(id, conf[, options])](#putchannelid-conf-options)\n  - [.getChannel(id[, options])](#getchannelid-options)\n  - [.deleteChannel(id[, options])](#deletechannelid-options)\n  - [.putChannelStatus(id, status[, options])](#putchannelstatusid-status-options)\n  - [.getChannelStatus(id[, options])](#getchannelstatusid-options)\n  - [.listChannels(query[, options])](#listchannelsquery-options)\n  - [.getChannelHistory(id[, options])](#getchannelhistoryid-options)\n  - [.createVod(id, name, time[, options])](#createvodid-name-time-options)\n  - [.getRtmpUrl(channelId[, options])](#getrtmpurlchannelid-options)\n- [Create A Image Service Instance](#create-a-image-service-instance)\n  - [oss.ImageClient(options)](#ossimageclientoptions)\n- [Image Operations](#image-operations)\n  - [imgClient.get(name, file[, options])](#imgclientgetname-file-options)\n  - [imgClient.getStream(name[, options])](#imgclientgetstreamname-options)\n  - [imgClient.getExif(name[, options])](#imgclientgetexifname-options)\n  - [imgClient.getInfo(name[, options])](#imgclientgetinfoname-options)\n  - [imgClient.putStyle(name, style[, options])](#imgclientputstylename-style-options)\n  - [imgClient.getStyle(name[, options])](#imgclientgetstylename-options)\n  - [imgClient.listStyle([options])](#imgclientliststyleoptions)\n  - [imgClient.deleteStyle(name[, options])](#imgclientdeletestylename-options)\n  - [imgClient.signatureUrl(name)](#imgclientsignatureurlname)\n- [Known Errors](#known-errors)\n\n## Node Usage\n\n### Compatibility\n- Node: >= 8.0.0\n\n### Basic usage\n1.install SDK using npm\n```\nnpm install ali-oss --save\n```\n2.for example:\n```js\nconst OSS = require('ali-oss');\nconst client = new OSS({\n  region: '<oss region>',\n  accessKeyId: '<Your accessKeyId>',\n  accessKeySecret: '<Your accessKeySecret>',\n  bucket: '<Your bucket name>'\n});\n```\n## Browser Usage\n\nYou can use most of the functionalities of `ali-oss` in browser with\nsome exceptions:\n\n- put object with streaming: no chunked encoding, we use multipart\n  upload instead\n- get object to local file: we cannot manipulate file system in\n  browser, we provide signed object url for downloading needs\n- bucket operations(listBuckets, putBucketLogging, etc) will fail: OSS\n  server currently do not support CORS requests for bucket operations\n  (will probably be fixed later)\n\n### Compatibility\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n    >Note: Because some browsers do not support promises, you need to introduce promise compatible libraries.<br>\n    For example: IE10 and IE11 need to introduce a promise-polyfill.\n\n### Setup\n\n#### Bucket setup\n\nAs browser-side javascript involves CORS operations. You need to setup\nyour bucket CORS rules to allow CORS operations:\n\n- set allowed origins to '\\*'\n- allowed methods to 'PUT, GET, POST, DELETE, HEAD'\n- set allowed headers to '\\*'\n- expose 'ETag' in expose headers\n\n#### STS setup\n\nAs we don't want to expose the accessKeyId/accessKeySecret in the\nbrowser, a [common practice][oss-sts] is to use STS to grant temporary\naccess.\n\n### Basic usage\n\nInclude the sdk lib in the `<script>` tag and you have `OSS` available\nfor creating client.\n\n```html\n // x.x.x The specific version number represented\n // we recommend introducing offline resources, because the usability of online resources depends on the stability of the cdn server.\n <!-- Introducing online resources -->\n <script src=\"http://gosspublic.alicdn.com/aliyun-oss-sdk-x.x.x.min.js\"></script>\n <!-- Introducing offline resources -->\n <script src=\"./aliyun-oss-sdk-x.x.x.min.js\"></script>\n\n<script type=\"text/javascript\">\n  const client = new OSS({\n    region: 'oss-cn-hangzhou',\n    accessKeyId: '<access-key-id>',\n    accessKeySecret: '<access-key-secret>',\n    bucket: '<bucket-name>',\n    stsToken: '<security-token>'\n  });\n\n  client.list().then((result) => {\n    console.log('objects: %j', result.objects);\n    return client.put('my-obj', new OSS.Buffer('hello world'));\n  }).then((result) => {\n    console.log('put result: %j', result);\n    return client.get('my-obj');\n  }).then((result) => {\n    console.log('get result: %j', result.content.toString());\n  });\n</script>\n```\nThe full sample can be found [here][browser-sample].\n\n### How to build\n\n```bash\nnpm run build-dist\n```\n\nAnd see the build artifacts under `dist/`.\n\n\n## Data Regions\n\n[OSS current data regions](https://help.aliyun.com/document_detail/oss/user_guide/endpoint_region.html).\n\nregion | country | city | endpoint | internal endpoint\n---  | ---     | ---  | --- | ---\noss-cn-hangzhou | China | HangZhou | oss-cn-hangzhou.aliyuncs.com | oss-cn-hangzhou-internal.aliyuncs.com\noss-cn-shanghai | China | ShangHai | oss-cn-shanghai.aliyuncs.com | oss-cn-shanghai-internal.aliyuncs.com\noss-cn-qingdao | China | QingDao | oss-cn-qingdao.aliyuncs.com | oss-cn-qingdao-internal.aliyuncs.com\noss-cn-beijing | China | BeiJing | oss-cn-beijing.aliyuncs.com | oss-cn-beijing-internal.aliyuncs.com\noss-cn-shenzhen | China | ShenZhen | oss-cn-shenzhen.aliyuncs.com | oss-cn-shenzhen-internal.aliyuncs.com\noss-cn-hongkong | China | HongKong | oss-cn-hongkong.aliyuncs.com | oss-cn-hongkong-internal.aliyuncs.com\noss-us-west-1 | US | Silicon Valley | oss-us-west-1.aliyuncs.com | oss-us-west-1-internal.aliyuncs.com\noss-ap-southeast-1 | Singapore | Singapore | oss-ap-southeast-1.aliyuncs.com | oss-ap-southeast-1-internal.aliyuncs.com\n\n## Create Account\n\nGo to [OSS website](http://www.aliyun.com/product/oss/?lang=en), create a new account for new user.\n\nAfter account created, you can create the OSS instance and get the `accessKeyId` and `accessKeySecret`.\n\n## Create A Bucket Instance\n\nEach OSS instance required `accessKeyId`, `accessKeySecret` and `bucket`.\n\n## new OSS(options)\n\nCreate a Bucket store instance.\n\noptions:\n\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- [stsToken] {String} used by temporary authorization, detail [see](https://www.alibabacloud.com/help/doc-detail/32077.htm)\n- [bucket] {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [endpoint] {String} oss region domain. It takes priority over `region`.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`.\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`.\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [secure] {Boolean} instruct OSS client to use HTTPS (secure: true) or HTTP (secure: false) protocol.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`.\n- [cname] {Boolean}, default false, access oss with custom domain name. if true, you can fill `endpoint` field with your custom domain name,\n- [isRequestPay] {Boolean}, default false, whether request payer function of the bucket is open, if true, will send headers `'x-oss-request-payer': 'requester'` to oss server.\n  the details you can see [requestPay](https://help.aliyun.com/document_detail/91337.htm)\n- [useFetch] {Boolean}, default false, it just work in Browser, if true,it means upload object with \n`fetch` mode ,else `XMLHttpRequest`\n\nexample:\n\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\n```\n\n## Bucket Operations\n\n### .listBuckets(query[, options])\n\nList buckets in this account.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search buckets using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [max-keys] {String|Number} max buckets, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return buckets list on `buckets` properties.\n\n- buckets {Array<BucketMeta>} bucket meta info list\n  Each `BucketMeta` will contains blow properties:\n    - name {String} bucket name\n    - region {String} bucket store data region, e.g.: `oss-cn-hangzhou-a`\n    - creationDate {String} bucket create GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n- owner {Object} object owner, including `id` and `displayName`\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 buckets\n\n```js\nstore.listBuckets({\n  \"max-keys\": 10\n}).then((result) => {\n  console.log(result);\n});\n\n```\n\n### .putBucket(name[, options])\n\nCreate a new bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket exists and not belong to current account, will throw BucketAlreadyExistsError.\n  If bucket not exists, will create a new bucket and set it's ACL.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [StorageClass] {String} the storage type include (Standard,IA,Archive)\n\nSuccess will return the bucket name on `bucket` properties.\n\n- bucket {String} bucket name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Create a bucket name `helloworld` location on HongKong\n\n```js\nstore.putBucket('helloworld').then((result) => {\n  // use it by default\n  store.useBucket('helloworld');\n});\n```\n\n- Create a bucket name `helloworld` location on HongKong StorageClass `Archive`\n\n```js\nawait store.putBucket('helloworld', { StorageClass: 'Archive' });\n// use it by default\nstore.useBucket('helloworld');\n```\n\n### .deleteBucket(name[, options])\n\nDelete an empty bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket is not empty, will throw BucketNotEmptyError.\n  If bucket is not exists, will throw NoSuchBucketError.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete the exists 'helloworld' bucket on 'oss-cn-hongkong'\n\n```js\nstore.deleteBucket('helloworld').then((result) => {});\n```\n\n### .useBucket(name)\n\nUse the bucket.\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.useBucket('helloworld');\n```\n\n### .getBucketInfo(name)\n\nGet bucket information,include CreationDate、ExtranetEndpoint、IntranetEndpoint、Location、Name、StorageClass、\nOwner、AccessControlList、Versioning\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketInfo('helloworld').then( (res) => {\n  console.log(res.bucket)\n})\n```\n\n### .getBucketLocation(name)\n\nGet bucket location\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketLocation('helloworld').then( (res) => {\n  console.log(res.location)\n})\n```\n\n---\n\n### .putBucketACL(name, acl[, options])\n\nUpdate the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- acl {String} access control list, current available: `public-read-write`, `public-read` and `private`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set bucket `helloworld` to `public-read-write`\n\n```js\nstore.putBucketACL('helloworld', 'public-read-write').then((result) => {\n});\n```\n\n### .getBucketACL(name[, options])\n\nGet the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld`\n\n```js\nstore.getBucketACL('helloworld').then((result) => {\n  console.log(result.acl);\n});\n```\n\n---\n\n### .putBucketLogging(name, prefix[, options])\n\nUpdate the bucket logging settings.\nLog file will create every one hour and name format: `<prefix><bucket>-YYYY-mm-DD-HH-MM-SS-UniqueString`.\n\nparameters:\n\n- name {String} bucket name\n- [prefix] {String} prefix path name to store the log files\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Enable bucket `helloworld` logging and save with prefix `logs/`\n\n```js\nstore.putBucketLogging('helloworld', 'logs/').then((result) => {\n});\n```\n\n### .getBucketLogging(name[, options])\n\nGet the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- enable {Boolean} enable logging or not\n- prefix {String} prefix path name to store the log files, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld` logging settings\n\n```js\nstore.getBucketLogging('helloworld').then((result) => {\n  console.log(result.enable, result.prefix);\n});\n```\n\n### .deleteBucketLogging(name[, options])\n\nDelete the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketWebsite(name, config[, options])\n\nSet the bucket as a static website.\n\nparameters:\n\n- name {String} bucket name\n- config {Object} website config, contains blow properties:\n  - index {String} default page, e.g.: `index.html`\n  - [error] {String} error page, e.g.: 'error.html'\n  - [supportSubDir] {String} default vaule false\n  - [type] {String} default value 0\n  - [routingRules] {Array} RoutingRules\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketWebsite('hello', {\n  index: 'index.html'\n}).then((result) => {\n});\n```\n\n### .getBucketWebsite(name[, options])\n\nGet the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- index {String} index page\n- error {String} error page, maybe `null`\n- supportSubDir {String}\n- type {String}\n- routingRules {Array}\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketWebsite(name[, options])\n\nDelete the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketReferer(name, allowEmpty, referers[, options])\n\nSet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list, e.g.:\n  ```js\n  [\n    'https://npm.taobao.org',\n    'http://cnpmjs.org'\n  ]\n  ```\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketReferer('hello', false, [\n  'https://npm.taobao.org',\n  'http://cnpmjs.org'\n]).then((result) => {\n});\n```\n\n### .getBucketReferer(name[, options])\n\nGet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketReferer(name[, options])\n\nDelete the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketLifecycle(name, rules[, options])\n\nSet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains blow properties:\n  - [id] {String} rule id, if not set, OSS will auto create it with random string.\n  - prefix {String} store prefix\n  - status {String} rule status, allow values: `Enabled` or `Disabled`\n  - [expiration] {Object} specifies the expiration attribute of the lifecycle rules for the object.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    - [expiredObjectDeleteMarker] {String} value `true`\n    `createdBeforeDate` and `days`  and `expiredObjectDeleteMarker` must have one.\n  - [abortMultipartUpload] {Object} Specifies the expiration attribute of the multipart upload tasks that are not complete.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `createdBeforeDate` and `days` must have one.\n  - [transition] {Object} Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle.\n    - storageClass {String} Specifies the storage class that objects that conform to the rule are converted into. allow values: `IA` or `Archive`\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `createdBeforeDate` and `days` must have one.\n  - [noncurrentVersionTransition] {Object} Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle.\n    - storageClass {String} Specifies the storage class that history objects that conform to the rule are converted into. allow values: `IA` or `Archive`\n    - noncurrentDays {String} expire after the `noncurrentDays`\n  `expiration`、 `abortMultipartUpload`、 `transition`、 `noncurrentVersionTransition` must have one.\n  - [noncurrentVersionExpiration] {Object} specifies the expiration attribute of the lifecycle rules for the history object.\n    - noncurrentDays {String} expire after the `noncurrentDays`\n  - [tag] {Object} Specifies the object tag applicable to a rule. Multiple tags are supported.\n    - key {String} Indicates the tag key.\n    - value {String} Indicates the tag value.\n    `tag` cannot be used with `abortMultipartUpload`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketLifecycle('hello', [\n  {\n    id: 'delete after one day',\n    prefix: 'logs/',\n    status: 'Enabled',\n    days: 1\n  },\n  {\n    prefix: 'logs2/',\n    status: 'Disabled',\n    date: '2022-10-11T00:00:00.000Z'\n  }\n]).then((result) => {});\n```\n\nexample: for history with noncurrentVersionExpiration\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  expiration: {\n    days: '1'\n  },\n  noncurrentVersionExpiration: {\n    noncurrentDays: '1'\n  }\n}]);\nconsole.log(result)\n```\n\nexample: for history with expiredObjectDeleteMarker\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  expiration: {\n    expiredObjectDeleteMarker: 'true'\n  },\n  noncurrentVersionExpiration: {\n    noncurrentDays: '1'\n  }\n}]);\nconsole.log(result)\n```\n\nexample: for history with noncurrentVersionTransition\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  noncurrentVersionTransition: {\n    noncurrentDays: '10',\n    storageClass: 'IA'\n  }\n}]);\nconsole.log(result)\n```\n\n### .getBucketLifecycle(name[, options])\n\nGet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the lifecycle rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketLifecycle(name[, options])\n\nDelete the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketCORS(name, rules[, options])\n\nSet CORS rules of the bucket object\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains below properties:\n  - allowedOrigin {String/Array} configure for Access-Control-Allow-Origin header\n  - allowedMethod {String/Array} configure for Access-Control-Allow-Methods header\n  - [allowedHeader] {String/Array} configure for Access-Control-Allow-Headers header\n  - [exposeHeader] {String/Array} configure for Access-Control-Expose-Headers header\n  - [maxAgeSeconds] {String} configure for Access-Control-Max-Age header\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketCORS('hello', [\n  {\n    allowedOrigin: '*',\n    allowedMethod: [\n      'GET',\n      'HEAD',\n    ],\n  }\n]).then((result) => {});\n```\n\n### .getBucketCORS(name[, options])\n\nGet CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the CORS rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketCORS(name[, options])\n\nDelete CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .getBucketRequestPayment(bucketName[, options])\n\nget RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String} bucket name\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- payer {String} payer, BucketOwner or Requester\n- res {Object} response info, including\n  - data {Buffer} xml\n\n---\n\n### .putBucketRequestPayment(bucketName, payer[, options])\n\nput RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String}\n- payer {String} payer\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketEncryption(name, rules)\n\nput BucketEncryption value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [rules] {Object} parameters\n  - SSEAlgorithm {String} encryption type, expect AES256 or KMS\n  - {KMSMasterKeyID} {String} needed when encryption type is KMS\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketEncryption(name)\n\nget BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n- encryption {Object} rules\n  - SSEAlgorithm {String} encryption type, AES256 or KMS\n  - {KMSMasterKeyID} {String} will be return when encryption type is KMS\n\n---\n\n### .deleteBucketEncryption(name)\n\ndelete BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketTags(name, tag[, options])\n\nAdds tags for a bucket or modify the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketTags(name[, options])\n\nObtains the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- tag {Object} the tag of object\n- res {Object} response info\n\n---\n\n### .deleteBucketTags(name[, options])\n\nDeletes the tags added for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketPolicy(name, policy[, options])\n\nAdds or modify policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- policy {Object} bucket policy\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\nexample:\n```js\nconst policy = {\n  Version: '1',\n  Statement: [\n    {\n      Action: ['oss:PutObject', 'oss:GetObject'],\n      Effect: 'Deny',\n      Principal: ['1234567890'],\n      Resource: ['acs:oss:*:1234567890:*/*']\n    }\n  ]\n};\nconst result = await store.putBucketPolicy(bucket, policy);\nconsole.log(result);\n```\n---\n\n### .getBucketPolicy(name[, options])\n\nObtains the policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- policy {Object} the policy of bucket, if not exist, the value is null\n- res {Object} response info\n- status {Number} response status\n\n---\n\n### .deleteBucketPolicy(name[, options])\n\nDeletes the policy added for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n### .getBucketVersioning(name[, options])\n\nObtains the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- versionStatus {String | undefined} version status, `Suspended` or `Enabled`. default value: `undefined`\n- res {Object} response info\n\n---\n\n### .putBucketVersioning(name, status[, options])\n\nset the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- status {String} version status, allow values: `Enabled` or `Suspended`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n## Object Operations\n\nAll operations function return Promise, except `signatureUrl`.\n\n### .put(name, file[, options])\n\nAdd an object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream|File(only support Browser)|Blob(only support Browser)} object local path, content buffer or ReadStream content instance use in Node, Blob and html5 File\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - See more: [PutObject](https://help.aliyun.com/document_detail/31978.html#title-yxe-96d-x61)\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- data {Object} callback server response data, sdk use JSON.parse() return\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through local file path\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/demo.txt', filepath).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/demo.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829244'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through content buffer\n\n```js\nstore.put('ossdemo/buffer', Buffer.from('foo content')).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/buffer',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/buffer',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"xxx\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829243'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .putStream(name, stream[, options])\n\nAdd a stream object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- stream {ReadStream} object ReadStream content instance\n- [options] {Object} optional parameters\n  - [contentLength] {Number} the stream length, `chunked encoding` will be used if absent\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.putStream('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .append(name, file[, options])\n\nAppend an object to the bucket, it's almost same as put, but it can add content to existing object rather than override it.\n\nAll parameters are same as put except for options.position\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [position] {String} specify the position which is the content length of the latest object\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n\nobject:\n\n- name {String} object name\n- url {String} the url of oss\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- nextAppendPosition {String} the next position\n\nexample:\n\n```js\nlet object = await store.append('ossdemo/buffer', Buffer.from('foo'));\n\n// append content to the existing object\nobject = await store.append('ossdemo/buffer', Buffer.from('bar'), {\n  position: object.nextAppendPosition,\n});\n```\n\n### .getObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `endpoint`.\n\ne.g.:\n\n```js\nconst cdnUrl = client.getObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .generateObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `bucket and endpoint `.\nSuggest use generateObjectUrl instead of getObjectUrl.\n\ne.g.:\n\n```js\nconst url = client.generateObjectUrl('foo/bar.jpg');\n// cdnUrl should be `https://${bucketname}.${endpotint}foo/bar.jpg`\n\nconst cdnUrl = client.generateObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .head(name[, options])\n\nHead an object and get the meta info.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status, maybe 200 or 304\n- meta {Object} object user meta, if not set on `put()`, will return null.\n    If return status 304, meta will be null too\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-version-id] return in multiversion\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Head an exists object and get user meta\n\n```js\nawait this.store.put('ossdemo/head-meta', Buffer.from('foo'), {\n  meta: {\n    uid: 1,\n    path: 'foo/demo.txt'\n  }\n});\nconst object = await this.store.head('ossdemo/head-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  meta: {\n    uid: '1',\n    path: 'foo/demo.txt'\n  },\n  res: { ... }\n}\n```\n\n- Head a not exists object\n\n```js\nconst object = await this.store.head('ossdemo/head-meta');\n// will throw NoSuchKeyError\n```\n\n### .getObjectMeta(name[, options])\n\nGet an  object meta info include ETag、Size、LastModified and so on, not return object content.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info, including\n  - headers {Object} response headers\n\nexample:\n\n- Head an exists object and get object meta info\n\n```js\nawait this.store.put('ossdemo/object-meta', Buffer.from('foo'));\nconst object = await this.store.getObjectMeta('ossdemo/object-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  res: { ... }\n}\n```\n\n### .get(name[, file, options])\n\nGet an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the content\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [versionId] {String} the version id of history object\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Range' get specifying range bytes content, e.g.: `Range: bytes=0-9`\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/demo.txt', filepath);\n```\n\n_ Store object to a writestream\n\n```js\nawait store.get('ossdemo/demo.txt', somestream);\n```\n\n- Get an object content buffer\n\n```js\nconst result = await store.get('ossdemo/demo.txt');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a processed image and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.png';\nawait store.get('ossdemo/demo.png', filepath, {process: 'image/resize,w_200'});\n```\n\n- Get a not exists object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/not-exists-demo.txt', filepath);\n// will throw NoSuchKeyError\n```\n\n- Get a historic version object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nconst versionId = 'versionId string';\nawait store.get('ossdemo/not-exists-demo.txt', filepath, {\n  versionId\n});\n```\n\n### .getStream(name[, options])\n\nGet an object read stream.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object stream\n\n```js\nconst result = await store.getStream('ossdemo/demo.txt');\nresult.stream.pipe(fs.createWriteStream('some file.txt'));\n```\n\n### .delete(name[, options])\n\nDelete an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf delete object not exists, will also delete success.\n\nexample:\n\n- Delete an exists object\n\n```js\nawait store.delete('ossdemo/someobject');\n```\n\n- Delete a not exists object\n\n```js\nawait store.delete('ossdemo/some-not-exists-object');\n```\n\n- Delete a history object or deleteMarker\n\n```js\nconst versionId = 'versionId';\nawait store.delete('ossdemo/some-not-exists-object', { versionId });\n```\n\n### .copy(name, sourceName[, sourceBucket, options])\n\nCopy an object from `sourceName` to `name`.\n\nparameters:\n\n- name {String} object name store on OSS\n- sourceName {String} source object name\n- [sourceBucket] {String} source Bucket. if doesn't exist，`sourceBucket` is same bucket. \n- [options] {Object} optional parameters\n  - [versionId] {String} the version id of history object\n  - [timeout] {Number} the operation timeout\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n    If the `meta` set, will override the source object meta.\n  - [headers] {Object} extra headers\n    - 'If-Match' do copy if source object etag equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' do copy if source object etag not equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-Modified-Since' do copy if source object modified after this time,\n        otherwise throw PreconditionFailedError\n    - 'If-Unmodified-Since' do copy if source object modified before this time,\n        otherwise throw PreconditionFailedError\n    - See more: [CopyObject](https://help.aliyun.com/document_detail/31979.html?#title-tzy-vxc-ncx)\n\nSuccess will return the copy result in `data` property.\n\nobject:\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT string\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf source object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Copy same bucket object\n\n```js\nstore.copy('newName', 'oldName').then((result) => {\n  console.log(result);\n});\n```\n\n- Copy other bucket object\n\n```js\nstore.copy('logo.png', 'logo.png', 'other-bucket').then((result) => {\n  console.log(result);\n});\n```\n\n- Copy historic object\n\n```js\nconst versionId = 'your verisonId'\nstore.copy('logo.png', 'logo.png', 'other-bucket', { versionId }).then((result) => {\n  console.log(result);\n});\n```\n\n### .putMeta(name, meta[, options])\n\nSet an exists object meta.\n\nparameters:\n\n- name {String} object name store on OSS\n- meta {Object} user meta, will send with `x-oss-meta-` prefix string\n  e.g.: `{ uid: 123, pid: 110 }`\n  If `meta: null`, will clean up the exists meta\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the putMeta result in `data` property.\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Update exists object meta\n\n```js\nconst result = await store.putMeta('ossdemo.txt', {\n  uid: 1, pid: 'p123'\n});\nconsole.log(result);\n```\n\n- Clean up object meta\n\n```js\nawait store.putMeta('ossdemo.txt', null);\n```\n\n### .deleteMulti(names[, options])\n\nDelete multi objects in one request.\n\nparameters:\n\n- names {Array<Object>} object names, max 1000 objects in once.\n  - key {String} object name\n  - [versionId] {String} the version id of history object or deleteMarker\n- [options] {Object} optional parameters\n  - [quiet] {Boolean} quiet mode or verbose mode, default is `false`, verbose mode\n    quiet mode: if all objects delete succes, return emtpy response.\n      otherwise return delete error object results.\n    verbose mode: return all object delete results.\n  - [timeout] {Number} the operation timeout\n\nSuccess will return delete success objects in `deleted` property.\n\n- [deleted] {Array<Object>} deleted object or deleteMarker info list\n  - [Key] {String} object name\n  - [VersionId] {String} object versionId\n  - [DeleteMarker] {String} generate or delete marker\n  - [DeleteMarkerVersionId] {String} marker versionId \n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete multi objects in quiet mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3'], {\n  quiet: true\n});\n```\n\n- Delete multi objects in verbose mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3']);\n```\n\n- Delete multi objects in multiversion\n\n```js\nconst obj1 = {\n  key: 'key1',\n  versionId: 'versionId1'\n}\nconst obj2 = {\n  key: 'key2',\n  versionId: 'versionId2'\n}\nconst result = await store.deleteMulti([obj1, obj2]);\n```\n\n### .list(query[, options])\n\nList objects in the bucket.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 objects\n\n```js\nconst result = await store.list();\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nconst result = await store.list({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nconst result = await store.list({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n### .getBucketVersions(query[, options])\n\nList the version information of all objects in the bucket, including the delete marker (Delete Marker).\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [versionIdMarker] {String} set the result to return from the version ID marker of the key marker object and sort by the versions\n  - [keyMarker] {String} search start from `keyMarker`, including `keyMarker` key\n  - [encodingType] {String} specifies that the returned content is encoded, and specifies the type of encoding\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [maxKeys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - isLatest {Boolean}\n    - versionId {String} object versionId\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- deleteMarker {Array<ObjectDeleteMarker>} object delete marker info list\n  Each `ObjectDeleteMarker`\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - versionId {String} object versionId\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- NextVersionIdMarker {String} next version ID marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- View all versions of objects and deleteMarker of bucket\n\n```js\nconst result = await store.getBucketVersions();\nconsole.log(result.objects);\nconsole.log(result.deleteMarker);\n```\n\n- List from key-marker\n\n```js\nconst result = await store.getBucketVersions({\n  'keyMarker': 'keyMarker'\n});\nconsole.log(result.objects);\n```\n\n- List from the version-id-marker of key-marker\n\n```js\nconst result = await store.getBucketVersions({\n  'versionIdMarker': 'versionIdMarker',\n  'keyMarker': 'keyMarker'\n});\nconsole.log(result.objects);\nconsole.log(result.deleteMarker);\n```\n\n### .signatureUrl(name[, options])\n\nCreate a signature url for download or upload object. When you put object with signatureUrl ,you need to pass `Content-Type`.Please look at the example.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [method] {String} the HTTP method, default is 'GET'\n  - [Content-Type] {String} set the request content type\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [trafficLimit] {Number} traffic limit, range: `819200`~`838860800`.\n  - [subResource] {Object} additional signature parameters in url.\n  - [response] {Object} set the response headers for download\n    - [content-type] {String} set the response content type\n    - [content-disposition] {String} set the response content disposition\n    - [cache-control] {String} set the response cache control\n    - See more: https://help.aliyun.com/document_detail/oss/api-reference/object/GetObject.html\n  - [callback] {Object} set the callback for the operation\n    - url {String} set the url for callback\n    - [host] {String} set the host for callback\n    - body {String} set the body for callback\n    - [contentType] {String} set the type for body\n    - [customValue] {Object} set the custom value for callback,eg. {var1: value1,var2:value2}\n\nSuccess will return signature url.\n\nexample:\n\n- Get signature url for object\n\n```js\nconst url = store.signatureUrl('ossdemo.txt');\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT'\n});\nconsole.log(url);\n\n//  put object with signatureUrl\n// -------------------------------------------------\n\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT',\n  'Content-Type': 'text/plain; charset=UTF-8',\n});\nconsole.log(url);\n\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  response: {\n    'content-type': 'text/custom',\n    'content-disposition': 'attachment'\n  }\n});\nconsole.log(url);\n\n// put operation\n```\n\n- Get a signature url for a processed image\n\n```js\nconst url = store.signatureUrl('ossdemo.png', {\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.png', {\n  expires: 3600,\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n```\n\n### .putACL(name, acl[, options])\n\nSet object's ACL.\n\nparameters:\n\n- name {String} object name\n- acl {String} acl (private/public-read/public-read-write)\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object \n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set an object's ACL\n\n```js\nawait store.putACL('ossdemo.txt', 'public-read');\n```\n\n- Set an history object's ACL\n\n```js\nconst versionId = 'object versionId'\nawait store.putACL('ossdemo.txt', 'public-read', {\n  versionId\n});\n```\n\n### .getACL(name[, options])\n\nGet object's ACL.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get an object's ACL\n\n```js\nconst result = await store.getACL('ossdemo.txt');\nconsole.log(result.acl);\n```\n\n- Get an history object's ACL\n\n```js\nconst versionId = 'object versionId'\nconst result = await store.getACL('ossdemo.txt', { versionId });\nconsole.log(result.acl);\n```\n\n### .restore(name[, options])\n\nRestore Object.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object \n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Restore an object\n\n```js\nconst result = await store.restore('ossdemo.txt');\nconsole.log(result.status);\n```\n\n- Restore an history object\n\n```js\nconst versionId = 'object versionId';\nconst result = await store.restore('ossdemo.txt', { versionId });\nconsole.log(result.status);\n```\n\n### .putSymlink(name, targetName[, options])\n\nPutSymlink\n\nparameters:\n\n- name {String} object name\n- targetName {String} target object name\n- [options] {Object} optional parameters\n  - [storageClass] {String} the storage type include (Standard,IA,Archive)\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers, detail see [PutSymlink](https://help.aliyun.com/document_detail/45126.html#title-x71-l2b-7i8)\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst options = {\n  storageClass: 'IA',\n  meta: {\n    uid: '1',\n    slus: 'test.html' \n  }\n}\nconst result = await store.putSymlink('ossdemo.txt', 'targetName', options)\nconsole.log(result.res)\n```\n\nputSymlink multiversion \n```js\nconst options = {\n  storageClass: 'IA',\n  meta: {\n    uid: '1',\n    slus: 'test.html' \n  },\n}\nconst result = await store.putSymlink('ossdemo.txt', 'targetName', options)\nconsole.log(result.res.headers['x-oss-version-id'])\n```\n\n### .getSymlink(name[, options])\n\nGetSymlink\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n- [versionId] {String} the version id of history object\n\nSuccess will return\n\n- targetName {String} target object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst result = await store.getSymlink('ossdemo.txt')\nconsole.log(result.targetName)\n```\n\nfor history object\n```js\nconst versionId = 'object versionId';\nconst result = await store.getSymlink('ossdemo.txt', { versionId })\nconsole.log(result.targetName)\n```\n\n### .initMultipartUpload(name[, options])\nBefore transmitting data in the Multipart Upload mode,\nyou must call the Initiate Multipart Upload interface to notify the OSS to initiate a Multipart Upload event.\nThe Initiate Multipart Upload interface returns a globally unique Upload ID created by the OSS server to identify this Multipart Upload event.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] Mime file type e.g.: application/octet-stream\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - [x-oss-server-side-encryption]\n    Specify the server-side encryption algorithm used to upload each part of this object,Type: string, Valid value: AES256 `x-oss-server-side-encryption: AES256`<br>\n    if use in browser you should be set cors expose header x-oss-server-side-encryption\n    - See more: [InitiateMultipartUpload](https://help.aliyun.com/document_detail/31992.html?#title-wh0-a2h-rur)\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-server-side-encryption] if set request header x-oss-server-side-encryption, will return\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- uploadId {String} upload id, use for uploadPart, completeMultipart\n\nexample:\n\n```js\n  const result = await store.initMultipartUpload('object');\n  console.log(result);\n```\n\n### .uploadPart(name, uploadId, partNo, file, start, end[, options])\nAfter initiating a Multipart Upload event, you can upload data in parts based on the specified object name and Upload ID.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- file {File|String}  is File or FileName, the whole file<br>\n Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB. <br>\n In Node you can use File or FileName, but in browser you only can use File.\n- start {Number} part start bytes  e.g: 102400\n- end {Number} part end bytes  e.g: 204800\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n  const uploadId = result.uploadId;\n  const file; //the data you want to upload, is a File or FileName(only in node)\n  //if file part is 10\n  const partSize = 100 * 1024;\n  const fileSize = 10 * partSize;//you need to calculate\n  const dones = [];\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const part = await store.uploadPart(name, uploadId, i, file, start, end);\n    dones.push({\n      number: i,\n      etag: part.etag\n    });\n    console.log(part);\n  }\n\n  //end need to call completeMultipartUpload api\n```\n\n### .uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])\nUsing Upload Part Copy, you can copy data from an existing object and upload a part of the data.\nWhen copying a file larger than 1 GB, you must use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- range {String} Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB, range value like `0-102400`\n- sourceData {Object}\n  - sourceKey {String} the source object name\n  - sourceBucketName {String} the source bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n  - [headers] {Object} The following request header is used for the source objects specified by x-oss-copy-source.\n    - [x-oss-copy-source-if-match]  default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]   default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]   default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since]   default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  const partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const range = start + '-' + (end - 1);\n    const part = await store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n- use history object to uploadPartCopy\n\n```js\n  const versionId = 'object versionId';\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n  const partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const range = start + '-' + (end - 1);\n    const part = await store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    }, {\n      versionId\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n### .completeMultipartUpload(name, uploadId, parts[, options])\nAfter uploading all data parts, you must call the Complete Multipart Upload API to complete Multipart Upload for the entire file.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- parts {Array} more part {Object} from uploadPartCopy, , each in the structure:\n  - number {Number} partNo\n  - etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [CompleteMultipartUpload](https://help.aliyun.com/document_detail/31995.html?#title-nan-5y3-rjd)\n\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data , sdk use JSON.parse() return\n\nexample:\n\n```js\n\n  //init multipart\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  //upload part\n  const file; //the data you want to upload, this example size is 10 * 100 * 1024\n  const fileSize;//you need to calculate\n  const partSize = 100 * 1024;//100kb\n  const done = [];\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const data = file.slice(start, end);\n    const part = yield store.uploadPart(name, result.uploadId, i, data);\n    console.log(part);\n    done.push({\n          number: i,\n          etag: part.res.headers.etag\n        });\n  }\n\n  //complete\n  const completeData = await store.completeMultipartUpload(name, result.uploadId, done);\n  console.log(completeData);\n```\n\n\n### .multipartUpload(name, file[, options])\n\nUpload file with [OSS multipart][oss-multipart].<br>\nthis function contains initMultipartUpload, uploadPart, completeMultipartUpload.\nWhen you use multipartUpload api，if you encounter problems with ConnectionTimeoutError, you should handle ConnectionTimeoutError in your business code. How to resolve ConnectionTimeoutError, you can decrease `partSize` size 、 Increase `timeout` 、Retry request ,\nor give tips in your business code;\n\nparameters:\n\n- name {String} object name\n- file {String|File(only support Browser)|Blob(only support Browser)} file path or HTML5 Web File or web Blob\n- [options] {Object} optional args\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n    - file {File} The file object selected by the user, if the browser is restarted, it needs the user to manually trigger the settings\n    - name {String} object key\n    - fileSize {Number} file size\n    - partSize {Number} part size\n    - uploadId {String} upload id\n    - doneParts {Array} An array of pieces that have been completed, including the object structure as follows\n       - number {Number} part number\n       - etag {String} part etag\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [mime] {String} custom mime , will send with `Content-Type` entity header\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n          e.g.:\n         ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n         ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data, sdk use JSON.parse() return\n\nexample:\n\n- Upload using multipart\n\n```js\nconst result = await store.multipartUpload('object', '/tmp/file');\nconsole.log(result);\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) { //progress is generator\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\n```\n\n- multipartUpload progress example\n\n```js\n\n//async function\nasync function asyncProgress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result1 = await store.multipartUpload('object', '/tmp/file', {\n  progress: asyncProgress\n});\n\n//function\nfunction progress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result2 = await store.multipartUpload('object', '/tmp/file', {\n  progress: progress\n});\n\n```\n\n- multipartUpload with cancel\n\n>tips: cancel multipartUpload support on node and browser\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n- multipartUpload with capture `ConnectionTimeoutError`  error\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  if (err.code === 'ConnectionTimeoutError') {\n    console.log(\"Woops,Woops ,timeout error!!!\");\n    // do ConnectionTimeoutError operation\n  }\n}\n\n```\n\n### .multipartUploadCopy(name, sourceData[, options])\n\nCopy file with [OSS multipart][oss-multipart]. <br>\nthis function contains head, initMultipartUpload, uploadPartCopy, completeMultipartUpload.<br>\nWhen copying a file larger than 1 GB, you should use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part\n  - [versionId] {String} the version id of history object \n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time (milliseconds) for download, e.g.: `Expires: 3600000`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [copyheaders] {Object} only uploadPartCopy api used, detail [see](https://www.alibabacloud.com/help/doc-detail/31994.htm)\n    - [x-oss-copy-source-if-match]  only uploadPartCopy api used, default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]  only uploadPartCopy api used, default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]  only uploadPartCopy api used, default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since] only uploadPartCopy api used, default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n- Copy using multipart\n\n```js\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n});\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\n```\n- multipartUploadCopy with cancel\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n- multipartUploadCopy with versionId\n\n```js\n\nconst versionId = 'object versionId'\n//start upload\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  },\n  versionId\n});\n\n```\n\n### .listParts(name, uploadId[, query, options])\n\nThe ListParts command can be used to list all successfully uploaded parts mapped to a specific upload ID, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- name {String} object key\n- uploadId {String} upload ID from initMultipartUpload api\n- [query] {Object} query parameters\n  - [max-parts] {Number} The maximum part number in the response of the OSS. default value: 1000.\n  - [part-number-marker] {Number} Starting position of a specific list. A part is listed only when the part number is greater than the value of this parameter.\n  - [encoding-type] {String} Specify the encoding of the returned content and the encoding type. Optional value: url\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- uploadId {String} upload ID\n- bucket {String} Specify the bucket name.\n- name {String} object name\n- PartNumberMarker {Number} Starting position of the part numbers in the listing result.\n- nextPartNumberMarker {Number} If not all results are returned this time, the response request includes the NextPartNumberMarker element to indicate the value of PartNumberMarker in the next request.\n- maxParts {Number} upload ID\n- isTruncated {Boolean} Whether the returned result list for List Parts is truncated. The “true” indicates that not all results are returned; “false” indicates that all results are returned.\n- parts {Array} The container that saves part information, each in the structure:\n  - PartNumber {Number} Part number.\n  - LastModified {Date} Time when a part is uploaded.\n  - ETag {String} ETag value in the content of the uploaded part.\n  - Size {Number} Size of the uploaded part.\n\nexample:\n\n- List uploaded part\n\n```js\n\nconst result = await store.listParts('objcet', 'uploadId', {\n  'max-parts': 1000\n});\nconsole.log(result);\n```\n\n### .listUploads(query[, options])\n\nList on-going multipart uploads, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- query {Object} query parameters\n  - [prefix] {String} the object key prefix\n  - [max-uploads] {Number} the max uploads to return\n  - [key-marker] {String} the object key marker, if `upload-id-marker`\n    is not provided, return uploads with `key > marker`, otherwise\n    return uploads with `key >= marker && uploadId > id-marker`\n  - [upload-id-marker] {String} the upload id marker, must be used\n    **WITH** `key-marker`\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- List on-going multipart uploads\n\n```js\n\nconst result = await store.listUploads({\n  'max-uploads': 100,\n  'key-marker': 'my-object',\n  'upload-id-marker': 'upload-id'\n});\nconsole.log(result);\n```\n\n### .abortMultipartUpload(name, uploadId[, options])\n\nAbort a multipart upload for object.\n\nparameters:\n\n- name {String} the object name\n- uploadId {String} the upload id\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- Abort a multipart upload\n\n```js\nconst result = await store.abortMultipartUpload('object', 'upload-id');\nconsole.log(result);\n```\n\n### .calculatePostSignature(policy)\n\nget postObject params \n\nparameters:\n\n- policy {JSON or Object} policy must contain expiration and conditions.\n\nSuccess will return postObject Api params.\n\nObject:\n\n- OSSAccessKeyId {String}\n- Signature {String}\n- policy {Object} response info\n\n### .getObjectTagging(name[, options])\n\nObtains the tags of an object.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- tag {Object} the tag of object\n- res {Object} response info\n\n### .putObjectTagging(name, tag[, options])\n\nConfigures or updates the tags of an object.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n### .deleteObjectTagging(name[, options])\n\nDeletes the tag of a specified object.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n### .processObjectSave(sourceObject, targetObject, process[, targetBucket])\n\nPersistency indicates that images are asynchronously stored in the specified Bucket\n\nparameters:\n\n- sourceObject {String} source object name\n- targetObject {String} target object name\n- process {String} process string\n- [targetBucket] {String} target bucket\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n\n```js\nconst sourceObject = 'a.png'\nconst targetObject = 'b.png'\nconst process = 'image/watermark,text_aGVsbG8g5Zu+54mH5pyN5Yqh77yB,color_ff6a00'\n\nawait this.store.processObjectSave(sourceObject, targetObject, process);\n```\n\n## RTMP Operations\n\nAll operations function is [async], except `getRtmpUrl`.\n\nasync function format: `async functionName(...)`.\n\n### .putChannel(id, conf[, options])\n\nCreate a live channel.\n\nparameters:\n\n- id {String} the channel id\n- conf {Object} the channel config\n  - [Description] {String} the channel description\n  - [Status] {String} the channel status: 'enabled' or 'disabled'\n  - [Target] {Object}\n    - [Type] {String} the data type for the channel, only 'HLS' is supported now\n    - [FragDuration] {Number} duration of a 'ts' segment\n    - [FragCount] {Number} the number of 'ts' segments in a 'm3u8'\n    - [PlaylistName] {String} the 'm3u8' name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- publishUrls {Array} the publish urls\n- playUrls {Array} the play urls\n- res {Object} response info\n\nexample:\n\n- Create a live channel\n\n```js\nconst cid = 'my-channel';\nconst conf = {\n  Description: 'this is channel 1',\n  Status: 'enabled',\n  Target: {\n    Type: 'HLS',\n    FragDuration: '10',\n    FragCount: '5',\n    PlaylistName: 'playlist.m3u8'\n  }\n};\n\nconst r = await this.store.putChannel(cid, conf);\nconsole.log(r);\n```\n\n### .getChannel(id[, options])\n\nGet live channel info.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- data {Object} channel info, same as conf in [.putChannel](#putchannelid-conf-options)\n- res {Object} response info\n\nexample:\n\n- Get live channel info\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannel(cid);\nconsole.log(r);\n```\n\n### .deleteChannel(id[, options])\n\nDelete a live channel.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response infomation.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Delete a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.deleteChannel(cid);\nconsole.log(r);\n```\n\n### .putChannelStatus(id, status[, options])\n\nChange the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- status {String} the status: 'enabled' or 'disabled'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Disable a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.putChannelStatus(cid, 'disabled');\nconsole.log(r);\n```\n\n### .getChannelStatus(id[, options])\n\nGet the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel status information.\n\nobject:\n\n- data {Object}\n  - Status {String} the channel status: 'Live' or 'Idle'\n  - [ConnectedTime] {String} the connected time of rtmp pushing\n  - [RemoteAddr] {String} the remote addr of rtmp pushing\n  - [Video] {Object} the video parameters (Width/Height/FrameRate/Bandwidth/Codec)\n  - [Audio] {Object} the audio parameters (Bandwidth/SampleRate/Codec)\n- res {Object} response info\n\nexample:\n\n- Get a live channel status\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelStatus(cid);\nconsole.log(r);\n\n// { Status: 'Live',\n//   ConnectedTime: '2016-04-12T11:51:03.000Z',\n//   RemoteAddr: '42.120.74.98:53931',\n//   Video:\n//   { Width: '672',\n//     Height: '378',\n//     FrameRate: '29',\n//     Bandwidth: '60951',\n//     Codec: 'H264' },\n//   Audio: { Bandwidth: '5959', SampleRate: '22050', Codec: 'AAC' }\n// }\n```\n\n### .listChannels(query[, options])\n\nList channels.\n\nparameters:\n\n- query {Object} parameters for list\n  - prefix {String}: the channel id prefix (returns channels with this prefix)\n  - marker {String}: the channle id marker (returns channels after this id)\n  - max-keys {Number}: max number of channels to return\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel list.\n\nobject:\n\n- channels {Array} the channels, each in the structure:\n  - Name {String} the channel id\n  - Description {String} the channel description\n  - Status {String} the channel status\n  - LastModified {String} the last modification time of the channel\n  - PublishUrls {Array} the publish urls for the channel\n  - PlayUrls {Array} the play urls for the channel\n- nextMarker: result.data.NextMarker || null,\n- isTruncated: result.data.IsTruncated === 'true'\n- res {Object} response info\n\nexample:\n\n- List live channels\n\n```js\nconst r = await this.store.listChannels({\n  prefix: 'my-channel',\n  'max-keys': 3\n});\nconsole.log(r);\n```\n\n### .getChannelHistory(id[, options])\n\nGet the live channel history.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the history information.\n\nobject:\n\n- records {Object} the pushing records, each in the structure:\n  - StartTime {String} the start time\n  - EndTime {String} the end time\n  - RemoteAddr {String} the remote addr\n- res {Object} response info\n\nexample:\n\n- Get the live channel history\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelHistory(cid);\nconsole.log(r);\n```\n\n### .createVod(id, name, time[, options])\n\nCreate a VOD playlist for the channel.\n\nparameters:\n\n- id {String} the channel id\n- name {String} the playlist name\n- time {Object} the duration time\n  - startTime {Number} the start time in epoch seconds\n  - endTime {Number} the end time in epoch seconds\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Create a vod playlist of a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.createVod(cid, 're-play', {\n  startTime: 1460464870,\n  endTime: 1460465877\n});\nconsole.log(r);\n```\n\n### .getRtmpUrl(channelId[, options])\n\nGet signatured rtmp url for publishing.\n\nparameters:\n\n- channelId {String} the channel id\n- [options] {Object} optional parameters\n  - [expires] {Number} the expire time in seconds of the url\n  - [params] {Object} the additional paramters for url, e.g.: {playlistName: 'play.m3u8'}\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the rtmp url.\n\nexample:\n\n- Get a rtmp url.\n\n```js\nconst cid = 'my-channel';\n\nconst url = this.store.getRtmpUrl(this.cid, {\n  params: {\n    playlistName: 'play.m3u8'\n  },\n  expires: 3600\n});\nconsole.log(url);\n// rtmp://ossliveshow.oss-cn-hangzhou.aliyuncs.com/live/tl-channel?OSSAccessKeyId=T0cqQWBk2ThfRS6m&Expires=1460466188&Signature=%2BnzTtpyxUWDuQn924jdS6b51vT8%3D\n```\n\n## Create A Image Service Instance\n\nEach Image Service instance required `accessKeyId`, `accessKeySecret`, `bucket` and `imageHost`.\n\n### oss.ImageClient(options)\n\nCreate a Image service instance.\n\noptions:\n- imageHost {String} your image service domain that binding to a OSS bucket\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- bucket {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nconst OSS = require('ali-oss');\n\nconst imgClient = OSS.ImageClient({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'my_image_bucket'\n  imageHost: 'thumbnail.myimageservice.com'\n});\n```\n\n## Image Operations\n\nAll operations function is [async], except `imgClient.signatureUrl`.\n\nasync function format: `async functionName(...)`.\n\n### imgClient.get(name, file[, options])\n\nGet an image from the image channel.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the image\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image with a style and store it to the local file\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', filepath);\n```\n\n_ Store image to a writestream\n\n```js\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', somestream);\n```\n\n- Get an image content buffer\n\n```js\nconst result = await imgClient.get('ossdemo/demo.jpg@200w_200h');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a not exists object or a not image object\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/not-exists-demo.jpg@200w_200h', filepath);\n// will throw NoSuchKeyError\n```\n\n### imgClient.getStream(name[, options])\n\nGet an image read stream.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image object stream\n\n```js\nconst result = await imgClient.getStream('ossdemo/demo.jpg@200w_200h');\nresult.stream.pipe(fs.createWriteStream('some demo.jpg'));\n```\n\n### imgClient.getExif(name[, options])\n\nGet a image exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nIf object don't have exif, will throw 400 BadRequest.\n\nexample:\n\n```js\nconst result = await imgClient.getExif('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n### imgClient.getInfo(name[, options])\n\nGet a image info and exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nexample:\n\n```js\nconst result = await imgClient.getInfo('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     Format: \"jpg\",\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n\n### imgClient.putStyle(name, style[, options])\n// TODO\n\n### imgClient.getStyle(name[, options])\n\nGet a style by name from the image channel.\n\nparameters:\n- name {String} image style name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} styles object\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.getStyle('400');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"234\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:58:20 GMT\"\n//     },\n//     size: 234,\n//     aborted: false,\n//     rt: 398,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }\n// }\n```\n\n### imgClient.listStyle([options])\n\nGet all styles from the image channel.\n\nparameters:\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Array} styles array, a style object:\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.listStyle();\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"913\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:47:32 GMT\"\n//     },\n//     size: 913,\n//     aborted: false,\n//     rt: 1911,\n//     keepAliveSocket: false\n//   },\n//   data: [{\n//     Name: \"200-200\",\n//     Content: \"0e_200w_200h_0c_0i_0o_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:28:08 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:28:08 GMT\"\n//   }, {\n//     Name: \"800\",\n//     Content: \"800w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:29:15 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:29:15 GMT\"\n//   }, {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }, {\n//     Name: \"600\",\n//     Content: \"600w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:35:02 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:35:02 GMT\"\n//   }]\n// }\n```\n\n### imgClient.deleteStyle(name[, options])\n// TODO\n\n### imgClient.signatureUrl(name)\n\nCreate a signature url for directly download.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return full signature url.\n\nexample:\n\n```js\nconst url = imgClient.signatureUrl('\n');\n// http://thumbnail.myimageservice.com/demo.jpg@200w_200h?OSSAccessKeyId=uZxyLARzYZtGwHKY&Expires=1427803849&Signature=JSPRe06%2FjQpQSj5zlx2ld1V%2B35I%3D\n```\n\n## Cluster Mode\n\nCluster mode now only support object operations.\n\n```js\nconst Cluster = require('ali-oss').ClusterClient;\n\nconst client = Cluster({\n  cluster: [{\n    host: 'host1',\n    accessKeyId: 'id1',\n    accessKeySecret: 'secret1'\n  }, {\n    host: 'host2',\n    accessKeyId: 'id2',\n    accessKeySecret: 'secret2'\n  }],\n  schedule: 'masterSlave', //default is `roundRobin`\n});\n\n// listen error event to logging error\nclient.on('error', function(err) {\n  console.error(err.stack);\n});\n\n// client init ready\nclient.ready(function() {\n  console.log('cluster client init ready, go ahead!');\n});\n```\n\n### Get Methods\n\nWill choose an alive client by schedule(`masterSlave` or `roundRobin`).\n\n- `client.get()`\n- `client.head()`\n- `client.getStream()`\n- `client.list()`\n- `client.signatureUrl()`\n- `client.chooseAvailable()` - choose an available client by schedule.\n- `client.getACL()`\n\n### Put Methods\n\nWill put to all clients.\n\n- `client.put()`\n- `client.putStream()`\n- `client.delete()`\n- `client.deleteMulti()`\n- `client.copy()`\n- `client.putMeta()`\n- `client.putACL()`\n- `client.restore()`\n\n## Known Errors\n\nEach error return by OSS server will contains these properties:\n\n- name {String} error name\n- message {String} error message\n- requestId {String} uuid for this request, if you meet some unhandled problem,\n    you can send this request id to OSS engineer to find out what's happend.\n- hostId {String} OSS cluster name for this request\n\nname | code | status | message | message in Chinese\n---  | ---  | --- | ---     | ---\nAccessDeniedError | AccessDenied | 403 | Access Denied | 拒绝访问\nBucketAlreadyExistsError | BucketAlreadyExists | 409 | Bucket already exists | Bucket 已经存在\nBucketNotEmptyError | BucketNotEmpty | 409 | Bucket is not empty | Bucket 不为空\nRestoreAlreadyInProgressError | RestoreAlreadyInProgress | 409 | The restore operation is in progress. | restore 操作正在进行中\nOperationNotSupportedError | OperationNotSupported | 400 | The operation is not supported for this resource | 该资源暂不支持restore操作\nEntityTooLargeError | EntityTooLarge | 400 | Entity too large | 实体过大\nEntityTooSmallError | EntityTooSmall | 400 | Entity too small | 实体过小\nFileGroupTooLargeError | FileGroupTooLarge | 400 | File group too large | 文件组过大\nInvalidLinkNameError | InvalidLinkName | 400 | Link name can't be the same as the object name | Object Link 与指向的 Object 同名\nLinkPartNotExistError | LinkPartNotExist | 400 | Can't link to not exists object | Object Link 中指向的 Object 不存在\nObjectLinkTooLargeError | ObjectLinkTooLarge | 400 | Too many links to this object | Object Link 中 Object 个数过多\nFieldItemTooLongError | FieldItemTooLong | 400 | Post form fields items too large | Post 请求中表单域过大\nFilePartInterityError | FilePartInterity | 400 | File part has changed | 文件 Part 已改变\nFilePartNotExistError | FilePartNotExist | 400 | File part not exists | 文件 Part 不存在\nFilePartStaleError | FilePartStale| 400 | File part stale | 文件 Part 过时\nIncorrectNumberOfFilesInPOSTRequestError | IncorrectNumberOfFilesInPOSTRequest | 400 | Post request contains invalid number of files | Post 请求中文件个数非法\nInvalidArgumentError | InvalidArgument | 400 | Invalid format argument | 参数格式错误\nInvalidAccessKeyIdError | InvalidAccessKeyId | 400 | Access key id not exists | Access Key ID 不存在\nInvalidBucketNameError | InvalidBucketName | 400 | Invalid bucket name | 无效的 Bucket 名字\nInvalidDigestError | InvalidDigest | 400 | Invalid digest | 无效的摘要\nInvalidEncryptionAlgorithmError | InvalidEncryptionAlgorithm | 400 | Invalid encryption algorithm | 指定的熵编码加密算法错误\nInvalidObjectNameError | InvalidObjectName | 400 | Invalid object name | 无效的 Object 名字\nInvalidPartError | InvalidPart | 400 | Invalid part | 无效的 Part\nInvalidPartOrderError | InvalidPartOrder | 400 | Invalid part order | 无效的 part 顺序\nInvalidPolicyDocumentError | InvalidPolicyDocument | 400 | Invalid policy document | 无效的 Policy 文档\nInvalidTargetBucketForLoggingError | InvalidTargetBucketForLogging | 400 | Invalid bucket on logging operation | Logging 操作中有无效的目标 bucket\nInternalError | Internal | 500 | OSS server internal error | OSS 内部发生错误\nMalformedXMLError | MalformedXML | 400 | Malformed XML format | XML 格式非法\nMalformedPOSTRequestError | MalformedPOSTRequest | 400 | Invalid post body format | Post 请求的 body 格式非法\nMaxPOSTPreDataLengthExceededError | MaxPOSTPreDataLengthExceeded | 400 | Post extra data too large | Post 请求上传文件内容之外的 body 过大\nMethodNotAllowedError | MethodNotAllowed | 405 | Not allowed method | 不支持的方法\nMissingArgumentError | MissingArgument | 411 | Missing argument | 缺少参数\nMissingContentLengthError | MissingContentLength | 411 | Missing `Content-Length` header | 缺少内容长度\nNoSuchBucketError | NoSuchBucket | 404 | Bucket not exists | Bucket 不存在\nNoSuchKeyError | NoSuchKey | 404 | Object not exists | 文件不存在\nNoSuchUploadError | NoSuchUpload | 404 | Multipart upload id not exists | Multipart Upload ID 不存在\nNotImplementedError | NotImplemented | 501 | Not implemented | 无法处理的方法\nPreconditionFailedError | PreconditionFailed | 412 | Pre condition failed | 预处理错误\nRequestTimeTooSkewedError | RequestTimeTooSkewed | 403 | Request time exceeds 15 minutes to server time | 发起请求的时间和服务器时间超出 15 分钟\nRequestTimeoutError | RequestTimeout | 400 | Request timeout | 请求超时\nRequestIsNotMultiPartContentError | RequestIsNotMultiPartContent | 400 | Invalid post content-type | Post 请求 content-type 非法\nSignatureDoesNotMatchError | SignatureDoesNotMatch | 403 | Invalid signature | 签名错误\nTooManyBucketsError | TooManyBuckets | 400 | Too many buckets on this user | 用户的 Bucket 数目超过限制\nRequestError | RequestError | -1 | network error | 网络出现中断或异常\nConnectionTimeoutError | ConnectionTimeoutError | -2 | request connect timeout | 请求连接超时\nSecurityTokenExpiredError | SecurityTokenExpired | 403 | sts Security Token Expired | sts Security Token 超时失效\n\n[generator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n[oss-sts]: https://help.aliyun.com/document_detail/oss/practice/ram_guide.html\n[browser-sample]: https://github.com/rockuw/oss-in-browser\n[oss-multipart]: https://help.aliyun.com/document_detail/oss/api-reference/multipart-upload/InitiateMultipartUpload.html\n[disabled-browser-headers]: https://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n",
      "readmeFilename": "README.md",
      "_id": "ali-oss@7.0.0-beta.1",
      "_nodeVersion": "10.21.0",
      "_npmVersion": "6.14.8",
      "dist": {
        "integrity": "sha512-/6LISbASHdLp7PEggRjHfiaF7H5F3AzD3x0f8RBqT26MXjw0b5btNWeDwxk2p3QFHy37f7q7CxZjKP8EHVsXoQ==",
        "shasum": "adb2e6b0911fde0889a4699a190aa839bd5ab650",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-7.0.0-beta.1.tgz",
        "fileCount": 405,
        "unpackedSize": 1816151,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfR6UTCRA9TVsSAnZWagAAGmUP+gKedt8od44Nk6JVJWKK\nO6sJg9xgl25UlWBOh3Zt9SIWXWK1UM6wQwifBaGwXYsAyabUDwBaYbP61m8F\nj+Mqo6nHjOCl8CWEVKKmWNtWG7nuZQ7pxClZJtlDDyEu9E+iTz1AHGL7JFxh\n9AnyGyS2vGrrUE15PGlkSa9uWG8SdOWDnMgU3bF2Zq1jcRjVTLDC7146uyy5\nnbWke066aYnQjnJ8eVEKDiXPsZxG15anplqH6zOYl4WvnsGhBBac3lOgdpuO\nhq3xAgmFiMa8ViZhSMOFoLaEQjxhKEFsIj59OMILW3/FsHW78V1BCN1ZGXNL\n1A9H3fPRp4nF0My82uRkZjHQcfbFK1HM00AZUNAEooDqNMYSGrDs5Mb6PsSz\n5bs9P9frJ+v4ImbNmUI6daq8FL3AWIk4Lpc4KVA4XmmOiI9+1ZvaCOZH647S\nkuMWlF6lq9khQ3CwbkSnbGO0h8wbBTr+OGbOvPws3B29iTN0jaNArVjMItxu\nZxHZ0CZGyVFu1VTcJYRy/nXIVHs/I4b2y4FuwbG0yS9VaCG0RCl4M5X60FCu\n+gy/T6K3BVtjHnSDLZlCWO0zO/X6kej/Q84srcl4uWV1B2JCgilJ9WAqwrVP\njPM6dpwbH3YI1A6iwGNmK1LpntcJqxh77pVDTgvCeZM5EES57/dK8zn+rKfS\nuDAc\r\n=mokq\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCRfe3ZjGzvGJkLPEtGy0ZXTUO2cjvBMGXVb6iiQdxDIQIgVJQfNoh6jB/TY3dHfoTfY0N7BcYuM2uE31E6QPyC/8Y="
          }
        ]
      },
      "maintainers": [
        {
          "email": "dead_horse@qq.com",
          "name": "dead_horse"
        },
        {
          "email": "fengmk2@gmail.com",
          "name": "fengmk2"
        },
        {
          "email": "binghaiwang@gmail.com",
          "name": "haibing.w"
        },
        {
          "email": "2378278470@qq.com",
          "name": "jackycheung888"
        },
        {
          "email": "sakura9515@gmail.com",
          "name": "popomore"
        },
        {
          "email": "1019272778@qq.com",
          "name": "qq1019272778"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_7.0.0-beta.1_1598530834745_0.16469214088273842"
      },
      "_hasShrinkwrap": false
    },
    "6.11.0": {
      "name": "ali-oss",
      "version": "6.11.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^16.5.2",
        "core-js": "^3.6.5",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^8.0.1",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "fc9af8166be420c79e51b119cedee0853bc6f2ea",
      "_id": "ali-oss@6.11.0",
      "_nodeVersion": "10.21.0",
      "_npmVersion": "6.14.8",
      "dist": {
        "integrity": "sha512-xVH/Mo6fkRBYJaHy2NsTTpDEgV4pTt6Q/EKm6T9MxPGs+Acq6h9oRJXMiCYv1JwL4vNc267NbfUUN8bSzHhDbg==",
        "shasum": "e63ebe9cf3370b2845455329f7f94ee1ab162b3d",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.11.0.tgz",
        "fileCount": 197,
        "unpackedSize": 1753661,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfgDNSCRA9TVsSAnZWagAAwrcP/1Ly5dVOWgF9T1gSqgP2\nOXI8KLIhNvIX+XKETdBLw2TL3zu5olRfaKC/u0wiAUpldI03CKBbpOyK373x\nF0zFfKQRNSYPW8E5tZyd54s3qPXIV3/xct3+zlrG53Tmrx5QAMRek3q+pWAg\nvOqcUPXXNiih2oLE4H6d2+Zm6W1zNHxK9T31Wl1ksJgowJjPgkZ7CmYMYJOg\nBsU21Fsq0tXhS+4xWwlxOpenkQ0xocI/ewJW09YjyJXwK0nLQC76TWSsedW1\nVYYo8s2/9KVS97433i4nfZAXCiVsyaym7ptQA9ICVLqyu/N4FBZvPgZ/MnJY\ndjWI8Vnjl9R2EWLV5r9beDgkeFHpSmKNNJr7APSTT3XOEI5tgNnjQlP1K54G\n6su7DPlMtDrYdYTqCAcFTxK4L42axGQGz6dRMGIh1Y5Q4yyOC26svJ9vbQ2A\n65XU0zL/HZZEPFpsfmVjyHWUnYMmtTFIgQ3swG7ohxUfS/PNW+/bN9USNYFm\n7eSK5JY3dVhCdlOd8/qclLKh26mcRFSxJjErB12g/1gDgkcHP2uEQaoWO+6G\nsEfJYVsdg8fMyDeimhwG83wGjrLHS90KT+TxBjuRG0k8FVtUBjkPtz8HmI8Z\njPO+MuF/7hgtkjPzuk7E+lib9lexzVXprq1OsTjrwEPl7KQgf+eX8RWky1wc\no4eV\r\n=CVKv\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDh1dkroiTQYbE/QqUm/V2EKKWOy4PCySn6qxEp23binAIgCBcUNisXJuNVTn9VKVKRPglQhlZo6bRfoXWUld5F24c="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.11.0_1602237265426_0.6444203972715719"
      },
      "_hasShrinkwrap": false
    },
    "6.11.1": {
      "name": "ali-oss",
      "version": "6.11.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^16.5.2",
        "core-js": "^3.6.5",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^8.0.1",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "e306edbcd64247c1ce4fddf9d37dba1b604b11c8",
      "_id": "ali-oss@6.11.1",
      "_nodeVersion": "10.21.0",
      "_npmVersion": "6.14.8",
      "dist": {
        "integrity": "sha512-OkkGHQDuxPLtIa2uDc15L42DcMpHo5MOQDFohHEScFRaZRPSlI4Wjy7F7T/+LltCH4rHhrDiXgoHR8hgoQGW1w==",
        "shasum": "7de12ced66b34561edfff44180059d986cd919fe",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.11.1.tgz",
        "fileCount": 197,
        "unpackedSize": 2220770,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfgDX0CRA9TVsSAnZWagAA9EEP/A645IgxaSWJ9+TLPRT1\nmbNX+cZL7ihNaGjtXmZR7JK6+yxgTAYrgbq/rWWCC8rNdUOfY4LY9Kq3WIAl\nXHvQUgcMSPC4Ii+b8uSQScSvh2tPPRl9uwErKnDMTvVKQVc3+ES3zPafMo6u\nIjpPEjkDeqHLg7EBHA2Q80r22cLsJfz0uwrIQOfJcVftKUZWvexylFW2YWlR\n/iMnM42BE75VCFF+7Dfkm6ZgonFrmGxpcW/qDcrzRappPgKrxs5+eoOJBg55\nqv4cfdffYM1P/FESRzMXChn5hbd7ec9jILWCCaFyy3lr2BMpkgg0nT1Sfc1L\nnzhxy07M8lxJtEd5nkMFOhCETPbtWp9TeuostrBZU/voavow7NDguLN6T729\nmAehF9CmmQcXj6UeT5EgicoW7dt+/pP2irHvko+YT3fuB9cVYN+D15GPeJDH\n88zMcdDGPiV+MTv5QyDYn7Bubrj/ozPT6IYZcehPOKJaQXPIGQ+oM533THNC\nr4e6CSE0Vnhtd2v8zOMPjwrjjPoLgfqw0nQrLKqDv7xotIueNTdY/IvE/mhW\nOYgwP4tfcmQ7Itfv+4p4G3BzKyy+NJtGNGosTh9zIV7qhnl4AvsAvabWK2/i\nW/FI8kcYQaM3Sr97rHiwUm2pldfOVTAOPy0+g8z22D8EONGTTLLL68b1sfsL\nFyFu\r\n=eoD0\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQD6ZjidSBKkqwEBf+lEuGxMpt9v3vQdn1dgsbLum+lLggIgdat5PYLdYGMYsUO7EwwNZhvglCOIM4j7HQx10x4naog="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.11.1_1602237940273_0.5883991605740302"
      },
      "_hasShrinkwrap": false
    },
    "6.11.2": {
      "name": "ali-oss",
      "version": "6.11.2",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "test-cov": "nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^16.5.2",
        "core-js": "^3.6.5",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "crypto-js": "^3.1.9-1",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^8.0.1",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "any-promise": "^1.3.0",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "e0286b93cf614c442bccf3939894003c4cd17644",
      "_id": "ali-oss@6.11.2",
      "_nodeVersion": "10.21.0",
      "_npmVersion": "6.14.8",
      "dist": {
        "integrity": "sha512-rNeYm5yogNOABCY9G27RgB6BGJ0BK+nQGicfDXKp1Fq7G/eJMZYwBNXdM420uAIUoMM81uFOtSIRYBRF6IxPwA==",
        "shasum": "fed279a9d373f0d1ad278edf614f710f99f73e19",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.11.2.tgz",
        "fileCount": 197,
        "unpackedSize": 2220686,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfgUT0CRA9TVsSAnZWagAAC3oQAJkK9R73IuPDGVLwmTcl\npuJeNAWUiudSUktdj53s0HTd5GZOROdF8DGjwSOvnJxH957gEunOxs8mx/na\ng8L9aWTWfvP0v/k1+jl7aG+hJtX++Kkd4MchgE6rnJae1E6mO/7E6pVjMYDE\ng1ju1oTlN4p/bCIb64oS0SrCOhagQE/z+pplCnsh4WgM0gz9FQedjt16EcgI\nVh8X/1ovCgaglgp7MIdEsurWHRNwia4yGC2v3EZwORnmO9l6Ic3oKcoWlFkg\nZD6AD/9962sAuePLtm+1GjhnJW8hBZRavIcWYOQwTGV2qi+E/GwK4Lg4Goi+\nUHZWnpflPMBO6yUjRMIdmRW5n81dDy+fc/vsBxa6XSBoVOqMvmXHpM0kvQYS\nF0IlSjfB3ulS8NAJaOW/nSxBGYyLJNyP9c1Rf6EsPu8k8MENjpxLAHwE3w+J\nxk5198pa+FDqn5jfTv+ElKFTUeqcvLa4Daoge9f5xtKwZj7cO0JISgZg8ymY\nLMZTPVzgzPcGZkhs0lb7oYilwMP9qkDJKUNwVPwhZgY3KAlv/d1E1DkxO0/M\nogCaeLcU72lRAfqlv3pT6nI84KBSvEHaHnAMgN3Fud6QqB8x0VTzBk/Hz90/\nccJAExUQ0avZpcesck4a3xsds7/i0bPaCVC6IyXDRFWkvKYYg2jiK8wZp2CH\nXUPb\r\n=ZEdm\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIF/nrerfnC3UW5if70P+aX7eVERqnrcB+TDabtrsOPLFAiEAhBXzHw6m5mS4zVHd3sGj12iVuYxMwZySJ4qejBwGkDQ="
          }
        ]
      },
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.11.2_1602307315282_0.8344909179447662"
      },
      "_hasShrinkwrap": false
    },
    "6.12.0": {
      "name": "ali-oss",
      "version": "6.12.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^16.5.2",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "immediate": "^3.3.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^8.0.1",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "51cd7e9c7c33c1d3e71734e4f9f10d0c26ff90ea",
      "_id": "ali-oss@6.12.0",
      "_nodeVersion": "10.21.0",
      "_npmVersion": "6.14.8",
      "dist": {
        "integrity": "sha512-sNlGo7xExBII/hyO7mIhQm0ZpE7t2+PnRCiX+WHr2efkperlhKyk5dHqGhHCF00rTGMk1DmAmNWV4ygovEGTHA==",
        "shasum": "2bc744cad569aee741e3b3968207761fbb2d21a4",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.12.0.tgz",
        "fileCount": 206,
        "unpackedSize": 2296176,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfyII0CRA9TVsSAnZWagAACxsQAJ23z5tdtYGyQ/d3jBky\nWM1EpTxrcGC34KundUs0a0f44V6zvaHtydX9QS15oLsFCqOuwBXPzUNijoIe\nhu9bSjIzGcBzNp2wobZPyTHoX8UZCOu/Bkytngihuzfm94gTcYIai7O9uaCC\nuezGyoALsyFTS3JHV/R/vRgfR3i9WQV1EkSpmKAQ7ZB6w647VtAmzNR8A/Ya\n883onTDK0khefyw7sb3MAnT6H6r8qLBLgg5yss4z61PY+OzkaxAajEcUxo4P\nlsDRvNgfIB6BfeH0OafpqwSju/+zhBhLwguz8LDJ2FqKOxvxXiewqWgGMjXg\nkvp7rDa0nLawLLZ/xmUuNNBxwU+pUbsZSMnD/Zc7s3NWsAu5qscPFPjbKJ7s\nQ/O/OYylTN3rSoBpyhzZytJlkz29eRA0pqU8XxjJpa02rWpAvknQV5UHb8mV\n8PzkC8tzVhluo8LWqVm4WtXpFcU4Mb19tn3TocX9CTL5ZVj+K1dV95IEnNST\n3W8da+lB5J5s++mkjBG6QH5doWQvIQl4KKi4T/7yxTJBNR1jbhM39XSVaAxD\nqz/OiJrKOLLnCCLV+5EEgKGCY4z3p3Mrb8QvoehBLt8Wo0R+QPexFdMZkj4n\nVoCms7VWV1Z6h1yyr/sXRqm03sbaY5jlbaZMCDxEYyJ8W3WdTW/ZCKra0CUx\n3LGe\r\n=R4AW\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICigV0DsKyP7hIRXdTOjq7rwuD8bR6apacQWOsFWxPQlAiA2SvGmgaSPW5GLauOsx3we8ufLfz/FO/fIvCJ/Wbz+pA=="
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.12.0_1606976051423_0.08971171171296222"
      },
      "_hasShrinkwrap": false
    },
    "6.13.0": {
      "name": "ali-oss",
      "version": "6.13.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^16.5.2",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "immediate": "^3.3.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^8.0.1",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "3b009af3c35cca84afc8821469a6f4a55d6d3f23",
      "_id": "ali-oss@6.13.0",
      "_nodeVersion": "10.21.0",
      "_npmVersion": "6.14.10",
      "dist": {
        "integrity": "sha512-0dV0Q2OJu1TTz5/bQ+seI4OojmuRHI0RxyStDr9smxo9c0MrjdOG8qmmTjIl0MCxek0KRv2NCpW8CQJGmi9k+g==",
        "shasum": "469eef124e19d95c5a708f088b27abf494c3e12b",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.13.0.tgz",
        "fileCount": 209,
        "unpackedSize": 2305631,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf9WCiCRA9TVsSAnZWagAAOFsQAJAHHtUdcZ8ylh477MRe\naHd2rZyqcawsXiAhMb+avzZkxrvshgyt95ucmmJjAvA3y8jVhVuDHioU6Y7B\nh7ejPg4cmBFwIw2X6K6eHF4tXyb6V2VFaFEfdl4TIPBKjEcJvJNcg0L8b8qU\n3ihbxWKKxN5O2RLbb4AzHWm2OZAbbDPUGFMU6jNcR5zWTg1QCWCc1pOgaJFu\nLMQidt6L12uVuF0KZiHRjp8UXBhqHF7b039yBxCNs35x3CkiDfz/T9AgkhGT\nVGAUOxuE83LucRS9m6yylFgZGfU7aNXKNlYbVc6gpZPQDqOE26brWVpDbWq/\no3Gv+xGovcXMmJvvoDjvs5fnrYPIiLW4/nVe49P8foEr9eITjXyKlmuQY8Cr\ne+zJNU/GG4HxtqGp0VHZMbo425wwwdOFgWBIR08CWy6JZryNSr9RheYgSXJ1\nXn/5kpCIZjQJ2C+dQasFt3TPQuqfjXqVZKjKuzaunm2Z0u2hHJUv/ow6o+xH\nghE7Id/CFuuz7hLYpvidQF8Qf8xcZM/LfIr15hTs8imAdSdUw89vPnTREsLx\nuAa+kt5+dqnPSSn71c7kkqGLz/aKCN+h1pIaqm3cwTDQAMY7q/lSi1oZZMeQ\n45qaAraTt7BJ2oLvl4pUyRDMBRX6Ecos2rmf0JellS6pJallF80SeBRTcJ+V\nxfmn\r\n=gU2/\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQD6pQ3bw2SQwuMCmrC8QJViBp4a3Q6e5EsMuIRYwYcl6wIgfQSxYAWp8WYd2mWzzinmaEzt7/45DlhniDZKiKQx62k="
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.13.0_1609916577835_0.7048118933825567"
      },
      "_hasShrinkwrap": false
    },
    "6.13.1": {
      "name": "ali-oss",
      "version": "6.13.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^16.5.2",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "immediate": "^3.3.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^8.0.1",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "e617b452ffe0798681cbe38a4ecaaee3940134cd",
      "_id": "ali-oss@6.13.1",
      "_nodeVersion": "10.21.0",
      "_npmVersion": "6.14.10",
      "dist": {
        "integrity": "sha512-mQlp6d57Vc9gA9JnkQvaaoThLJ9gyyVEV/G9l8axMED91vP/njck7Nzv3YFH8zli9WYS2EO/dDE5oV2QiKbHpQ==",
        "shasum": "4593db300daf8c7d7478e2bc30425bcd0c000bff",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.13.1.tgz",
        "fileCount": 209,
        "unpackedSize": 2304738,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf9q0wCRA9TVsSAnZWagAA6r8QAKMYgcug9/9QshI4TQD0\nk6YqozOx5clSmwvwKb6Sapy9gd3afrr1PA75GfaAhmiiYLhhf/7oWYhZ5AKv\nSbyjuYFobqVG4Lmsl6M1lreqxHGyJuCot98BjwD6Q64bmiLuGyA09Qisnuot\nlTG3TcLmdfEVid7ox+heJKYeLzM2yBXruAEPHmszcHv1FOJ9pqJ9RLJOONRK\ndUox4NXnl5u95dfxxmkHXlcAVWGTo6MutFfr84SBrHTVYT2/8ka+ZZ5L9hHf\nkwNPS2NyfpZDvMsjesUrq6CVmrihzeOkitCesIoHp6SydScDuiUWg2ei7Ur+\nAPvomhEy5gBHZ4DxEOMei9tNTq2919SyrpYr2+glQzbKtO6o1/3gI4G0U1l8\nKWBejQx9d5mrvjlC7flfarxOwT1WdH5ZM91hVJQ5W8e9q2TLItoA/Xl8ALub\nW64bZCXrsY9ysDQiJeiXYQ4ivyGlzgWlnePE6ffVVbgniRa7Z7pKfQnidflB\nJK/Bt0c8RSVofwb/H7eP4XhvJfsi/XZVJsbaf9NmeCU4duSU2VVHP12C8491\np4LzwgnhkXClbG5Xa0cXQ38VA9mAN50z9GrQo//6yC+lBXLLDFXd/GddcOs5\njtKV0NBXrdZhxBYq8I4cuyZHeLYDkjPcdt4XGWYRkPmhRyZnS0Ai7oaMffHm\n76wL\r\n=zCWB\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGR3Sc+jtvk2UJRHu8G4f3gfYSqYIgOtG0CFNCyhsIBHAiEApb7WvGqTGFOQ3N0ZPETC1JAr7s3PuzqAnLB/QWX98ak="
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.13.1_1610001711821_0.21811911621326185"
      },
      "_hasShrinkwrap": false
    },
    "6.13.2": {
      "name": "ali-oss",
      "version": "6.13.2",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^16.5.2",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "immediate": "^3.3.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.231.0",
        "standard-version": "^8.0.1",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "febdc6e099494c7f3cb3e2183dace7a57b601ddb",
      "_id": "ali-oss@6.13.2",
      "_nodeVersion": "10.21.0",
      "_npmVersion": "6.14.10",
      "dist": {
        "integrity": "sha512-85z+2Cd3ydCmdw/l6oFkaMmyswPVXm2r6a8GI+738s7O6YsDHDSogQ04joymUT2gdFNVWHYWTmXWLKEkD19eEQ==",
        "shasum": "ebd965b935bb8f436c5c5ef0fc03fd228fbf00a7",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.13.2.tgz",
        "fileCount": 209,
        "unpackedSize": 2301703,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgCTBBCRA9TVsSAnZWagAAzY0P/3D6VkIrVr6R+6bHy6MM\nN4ez9sM5tcDF/sG9T59WR7muJHjz+d0qpdnAgO//IvUzrzp+/fw89mv6NJS+\nwBD6YQBZ1JbfXT9XAMOMnkwyN/bjOFeiGYsiqD93vqq5VJAFnlKpd7HMuOx7\nch5NUbwiyPlZzx/X952yX7pUZjI8LOePMMaRdl9OdBqVrCfeit+XJ6fWjWlP\nVB6+yXuXSaREIzvi+ugO/gYz1FtnwHYW7bVKhnL3ryvQHRIxhtYUMR1Szo64\nAZ/TCoHLLIePm4qG9/W13V8wR/VxgbRhiQ4Oc+e2DWf9GNdOYaz+5SgLd2ao\nr+OWQ0INTnYzpcgS47ErsE6Ux+z7GFebAiqTs6V7NFSwPNkpQyO+xi3jVmts\nS7P0O2L89WMjigEXU28NYYqg+dmkHYW5NozppcnkTk6CCx2H/fCJpA66Z9/X\nYaLqPhMzJh4RHnze90Y5y3WSdakV+pUJSkUaPs1L7vhfMnnYo32DKh3VVpp0\nwmbqPppb5WZSQ9bVhgjaZMWfzh5RTaVYUQHYFI0vMFNV/PUe9y6LzUJh/p3W\nBLNJlu/gqXyI6YW22prAp+RBEse8hZ2y87Od3WqLlfF9V7sLBdV/os31eKZ9\n89zqrv5bHRrpyoabbIhkisc09dQHTNkLcyE0m3Fy0Jt9qn7iEnk6TOD3pjcT\nMnCP\r\n=4e4c\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDdwi57I9+K9au4axw9ASRVv2prRmkirI2AncSCUHcf4QIgKk2WqOpvfYBLNzWJO2ziKVoX3R+mDl6b8xttk/cV4nU="
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.13.2_1611214913030_0.4400907505458216"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-test.1": {
      "name": "ali-oss",
      "version": "7.0.0-test.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/node/index.js",
      "browser": {
        "lib/node/index.js": "lib/browser/",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "platform": "./shims/platform",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js",
        "constants": "constants-browserify",
        "http": "stream-http",
        "https": "stream-http",
        "stream": "stream-browserify",
        "path": "path-browserify",
        "process": "./shims/process.js",
        "url": "./shims/url/index.js",
        "buffer": "buffer"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig-es.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig-es.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig-es.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^16.5.2",
        "buffer": "^6.0.3",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "constants-browserify": "^1.0.0",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "https-browserify": "^1.0.0",
        "immediate": "^3.3.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "path-browserify": "^1.0.1",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "1.454.0",
        "standard-version": "^8.0.1",
        "stream-browserify": "^3.0.0",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "sideEffects": [
        "src/browser/polyfill.ts",
        "es/browser/polyfill.js",
        "lib/browser/polyfill.js"
      ],
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "533341a5961f35c6175561b3f33e789c84268a1f",
      "readme": "oss-js-sdk\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage][cov-image]][cov-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/ali-oss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/ali-oss\n[travis-image]: https://img.shields.io/travis/ali-sdk/ali-oss/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ali-sdk/ali-oss.svg?branch=master\n[cov-image]: http://codecov.io/github/ali-sdk/ali-oss/coverage.svg?branch=master\n[cov-url]: http://codecov.io/github/ali-sdk/ali-oss?branch=master\n[david-image]: https://img.shields.io/david/ali-sdk/ali-oss.svg?style=flat-square\n[david-url]: https://david-dm.org/ali-sdk/ali-oss\n\naliyun OSS(Object Storage Service) js client for Node and Browser env.\n\n`NOTE`： For SDK `5.X` document, please go to [README.md](https://github.com/ali-sdk/ali-oss/blob/5.x/README.md)\n\n## Install\n\n```bash\nnpm install ali-oss --save\n```\n\n## Compatibility\n\n### Node\nNode.js >= 8.0.0 required. You can use 4.x in Node.js < 8.\n\n### Browser\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n\n`Note`:\n- For Lower browsers you can refer to [PostObject](https://help.aliyun.com/document_detail/31988.html), if you want to see more practices ,please refer to [Web Post](https://help.aliyun.com/document_detail/31923.html)\n\n### Tree Shaking\n- [Guide](https://github.com/ali-sdk/ali-oss/blob/ts/ts-guide.md)\n\n### QA\nYou can join DingDing Talk Group, [Group Link](https://qr.dingtalk.com/action/joingroup?code=v1,k1,inkSDqCxm7LilkaR/kknRVBDQ8PDA0Lj5hj4Cf9io3w=&_dt_no_comment=1&origin=11)\n\n<img src=\"task/dingding.jpg\" height=\"400\" title=\"dingding\" width=\"300\">\n\n## License\n\n[MIT](LICENSE)\n\n# OSS Usage\n\nOSS, Object Storage Service. Equal to well known Amazon [S3](http://aws.amazon.com/s3/).\n\nAll operation use es7 async/await to implement. All api is async function.\n\n## Summary\n\n- [Node Usage](#node-usage)\n- [Browser Usage](#browser-usage)\n- [Data Regions](#data-regions)\n- [Create Account](#create-acount)\n- [Create A Bucket Instance](#create-a-bucket-instance)\n  - [oss(options)](#ossoptions)\n- [Bucket Operations](#bucket-operations)\n  - Base\n    - [.listBuckets(query[, options])](#listbucketsquery-options)\n    - [.putBucket(name[, options])](#putbucketname-options)\n    - [.useBucket(name)](#usebucketname)\n    - [.deleteBucket(name[, options])](#deletebucketname-options)\n    - [.getBucketInfo(name)](#getbucketinfoname)\n    - [.getBucketLocation(name)](#getbucketlocationname)\n  - ACL\n    - [.putBucketACL(name, acl[, options])](#putbucketaclname-acl-options)\n    - [.getBucketACL(name[, options])](#getbucketaclname-options)\n  - Logging\n    - [.putBucketLogging(name, prefix[, options])](#putbucketloggingname-prefix-options)\n    - [.getBucketLogging(name[, options])](#getbucketloggingname-options)\n    - [.deleteBucketLogging(name[, options])](#deletebucketloggingname-options)\n  - Website\n    - [.putBucketWebsite(name, config[, options])](#putbucketwebsitename-config-options)\n    - [.getBucketWebsite(name[, options])](#getbucketwebsitename-options)\n    - [.deleteBucketWebsite(name, region[, options])](#deletebucketwebsitename-options)\n  - Referer\n    - [.putBucketReferer(name, allowEmpty, referers[, options])](#putbucketreferername-allowempty-referers-options)\n    - [.getBucketReferer(name[, options])](#getbucketreferername-options)\n    - [.deleteBucketReferer(name[, options])](#deletebucketreferername-options)\n  - Lifecycle\n    - [.putBucketLifecycle(name, rules[, options])](#putbucketlifecyclename-rules-options)\n    - [.getBucketLifecycle(name[, options])](#getbucketlifecyclename-options)\n    - [.deleteBucketLifecycle(name[, options])](#deletebucketlifecyclename-options)\n  - CORS\n    - [.putBucketCORS(name, rules[, options])](#putbucketcorsname-rules-options)\n    - [.getBucketCORS(name[, options])](#getbucketcorsname-options)\n    - [.deleteBucketCORS(name[, options])](#deletebucketcorsname-options)\n  - RequestPayment\n    - [.getBucketRequestPayment(bucketName[, options])](#getbucketrequestpaymentbucketname-options)\n    - [.putBucketRequestPayment(bucketName, payer[, options])](#putBucketRequestpaymentbucketname-payer-options)\n  - BucketEncryption\n    - [.putBucketEncryption(name[, options])](#putbucketencryptionbucketname-options)\n    - [.getBucketEncryption(name)](#getbucketencryptionbucketname)\n    - [.deleteBucketEncryption(name)](#deletebucketencryptionbucketname-options)\n  - tagging\n    - [.putBucketTags(name, tag[, options])](#putBucketTagsname-tag-options)\n    - [.getBucketTags(name, [, options])](#getBucketTagsname-options)\n    - [.deleteBucketTags(name, [, options])](#deleteBucketTagsname-options)\n  - policy\n    - [.putBucketPolicy(name, policy[, options])](#putBucketPolicyname-policy-options)\n    - [.getBucketPolicy(name, [, options])](#getBucketPolicyname-options)\n    - [.deleteBucketPolicy(name, [, options])](#deleteBucketPolicyname-options)\n  - versioning\n    - [.getBucketVersioning(name, [, options])](#getBucketVersioningname-options)\n    - [.putBucketVersioning(name, status[, options])](#putBucketVersioningname-status-options)\n  - worm\n    - [.abortBucketWorm(name[, options])](#abortBucketWormname-options)\n    - [.completeBucketWorm(name, wormId[, options])](#completeBucketWormname-wormId-options)\n    - [.extendBucketWorm(name, wormId, days[, options])](#extendBucketWormname-wormId-days-options)\n    - [.getBucketWorm(name[, options])](#getBucketWormname-options)\n    - [.initiateBucketWorm(name, days[, options])](#initiateBucketWormname-days-options)\n- inventory\n    - [.getBucketInventory(name, inventoryId[, options])](#getBucketInventoryname-inventoryid-options)\n    - [.putBucketInventory(name, inventory[, options])](#putBucketInventoryname-inventory-options)\n    - [.deleteBucketInventory(name, inventoryId[, options])](#deleteBucketInventoryname-inventoryid-options)\n    - [.listBucketInventory(name, [, options])](#listBucketInventoryname-options)\n\n- [Object Operations](#object-operations)\n  - [.list(query[, options])](#listquery-options)\n  - [.listV2(query[, options])](#listV2query-options)\n  - [.getBucketVersions(query[, options])](#getBucketVersionsquery-options)\n  - [.put(name, file[, options])](#putname-file-options)\n  - [.putStream(name, stream[, options])](#putstreamname-stream-options)\n  - [.append(name, file[, options])](#appendname-file-options)\n  - [.getObjectUrl(name[, baseUrl])](#getobjecturlname-baseurl)\n  - [.generateObjectUrl(name[, baseUrl])](#generateobjecturlname-baseurl)\n  - [.head(name[, options])](#headname-options)\n  - [.getObjectMeta(name[, options])](#getobjectmetaname-options)\n  - [.get(name[, file, options])](#getname-file-options)\n  - [.getStream(name[, options])](#getstreamname-options)\n  - [.delete(name[, options])](#deletename-options)\n  - [.copy(name, sourceName[, sourceBucket, options])](#copyname-sourcename-sourcebucket-options)\n  - [.putMeta(name, meta[, options])](#putmetaname-meta-options)\n  - [.deleteMulti(names[, options])](#deletemultinames-options)\n  - [.signatureUrl(name[, options])](#signatureurlname-options)\n  - [.putACL(name, acl[, options])](#putaclname-acl-options)\n  - [.getACL(name[, options])](#getaclname-options)\n  - [.restore(name[, options])](#restorename-options)\n  - [.putSymlink(name, targetName[, options])](#putsymlinkname-targetname-options)\n  - [.getSymlink(name[, options])](#getsymlinkname-options)\n  - [.initMultipartUpload(name[, options])](#initmultipartuploadname-options)\n  - [.uploadPart(name, uploadId, partNo, file, start, end[, options])](#uploadpartname-uploadid-partno-file-start-end-options)\n  - [.uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])](#uploadpartcopyname-uploadid-partno-range-sourcedata-options)\n  - [.completeMultipartUpload(name, uploadId, parts[, options])](#completemultipartuploadname-uploadid-parts-options)\n  - [.multipartUpload(name, file[, options])](#multipartuploadname-file-options)\n  - [.multipartUploadCopy(name, sourceData[, options])](#multipartuploadcopyname-sourcedata-options)\n  - [.listParts(name, uploadId[, query, options])](#listparts-name-uploadid-query-options)\n  - [.listUploads(query[, options])](#listuploadsquery-options)\n  - [.abortMultipartUpload(name, uploadId[, options])](#abortmultipartuploadname-uploadid-options)\n  - [.calculatePostSignature(policy)](#calculatePostSignaturepolicy)\n  - [.getObjectTagging(name, [, options])](#getObjectTaggingname-options)\n  - [.putObjectTagging(name, tag[, options])](#putObjectTaggingname-tag-options)\n  - [.deleteObjectTagging(name, [, options])](#deleteObjectTaggingname-options)\n- [RTMP Operations](#rtmp-operations)\n  - [.putChannel(id, conf[, options])](#putchannelid-conf-options)\n  - [.getChannel(id[, options])](#getchannelid-options)\n  - [.deleteChannel(id[, options])](#deletechannelid-options)\n  - [.putChannelStatus(id, status[, options])](#putchannelstatusid-status-options)\n  - [.getChannelStatus(id[, options])](#getchannelstatusid-options)\n  - [.listChannels(query[, options])](#listchannelsquery-options)\n  - [.getChannelHistory(id[, options])](#getchannelhistoryid-options)\n  - [.createVod(id, name, time[, options])](#createvodid-name-time-options)\n  - [.getRtmpUrl(channelId[, options])](#getrtmpurlchannelid-options)\n- [Create A Image Service Instance](#create-a-image-service-instance)\n  - [oss.ImageClient(options)](#ossimageclientoptions)\n- [Image Operations](#image-operations)\n  - [imgClient.get(name, file[, options])](#imgclientgetname-file-options)\n  - [imgClient.getStream(name[, options])](#imgclientgetstreamname-options)\n  - [imgClient.getExif(name[, options])](#imgclientgetexifname-options)\n  - [imgClient.getInfo(name[, options])](#imgclientgetinfoname-options)\n  - [imgClient.putStyle(name, style[, options])](#imgclientputstylename-style-options)\n  - [imgClient.getStyle(name[, options])](#imgclientgetstylename-options)\n  - [imgClient.listStyle([options])](#imgclientliststyleoptions)\n  - [imgClient.deleteStyle(name[, options])](#imgclientdeletestylename-options)\n  - [imgClient.signatureUrl(name)](#imgclientsignatureurlname)\n- [Known Errors](#known-errors)\n\n## Node Usage\n\n### Compatibility\n- Node: >= 8.0.0\n\n### Basic usage\n1.install SDK using npm\n```\nnpm install ali-oss --save\n```\n2.for example:\n```js\nconst OSS = require('ali-oss');\nconst client = new OSS({\n  region: '<oss region>',\n  accessKeyId: '<Your accessKeyId>',\n  accessKeySecret: '<Your accessKeySecret>',\n  bucket: '<Your bucket name>'\n});\n```\n## Browser Usage\n\nYou can use most of the functionalities of `ali-oss` in browser with\nsome exceptions:\n\n- put object with streaming: no chunked encoding, we use multipart\n  upload instead\n- get object to local file: we cannot manipulate file system in\n  browser, we provide signed object url for downloading needs\n- bucket operations(listBuckets, putBucketLogging, etc) will fail: OSS\n  server currently do not support CORS requests for bucket operations\n  (will probably be fixed later)\n\n### Compatibility\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n    >Note: Because some browsers do not support promises, you need to introduce promise compatible libraries.<br>\n    For example: IE10 and IE11 need to introduce a promise-polyfill.\n\n### Setup\n\n#### Bucket setup\n\nAs browser-side javascript involves CORS operations. You need to setup\nyour bucket CORS rules to allow CORS operations:\n\n- set allowed origins to '\\*'\n- allowed methods to 'PUT, GET, POST, DELETE, HEAD'\n- set allowed headers to '\\*'\n- expose 'ETag' in expose headers\n\n#### STS setup\n\nAs we don't want to expose the accessKeyId/accessKeySecret in the\nbrowser, a [common practice][oss-sts] is to use STS to grant temporary\naccess.\n\n### Basic usage\n\nInclude the sdk lib in the `<script>` tag and you have `OSS` available\nfor creating client.\n\n```html\n // x.x.x The specific version number represented\n // we recommend introducing offline resources, because the usability of online resources depends on the stability of the cdn server.\n <!-- Introducing online resources -->\n <script src=\"http://gosspublic.alicdn.com/aliyun-oss-sdk-x.x.x.min.js\"></script>\n <!-- Introducing offline resources -->\n <script src=\"./aliyun-oss-sdk-x.x.x.min.js\"></script>\n\n<script type=\"text/javascript\">\n  const client = new OSS({\n    region: 'oss-cn-hangzhou',\n    accessKeyId: '<access-key-id>',\n    accessKeySecret: '<access-key-secret>',\n    bucket: '<bucket-name>',\n    stsToken: '<security-token>'\n  });\n\n  client.list().then((result) => {\n    console.log('objects: %j', result.objects);\n    return client.put('my-obj', new OSS.Buffer('hello world'));\n  }).then((result) => {\n    console.log('put result: %j', result);\n    return client.get('my-obj');\n  }).then((result) => {\n    console.log('get result: %j', result.content.toString());\n  });\n</script>\n```\nThe full sample can be found [here][browser-sample].\n\n### How to build\n\n```bash\nnpm run build-dist\n```\n\nAnd see the build artifacts under `dist/`.\n\n\n## Data Regions\n\n[OSS current data regions](https://help.aliyun.com/document_detail/oss/user_guide/endpoint_region.html).\n\nregion | country | city | endpoint | internal endpoint\n---  | ---     | ---  | --- | ---\noss-cn-hangzhou | China | HangZhou | oss-cn-hangzhou.aliyuncs.com | oss-cn-hangzhou-internal.aliyuncs.com\noss-cn-shanghai | China | ShangHai | oss-cn-shanghai.aliyuncs.com | oss-cn-shanghai-internal.aliyuncs.com\noss-cn-qingdao | China | QingDao | oss-cn-qingdao.aliyuncs.com | oss-cn-qingdao-internal.aliyuncs.com\noss-cn-beijing | China | BeiJing | oss-cn-beijing.aliyuncs.com | oss-cn-beijing-internal.aliyuncs.com\noss-cn-shenzhen | China | ShenZhen | oss-cn-shenzhen.aliyuncs.com | oss-cn-shenzhen-internal.aliyuncs.com\noss-cn-hongkong | China | HongKong | oss-cn-hongkong.aliyuncs.com | oss-cn-hongkong-internal.aliyuncs.com\noss-us-west-1 | US | Silicon Valley | oss-us-west-1.aliyuncs.com | oss-us-west-1-internal.aliyuncs.com\noss-ap-southeast-1 | Singapore | Singapore | oss-ap-southeast-1.aliyuncs.com | oss-ap-southeast-1-internal.aliyuncs.com\n\n## Create Account\n\nGo to [OSS website](http://www.aliyun.com/product/oss/?lang=en), create a new account for new user.\n\nAfter account created, you can create the OSS instance and get the `accessKeyId` and `accessKeySecret`.\n\n## Create A Bucket Instance\n\nEach OSS instance required `accessKeyId`, `accessKeySecret` and `bucket`.\n\n## new OSS(options)\n\nCreate a Bucket store instance.\n\noptions:\n\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- [stsToken] {String} used by temporary authorization, detail [see](https://www.alibabacloud.com/help/doc-detail/32077.htm)\n- [refreshSTSToken] {Function} used by auto set `stsToken`、`accessKeyId`、`accessKeySecret` when sts info expires. return value must be object contains `stsToken`、`accessKeyId`、`accessKeySecret`\n- [bucket] {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [endpoint] {String} oss region domain. It takes priority over `region`. Set as extranet domain name, intranet domain name, accelerated domain name, etc. according to different needs. please see [endpoints](https://www.alibabacloud.com/help/doc-detail/31837.htm)\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`.\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`.\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [secure] {Boolean} instruct OSS client to use HTTPS (secure: true) or HTTP (secure: false) protocol.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`.\n- [cname] {Boolean}, default false, access oss with custom domain name. if true, you can fill `endpoint` field with your custom domain name,\n- [isRequestPay] {Boolean}, default false, whether request payer function of the bucket is open, if true, will send headers `'x-oss-request-payer': 'requester'` to oss server.\n  the details you can see [requestPay](https://help.aliyun.com/document_detail/91337.htm)\n- [useFetch] {Boolean}, default false, it just work in Browser, if true,it means upload object with \n`fetch` mode ,else `XMLHttpRequest`\n- [enableProxy] {Boolean}, Enable proxy request, default is false.\n- [proxy] {String | Object}, proxy agent uri or options, default is null.\n- [retryMax] {Number}, used by auto retry send request count when request error is net error or timeout.\n\nexample:\n\n1. basic usage\n```js\nconst OSS = require('ali-oss');\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\n```\n2. use accelerate endpoint\n- Global accelerate endpoint: oss-accelerate.aliyuncs.com\n- Accelerate endpoint of regions outside mainland China: oss-accelerate-overseas.aliyuncs.com\n```js\nconst OSS = require('ali-oss');\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  endpoint: 'oss-accelerate.aliyuncs.com',\n});\n```\n\n3. use custom domain\n```js\nconst OSS = require('ali-oss');\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  cname: true,\n  endpoint: 'your custome domain',\n});\n```\n\n## Bucket Operations\n\n### .listBuckets(query[, options])\n\nList buckets in this account.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search buckets using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [max-keys] {String|Number} max buckets, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return buckets list on `buckets` properties.\n\n- buckets {Array<BucketMeta>} bucket meta info list\n  Each `BucketMeta` will contains blow properties:\n    - name {String} bucket name\n    - region {String} bucket store data region, e.g.: `oss-cn-hangzhou-a`\n    - creationDate {String} bucket create GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n- owner {Object} object owner, including `id` and `displayName`\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 buckets\n\n```js\nstore.listBuckets({\n  \"max-keys\": 10\n}).then((result) => {\n  console.log(result);\n});\n\n```\n\n### .putBucket(name[, options])\n\nCreate a new bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket exists and not belong to current account, will throw BucketAlreadyExistsError.\n  If bucket not exists, will create a new bucket and set it's ACL.\n- [options] {Object} optional parameters\n  - [acl] {String} include `private`,`public-read`,`public-read-write`\n  - [storageClass] {String} the storage type include (Standard,IA,Archive)\n  - [dataRedundancyType] {String} default `LRS`, include `LRS`,`ZRS`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the bucket name on `bucket` properties.\n\n- bucket {String} bucket name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Create a bucket name `helloworld` location on HongKong\n\n```js\nstore.putBucket('helloworld').then((result) => {\n  // use it by default\n  store.useBucket('helloworld');\n});\n```\n\n- Create a bucket name `helloworld` location on HongKong StorageClass `Archive`\n\n```js\nawait store.putBucket('helloworld', { StorageClass: 'Archive' });\n// use it by default\nstore.useBucket('helloworld');\n```\n\n### .deleteBucket(name[, options])\n\nDelete an empty bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket is not empty, will throw BucketNotEmptyError.\n  If bucket is not exists, will throw NoSuchBucketError.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete the exists 'helloworld' bucket on 'oss-cn-hongkong'\n\n```js\nstore.deleteBucket('helloworld').then((result) => {});\n```\n\n### .useBucket(name)\n\nUse the bucket.\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.useBucket('helloworld');\n```\n\n### .getBucketInfo(name)\n\nGet bucket information,include CreationDate、ExtranetEndpoint、IntranetEndpoint、Location、Name、StorageClass、\nOwner、AccessControlList、Versioning\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketInfo('helloworld').then( (res) => {\n  console.log(res.bucket)\n})\n```\n\n### .getBucketLocation(name)\n\nGet bucket location\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketLocation('helloworld').then( (res) => {\n  console.log(res.location)\n})\n```\n\n---\n\n### .putBucketACL(name, acl[, options])\n\nUpdate the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- acl {String} access control list, current available: `public-read-write`, `public-read` and `private`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set bucket `helloworld` to `public-read-write`\n\n```js\nstore.putBucketACL('helloworld', 'public-read-write').then((result) => {\n});\n```\n\n### .getBucketACL(name[, options])\n\nGet the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld`\n\n```js\nstore.getBucketACL('helloworld').then((result) => {\n  console.log(result.acl);\n});\n```\n\n---\n\n### .putBucketLogging(name, prefix[, options])\n\nUpdate the bucket logging settings.\nLog file will create every one hour and name format: `<prefix><bucket>-YYYY-mm-DD-HH-MM-SS-UniqueString`.\n\nparameters:\n\n- name {String} bucket name\n- [prefix] {String} prefix path name to store the log files\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Enable bucket `helloworld` logging and save with prefix `logs/`\n\n```js\nstore.putBucketLogging('helloworld', 'logs/').then((result) => {\n});\n```\n\n### .getBucketLogging(name[, options])\n\nGet the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- enable {Boolean} enable logging or not\n- prefix {String} prefix path name to store the log files, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld` logging settings\n\n```js\nstore.getBucketLogging('helloworld').then((result) => {\n  console.log(result.enable, result.prefix);\n});\n```\n\n### .deleteBucketLogging(name[, options])\n\nDelete the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketWebsite(name, config[, options])\n\nSet the bucket as a static website.\n\nparameters:\n\n- name {String} bucket name\n- config {Object} website config, contains blow properties:\n  - index {String} default page, e.g.: `index.html`\n  - [error] {String} error page, e.g.: 'error.html'\n  - [supportSubDir] {String} default vaule false\n  - [type] {String} default value 0\n  - [routingRules] {Array} RoutingRules\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketWebsite('hello', {\n  index: 'index.html'\n}).then((result) => {\n});\n```\n\n### .getBucketWebsite(name[, options])\n\nGet the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- index {String} index page\n- error {String} error page, maybe `null`\n- supportSubDir {String}\n- type {String}\n- routingRules {Array}\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketWebsite(name[, options])\n\nDelete the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketReferer(name, allowEmpty, referers[, options])\n\nSet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list, e.g.:\n  ```js\n  [\n    'https://npm.taobao.org',\n    'http://cnpmjs.org'\n  ]\n  ```\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketReferer('hello', false, [\n  'https://npm.taobao.org',\n  'http://cnpmjs.org'\n]).then((result) => {\n});\n```\n\n### .getBucketReferer(name[, options])\n\nGet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketReferer(name[, options])\n\nDelete the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketLifecycle(name, rules[, options])\n\nSet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains blow properties:\n  - [id] {String} rule id, if not set, OSS will auto create it with random string.\n  - prefix {String} store prefix\n  - status {String} rule status, allow values: `Enabled` or `Disabled`\n  - [expiration] {Object} specifies the expiration attribute of the lifecycle rules for the object.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    - [expiredObjectDeleteMarker] {String} value `true`\n    `createdBeforeDate` and `days`  and `expiredObjectDeleteMarker` must have one.\n  - [abortMultipartUpload] {Object} Specifies the expiration attribute of the multipart upload tasks that are not complete.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `createdBeforeDate` and `days` must have one.\n  - [transition] {Object} Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle.\n    - storageClass {String} Specifies the storage class that objects that conform to the rule are converted into. allow values: `IA` or `Archive`\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `createdBeforeDate` and `days` must have one.\n  - [noncurrentVersionTransition] {Object} Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle.\n    - storageClass {String} Specifies the storage class that history objects that conform to the rule are converted into. allow values: `IA` or `Archive`\n    - noncurrentDays {String} expire after the `noncurrentDays`\n  `expiration`、 `abortMultipartUpload`、 `transition`、 `noncurrentVersionTransition` must have one.\n  - [noncurrentVersionExpiration] {Object} specifies the expiration attribute of the lifecycle rules for the history object.\n    - noncurrentDays {String} expire after the `noncurrentDays`\n  - [tag] {Object} Specifies the object tag applicable to a rule. Multiple tags are supported.\n    - key {String} Indicates the tag key.\n    - value {String} Indicates the tag value.\n    `tag` cannot be used with `abortMultipartUpload`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketLifecycle('hello', [\n  {\n    id: 'delete after one day',\n    prefix: 'logs/',\n    status: 'Enabled',\n    days: 1\n  },\n  {\n    prefix: 'logs2/',\n    status: 'Disabled',\n    date: '2022-10-11T00:00:00.000Z'\n  }\n]).then((result) => {});\n```\n\nexample: for history with noncurrentVersionExpiration\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  expiration: {\n    days: '1'\n  },\n  noncurrentVersionExpiration: {\n    noncurrentDays: '1'\n  }\n}]);\nconsole.log(result)\n```\n\nexample: for history with expiredObjectDeleteMarker\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  expiration: {\n    expiredObjectDeleteMarker: 'true'\n  },\n  noncurrentVersionExpiration: {\n    noncurrentDays: '1'\n  }\n}]);\nconsole.log(result)\n```\n\nexample: for history with noncurrentVersionTransition\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  noncurrentVersionTransition: {\n    noncurrentDays: '10',\n    storageClass: 'IA'\n  }\n}]);\nconsole.log(result)\n```\n\n### .getBucketLifecycle(name[, options])\n\nGet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the lifecycle rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketLifecycle(name[, options])\n\nDelete the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketCORS(name, rules[, options])\n\nSet CORS rules of the bucket object\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains below properties:\n  - allowedOrigin {String/Array} configure for Access-Control-Allow-Origin header\n  - allowedMethod {String/Array} configure for Access-Control-Allow-Methods header\n  - [allowedHeader] {String/Array} configure for Access-Control-Allow-Headers header\n  - [exposeHeader] {String/Array} configure for Access-Control-Expose-Headers header\n  - [maxAgeSeconds] {String} configure for Access-Control-Max-Age header\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketCORS('hello', [\n  {\n    allowedOrigin: '*',\n    allowedMethod: [\n      'GET',\n      'HEAD',\n    ],\n  }\n]).then((result) => {});\n```\n\n### .getBucketCORS(name[, options])\n\nGet CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the CORS rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketCORS(name[, options])\n\nDelete CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .getBucketRequestPayment(bucketName[, options])\n\nget RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String} bucket name\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- payer {String} payer, BucketOwner or Requester\n- res {Object} response info, including\n  - data {Buffer} xml\n\n---\n\n### .putBucketRequestPayment(bucketName, payer[, options])\n\nput RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String}\n- payer {String} payer\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketEncryption(name, rules)\n\nput BucketEncryption value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [rules] {Object} parameters\n  - SSEAlgorithm {String} encryption type, expect AES256 or KMS\n  - {KMSMasterKeyID} {String} needed when encryption type is KMS\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketEncryption(name)\n\nget BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n- encryption {Object} rules\n  - SSEAlgorithm {String} encryption type, AES256 or KMS\n  - {KMSMasterKeyID} {String} will be return when encryption type is KMS\n\n---\n\n### .deleteBucketEncryption(name)\n\ndelete BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketTags(name, tag[, options])\n\nAdds tags for a bucket or modify the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketTags(name[, options])\n\nObtains the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- tag {Object} the tag of object\n- res {Object} response info\n\n---\n\n### .deleteBucketTags(name[, options])\n\nDeletes the tags added for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketPolicy(name, policy[, options])\n\nAdds or modify policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- policy {Object} bucket policy\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\nexample:\n```js\nconst policy = {\n  Version: '1',\n  Statement: [\n    {\n      Action: ['oss:PutObject', 'oss:GetObject'],\n      Effect: 'Deny',\n      Principal: ['1234567890'],\n      Resource: ['acs:oss:*:1234567890:*/*']\n    }\n  ]\n};\nconst result = await store.putBucketPolicy(bucket, policy);\nconsole.log(result);\n```\n---\n\n### .getBucketPolicy(name[, options])\n\nObtains the policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- policy {Object} the policy of bucket, if not exist, the value is null\n- res {Object} response info\n- status {Number} response status\n\n---\n\n### .deleteBucketPolicy(name[, options])\n\nDeletes the policy added for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n### .getBucketVersioning(name[, options])\n\nObtains the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- versionStatus {String | undefined} version status, `Suspended` or `Enabled`. default value: `undefined`\n- res {Object} response info\n\n---\n\n### .putBucketVersioning(name, status[, options])\n\nset the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- status {String} version status, allow values: `Enabled` or `Suspended`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .abortBucketWorm(name[, options])\n\nused to delete an unlocked retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .completeBucketWorm(name, wormId[, options])\n\nused to lock a retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- wormId {String} worm id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .extendBucketWorm(name, wormId, days[, options])\n\n used to extend the retention period of objects in a bucket whose retention policy is locked.\n\nparameters:\n\n- name {String} the bucket name\n- wormId {String} worm id\n- days {String | Number} retention days\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketWorm(name[, options])\n\n used to query the retention policy information of the specified bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- wormId {String} worm id\n- state {String} `Locked` or `InProgress`\n- days {String} retention days\n- creationDate {String}\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .initiateBucketWorm(name, days[, options])\n\ncreate a retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- days {String | Number}} set retention days\n- [options] {Object} optional args\n\nSuccess will return:\n\n- wormId {String} worm id\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketInventory(name, inventoryId[, options])\n\nget bucket inventory by inventory-id\n\nparameters:\n\n- name {String} the bucket name\n- inventoryId {String} inventory-id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- inventory {Inventory}\n- status {Number} response status\n- res {Object} response info\n\n```js\nasync function getBucketInventoryById() {\n  try {\n    const result = await client.getBucketInventory('bucket', 'inventoryid');\n    console.log(result.inventory)\n  } catch (err) {\n    console.log(err)\n  }\n}\n\ngetBucketInventoryById();\n```\n\n### putBucketInventory(name, inventory[, options])\n\nset bucket inventory\n\nparameters:\n\n- name {String} the bucket name\n- inventory {Inventory} inventory config\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n```ts\ntype Field = 'Size' | 'LastModifiedDate' | 'ETag' | 'StorageClass' | 'IsMultipartUploaded' | 'EncryptionStatus';\ninterface Inventory {\n  id: string;\n  isEnabled: true | false;\n  prefix?: string;\n  OSSBucketDestination: {\n    format: 'CSV';\n    accountId: string;\n    rolename: string;\n    bucket: string;\n    prefix?: string;\n    encryption?:\n    | {'SSE-OSS': ''}\n    | {\n      'SSE-KMS': {\n        keyId: string;\n      };\n    };\n  };\n  frequency: 'Daily' | 'Weekly';\n  includedObjectVersions: 'Current' | 'All';\n  optionalFields?: {\n    field?: Field[];\n  };\n}\n```\n```js\nconst inventory = {\n  id: 'default',\n  isEnabled: false, // `true` | `false`\n  prefix: 'ttt', // filter prefix\n  OSSBucketDestination: {\n    format: 'CSV',\n    accountId: '1817184078010220',\n    rolename: 'AliyunOSSRole',\n    bucket: 'your bucket',\n    prefix: 'test',\n    //encryption: {'SSE-OSS': ''},\n    /*\n      encryption: {\n      'SSE-KMS': {\n        keyId: 'test-kms-id';\n      };, \n    */\n  },\n  frequency: 'Daily', // `WEEKLY` | `Daily`\n  includedObjectVersions: 'All', // `All` | `Current`\n  optionalFields: {\n    field: [\"Size\", \"LastModifiedDate\", \"ETag\", \"StorageClass\", \"IsMultipartUploaded\", \"EncryptionStatus\"]\n  },\n}\n\nasync function putInventory(){\n  const bucket = 'Your Bucket Name';\n  try {\n    await client.putBucketInventory(bucket, inventory);\n  } catch(err) {\n    console.log(err);\n  }\n}\n\nputInventory()\n```\n\n### deleteBucketInventory(name, inventoryId[, options])\n\ndelete bucket inventory by inventory-id\n\nparameters:\n\n- name {String} the bucket name\n- inventoryId {String} inventory-id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n### listBucketInventory(name[, options])\n\nlist bucket inventory\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n  - continuationToken used by search next page\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\nexample: \n\n```js\nasync function listBucketInventory() {\n  const bucket = 'Your Bucket Name';\n  let nextContinuationToken;\n  // list all inventory of the bucket\n  do {\n    const result = await client.listBucketInventory(bucket, nextContinuationToken);\n    console.log(result.inventoryList);\n    nextContinuationToken = result.nextContinuationToken;\n  } while (nextContinuationToken)\n}\n\nlistBucketInventory();\n```\n\n## Object Operations\n\nAll operations function return Promise, except `signatureUrl`.\n\n### .put(name, file[, options])\n\nAdd an object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream|File(only support Browser)|Blob(only support Browser)} object local path, content buffer or ReadStream content instance use in Node, Blob and html5 File\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - See more: [PutObject](https://help.aliyun.com/document_detail/31978.html#title-yxe-96d-x61)\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- data {Object} callback server response data, sdk use JSON.parse() return\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through local file path\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/demo.txt', filepath).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/demo.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829244'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through content buffer\n\n```js\nstore.put('ossdemo/buffer', Buffer.from('foo content')).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/buffer',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/buffer',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"xxx\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829243'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .putStream(name, stream[, options])\n\nAdd a stream object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- stream {ReadStream} object ReadStream content instance\n- [options] {Object} optional parameters\n  - [contentLength] {Number} the stream length, `chunked encoding` will be used if absent\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.putStream('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .append(name, file[, options])\n\nAppend an object to the bucket, it's almost same as put, but it can add content to existing object rather than override it.\n\nAll parameters are same as put except for options.position\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [position] {String} specify the position which is the content length of the latest object\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n\nobject:\n\n- name {String} object name\n- url {String} the url of oss\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- nextAppendPosition {String} the next position\n\nexample:\n\n```js\nlet object = await store.append('ossdemo/buffer', Buffer.from('foo'));\n\n// append content to the existing object\nobject = await store.append('ossdemo/buffer', Buffer.from('bar'), {\n  position: object.nextAppendPosition,\n});\n```\n\n### .getObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `endpoint`.\n\ne.g.:\n\n```js\nconst cdnUrl = client.getObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .generateObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `bucket and endpoint `.\nSuggest use generateObjectUrl instead of getObjectUrl.\n\ne.g.:\n\n```js\nconst url = client.generateObjectUrl('foo/bar.jpg');\n// cdnUrl should be `https://${bucketname}.${endpotint}foo/bar.jpg`\n\nconst cdnUrl = client.generateObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .head(name[, options])\n\nHead an object and get the meta info.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status, maybe 200 or 304\n- meta {Object} object user meta, if not set on `put()`, will return null.\n    If return status 304, meta will be null too\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-version-id] return in multiversion\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Head an exists object and get user meta\n\n```js\nawait this.store.put('ossdemo/head-meta', Buffer.from('foo'), {\n  meta: {\n    uid: 1,\n    path: 'foo/demo.txt'\n  }\n});\nconst object = await this.store.head('ossdemo/head-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  meta: {\n    uid: '1',\n    path: 'foo/demo.txt'\n  },\n  res: { ... }\n}\n```\n\n- Head a not exists object\n\n```js\nconst object = await this.store.head('ossdemo/head-meta');\n// will throw NoSuchKeyError\n```\n\n### .getObjectMeta(name[, options])\n\nGet an  object meta info include ETag、Size、LastModified and so on, not return object content.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info, including\n  - headers {Object} response headers\n\nexample:\n\n- Head an exists object and get object meta info\n\n```js\nawait this.store.put('ossdemo/object-meta', Buffer.from('foo'));\nconst object = await this.store.getObjectMeta('ossdemo/object-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  res: { ... }\n}\n```\n\n### .get(name[, file, options])\n\nGet an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the content\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [versionId] {String} the version id of history object\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [responseCacheControl] {String} default `no-cache`, (only support Browser). response-cache-control, will response with HTTP Header `Cache-Control`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Range' get specifying range bytes content, e.g.: `Range: bytes=0-9`\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/demo.txt', filepath);\n```\n\n_ Store object to a writestream\n\n```js\nawait store.get('ossdemo/demo.txt', somestream);\n```\n\n- Get an object content buffer\n\n```js\nconst result = await store.get('ossdemo/demo.txt');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a processed image and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.png';\nawait store.get('ossdemo/demo.png', filepath, {process: 'image/resize,w_200'});\n```\n\n- Get a not exists object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/not-exists-demo.txt', filepath);\n// will throw NoSuchKeyError\n```\n\n- Get a historic version object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nconst versionId = 'versionId string';\nawait store.get('ossdemo/not-exists-demo.txt', filepath, {\n  versionId\n});\n```\n\n### .getStream(name[, options])\n\nGet an object read stream.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object stream\n\n```js\nconst result = await store.getStream('ossdemo/demo.txt');\nresult.stream.pipe(fs.createWriteStream('some file.txt'));\n```\n\n### .delete(name[, options])\n\nDelete an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf delete object not exists, will also delete success.\n\nexample:\n\n- Delete an exists object\n\n```js\nawait store.delete('ossdemo/someobject');\n```\n\n- Delete a not exists object\n\n```js\nawait store.delete('ossdemo/some-not-exists-object');\n```\n\n- Delete a history object or deleteMarker\n\n```js\nconst versionId = 'versionId';\nawait store.delete('ossdemo/some-not-exists-object', { versionId });\n```\n\n### .copy(name, sourceName[, sourceBucket, options])\n\nCopy an object from `sourceName` to `name`.\n\nparameters:\n\n- name {String} object name store on OSS\n- sourceName {String} source object name\n- [sourceBucket] {String} source Bucket. if doesn't exist，`sourceBucket` is same bucket. \n- [options] {Object} optional parameters\n  - [versionId] {String} the version id of history object\n  - [timeout] {Number} the operation timeout\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n    If the `meta` set, will override the source object meta.\n  - [headers] {Object} extra headers\n    - 'If-Match' do copy if source object etag equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' do copy if source object etag not equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-Modified-Since' do copy if source object modified after this time,\n        otherwise throw PreconditionFailedError\n    - 'If-Unmodified-Since' do copy if source object modified before this time,\n        otherwise throw PreconditionFailedError\n    - See more: [CopyObject](https://help.aliyun.com/document_detail/31979.html?#title-tzy-vxc-ncx)\n\nSuccess will return the copy result in `data` property.\n\nobject:\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT string\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf source object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Copy same bucket object\n\n```js\nstore.copy('newName', 'oldName').then((result) => {\n  console.log(result);\n});\n```\n\n- Copy other bucket object\n\n```js\nstore.copy('logo.png', 'logo.png', 'other-bucket').then((result) => {\n  console.log(result);\n});\n```\n\n- Copy historic object\n\n```js\nconst versionId = 'your verisonId'\nstore.copy('logo.png', 'logo.png', 'other-bucket', { versionId }).then((result) => {\n  console.log(result);\n});\n```\n\n### .putMeta(name, meta[, options])\n\nSet an exists object meta.\n\nparameters:\n\n- name {String} object name store on OSS\n- meta {Object} user meta, will send with `x-oss-meta-` prefix string\n  e.g.: `{ uid: 123, pid: 110 }`\n  If `meta: null`, will clean up the exists meta\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the putMeta result in `data` property.\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Update exists object meta\n\n```js\nconst result = await store.putMeta('ossdemo.txt', {\n  uid: 1, pid: 'p123'\n});\nconsole.log(result);\n```\n\n- Clean up object meta\n\n```js\nawait store.putMeta('ossdemo.txt', null);\n```\n\n### .deleteMulti(names[, options])\n\nDelete multi objects in one request.\n\nparameters:\n\n- names {Array<Object>} object names, max 1000 objects in once.\n  - key {String} object name\n  - [versionId] {String} the version id of history object or deleteMarker\n- [options] {Object} optional parameters\n  - [quiet] {Boolean} quiet mode or verbose mode, default is `false`, verbose mode\n    quiet mode: if all objects delete succes, return emtpy response.\n      otherwise return delete error object results.\n    verbose mode: return all object delete results.\n  - [timeout] {Number} the operation timeout\n\nSuccess will return delete success objects in `deleted` property.\n\n- [deleted] {Array<Object>} deleted object or deleteMarker info list\n  - [Key] {String} object name\n  - [VersionId] {String} object versionId\n  - [DeleteMarker] {String} generate or delete marker\n  - [DeleteMarkerVersionId] {String} marker versionId \n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete multi objects in quiet mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3'], {\n  quiet: true\n});\n```\n\n- Delete multi objects in verbose mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3']);\n```\n\n- Delete multi objects in multiversion\n\n```js\nconst obj1 = {\n  key: 'key1',\n  versionId: 'versionId1'\n}\nconst obj2 = {\n  key: 'key2',\n  versionId: 'versionId2'\n}\nconst result = await store.deleteMulti([obj1, obj2]);\n```\n\n### .list(query[, options])\n\nList objects in the bucket.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 objects\n\n```js\nconst result = await store.list();\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nconst result = await store.list({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nconst result = await store.list({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n### .listV2(query[, options])\n\nList objects in the bucket.(recommended)\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [continuation-token] (continuationToken) {String} search start from `continuationToken`, including `continuationToken` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n  - [start-after] {String} specifies the Start-after value from which to start the list. The names of objects are returned in alphabetical order.\n  - [fetch-owner] {Boolean} specifies whether to include the owner information in the response.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n  - name {String} object name on oss\n  - url {String} resource url\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n  - type {String} object type, e.g.: `Normal`\n  - size {Number} object size, e.g.: `344606`\n  - storageClass {String} storage class type, e.g.: `Standard`\n  - owner {Object|null} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextContinuationToken {String} next continuation-token string\n- keyCount {Number} The number of keys returned for this request. If Delimiter is specified, KeyCount is the sum of the elements in Key and CommonPrefixes.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n- List top 10 objects\n\n```js\nconst result = await store.listV2({\n  'max-keys': 10\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nconst result = await store.listV2({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nconst result = await store.listV2({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n- List `a/` dir objects, after `a/b` and not include `a/b`\n\n```js\nconst result = await store.listV2({\n  delimiter: '/',\n  prefix: 'a/',\n  'start-after': 'a/b'\n});\nconsole.log(result.objects);\n```\n\n### .getBucketVersions(query[, options])\n\nList the version information of all objects in the bucket, including the delete marker (Delete Marker).\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [versionIdMarker] {String} set the result to return from the version ID marker of the key marker object and sort by the versions\n  - [keyMarker] {String} search start from `keyMarker`, including `keyMarker` key\n  - [encodingType] {String} specifies that the returned content is encoded, and specifies the type of encoding\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [maxKeys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - isLatest {Boolean}\n    - versionId {String} object versionId\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- deleteMarker {Array<ObjectDeleteMarker>} object delete marker info list\n  Each `ObjectDeleteMarker`\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - versionId {String} object versionId\n- isTruncated {Boolean} truncate or not\n- nextKeyMarker (nextMarker) {String} next marker string\n- nextVersionIdMarker (NextVersionIdMarker) {String} next version ID marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- View all versions of objects and deleteMarker of bucket\n\n```js\nconst result = await store.getBucketVersions();\nconsole.log(result.objects);\nconsole.log(result.deleteMarker);\n```\n\n- List from key-marker\n\n```js\nconst result = await store.getBucketVersions({\n  'keyMarker': 'keyMarker'\n});\nconsole.log(result.objects);\n```\n\n- List from the version-id-marker of key-marker\n\n```js\nconst result = await store.getBucketVersions({\n  'versionIdMarker': 'versionIdMarker',\n  'keyMarker': 'keyMarker'\n});\nconsole.log(result.objects);\nconsole.log(result.deleteMarker);\n```\n\n### .signatureUrl(name[, options])\n\nCreate a signature url for download or upload object. When you put object with signatureUrl ,you need to pass `Content-Type`.Please look at the example.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [method] {String} the HTTP method, default is 'GET'\n  - [Content-Type] {String} set the request content type\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [trafficLimit] {Number} traffic limit, range: `819200`~`838860800`.\n  - [subResource] {Object} additional signature parameters in url.\n  - [response] {Object} set the response headers for download\n    - [content-type] {String} set the response content type\n    - [content-disposition] {String} set the response content disposition\n    - [cache-control] {String} set the response cache control\n    - See more: https://help.aliyun.com/document_detail/oss/api-reference/object/GetObject.html\n  - [callback] {Object} set the callback for the operation\n    - url {String} set the url for callback\n    - [host] {String} set the host for callback\n    - body {String} set the body for callback\n    - [contentType] {String} set the type for body\n    - [customValue] {Object} set the custom value for callback,eg. {var1: value1,var2:value2}\n\nSuccess will return signature url.\n\nexample:\n\n- Get signature url for object\n\n```js\nconst url = store.signatureUrl('ossdemo.txt');\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT'\n});\nconsole.log(url);\n\n//  put object with signatureUrl\n// -------------------------------------------------\n\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT',\n  'Content-Type': 'text/plain; charset=UTF-8',\n});\nconsole.log(url);\n\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  response: {\n    'content-type': 'text/custom',\n    'content-disposition': 'attachment'\n  }\n});\nconsole.log(url);\n\n// put operation\n```\n\n- Get a signature url for a processed image\n\n```js\nconst url = store.signatureUrl('ossdemo.png', {\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.png', {\n  expires: 3600,\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n```\n\n### .putACL(name, acl[, options])\n\nSet object's ACL.\n\nparameters:\n\n- name {String} object name\n- acl {String} acl (private/public-read/public-read-write)\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object \n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set an object's ACL\n\n```js\nawait store.putACL('ossdemo.txt', 'public-read');\n```\n\n- Set an history object's ACL\n\n```js\nconst versionId = 'object versionId'\nawait store.putACL('ossdemo.txt', 'public-read', {\n  versionId\n});\n```\n\n### .getACL(name[, options])\n\nGet object's ACL.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get an object's ACL\n\n```js\nconst result = await store.getACL('ossdemo.txt');\nconsole.log(result.acl);\n```\n\n- Get an history object's ACL\n\n```js\nconst versionId = 'object versionId'\nconst result = await store.getACL('ossdemo.txt', { versionId });\nconsole.log(result.acl);\n```\n\n### .restore(name[, options])\n\nRestore Object.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object \n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Restore an object\n\n```js\nconst result = await store.restore('ossdemo.txt');\nconsole.log(result.status);\n```\n\n- Restore an history object\n\n```js\nconst versionId = 'object versionId';\nconst result = await store.restore('ossdemo.txt', { versionId });\nconsole.log(result.status);\n```\n\n### .putSymlink(name, targetName[, options])\n\nPutSymlink\n\nparameters:\n\n- name {String} object name\n- targetName {String} target object name\n- [options] {Object} optional parameters\n  - [storageClass] {String} the storage type include (Standard,IA,Archive)\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers, detail see [PutSymlink](https://help.aliyun.com/document_detail/45126.html#title-x71-l2b-7i8)\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst options = {\n  storageClass: 'IA',\n  meta: {\n    uid: '1',\n    slus: 'test.html' \n  }\n}\nconst result = await store.putSymlink('ossdemo.txt', 'targetName', options)\nconsole.log(result.res)\n```\n\nputSymlink multiversion \n```js\nconst options = {\n  storageClass: 'IA',\n  meta: {\n    uid: '1',\n    slus: 'test.html' \n  },\n}\nconst result = await store.putSymlink('ossdemo.txt', 'targetName', options)\nconsole.log(result.res.headers['x-oss-version-id'])\n```\n\n### .getSymlink(name[, options])\n\nGetSymlink\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n- [versionId] {String} the version id of history object\n\nSuccess will return\n\n- targetName {String} target object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst result = await store.getSymlink('ossdemo.txt')\nconsole.log(result.targetName)\n```\n\nfor history object\n```js\nconst versionId = 'object versionId';\nconst result = await store.getSymlink('ossdemo.txt', { versionId })\nconsole.log(result.targetName)\n```\n\n### .initMultipartUpload(name[, options])\nBefore transmitting data in the Multipart Upload mode,\nyou must call the Initiate Multipart Upload interface to notify the OSS to initiate a Multipart Upload event.\nThe Initiate Multipart Upload interface returns a globally unique Upload ID created by the OSS server to identify this Multipart Upload event.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] Mime file type e.g.: application/octet-stream\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - [x-oss-server-side-encryption]\n    Specify the server-side encryption algorithm used to upload each part of this object,Type: string, Valid value: AES256 `x-oss-server-side-encryption: AES256`<br>\n    if use in browser you should be set cors expose header x-oss-server-side-encryption\n    - See more: [InitiateMultipartUpload](https://help.aliyun.com/document_detail/31992.html?#title-wh0-a2h-rur)\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-server-side-encryption] if set request header x-oss-server-side-encryption, will return\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- uploadId {String} upload id, use for uploadPart, completeMultipart\n\nexample:\n\n```js\n  const result = await store.initMultipartUpload('object');\n  console.log(result);\n```\n\n### .uploadPart(name, uploadId, partNo, file, start, end[, options])\nAfter initiating a Multipart Upload event, you can upload data in parts based on the specified object name and Upload ID.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- file {File|String}  is File or FileName, the whole file<br>\n Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB. <br>\n In Node you can use File or FileName, but in browser you only can use File.\n- start {Number} part start bytes  e.g: 102400\n- end {Number} part end bytes  e.g: 204800\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n  const uploadId = result.uploadId;\n  const file; //the data you want to upload, is a File or FileName(only in node)\n  //if file part is 10\n  const partSize = 100 * 1024;\n  const fileSize = 10 * partSize;//you need to calculate\n  const dones = [];\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const part = await store.uploadPart(name, uploadId, i, file, start, end);\n    dones.push({\n      number: i,\n      etag: part.etag\n    });\n    console.log(part);\n  }\n\n  //end need to call completeMultipartUpload api\n```\n\n### .uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])\nUsing Upload Part Copy, you can copy data from an existing object and upload a part of the data.\nWhen copying a file larger than 1 GB, you must use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- range {String} Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB, range value like `0-102400`\n- sourceData {Object}\n  - sourceKey {String} the source object name\n  - sourceBucketName {String} the source bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n  - [headers] {Object} The following request header is used for the source objects specified by x-oss-copy-source.\n    - [x-oss-copy-source-if-match]  default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]   default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]   default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since]   default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  const partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const range = start + '-' + (end - 1);\n    const part = await store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n- use history object to uploadPartCopy\n\n```js\n  const versionId = 'object versionId';\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n  const partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const range = start + '-' + (end - 1);\n    const part = await store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    }, {\n      versionId\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n### .completeMultipartUpload(name, uploadId, parts[, options])\nAfter uploading all data parts, you must call the Complete Multipart Upload API to complete Multipart Upload for the entire file.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- parts {Array} more part {Object} from uploadPartCopy, , each in the structure:\n  - number {Number} partNo\n  - etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [CompleteMultipartUpload](https://help.aliyun.com/document_detail/31995.html?#title-nan-5y3-rjd)\n\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data , sdk use JSON.parse() return\n\nexample:\n\n```js\n\n  //init multipart\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  //upload part\n  const file; //the data you want to upload, this example size is 10 * 100 * 1024\n  const fileSize;//you need to calculate\n  const partSize = 100 * 1024;//100kb\n  const done = [];\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const data = file.slice(start, end);\n    const part = yield store.uploadPart(name, result.uploadId, i, data);\n    console.log(part);\n    done.push({\n          number: i,\n          etag: part.res.headers.etag\n        });\n  }\n\n  //complete\n  const completeData = await store.completeMultipartUpload(name, result.uploadId, done);\n  console.log(completeData);\n```\n\n\n### .multipartUpload(name, file[, options])\n\nUpload file with [OSS multipart][oss-multipart].<br>\nthis function contains initMultipartUpload, uploadPart, completeMultipartUpload.\nWhen you use multipartUpload api，if you encounter problems with ConnectionTimeoutError, you should handle ConnectionTimeoutError in your business code. How to resolve ConnectionTimeoutError, you can decrease `partSize` size 、 Increase `timeout` 、Retry request ,\nor give tips in your business code;\n\nparameters:\n\n- name {String} object name\n- file {String|File(only support Browser)|Blob(only support Browser)|Buffer} file path or HTML5 Web File or web Blob or content buffer\n- [options] {Object} optional args\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part, defalut `1024 * 1024`(1MB), minimum `100 * 1024`(100KB)\n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n    - file {File} The file object selected by the user, if the browser is restarted, it needs the user to manually trigger the settings\n    - name {String} object key\n    - fileSize {Number} file size\n    - partSize {Number} part size\n    - uploadId {String} upload id\n    - doneParts {Array} An array of pieces that have been completed, including the object structure as follows\n       - number {Number} part number\n       - etag {String} part etag\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [mime] {String} custom mime , will send with `Content-Type` entity header\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n          e.g.:\n         ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n         ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data, sdk use JSON.parse() return\n\nexample:\n\n- Upload using multipart\n\n```js\nconst result = await store.multipartUpload('object', '/tmp/file');\nlet savedCpt;\nconsole.log(result);\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    savedCpt = cpt;\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) { //progress is generator\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\n```\n\n- multipartUpload progress example\n\n```js\n\n//async function\nasync function asyncProgress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result1 = await store.multipartUpload('object', '/tmp/file', {\n  progress: asyncProgress\n});\n\n//function\nfunction progress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result2 = await store.multipartUpload('object', '/tmp/file', {\n  progress: progress\n});\n\n```\n\n- multipartUpload with abort\n\n>tips: abort multipartUpload support on node and browser\n\n```js\n\n//start upload\nlet abortCheckpoint;\nstore.multipartUpload('object', '/tmp/file', {\n  progress: function (p, cpt, res) {\n    abortCheckpoint = cpt;\n  }\n}).then(res => {\n  // do something\n}.catch(err => {\n   //if abort will catch abort event\n  if (err.name === 'abort') {\n    // handle abort\n    console.log('error: ', err.message)\n  }\n}))\n\n// abort\nstore.abortMultipartUpload(abortCheckpoint.name, abortCheckpoint.uploadId)\n\n```\n\n- multipartUpload with cancel\n\n>tips: cancel multipartUpload support on node and browser\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n- multipartUpload with capture `ConnectionTimeoutError`  error\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  if (err.code === 'ConnectionTimeoutError') {\n    console.log(\"Woops,Woops ,timeout error!!!\");\n    // do ConnectionTimeoutError operation\n  }\n}\n\n```\n\n### .multipartUploadCopy(name, sourceData[, options])\n\nCopy file with [OSS multipart][oss-multipart]. <br>\nthis function contains head, initMultipartUpload, uploadPartCopy, completeMultipartUpload.<br>\nWhen copying a file larger than 1 GB, you should use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part, defalut `1024 * 1024`(1MB), minimum `100 * 1024`(100KB)\n  - [versionId] {String} the version id of history object \n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [copyheaders] {Object} only uploadPartCopy api used, detail [see](https://www.alibabacloud.com/help/doc-detail/31994.htm)\n    - [x-oss-copy-source-if-match]  only uploadPartCopy api used, default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]  only uploadPartCopy api used, default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]  only uploadPartCopy api used, default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since] only uploadPartCopy api used, default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n- Copy using multipart\n\n```js\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n});\nlet savedCpt;\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    savedCpt = cpt;\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\n```\n\n- multipartUploadCopy with abort\n\n```js\n\n//start upload\nlet abortCheckpoint;\nstore.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n  progress: function (p, cpt, res) {\n    abortCheckpoint = cpt;\n  }\n}).then(res => {\n  // do something\n}.catch(err => {\n   //if abort will catch abort event\n  if (err.name === 'abort') {\n    // handle abort\n    console.log('error: ', err.message)\n  }\n}))\n\n//the other event to abort, for example: click event\n//to abort upload must use the same client instance\nstore.abortMultipartUpload(abortCheckpoint.name, abortCheckpoint.uploadId)\n\n```\n\n- multipartUploadCopy with cancel\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n- multipartUploadCopy with versionId\n\n```js\n\nconst versionId = 'object versionId'\n//start upload\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  },\n  versionId\n});\n\n```\n\n### .listParts(name, uploadId[, query, options])\n\nThe ListParts command can be used to list all successfully uploaded parts mapped to a specific upload ID, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- name {String} object key\n- uploadId {String} upload ID from initMultipartUpload api\n- [query] {Object} query parameters\n  - [max-parts] {Number} The maximum part number in the response of the OSS. default value: 1000.\n  - [part-number-marker] {Number} Starting position of a specific list. A part is listed only when the part number is greater than the value of this parameter.\n  - [encoding-type] {String} Specify the encoding of the returned content and the encoding type. Optional value: url\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- uploadId {String} upload ID\n- bucket {String} Specify the bucket name.\n- name {String} object name\n- PartNumberMarker {Number} Starting position of the part numbers in the listing result.\n- nextPartNumberMarker {Number} If not all results are returned this time, the response request includes the NextPartNumberMarker element to indicate the value of PartNumberMarker in the next request.\n- maxParts {Number} upload ID\n- isTruncated {Boolean} Whether the returned result list for List Parts is truncated. The “true” indicates that not all results are returned; “false” indicates that all results are returned.\n- parts {Array} The container that saves part information, each in the structure:\n  - PartNumber {Number} Part number.\n  - LastModified {Date} Time when a part is uploaded.\n  - ETag {String} ETag value in the content of the uploaded part.\n  - Size {Number} Size of the uploaded part.\n\nexample:\n\n- List uploaded part\n\n```js\n\nconst result = await store.listParts('objcet', 'uploadId', {\n  'max-parts': 1000\n});\nconsole.log(result);\n```\n\n### .listUploads(query[, options])\n\nList on-going multipart uploads, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- query {Object} query parameters\n  - [prefix] {String} the object key prefix\n  - [max-uploads] {Number} the max uploads to return\n  - [key-marker] {String} the object key marker, if `upload-id-marker`\n    is not provided, return uploads with `key > marker`, otherwise\n    return uploads with `key >= marker && uploadId > id-marker`\n  - [upload-id-marker] {String} the upload id marker, must be used\n    **WITH** `key-marker`\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- List on-going multipart uploads\n\n```js\n\nconst result = await store.listUploads({\n  'max-uploads': 100,\n  'key-marker': 'my-object',\n  'upload-id-marker': 'upload-id'\n});\nconsole.log(result);\n```\n\n### .abortMultipartUpload(name, uploadId[, options])\n\nAbort a multipart upload for object.\n\nparameters:\n\n- name {String} the object name\n- uploadId {String} the upload id\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- Abort a multipart upload\n\n```js\nconst result = await store.abortMultipartUpload('object', 'upload-id');\nconsole.log(result);\n```\n\n### .calculatePostSignature(policy)\n\nget postObject params \n\nparameters:\n\n- policy {JSON or Object} policy must contain expiration and conditions.\n\nSuccess will return postObject Api params.\n\nObject:\n\n- OSSAccessKeyId {String}\n- Signature {String}\n- policy {Object} response info\n\n### .getObjectTagging(name[, options])\n\nObtains the tags of an object.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- tag {Object} the tag of object\n- res {Object} response info\n\n### .putObjectTagging(name, tag[, options])\n\nConfigures or updates the tags of an object.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n### .deleteObjectTagging(name[, options])\n\nDeletes the tag of a specified object.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n### .processObjectSave(sourceObject, targetObject, process[, targetBucket])\n\nPersistency indicates that images are asynchronously stored in the specified Bucket\n\nparameters:\n\n- sourceObject {String} source object name\n- targetObject {String} target object name\n- process {String} process string\n- [targetBucket] {String} target bucket\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n\n```js\nconst sourceObject = 'a.png'\nconst targetObject = 'b.png'\nconst process = 'image/watermark,text_aGVsbG8g5Zu+54mH5pyN5Yqh77yB,color_ff6a00'\n\nawait this.store.processObjectSave(sourceObject, targetObject, process);\n```\n\n## RTMP Operations\n\nAll operations function is [async], except `getRtmpUrl`.\n\nasync function format: `async functionName(...)`.\n\n### .putChannel(id, conf[, options])\n\nCreate a live channel.\n\nparameters:\n\n- id {String} the channel id\n- conf {Object} the channel config\n  - [Description] {String} the channel description\n  - [Status] {String} the channel status: 'enabled' or 'disabled'\n  - [Target] {Object}\n    - [Type] {String} the data type for the channel, only 'HLS' is supported now\n    - [FragDuration] {Number} duration of a 'ts' segment\n    - [FragCount] {Number} the number of 'ts' segments in a 'm3u8'\n    - [PlaylistName] {String} the 'm3u8' name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- publishUrls {Array} the publish urls\n- playUrls {Array} the play urls\n- res {Object} response info\n\nexample:\n\n- Create a live channel\n\n```js\nconst cid = 'my-channel';\nconst conf = {\n  Description: 'this is channel 1',\n  Status: 'enabled',\n  Target: {\n    Type: 'HLS',\n    FragDuration: '10',\n    FragCount: '5',\n    PlaylistName: 'playlist.m3u8'\n  }\n};\n\nconst r = await this.store.putChannel(cid, conf);\nconsole.log(r);\n```\n\n### .getChannel(id[, options])\n\nGet live channel info.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- data {Object} channel info, same as conf in [.putChannel](#putchannelid-conf-options)\n- res {Object} response info\n\nexample:\n\n- Get live channel info\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannel(cid);\nconsole.log(r);\n```\n\n### .deleteChannel(id[, options])\n\nDelete a live channel.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response infomation.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Delete a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.deleteChannel(cid);\nconsole.log(r);\n```\n\n### .putChannelStatus(id, status[, options])\n\nChange the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- status {String} the status: 'enabled' or 'disabled'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Disable a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.putChannelStatus(cid, 'disabled');\nconsole.log(r);\n```\n\n### .getChannelStatus(id[, options])\n\nGet the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel status information.\n\nobject:\n\n- data {Object}\n  - Status {String} the channel status: 'Live' or 'Idle'\n  - [ConnectedTime] {String} the connected time of rtmp pushing\n  - [RemoteAddr] {String} the remote addr of rtmp pushing\n  - [Video] {Object} the video parameters (Width/Height/FrameRate/Bandwidth/Codec)\n  - [Audio] {Object} the audio parameters (Bandwidth/SampleRate/Codec)\n- res {Object} response info\n\nexample:\n\n- Get a live channel status\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelStatus(cid);\nconsole.log(r);\n\n// { Status: 'Live',\n//   ConnectedTime: '2016-04-12T11:51:03.000Z',\n//   RemoteAddr: '42.120.74.98:53931',\n//   Video:\n//   { Width: '672',\n//     Height: '378',\n//     FrameRate: '29',\n//     Bandwidth: '60951',\n//     Codec: 'H264' },\n//   Audio: { Bandwidth: '5959', SampleRate: '22050', Codec: 'AAC' }\n// }\n```\n\n### .listChannels(query[, options])\n\nList channels.\n\nparameters:\n\n- query {Object} parameters for list\n  - prefix {String}: the channel id prefix (returns channels with this prefix)\n  - marker {String}: the channle id marker (returns channels after this id)\n  - max-keys {Number}: max number of channels to return\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel list.\n\nobject:\n\n- channels {Array} the channels, each in the structure:\n  - Name {String} the channel id\n  - Description {String} the channel description\n  - Status {String} the channel status\n  - LastModified {String} the last modification time of the channel\n  - PublishUrls {Array} the publish urls for the channel\n  - PlayUrls {Array} the play urls for the channel\n- nextMarker: result.data.NextMarker || null,\n- isTruncated: result.data.IsTruncated === 'true'\n- res {Object} response info\n\nexample:\n\n- List live channels\n\n```js\nconst r = await this.store.listChannels({\n  prefix: 'my-channel',\n  'max-keys': 3\n});\nconsole.log(r);\n```\n\n### .getChannelHistory(id[, options])\n\nGet the live channel history.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the history information.\n\nobject:\n\n- records {Object} the pushing records, each in the structure:\n  - StartTime {String} the start time\n  - EndTime {String} the end time\n  - RemoteAddr {String} the remote addr\n- res {Object} response info\n\nexample:\n\n- Get the live channel history\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelHistory(cid);\nconsole.log(r);\n```\n\n### .createVod(id, name, time[, options])\n\nCreate a VOD playlist for the channel.\n\nparameters:\n\n- id {String} the channel id\n- name {String} the playlist name\n- time {Object} the duration time\n  - startTime {Number} the start time in epoch seconds\n  - endTime {Number} the end time in epoch seconds\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Create a vod playlist of a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.createVod(cid, 're-play', {\n  startTime: 1460464870,\n  endTime: 1460465877\n});\nconsole.log(r);\n```\n\n### .getRtmpUrl(channelId[, options])\n\nGet signatured rtmp url for publishing.\n\nparameters:\n\n- channelId {String} the channel id\n- [options] {Object} optional parameters\n  - [expires] {Number} the expire time in seconds of the url\n  - [params] {Object} the additional paramters for url, e.g.: {playlistName: 'play.m3u8'}\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the rtmp url.\n\nexample:\n\n- Get a rtmp url.\n\n```js\nconst cid = 'my-channel';\n\nconst url = this.store.getRtmpUrl(this.cid, {\n  params: {\n    playlistName: 'play.m3u8'\n  },\n  expires: 3600\n});\nconsole.log(url);\n// rtmp://ossliveshow.oss-cn-hangzhou.aliyuncs.com/live/tl-channel?OSSAccessKeyId=T0cqQWBk2ThfRS6m&Expires=1460466188&Signature=%2BnzTtpyxUWDuQn924jdS6b51vT8%3D\n```\n\n## Create A Image Service Instance\n\nEach Image Service instance required `accessKeyId`, `accessKeySecret`, `bucket` and `imageHost`.\n\n### oss.ImageClient(options)\n\nCreate a Image service instance.\n\noptions:\n- imageHost {String} your image service domain that binding to a OSS bucket\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- bucket {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nconst OSS = require('ali-oss');\n\nconst imgClient = OSS.ImageClient({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'my_image_bucket'\n  imageHost: 'thumbnail.myimageservice.com'\n});\n```\n\n## Image Operations\n\nAll operations function is [async], except `imgClient.signatureUrl`.\n\nasync function format: `async functionName(...)`.\n\n### imgClient.get(name, file[, options])\n\nGet an image from the image channel.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the image\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image with a style and store it to the local file\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', filepath);\n```\n\n_ Store image to a writestream\n\n```js\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', somestream);\n```\n\n- Get an image content buffer\n\n```js\nconst result = await imgClient.get('ossdemo/demo.jpg@200w_200h');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a not exists object or a not image object\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/not-exists-demo.jpg@200w_200h', filepath);\n// will throw NoSuchKeyError\n```\n\n### imgClient.getStream(name[, options])\n\nGet an image read stream.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image object stream\n\n```js\nconst result = await imgClient.getStream('ossdemo/demo.jpg@200w_200h');\nresult.stream.pipe(fs.createWriteStream('some demo.jpg'));\n```\n\n### imgClient.getExif(name[, options])\n\nGet a image exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nIf object don't have exif, will throw 400 BadRequest.\n\nexample:\n\n```js\nconst result = await imgClient.getExif('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n### imgClient.getInfo(name[, options])\n\nGet a image info and exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nexample:\n\n```js\nconst result = await imgClient.getInfo('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     Format: \"jpg\",\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n\n### imgClient.putStyle(name, style[, options])\n// TODO\n\n### imgClient.getStyle(name[, options])\n\nGet a style by name from the image channel.\n\nparameters:\n- name {String} image style name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} styles object\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.getStyle('400');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"234\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:58:20 GMT\"\n//     },\n//     size: 234,\n//     aborted: false,\n//     rt: 398,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }\n// }\n```\n\n### imgClient.listStyle([options])\n\nGet all styles from the image channel.\n\nparameters:\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Array} styles array, a style object:\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.listStyle();\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"913\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:47:32 GMT\"\n//     },\n//     size: 913,\n//     aborted: false,\n//     rt: 1911,\n//     keepAliveSocket: false\n//   },\n//   data: [{\n//     Name: \"200-200\",\n//     Content: \"0e_200w_200h_0c_0i_0o_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:28:08 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:28:08 GMT\"\n//   }, {\n//     Name: \"800\",\n//     Content: \"800w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:29:15 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:29:15 GMT\"\n//   }, {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }, {\n//     Name: \"600\",\n//     Content: \"600w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:35:02 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:35:02 GMT\"\n//   }]\n// }\n```\n\n### imgClient.deleteStyle(name[, options])\n// TODO\n\n### imgClient.signatureUrl(name)\n\nCreate a signature url for directly download.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return full signature url.\n\nexample:\n\n```js\nconst url = imgClient.signatureUrl('\n');\n// http://thumbnail.myimageservice.com/demo.jpg@200w_200h?OSSAccessKeyId=uZxyLARzYZtGwHKY&Expires=1427803849&Signature=JSPRe06%2FjQpQSj5zlx2ld1V%2B35I%3D\n```\n\n## Cluster Mode\n\nCluster mode now only support object operations.\n\n```js\nconst Cluster = require('ali-oss').ClusterClient;\n\nconst client = Cluster({\n  cluster: [{\n    host: 'host1',\n    accessKeyId: 'id1',\n    accessKeySecret: 'secret1'\n  }, {\n    host: 'host2',\n    accessKeyId: 'id2',\n    accessKeySecret: 'secret2'\n  }],\n  schedule: 'masterSlave', //default is `roundRobin`\n});\n\n// listen error event to logging error\nclient.on('error', function(err) {\n  console.error(err.stack);\n});\n\n// client init ready\nclient.ready(function() {\n  console.log('cluster client init ready, go ahead!');\n});\n```\n\n### Get Methods\n\nWill choose an alive client by schedule(`masterSlave` or `roundRobin`).\n\n- `client.get()`\n- `client.head()`\n- `client.getStream()`\n- `client.list()`\n- `client.signatureUrl()`\n- `client.chooseAvailable()` - choose an available client by schedule.\n- `client.getACL()`\n\n### Put Methods\n\nWill put to all clients.\n\n- `client.put()`\n- `client.putStream()`\n- `client.delete()`\n- `client.deleteMulti()`\n- `client.copy()`\n- `client.putMeta()`\n- `client.putACL()`\n- `client.restore()`\n\n## Known Errors\n\nEach error return by OSS server will contains these properties:\n\n- name {String} error name\n- message {String} error message\n- requestId {String} uuid for this request, if you meet some unhandled problem,\n    you can send this request id to OSS engineer to find out what's happend.\n- hostId {String} OSS cluster name for this request\n\nThe following table lists the OSS error codes:\n\n[More code info](https://help.aliyun.com/knowledge_detail/32005.html)\n\nname | code | status | message | message in Chinese\n---  | ---  | --- | ---     | ---\nAccessDeniedError | AccessDenied | 403 | Access Denied | 拒绝访问\nBucketAlreadyExistsError | BucketAlreadyExists | 409 | Bucket already exists | Bucket 已经存在\nBucketNotEmptyError | BucketNotEmpty | 409 | Bucket is not empty | Bucket 不为空\nRestoreAlreadyInProgressError | RestoreAlreadyInProgress | 409 | The restore operation is in progress. | restore 操作正在进行中\nOperationNotSupportedError | OperationNotSupported | 400 | The operation is not supported for this resource | 该资源暂不支持restore操作\nEntityTooLargeError | EntityTooLarge | 400 | Entity too large | 实体过大\nEntityTooSmallError | EntityTooSmall | 400 | Entity too small | 实体过小\nFileGroupTooLargeError | FileGroupTooLarge | 400 | File group too large | 文件组过大\nInvalidLinkNameError | InvalidLinkName | 400 | Link name can't be the same as the object name | Object Link 与指向的 Object 同名\nLinkPartNotExistError | LinkPartNotExist | 400 | Can't link to not exists object | Object Link 中指向的 Object 不存在\nObjectLinkTooLargeError | ObjectLinkTooLarge | 400 | Too many links to this object | Object Link 中 Object 个数过多\nFieldItemTooLongError | FieldItemTooLong | 400 | Post form fields items too large | Post 请求中表单域过大\nFilePartInterityError | FilePartInterity | 400 | File part has changed | 文件 Part 已改变\nFilePartNotExistError | FilePartNotExist | 400 | File part not exists | 文件 Part 不存在\nFilePartStaleError | FilePartStale| 400 | File part stale | 文件 Part 过时\nIncorrectNumberOfFilesInPOSTRequestError | IncorrectNumberOfFilesInPOSTRequest | 400 | Post request contains invalid number of files | Post 请求中文件个数非法\nInvalidArgumentError | InvalidArgument | 400 | Invalid format argument | 参数格式错误\nInvalidAccessKeyIdError | InvalidAccessKeyId | 400 | Access key id not exists | Access Key ID 不存在\nInvalidBucketNameError | InvalidBucketName | 400 | Invalid bucket name | 无效的 Bucket 名字\nInvalidDigestError | InvalidDigest | 400 | Invalid digest | 无效的摘要\nInvalidEncryptionAlgorithmError | InvalidEncryptionAlgorithm | 400 | Invalid encryption algorithm | 指定的熵编码加密算法错误\nInvalidObjectNameError | InvalidObjectName | 400 | Invalid object name | 无效的 Object 名字\nInvalidPartError | InvalidPart | 400 | Invalid part | 无效的 Part\nInvalidPartOrderError | InvalidPartOrder | 400 | Invalid part order | 无效的 part 顺序\nInvalidPolicyDocumentError | InvalidPolicyDocument | 400 | Invalid policy document | 无效的 Policy 文档\nInvalidTargetBucketForLoggingError | InvalidTargetBucketForLogging | 400 | Invalid bucket on logging operation | Logging 操作中有无效的目标 bucket\nInternalError | Internal | 500 | OSS server internal error | OSS 内部发生错误\nMalformedXMLError | MalformedXML | 400 | Malformed XML format | XML 格式非法\nMalformedPOSTRequestError | MalformedPOSTRequest | 400 | Invalid post body format | Post 请求的 body 格式非法\nMaxPOSTPreDataLengthExceededError | MaxPOSTPreDataLengthExceeded | 400 | Post extra data too large | Post 请求上传文件内容之外的 body 过大\nMethodNotAllowedError | MethodNotAllowed | 405 | Not allowed method | 不支持的方法\nMissingArgumentError | MissingArgument | 411 | Missing argument | 缺少参数\nMissingContentLengthError | MissingContentLength | 411 | Missing `Content-Length` header | 缺少内容长度\nNoSuchBucketError | NoSuchBucket | 404 | Bucket not exists | Bucket 不存在\nNoSuchKeyError | NoSuchKey | 404 | Object not exists | 文件不存在\nNoSuchUploadError | NoSuchUpload | 404 | Multipart upload id not exists | Multipart Upload ID 不存在\nNotImplementedError | NotImplemented | 501 | Not implemented | 无法处理的方法\nPreconditionFailedError | PreconditionFailed | 412 | Pre condition failed | 预处理错误\nRequestTimeTooSkewedError | RequestTimeTooSkewed | 403 | Request time exceeds 15 minutes to server time | 发起请求的时间和服务器时间超出 15 分钟\nRequestTimeoutError | RequestTimeout | 400 | Request timeout | 请求超时\nRequestIsNotMultiPartContentError | RequestIsNotMultiPartContent | 400 | Invalid post content-type | Post 请求 content-type 非法\nSignatureDoesNotMatchError | SignatureDoesNotMatch | 403 | Invalid signature | 签名错误\nTooManyBucketsError | TooManyBuckets | 400 | Too many buckets on this user | 用户的 Bucket 数目超过限制\nRequestError | RequestError | -1 | network error | 网络出现中断或异常\nConnectionTimeoutError | ConnectionTimeoutError | -2 | request connect timeout | 请求连接超时\nSecurityTokenExpiredError | SecurityTokenExpired | 403 | sts Security Token Expired | sts Security Token 超时失效\n\n[generator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n[oss-sts]: https://help.aliyun.com/document_detail/oss/practice/ram_guide.html\n[browser-sample]: https://github.com/rockuw/oss-in-browser\n[oss-multipart]: https://help.aliyun.com/document_detail/oss/api-reference/multipart-upload/InitiateMultipartUpload.html\n[disabled-browser-headers]: https://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n",
      "readmeFilename": "README.md",
      "_id": "ali-oss@7.0.0-test.1",
      "_nodeVersion": "10.21.0",
      "_npmVersion": "6.14.11",
      "dist": {
        "integrity": "sha512-gqcke5DToHeYeHEHSxKqWWSOsKvnhhNQsgnYD07xOKEOsC2aDIa4VH0Z2s7GH624/SiGfCsnVhaEPrUeOKoqoQ==",
        "shasum": "ac4df59fbce09145d63de674db2d717526aab574",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-7.0.0-test.1.tgz",
        "fileCount": 761,
        "unpackedSize": 2618535,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgPJi3CRA9TVsSAnZWagAAxeoP/iccHNmKgRm6FiPsbdqw\nYFQWGur7WcX6OlpqFhO68CJJdYR0QuGkiUj3XB1Y3V+69GhRapUF9lT82E2L\npisi6pGqUdwFapmLgVDN8k9iSyJ1TGejIfjaus0j7snv7gOQeH7wZszq+76R\nlvtGp+PL1630nRGvlBsFa1GHYlJK/ZrBjqRQ+tejv008y8f/zDXfGMQBqQUS\n86vPo26RuT5qhjHqTw110tmA/RzpgX5lrW4T4Sv5l/26yTaBM8yr26FjZ8Ve\nA06DF8mtwaHcYJ89mEuVztFFAgmIo9J1ynGwE7AoaHQJEZM4wPJXhDxm/jBH\nZeToxJDglzKVSfyvnU7aZQABT96UFxiFaJNEFnhAb68WjgbvNH7k+KDJhFXI\n3uw3rSJqZSdH65MkBKQWBdY/RbIn0WZsWv+Zd4fehDFpuMqdWXk8cSex7T3C\nWYWRQuUU99EXYkK/hzrab+Ned4kLY7dTvcyxkB1pUAh8fJ/0cBWRgVKxFeSp\nY4lwbDOoZ/YydVVEx3jNSbl7yMBZrJ7piZGveVNUNpqkiYMaLPNML8j0uS0b\nmHHjU2q/lp5V1UFhODa4FHUy8avMwezRVtD3z/lL3K+CnDIgiGXCIYfuOeJx\nu5ZSelmKyyULTPhj3Ihq2m/9pnBKMQowHvgwF5PkqhmDJZP31AE1XJCEBod4\nYjF1\r\n=rk1/\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIB0P8fqNZqkdSU9Terd7jXOkyeAWa2ziX2Jj9UfjuR2kAiA8kGmKfJEdOFBe6rRCEIPU1rj+nw4Nz+VjL10R0sylqw=="
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_7.0.0-test.1_1614583991135_0.596215829695874"
      },
      "_hasShrinkwrap": false
    },
    "6.14.0": {
      "name": "ali-oss",
      "version": "6.14.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^16.5.2",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "immediate": "^3.3.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "1.454.0",
        "standard-version": "^8.0.1",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "47a04187d9b6ee8a17c82dc20e8f972cf20b53f1",
      "_id": "ali-oss@6.14.0",
      "_nodeVersion": "10.21.0",
      "_npmVersion": "6.14.11",
      "dist": {
        "integrity": "sha512-zzOfk9nPgVOpgpfyFIve/TU/v3znXO1DhVLSCPdq/DiMAC3CVrU3zb7LhPkYdDVvN2nO7jJaPbxqCMyK4UOCaQ==",
        "shasum": "e2369acd0954a7e0c9e9aa75e4a32457ad99244d",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.14.0.tgz",
        "fileCount": 209,
        "unpackedSize": 2303882,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgVEBuCRA9TVsSAnZWagAAzS4P/3CVD5z+yNzJomyOgKxP\nTEkZqlRfanlkbEdkz8dCHPKip2kRgJBpwErU7C42CLgyhS9VY2IMxHT+F6gs\nf3MNbL8uyAygQBD28vSdB4+T5l00BCJEVQ+/QyYECAW/QL3JLXVodYZ7YOc2\nufKhmBrbVrixMhqQXpLBjsWDHBRu6H0SG+CmysDzeu1bYwZ+TouLlSoMWEao\nKDF+zkC2GXjBlpeekf8e02FSHQvKCr2nsVMZuEPDDgKk0vOxSlQIB+pWbApP\n2yILEJNWw0cs8QmBG2/w/Uboz0EyEZIFt/HHpRhJVNYz6juGubeBWao9QM0B\nOHbvKDrXhNTnbLLzTYT0vSB8QNfWARusXHtw2/s43RgEbEFu+EO/3wdZz2yW\n0GSqVehb/1AjGuK9vz5sGdeTo1QrBdlUjzq4ukL/3ixL0xpNhsKlYfbdnFbZ\nFWqjBtO9ykC8R5M1NeckR5Ig7cMV8XGeIHBaX/j0Pci0rY0tm5XVUUBK0ck8\nsLQrHU/hVt0G3q5FsE3eQV424sFQj6UDr2WRxybber2pqh8RHtn9IgpBb33/\nh1bai4440k9laOo7TLlQbz75xK19XTcwCo7FgCYHeVrZXc2TnnLK+XmnPDTg\nOSIs+W+u7cmKyM3NY8GywQ0mSaq2JhB3N74aOol0hN3xp+44VrWloeeLFD9E\nxnDR\r\n=jPrH\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD0jSPJzxgZ/NG4XdJVK/iaYeu2uN3n77xN8L/TLvPXuwIhAIIsbyJPwTJVjTEBtaRf6XHC7jW1aQGuY+J+WYyetkCr"
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.14.0_1616134253849_0.8782059793679104"
      },
      "_hasShrinkwrap": false
    },
    "6.14.1": {
      "name": "ali-oss",
      "version": "6.14.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^16.5.2",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "immediate": "^3.3.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "1.454.0",
        "standard-version": "^8.0.1",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "f1abad14e94caf9bf11119dca4dcc8d38a1379c3",
      "_id": "ali-oss@6.14.1",
      "_nodeVersion": "10.21.0",
      "_npmVersion": "6.14.11",
      "dist": {
        "integrity": "sha512-ItyC2iSncn0PKvgMpGcNOm1bZ722yQnwWFv6xoT9+S930yCyBBbwfFGW1Ehb6up/iYrcbQAVkDnHeSURSSWIDA==",
        "shasum": "4c9c91486012edf74b5efce06b7825c75c8fd460",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.14.1.tgz",
        "fileCount": 209,
        "unpackedSize": 2305231,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgWbRQCRA9TVsSAnZWagAABwEQAIkjSbw8zq581Onm7tBx\nin+aZDHPBZ9EJany9xyTRZKRqo8xg1GQAYkNl7sl2hEX2yO3BBa+eck3EVjq\nILOG9VFn6e/fbZhyymUrzJje751mnkV7GIXex12GRw7aoKWN2pmXQavWy5vD\nCLWuiv0BtRi93+2riF+hst96INf4hBl1k+RzKv5ogf996YPaOxmavgHN5Zfo\n7SdAQzpZPr3yZ7CtYetFSQoHFs+3/FZXoewAns8NU+rSDzY1Lu36Eiq5JeKP\ngH/nZWN+AeEU92ZZ1kUsC0e2nUttkL4dZqJKVGODFAXeRDXPiKcopiLXYr8w\nFrjJnXKGLfelBJgvJi76BnXJA6ksypF00UJeepRg9NAuVM2SqzRaaRTLcui4\naqvqbFbd8zBkDdj2cWBqJtCxTpOKHFhild1e0nPpc1Wt95tw7aUcSJ9Hx64j\nf5HCQsgJRyiSsVTKDSsbyXo7nBZ1mnFiCIZ1DB+5qjeoKRC0VNS++fNO4nUl\noL5jJJkiNZ1JfNElHCWD0D4ZMoTU2rR1/EHpNY9xBaLZY5iRRBLEJiq+SxBj\nA8mh3e193+IuX89J/9wrX1qbAWUOsCzdwrZALLlKgQ7HVzfzQzLhH6w6ty3U\nYa6Rn7/XKsOOWlX4KfemyYmmk3J2h0rn5WasBMCkvB+/6Zpa0ZBhsIwqRGPW\nK+Ov\r\n=8aSk\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDlCee+X3sLdAdwBXoC6S6akyogs9ObliHY+BwWQrQn+AiBjbvJZrkSLXZeg6lHHlgtbMFG0LpSo4l6Votm/jhyHyw=="
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.14.1_1616491599684_0.37446538659662876"
      },
      "_hasShrinkwrap": false
    },
    "6.15.0": {
      "name": "ali-oss",
      "version": "6.15.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^16.5.2",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "immediate": "^3.3.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "1.454.0",
        "standard-version": "^8.0.1",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "6c4392affc20871c60176a5e7a4ac69b52c9b20b",
      "_id": "ali-oss@6.15.0",
      "_nodeVersion": "10.21.0",
      "_npmVersion": "6.14.11",
      "dist": {
        "integrity": "sha512-vMb0+IZJBIGAoAFFFB3zF//Ll7vdVOG5u51kICDr86d01JEJnLWBmvMI3mg7mrUyE7kMTPEkxxA6TLWelBoAzQ==",
        "shasum": "154a2719f0a1e2e5a30a1a0f580fb99281911fa3",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.15.0.tgz",
        "fileCount": 209,
        "unpackedSize": 2307010,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgXUYzCRA9TVsSAnZWagAA/9MP/3vxNtLqrj3125nLtjoo\nI1/6I3DWYdGFAfpcPxbPTe15onU5Lr9KwfX1aYWpqLjyqp2R8QSklOwSiHA8\n6yo7b1U8t2EZI9JeeYEKgaU5FQ6dKIto2VWXyu1A1uEIYpDlkifaNgpZQMar\nnAdbmLnEOK7hwUQrmYOO26vQVLebNeyGOi2YKRjSZVK+tCjj2NPn94pZxvIf\nfj7hED+t5hR7FcdW0ZXxdFbBA+gFsyz/byNclQ5Wg3LoGpaAsfB238qFdqeH\nS09DlfnIEhuts7aXsTKUAEIUYgeOnge7tPcTa7XcBqdzmeAQHeldJW3jMWzB\nJwewQF8+rKM5G/ltsRK6MhpGY4+wiYrKviX2mFK71W7hw78qBX9TqPeUUOpl\nf3x8+X4K6RP6e4qhKu6eKDd1qeTUxDuC6v5OglN7ojVP1EHrUNScONkCSmaE\nPbxoxH1BvMGsAHNVJvXBJ9Q2CMV9PLPnX5SAB8y2qdqJVfSyYvVvBWURkMlw\nipGKawC5fiCCHl4bavvgIqQ8DMkCviBSUkuRN2BCYtHLsQ4gLdlw83WFr6zD\nXx2a5dYr3TzVfuwVgl8QffeaEPv8JZSUAXe4fJfRFvpapZKSxH+w2HS80i7F\nFmArBpyBPwf8LNBCUc+1xdqQYjKIPfiRW10c9u1KOgmAeQpQVofs2DeWwzRN\n8FtU\r\n=RTgB\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQC+qQUgMN2Xb7N5HeFKppHqfJYfONEmQUlnKxgZKwERuAIgC7EBu9h9HhfWlo4Rzhi6iSBUL6/80dB4R8z1iT4aR5A="
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.15.0_1616725554960_0.996927679509779"
      },
      "_hasShrinkwrap": false
    },
    "6.15.1": {
      "name": "ali-oss",
      "version": "6.15.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^16.5.2",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "immediate": "^3.3.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.520.0",
        "standard-version": "^8.0.1",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "e042cd96e2e9e358d65ce143374e3b08958577af",
      "_id": "ali-oss@6.15.1",
      "_nodeVersion": "10.21.0",
      "_npmVersion": "6.14.11",
      "dist": {
        "integrity": "sha512-oviwsm4039aOKMPF8GSyRitpBTcNzEfEd1G0EOO9HT4NoTIfBAoAS7A668c+CPc2tt7+4W9vV9zySfQTtTUw2Q==",
        "shasum": "02f6d0f1d791ed5f78bd8220f5fabfafa9914159",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.15.1.tgz",
        "fileCount": 209,
        "unpackedSize": 1712827,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgZYGbCRA9TVsSAnZWagAA9BgQAICM+lNFlA5OA7CFCY4c\ndcNZ9IkHP+ZU6BLcqMi3V4pfK4w2WRD9vuAhnMJ9hMf+7u7jUKubOkshTlko\nVyt+0WANjBg5uWz1Kh5udMF4rdg3vzicp0WV9oqhgtxQJvX5OstaACwT3Yje\nwGGFVi2qn9np9M2TEXlDA7XHbTCrIAievSK8+bN/B6m/ONE67msQW6WLFQFt\nQaJ6PumZA1q+eKdd0sazfHNA7ZncTcoto7ycc9zse9GQiPBkal5qzu4P4QVs\nrQLN8uTp5gC88UII5b+JYkM1NrVyYaRxZ68P8sb7kmaNkfEW2HHH5W7hKhzn\n6vn/9V3+kqhN9h+4m6+bvQTNgQCghPEn3nOHgHeAqjkb9P4f94oxxC6DCWha\n0B/34bgo9fj/bXpn8RAM8yuXcbeYyuEoGRLIg1MAiVIctVzC/Zjd+eg+GXCy\nai7Qo7DLtI7e3963cbhIHK1eBPvIDTz9MW498uwdE1/o3AA/uEdTn6heefwL\n0HNkvwTZ3zKfk2MwZzTxSm6R800TnFKvsTrzfAFOzSbrwoNheKXRNGTB7MzY\nRPzdT98RSVwxKhdNfEHzcOik+tAbc8XCh/l+2TcsHRRjAYFn1DoInGCH+XZH\nfzUEjtZt/9jYc9pIhEkDXpRMFjoq4au36sPTf4wDaDMgrayd1TofcccVU4mU\nGO2z\r\n=Ly7a\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC7JHy2co5j72QqwhjGiuN2WP24IZ7pH1aSAVmxD3qnXAIhAIyr7m5aCMn60xepLQZRewVHMRPHegmDQUveXnM68JDT"
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.15.1_1617265051122_0.21714493419450376"
      },
      "_hasShrinkwrap": false,
      "deprecated": "not build success"
    },
    "6.15.2": {
      "name": "ali-oss",
      "version": "6.15.2",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "mocha -t 60000 -r thunk-mocha -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^16.5.2",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "immediate": "^3.3.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.520.0",
        "standard-version": "^8.0.1",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "30fc08e020bd935a8b101358cb2e47f4ccfed393",
      "_id": "ali-oss@6.15.2",
      "_nodeVersion": "10.21.0",
      "_npmVersion": "6.14.11",
      "dist": {
        "integrity": "sha512-sLB3a2Q6BvD4fNfHO4a0uuVn+5dlFaWUE/tExFk8bNMTevNGb4hH419kyvTSvKsO8FGLIhyezdi2NVhLHwhPqA==",
        "shasum": "276c3bdff5f89460ac9feac8d1d2a0bc32a18d6c",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.15.2.tgz",
        "fileCount": 209,
        "unpackedSize": 2312627,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgZYSoCRA9TVsSAnZWagAAAWwP/Rg+QqfukN2hUEL1BaJo\nLAyKxhJCEFK5h7tUa7Ty02vi2psKmgtEsNMyhSR1GmlFCIRj4txSkeaWeSpj\nSwaKh4R+JN2R/fvk8OySNQd/NP1Iq8rqphfmKaHfpt7RfJa6JFFVwizb7Got\nkd4qgBfJxfXRangQmarU6//k+pDRCWtsEZLUTJBityWD3uyfTOEqnwBzqykT\nxPJef0Fzs4N6woa46UPmy7xWaUJg0JguSiSQhjWB5CIdktL8KST/3VVjDZJe\nDCDRpEjcgcW036xCagyYuAtmwECk9jRG0eFlnuc0jvdtv93I8fS7m28DjDUv\nx7lo84l5c8EU49xCXQlxrPdRSfy1oYvg9ppCc5sGWEkITXCAkLVk2tQ/26tY\nxfOuScZVcF/5lQetwmMjXnhdfw1oEizITbxhPtdKuy3/jiJ+MWcK3VoVPYPM\nxdmJjeLYKpnFCNOWoQHiM4UcCbVegh7Q+p+7okCD5iZwyukbymV0+Jf6R9rd\nKQ3cYBraAPjPWt4uz6dY5YkzYKMQSjHQdUb38YAajCfqAgEwnqGTioTVcgPv\nBjXHDmI7VuLTCWDNcgTvQY+8AjBTOOCZksreXREbuxvtEZJyZGZuL6I78Biq\ndj9aQ8iBUfseCwFnXl3eLT7N7batsGYkEP3y5T+p8Xd3Q8//3f2pXoZwTk77\nR+MJ\r\n=wIrN\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFh+WEsJ01xoRLMWTPDgJySfZ8Dk+nZ8ROq55BfJsTsGAiBPBn2I3RSjZIhWKid6QLjm3xnEAudjDdnNurkd7W1nUw=="
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.15.2_1617265832269_0.9993096384673883"
      },
      "_hasShrinkwrap": false
    },
    "6.15.2-parallel.1": {
      "name": "ali-oss",
      "version": "6.15.2-parallel.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "npm run tsc && mocha -t 60000 -r thunk-mocha -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "npm run tsc && nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^16.5.2",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "immediate": "^3.3.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "1.454.0",
        "standard-version": "^8.0.1",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "readme": "oss-js-sdk\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage][cov-image]][cov-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/ali-oss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/ali-oss\n[travis-image]: https://img.shields.io/travis/ali-sdk/ali-oss/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ali-sdk/ali-oss.svg?branch=master\n[cov-image]: http://codecov.io/github/ali-sdk/ali-oss/coverage.svg?branch=master\n[cov-url]: http://codecov.io/github/ali-sdk/ali-oss?branch=master\n[david-image]: https://img.shields.io/david/ali-sdk/ali-oss.svg?style=flat-square\n[david-url]: https://david-dm.org/ali-sdk/ali-oss\n\naliyun OSS(Object Storage Service) js client for Node and Browser env.\n\n`NOTE`： For SDK `5.X` document, please go to [README.md](https://github.com/ali-sdk/ali-oss/blob/5.x/README.md)\n\n## Install\n\n```bash\nnpm install ali-oss --save\n```\n\n## Compatibility\n\n### Node\nNode.js >= 8.0.0 required. You can use 4.x in Node.js < 8.\n\n### Browser\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n\n`Note`:\n- For Lower browsers you can refer to [PostObject](https://help.aliyun.com/document_detail/31988.html), if you want to see more practices ,please refer to [Web Post](https://help.aliyun.com/document_detail/31923.html)\n\n### QA\nYou can join DingDing Talk Group, [Group Link](https://qr.dingtalk.com/action/joingroup?code=v1,k1,inkSDqCxm7LilkaR/kknRVBDQ8PDA0Lj5hj4Cf9io3w=&_dt_no_comment=1&origin=11)\n\n<img src=\"task/dingding.jpg\" height=\"400\" title=\"dingding\" width=\"300\">\n\n## License\n\n[MIT](LICENSE)\n\n# OSS Usage\n\nOSS, Object Storage Service. Equal to well known Amazon [S3](http://aws.amazon.com/s3/).\n\nAll operation use es7 async/await to implement. All api is async function.\n\n## Summary\n\n- [Node Usage](#node-usage)\n- [Browser Usage](#browser-usage)\n- [Data Regions](#data-regions)\n- [Create Account](#create-account)\n- [Create A Bucket Instance](#create-a-bucket-instance)\n  - [oss(options)](#ossoptions)\n- [Bucket Operations](#bucket-operations)\n  - Base\n    - [.listBuckets(query[, options])](#listbucketsquery-options)\n    - [.putBucket(name[, options])](#putbucketname-options)\n    - [.useBucket(name)](#usebucketname)\n    - [.deleteBucket(name[, options])](#deletebucketname-options)\n    - [.getBucketInfo(name)](#getbucketinfoname)\n    - [.getBucketLocation(name)](#getbucketlocationname)\n  - ACL\n    - [.putBucketACL(name, acl[, options])](#putbucketaclname-acl-options)\n    - [.getBucketACL(name[, options])](#getbucketaclname-options)\n  - Logging\n    - [.putBucketLogging(name, prefix[, options])](#putbucketloggingname-prefix-options)\n    - [.getBucketLogging(name[, options])](#getbucketloggingname-options)\n    - [.deleteBucketLogging(name[, options])](#deletebucketloggingname-options)\n  - Website\n    - [.putBucketWebsite(name, config[, options])](#putbucketwebsitename-config-options)\n    - [.getBucketWebsite(name[, options])](#getbucketwebsitename-options)\n    - [.deleteBucketWebsite(name, region[, options])](#deletebucketwebsitename-options)\n  - Referer\n    - [.putBucketReferer(name, allowEmpty, referers[, options])](#putbucketreferername-allowempty-referers-options)\n    - [.getBucketReferer(name[, options])](#getbucketreferername-options)\n    - [.deleteBucketReferer(name[, options])](#deletebucketreferername-options)\n  - Lifecycle\n    - [.putBucketLifecycle(name, rules[, options])](#putbucketlifecyclename-rules-options)\n    - [.getBucketLifecycle(name[, options])](#getbucketlifecyclename-options)\n    - [.deleteBucketLifecycle(name[, options])](#deletebucketlifecyclename-options)\n  - CORS\n    - [.putBucketCORS(name, rules[, options])](#putbucketcorsname-rules-options)\n    - [.getBucketCORS(name[, options])](#getbucketcorsname-options)\n    - [.deleteBucketCORS(name[, options])](#deletebucketcorsname-options)\n  - RequestPayment\n    - [.getBucketRequestPayment(bucketName[, options])](#getbucketrequestpaymentbucketname-options)\n    - [.putBucketRequestPayment(bucketName, payer[, options])](#putBucketRequestpaymentbucketname-payer-options)\n  - BucketEncryption\n    - [.putBucketEncryption(name[, rules])](#putbucketencryptionname-rules)\n    - [.getBucketEncryption(name)](#getbucketencryptionname)\n    - [.deleteBucketEncryption(name)](#deletebucketencryptionname)\n  - tagging\n    - [.putBucketTags(name, tag[, options])](#putBucketTagsname-tag-options)\n    - [.getBucketTags(name, [, options])](#getBucketTagsname-options)\n    - [.deleteBucketTags(name, [, options])](#deleteBucketTagsname-options)\n  - policy\n    - [.putBucketPolicy(name, policy[, options])](#putBucketPolicyname-policy-options)\n    - [.getBucketPolicy(name, [, options])](#getBucketPolicyname-options)\n    - [.deleteBucketPolicy(name, [, options])](#deleteBucketPolicyname-options)\n  - versioning\n    - [.getBucketVersioning(name, [, options])](#getBucketVersioningname-options)\n    - [.putBucketVersioning(name, status[, options])](#putBucketVersioningname-status-options)\n  - inventory\n      - [.getBucketInventory(name, inventoryId[, options])](#getBucketInventoryname-inventoryid-options)\n      - [.putBucketInventory(name, inventory[, options])](#putBucketInventoryname-inventory-options)\n      - [.deleteBucketInventory(name, inventoryId[, options])](#deleteBucketInventoryname-inventoryid-options)\n      - [.listBucketInventory(name, [, options])](#listBucketInventoryname-options)\n  - worm\n    - [.abortBucketWorm(name[, options])](#abortBucketWormname-options)\n    - [.completeBucketWorm(name, wormId[, options])](#completeBucketWormname-wormId-options)\n    - [.extendBucketWorm(name, wormId, days[, options])](#extendBucketWormname-wormId-days-options)\n    - [.getBucketWorm(name[, options])](#getBucketWormname-options)\n    - [.initiateBucketWorm(name, days[, options])](#initiateBucketWormname-days-options)\n\n- [Object Operations](#object-operations)\n  - [.list(query[, options])](#listquery-options)\n  - [.listV2(query[, options])](#listV2query-options)\n  - [.getBucketVersions(query[, options])](#getBucketVersionsquery-options)\n  - [.put(name, file[, options])](#putname-file-options)\n  - [.putStream(name, stream[, options])](#putstreamname-stream-options)\n  - [.append(name, file[, options])](#appendname-file-options)\n  - [.getObjectUrl(name[, baseUrl])](#getobjecturlname-baseurl)\n  - [.generateObjectUrl(name[, baseUrl])](#generateobjecturlname-baseurl)\n  - [.head(name[, options])](#headname-options)\n  - [.getObjectMeta(name[, options])](#getobjectmetaname-options)\n  - [.get(name[, file, options])](#getname-file-options)\n  - [.getStream(name[, options])](#getstreamname-options)\n  - [.delete(name[, options])](#deletename-options)\n  - [.copy(name, sourceName[, sourceBucket, options])](#copyname-sourcename-sourcebucket-options)\n  - [.putMeta(name, meta[, options])](#putmetaname-meta-options)\n  - [.deleteMulti(names[, options])](#deletemultinames-options)\n  - [.signatureUrl(name[, options])](#signatureurlname-options)\n  - [.putACL(name, acl[, options])](#putaclname-acl-options)\n  - [.getACL(name[, options])](#getaclname-options)\n  - [.restore(name[, options])](#restorename-options)\n  - [.putSymlink(name, targetName[, options])](#putsymlinkname-targetname-options)\n  - [.getSymlink(name[, options])](#getsymlinkname-options)\n  - [.initMultipartUpload(name[, options])](#initmultipartuploadname-options)\n  - [.uploadPart(name, uploadId, partNo, file, start, end[, options])](#uploadpartname-uploadid-partno-file-start-end-options)\n  - [.uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])](#uploadpartcopyname-uploadid-partno-range-sourcedata-options)\n  - [.completeMultipartUpload(name, uploadId, parts[, options])](#completemultipartuploadname-uploadid-parts-options)\n  - [.multipartUpload(name, file[, options])](#multipartuploadname-file-options)\n  - [.multipartUploadCopy(name, sourceData[, options])](#multipartuploadcopyname-sourcedata-options)\n  - [.listParts(name, uploadId[, query, options])](#listpartsname-uploadid-query-options)\n  - [.listUploads(query[, options])](#listuploadsquery-options)\n  - [.abortMultipartUpload(name, uploadId[, options])](#abortmultipartuploadname-uploadid-options)\n  - [.calculatePostSignature(policy)](#calculatePostSignaturepolicy)\n  - [.getObjectTagging(name, [, options])](#getObjectTaggingname-options)\n  - [.putObjectTagging(name, tag[, options])](#putObjectTaggingname-tag-options)\n  - [.deleteObjectTagging(name, [, options])](#deleteObjectTaggingname-options)\n- [RTMP Operations](#rtmp-operations)\n  - [.putChannel(id, conf[, options])](#putchannelid-conf-options)\n  - [.getChannel(id[, options])](#getchannelid-options)\n  - [.deleteChannel(id[, options])](#deletechannelid-options)\n  - [.putChannelStatus(id, status[, options])](#putchannelstatusid-status-options)\n  - [.getChannelStatus(id[, options])](#getchannelstatusid-options)\n  - [.listChannels(query[, options])](#listchannelsquery-options)\n  - [.getChannelHistory(id[, options])](#getchannelhistoryid-options)\n  - [.createVod(id, name, time[, options])](#createvodid-name-time-options)\n  - [.getRtmpUrl(channelId[, options])](#getrtmpurlchannelid-options)\n- [Create A Image Service Instance](#create-a-image-service-instance)\n  - [oss.ImageClient(options)](#ossimageclientoptions)\n- [Image Operations](#image-operations)\n  - [imgClient.get(name, file[, options])](#imgclientgetname-file-options)\n  - [imgClient.getStream(name[, options])](#imgclientgetstreamname-options)\n  - [imgClient.getExif(name[, options])](#imgclientgetexifname-options)\n  - [imgClient.getInfo(name[, options])](#imgclientgetinfoname-options)\n  - [imgClient.putStyle(name, style[, options])](#imgclientputstylename-style-options)\n  - [imgClient.getStyle(name[, options])](#imgclientgetstylename-options)\n  - [imgClient.listStyle([options])](#imgclientliststyleoptions)\n  - [imgClient.deleteStyle(name[, options])](#imgclientdeletestylename-options)\n  - [imgClient.signatureUrl(name)](#imgclientsignatureurlname)\n- [Known Errors](#known-errors)\n\n## Node Usage\n\n### Compatibility\n- Node: >= 8.0.0\n\n### Basic usage\n1.install SDK using npm\n```\nnpm install ali-oss --save\n```\n2.for example:\n```js\nconst OSS = require('ali-oss');\nconst client = new OSS({\n  region: '<oss region>',\n  accessKeyId: '<Your accessKeyId>',\n  accessKeySecret: '<Your accessKeySecret>',\n  bucket: '<Your bucket name>'\n});\n```\n## Browser Usage\n\nYou can use most of the functionalities of `ali-oss` in browser with\nsome exceptions:\n\n- put object with streaming: no chunked encoding, we use multipart\n  upload instead\n- get object to local file: we cannot manipulate file system in\n  browser, we provide signed object url for downloading needs\n- bucket operations(listBuckets, putBucketLogging, etc) will fail: OSS\n  server currently do not support CORS requests for bucket operations\n  (will probably be fixed later)\n\n### Compatibility\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n    >Note: Because some browsers do not support promises, you need to introduce promise compatible libraries.<br>\n    For example: IE10 and IE11 need to introduce a promise-polyfill.\n\n### Setup\n\n#### Bucket setup\n\nAs browser-side javascript involves CORS operations. You need to setup\nyour bucket CORS rules to allow CORS operations:\n\n- set allowed origins to '\\*'\n- allowed methods to 'PUT, GET, POST, DELETE, HEAD'\n- set allowed headers to '\\*'\n- expose 'ETag' in expose headers\n\n#### STS setup\n\nAs we don't want to expose the accessKeyId/accessKeySecret in the\nbrowser, a [common practice][oss-sts] is to use STS to grant temporary\naccess.\n\n### Basic usage\n\nInclude the sdk lib in the `<script>` tag and you have `OSS` available\nfor creating client.\n\n```html\n // x.x.x The specific version number represented\n // we recommend introducing offline resources, because the usability of online resources depends on the stability of the cdn server.\n <!-- Introducing online resources -->\n <script src=\"http://gosspublic.alicdn.com/aliyun-oss-sdk-x.x.x.min.js\"></script>\n <!-- Introducing offline resources -->\n <script src=\"./aliyun-oss-sdk-x.x.x.min.js\"></script>\n\n<script type=\"text/javascript\">\n  const client = new OSS({\n    region: 'oss-cn-hangzhou',\n    accessKeyId: '<access-key-id>',\n    accessKeySecret: '<access-key-secret>',\n    bucket: '<bucket-name>',\n    stsToken: '<security-token>'\n  });\n\n  client.list().then((result) => {\n    console.log('objects: %j', result.objects);\n    return client.put('my-obj', new OSS.Buffer('hello world'));\n  }).then((result) => {\n    console.log('put result: %j', result);\n    return client.get('my-obj');\n  }).then((result) => {\n    console.log('get result: %j', result.content.toString());\n  });\n</script>\n```\nThe full sample can be found [here][browser-sample].\n\n### How to build\n\n```bash\nnpm run build-dist\n```\n\nAnd see the build artifacts under `dist/`.\n\n\n## Data Regions\n\n[OSS current data regions](https://help.aliyun.com/document_detail/oss/user_guide/endpoint_region.html).\n\nregion | country | city | endpoint | internal endpoint\n---  | ---     | ---  | --- | ---\noss-cn-hangzhou | China | HangZhou | oss-cn-hangzhou.aliyuncs.com | oss-cn-hangzhou-internal.aliyuncs.com\noss-cn-shanghai | China | ShangHai | oss-cn-shanghai.aliyuncs.com | oss-cn-shanghai-internal.aliyuncs.com\noss-cn-qingdao | China | QingDao | oss-cn-qingdao.aliyuncs.com | oss-cn-qingdao-internal.aliyuncs.com\noss-cn-beijing | China | BeiJing | oss-cn-beijing.aliyuncs.com | oss-cn-beijing-internal.aliyuncs.com\noss-cn-shenzhen | China | ShenZhen | oss-cn-shenzhen.aliyuncs.com | oss-cn-shenzhen-internal.aliyuncs.com\noss-cn-hongkong | China | HongKong | oss-cn-hongkong.aliyuncs.com | oss-cn-hongkong-internal.aliyuncs.com\noss-us-west-1 | US | Silicon Valley | oss-us-west-1.aliyuncs.com | oss-us-west-1-internal.aliyuncs.com\noss-ap-southeast-1 | Singapore | Singapore | oss-ap-southeast-1.aliyuncs.com | oss-ap-southeast-1-internal.aliyuncs.com\n\n## Create Account\n\nGo to [OSS website](http://www.aliyun.com/product/oss/?lang=en), create a new account for new user.\n\nAfter account created, you can create the OSS instance and get the `accessKeyId` and `accessKeySecret`.\n\n## Create A Bucket Instance\n\nEach OSS instance required `accessKeyId`, `accessKeySecret` and `bucket`.\n\n## oss(options)\n\nCreate a Bucket store instance.\n\noptions:\n\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- [stsToken] {String} used by temporary authorization, detail [see](https://www.alibabacloud.com/help/doc-detail/32077.htm)\n- [refreshSTSToken] {Function} used by auto set `stsToken`、`accessKeyId`、`accessKeySecret` when sts info expires. return value must be object contains `stsToken`、`accessKeyId`、`accessKeySecret`\n- [refreshSTSTokenInterval] {number} use time (ms) of refresh STSToken interval it should be \n  less than sts info expire interval, default is 300000ms(5min)\n  when sts info expires. return value must be object contains `stsToken`、`accessKeyId`、`accessKeySecret`\n- [bucket] {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [endpoint] {String} oss region domain. It takes priority over `region`. Set as extranet domain name, intranet domain name, accelerated domain name, etc. according to different needs. please see [endpoints](https://www.alibabacloud.com/help/doc-detail/31837.htm)\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`.\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`.\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [secure] {Boolean} instruct OSS client to use HTTPS (secure: true) or HTTP (secure: false) protocol.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`.\n- [cname] {Boolean}, default false, access oss with custom domain name. if true, you can fill `endpoint` field with your custom domain name,\n- [isRequestPay] {Boolean}, default false, whether request payer function of the bucket is open, if true, will send headers `'x-oss-request-payer': 'requester'` to oss server.\n  the details you can see [requestPay](https://help.aliyun.com/document_detail/91337.htm)\n- [useFetch] {Boolean}, default false, it just work in Browser, if true,it means upload object with \n`fetch` mode ,else `XMLHttpRequest`\n- [enableProxy] {Boolean}, Enable proxy request, default is false.\n- [proxy] {String | Object}, proxy agent uri or options, default is null.\n- [retryMax] {Number}, used by auto retry send request count when request error is net error or timeout.  **_NOTE:_**  Not support `put` with stream, `putStream`, `append` with stream because the stream can only be consumed once\n\nexample:\n\n1. basic usage\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\n```\n2. use accelerate endpoint\n- Global accelerate endpoint: oss-accelerate.aliyuncs.com\n- Accelerate endpoint of regions outside mainland China: oss-accelerate-overseas.aliyuncs.com\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  endpoint: 'oss-accelerate.aliyuncs.com',\n});\n```\n\n3. use custom domain\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  cname: true,\n  endpoint: 'your custome domain',\n});\n```\n\n4. use STS and refreshSTSToken\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your STS key',\n  accessKeySecret: 'your STS secret',\n  stsToken: 'your STS token',\n  refreshSTSToken: async () => {\n    const info = await fetch('you sts server');\n    return {\n      accessKeyId: info.accessKeyId,\n      accessKeySecret: info.accessKeySecret,\n      stsToken: info.stsToken\n    }\n  },\n  refreshSTSTokenInterval: 300000\n});\n```\n\n5. retry request with stream\n```js\nfor (let i = 0; i <= store.options.retryMax; i++) {\n  try {\n    const result = await store.putStream(\"<example-object>\", fs.createReadStream(\"<example-path>\"));\n    console.log(result);\n    break; // break if success\n  } catch (e) {\n    console.log(e);\n  }\n}\n```\n\n## Bucket Operations\n\n### .listBuckets(query[, options])\n\nList buckets in this account.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search buckets using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [max-keys] {String|Number} max buckets, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return buckets list on `buckets` properties.\n\n- buckets {Array<BucketMeta>} bucket meta info list\n  Each `BucketMeta` will contains blow properties:\n    - name {String} bucket name\n    - region {String} bucket store data region, e.g.: `oss-cn-hangzhou-a`\n    - creationDate {String} bucket create GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - storageClass {String} e.g.: `Standard`, `IA`, `Archive`\n- owner {Object} object owner, including `id` and `displayName`\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 buckets\n\n```js\nstore.listBuckets({\n  \"max-keys\": 10\n}).then((result) => {\n  console.log(result);\n});\n\n```\n\n### .putBucket(name[, options])\n\nCreate a new bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket exists and not belong to current account, will throw BucketAlreadyExistsError.\n  If bucket not exists, will create a new bucket and set it's ACL.\n- [options] {Object} optional parameters\n  - [acl] {String} include `private`,`public-read`,`public-read-write`\n  - [storageClass] {String} the storage type include (Standard,IA,Archive)\n  - [dataRedundancyType] {String} default `LRS`, include `LRS`,`ZRS`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the bucket name on `bucket` properties.\n\n- bucket {String} bucket name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Create a bucket name `helloworld` location on HongKong\n\n```js\nstore.putBucket('helloworld').then((result) => {\n  // use it by default\n  store.useBucket('helloworld');\n});\n```\n\n- Create a bucket name `helloworld` location on HongKong StorageClass `Archive`\n\n```js\nawait store.putBucket('helloworld', { StorageClass: 'Archive' });\n// use it by default\nstore.useBucket('helloworld');\n```\n\n### .deleteBucket(name[, options])\n\nDelete an empty bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket is not empty, will throw BucketNotEmptyError.\n  If bucket is not exists, will throw NoSuchBucketError.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete the exists 'helloworld' bucket on 'oss-cn-hongkong'\n\n```js\nstore.deleteBucket('helloworld').then((result) => {});\n```\n\n### .useBucket(name)\n\nUse the bucket.\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.useBucket('helloworld');\n```\n\n### .getBucketInfo(name)\n\nGet bucket information,include CreationDate、ExtranetEndpoint、IntranetEndpoint、Location、Name、StorageClass、\nOwner、AccessControlList、Versioning\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketInfo('helloworld').then( (res) => {\n  console.log(res.bucket)\n})\n```\n\n### .getBucketLocation(name)\n\nGet bucket location\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketLocation('helloworld').then( (res) => {\n  console.log(res.location)\n})\n```\n\n---\n\n### .putBucketACL(name, acl[, options])\n\nUpdate the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- acl {String} access control list, current available: `public-read-write`, `public-read` and `private`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set bucket `helloworld` to `public-read-write`\n\n```js\nstore.putBucketACL('helloworld', 'public-read-write').then((result) => {\n});\n```\n\n### .getBucketACL(name[, options])\n\nGet the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld`\n\n```js\nstore.getBucketACL('helloworld').then((result) => {\n  console.log(result.acl);\n});\n```\n\n---\n\n### .putBucketLogging(name, prefix[, options])\n\nUpdate the bucket logging settings.\nLog file will create every one hour and name format: `<prefix><bucket>-YYYY-mm-DD-HH-MM-SS-UniqueString`.\n\nparameters:\n\n- name {String} bucket name\n- [prefix] {String} prefix path name to store the log files\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Enable bucket `helloworld` logging and save with prefix `logs/`\n\n```js\nstore.putBucketLogging('helloworld', 'logs/').then((result) => {\n});\n```\n\n### .getBucketLogging(name[, options])\n\nGet the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- enable {Boolean} enable logging or not\n- prefix {String} prefix path name to store the log files, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld` logging settings\n\n```js\nstore.getBucketLogging('helloworld').then((result) => {\n  console.log(result.enable, result.prefix);\n});\n```\n\n### .deleteBucketLogging(name[, options])\n\nDelete the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketWebsite(name, config[, options])\n\nSet the bucket as a static website.\n\nparameters:\n\n- name {String} bucket name\n- config {Object} website config, contains blow properties:\n  - index {String} default page, e.g.: `index.html`\n  - [error] {String} error page, e.g.: 'error.html'\n  - [supportSubDir] {String} default vaule false\n  - [type] {String} default value 0\n  - [routingRules] {Array} RoutingRules\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketWebsite('hello', {\n  index: 'index.html'\n}).then((result) => {\n});\n```\n\n### .getBucketWebsite(name[, options])\n\nGet the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- index {String} index page\n- error {String} error page, maybe `null`\n- supportSubDir {String}\n- type {String}\n- routingRules {Array}\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketWebsite(name[, options])\n\nDelete the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketReferer(name, allowEmpty, referers[, options])\n\nSet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list, e.g.:\n  ```js\n  [\n    'https://npm.taobao.org',\n    'http://cnpmjs.org'\n  ]\n  ```\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketReferer('hello', false, [\n  'https://npm.taobao.org',\n  'http://cnpmjs.org'\n]).then((result) => {\n});\n```\n\n### .getBucketReferer(name[, options])\n\nGet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketReferer(name[, options])\n\nDelete the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketLifecycle(name, rules[, options])\n\nSet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains blow properties:\n  - [id] {String} rule id, if not set, OSS will auto create it with random string.\n  - prefix {String} store prefix\n  - status {String} rule status, allow values: `Enabled` or `Disabled`\n  - [expiration] {Object} specifies the expiration attribute of the lifecycle rules for the object.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    - [expiredObjectDeleteMarker] {String} value `true`\n    `createdBeforeDate` and `days`  and `expiredObjectDeleteMarker` must have one.\n  - [abortMultipartUpload] {Object} Specifies the expiration attribute of the multipart upload tasks that are not complete.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `createdBeforeDate` and `days` must have one.\n  - [transition] {Object} Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle.\n    - storageClass {String} Specifies the storage class that objects that conform to the rule are converted into. allow values: `IA` or `Archive`\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `createdBeforeDate` and `days` must have one.\n  - [noncurrentVersionTransition] {Object} Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle.\n    - storageClass {String} Specifies the storage class that history objects that conform to the rule are converted into. allow values: `IA` or `Archive`\n    - noncurrentDays {String} expire after the `noncurrentDays`\n  `expiration`、 `abortMultipartUpload`、 `transition`、 `noncurrentVersionTransition` must have one.\n  - [noncurrentVersionExpiration] {Object} specifies the expiration attribute of the lifecycle rules for the history object.\n    - noncurrentDays {String} expire after the `noncurrentDays`\n  - [tag] {Object} Specifies the object tag applicable to a rule. Multiple tags are supported.\n    - key {String} Indicates the tag key.\n    - value {String} Indicates the tag value.\n    `tag` cannot be used with `abortMultipartUpload`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketLifecycle('hello', [\n  {\n    id: 'delete after one day',\n    prefix: 'logs/',\n    status: 'Enabled',\n    days: 1\n  },\n  {\n    prefix: 'logs2/',\n    status: 'Disabled',\n    date: '2022-10-11T00:00:00.000Z'\n  }\n]).then((result) => {});\n```\n\nexample: for history with noncurrentVersionExpiration\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  expiration: {\n    days: '1'\n  },\n  noncurrentVersionExpiration: {\n    noncurrentDays: '1'\n  }\n}]);\nconsole.log(result)\n```\n\nexample: for history with expiredObjectDeleteMarker\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  expiration: {\n    expiredObjectDeleteMarker: 'true'\n  },\n  noncurrentVersionExpiration: {\n    noncurrentDays: '1'\n  }\n}]);\nconsole.log(result)\n```\n\nexample: for history with noncurrentVersionTransition\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  noncurrentVersionTransition: {\n    noncurrentDays: '10',\n    storageClass: 'IA'\n  }\n}]);\nconsole.log(result)\n```\n\n### .getBucketLifecycle(name[, options])\n\nGet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the lifecycle rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketLifecycle(name[, options])\n\nDelete the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketCORS(name, rules[, options])\n\nSet CORS rules of the bucket object\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains below properties:\n  - allowedOrigin {String/Array} configure for Access-Control-Allow-Origin header\n  - allowedMethod {String/Array} configure for Access-Control-Allow-Methods header\n  - [allowedHeader] {String/Array} configure for Access-Control-Allow-Headers header\n  - [exposeHeader] {String/Array} configure for Access-Control-Expose-Headers header\n  - [maxAgeSeconds] {String} configure for Access-Control-Max-Age header\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketCORS('hello', [\n  {\n    allowedOrigin: '*',\n    allowedMethod: [\n      'GET',\n      'HEAD',\n    ],\n  }\n]).then((result) => {});\n```\n\n### .getBucketCORS(name[, options])\n\nGet CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the CORS rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketCORS(name[, options])\n\nDelete CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .getBucketRequestPayment(bucketName[, options])\n\nget RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String} bucket name\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- payer {String} payer, BucketOwner or Requester\n- res {Object} response info, including\n  - data {Buffer} xml\n\n---\n\n### .putBucketRequestPayment(bucketName, payer[, options])\n\nput RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String}\n- payer {String} payer\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketEncryption(name, rules)\n\nput BucketEncryption value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [rules] {Object} parameters\n  - SSEAlgorithm {String} encryption type, expect AES256 or KMS\n  - {KMSMasterKeyID} {String} needed when encryption type is KMS\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketEncryption(name)\n\nget BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n- encryption {Object} rules\n  - SSEAlgorithm {String} encryption type, AES256 or KMS\n  - {KMSMasterKeyID} {String} will be return when encryption type is KMS\n\n---\n\n### .deleteBucketEncryption(name)\n\ndelete BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketTags(name, tag[, options])\n\nAdds tags for a bucket or modify the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketTags(name[, options])\n\nObtains the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- tag {Object} the tag of object\n- res {Object} response info\n\n---\n\n### .deleteBucketTags(name[, options])\n\nDeletes the tags added for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketPolicy(name, policy[, options])\n\nAdds or modify policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- policy {Object} bucket policy\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\nexample:\n```js\nconst policy = {\n  Version: '1',\n  Statement: [\n    {\n      Action: ['oss:PutObject', 'oss:GetObject'],\n      Effect: 'Deny',\n      Principal: ['1234567890'],\n      Resource: ['acs:oss:*:1234567890:*/*']\n    }\n  ]\n};\nconst result = await store.putBucketPolicy(bucket, policy);\nconsole.log(result);\n```\n---\n\n### .getBucketPolicy(name[, options])\n\nObtains the policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- policy {Object} the policy of bucket, if not exist, the value is null\n- res {Object} response info\n- status {Number} response status\n\n---\n\n### .deleteBucketPolicy(name[, options])\n\nDeletes the policy added for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n### .getBucketVersioning(name[, options])\n\nObtains the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- versionStatus {String | undefined} version status, `Suspended` or `Enabled`. default value: `undefined`\n- res {Object} response info\n\n---\n\n### .putBucketVersioning(name, status[, options])\n\nset the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- status {String} version status, allow values: `Enabled` or `Suspended`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n\n### .getBucketInventory(name, inventoryId[, options])\n\nget bucket inventory by inventory-id\n\nparameters:\n\n- name {String} the bucket name\n- inventoryId {String} inventory-id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- inventory {Inventory}\n- status {Number} response status\n- res {Object} response info\n\n```js\nasync function getBucketInventoryById() {\n  try {\n    const result = await client.getBucketInventory('bucket', 'inventoryid');\n    console.log(result.inventory)\n  } catch (err) {\n    console.log(err)\n  }\n}\n\ngetBucketInventoryById();\n```\n\n### putBucketInventory(name, inventory[, options])\n\nset bucket inventory\n\nparameters:\n\n- name {String} the bucket name\n- inventory {Inventory} inventory config\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n```ts\ntype Field = 'Size | LastModifiedDate | ETag | StorageClass | IsMultipartUploaded | EncryptionStatus';\ninterface Inventory {\n  id: string;\n  isEnabled: true | false;\n  prefix?: string;\n  OSSBucketDestination: {\n    format: 'CSV';\n    accountId: string;\n    rolename: string;\n    bucket: string;\n    prefix?: string;\n    encryption?:\n    | {'SSE-OSS': ''}\n    | {\n      'SSE-KMS': {\n        keyId: string;\n      };\n    };\n  };\n  frequency: 'Daily' | 'Weekly';\n  includedObjectVersions: 'Current' | 'All';\n  optionalFields?: {\n    field?: Field[];\n  };\n}\n```\n```js\nconst inventory = {\n  id: 'default',\n  isEnabled: false, // `true` | `false`\n  prefix: 'ttt', // filter prefix\n  OSSBucketDestination: {\n    format: 'CSV',\n    accountId: '1817184078010220',\n    rolename: 'AliyunOSSRole',\n    bucket: 'your bucket',\n    prefix: 'test',\n    //encryption: {'SSE-OSS': ''},\n    /*\n      encryption: {\n      'SSE-KMS': {\n        keyId: 'test-kms-id';\n      };, \n    */\n  },\n  frequency: 'Daily', // `WEEKLY` | `Daily`\n  includedObjectVersions: 'All', // `All` | `Current`\n  optionalFields: {\n    field: [\"Size\", \"LastModifiedDate\", \"ETag\", \"StorageClass\", \"IsMultipartUploaded\", \"EncryptionStatus\"]\n  },\n}\n\nasync function putInventory(){\n  const bucket = 'Your Bucket Name';\n  try {\n    await client.putBucketInventory(bucket, inventory);\n  } catch(err) {\n    console.log(err);\n  }\n}\n\nputInventory()\n```\n\n### deleteBucketInventory(name, inventoryId[, options])\n\ndelete bucket inventory by inventory-id\n\nparameters:\n\n- name {String} the bucket name\n- inventoryId {String} inventory-id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n### listBucketInventory(name[, options])\n\nlist bucket inventory\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n  - continuationToken used by search next page\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\nexample: \n\n```js\nasync function listBucketInventory() {\n  const bucket = 'Your Bucket Name';\n  let nextContinuationToken;\n  // list all inventory of the bucket\n  do {\n    const result = await client.listBucketInventory(bucket, nextContinuationToken);\n    console.log(result.inventoryList);\n    nextContinuationToken = result.nextContinuationToken;\n  } while (nextContinuationToken)\n}\n\nlistBucketInventory();\n```\n\n### .abortBucketWorm(name[, options])\n\nused to delete an unlocked retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .completeBucketWorm(name, wormId[, options])\n\nused to lock a retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- wormId {String} worm id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .extendBucketWorm(name, wormId, days[, options])\n\n used to extend the retention period of objects in a bucket whose retention policy is locked.\n\nparameters:\n\n- name {String} the bucket name\n- wormId {String} worm id\n- days {String | Number} retention days\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketWorm(name[, options])\n\n used to query the retention policy information of the specified bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- wormId {String} worm id\n- state {String} `Locked` or `InProgress`\n- days {String} retention days\n- creationDate {String}\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .initiateBucketWorm(name, days[, options])\n\ncreate a retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- days {String | Number}} set retention days\n- [options] {Object} optional args\n\nSuccess will return:\n\n- wormId {String} worm id\n- status {Number} response status\n- res {Object} response info\n\n---\n\n## Object Operations\n\nAll operations function return Promise, except `signatureUrl`.\n\n### .put(name, file[, options])\n\nAdd an object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream|File(only support Browser)|Blob(only support Browser)} object local path, content buffer or ReadStream content instance use in Node, Blob and html5 File\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - See more: [PutObject](https://help.aliyun.com/document_detail/31978.html#title-yxe-96d-x61)\n  - [disabledMD5] {Boolean} default true, it just work in Browser. if false,it means that MD5 is automatically calculated for uploaded files. **_NOTE:_** Synchronous computing tasks will block the main process\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- data {Object} callback server response data, sdk use JSON.parse() return\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through local file path\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/demo.txt', filepath).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/demo.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829244'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through content buffer\n\n```js\nstore.put('ossdemo/buffer', Buffer.from('foo content')).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/buffer',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/buffer',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"xxx\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829243'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .putStream(name, stream[, options])\n\nAdd a stream object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- stream {ReadStream} object ReadStream content instance\n- [options] {Object} optional parameters\n  - [contentLength] {Number} the stream length, `chunked encoding` will be used if absent\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.putStream('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .append(name, file[, options])\n\nAppend an object to the bucket, it's almost same as put, but it can add content to existing object rather than override it.\n\nAll parameters are same as put except for options.position\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [position] {String} specify the position which is the content length of the latest object\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n\nobject:\n\n- name {String} object name\n- url {String} the url of oss\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- nextAppendPosition {String} the next position\n\nexample:\n\n```js\nlet object = await store.append('ossdemo/buffer', Buffer.from('foo'));\n\n// append content to the existing object\nobject = await store.append('ossdemo/buffer', Buffer.from('bar'), {\n  position: object.nextAppendPosition,\n});\n```\n\n### .getObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `endpoint`.\n\ne.g.:\n\n```js\nconst cdnUrl = client.getObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .generateObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `bucket and endpoint `.\nSuggest use generateObjectUrl instead of getObjectUrl.\n\ne.g.:\n\n```js\nconst url = client.generateObjectUrl('foo/bar.jpg');\n// cdnUrl should be `https://${bucketname}.${endpotint}foo/bar.jpg`\n\nconst cdnUrl = client.generateObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .head(name[, options])\n\nHead an object and get the meta info.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status, maybe 200 or 304\n- meta {Object} object user meta, if not set on `put()`, will return null.\n    If return status 304, meta will be null too\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-version-id] return in multiversion\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Head an exists object and get user meta\n\n```js\nawait this.store.put('ossdemo/head-meta', Buffer.from('foo'), {\n  meta: {\n    uid: 1,\n    path: 'foo/demo.txt'\n  }\n});\nconst object = await this.store.head('ossdemo/head-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  meta: {\n    uid: '1',\n    path: 'foo/demo.txt'\n  },\n  res: { ... }\n}\n```\n\n- Head a not exists object\n\n```js\nconst object = await this.store.head('ossdemo/head-meta');\n// will throw NoSuchKeyError\n```\n\n### .getObjectMeta(name[, options])\n\nGet an  object meta info include ETag、Size、LastModified and so on, not return object content.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info, including\n  - headers {Object} response headers\n\nexample:\n\n- Head an exists object and get object meta info\n\n```js\nawait this.store.put('ossdemo/object-meta', Buffer.from('foo'));\nconst object = await this.store.getObjectMeta('ossdemo/object-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  res: { ... }\n}\n```\n\n### .get(name[, file, options])\n\nGet an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the content\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [versionId] {String} the version id of history object\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [responseCacheControl] {String} default `no-cache`, (only support Browser). response-cache-control, will response with HTTP Header `Cache-Control`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Range' get specifying range bytes content, e.g.: `Range: bytes=0-9`\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/demo.txt', filepath);\n```\n\n_ Store object to a writestream\n\n```js\nawait store.get('ossdemo/demo.txt', somestream);\n```\n\n- Get an object content buffer\n\n```js\nconst result = await store.get('ossdemo/demo.txt');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a processed image and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.png';\nawait store.get('ossdemo/demo.png', filepath, {process: 'image/resize,w_200'});\n```\n\n- Get a not exists object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/not-exists-demo.txt', filepath);\n// will throw NoSuchKeyError\n```\n\n- Get a historic version object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nconst versionId = 'versionId string';\nawait store.get('ossdemo/not-exists-demo.txt', filepath, {\n  versionId\n});\n```\n\n### .getStream(name[, options])\n\nGet an object read stream.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object stream\n\n```js\nconst result = await store.getStream('ossdemo/demo.txt');\nresult.stream.pipe(fs.createWriteStream('some file.txt'));\n```\n\n### .delete(name[, options])\n\nDelete an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf delete object not exists, will also delete success.\n\nexample:\n\n- Delete an exists object\n\n```js\nawait store.delete('ossdemo/someobject');\n```\n\n- Delete a not exists object\n\n```js\nawait store.delete('ossdemo/some-not-exists-object');\n```\n\n- Delete a history object or deleteMarker\n\n```js\nconst versionId = 'versionId';\nawait store.delete('ossdemo/some-not-exists-object', { versionId });\n```\n\n### .copy(name, sourceName[, sourceBucket, options])\n\nCopy an object from `sourceName` to `name`.\n\nparameters:\n\n- name {String} object name store on OSS\n- sourceName {String} source object name\n- [sourceBucket] {String} source Bucket. if doesn't exist，`sourceBucket` is same bucket. \n- [options] {Object} optional parameters\n  - [versionId] {String} the version id of history object\n  - [timeout] {Number} the operation timeout\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n    If the `meta` set, will override the source object meta.\n  - [headers] {Object} extra headers\n    - 'If-Match' do copy if source object etag equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' do copy if source object etag not equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-Modified-Since' do copy if source object modified after this time,\n        otherwise throw PreconditionFailedError\n    - 'If-Unmodified-Since' do copy if source object modified before this time,\n        otherwise throw PreconditionFailedError\n    - See more: [CopyObject](https://help.aliyun.com/document_detail/31979.html?#title-tzy-vxc-ncx)\n\nSuccess will return the copy result in `data` property.\n\nobject:\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT string\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf source object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Copy same bucket object\n\n```js\nstore.copy('newName', 'oldName').then((result) => {\n  console.log(result);\n});\n```\n\n- Copy other bucket object\n\n```js\nstore.copy('logo.png', 'logo.png', 'other-bucket').then((result) => {\n  console.log(result);\n});\n```\n\n- Copy historic object\n\n```js\nconst versionId = 'your verisonId'\nstore.copy('logo.png', 'logo.png', 'other-bucket', { versionId }).then((result) => {\n  console.log(result);\n});\n```\n\n### .putMeta(name, meta[, options])\n\nSet an exists object meta.\n\nparameters:\n\n- name {String} object name store on OSS\n- meta {Object} user meta, will send with `x-oss-meta-` prefix string\n  e.g.: `{ uid: 123, pid: 110 }`\n  If `meta: null`, will clean up the exists meta\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the putMeta result in `data` property.\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Update exists object meta\n\n```js\nconst result = await store.putMeta('ossdemo.txt', {\n  uid: 1, pid: 'p123'\n});\nconsole.log(result);\n```\n\n- Clean up object meta\n\n```js\nawait store.putMeta('ossdemo.txt', null);\n```\n\n### .deleteMulti(names[, options])\n\nDelete multi objects in one request.\n\nparameters:\n\n- names {Array<Object>} object names, max 1000 objects in once.\n  - key {String} object name\n  - [versionId] {String} the version id of history object or deleteMarker\n- [options] {Object} optional parameters\n  - [quiet] {Boolean} quiet mode or verbose mode, default is `false`, verbose mode\n    quiet mode: if all objects delete succes, return emtpy response.\n      otherwise return delete error object results.\n    verbose mode: return all object delete results.\n  - [timeout] {Number} the operation timeout\n\nSuccess will return delete success objects in `deleted` property.\n\n- [deleted] {Array<Object>} deleted object or deleteMarker info list\n  - [Key] {String} object name\n  - [VersionId] {String} object versionId\n  - [DeleteMarker] {String} generate or delete marker\n  - [DeleteMarkerVersionId] {String} marker versionId \n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete multi objects in quiet mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3'], {\n  quiet: true\n});\n```\n\n- Delete multi objects in verbose mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3']);\n```\n\n- Delete multi objects in multiversion\n\n```js\nconst obj1 = {\n  key: 'key1',\n  versionId: 'versionId1'\n}\nconst obj2 = {\n  key: 'key2',\n  versionId: 'versionId2'\n}\nconst result = await store.deleteMulti([obj1, obj2]);\n```\n\n### .list(query[, options])\n\nList objects in the bucket.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 objects\n\n```js\nconst result = await store.list();\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nconst result = await store.list({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nconst result = await store.list({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n### .listV2(query[, options])\n\nList objects in the bucket.(recommended)\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [continuation-token] (continuationToken) {String} search start from `continuationToken`, including `continuationToken` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n  - [start-after] {String} specifies the Start-after value from which to start the list. The names of objects are returned in alphabetical order.\n  - [fetch-owner] {Boolean} specifies whether to include the owner information in the response.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n  - name {String} object name on oss\n  - url {String} resource url\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n  - type {String} object type, e.g.: `Normal`\n  - size {Number} object size, e.g.: `344606`\n  - storageClass {String} storage class type, e.g.: `Standard`\n  - owner {Object|null} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextContinuationToken {String} next continuation-token string\n- keyCount {Number} The number of keys returned for this request. If Delimiter is specified, KeyCount is the sum of the elements in Key and CommonPrefixes.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n- List top 10 objects\n\n```js\nconst result = await store.listV2({\n  'max-keys': 10\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nconst result = await store.listV2({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nconst result = await store.listV2({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n- List `a/` dir objects, after `a/b` and not include `a/b`\n\n```js\nconst result = await store.listV2({\n  delimiter: '/',\n  prefix: 'a/',\n  'start-after': 'a/b'\n});\nconsole.log(result.objects);\n```\n\n### .getBucketVersions(query[, options])\n\nList the version information of all objects in the bucket, including the delete marker (Delete Marker).\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [versionIdMarker] {String} set the result to return from the version ID marker of the key marker object and sort by the versions\n  - [keyMarker] {String} search start from `keyMarker`, including `keyMarker` key\n  - [encodingType] {String} specifies that the returned content is encoded, and specifies the type of encoding\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [maxKeys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - isLatest {Boolean}\n    - versionId {String} object versionId\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- deleteMarker {Array<ObjectDeleteMarker>} object delete marker info list\n  Each `ObjectDeleteMarker`\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - versionId {String} object versionId\n- isTruncated {Boolean} truncate or not\n- nextKeyMarker (nextMarker) {String} next marker string\n- nextVersionIdMarker (NextVersionIdMarker) {String} next version ID marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- View all versions of objects and deleteMarker of bucket\n\n```js\nconst result = await store.getBucketVersions();\nconsole.log(result.objects);\nconsole.log(result.deleteMarker);\n```\n\n- List from key-marker\n\n```js\nconst result = await store.getBucketVersions({\n  'keyMarker': 'keyMarker'\n});\nconsole.log(result.objects);\n```\n\n- List from the version-id-marker of key-marker\n\n```js\nconst result = await store.getBucketVersions({\n  'versionIdMarker': 'versionIdMarker',\n  'keyMarker': 'keyMarker'\n});\nconsole.log(result.objects);\nconsole.log(result.deleteMarker);\n```\n\n### .signatureUrl(name[, options])\n\nCreate a signature url for download or upload object. When you put object with signatureUrl ,you need to pass `Content-Type`.Please look at the example.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [method] {String} the HTTP method, default is 'GET'\n  - [Content-Type] {String} set the request content type\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [trafficLimit] {Number} traffic limit, range: `819200`~`838860800`.\n  - [subResource] {Object} additional signature parameters in url.\n  - [response] {Object} set the response headers for download\n    - [content-type] {String} set the response content type\n    - [content-disposition] {String} set the response content disposition\n    - [cache-control] {String} set the response cache control\n    - See more: https://help.aliyun.com/document_detail/oss/api-reference/object/GetObject.html\n  - [callback] {Object} set the callback for the operation\n    - url {String} set the url for callback\n    - [host] {String} set the host for callback\n    - body {String} set the body for callback\n    - [contentType] {String} set the type for body\n    - [customValue] {Object} set the custom value for callback,eg. {var1: value1,var2:value2}\n\nSuccess will return signature url.\n\nexample:\n\n- Get signature url for object\n\n```js\nconst url = store.signatureUrl('ossdemo.txt');\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT'\n});\nconsole.log(url);\n\n//  put object with signatureUrl\n// -------------------------------------------------\n\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT',\n  'Content-Type': 'text/plain; charset=UTF-8',\n});\nconsole.log(url);\n\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  response: {\n    'content-type': 'text/custom',\n    'content-disposition': 'attachment'\n  }\n});\nconsole.log(url);\n\n// put operation\n```\n\n- Get a signature url for a processed image\n\n```js\nconst url = store.signatureUrl('ossdemo.png', {\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.png', {\n  expires: 3600,\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n```\n\n### .putACL(name, acl[, options])\n\nSet object's ACL.\n\nparameters:\n\n- name {String} object name\n- acl {String} acl (private/public-read/public-read-write)\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object \n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set an object's ACL\n\n```js\nawait store.putACL('ossdemo.txt', 'public-read');\n```\n\n- Set an history object's ACL\n\n```js\nconst versionId = 'object versionId'\nawait store.putACL('ossdemo.txt', 'public-read', {\n  versionId\n});\n```\n\n### .getACL(name[, options])\n\nGet object's ACL.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get an object's ACL\n\n```js\nconst result = await store.getACL('ossdemo.txt');\nconsole.log(result.acl);\n```\n\n- Get an history object's ACL\n\n```js\nconst versionId = 'object versionId'\nconst result = await store.getACL('ossdemo.txt', { versionId });\nconsole.log(result.acl);\n```\n\n### .restore(name[, options])\n\nRestore Object.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object \n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Restore an object\n\n```js\nconst result = await store.restore('ossdemo.txt');\nconsole.log(result.status);\n```\n\n- Restore an history object\n\n```js\nconst versionId = 'object versionId';\nconst result = await store.restore('ossdemo.txt', { versionId });\nconsole.log(result.status);\n```\n\n### .putSymlink(name, targetName[, options])\n\nPutSymlink\n\nparameters:\n\n- name {String} object name\n- targetName {String} target object name\n- [options] {Object} optional parameters\n  - [storageClass] {String} the storage type include (Standard,IA,Archive)\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers, detail see [PutSymlink](https://help.aliyun.com/document_detail/45126.html#title-x71-l2b-7i8)\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst options = {\n  storageClass: 'IA',\n  meta: {\n    uid: '1',\n    slus: 'test.html' \n  }\n}\nconst result = await store.putSymlink('ossdemo.txt', 'targetName', options)\nconsole.log(result.res)\n```\n\nputSymlink multiversion \n```js\nconst options = {\n  storageClass: 'IA',\n  meta: {\n    uid: '1',\n    slus: 'test.html' \n  },\n}\nconst result = await store.putSymlink('ossdemo.txt', 'targetName', options)\nconsole.log(result.res.headers['x-oss-version-id'])\n```\n\n### .getSymlink(name[, options])\n\nGetSymlink\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n- [versionId] {String} the version id of history object\n\nSuccess will return\n\n- targetName {String} target object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst result = await store.getSymlink('ossdemo.txt')\nconsole.log(result.targetName)\n```\n\nfor history object\n```js\nconst versionId = 'object versionId';\nconst result = await store.getSymlink('ossdemo.txt', { versionId })\nconsole.log(result.targetName)\n```\n\n### .initMultipartUpload(name[, options])\nBefore transmitting data in the Multipart Upload mode,\nyou must call the Initiate Multipart Upload interface to notify the OSS to initiate a Multipart Upload event.\nThe Initiate Multipart Upload interface returns a globally unique Upload ID created by the OSS server to identify this Multipart Upload event.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] Mime file type e.g.: application/octet-stream\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - [x-oss-server-side-encryption]\n    Specify the server-side encryption algorithm used to upload each part of this object,Type: string, Valid value: AES256 `x-oss-server-side-encryption: AES256`<br>\n    if use in browser you should be set cors expose header x-oss-server-side-encryption\n    - See more: [InitiateMultipartUpload](https://help.aliyun.com/document_detail/31992.html?#title-wh0-a2h-rur)\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-server-side-encryption] if set request header x-oss-server-side-encryption, will return\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- uploadId {String} upload id, use for uploadPart, completeMultipart\n\nexample:\n\n```js\n  const result = await store.initMultipartUpload('object');\n  console.log(result);\n```\n\n### .uploadPart(name, uploadId, partNo, file, start, end[, options])\nAfter initiating a Multipart Upload event, you can upload data in parts based on the specified object name and Upload ID.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- file {File|String}  is File or FileName, the whole file<br>\n Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB. <br>\n In Node you can use File or FileName, but in browser you only can use File.\n- start {Number} part start bytes  e.g: 102400\n- end {Number} part end bytes  e.g: 204800\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n  const uploadId = result.uploadId;\n  const file; //the data you want to upload, is a File or FileName(only in node)\n  //if file part is 10\n  const partSize = 100 * 1024;\n  const fileSize = 10 * partSize;//you need to calculate\n  const dones = [];\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const part = await store.uploadPart(name, uploadId, i, file, start, end);\n    dones.push({\n      number: i,\n      etag: part.etag\n    });\n    console.log(part);\n  }\n\n  //end need to call completeMultipartUpload api\n```\n\n### .uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])\nUsing Upload Part Copy, you can copy data from an existing object and upload a part of the data.\nWhen copying a file larger than 1 GB, you must use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- range {String} Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB, range value like `0-102400`\n- sourceData {Object}\n  - sourceKey {String} the source object name\n  - sourceBucketName {String} the source bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n  - [headers] {Object} The following request header is used for the source objects specified by x-oss-copy-source.\n    - [x-oss-copy-source-if-match]  default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]   default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]   default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since]   default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  const partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const range = start + '-' + (end - 1);\n    const part = await store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n- use history object to uploadPartCopy\n\n```js\n  const versionId = 'object versionId';\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n  const partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const range = start + '-' + (end - 1);\n    const part = await store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    }, {\n      versionId\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n### .completeMultipartUpload(name, uploadId, parts[, options])\nAfter uploading all data parts, you must call the Complete Multipart Upload API to complete Multipart Upload for the entire file.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- parts {Array} more part {Object} from uploadPartCopy, , each in the structure:\n  - number {Number} partNo\n  - etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [CompleteMultipartUpload](https://help.aliyun.com/document_detail/31995.html?#title-nan-5y3-rjd)\n\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data , sdk use JSON.parse() return\n\nexample:\n\n```js\n\n  //init multipart\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  //upload part\n  const file; //the data you want to upload, this example size is 10 * 100 * 1024\n  const fileSize;//you need to calculate\n  const partSize = 100 * 1024;//100kb\n  const done = [];\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const data = file.slice(start, end);\n    const part = yield store.uploadPart(name, result.uploadId, i, data);\n    console.log(part);\n    done.push({\n          number: i,\n          etag: part.res.headers.etag\n        });\n  }\n\n  //complete\n  const completeData = await store.completeMultipartUpload(name, result.uploadId, done);\n  console.log(completeData);\n```\n\n\n### .multipartUpload(name, file[, options])\n\nUpload file with [OSS multipart][oss-multipart].<br>\nthis function contains initMultipartUpload, uploadPart, completeMultipartUpload.\nWhen you use multipartUpload api，if you encounter problems with ConnectionTimeoutError, you should handle ConnectionTimeoutError in your business code. How to resolve ConnectionTimeoutError, you can decrease `partSize` size 、 Increase `timeout` 、Retry request ,\nor give tips in your business code;\n\nparameters:\n\n- name {String} object name\n- file {String|File(only support Browser)|Blob(only support Browser)|Buffer} file path or HTML5 Web File or web Blob or content buffer\n- [options] {Object} optional args\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part, defalut `1024 * 1024`(1MB), minimum `100 * 1024`(100KB)\n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n    - file {File} The file object selected by the user, if the browser is restarted, it needs the user to manually trigger the settings\n    - name {String} object key\n    - fileSize {Number} file size\n    - partSize {Number} part size\n    - uploadId {String} upload id\n    - doneParts {Array} An array of pieces that have been completed, including the object structure as follows\n       - number {Number} part number\n       - etag {String} part etag\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [mime] {String} custom mime , will send with `Content-Type` entity header\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n          e.g.:\n         ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n         ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [disabledMD5] {Boolean} default true, it just work in Browser. if false,it means that MD5 is automatically calculated for uploaded files. **_NOTE:_** Synchronous computing tasks will block the main process\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data, sdk use JSON.parse() return\n\nexample:\n\n- Upload using multipart\n\n```js\nconst result = await store.multipartUpload('object', '/tmp/file');\nlet savedCpt;\nconsole.log(result);\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    savedCpt = cpt;\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) { //progress is generator\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\n```\n\n- multipartUpload progress example\n\n```js\n\n//async function\nasync function asyncProgress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result1 = await store.multipartUpload('object', '/tmp/file', {\n  progress: asyncProgress\n});\n\n//function\nfunction progress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result2 = await store.multipartUpload('object', '/tmp/file', {\n  progress: progress\n});\n\n```\n\n- multipartUpload with abort\n\n>tips: abort multipartUpload support on node and browser\n\n```js\n\n//start upload\nlet abortCheckpoint;\nstore.multipartUpload('object', '/tmp/file', {\n  progress: function (p, cpt, res) {\n    abortCheckpoint = cpt;\n  }\n}).then(res => {\n  // do something\n}.catch(err => {\n   //if abort will catch abort event\n  if (err.name === 'abort') {\n    // handle abort\n    console.log('error: ', err.message)\n  }\n}))\n\n// abort\nstore.abortMultipartUpload(abortCheckpoint.name, abortCheckpoint.uploadId)\n\n```\n\n- multipartUpload with cancel\n\n>tips: cancel multipartUpload support on node and browser\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n- multipartUpload with capture `ConnectionTimeoutError`  error\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  if (err.code === 'ConnectionTimeoutError') {\n    console.log(\"Woops,Woops ,timeout error!!!\");\n    // do ConnectionTimeoutError operation\n  }\n}\n\n```\n\n### .multipartUploadCopy(name, sourceData[, options])\n\nCopy file with [OSS multipart][oss-multipart]. <br>\nthis function contains head, initMultipartUpload, uploadPartCopy, completeMultipartUpload.<br>\nWhen copying a file larger than 1 GB, you should use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part, defalut `1024 * 1024`(1MB), minimum `100 * 1024`(100KB)\n  - [versionId] {String} the version id of history object \n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [copyheaders] {Object} only uploadPartCopy api used, detail [see](https://www.alibabacloud.com/help/doc-detail/31994.htm)\n    - [x-oss-copy-source-if-match]  only uploadPartCopy api used, default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]  only uploadPartCopy api used, default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]  only uploadPartCopy api used, default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since] only uploadPartCopy api used, default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n- Copy using multipart\n\n```js\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n});\nlet savedCpt;\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    savedCpt = cpt;\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\n```\n\n- multipartUploadCopy with abort\n\n```js\n\n//start upload\nlet abortCheckpoint;\nstore.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n  progress: function (p, cpt, res) {\n    abortCheckpoint = cpt;\n  }\n}).then(res => {\n  // do something\n}.catch(err => {\n   //if abort will catch abort event\n  if (err.name === 'abort') {\n    // handle abort\n    console.log('error: ', err.message)\n  }\n}))\n\n//the other event to abort, for example: click event\n//to abort upload must use the same client instance\nstore.abortMultipartUpload(abortCheckpoint.name, abortCheckpoint.uploadId)\n\n```\n\n- multipartUploadCopy with cancel\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n- multipartUploadCopy with versionId\n\n```js\n\nconst versionId = 'object versionId'\n//start upload\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  },\n  versionId\n});\n\n```\n\n### .listParts(name, uploadId[, query, options])\n\nThe ListParts command can be used to list all successfully uploaded parts mapped to a specific upload ID, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- name {String} object key\n- uploadId {String} upload ID from initMultipartUpload api\n- [query] {Object} query parameters\n  - [max-parts] {Number} The maximum part number in the response of the OSS. default value: 1000.\n  - [part-number-marker] {Number} Starting position of a specific list. A part is listed only when the part number is greater than the value of this parameter.\n  - [encoding-type] {String} Specify the encoding of the returned content and the encoding type. Optional value: url\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- uploadId {String} upload ID\n- bucket {String} Specify the bucket name.\n- name {String} object name\n- PartNumberMarker {Number} Starting position of the part numbers in the listing result.\n- nextPartNumberMarker {Number} If not all results are returned this time, the response request includes the NextPartNumberMarker element to indicate the value of PartNumberMarker in the next request.\n- maxParts {Number} upload ID\n- isTruncated {Boolean} Whether the returned result list for List Parts is truncated. The “true” indicates that not all results are returned; “false” indicates that all results are returned.\n- parts {Array} The container that saves part information, each in the structure:\n  - PartNumber {Number} Part number.\n  - LastModified {Date} Time when a part is uploaded.\n  - ETag {String} ETag value in the content of the uploaded part.\n  - Size {Number} Size of the uploaded part.\n\nexample:\n\n- List uploaded part\n\n```js\n\nconst result = await store.listParts('objcet', 'uploadId', {\n  'max-parts': 1000\n});\nconsole.log(result);\n```\n\n### .listUploads(query[, options])\n\nList on-going multipart uploads, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- query {Object} query parameters\n  - [prefix] {String} the object key prefix\n  - [max-uploads] {Number} the max uploads to return\n  - [key-marker] {String} the object key marker, if `upload-id-marker`\n    is not provided, return uploads with `key > marker`, otherwise\n    return uploads with `key >= marker && uploadId > id-marker`\n  - [upload-id-marker] {String} the upload id marker, must be used\n    **WITH** `key-marker`\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- List on-going multipart uploads\n\n```js\n\nconst result = await store.listUploads({\n  'max-uploads': 100,\n  'key-marker': 'my-object',\n  'upload-id-marker': 'upload-id'\n});\nconsole.log(result);\n```\n\n### .abortMultipartUpload(name, uploadId[, options])\n\nAbort a multipart upload for object.\n\nparameters:\n\n- name {String} the object name\n- uploadId {String} the upload id\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- Abort a multipart upload\n\n```js\nconst result = await store.abortMultipartUpload('object', 'upload-id');\nconsole.log(result);\n```\n\n### .calculatePostSignature(policy)\n\nget postObject params \n\nparameters:\n\n- policy {JSON or Object} policy must contain expiration and conditions.\n\nSuccess will return postObject Api params.\n\nObject:\n\n- OSSAccessKeyId {String}\n- Signature {String}\n- policy {Object} response info\n\n### .getObjectTagging(name[, options])\n\nObtains the tags of an object.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- tag {Object} the tag of object\n- res {Object} response info\n\n### .putObjectTagging(name, tag[, options])\n\nConfigures or updates the tags of an object.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n### .deleteObjectTagging(name[, options])\n\nDeletes the tag of a specified object.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n### .processObjectSave(sourceObject, targetObject, process[, targetBucket])\n\nPersistency indicates that images are asynchronously stored in the specified Bucket\n\nparameters:\n\n- sourceObject {String} source object name\n- targetObject {String} target object name\n- process {String} process string\n- [targetBucket] {String} target bucket\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n\n```js\nconst sourceObject = 'a.png'\nconst targetObject = 'b.png'\nconst process = 'image/watermark,text_aGVsbG8g5Zu+54mH5pyN5Yqh77yB,color_ff6a00'\n\nawait this.store.processObjectSave(sourceObject, targetObject, process);\n```\n\n## RTMP Operations\n\nAll operations function is [async], except `getRtmpUrl`.\n\nasync function format: `async functionName(...)`.\n\n### .putChannel(id, conf[, options])\n\nCreate a live channel.\n\nparameters:\n\n- id {String} the channel id\n- conf {Object} the channel config\n  - [Description] {String} the channel description\n  - [Status] {String} the channel status: 'enabled' or 'disabled'\n  - [Target] {Object}\n    - [Type] {String} the data type for the channel, only 'HLS' is supported now\n    - [FragDuration] {Number} duration of a 'ts' segment\n    - [FragCount] {Number} the number of 'ts' segments in a 'm3u8'\n    - [PlaylistName] {String} the 'm3u8' name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- publishUrls {Array} the publish urls\n- playUrls {Array} the play urls\n- res {Object} response info\n\nexample:\n\n- Create a live channel\n\n```js\nconst cid = 'my-channel';\nconst conf = {\n  Description: 'this is channel 1',\n  Status: 'enabled',\n  Target: {\n    Type: 'HLS',\n    FragDuration: '10',\n    FragCount: '5',\n    PlaylistName: 'playlist.m3u8'\n  }\n};\n\nconst r = await this.store.putChannel(cid, conf);\nconsole.log(r);\n```\n\n### .getChannel(id[, options])\n\nGet live channel info.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- data {Object} channel info, same as conf in [.putChannel](#putchannelid-conf-options)\n- res {Object} response info\n\nexample:\n\n- Get live channel info\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannel(cid);\nconsole.log(r);\n```\n\n### .deleteChannel(id[, options])\n\nDelete a live channel.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response infomation.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Delete a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.deleteChannel(cid);\nconsole.log(r);\n```\n\n### .putChannelStatus(id, status[, options])\n\nChange the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- status {String} the status: 'enabled' or 'disabled'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Disable a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.putChannelStatus(cid, 'disabled');\nconsole.log(r);\n```\n\n### .getChannelStatus(id[, options])\n\nGet the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel status information.\n\nobject:\n\n- data {Object}\n  - Status {String} the channel status: 'Live' or 'Idle'\n  - [ConnectedTime] {String} the connected time of rtmp pushing\n  - [RemoteAddr] {String} the remote addr of rtmp pushing\n  - [Video] {Object} the video parameters (Width/Height/FrameRate/Bandwidth/Codec)\n  - [Audio] {Object} the audio parameters (Bandwidth/SampleRate/Codec)\n- res {Object} response info\n\nexample:\n\n- Get a live channel status\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelStatus(cid);\nconsole.log(r);\n\n// { Status: 'Live',\n//   ConnectedTime: '2016-04-12T11:51:03.000Z',\n//   RemoteAddr: '42.120.74.98:53931',\n//   Video:\n//   { Width: '672',\n//     Height: '378',\n//     FrameRate: '29',\n//     Bandwidth: '60951',\n//     Codec: 'H264' },\n//   Audio: { Bandwidth: '5959', SampleRate: '22050', Codec: 'AAC' }\n// }\n```\n\n### .listChannels(query[, options])\n\nList channels.\n\nparameters:\n\n- query {Object} parameters for list\n  - prefix {String}: the channel id prefix (returns channels with this prefix)\n  - marker {String}: the channle id marker (returns channels after this id)\n  - max-keys {Number}: max number of channels to return\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel list.\n\nobject:\n\n- channels {Array} the channels, each in the structure:\n  - Name {String} the channel id\n  - Description {String} the channel description\n  - Status {String} the channel status\n  - LastModified {String} the last modification time of the channel\n  - PublishUrls {Array} the publish urls for the channel\n  - PlayUrls {Array} the play urls for the channel\n- nextMarker: result.data.NextMarker || null,\n- isTruncated: result.data.IsTruncated === 'true'\n- res {Object} response info\n\nexample:\n\n- List live channels\n\n```js\nconst r = await this.store.listChannels({\n  prefix: 'my-channel',\n  'max-keys': 3\n});\nconsole.log(r);\n```\n\n### .getChannelHistory(id[, options])\n\nGet the live channel history.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the history information.\n\nobject:\n\n- records {Object} the pushing records, each in the structure:\n  - StartTime {String} the start time\n  - EndTime {String} the end time\n  - RemoteAddr {String} the remote addr\n- res {Object} response info\n\nexample:\n\n- Get the live channel history\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelHistory(cid);\nconsole.log(r);\n```\n\n### .createVod(id, name, time[, options])\n\nCreate a VOD playlist for the channel.\n\nparameters:\n\n- id {String} the channel id\n- name {String} the playlist name\n- time {Object} the duration time\n  - startTime {Number} the start time in epoch seconds\n  - endTime {Number} the end time in epoch seconds\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Create a vod playlist of a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.createVod(cid, 're-play', {\n  startTime: 1460464870,\n  endTime: 1460465877\n});\nconsole.log(r);\n```\n\n### .getRtmpUrl(channelId[, options])\n\nGet signatured rtmp url for publishing.\n\nparameters:\n\n- channelId {String} the channel id\n- [options] {Object} optional parameters\n  - [expires] {Number} the expire time in seconds of the url\n  - [params] {Object} the additional paramters for url, e.g.: {playlistName: 'play.m3u8'}\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the rtmp url.\n\nexample:\n\n- Get a rtmp url.\n\n```js\nconst cid = 'my-channel';\n\nconst url = this.store.getRtmpUrl(this.cid, {\n  params: {\n    playlistName: 'play.m3u8'\n  },\n  expires: 3600\n});\nconsole.log(url);\n// rtmp://ossliveshow.oss-cn-hangzhou.aliyuncs.com/live/tl-channel?OSSAccessKeyId=T0cqQWBk2ThfRS6m&Expires=1460466188&Signature=%2BnzTtpyxUWDuQn924jdS6b51vT8%3D\n```\n\n## Create A Image Service Instance\n\nEach Image Service instance required `accessKeyId`, `accessKeySecret`, `bucket` and `imageHost`.\n\n### oss.ImageClient(options)\n\nCreate a Image service instance.\n\noptions:\n- imageHost {String} your image service domain that binding to a OSS bucket\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- bucket {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nconst oss = require('ali-oss');\n\nconst imgClient = oss.ImageClient({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'my_image_bucket'\n  imageHost: 'thumbnail.myimageservice.com'\n});\n```\n\n## Image Operations\n\nAll operations function is [async], except `imgClient.signatureUrl`.\n\nasync function format: `async functionName(...)`.\n\n### imgClient.get(name, file[, options])\n\nGet an image from the image channel.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the image\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image with a style and store it to the local file\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', filepath);\n```\n\n_ Store image to a writestream\n\n```js\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', somestream);\n```\n\n- Get an image content buffer\n\n```js\nconst result = await imgClient.get('ossdemo/demo.jpg@200w_200h');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a not exists object or a not image object\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/not-exists-demo.jpg@200w_200h', filepath);\n// will throw NoSuchKeyError\n```\n\n### imgClient.getStream(name[, options])\n\nGet an image read stream.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image object stream\n\n```js\nconst result = await imgClient.getStream('ossdemo/demo.jpg@200w_200h');\nresult.stream.pipe(fs.createWriteStream('some demo.jpg'));\n```\n\n### imgClient.getExif(name[, options])\n\nGet a image exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nIf object don't have exif, will throw 400 BadRequest.\n\nexample:\n\n```js\nconst result = await imgClient.getExif('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n### imgClient.getInfo(name[, options])\n\nGet a image info and exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nexample:\n\n```js\nconst result = await imgClient.getInfo('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     Format: \"jpg\",\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n\n### imgClient.putStyle(name, style[, options])\n// TODO\n\n### imgClient.getStyle(name[, options])\n\nGet a style by name from the image channel.\n\nparameters:\n- name {String} image style name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} styles object\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.getStyle('400');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"234\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:58:20 GMT\"\n//     },\n//     size: 234,\n//     aborted: false,\n//     rt: 398,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }\n// }\n```\n\n### imgClient.listStyle([options])\n\nGet all styles from the image channel.\n\nparameters:\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Array} styles array, a style object:\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.listStyle();\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"913\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:47:32 GMT\"\n//     },\n//     size: 913,\n//     aborted: false,\n//     rt: 1911,\n//     keepAliveSocket: false\n//   },\n//   data: [{\n//     Name: \"200-200\",\n//     Content: \"0e_200w_200h_0c_0i_0o_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:28:08 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:28:08 GMT\"\n//   }, {\n//     Name: \"800\",\n//     Content: \"800w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:29:15 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:29:15 GMT\"\n//   }, {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }, {\n//     Name: \"600\",\n//     Content: \"600w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:35:02 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:35:02 GMT\"\n//   }]\n// }\n```\n\n### imgClient.deleteStyle(name[, options])\n// TODO\n\n### imgClient.signatureUrl(name)\n\nCreate a signature url for directly download.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return full signature url.\n\nexample:\n\n```js\nconst url = imgClient.signatureUrl('\n');\n// http://thumbnail.myimageservice.com/demo.jpg@200w_200h?OSSAccessKeyId=uZxyLARzYZtGwHKY&Expires=1427803849&Signature=JSPRe06%2FjQpQSj5zlx2ld1V%2B35I%3D\n```\n\n## Cluster Mode\n\nCluster mode now only support object operations.\n\n```js\nconst Cluster = require('ali-oss').ClusterClient;\n\nconst client = Cluster({\n  cluster: [{\n    host: 'host1',\n    accessKeyId: 'id1',\n    accessKeySecret: 'secret1'\n  }, {\n    host: 'host2',\n    accessKeyId: 'id2',\n    accessKeySecret: 'secret2'\n  }],\n  schedule: 'masterSlave', //default is `roundRobin`\n});\n\n// listen error event to logging error\nclient.on('error', function(err) {\n  console.error(err.stack);\n});\n\n// client init ready\nclient.ready(function() {\n  console.log('cluster client init ready, go ahead!');\n});\n```\n\n### Get Methods\n\nWill choose an alive client by schedule(`masterSlave` or `roundRobin`).\n\n- `client.get()`\n- `client.head()`\n- `client.getStream()`\n- `client.list()`\n- `client.signatureUrl()`\n- `client.chooseAvailable()` - choose an available client by schedule.\n- `client.getACL()`\n\n### Put Methods\n\nWill put to all clients.\n\n- `client.put()`\n- `client.putStream()`\n- `client.delete()`\n- `client.deleteMulti()`\n- `client.copy()`\n- `client.putMeta()`\n- `client.putACL()`\n- `client.restore()`\n\n## Known Errors\n\nEach error return by OSS server will contains these properties:\n\n- name {String} error name\n- message {String} error message\n- requestId {String} uuid for this request, if you meet some unhandled problem,\n    you can send this request id to OSS engineer to find out what's happend.\n- hostId {String} OSS cluster name for this request\n\nThe following table lists the OSS error codes:\n\n[More code info](https://help.aliyun.com/knowledge_detail/32005.html)\n\nname | code | status | message | message in Chinese\n---  | ---  | --- | ---     | ---\nAccessDeniedError | AccessDenied | 403 | Access Denied | 拒绝访问\nBucketAlreadyExistsError | BucketAlreadyExists | 409 | Bucket already exists | Bucket 已经存在\nBucketNotEmptyError | BucketNotEmpty | 409 | Bucket is not empty | Bucket 不为空\nRestoreAlreadyInProgressError | RestoreAlreadyInProgress | 409 | The restore operation is in progress. | restore 操作正在进行中\nOperationNotSupportedError | OperationNotSupported | 400 | The operation is not supported for this resource | 该资源暂不支持restore操作\nEntityTooLargeError | EntityTooLarge | 400 | Entity too large | 实体过大\nEntityTooSmallError | EntityTooSmall | 400 | Entity too small | 实体过小\nFileGroupTooLargeError | FileGroupTooLarge | 400 | File group too large | 文件组过大\nInvalidLinkNameError | InvalidLinkName | 400 | Link name can't be the same as the object name | Object Link 与指向的 Object 同名\nLinkPartNotExistError | LinkPartNotExist | 400 | Can't link to not exists object | Object Link 中指向的 Object 不存在\nObjectLinkTooLargeError | ObjectLinkTooLarge | 400 | Too many links to this object | Object Link 中 Object 个数过多\nFieldItemTooLongError | FieldItemTooLong | 400 | Post form fields items too large | Post 请求中表单域过大\nFilePartInterityError | FilePartInterity | 400 | File part has changed | 文件 Part 已改变\nFilePartNotExistError | FilePartNotExist | 400 | File part not exists | 文件 Part 不存在\nFilePartStaleError | FilePartStale| 400 | File part stale | 文件 Part 过时\nIncorrectNumberOfFilesInPOSTRequestError | IncorrectNumberOfFilesInPOSTRequest | 400 | Post request contains invalid number of files | Post 请求中文件个数非法\nInvalidArgumentError | InvalidArgument | 400 | Invalid format argument | 参数格式错误\nInvalidAccessKeyIdError | InvalidAccessKeyId | 400 | Access key id not exists | Access Key ID 不存在\nInvalidBucketNameError | InvalidBucketName | 400 | Invalid bucket name | 无效的 Bucket 名字\nInvalidDigestError | InvalidDigest | 400 | Invalid digest | 无效的摘要\nInvalidEncryptionAlgorithmError | InvalidEncryptionAlgorithm | 400 | Invalid encryption algorithm | 指定的熵编码加密算法错误\nInvalidObjectNameError | InvalidObjectName | 400 | Invalid object name | 无效的 Object 名字\nInvalidPartError | InvalidPart | 400 | Invalid part | 无效的 Part\nInvalidPartOrderError | InvalidPartOrder | 400 | Invalid part order | 无效的 part 顺序\nInvalidPolicyDocumentError | InvalidPolicyDocument | 400 | Invalid policy document | 无效的 Policy 文档\nInvalidTargetBucketForLoggingError | InvalidTargetBucketForLogging | 400 | Invalid bucket on logging operation | Logging 操作中有无效的目标 bucket\nInternalError | Internal | 500 | OSS server internal error | OSS 内部发生错误\nMalformedXMLError | MalformedXML | 400 | Malformed XML format | XML 格式非法\nMalformedPOSTRequestError | MalformedPOSTRequest | 400 | Invalid post body format | Post 请求的 body 格式非法\nMaxPOSTPreDataLengthExceededError | MaxPOSTPreDataLengthExceeded | 400 | Post extra data too large | Post 请求上传文件内容之外的 body 过大\nMethodNotAllowedError | MethodNotAllowed | 405 | Not allowed method | 不支持的方法\nMissingArgumentError | MissingArgument | 411 | Missing argument | 缺少参数\nMissingContentLengthError | MissingContentLength | 411 | Missing `Content-Length` header | 缺少内容长度\nNoSuchBucketError | NoSuchBucket | 404 | Bucket not exists | Bucket 不存在\nNoSuchKeyError | NoSuchKey | 404 | Object not exists | 文件不存在\nNoSuchUploadError | NoSuchUpload | 404 | Multipart upload id not exists | Multipart Upload ID 不存在\nNotImplementedError | NotImplemented | 501 | Not implemented | 无法处理的方法\nPreconditionFailedError | PreconditionFailed | 412 | Pre condition failed | 预处理错误\nRequestTimeTooSkewedError | RequestTimeTooSkewed | 403 | Request time exceeds 15 minutes to server time | 发起请求的时间和服务器时间超出 15 分钟\nRequestTimeoutError | RequestTimeout | 400 | Request timeout | 请求超时\nRequestIsNotMultiPartContentError | RequestIsNotMultiPartContent | 400 | Invalid post content-type | Post 请求 content-type 非法\nSignatureDoesNotMatchError | SignatureDoesNotMatch | 403 | Invalid signature | 签名错误\nTooManyBucketsError | TooManyBuckets | 400 | Too many buckets on this user | 用户的 Bucket 数目超过限制\nRequestError | RequestError | -1 | network error | 网络出现中断或异常\nConnectionTimeoutError | ConnectionTimeoutError | -2 | request connect timeout | 请求连接超时\nSecurityTokenExpiredError | SecurityTokenExpired | 403 | sts Security Token Expired | sts Security Token 超时失效\n\n[generator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n[oss-sts]: https://help.aliyun.com/document_detail/oss/practice/ram_guide.html\n[browser-sample]: https://github.com/rockuw/oss-in-browser\n[oss-multipart]: https://help.aliyun.com/document_detail/oss/api-reference/multipart-upload/InitiateMultipartUpload.html\n[disabled-browser-headers]: https://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n",
      "readmeFilename": "README.md",
      "gitHead": "b0c6771c3c5f9455d0319480b6b4c651f9c6ea39",
      "_id": "ali-oss@6.15.2-parallel.1",
      "_nodeVersion": "14.17.0",
      "_npmVersion": "6.14.13",
      "dist": {
        "integrity": "sha512-LEjHiNfY5Sm0+Zth/1mYeCK5fbr7qDl89sgdEF1DzLSQ4m+nbmw8I1Heyu/ao7wGcSCZKHaqxMvCTWOMSxuGPw==",
        "shasum": "7e2fa956e260e82e32485e44683811a5092c6174",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.15.2-parallel.1.tgz",
        "fileCount": 212,
        "unpackedSize": 2313634,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgyGg+CRA9TVsSAnZWagAADlkP/AwCw8pwiWd0Pdy0x4xB\nnpe8lauZ+A0Lrn/QH1pv+cjTk6U0xdwqRzDEzdZjUFLZUJPaLI/o0ZoMNUoD\nvgD38abenrY299loL8Z99XaF+ZK7uZhahC7r0n6+VukZNj9/UOfd73ebB8HE\nOyGFKkz0yN9+UITqLwqZKZmEU1UWRcIBur6a6UkSsuh0tiPvAK6U5hbY4esw\n0OSNIwZzXS47eJS1rCKp1FYB2Q9lOS4sPwNNj0a60g4VB7taSGbMsWjGtySn\ney/E1OifFLa38rUTnR9zyueXr5GvFcBeBtfpBlRjZlTDt7UZo0E1263fImP1\n7eYKEBTtkF5EVMYlr/TD6n60jJraYWBk1g9UjFG6TyQ6B/hs3qxWFjYZUhsI\nE2hjQA2ZePGbF8SWgN7HlWYxf1dvhCdqYFIvhFrVyW7b0d4JaupNfXfoAZzX\nLkJ6z0i9oOocHZlRX3Y429J4ccl+Avlt1XIc53f/I10Onhtyeza90+ZlJx4e\nfqpjH4M7b39BUPas/MPIywXWJrOaP9VfJPHUa09jWHG+prd77zCoNu5BAUgE\nurNj6bTZQ/HdOyWmrFxydQs8S7grO1ZAYwyPU7cFEQ5BPpU4gwZPOzoxJz4i\nkIjTnIidXbTdVU1/M5rfADQjHhpkpp7ANxqyF1Uc8LfTNfNFjKVFVtbOcIzm\nd/Hl\r\n=neSm\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDQPzS/CIpfQFHSqFgyqu5DFmIcGavRRQzWrYfA1IgjYQIgN5aCxBPpLw+5vyz5/+tC63C+5X46XiyH+UMc2KunCNQ="
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.15.2-parallel.1_1623746622123_0.6353257066330782"
      },
      "_hasShrinkwrap": false
    },
    "6.15.2-parallel.2": {
      "name": "ali-oss",
      "version": "6.15.2-parallel.2",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "npm run tsc && mocha -t 60000 -r thunk-mocha -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "npm run tsc && nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^16.5.2",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "immediate": "^3.3.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "1.454.0",
        "standard-version": "^8.0.1",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "readme": "oss-js-sdk\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage][cov-image]][cov-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/ali-oss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/ali-oss\n[travis-image]: https://img.shields.io/travis/ali-sdk/ali-oss/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ali-sdk/ali-oss.svg?branch=master\n[cov-image]: http://codecov.io/github/ali-sdk/ali-oss/coverage.svg?branch=master\n[cov-url]: http://codecov.io/github/ali-sdk/ali-oss?branch=master\n[david-image]: https://img.shields.io/david/ali-sdk/ali-oss.svg?style=flat-square\n[david-url]: https://david-dm.org/ali-sdk/ali-oss\n\naliyun OSS(Object Storage Service) js client for Node and Browser env.\n\n`NOTE`： For SDK `5.X` document, please go to [README.md](https://github.com/ali-sdk/ali-oss/blob/5.x/README.md)\n\n## Install\n\n```bash\nnpm install ali-oss --save\n```\n\n## Compatibility\n\n### Node\nNode.js >= 8.0.0 required. You can use 4.x in Node.js < 8.\n\n### Browser\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n\n`Note`:\n- For Lower browsers you can refer to [PostObject](https://help.aliyun.com/document_detail/31988.html), if you want to see more practices ,please refer to [Web Post](https://help.aliyun.com/document_detail/31923.html)\n\n### QA\nYou can join DingDing Talk Group, [Group Link](https://qr.dingtalk.com/action/joingroup?code=v1,k1,inkSDqCxm7LilkaR/kknRVBDQ8PDA0Lj5hj4Cf9io3w=&_dt_no_comment=1&origin=11)\n\n<img src=\"task/dingding.jpg\" height=\"400\" title=\"dingding\" width=\"300\">\n\n## License\n\n[MIT](LICENSE)\n\n# OSS Usage\n\nOSS, Object Storage Service. Equal to well known Amazon [S3](http://aws.amazon.com/s3/).\n\nAll operation use es7 async/await to implement. All api is async function.\n\n## Summary\n\n- [Node Usage](#node-usage)\n- [Browser Usage](#browser-usage)\n- [Data Regions](#data-regions)\n- [Create Account](#create-account)\n- [Create A Bucket Instance](#create-a-bucket-instance)\n  - [oss(options)](#ossoptions)\n- [Bucket Operations](#bucket-operations)\n  - Base\n    - [.listBuckets(query[, options])](#listbucketsquery-options)\n    - [.putBucket(name[, options])](#putbucketname-options)\n    - [.useBucket(name)](#usebucketname)\n    - [.deleteBucket(name[, options])](#deletebucketname-options)\n    - [.getBucketInfo(name)](#getbucketinfoname)\n    - [.getBucketLocation(name)](#getbucketlocationname)\n  - ACL\n    - [.putBucketACL(name, acl[, options])](#putbucketaclname-acl-options)\n    - [.getBucketACL(name[, options])](#getbucketaclname-options)\n  - Logging\n    - [.putBucketLogging(name, prefix[, options])](#putbucketloggingname-prefix-options)\n    - [.getBucketLogging(name[, options])](#getbucketloggingname-options)\n    - [.deleteBucketLogging(name[, options])](#deletebucketloggingname-options)\n  - Website\n    - [.putBucketWebsite(name, config[, options])](#putbucketwebsitename-config-options)\n    - [.getBucketWebsite(name[, options])](#getbucketwebsitename-options)\n    - [.deleteBucketWebsite(name, region[, options])](#deletebucketwebsitename-options)\n  - Referer\n    - [.putBucketReferer(name, allowEmpty, referers[, options])](#putbucketreferername-allowempty-referers-options)\n    - [.getBucketReferer(name[, options])](#getbucketreferername-options)\n    - [.deleteBucketReferer(name[, options])](#deletebucketreferername-options)\n  - Lifecycle\n    - [.putBucketLifecycle(name, rules[, options])](#putbucketlifecyclename-rules-options)\n    - [.getBucketLifecycle(name[, options])](#getbucketlifecyclename-options)\n    - [.deleteBucketLifecycle(name[, options])](#deletebucketlifecyclename-options)\n  - CORS\n    - [.putBucketCORS(name, rules[, options])](#putbucketcorsname-rules-options)\n    - [.getBucketCORS(name[, options])](#getbucketcorsname-options)\n    - [.deleteBucketCORS(name[, options])](#deletebucketcorsname-options)\n  - RequestPayment\n    - [.getBucketRequestPayment(bucketName[, options])](#getbucketrequestpaymentbucketname-options)\n    - [.putBucketRequestPayment(bucketName, payer[, options])](#putBucketRequestpaymentbucketname-payer-options)\n  - BucketEncryption\n    - [.putBucketEncryption(name[, rules])](#putbucketencryptionname-rules)\n    - [.getBucketEncryption(name)](#getbucketencryptionname)\n    - [.deleteBucketEncryption(name)](#deletebucketencryptionname)\n  - tagging\n    - [.putBucketTags(name, tag[, options])](#putBucketTagsname-tag-options)\n    - [.getBucketTags(name, [, options])](#getBucketTagsname-options)\n    - [.deleteBucketTags(name, [, options])](#deleteBucketTagsname-options)\n  - policy\n    - [.putBucketPolicy(name, policy[, options])](#putBucketPolicyname-policy-options)\n    - [.getBucketPolicy(name, [, options])](#getBucketPolicyname-options)\n    - [.deleteBucketPolicy(name, [, options])](#deleteBucketPolicyname-options)\n  - versioning\n    - [.getBucketVersioning(name, [, options])](#getBucketVersioningname-options)\n    - [.putBucketVersioning(name, status[, options])](#putBucketVersioningname-status-options)\n  - inventory\n      - [.getBucketInventory(name, inventoryId[, options])](#getBucketInventoryname-inventoryid-options)\n      - [.putBucketInventory(name, inventory[, options])](#putBucketInventoryname-inventory-options)\n      - [.deleteBucketInventory(name, inventoryId[, options])](#deleteBucketInventoryname-inventoryid-options)\n      - [.listBucketInventory(name, [, options])](#listBucketInventoryname-options)\n  - worm\n    - [.abortBucketWorm(name[, options])](#abortBucketWormname-options)\n    - [.completeBucketWorm(name, wormId[, options])](#completeBucketWormname-wormId-options)\n    - [.extendBucketWorm(name, wormId, days[, options])](#extendBucketWormname-wormId-days-options)\n    - [.getBucketWorm(name[, options])](#getBucketWormname-options)\n    - [.initiateBucketWorm(name, days[, options])](#initiateBucketWormname-days-options)\n\n- [Object Operations](#object-operations)\n  - [.list(query[, options])](#listquery-options)\n  - [.listV2(query[, options])](#listV2query-options)\n  - [.getBucketVersions(query[, options])](#getBucketVersionsquery-options)\n  - [.put(name, file[, options])](#putname-file-options)\n  - [.putStream(name, stream[, options])](#putstreamname-stream-options)\n  - [.append(name, file[, options])](#appendname-file-options)\n  - [.getObjectUrl(name[, baseUrl])](#getobjecturlname-baseurl)\n  - [.generateObjectUrl(name[, baseUrl])](#generateobjecturlname-baseurl)\n  - [.head(name[, options])](#headname-options)\n  - [.getObjectMeta(name[, options])](#getobjectmetaname-options)\n  - [.get(name[, file, options])](#getname-file-options)\n  - [.getStream(name[, options])](#getstreamname-options)\n  - [.delete(name[, options])](#deletename-options)\n  - [.copy(name, sourceName[, sourceBucket, options])](#copyname-sourcename-sourcebucket-options)\n  - [.putMeta(name, meta[, options])](#putmetaname-meta-options)\n  - [.deleteMulti(names[, options])](#deletemultinames-options)\n  - [.signatureUrl(name[, options])](#signatureurlname-options)\n  - [.putACL(name, acl[, options])](#putaclname-acl-options)\n  - [.getACL(name[, options])](#getaclname-options)\n  - [.restore(name[, options])](#restorename-options)\n  - [.putSymlink(name, targetName[, options])](#putsymlinkname-targetname-options)\n  - [.getSymlink(name[, options])](#getsymlinkname-options)\n  - [.initMultipartUpload(name[, options])](#initmultipartuploadname-options)\n  - [.uploadPart(name, uploadId, partNo, file, start, end[, options])](#uploadpartname-uploadid-partno-file-start-end-options)\n  - [.uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])](#uploadpartcopyname-uploadid-partno-range-sourcedata-options)\n  - [.completeMultipartUpload(name, uploadId, parts[, options])](#completemultipartuploadname-uploadid-parts-options)\n  - [.multipartUpload(name, file[, options])](#multipartuploadname-file-options)\n  - [.multipartUploadCopy(name, sourceData[, options])](#multipartuploadcopyname-sourcedata-options)\n  - [.listParts(name, uploadId[, query, options])](#listpartsname-uploadid-query-options)\n  - [.listUploads(query[, options])](#listuploadsquery-options)\n  - [.abortMultipartUpload(name, uploadId[, options])](#abortmultipartuploadname-uploadid-options)\n  - [.calculatePostSignature(policy)](#calculatePostSignaturepolicy)\n  - [.getObjectTagging(name, [, options])](#getObjectTaggingname-options)\n  - [.putObjectTagging(name, tag[, options])](#putObjectTaggingname-tag-options)\n  - [.deleteObjectTagging(name, [, options])](#deleteObjectTaggingname-options)\n- [RTMP Operations](#rtmp-operations)\n  - [.putChannel(id, conf[, options])](#putchannelid-conf-options)\n  - [.getChannel(id[, options])](#getchannelid-options)\n  - [.deleteChannel(id[, options])](#deletechannelid-options)\n  - [.putChannelStatus(id, status[, options])](#putchannelstatusid-status-options)\n  - [.getChannelStatus(id[, options])](#getchannelstatusid-options)\n  - [.listChannels(query[, options])](#listchannelsquery-options)\n  - [.getChannelHistory(id[, options])](#getchannelhistoryid-options)\n  - [.createVod(id, name, time[, options])](#createvodid-name-time-options)\n  - [.getRtmpUrl(channelId[, options])](#getrtmpurlchannelid-options)\n- [Create A Image Service Instance](#create-a-image-service-instance)\n  - [oss.ImageClient(options)](#ossimageclientoptions)\n- [Image Operations](#image-operations)\n  - [imgClient.get(name, file[, options])](#imgclientgetname-file-options)\n  - [imgClient.getStream(name[, options])](#imgclientgetstreamname-options)\n  - [imgClient.getExif(name[, options])](#imgclientgetexifname-options)\n  - [imgClient.getInfo(name[, options])](#imgclientgetinfoname-options)\n  - [imgClient.putStyle(name, style[, options])](#imgclientputstylename-style-options)\n  - [imgClient.getStyle(name[, options])](#imgclientgetstylename-options)\n  - [imgClient.listStyle([options])](#imgclientliststyleoptions)\n  - [imgClient.deleteStyle(name[, options])](#imgclientdeletestylename-options)\n  - [imgClient.signatureUrl(name)](#imgclientsignatureurlname)\n- [Known Errors](#known-errors)\n\n## Node Usage\n\n### Compatibility\n- Node: >= 8.0.0\n\n### Basic usage\n1.install SDK using npm\n```\nnpm install ali-oss --save\n```\n2.for example:\n```js\nconst OSS = require('ali-oss');\nconst client = new OSS({\n  region: '<oss region>',\n  accessKeyId: '<Your accessKeyId>',\n  accessKeySecret: '<Your accessKeySecret>',\n  bucket: '<Your bucket name>'\n});\n```\n## Browser Usage\n\nYou can use most of the functionalities of `ali-oss` in browser with\nsome exceptions:\n\n- put object with streaming: no chunked encoding, we use multipart\n  upload instead\n- get object to local file: we cannot manipulate file system in\n  browser, we provide signed object url for downloading needs\n- bucket operations(listBuckets, putBucketLogging, etc) will fail: OSS\n  server currently do not support CORS requests for bucket operations\n  (will probably be fixed later)\n\n### Compatibility\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n    >Note: Because some browsers do not support promises, you need to introduce promise compatible libraries.<br>\n    For example: IE10 and IE11 need to introduce a promise-polyfill.\n\n### Setup\n\n#### Bucket setup\n\nAs browser-side javascript involves CORS operations. You need to setup\nyour bucket CORS rules to allow CORS operations:\n\n- set allowed origins to '\\*'\n- allowed methods to 'PUT, GET, POST, DELETE, HEAD'\n- set allowed headers to '\\*'\n- expose 'ETag' in expose headers\n\n#### STS setup\n\nAs we don't want to expose the accessKeyId/accessKeySecret in the\nbrowser, a [common practice][oss-sts] is to use STS to grant temporary\naccess.\n\n### Basic usage\n\nInclude the sdk lib in the `<script>` tag and you have `OSS` available\nfor creating client.\n\n```html\n // x.x.x The specific version number represented\n // we recommend introducing offline resources, because the usability of online resources depends on the stability of the cdn server.\n <!-- Introducing online resources -->\n <script src=\"http://gosspublic.alicdn.com/aliyun-oss-sdk-x.x.x.min.js\"></script>\n <!-- Introducing offline resources -->\n <script src=\"./aliyun-oss-sdk-x.x.x.min.js\"></script>\n\n<script type=\"text/javascript\">\n  const client = new OSS({\n    region: 'oss-cn-hangzhou',\n    accessKeyId: '<access-key-id>',\n    accessKeySecret: '<access-key-secret>',\n    bucket: '<bucket-name>',\n    stsToken: '<security-token>'\n  });\n\n  client.list().then((result) => {\n    console.log('objects: %j', result.objects);\n    return client.put('my-obj', new OSS.Buffer('hello world'));\n  }).then((result) => {\n    console.log('put result: %j', result);\n    return client.get('my-obj');\n  }).then((result) => {\n    console.log('get result: %j', result.content.toString());\n  });\n</script>\n```\nThe full sample can be found [here][browser-sample].\n\n### How to build\n\n```bash\nnpm run build-dist\n```\n\nAnd see the build artifacts under `dist/`.\n\n\n## Data Regions\n\n[OSS current data regions](https://help.aliyun.com/document_detail/oss/user_guide/endpoint_region.html).\n\nregion | country | city | endpoint | internal endpoint\n---  | ---     | ---  | --- | ---\noss-cn-hangzhou | China | HangZhou | oss-cn-hangzhou.aliyuncs.com | oss-cn-hangzhou-internal.aliyuncs.com\noss-cn-shanghai | China | ShangHai | oss-cn-shanghai.aliyuncs.com | oss-cn-shanghai-internal.aliyuncs.com\noss-cn-qingdao | China | QingDao | oss-cn-qingdao.aliyuncs.com | oss-cn-qingdao-internal.aliyuncs.com\noss-cn-beijing | China | BeiJing | oss-cn-beijing.aliyuncs.com | oss-cn-beijing-internal.aliyuncs.com\noss-cn-shenzhen | China | ShenZhen | oss-cn-shenzhen.aliyuncs.com | oss-cn-shenzhen-internal.aliyuncs.com\noss-cn-hongkong | China | HongKong | oss-cn-hongkong.aliyuncs.com | oss-cn-hongkong-internal.aliyuncs.com\noss-us-west-1 | US | Silicon Valley | oss-us-west-1.aliyuncs.com | oss-us-west-1-internal.aliyuncs.com\noss-ap-southeast-1 | Singapore | Singapore | oss-ap-southeast-1.aliyuncs.com | oss-ap-southeast-1-internal.aliyuncs.com\n\n## Create Account\n\nGo to [OSS website](http://www.aliyun.com/product/oss/?lang=en), create a new account for new user.\n\nAfter account created, you can create the OSS instance and get the `accessKeyId` and `accessKeySecret`.\n\n## Create A Bucket Instance\n\nEach OSS instance required `accessKeyId`, `accessKeySecret` and `bucket`.\n\n## oss(options)\n\nCreate a Bucket store instance.\n\noptions:\n\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- [stsToken] {String} used by temporary authorization, detail [see](https://www.alibabacloud.com/help/doc-detail/32077.htm)\n- [refreshSTSToken] {Function} used by auto set `stsToken`、`accessKeyId`、`accessKeySecret` when sts info expires. return value must be object contains `stsToken`、`accessKeyId`、`accessKeySecret`\n- [refreshSTSTokenInterval] {number} use time (ms) of refresh STSToken interval it should be \n  less than sts info expire interval, default is 300000ms(5min)\n  when sts info expires. return value must be object contains `stsToken`、`accessKeyId`、`accessKeySecret`\n- [bucket] {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [endpoint] {String} oss region domain. It takes priority over `region`. Set as extranet domain name, intranet domain name, accelerated domain name, etc. according to different needs. please see [endpoints](https://www.alibabacloud.com/help/doc-detail/31837.htm)\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`.\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`.\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [secure] {Boolean} instruct OSS client to use HTTPS (secure: true) or HTTP (secure: false) protocol.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`.\n- [cname] {Boolean}, default false, access oss with custom domain name. if true, you can fill `endpoint` field with your custom domain name,\n- [isRequestPay] {Boolean}, default false, whether request payer function of the bucket is open, if true, will send headers `'x-oss-request-payer': 'requester'` to oss server.\n  the details you can see [requestPay](https://help.aliyun.com/document_detail/91337.htm)\n- [useFetch] {Boolean}, default false, it just work in Browser, if true,it means upload object with \n`fetch` mode ,else `XMLHttpRequest`\n- [enableProxy] {Boolean}, Enable proxy request, default is false.\n- [proxy] {String | Object}, proxy agent uri or options, default is null.\n- [retryMax] {Number}, used by auto retry send request count when request error is net error or timeout.  **_NOTE:_**  Not support `put` with stream, `putStream`, `append` with stream because the stream can only be consumed once\n\nexample:\n\n1. basic usage\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\n```\n2. use accelerate endpoint\n- Global accelerate endpoint: oss-accelerate.aliyuncs.com\n- Accelerate endpoint of regions outside mainland China: oss-accelerate-overseas.aliyuncs.com\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  endpoint: 'oss-accelerate.aliyuncs.com',\n});\n```\n\n3. use custom domain\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  cname: true,\n  endpoint: 'your custome domain',\n});\n```\n\n4. use STS and refreshSTSToken\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your STS key',\n  accessKeySecret: 'your STS secret',\n  stsToken: 'your STS token',\n  refreshSTSToken: async () => {\n    const info = await fetch('you sts server');\n    return {\n      accessKeyId: info.accessKeyId,\n      accessKeySecret: info.accessKeySecret,\n      stsToken: info.stsToken\n    }\n  },\n  refreshSTSTokenInterval: 300000\n});\n```\n\n5. retry request with stream\n```js\nfor (let i = 0; i <= store.options.retryMax; i++) {\n  try {\n    const result = await store.putStream(\"<example-object>\", fs.createReadStream(\"<example-path>\"));\n    console.log(result);\n    break; // break if success\n  } catch (e) {\n    console.log(e);\n  }\n}\n```\n\n## Bucket Operations\n\n### .listBuckets(query[, options])\n\nList buckets in this account.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search buckets using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [max-keys] {String|Number} max buckets, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return buckets list on `buckets` properties.\n\n- buckets {Array<BucketMeta>} bucket meta info list\n  Each `BucketMeta` will contains blow properties:\n    - name {String} bucket name\n    - region {String} bucket store data region, e.g.: `oss-cn-hangzhou-a`\n    - creationDate {String} bucket create GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - storageClass {String} e.g.: `Standard`, `IA`, `Archive`\n- owner {Object} object owner, including `id` and `displayName`\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 buckets\n\n```js\nstore.listBuckets({\n  \"max-keys\": 10\n}).then((result) => {\n  console.log(result);\n});\n\n```\n\n### .putBucket(name[, options])\n\nCreate a new bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket exists and not belong to current account, will throw BucketAlreadyExistsError.\n  If bucket not exists, will create a new bucket and set it's ACL.\n- [options] {Object} optional parameters\n  - [acl] {String} include `private`,`public-read`,`public-read-write`\n  - [storageClass] {String} the storage type include (Standard,IA,Archive)\n  - [dataRedundancyType] {String} default `LRS`, include `LRS`,`ZRS`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the bucket name on `bucket` properties.\n\n- bucket {String} bucket name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Create a bucket name `helloworld` location on HongKong\n\n```js\nstore.putBucket('helloworld').then((result) => {\n  // use it by default\n  store.useBucket('helloworld');\n});\n```\n\n- Create a bucket name `helloworld` location on HongKong StorageClass `Archive`\n\n```js\nawait store.putBucket('helloworld', { StorageClass: 'Archive' });\n// use it by default\nstore.useBucket('helloworld');\n```\n\n### .deleteBucket(name[, options])\n\nDelete an empty bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket is not empty, will throw BucketNotEmptyError.\n  If bucket is not exists, will throw NoSuchBucketError.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete the exists 'helloworld' bucket on 'oss-cn-hongkong'\n\n```js\nstore.deleteBucket('helloworld').then((result) => {});\n```\n\n### .useBucket(name)\n\nUse the bucket.\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.useBucket('helloworld');\n```\n\n### .getBucketInfo(name)\n\nGet bucket information,include CreationDate、ExtranetEndpoint、IntranetEndpoint、Location、Name、StorageClass、\nOwner、AccessControlList、Versioning\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketInfo('helloworld').then( (res) => {\n  console.log(res.bucket)\n})\n```\n\n### .getBucketLocation(name)\n\nGet bucket location\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketLocation('helloworld').then( (res) => {\n  console.log(res.location)\n})\n```\n\n---\n\n### .putBucketACL(name, acl[, options])\n\nUpdate the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- acl {String} access control list, current available: `public-read-write`, `public-read` and `private`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set bucket `helloworld` to `public-read-write`\n\n```js\nstore.putBucketACL('helloworld', 'public-read-write').then((result) => {\n});\n```\n\n### .getBucketACL(name[, options])\n\nGet the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld`\n\n```js\nstore.getBucketACL('helloworld').then((result) => {\n  console.log(result.acl);\n});\n```\n\n---\n\n### .putBucketLogging(name, prefix[, options])\n\nUpdate the bucket logging settings.\nLog file will create every one hour and name format: `<prefix><bucket>-YYYY-mm-DD-HH-MM-SS-UniqueString`.\n\nparameters:\n\n- name {String} bucket name\n- [prefix] {String} prefix path name to store the log files\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Enable bucket `helloworld` logging and save with prefix `logs/`\n\n```js\nstore.putBucketLogging('helloworld', 'logs/').then((result) => {\n});\n```\n\n### .getBucketLogging(name[, options])\n\nGet the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- enable {Boolean} enable logging or not\n- prefix {String} prefix path name to store the log files, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld` logging settings\n\n```js\nstore.getBucketLogging('helloworld').then((result) => {\n  console.log(result.enable, result.prefix);\n});\n```\n\n### .deleteBucketLogging(name[, options])\n\nDelete the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketWebsite(name, config[, options])\n\nSet the bucket as a static website.\n\nparameters:\n\n- name {String} bucket name\n- config {Object} website config, contains blow properties:\n  - index {String} default page, e.g.: `index.html`\n  - [error] {String} error page, e.g.: 'error.html'\n  - [supportSubDir] {String} default vaule false\n  - [type] {String} default value 0\n  - [routingRules] {Array} RoutingRules\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketWebsite('hello', {\n  index: 'index.html'\n}).then((result) => {\n});\n```\n\n### .getBucketWebsite(name[, options])\n\nGet the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- index {String} index page\n- error {String} error page, maybe `null`\n- supportSubDir {String}\n- type {String}\n- routingRules {Array}\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketWebsite(name[, options])\n\nDelete the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketReferer(name, allowEmpty, referers[, options])\n\nSet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list, e.g.:\n  ```js\n  [\n    'https://npm.taobao.org',\n    'http://cnpmjs.org'\n  ]\n  ```\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketReferer('hello', false, [\n  'https://npm.taobao.org',\n  'http://cnpmjs.org'\n]).then((result) => {\n});\n```\n\n### .getBucketReferer(name[, options])\n\nGet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketReferer(name[, options])\n\nDelete the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketLifecycle(name, rules[, options])\n\nSet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains blow properties:\n  - [id] {String} rule id, if not set, OSS will auto create it with random string.\n  - prefix {String} store prefix\n  - status {String} rule status, allow values: `Enabled` or `Disabled`\n  - [expiration] {Object} specifies the expiration attribute of the lifecycle rules for the object.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    - [expiredObjectDeleteMarker] {String} value `true`\n    `createdBeforeDate` and `days`  and `expiredObjectDeleteMarker` must have one.\n  - [abortMultipartUpload] {Object} Specifies the expiration attribute of the multipart upload tasks that are not complete.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `createdBeforeDate` and `days` must have one.\n  - [transition] {Object} Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle.\n    - storageClass {String} Specifies the storage class that objects that conform to the rule are converted into. allow values: `IA` or `Archive`\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `createdBeforeDate` and `days` must have one.\n  - [noncurrentVersionTransition] {Object} Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle.\n    - storageClass {String} Specifies the storage class that history objects that conform to the rule are converted into. allow values: `IA` or `Archive`\n    - noncurrentDays {String} expire after the `noncurrentDays`\n  `expiration`、 `abortMultipartUpload`、 `transition`、 `noncurrentVersionTransition` must have one.\n  - [noncurrentVersionExpiration] {Object} specifies the expiration attribute of the lifecycle rules for the history object.\n    - noncurrentDays {String} expire after the `noncurrentDays`\n  - [tag] {Object} Specifies the object tag applicable to a rule. Multiple tags are supported.\n    - key {String} Indicates the tag key.\n    - value {String} Indicates the tag value.\n    `tag` cannot be used with `abortMultipartUpload`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketLifecycle('hello', [\n  {\n    id: 'delete after one day',\n    prefix: 'logs/',\n    status: 'Enabled',\n    days: 1\n  },\n  {\n    prefix: 'logs2/',\n    status: 'Disabled',\n    date: '2022-10-11T00:00:00.000Z'\n  }\n]).then((result) => {});\n```\n\nexample: for history with noncurrentVersionExpiration\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  expiration: {\n    days: '1'\n  },\n  noncurrentVersionExpiration: {\n    noncurrentDays: '1'\n  }\n}]);\nconsole.log(result)\n```\n\nexample: for history with expiredObjectDeleteMarker\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  expiration: {\n    expiredObjectDeleteMarker: 'true'\n  },\n  noncurrentVersionExpiration: {\n    noncurrentDays: '1'\n  }\n}]);\nconsole.log(result)\n```\n\nexample: for history with noncurrentVersionTransition\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  noncurrentVersionTransition: {\n    noncurrentDays: '10',\n    storageClass: 'IA'\n  }\n}]);\nconsole.log(result)\n```\n\n### .getBucketLifecycle(name[, options])\n\nGet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the lifecycle rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketLifecycle(name[, options])\n\nDelete the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketCORS(name, rules[, options])\n\nSet CORS rules of the bucket object\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains below properties:\n  - allowedOrigin {String/Array} configure for Access-Control-Allow-Origin header\n  - allowedMethod {String/Array} configure for Access-Control-Allow-Methods header\n  - [allowedHeader] {String/Array} configure for Access-Control-Allow-Headers header\n  - [exposeHeader] {String/Array} configure for Access-Control-Expose-Headers header\n  - [maxAgeSeconds] {String} configure for Access-Control-Max-Age header\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketCORS('hello', [\n  {\n    allowedOrigin: '*',\n    allowedMethod: [\n      'GET',\n      'HEAD',\n    ],\n  }\n]).then((result) => {});\n```\n\n### .getBucketCORS(name[, options])\n\nGet CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the CORS rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketCORS(name[, options])\n\nDelete CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .getBucketRequestPayment(bucketName[, options])\n\nget RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String} bucket name\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- payer {String} payer, BucketOwner or Requester\n- res {Object} response info, including\n  - data {Buffer} xml\n\n---\n\n### .putBucketRequestPayment(bucketName, payer[, options])\n\nput RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String}\n- payer {String} payer\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketEncryption(name, rules)\n\nput BucketEncryption value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [rules] {Object} parameters\n  - SSEAlgorithm {String} encryption type, expect AES256 or KMS\n  - {KMSMasterKeyID} {String} needed when encryption type is KMS\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketEncryption(name)\n\nget BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n- encryption {Object} rules\n  - SSEAlgorithm {String} encryption type, AES256 or KMS\n  - {KMSMasterKeyID} {String} will be return when encryption type is KMS\n\n---\n\n### .deleteBucketEncryption(name)\n\ndelete BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketTags(name, tag[, options])\n\nAdds tags for a bucket or modify the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketTags(name[, options])\n\nObtains the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- tag {Object} the tag of object\n- res {Object} response info\n\n---\n\n### .deleteBucketTags(name[, options])\n\nDeletes the tags added for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketPolicy(name, policy[, options])\n\nAdds or modify policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- policy {Object} bucket policy\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\nexample:\n```js\nconst policy = {\n  Version: '1',\n  Statement: [\n    {\n      Action: ['oss:PutObject', 'oss:GetObject'],\n      Effect: 'Deny',\n      Principal: ['1234567890'],\n      Resource: ['acs:oss:*:1234567890:*/*']\n    }\n  ]\n};\nconst result = await store.putBucketPolicy(bucket, policy);\nconsole.log(result);\n```\n---\n\n### .getBucketPolicy(name[, options])\n\nObtains the policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- policy {Object} the policy of bucket, if not exist, the value is null\n- res {Object} response info\n- status {Number} response status\n\n---\n\n### .deleteBucketPolicy(name[, options])\n\nDeletes the policy added for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n### .getBucketVersioning(name[, options])\n\nObtains the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- versionStatus {String | undefined} version status, `Suspended` or `Enabled`. default value: `undefined`\n- res {Object} response info\n\n---\n\n### .putBucketVersioning(name, status[, options])\n\nset the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- status {String} version status, allow values: `Enabled` or `Suspended`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n\n### .getBucketInventory(name, inventoryId[, options])\n\nget bucket inventory by inventory-id\n\nparameters:\n\n- name {String} the bucket name\n- inventoryId {String} inventory-id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- inventory {Inventory}\n- status {Number} response status\n- res {Object} response info\n\n```js\nasync function getBucketInventoryById() {\n  try {\n    const result = await client.getBucketInventory('bucket', 'inventoryid');\n    console.log(result.inventory)\n  } catch (err) {\n    console.log(err)\n  }\n}\n\ngetBucketInventoryById();\n```\n\n### putBucketInventory(name, inventory[, options])\n\nset bucket inventory\n\nparameters:\n\n- name {String} the bucket name\n- inventory {Inventory} inventory config\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n```ts\ntype Field = 'Size | LastModifiedDate | ETag | StorageClass | IsMultipartUploaded | EncryptionStatus';\ninterface Inventory {\n  id: string;\n  isEnabled: true | false;\n  prefix?: string;\n  OSSBucketDestination: {\n    format: 'CSV';\n    accountId: string;\n    rolename: string;\n    bucket: string;\n    prefix?: string;\n    encryption?:\n    | {'SSE-OSS': ''}\n    | {\n      'SSE-KMS': {\n        keyId: string;\n      };\n    };\n  };\n  frequency: 'Daily' | 'Weekly';\n  includedObjectVersions: 'Current' | 'All';\n  optionalFields?: {\n    field?: Field[];\n  };\n}\n```\n```js\nconst inventory = {\n  id: 'default',\n  isEnabled: false, // `true` | `false`\n  prefix: 'ttt', // filter prefix\n  OSSBucketDestination: {\n    format: 'CSV',\n    accountId: '1817184078010220',\n    rolename: 'AliyunOSSRole',\n    bucket: 'your bucket',\n    prefix: 'test',\n    //encryption: {'SSE-OSS': ''},\n    /*\n      encryption: {\n      'SSE-KMS': {\n        keyId: 'test-kms-id';\n      };, \n    */\n  },\n  frequency: 'Daily', // `WEEKLY` | `Daily`\n  includedObjectVersions: 'All', // `All` | `Current`\n  optionalFields: {\n    field: [\"Size\", \"LastModifiedDate\", \"ETag\", \"StorageClass\", \"IsMultipartUploaded\", \"EncryptionStatus\"]\n  },\n}\n\nasync function putInventory(){\n  const bucket = 'Your Bucket Name';\n  try {\n    await client.putBucketInventory(bucket, inventory);\n  } catch(err) {\n    console.log(err);\n  }\n}\n\nputInventory()\n```\n\n### deleteBucketInventory(name, inventoryId[, options])\n\ndelete bucket inventory by inventory-id\n\nparameters:\n\n- name {String} the bucket name\n- inventoryId {String} inventory-id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n### listBucketInventory(name[, options])\n\nlist bucket inventory\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n  - continuationToken used by search next page\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\nexample: \n\n```js\nasync function listBucketInventory() {\n  const bucket = 'Your Bucket Name';\n  let nextContinuationToken;\n  // list all inventory of the bucket\n  do {\n    const result = await client.listBucketInventory(bucket, nextContinuationToken);\n    console.log(result.inventoryList);\n    nextContinuationToken = result.nextContinuationToken;\n  } while (nextContinuationToken)\n}\n\nlistBucketInventory();\n```\n\n### .abortBucketWorm(name[, options])\n\nused to delete an unlocked retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .completeBucketWorm(name, wormId[, options])\n\nused to lock a retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- wormId {String} worm id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .extendBucketWorm(name, wormId, days[, options])\n\n used to extend the retention period of objects in a bucket whose retention policy is locked.\n\nparameters:\n\n- name {String} the bucket name\n- wormId {String} worm id\n- days {String | Number} retention days\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketWorm(name[, options])\n\n used to query the retention policy information of the specified bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- wormId {String} worm id\n- state {String} `Locked` or `InProgress`\n- days {String} retention days\n- creationDate {String}\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .initiateBucketWorm(name, days[, options])\n\ncreate a retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- days {String | Number}} set retention days\n- [options] {Object} optional args\n\nSuccess will return:\n\n- wormId {String} worm id\n- status {Number} response status\n- res {Object} response info\n\n---\n\n## Object Operations\n\nAll operations function return Promise, except `signatureUrl`.\n\n### .put(name, file[, options])\n\nAdd an object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream|File(only support Browser)|Blob(only support Browser)} object local path, content buffer or ReadStream content instance use in Node, Blob and html5 File\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - See more: [PutObject](https://help.aliyun.com/document_detail/31978.html#title-yxe-96d-x61)\n  - [disabledMD5] {Boolean} default true, it just work in Browser. if false,it means that MD5 is automatically calculated for uploaded files. **_NOTE:_** Synchronous computing tasks will block the main process\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- data {Object} callback server response data, sdk use JSON.parse() return\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through local file path\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/demo.txt', filepath).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/demo.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829244'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through content buffer\n\n```js\nstore.put('ossdemo/buffer', Buffer.from('foo content')).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/buffer',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/buffer',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"xxx\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829243'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .putStream(name, stream[, options])\n\nAdd a stream object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- stream {ReadStream} object ReadStream content instance\n- [options] {Object} optional parameters\n  - [contentLength] {Number} the stream length, `chunked encoding` will be used if absent\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.putStream('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .append(name, file[, options])\n\nAppend an object to the bucket, it's almost same as put, but it can add content to existing object rather than override it.\n\nAll parameters are same as put except for options.position\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [position] {String} specify the position which is the content length of the latest object\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n\nobject:\n\n- name {String} object name\n- url {String} the url of oss\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- nextAppendPosition {String} the next position\n\nexample:\n\n```js\nlet object = await store.append('ossdemo/buffer', Buffer.from('foo'));\n\n// append content to the existing object\nobject = await store.append('ossdemo/buffer', Buffer.from('bar'), {\n  position: object.nextAppendPosition,\n});\n```\n\n### .getObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `endpoint`.\n\ne.g.:\n\n```js\nconst cdnUrl = client.getObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .generateObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `bucket and endpoint `.\nSuggest use generateObjectUrl instead of getObjectUrl.\n\ne.g.:\n\n```js\nconst url = client.generateObjectUrl('foo/bar.jpg');\n// cdnUrl should be `https://${bucketname}.${endpotint}foo/bar.jpg`\n\nconst cdnUrl = client.generateObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .head(name[, options])\n\nHead an object and get the meta info.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status, maybe 200 or 304\n- meta {Object} object user meta, if not set on `put()`, will return null.\n    If return status 304, meta will be null too\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-version-id] return in multiversion\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Head an exists object and get user meta\n\n```js\nawait this.store.put('ossdemo/head-meta', Buffer.from('foo'), {\n  meta: {\n    uid: 1,\n    path: 'foo/demo.txt'\n  }\n});\nconst object = await this.store.head('ossdemo/head-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  meta: {\n    uid: '1',\n    path: 'foo/demo.txt'\n  },\n  res: { ... }\n}\n```\n\n- Head a not exists object\n\n```js\nconst object = await this.store.head('ossdemo/head-meta');\n// will throw NoSuchKeyError\n```\n\n### .getObjectMeta(name[, options])\n\nGet an  object meta info include ETag、Size、LastModified and so on, not return object content.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info, including\n  - headers {Object} response headers\n\nexample:\n\n- Head an exists object and get object meta info\n\n```js\nawait this.store.put('ossdemo/object-meta', Buffer.from('foo'));\nconst object = await this.store.getObjectMeta('ossdemo/object-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  res: { ... }\n}\n```\n\n### .get(name[, file, options])\n\nGet an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the content\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [versionId] {String} the version id of history object\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [responseCacheControl] {String} default `no-cache`, (only support Browser). response-cache-control, will response with HTTP Header `Cache-Control`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Range' get specifying range bytes content, e.g.: `Range: bytes=0-9`\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/demo.txt', filepath);\n```\n\n_ Store object to a writestream\n\n```js\nawait store.get('ossdemo/demo.txt', somestream);\n```\n\n- Get an object content buffer\n\n```js\nconst result = await store.get('ossdemo/demo.txt');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a processed image and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.png';\nawait store.get('ossdemo/demo.png', filepath, {process: 'image/resize,w_200'});\n```\n\n- Get a not exists object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/not-exists-demo.txt', filepath);\n// will throw NoSuchKeyError\n```\n\n- Get a historic version object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nconst versionId = 'versionId string';\nawait store.get('ossdemo/not-exists-demo.txt', filepath, {\n  versionId\n});\n```\n\n### .getStream(name[, options])\n\nGet an object read stream.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object stream\n\n```js\nconst result = await store.getStream('ossdemo/demo.txt');\nresult.stream.pipe(fs.createWriteStream('some file.txt'));\n```\n\n### .delete(name[, options])\n\nDelete an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf delete object not exists, will also delete success.\n\nexample:\n\n- Delete an exists object\n\n```js\nawait store.delete('ossdemo/someobject');\n```\n\n- Delete a not exists object\n\n```js\nawait store.delete('ossdemo/some-not-exists-object');\n```\n\n- Delete a history object or deleteMarker\n\n```js\nconst versionId = 'versionId';\nawait store.delete('ossdemo/some-not-exists-object', { versionId });\n```\n\n### .copy(name, sourceName[, sourceBucket, options])\n\nCopy an object from `sourceName` to `name`.\n\nparameters:\n\n- name {String} object name store on OSS\n- sourceName {String} source object name\n- [sourceBucket] {String} source Bucket. if doesn't exist，`sourceBucket` is same bucket. \n- [options] {Object} optional parameters\n  - [versionId] {String} the version id of history object\n  - [timeout] {Number} the operation timeout\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n    If the `meta` set, will override the source object meta.\n  - [headers] {Object} extra headers\n    - 'If-Match' do copy if source object etag equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' do copy if source object etag not equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-Modified-Since' do copy if source object modified after this time,\n        otherwise throw PreconditionFailedError\n    - 'If-Unmodified-Since' do copy if source object modified before this time,\n        otherwise throw PreconditionFailedError\n    - See more: [CopyObject](https://help.aliyun.com/document_detail/31979.html?#title-tzy-vxc-ncx)\n\nSuccess will return the copy result in `data` property.\n\nobject:\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT string\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf source object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Copy same bucket object\n\n```js\nstore.copy('newName', 'oldName').then((result) => {\n  console.log(result);\n});\n```\n\n- Copy other bucket object\n\n```js\nstore.copy('logo.png', 'logo.png', 'other-bucket').then((result) => {\n  console.log(result);\n});\n```\n\n- Copy historic object\n\n```js\nconst versionId = 'your verisonId'\nstore.copy('logo.png', 'logo.png', 'other-bucket', { versionId }).then((result) => {\n  console.log(result);\n});\n```\n\n### .putMeta(name, meta[, options])\n\nSet an exists object meta.\n\nparameters:\n\n- name {String} object name store on OSS\n- meta {Object} user meta, will send with `x-oss-meta-` prefix string\n  e.g.: `{ uid: 123, pid: 110 }`\n  If `meta: null`, will clean up the exists meta\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the putMeta result in `data` property.\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Update exists object meta\n\n```js\nconst result = await store.putMeta('ossdemo.txt', {\n  uid: 1, pid: 'p123'\n});\nconsole.log(result);\n```\n\n- Clean up object meta\n\n```js\nawait store.putMeta('ossdemo.txt', null);\n```\n\n### .deleteMulti(names[, options])\n\nDelete multi objects in one request.\n\nparameters:\n\n- names {Array<Object>} object names, max 1000 objects in once.\n  - key {String} object name\n  - [versionId] {String} the version id of history object or deleteMarker\n- [options] {Object} optional parameters\n  - [quiet] {Boolean} quiet mode or verbose mode, default is `false`, verbose mode\n    quiet mode: if all objects delete succes, return emtpy response.\n      otherwise return delete error object results.\n    verbose mode: return all object delete results.\n  - [timeout] {Number} the operation timeout\n\nSuccess will return delete success objects in `deleted` property.\n\n- [deleted] {Array<Object>} deleted object or deleteMarker info list\n  - [Key] {String} object name\n  - [VersionId] {String} object versionId\n  - [DeleteMarker] {String} generate or delete marker\n  - [DeleteMarkerVersionId] {String} marker versionId \n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete multi objects in quiet mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3'], {\n  quiet: true\n});\n```\n\n- Delete multi objects in verbose mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3']);\n```\n\n- Delete multi objects in multiversion\n\n```js\nconst obj1 = {\n  key: 'key1',\n  versionId: 'versionId1'\n}\nconst obj2 = {\n  key: 'key2',\n  versionId: 'versionId2'\n}\nconst result = await store.deleteMulti([obj1, obj2]);\n```\n\n### .list(query[, options])\n\nList objects in the bucket.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 objects\n\n```js\nconst result = await store.list();\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nconst result = await store.list({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nconst result = await store.list({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n### .listV2(query[, options])\n\nList objects in the bucket.(recommended)\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [continuation-token] (continuationToken) {String} search start from `continuationToken`, including `continuationToken` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n  - [start-after] {String} specifies the Start-after value from which to start the list. The names of objects are returned in alphabetical order.\n  - [fetch-owner] {Boolean} specifies whether to include the owner information in the response.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n  - name {String} object name on oss\n  - url {String} resource url\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n  - type {String} object type, e.g.: `Normal`\n  - size {Number} object size, e.g.: `344606`\n  - storageClass {String} storage class type, e.g.: `Standard`\n  - owner {Object|null} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextContinuationToken {String} next continuation-token string\n- keyCount {Number} The number of keys returned for this request. If Delimiter is specified, KeyCount is the sum of the elements in Key and CommonPrefixes.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n- List top 10 objects\n\n```js\nconst result = await store.listV2({\n  'max-keys': 10\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nconst result = await store.listV2({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nconst result = await store.listV2({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n- List `a/` dir objects, after `a/b` and not include `a/b`\n\n```js\nconst result = await store.listV2({\n  delimiter: '/',\n  prefix: 'a/',\n  'start-after': 'a/b'\n});\nconsole.log(result.objects);\n```\n\n### .getBucketVersions(query[, options])\n\nList the version information of all objects in the bucket, including the delete marker (Delete Marker).\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [versionIdMarker] {String} set the result to return from the version ID marker of the key marker object and sort by the versions\n  - [keyMarker] {String} search start from `keyMarker`, including `keyMarker` key\n  - [encodingType] {String} specifies that the returned content is encoded, and specifies the type of encoding\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [maxKeys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - isLatest {Boolean}\n    - versionId {String} object versionId\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- deleteMarker {Array<ObjectDeleteMarker>} object delete marker info list\n  Each `ObjectDeleteMarker`\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - versionId {String} object versionId\n- isTruncated {Boolean} truncate or not\n- nextKeyMarker (nextMarker) {String} next marker string\n- nextVersionIdMarker (NextVersionIdMarker) {String} next version ID marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- View all versions of objects and deleteMarker of bucket\n\n```js\nconst result = await store.getBucketVersions();\nconsole.log(result.objects);\nconsole.log(result.deleteMarker);\n```\n\n- List from key-marker\n\n```js\nconst result = await store.getBucketVersions({\n  'keyMarker': 'keyMarker'\n});\nconsole.log(result.objects);\n```\n\n- List from the version-id-marker of key-marker\n\n```js\nconst result = await store.getBucketVersions({\n  'versionIdMarker': 'versionIdMarker',\n  'keyMarker': 'keyMarker'\n});\nconsole.log(result.objects);\nconsole.log(result.deleteMarker);\n```\n\n### .signatureUrl(name[, options])\n\nCreate a signature url for download or upload object. When you put object with signatureUrl ,you need to pass `Content-Type`.Please look at the example.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [method] {String} the HTTP method, default is 'GET'\n  - [Content-Type] {String} set the request content type\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [trafficLimit] {Number} traffic limit, range: `819200`~`838860800`.\n  - [subResource] {Object} additional signature parameters in url.\n  - [response] {Object} set the response headers for download\n    - [content-type] {String} set the response content type\n    - [content-disposition] {String} set the response content disposition\n    - [cache-control] {String} set the response cache control\n    - See more: https://help.aliyun.com/document_detail/oss/api-reference/object/GetObject.html\n  - [callback] {Object} set the callback for the operation\n    - url {String} set the url for callback\n    - [host] {String} set the host for callback\n    - body {String} set the body for callback\n    - [contentType] {String} set the type for body\n    - [customValue] {Object} set the custom value for callback,eg. {var1: value1,var2:value2}\n\nSuccess will return signature url.\n\nexample:\n\n- Get signature url for object\n\n```js\nconst url = store.signatureUrl('ossdemo.txt');\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT'\n});\nconsole.log(url);\n\n//  put object with signatureUrl\n// -------------------------------------------------\n\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT',\n  'Content-Type': 'text/plain; charset=UTF-8',\n});\nconsole.log(url);\n\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  response: {\n    'content-type': 'text/custom',\n    'content-disposition': 'attachment'\n  }\n});\nconsole.log(url);\n\n// put operation\n```\n\n- Get a signature url for a processed image\n\n```js\nconst url = store.signatureUrl('ossdemo.png', {\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.png', {\n  expires: 3600,\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n```\n\n### .putACL(name, acl[, options])\n\nSet object's ACL.\n\nparameters:\n\n- name {String} object name\n- acl {String} acl (private/public-read/public-read-write)\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object \n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set an object's ACL\n\n```js\nawait store.putACL('ossdemo.txt', 'public-read');\n```\n\n- Set an history object's ACL\n\n```js\nconst versionId = 'object versionId'\nawait store.putACL('ossdemo.txt', 'public-read', {\n  versionId\n});\n```\n\n### .getACL(name[, options])\n\nGet object's ACL.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get an object's ACL\n\n```js\nconst result = await store.getACL('ossdemo.txt');\nconsole.log(result.acl);\n```\n\n- Get an history object's ACL\n\n```js\nconst versionId = 'object versionId'\nconst result = await store.getACL('ossdemo.txt', { versionId });\nconsole.log(result.acl);\n```\n\n### .restore(name[, options])\n\nRestore Object.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object \n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Restore an object\n\n```js\nconst result = await store.restore('ossdemo.txt');\nconsole.log(result.status);\n```\n\n- Restore an history object\n\n```js\nconst versionId = 'object versionId';\nconst result = await store.restore('ossdemo.txt', { versionId });\nconsole.log(result.status);\n```\n\n### .putSymlink(name, targetName[, options])\n\nPutSymlink\n\nparameters:\n\n- name {String} object name\n- targetName {String} target object name\n- [options] {Object} optional parameters\n  - [storageClass] {String} the storage type include (Standard,IA,Archive)\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers, detail see [PutSymlink](https://help.aliyun.com/document_detail/45126.html#title-x71-l2b-7i8)\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst options = {\n  storageClass: 'IA',\n  meta: {\n    uid: '1',\n    slus: 'test.html' \n  }\n}\nconst result = await store.putSymlink('ossdemo.txt', 'targetName', options)\nconsole.log(result.res)\n```\n\nputSymlink multiversion \n```js\nconst options = {\n  storageClass: 'IA',\n  meta: {\n    uid: '1',\n    slus: 'test.html' \n  },\n}\nconst result = await store.putSymlink('ossdemo.txt', 'targetName', options)\nconsole.log(result.res.headers['x-oss-version-id'])\n```\n\n### .getSymlink(name[, options])\n\nGetSymlink\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n- [versionId] {String} the version id of history object\n\nSuccess will return\n\n- targetName {String} target object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst result = await store.getSymlink('ossdemo.txt')\nconsole.log(result.targetName)\n```\n\nfor history object\n```js\nconst versionId = 'object versionId';\nconst result = await store.getSymlink('ossdemo.txt', { versionId })\nconsole.log(result.targetName)\n```\n\n### .initMultipartUpload(name[, options])\nBefore transmitting data in the Multipart Upload mode,\nyou must call the Initiate Multipart Upload interface to notify the OSS to initiate a Multipart Upload event.\nThe Initiate Multipart Upload interface returns a globally unique Upload ID created by the OSS server to identify this Multipart Upload event.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] Mime file type e.g.: application/octet-stream\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - [x-oss-server-side-encryption]\n    Specify the server-side encryption algorithm used to upload each part of this object,Type: string, Valid value: AES256 `x-oss-server-side-encryption: AES256`<br>\n    if use in browser you should be set cors expose header x-oss-server-side-encryption\n    - See more: [InitiateMultipartUpload](https://help.aliyun.com/document_detail/31992.html?#title-wh0-a2h-rur)\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-server-side-encryption] if set request header x-oss-server-side-encryption, will return\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- uploadId {String} upload id, use for uploadPart, completeMultipart\n\nexample:\n\n```js\n  const result = await store.initMultipartUpload('object');\n  console.log(result);\n```\n\n### .uploadPart(name, uploadId, partNo, file, start, end[, options])\nAfter initiating a Multipart Upload event, you can upload data in parts based on the specified object name and Upload ID.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- file {File|String}  is File or FileName, the whole file<br>\n Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB. <br>\n In Node you can use File or FileName, but in browser you only can use File.\n- start {Number} part start bytes  e.g: 102400\n- end {Number} part end bytes  e.g: 204800\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n  const uploadId = result.uploadId;\n  const file; //the data you want to upload, is a File or FileName(only in node)\n  //if file part is 10\n  const partSize = 100 * 1024;\n  const fileSize = 10 * partSize;//you need to calculate\n  const dones = [];\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const part = await store.uploadPart(name, uploadId, i, file, start, end);\n    dones.push({\n      number: i,\n      etag: part.etag\n    });\n    console.log(part);\n  }\n\n  //end need to call completeMultipartUpload api\n```\n\n### .uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])\nUsing Upload Part Copy, you can copy data from an existing object and upload a part of the data.\nWhen copying a file larger than 1 GB, you must use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- range {String} Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB, range value like `0-102400`\n- sourceData {Object}\n  - sourceKey {String} the source object name\n  - sourceBucketName {String} the source bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n  - [headers] {Object} The following request header is used for the source objects specified by x-oss-copy-source.\n    - [x-oss-copy-source-if-match]  default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]   default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]   default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since]   default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  const partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const range = start + '-' + (end - 1);\n    const part = await store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n- use history object to uploadPartCopy\n\n```js\n  const versionId = 'object versionId';\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n  const partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const range = start + '-' + (end - 1);\n    const part = await store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    }, {\n      versionId\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n### .completeMultipartUpload(name, uploadId, parts[, options])\nAfter uploading all data parts, you must call the Complete Multipart Upload API to complete Multipart Upload for the entire file.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- parts {Array} more part {Object} from uploadPartCopy, , each in the structure:\n  - number {Number} partNo\n  - etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [CompleteMultipartUpload](https://help.aliyun.com/document_detail/31995.html?#title-nan-5y3-rjd)\n\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data , sdk use JSON.parse() return\n\nexample:\n\n```js\n\n  //init multipart\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  //upload part\n  const file; //the data you want to upload, this example size is 10 * 100 * 1024\n  const fileSize;//you need to calculate\n  const partSize = 100 * 1024;//100kb\n  const done = [];\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const data = file.slice(start, end);\n    const part = yield store.uploadPart(name, result.uploadId, i, data);\n    console.log(part);\n    done.push({\n          number: i,\n          etag: part.res.headers.etag\n        });\n  }\n\n  //complete\n  const completeData = await store.completeMultipartUpload(name, result.uploadId, done);\n  console.log(completeData);\n```\n\n\n### .multipartUpload(name, file[, options])\n\nUpload file with [OSS multipart][oss-multipart].<br>\nthis function contains initMultipartUpload, uploadPart, completeMultipartUpload.\nWhen you use multipartUpload api，if you encounter problems with ConnectionTimeoutError, you should handle ConnectionTimeoutError in your business code. How to resolve ConnectionTimeoutError, you can decrease `partSize` size 、 Increase `timeout` 、Retry request ,\nor give tips in your business code;\n\nparameters:\n\n- name {String} object name\n- file {String|File(only support Browser)|Blob(only support Browser)|Buffer} file path or HTML5 Web File or web Blob or content buffer\n- [options] {Object} optional args\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part, defalut `1024 * 1024`(1MB), minimum `100 * 1024`(100KB)\n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n    - file {File} The file object selected by the user, if the browser is restarted, it needs the user to manually trigger the settings\n    - name {String} object key\n    - fileSize {Number} file size\n    - partSize {Number} part size\n    - uploadId {String} upload id\n    - doneParts {Array} An array of pieces that have been completed, including the object structure as follows\n       - number {Number} part number\n       - etag {String} part etag\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [mime] {String} custom mime , will send with `Content-Type` entity header\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n          e.g.:\n         ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n         ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [disabledMD5] {Boolean} default true, it just work in Browser. if false,it means that MD5 is automatically calculated for uploaded files. **_NOTE:_** Synchronous computing tasks will block the main process\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data, sdk use JSON.parse() return\n\nexample:\n\n- Upload using multipart\n\n```js\nconst result = await store.multipartUpload('object', '/tmp/file');\nlet savedCpt;\nconsole.log(result);\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    savedCpt = cpt;\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) { //progress is generator\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\n```\n\n- multipartUpload progress example\n\n```js\n\n//async function\nasync function asyncProgress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result1 = await store.multipartUpload('object', '/tmp/file', {\n  progress: asyncProgress\n});\n\n//function\nfunction progress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result2 = await store.multipartUpload('object', '/tmp/file', {\n  progress: progress\n});\n\n```\n\n- multipartUpload with abort\n\n>tips: abort multipartUpload support on node and browser\n\n```js\n\n//start upload\nlet abortCheckpoint;\nstore.multipartUpload('object', '/tmp/file', {\n  progress: function (p, cpt, res) {\n    abortCheckpoint = cpt;\n  }\n}).then(res => {\n  // do something\n}.catch(err => {\n   //if abort will catch abort event\n  if (err.name === 'abort') {\n    // handle abort\n    console.log('error: ', err.message)\n  }\n}))\n\n// abort\nstore.abortMultipartUpload(abortCheckpoint.name, abortCheckpoint.uploadId)\n\n```\n\n- multipartUpload with cancel\n\n>tips: cancel multipartUpload support on node and browser\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n- multipartUpload with capture `ConnectionTimeoutError`  error\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  if (err.code === 'ConnectionTimeoutError') {\n    console.log(\"Woops,Woops ,timeout error!!!\");\n    // do ConnectionTimeoutError operation\n  }\n}\n\n```\n\n### .multipartUploadCopy(name, sourceData[, options])\n\nCopy file with [OSS multipart][oss-multipart]. <br>\nthis function contains head, initMultipartUpload, uploadPartCopy, completeMultipartUpload.<br>\nWhen copying a file larger than 1 GB, you should use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part, defalut `1024 * 1024`(1MB), minimum `100 * 1024`(100KB)\n  - [versionId] {String} the version id of history object \n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [copyheaders] {Object} only uploadPartCopy api used, detail [see](https://www.alibabacloud.com/help/doc-detail/31994.htm)\n    - [x-oss-copy-source-if-match]  only uploadPartCopy api used, default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]  only uploadPartCopy api used, default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]  only uploadPartCopy api used, default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since] only uploadPartCopy api used, default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n- Copy using multipart\n\n```js\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n});\nlet savedCpt;\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    savedCpt = cpt;\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\n```\n\n- multipartUploadCopy with abort\n\n```js\n\n//start upload\nlet abortCheckpoint;\nstore.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n  progress: function (p, cpt, res) {\n    abortCheckpoint = cpt;\n  }\n}).then(res => {\n  // do something\n}.catch(err => {\n   //if abort will catch abort event\n  if (err.name === 'abort') {\n    // handle abort\n    console.log('error: ', err.message)\n  }\n}))\n\n//the other event to abort, for example: click event\n//to abort upload must use the same client instance\nstore.abortMultipartUpload(abortCheckpoint.name, abortCheckpoint.uploadId)\n\n```\n\n- multipartUploadCopy with cancel\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n- multipartUploadCopy with versionId\n\n```js\n\nconst versionId = 'object versionId'\n//start upload\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  },\n  versionId\n});\n\n```\n\n### .listParts(name, uploadId[, query, options])\n\nThe ListParts command can be used to list all successfully uploaded parts mapped to a specific upload ID, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- name {String} object key\n- uploadId {String} upload ID from initMultipartUpload api\n- [query] {Object} query parameters\n  - [max-parts] {Number} The maximum part number in the response of the OSS. default value: 1000.\n  - [part-number-marker] {Number} Starting position of a specific list. A part is listed only when the part number is greater than the value of this parameter.\n  - [encoding-type] {String} Specify the encoding of the returned content and the encoding type. Optional value: url\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- uploadId {String} upload ID\n- bucket {String} Specify the bucket name.\n- name {String} object name\n- PartNumberMarker {Number} Starting position of the part numbers in the listing result.\n- nextPartNumberMarker {Number} If not all results are returned this time, the response request includes the NextPartNumberMarker element to indicate the value of PartNumberMarker in the next request.\n- maxParts {Number} upload ID\n- isTruncated {Boolean} Whether the returned result list for List Parts is truncated. The “true” indicates that not all results are returned; “false” indicates that all results are returned.\n- parts {Array} The container that saves part information, each in the structure:\n  - PartNumber {Number} Part number.\n  - LastModified {Date} Time when a part is uploaded.\n  - ETag {String} ETag value in the content of the uploaded part.\n  - Size {Number} Size of the uploaded part.\n\nexample:\n\n- List uploaded part\n\n```js\n\nconst result = await store.listParts('objcet', 'uploadId', {\n  'max-parts': 1000\n});\nconsole.log(result);\n```\n\n### .listUploads(query[, options])\n\nList on-going multipart uploads, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- query {Object} query parameters\n  - [prefix] {String} the object key prefix\n  - [max-uploads] {Number} the max uploads to return\n  - [key-marker] {String} the object key marker, if `upload-id-marker`\n    is not provided, return uploads with `key > marker`, otherwise\n    return uploads with `key >= marker && uploadId > id-marker`\n  - [upload-id-marker] {String} the upload id marker, must be used\n    **WITH** `key-marker`\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- List on-going multipart uploads\n\n```js\n\nconst result = await store.listUploads({\n  'max-uploads': 100,\n  'key-marker': 'my-object',\n  'upload-id-marker': 'upload-id'\n});\nconsole.log(result);\n```\n\n### .abortMultipartUpload(name, uploadId[, options])\n\nAbort a multipart upload for object.\n\nparameters:\n\n- name {String} the object name\n- uploadId {String} the upload id\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- Abort a multipart upload\n\n```js\nconst result = await store.abortMultipartUpload('object', 'upload-id');\nconsole.log(result);\n```\n\n### .calculatePostSignature(policy)\n\nget postObject params \n\nparameters:\n\n- policy {JSON or Object} policy must contain expiration and conditions.\n\nSuccess will return postObject Api params.\n\nObject:\n\n- OSSAccessKeyId {String}\n- Signature {String}\n- policy {Object} response info\n\n### .getObjectTagging(name[, options])\n\nObtains the tags of an object.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- tag {Object} the tag of object\n- res {Object} response info\n\n### .putObjectTagging(name, tag[, options])\n\nConfigures or updates the tags of an object.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n### .deleteObjectTagging(name[, options])\n\nDeletes the tag of a specified object.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n### .processObjectSave(sourceObject, targetObject, process[, targetBucket])\n\nPersistency indicates that images are asynchronously stored in the specified Bucket\n\nparameters:\n\n- sourceObject {String} source object name\n- targetObject {String} target object name\n- process {String} process string\n- [targetBucket] {String} target bucket\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n\n```js\nconst sourceObject = 'a.png'\nconst targetObject = 'b.png'\nconst process = 'image/watermark,text_aGVsbG8g5Zu+54mH5pyN5Yqh77yB,color_ff6a00'\n\nawait this.store.processObjectSave(sourceObject, targetObject, process);\n```\n\n## RTMP Operations\n\nAll operations function is [async], except `getRtmpUrl`.\n\nasync function format: `async functionName(...)`.\n\n### .putChannel(id, conf[, options])\n\nCreate a live channel.\n\nparameters:\n\n- id {String} the channel id\n- conf {Object} the channel config\n  - [Description] {String} the channel description\n  - [Status] {String} the channel status: 'enabled' or 'disabled'\n  - [Target] {Object}\n    - [Type] {String} the data type for the channel, only 'HLS' is supported now\n    - [FragDuration] {Number} duration of a 'ts' segment\n    - [FragCount] {Number} the number of 'ts' segments in a 'm3u8'\n    - [PlaylistName] {String} the 'm3u8' name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- publishUrls {Array} the publish urls\n- playUrls {Array} the play urls\n- res {Object} response info\n\nexample:\n\n- Create a live channel\n\n```js\nconst cid = 'my-channel';\nconst conf = {\n  Description: 'this is channel 1',\n  Status: 'enabled',\n  Target: {\n    Type: 'HLS',\n    FragDuration: '10',\n    FragCount: '5',\n    PlaylistName: 'playlist.m3u8'\n  }\n};\n\nconst r = await this.store.putChannel(cid, conf);\nconsole.log(r);\n```\n\n### .getChannel(id[, options])\n\nGet live channel info.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- data {Object} channel info, same as conf in [.putChannel](#putchannelid-conf-options)\n- res {Object} response info\n\nexample:\n\n- Get live channel info\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannel(cid);\nconsole.log(r);\n```\n\n### .deleteChannel(id[, options])\n\nDelete a live channel.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response infomation.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Delete a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.deleteChannel(cid);\nconsole.log(r);\n```\n\n### .putChannelStatus(id, status[, options])\n\nChange the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- status {String} the status: 'enabled' or 'disabled'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Disable a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.putChannelStatus(cid, 'disabled');\nconsole.log(r);\n```\n\n### .getChannelStatus(id[, options])\n\nGet the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel status information.\n\nobject:\n\n- data {Object}\n  - Status {String} the channel status: 'Live' or 'Idle'\n  - [ConnectedTime] {String} the connected time of rtmp pushing\n  - [RemoteAddr] {String} the remote addr of rtmp pushing\n  - [Video] {Object} the video parameters (Width/Height/FrameRate/Bandwidth/Codec)\n  - [Audio] {Object} the audio parameters (Bandwidth/SampleRate/Codec)\n- res {Object} response info\n\nexample:\n\n- Get a live channel status\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelStatus(cid);\nconsole.log(r);\n\n// { Status: 'Live',\n//   ConnectedTime: '2016-04-12T11:51:03.000Z',\n//   RemoteAddr: '42.120.74.98:53931',\n//   Video:\n//   { Width: '672',\n//     Height: '378',\n//     FrameRate: '29',\n//     Bandwidth: '60951',\n//     Codec: 'H264' },\n//   Audio: { Bandwidth: '5959', SampleRate: '22050', Codec: 'AAC' }\n// }\n```\n\n### .listChannels(query[, options])\n\nList channels.\n\nparameters:\n\n- query {Object} parameters for list\n  - prefix {String}: the channel id prefix (returns channels with this prefix)\n  - marker {String}: the channle id marker (returns channels after this id)\n  - max-keys {Number}: max number of channels to return\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel list.\n\nobject:\n\n- channels {Array} the channels, each in the structure:\n  - Name {String} the channel id\n  - Description {String} the channel description\n  - Status {String} the channel status\n  - LastModified {String} the last modification time of the channel\n  - PublishUrls {Array} the publish urls for the channel\n  - PlayUrls {Array} the play urls for the channel\n- nextMarker: result.data.NextMarker || null,\n- isTruncated: result.data.IsTruncated === 'true'\n- res {Object} response info\n\nexample:\n\n- List live channels\n\n```js\nconst r = await this.store.listChannels({\n  prefix: 'my-channel',\n  'max-keys': 3\n});\nconsole.log(r);\n```\n\n### .getChannelHistory(id[, options])\n\nGet the live channel history.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the history information.\n\nobject:\n\n- records {Object} the pushing records, each in the structure:\n  - StartTime {String} the start time\n  - EndTime {String} the end time\n  - RemoteAddr {String} the remote addr\n- res {Object} response info\n\nexample:\n\n- Get the live channel history\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelHistory(cid);\nconsole.log(r);\n```\n\n### .createVod(id, name, time[, options])\n\nCreate a VOD playlist for the channel.\n\nparameters:\n\n- id {String} the channel id\n- name {String} the playlist name\n- time {Object} the duration time\n  - startTime {Number} the start time in epoch seconds\n  - endTime {Number} the end time in epoch seconds\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Create a vod playlist of a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.createVod(cid, 're-play', {\n  startTime: 1460464870,\n  endTime: 1460465877\n});\nconsole.log(r);\n```\n\n### .getRtmpUrl(channelId[, options])\n\nGet signatured rtmp url for publishing.\n\nparameters:\n\n- channelId {String} the channel id\n- [options] {Object} optional parameters\n  - [expires] {Number} the expire time in seconds of the url\n  - [params] {Object} the additional paramters for url, e.g.: {playlistName: 'play.m3u8'}\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the rtmp url.\n\nexample:\n\n- Get a rtmp url.\n\n```js\nconst cid = 'my-channel';\n\nconst url = this.store.getRtmpUrl(this.cid, {\n  params: {\n    playlistName: 'play.m3u8'\n  },\n  expires: 3600\n});\nconsole.log(url);\n// rtmp://ossliveshow.oss-cn-hangzhou.aliyuncs.com/live/tl-channel?OSSAccessKeyId=T0cqQWBk2ThfRS6m&Expires=1460466188&Signature=%2BnzTtpyxUWDuQn924jdS6b51vT8%3D\n```\n\n## Create A Image Service Instance\n\nEach Image Service instance required `accessKeyId`, `accessKeySecret`, `bucket` and `imageHost`.\n\n### oss.ImageClient(options)\n\nCreate a Image service instance.\n\noptions:\n- imageHost {String} your image service domain that binding to a OSS bucket\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- bucket {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nconst oss = require('ali-oss');\n\nconst imgClient = oss.ImageClient({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'my_image_bucket'\n  imageHost: 'thumbnail.myimageservice.com'\n});\n```\n\n## Image Operations\n\nAll operations function is [async], except `imgClient.signatureUrl`.\n\nasync function format: `async functionName(...)`.\n\n### imgClient.get(name, file[, options])\n\nGet an image from the image channel.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the image\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image with a style and store it to the local file\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', filepath);\n```\n\n_ Store image to a writestream\n\n```js\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', somestream);\n```\n\n- Get an image content buffer\n\n```js\nconst result = await imgClient.get('ossdemo/demo.jpg@200w_200h');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a not exists object or a not image object\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/not-exists-demo.jpg@200w_200h', filepath);\n// will throw NoSuchKeyError\n```\n\n### imgClient.getStream(name[, options])\n\nGet an image read stream.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image object stream\n\n```js\nconst result = await imgClient.getStream('ossdemo/demo.jpg@200w_200h');\nresult.stream.pipe(fs.createWriteStream('some demo.jpg'));\n```\n\n### imgClient.getExif(name[, options])\n\nGet a image exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nIf object don't have exif, will throw 400 BadRequest.\n\nexample:\n\n```js\nconst result = await imgClient.getExif('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n### imgClient.getInfo(name[, options])\n\nGet a image info and exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nexample:\n\n```js\nconst result = await imgClient.getInfo('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     Format: \"jpg\",\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n\n### imgClient.putStyle(name, style[, options])\n// TODO\n\n### imgClient.getStyle(name[, options])\n\nGet a style by name from the image channel.\n\nparameters:\n- name {String} image style name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} styles object\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.getStyle('400');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"234\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:58:20 GMT\"\n//     },\n//     size: 234,\n//     aborted: false,\n//     rt: 398,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }\n// }\n```\n\n### imgClient.listStyle([options])\n\nGet all styles from the image channel.\n\nparameters:\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Array} styles array, a style object:\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.listStyle();\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"913\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:47:32 GMT\"\n//     },\n//     size: 913,\n//     aborted: false,\n//     rt: 1911,\n//     keepAliveSocket: false\n//   },\n//   data: [{\n//     Name: \"200-200\",\n//     Content: \"0e_200w_200h_0c_0i_0o_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:28:08 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:28:08 GMT\"\n//   }, {\n//     Name: \"800\",\n//     Content: \"800w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:29:15 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:29:15 GMT\"\n//   }, {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }, {\n//     Name: \"600\",\n//     Content: \"600w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:35:02 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:35:02 GMT\"\n//   }]\n// }\n```\n\n### imgClient.deleteStyle(name[, options])\n// TODO\n\n### imgClient.signatureUrl(name)\n\nCreate a signature url for directly download.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return full signature url.\n\nexample:\n\n```js\nconst url = imgClient.signatureUrl('\n');\n// http://thumbnail.myimageservice.com/demo.jpg@200w_200h?OSSAccessKeyId=uZxyLARzYZtGwHKY&Expires=1427803849&Signature=JSPRe06%2FjQpQSj5zlx2ld1V%2B35I%3D\n```\n\n## Cluster Mode\n\nCluster mode now only support object operations.\n\n```js\nconst Cluster = require('ali-oss').ClusterClient;\n\nconst client = Cluster({\n  cluster: [{\n    host: 'host1',\n    accessKeyId: 'id1',\n    accessKeySecret: 'secret1'\n  }, {\n    host: 'host2',\n    accessKeyId: 'id2',\n    accessKeySecret: 'secret2'\n  }],\n  schedule: 'masterSlave', //default is `roundRobin`\n});\n\n// listen error event to logging error\nclient.on('error', function(err) {\n  console.error(err.stack);\n});\n\n// client init ready\nclient.ready(function() {\n  console.log('cluster client init ready, go ahead!');\n});\n```\n\n### Get Methods\n\nWill choose an alive client by schedule(`masterSlave` or `roundRobin`).\n\n- `client.get()`\n- `client.head()`\n- `client.getStream()`\n- `client.list()`\n- `client.signatureUrl()`\n- `client.chooseAvailable()` - choose an available client by schedule.\n- `client.getACL()`\n\n### Put Methods\n\nWill put to all clients.\n\n- `client.put()`\n- `client.putStream()`\n- `client.delete()`\n- `client.deleteMulti()`\n- `client.copy()`\n- `client.putMeta()`\n- `client.putACL()`\n- `client.restore()`\n\n## Known Errors\n\nEach error return by OSS server will contains these properties:\n\n- name {String} error name\n- message {String} error message\n- requestId {String} uuid for this request, if you meet some unhandled problem,\n    you can send this request id to OSS engineer to find out what's happend.\n- hostId {String} OSS cluster name for this request\n\nThe following table lists the OSS error codes:\n\n[More code info](https://help.aliyun.com/knowledge_detail/32005.html)\n\nname | code | status | message | message in Chinese\n---  | ---  | --- | ---     | ---\nAccessDeniedError | AccessDenied | 403 | Access Denied | 拒绝访问\nBucketAlreadyExistsError | BucketAlreadyExists | 409 | Bucket already exists | Bucket 已经存在\nBucketNotEmptyError | BucketNotEmpty | 409 | Bucket is not empty | Bucket 不为空\nRestoreAlreadyInProgressError | RestoreAlreadyInProgress | 409 | The restore operation is in progress. | restore 操作正在进行中\nOperationNotSupportedError | OperationNotSupported | 400 | The operation is not supported for this resource | 该资源暂不支持restore操作\nEntityTooLargeError | EntityTooLarge | 400 | Entity too large | 实体过大\nEntityTooSmallError | EntityTooSmall | 400 | Entity too small | 实体过小\nFileGroupTooLargeError | FileGroupTooLarge | 400 | File group too large | 文件组过大\nInvalidLinkNameError | InvalidLinkName | 400 | Link name can't be the same as the object name | Object Link 与指向的 Object 同名\nLinkPartNotExistError | LinkPartNotExist | 400 | Can't link to not exists object | Object Link 中指向的 Object 不存在\nObjectLinkTooLargeError | ObjectLinkTooLarge | 400 | Too many links to this object | Object Link 中 Object 个数过多\nFieldItemTooLongError | FieldItemTooLong | 400 | Post form fields items too large | Post 请求中表单域过大\nFilePartInterityError | FilePartInterity | 400 | File part has changed | 文件 Part 已改变\nFilePartNotExistError | FilePartNotExist | 400 | File part not exists | 文件 Part 不存在\nFilePartStaleError | FilePartStale| 400 | File part stale | 文件 Part 过时\nIncorrectNumberOfFilesInPOSTRequestError | IncorrectNumberOfFilesInPOSTRequest | 400 | Post request contains invalid number of files | Post 请求中文件个数非法\nInvalidArgumentError | InvalidArgument | 400 | Invalid format argument | 参数格式错误\nInvalidAccessKeyIdError | InvalidAccessKeyId | 400 | Access key id not exists | Access Key ID 不存在\nInvalidBucketNameError | InvalidBucketName | 400 | Invalid bucket name | 无效的 Bucket 名字\nInvalidDigestError | InvalidDigest | 400 | Invalid digest | 无效的摘要\nInvalidEncryptionAlgorithmError | InvalidEncryptionAlgorithm | 400 | Invalid encryption algorithm | 指定的熵编码加密算法错误\nInvalidObjectNameError | InvalidObjectName | 400 | Invalid object name | 无效的 Object 名字\nInvalidPartError | InvalidPart | 400 | Invalid part | 无效的 Part\nInvalidPartOrderError | InvalidPartOrder | 400 | Invalid part order | 无效的 part 顺序\nInvalidPolicyDocumentError | InvalidPolicyDocument | 400 | Invalid policy document | 无效的 Policy 文档\nInvalidTargetBucketForLoggingError | InvalidTargetBucketForLogging | 400 | Invalid bucket on logging operation | Logging 操作中有无效的目标 bucket\nInternalError | Internal | 500 | OSS server internal error | OSS 内部发生错误\nMalformedXMLError | MalformedXML | 400 | Malformed XML format | XML 格式非法\nMalformedPOSTRequestError | MalformedPOSTRequest | 400 | Invalid post body format | Post 请求的 body 格式非法\nMaxPOSTPreDataLengthExceededError | MaxPOSTPreDataLengthExceeded | 400 | Post extra data too large | Post 请求上传文件内容之外的 body 过大\nMethodNotAllowedError | MethodNotAllowed | 405 | Not allowed method | 不支持的方法\nMissingArgumentError | MissingArgument | 411 | Missing argument | 缺少参数\nMissingContentLengthError | MissingContentLength | 411 | Missing `Content-Length` header | 缺少内容长度\nNoSuchBucketError | NoSuchBucket | 404 | Bucket not exists | Bucket 不存在\nNoSuchKeyError | NoSuchKey | 404 | Object not exists | 文件不存在\nNoSuchUploadError | NoSuchUpload | 404 | Multipart upload id not exists | Multipart Upload ID 不存在\nNotImplementedError | NotImplemented | 501 | Not implemented | 无法处理的方法\nPreconditionFailedError | PreconditionFailed | 412 | Pre condition failed | 预处理错误\nRequestTimeTooSkewedError | RequestTimeTooSkewed | 403 | Request time exceeds 15 minutes to server time | 发起请求的时间和服务器时间超出 15 分钟\nRequestTimeoutError | RequestTimeout | 400 | Request timeout | 请求超时\nRequestIsNotMultiPartContentError | RequestIsNotMultiPartContent | 400 | Invalid post content-type | Post 请求 content-type 非法\nSignatureDoesNotMatchError | SignatureDoesNotMatch | 403 | Invalid signature | 签名错误\nTooManyBucketsError | TooManyBuckets | 400 | Too many buckets on this user | 用户的 Bucket 数目超过限制\nRequestError | RequestError | -1 | network error | 网络出现中断或异常\nConnectionTimeoutError | ConnectionTimeoutError | -2 | request connect timeout | 请求连接超时\nSecurityTokenExpiredError | SecurityTokenExpired | 403 | sts Security Token Expired | sts Security Token 超时失效\n\n[generator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n[oss-sts]: https://help.aliyun.com/document_detail/oss/practice/ram_guide.html\n[browser-sample]: https://github.com/rockuw/oss-in-browser\n[oss-multipart]: https://help.aliyun.com/document_detail/oss/api-reference/multipart-upload/InitiateMultipartUpload.html\n[disabled-browser-headers]: https://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n",
      "readmeFilename": "README.md",
      "gitHead": "b0c6771c3c5f9455d0319480b6b4c651f9c6ea39",
      "_id": "ali-oss@6.15.2-parallel.2",
      "_nodeVersion": "14.17.0",
      "_npmVersion": "6.14.13",
      "dist": {
        "integrity": "sha512-zQJz2bnWgjYUiIav/FnwYjKhC6Bt+cPyQ7kc5zJM3PKHXR/k75xdFOYy0DkHO3UDsijVOez6tS5ORSJRLxpNvA==",
        "shasum": "475cfff40a19e62ba96eee57c268ccaf9cc9a32e",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.15.2-parallel.2.tgz",
        "fileCount": 212,
        "unpackedSize": 2313255,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgyGqzCRA9TVsSAnZWagAARucP/ijiXITEh+QVoY093MJ5\nnGaEVprMtD/y+U+8vBt0iC45VgWbn8PaX3Nah7p0SPtzZGZoYEKXwnqTKjai\n6BZpIPHMcKtBNJ9sYXAX4aIInTeSPgcUma3p63aYgsymNDrS6WWBjpaYjH/l\nAxa3t6MlI5MCQzQQ1dLUsSxtp59Zo2ARbnykZKMj93aHQfz6IKQEM3nH0oQ+\nYDb2B4rgLl2xW97iDmwZ3hyO4ehS2EBDWpBEnX4+I1t/JzXW4/dyWojUlJes\nHyQcRD7eDNG9l8/36ThWPpTKIWuXs/bsZ60S7wfJ27q2WeyPECpL6LphdPi/\nG9JYL+uozwa0BaG0BZycUqS3GINcztdM3d2xEC/tbeBCRCr8NfkEJz3p2DpD\nQjK6cEU8YMjiu0tynJ5tWfNlIRBnTN6ih6D8NWo+CymPMAAUWXjxmtIoD3Kq\nbzrH7EomX9VQ8gXZmi0s2T0Yz2O8dzeZis1WAEtrrt9s3O37FXsz8hw9tAy3\nQPQkSTNWMUBf7AMa89tnYtxUGZapLSEny2g6j7PmZX5nZ4prdFsGF3GJ75Wq\ny3RT9acNimxweiAEBhhjHVZRR5/I34TqRiJMw0W+QXhbmFR40FGRgnJTuHCY\niKFeqMrZKnO+NF4p+p/9/iYiZ5KPFUKcimhsuFSUWkCukPr+OUDpJZ0oWd9X\n9EE0\r\n=9Ryc\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDH1oE8bl4NX4haLM6h1o5uOi0Jo75mpKG2E1POeAxMoAIhANYNEFn8prSxk5zCpffC+L38qQxoOGLJ1Tgr+KXIO1b3"
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.15.2-parallel.2_1623747251440_0.19826635611210341"
      },
      "_hasShrinkwrap": false
    },
    "6.15.2-parallel.3": {
      "name": "ali-oss",
      "version": "6.15.2-parallel.3",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "npm run tsc && mocha -t 60000 -r thunk-mocha -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "npm run tsc && nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^16.5.2",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "immediate": "^3.3.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "1.454.0",
        "standard-version": "^8.0.1",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "b0c6771c3c5f9455d0319480b6b4c651f9c6ea39",
      "readme": "oss-js-sdk\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage][cov-image]][cov-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/ali-oss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/ali-oss\n[travis-image]: https://img.shields.io/travis/ali-sdk/ali-oss/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ali-sdk/ali-oss.svg?branch=master\n[cov-image]: http://codecov.io/github/ali-sdk/ali-oss/coverage.svg?branch=master\n[cov-url]: http://codecov.io/github/ali-sdk/ali-oss?branch=master\n[david-image]: https://img.shields.io/david/ali-sdk/ali-oss.svg?style=flat-square\n[david-url]: https://david-dm.org/ali-sdk/ali-oss\n\naliyun OSS(Object Storage Service) js client for Node and Browser env.\n\n`NOTE`： For SDK `5.X` document, please go to [README.md](https://github.com/ali-sdk/ali-oss/blob/5.x/README.md)\n\n## Install\n\n```bash\nnpm install ali-oss --save\n```\n\n## Compatibility\n\n### Node\nNode.js >= 8.0.0 required. You can use 4.x in Node.js < 8.\n\n### Browser\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n\n`Note`:\n- For Lower browsers you can refer to [PostObject](https://help.aliyun.com/document_detail/31988.html), if you want to see more practices ,please refer to [Web Post](https://help.aliyun.com/document_detail/31923.html)\n\n### QA\nYou can join DingDing Talk Group, [Group Link](https://qr.dingtalk.com/action/joingroup?code=v1,k1,inkSDqCxm7LilkaR/kknRVBDQ8PDA0Lj5hj4Cf9io3w=&_dt_no_comment=1&origin=11)\n\n<img src=\"task/dingding.jpg\" height=\"400\" title=\"dingding\" width=\"300\">\n\n## License\n\n[MIT](LICENSE)\n\n# OSS Usage\n\nOSS, Object Storage Service. Equal to well known Amazon [S3](http://aws.amazon.com/s3/).\n\nAll operation use es7 async/await to implement. All api is async function.\n\n## Summary\n\n- [Node Usage](#node-usage)\n- [Browser Usage](#browser-usage)\n- [Data Regions](#data-regions)\n- [Create Account](#create-account)\n- [Create A Bucket Instance](#create-a-bucket-instance)\n  - [oss(options)](#ossoptions)\n- [Bucket Operations](#bucket-operations)\n  - Base\n    - [.listBuckets(query[, options])](#listbucketsquery-options)\n    - [.putBucket(name[, options])](#putbucketname-options)\n    - [.useBucket(name)](#usebucketname)\n    - [.deleteBucket(name[, options])](#deletebucketname-options)\n    - [.getBucketInfo(name)](#getbucketinfoname)\n    - [.getBucketLocation(name)](#getbucketlocationname)\n  - ACL\n    - [.putBucketACL(name, acl[, options])](#putbucketaclname-acl-options)\n    - [.getBucketACL(name[, options])](#getbucketaclname-options)\n  - Logging\n    - [.putBucketLogging(name, prefix[, options])](#putbucketloggingname-prefix-options)\n    - [.getBucketLogging(name[, options])](#getbucketloggingname-options)\n    - [.deleteBucketLogging(name[, options])](#deletebucketloggingname-options)\n  - Website\n    - [.putBucketWebsite(name, config[, options])](#putbucketwebsitename-config-options)\n    - [.getBucketWebsite(name[, options])](#getbucketwebsitename-options)\n    - [.deleteBucketWebsite(name, region[, options])](#deletebucketwebsitename-options)\n  - Referer\n    - [.putBucketReferer(name, allowEmpty, referers[, options])](#putbucketreferername-allowempty-referers-options)\n    - [.getBucketReferer(name[, options])](#getbucketreferername-options)\n    - [.deleteBucketReferer(name[, options])](#deletebucketreferername-options)\n  - Lifecycle\n    - [.putBucketLifecycle(name, rules[, options])](#putbucketlifecyclename-rules-options)\n    - [.getBucketLifecycle(name[, options])](#getbucketlifecyclename-options)\n    - [.deleteBucketLifecycle(name[, options])](#deletebucketlifecyclename-options)\n  - CORS\n    - [.putBucketCORS(name, rules[, options])](#putbucketcorsname-rules-options)\n    - [.getBucketCORS(name[, options])](#getbucketcorsname-options)\n    - [.deleteBucketCORS(name[, options])](#deletebucketcorsname-options)\n  - RequestPayment\n    - [.getBucketRequestPayment(bucketName[, options])](#getbucketrequestpaymentbucketname-options)\n    - [.putBucketRequestPayment(bucketName, payer[, options])](#putBucketRequestpaymentbucketname-payer-options)\n  - BucketEncryption\n    - [.putBucketEncryption(name[, rules])](#putbucketencryptionname-rules)\n    - [.getBucketEncryption(name)](#getbucketencryptionname)\n    - [.deleteBucketEncryption(name)](#deletebucketencryptionname)\n  - tagging\n    - [.putBucketTags(name, tag[, options])](#putBucketTagsname-tag-options)\n    - [.getBucketTags(name, [, options])](#getBucketTagsname-options)\n    - [.deleteBucketTags(name, [, options])](#deleteBucketTagsname-options)\n  - policy\n    - [.putBucketPolicy(name, policy[, options])](#putBucketPolicyname-policy-options)\n    - [.getBucketPolicy(name, [, options])](#getBucketPolicyname-options)\n    - [.deleteBucketPolicy(name, [, options])](#deleteBucketPolicyname-options)\n  - versioning\n    - [.getBucketVersioning(name, [, options])](#getBucketVersioningname-options)\n    - [.putBucketVersioning(name, status[, options])](#putBucketVersioningname-status-options)\n  - inventory\n      - [.getBucketInventory(name, inventoryId[, options])](#getBucketInventoryname-inventoryid-options)\n      - [.putBucketInventory(name, inventory[, options])](#putBucketInventoryname-inventory-options)\n      - [.deleteBucketInventory(name, inventoryId[, options])](#deleteBucketInventoryname-inventoryid-options)\n      - [.listBucketInventory(name, [, options])](#listBucketInventoryname-options)\n  - worm\n    - [.abortBucketWorm(name[, options])](#abortBucketWormname-options)\n    - [.completeBucketWorm(name, wormId[, options])](#completeBucketWormname-wormId-options)\n    - [.extendBucketWorm(name, wormId, days[, options])](#extendBucketWormname-wormId-days-options)\n    - [.getBucketWorm(name[, options])](#getBucketWormname-options)\n    - [.initiateBucketWorm(name, days[, options])](#initiateBucketWormname-days-options)\n\n- [Object Operations](#object-operations)\n  - [.list(query[, options])](#listquery-options)\n  - [.listV2(query[, options])](#listV2query-options)\n  - [.getBucketVersions(query[, options])](#getBucketVersionsquery-options)\n  - [.put(name, file[, options])](#putname-file-options)\n  - [.putStream(name, stream[, options])](#putstreamname-stream-options)\n  - [.append(name, file[, options])](#appendname-file-options)\n  - [.getObjectUrl(name[, baseUrl])](#getobjecturlname-baseurl)\n  - [.generateObjectUrl(name[, baseUrl])](#generateobjecturlname-baseurl)\n  - [.head(name[, options])](#headname-options)\n  - [.getObjectMeta(name[, options])](#getobjectmetaname-options)\n  - [.get(name[, file, options])](#getname-file-options)\n  - [.getStream(name[, options])](#getstreamname-options)\n  - [.delete(name[, options])](#deletename-options)\n  - [.copy(name, sourceName[, sourceBucket, options])](#copyname-sourcename-sourcebucket-options)\n  - [.putMeta(name, meta[, options])](#putmetaname-meta-options)\n  - [.deleteMulti(names[, options])](#deletemultinames-options)\n  - [.signatureUrl(name[, options])](#signatureurlname-options)\n  - [.putACL(name, acl[, options])](#putaclname-acl-options)\n  - [.getACL(name[, options])](#getaclname-options)\n  - [.restore(name[, options])](#restorename-options)\n  - [.putSymlink(name, targetName[, options])](#putsymlinkname-targetname-options)\n  - [.getSymlink(name[, options])](#getsymlinkname-options)\n  - [.initMultipartUpload(name[, options])](#initmultipartuploadname-options)\n  - [.uploadPart(name, uploadId, partNo, file, start, end[, options])](#uploadpartname-uploadid-partno-file-start-end-options)\n  - [.uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])](#uploadpartcopyname-uploadid-partno-range-sourcedata-options)\n  - [.completeMultipartUpload(name, uploadId, parts[, options])](#completemultipartuploadname-uploadid-parts-options)\n  - [.multipartUpload(name, file[, options])](#multipartuploadname-file-options)\n  - [.multipartUploadCopy(name, sourceData[, options])](#multipartuploadcopyname-sourcedata-options)\n  - [.listParts(name, uploadId[, query, options])](#listpartsname-uploadid-query-options)\n  - [.listUploads(query[, options])](#listuploadsquery-options)\n  - [.abortMultipartUpload(name, uploadId[, options])](#abortmultipartuploadname-uploadid-options)\n  - [.calculatePostSignature(policy)](#calculatePostSignaturepolicy)\n  - [.getObjectTagging(name, [, options])](#getObjectTaggingname-options)\n  - [.putObjectTagging(name, tag[, options])](#putObjectTaggingname-tag-options)\n  - [.deleteObjectTagging(name, [, options])](#deleteObjectTaggingname-options)\n- [RTMP Operations](#rtmp-operations)\n  - [.putChannel(id, conf[, options])](#putchannelid-conf-options)\n  - [.getChannel(id[, options])](#getchannelid-options)\n  - [.deleteChannel(id[, options])](#deletechannelid-options)\n  - [.putChannelStatus(id, status[, options])](#putchannelstatusid-status-options)\n  - [.getChannelStatus(id[, options])](#getchannelstatusid-options)\n  - [.listChannels(query[, options])](#listchannelsquery-options)\n  - [.getChannelHistory(id[, options])](#getchannelhistoryid-options)\n  - [.createVod(id, name, time[, options])](#createvodid-name-time-options)\n  - [.getRtmpUrl(channelId[, options])](#getrtmpurlchannelid-options)\n- [Create A Image Service Instance](#create-a-image-service-instance)\n  - [oss.ImageClient(options)](#ossimageclientoptions)\n- [Image Operations](#image-operations)\n  - [imgClient.get(name, file[, options])](#imgclientgetname-file-options)\n  - [imgClient.getStream(name[, options])](#imgclientgetstreamname-options)\n  - [imgClient.getExif(name[, options])](#imgclientgetexifname-options)\n  - [imgClient.getInfo(name[, options])](#imgclientgetinfoname-options)\n  - [imgClient.putStyle(name, style[, options])](#imgclientputstylename-style-options)\n  - [imgClient.getStyle(name[, options])](#imgclientgetstylename-options)\n  - [imgClient.listStyle([options])](#imgclientliststyleoptions)\n  - [imgClient.deleteStyle(name[, options])](#imgclientdeletestylename-options)\n  - [imgClient.signatureUrl(name)](#imgclientsignatureurlname)\n- [Known Errors](#known-errors)\n\n## Node Usage\n\n### Compatibility\n- Node: >= 8.0.0\n\n### Basic usage\n1.install SDK using npm\n```\nnpm install ali-oss --save\n```\n2.for example:\n```js\nconst OSS = require('ali-oss');\nconst client = new OSS({\n  region: '<oss region>',\n  accessKeyId: '<Your accessKeyId>',\n  accessKeySecret: '<Your accessKeySecret>',\n  bucket: '<Your bucket name>'\n});\n```\n## Browser Usage\n\nYou can use most of the functionalities of `ali-oss` in browser with\nsome exceptions:\n\n- put object with streaming: no chunked encoding, we use multipart\n  upload instead\n- get object to local file: we cannot manipulate file system in\n  browser, we provide signed object url for downloading needs\n- bucket operations(listBuckets, putBucketLogging, etc) will fail: OSS\n  server currently do not support CORS requests for bucket operations\n  (will probably be fixed later)\n\n### Compatibility\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n    >Note: Because some browsers do not support promises, you need to introduce promise compatible libraries.<br>\n    For example: IE10 and IE11 need to introduce a promise-polyfill.\n\n### Setup\n\n#### Bucket setup\n\nAs browser-side javascript involves CORS operations. You need to setup\nyour bucket CORS rules to allow CORS operations:\n\n- set allowed origins to '\\*'\n- allowed methods to 'PUT, GET, POST, DELETE, HEAD'\n- set allowed headers to '\\*'\n- expose 'ETag' in expose headers\n\n#### STS setup\n\nAs we don't want to expose the accessKeyId/accessKeySecret in the\nbrowser, a [common practice][oss-sts] is to use STS to grant temporary\naccess.\n\n### Basic usage\n\nInclude the sdk lib in the `<script>` tag and you have `OSS` available\nfor creating client.\n\n```html\n // x.x.x The specific version number represented\n // we recommend introducing offline resources, because the usability of online resources depends on the stability of the cdn server.\n <!-- Introducing online resources -->\n <script src=\"http://gosspublic.alicdn.com/aliyun-oss-sdk-x.x.x.min.js\"></script>\n <!-- Introducing offline resources -->\n <script src=\"./aliyun-oss-sdk-x.x.x.min.js\"></script>\n\n<script type=\"text/javascript\">\n  const client = new OSS({\n    region: 'oss-cn-hangzhou',\n    accessKeyId: '<access-key-id>',\n    accessKeySecret: '<access-key-secret>',\n    bucket: '<bucket-name>',\n    stsToken: '<security-token>'\n  });\n\n  client.list().then((result) => {\n    console.log('objects: %j', result.objects);\n    return client.put('my-obj', new OSS.Buffer('hello world'));\n  }).then((result) => {\n    console.log('put result: %j', result);\n    return client.get('my-obj');\n  }).then((result) => {\n    console.log('get result: %j', result.content.toString());\n  });\n</script>\n```\nThe full sample can be found [here][browser-sample].\n\n### How to build\n\n```bash\nnpm run build-dist\n```\n\nAnd see the build artifacts under `dist/`.\n\n\n## Data Regions\n\n[OSS current data regions](https://help.aliyun.com/document_detail/oss/user_guide/endpoint_region.html).\n\nregion | country | city | endpoint | internal endpoint\n---  | ---     | ---  | --- | ---\noss-cn-hangzhou | China | HangZhou | oss-cn-hangzhou.aliyuncs.com | oss-cn-hangzhou-internal.aliyuncs.com\noss-cn-shanghai | China | ShangHai | oss-cn-shanghai.aliyuncs.com | oss-cn-shanghai-internal.aliyuncs.com\noss-cn-qingdao | China | QingDao | oss-cn-qingdao.aliyuncs.com | oss-cn-qingdao-internal.aliyuncs.com\noss-cn-beijing | China | BeiJing | oss-cn-beijing.aliyuncs.com | oss-cn-beijing-internal.aliyuncs.com\noss-cn-shenzhen | China | ShenZhen | oss-cn-shenzhen.aliyuncs.com | oss-cn-shenzhen-internal.aliyuncs.com\noss-cn-hongkong | China | HongKong | oss-cn-hongkong.aliyuncs.com | oss-cn-hongkong-internal.aliyuncs.com\noss-us-west-1 | US | Silicon Valley | oss-us-west-1.aliyuncs.com | oss-us-west-1-internal.aliyuncs.com\noss-ap-southeast-1 | Singapore | Singapore | oss-ap-southeast-1.aliyuncs.com | oss-ap-southeast-1-internal.aliyuncs.com\n\n## Create Account\n\nGo to [OSS website](http://www.aliyun.com/product/oss/?lang=en), create a new account for new user.\n\nAfter account created, you can create the OSS instance and get the `accessKeyId` and `accessKeySecret`.\n\n## Create A Bucket Instance\n\nEach OSS instance required `accessKeyId`, `accessKeySecret` and `bucket`.\n\n## oss(options)\n\nCreate a Bucket store instance.\n\noptions:\n\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- [stsToken] {String} used by temporary authorization, detail [see](https://www.alibabacloud.com/help/doc-detail/32077.htm)\n- [refreshSTSToken] {Function} used by auto set `stsToken`、`accessKeyId`、`accessKeySecret` when sts info expires. return value must be object contains `stsToken`、`accessKeyId`、`accessKeySecret`\n- [refreshSTSTokenInterval] {number} use time (ms) of refresh STSToken interval it should be \n  less than sts info expire interval, default is 300000ms(5min)\n  when sts info expires. return value must be object contains `stsToken`、`accessKeyId`、`accessKeySecret`\n- [bucket] {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [endpoint] {String} oss region domain. It takes priority over `region`. Set as extranet domain name, intranet domain name, accelerated domain name, etc. according to different needs. please see [endpoints](https://www.alibabacloud.com/help/doc-detail/31837.htm)\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`.\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`.\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [secure] {Boolean} instruct OSS client to use HTTPS (secure: true) or HTTP (secure: false) protocol.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`.\n- [cname] {Boolean}, default false, access oss with custom domain name. if true, you can fill `endpoint` field with your custom domain name,\n- [isRequestPay] {Boolean}, default false, whether request payer function of the bucket is open, if true, will send headers `'x-oss-request-payer': 'requester'` to oss server.\n  the details you can see [requestPay](https://help.aliyun.com/document_detail/91337.htm)\n- [useFetch] {Boolean}, default false, it just work in Browser, if true,it means upload object with \n`fetch` mode ,else `XMLHttpRequest`\n- [enableProxy] {Boolean}, Enable proxy request, default is false.\n- [proxy] {String | Object}, proxy agent uri or options, default is null.\n- [retryMax] {Number}, used by auto retry send request count when request error is net error or timeout.  **_NOTE:_**  Not support `put` with stream, `putStream`, `append` with stream because the stream can only be consumed once\n\nexample:\n\n1. basic usage\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\n```\n2. use accelerate endpoint\n- Global accelerate endpoint: oss-accelerate.aliyuncs.com\n- Accelerate endpoint of regions outside mainland China: oss-accelerate-overseas.aliyuncs.com\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  endpoint: 'oss-accelerate.aliyuncs.com',\n});\n```\n\n3. use custom domain\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  cname: true,\n  endpoint: 'your custome domain',\n});\n```\n\n4. use STS and refreshSTSToken\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your STS key',\n  accessKeySecret: 'your STS secret',\n  stsToken: 'your STS token',\n  refreshSTSToken: async () => {\n    const info = await fetch('you sts server');\n    return {\n      accessKeyId: info.accessKeyId,\n      accessKeySecret: info.accessKeySecret,\n      stsToken: info.stsToken\n    }\n  },\n  refreshSTSTokenInterval: 300000\n});\n```\n\n5. retry request with stream\n```js\nfor (let i = 0; i <= store.options.retryMax; i++) {\n  try {\n    const result = await store.putStream(\"<example-object>\", fs.createReadStream(\"<example-path>\"));\n    console.log(result);\n    break; // break if success\n  } catch (e) {\n    console.log(e);\n  }\n}\n```\n\n## Bucket Operations\n\n### .listBuckets(query[, options])\n\nList buckets in this account.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search buckets using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [max-keys] {String|Number} max buckets, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return buckets list on `buckets` properties.\n\n- buckets {Array<BucketMeta>} bucket meta info list\n  Each `BucketMeta` will contains blow properties:\n    - name {String} bucket name\n    - region {String} bucket store data region, e.g.: `oss-cn-hangzhou-a`\n    - creationDate {String} bucket create GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - storageClass {String} e.g.: `Standard`, `IA`, `Archive`\n- owner {Object} object owner, including `id` and `displayName`\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 buckets\n\n```js\nstore.listBuckets({\n  \"max-keys\": 10\n}).then((result) => {\n  console.log(result);\n});\n\n```\n\n### .putBucket(name[, options])\n\nCreate a new bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket exists and not belong to current account, will throw BucketAlreadyExistsError.\n  If bucket not exists, will create a new bucket and set it's ACL.\n- [options] {Object} optional parameters\n  - [acl] {String} include `private`,`public-read`,`public-read-write`\n  - [storageClass] {String} the storage type include (Standard,IA,Archive)\n  - [dataRedundancyType] {String} default `LRS`, include `LRS`,`ZRS`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the bucket name on `bucket` properties.\n\n- bucket {String} bucket name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Create a bucket name `helloworld` location on HongKong\n\n```js\nstore.putBucket('helloworld').then((result) => {\n  // use it by default\n  store.useBucket('helloworld');\n});\n```\n\n- Create a bucket name `helloworld` location on HongKong StorageClass `Archive`\n\n```js\nawait store.putBucket('helloworld', { StorageClass: 'Archive' });\n// use it by default\nstore.useBucket('helloworld');\n```\n\n### .deleteBucket(name[, options])\n\nDelete an empty bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket is not empty, will throw BucketNotEmptyError.\n  If bucket is not exists, will throw NoSuchBucketError.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete the exists 'helloworld' bucket on 'oss-cn-hongkong'\n\n```js\nstore.deleteBucket('helloworld').then((result) => {});\n```\n\n### .useBucket(name)\n\nUse the bucket.\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.useBucket('helloworld');\n```\n\n### .getBucketInfo(name)\n\nGet bucket information,include CreationDate、ExtranetEndpoint、IntranetEndpoint、Location、Name、StorageClass、\nOwner、AccessControlList、Versioning\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketInfo('helloworld').then( (res) => {\n  console.log(res.bucket)\n})\n```\n\n### .getBucketLocation(name)\n\nGet bucket location\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketLocation('helloworld').then( (res) => {\n  console.log(res.location)\n})\n```\n\n---\n\n### .putBucketACL(name, acl[, options])\n\nUpdate the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- acl {String} access control list, current available: `public-read-write`, `public-read` and `private`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set bucket `helloworld` to `public-read-write`\n\n```js\nstore.putBucketACL('helloworld', 'public-read-write').then((result) => {\n});\n```\n\n### .getBucketACL(name[, options])\n\nGet the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld`\n\n```js\nstore.getBucketACL('helloworld').then((result) => {\n  console.log(result.acl);\n});\n```\n\n---\n\n### .putBucketLogging(name, prefix[, options])\n\nUpdate the bucket logging settings.\nLog file will create every one hour and name format: `<prefix><bucket>-YYYY-mm-DD-HH-MM-SS-UniqueString`.\n\nparameters:\n\n- name {String} bucket name\n- [prefix] {String} prefix path name to store the log files\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Enable bucket `helloworld` logging and save with prefix `logs/`\n\n```js\nstore.putBucketLogging('helloworld', 'logs/').then((result) => {\n});\n```\n\n### .getBucketLogging(name[, options])\n\nGet the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- enable {Boolean} enable logging or not\n- prefix {String} prefix path name to store the log files, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld` logging settings\n\n```js\nstore.getBucketLogging('helloworld').then((result) => {\n  console.log(result.enable, result.prefix);\n});\n```\n\n### .deleteBucketLogging(name[, options])\n\nDelete the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketWebsite(name, config[, options])\n\nSet the bucket as a static website.\n\nparameters:\n\n- name {String} bucket name\n- config {Object} website config, contains blow properties:\n  - index {String} default page, e.g.: `index.html`\n  - [error] {String} error page, e.g.: 'error.html'\n  - [supportSubDir] {String} default vaule false\n  - [type] {String} default value 0\n  - [routingRules] {Array} RoutingRules\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketWebsite('hello', {\n  index: 'index.html'\n}).then((result) => {\n});\n```\n\n### .getBucketWebsite(name[, options])\n\nGet the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- index {String} index page\n- error {String} error page, maybe `null`\n- supportSubDir {String}\n- type {String}\n- routingRules {Array}\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketWebsite(name[, options])\n\nDelete the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketReferer(name, allowEmpty, referers[, options])\n\nSet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list, e.g.:\n  ```js\n  [\n    'https://npm.taobao.org',\n    'http://cnpmjs.org'\n  ]\n  ```\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketReferer('hello', false, [\n  'https://npm.taobao.org',\n  'http://cnpmjs.org'\n]).then((result) => {\n});\n```\n\n### .getBucketReferer(name[, options])\n\nGet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketReferer(name[, options])\n\nDelete the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketLifecycle(name, rules[, options])\n\nSet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains blow properties:\n  - [id] {String} rule id, if not set, OSS will auto create it with random string.\n  - prefix {String} store prefix\n  - status {String} rule status, allow values: `Enabled` or `Disabled`\n  - [expiration] {Object} specifies the expiration attribute of the lifecycle rules for the object.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    - [expiredObjectDeleteMarker] {String} value `true`\n    `createdBeforeDate` and `days`  and `expiredObjectDeleteMarker` must have one.\n  - [abortMultipartUpload] {Object} Specifies the expiration attribute of the multipart upload tasks that are not complete.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `createdBeforeDate` and `days` must have one.\n  - [transition] {Object} Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle.\n    - storageClass {String} Specifies the storage class that objects that conform to the rule are converted into. allow values: `IA` or `Archive`\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `createdBeforeDate` and `days` must have one.\n  - [noncurrentVersionTransition] {Object} Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle.\n    - storageClass {String} Specifies the storage class that history objects that conform to the rule are converted into. allow values: `IA` or `Archive`\n    - noncurrentDays {String} expire after the `noncurrentDays`\n  `expiration`、 `abortMultipartUpload`、 `transition`、 `noncurrentVersionTransition` must have one.\n  - [noncurrentVersionExpiration] {Object} specifies the expiration attribute of the lifecycle rules for the history object.\n    - noncurrentDays {String} expire after the `noncurrentDays`\n  - [tag] {Object} Specifies the object tag applicable to a rule. Multiple tags are supported.\n    - key {String} Indicates the tag key.\n    - value {String} Indicates the tag value.\n    `tag` cannot be used with `abortMultipartUpload`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketLifecycle('hello', [\n  {\n    id: 'delete after one day',\n    prefix: 'logs/',\n    status: 'Enabled',\n    days: 1\n  },\n  {\n    prefix: 'logs2/',\n    status: 'Disabled',\n    date: '2022-10-11T00:00:00.000Z'\n  }\n]).then((result) => {});\n```\n\nexample: for history with noncurrentVersionExpiration\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  expiration: {\n    days: '1'\n  },\n  noncurrentVersionExpiration: {\n    noncurrentDays: '1'\n  }\n}]);\nconsole.log(result)\n```\n\nexample: for history with expiredObjectDeleteMarker\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  expiration: {\n    expiredObjectDeleteMarker: 'true'\n  },\n  noncurrentVersionExpiration: {\n    noncurrentDays: '1'\n  }\n}]);\nconsole.log(result)\n```\n\nexample: for history with noncurrentVersionTransition\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  noncurrentVersionTransition: {\n    noncurrentDays: '10',\n    storageClass: 'IA'\n  }\n}]);\nconsole.log(result)\n```\n\n### .getBucketLifecycle(name[, options])\n\nGet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the lifecycle rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketLifecycle(name[, options])\n\nDelete the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketCORS(name, rules[, options])\n\nSet CORS rules of the bucket object\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains below properties:\n  - allowedOrigin {String/Array} configure for Access-Control-Allow-Origin header\n  - allowedMethod {String/Array} configure for Access-Control-Allow-Methods header\n  - [allowedHeader] {String/Array} configure for Access-Control-Allow-Headers header\n  - [exposeHeader] {String/Array} configure for Access-Control-Expose-Headers header\n  - [maxAgeSeconds] {String} configure for Access-Control-Max-Age header\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketCORS('hello', [\n  {\n    allowedOrigin: '*',\n    allowedMethod: [\n      'GET',\n      'HEAD',\n    ],\n  }\n]).then((result) => {});\n```\n\n### .getBucketCORS(name[, options])\n\nGet CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the CORS rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketCORS(name[, options])\n\nDelete CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .getBucketRequestPayment(bucketName[, options])\n\nget RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String} bucket name\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- payer {String} payer, BucketOwner or Requester\n- res {Object} response info, including\n  - data {Buffer} xml\n\n---\n\n### .putBucketRequestPayment(bucketName, payer[, options])\n\nput RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String}\n- payer {String} payer\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketEncryption(name, rules)\n\nput BucketEncryption value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [rules] {Object} parameters\n  - SSEAlgorithm {String} encryption type, expect AES256 or KMS\n  - {KMSMasterKeyID} {String} needed when encryption type is KMS\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketEncryption(name)\n\nget BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n- encryption {Object} rules\n  - SSEAlgorithm {String} encryption type, AES256 or KMS\n  - {KMSMasterKeyID} {String} will be return when encryption type is KMS\n\n---\n\n### .deleteBucketEncryption(name)\n\ndelete BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketTags(name, tag[, options])\n\nAdds tags for a bucket or modify the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketTags(name[, options])\n\nObtains the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- tag {Object} the tag of object\n- res {Object} response info\n\n---\n\n### .deleteBucketTags(name[, options])\n\nDeletes the tags added for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketPolicy(name, policy[, options])\n\nAdds or modify policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- policy {Object} bucket policy\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\nexample:\n```js\nconst policy = {\n  Version: '1',\n  Statement: [\n    {\n      Action: ['oss:PutObject', 'oss:GetObject'],\n      Effect: 'Deny',\n      Principal: ['1234567890'],\n      Resource: ['acs:oss:*:1234567890:*/*']\n    }\n  ]\n};\nconst result = await store.putBucketPolicy(bucket, policy);\nconsole.log(result);\n```\n---\n\n### .getBucketPolicy(name[, options])\n\nObtains the policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- policy {Object} the policy of bucket, if not exist, the value is null\n- res {Object} response info\n- status {Number} response status\n\n---\n\n### .deleteBucketPolicy(name[, options])\n\nDeletes the policy added for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n### .getBucketVersioning(name[, options])\n\nObtains the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- versionStatus {String | undefined} version status, `Suspended` or `Enabled`. default value: `undefined`\n- res {Object} response info\n\n---\n\n### .putBucketVersioning(name, status[, options])\n\nset the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- status {String} version status, allow values: `Enabled` or `Suspended`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n\n### .getBucketInventory(name, inventoryId[, options])\n\nget bucket inventory by inventory-id\n\nparameters:\n\n- name {String} the bucket name\n- inventoryId {String} inventory-id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- inventory {Inventory}\n- status {Number} response status\n- res {Object} response info\n\n```js\nasync function getBucketInventoryById() {\n  try {\n    const result = await client.getBucketInventory('bucket', 'inventoryid');\n    console.log(result.inventory)\n  } catch (err) {\n    console.log(err)\n  }\n}\n\ngetBucketInventoryById();\n```\n\n### putBucketInventory(name, inventory[, options])\n\nset bucket inventory\n\nparameters:\n\n- name {String} the bucket name\n- inventory {Inventory} inventory config\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n```ts\ntype Field = 'Size | LastModifiedDate | ETag | StorageClass | IsMultipartUploaded | EncryptionStatus';\ninterface Inventory {\n  id: string;\n  isEnabled: true | false;\n  prefix?: string;\n  OSSBucketDestination: {\n    format: 'CSV';\n    accountId: string;\n    rolename: string;\n    bucket: string;\n    prefix?: string;\n    encryption?:\n    | {'SSE-OSS': ''}\n    | {\n      'SSE-KMS': {\n        keyId: string;\n      };\n    };\n  };\n  frequency: 'Daily' | 'Weekly';\n  includedObjectVersions: 'Current' | 'All';\n  optionalFields?: {\n    field?: Field[];\n  };\n}\n```\n```js\nconst inventory = {\n  id: 'default',\n  isEnabled: false, // `true` | `false`\n  prefix: 'ttt', // filter prefix\n  OSSBucketDestination: {\n    format: 'CSV',\n    accountId: '1817184078010220',\n    rolename: 'AliyunOSSRole',\n    bucket: 'your bucket',\n    prefix: 'test',\n    //encryption: {'SSE-OSS': ''},\n    /*\n      encryption: {\n      'SSE-KMS': {\n        keyId: 'test-kms-id';\n      };, \n    */\n  },\n  frequency: 'Daily', // `WEEKLY` | `Daily`\n  includedObjectVersions: 'All', // `All` | `Current`\n  optionalFields: {\n    field: [\"Size\", \"LastModifiedDate\", \"ETag\", \"StorageClass\", \"IsMultipartUploaded\", \"EncryptionStatus\"]\n  },\n}\n\nasync function putInventory(){\n  const bucket = 'Your Bucket Name';\n  try {\n    await client.putBucketInventory(bucket, inventory);\n  } catch(err) {\n    console.log(err);\n  }\n}\n\nputInventory()\n```\n\n### deleteBucketInventory(name, inventoryId[, options])\n\ndelete bucket inventory by inventory-id\n\nparameters:\n\n- name {String} the bucket name\n- inventoryId {String} inventory-id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n### listBucketInventory(name[, options])\n\nlist bucket inventory\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n  - continuationToken used by search next page\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\nexample: \n\n```js\nasync function listBucketInventory() {\n  const bucket = 'Your Bucket Name';\n  let nextContinuationToken;\n  // list all inventory of the bucket\n  do {\n    const result = await client.listBucketInventory(bucket, nextContinuationToken);\n    console.log(result.inventoryList);\n    nextContinuationToken = result.nextContinuationToken;\n  } while (nextContinuationToken)\n}\n\nlistBucketInventory();\n```\n\n### .abortBucketWorm(name[, options])\n\nused to delete an unlocked retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .completeBucketWorm(name, wormId[, options])\n\nused to lock a retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- wormId {String} worm id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .extendBucketWorm(name, wormId, days[, options])\n\n used to extend the retention period of objects in a bucket whose retention policy is locked.\n\nparameters:\n\n- name {String} the bucket name\n- wormId {String} worm id\n- days {String | Number} retention days\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketWorm(name[, options])\n\n used to query the retention policy information of the specified bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- wormId {String} worm id\n- state {String} `Locked` or `InProgress`\n- days {String} retention days\n- creationDate {String}\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .initiateBucketWorm(name, days[, options])\n\ncreate a retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- days {String | Number}} set retention days\n- [options] {Object} optional args\n\nSuccess will return:\n\n- wormId {String} worm id\n- status {Number} response status\n- res {Object} response info\n\n---\n\n## Object Operations\n\nAll operations function return Promise, except `signatureUrl`.\n\n### .put(name, file[, options])\n\nAdd an object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream|File(only support Browser)|Blob(only support Browser)} object local path, content buffer or ReadStream content instance use in Node, Blob and html5 File\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - See more: [PutObject](https://help.aliyun.com/document_detail/31978.html#title-yxe-96d-x61)\n  - [disabledMD5] {Boolean} default true, it just work in Browser. if false,it means that MD5 is automatically calculated for uploaded files. **_NOTE:_** Synchronous computing tasks will block the main process\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- data {Object} callback server response data, sdk use JSON.parse() return\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through local file path\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/demo.txt', filepath).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/demo.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829244'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through content buffer\n\n```js\nstore.put('ossdemo/buffer', Buffer.from('foo content')).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/buffer',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/buffer',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"xxx\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829243'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .putStream(name, stream[, options])\n\nAdd a stream object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- stream {ReadStream} object ReadStream content instance\n- [options] {Object} optional parameters\n  - [contentLength] {Number} the stream length, `chunked encoding` will be used if absent\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.putStream('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .append(name, file[, options])\n\nAppend an object to the bucket, it's almost same as put, but it can add content to existing object rather than override it.\n\nAll parameters are same as put except for options.position\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [position] {String} specify the position which is the content length of the latest object\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n\nobject:\n\n- name {String} object name\n- url {String} the url of oss\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- nextAppendPosition {String} the next position\n\nexample:\n\n```js\nlet object = await store.append('ossdemo/buffer', Buffer.from('foo'));\n\n// append content to the existing object\nobject = await store.append('ossdemo/buffer', Buffer.from('bar'), {\n  position: object.nextAppendPosition,\n});\n```\n\n### .getObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `endpoint`.\n\ne.g.:\n\n```js\nconst cdnUrl = client.getObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .generateObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `bucket and endpoint `.\nSuggest use generateObjectUrl instead of getObjectUrl.\n\ne.g.:\n\n```js\nconst url = client.generateObjectUrl('foo/bar.jpg');\n// cdnUrl should be `https://${bucketname}.${endpotint}foo/bar.jpg`\n\nconst cdnUrl = client.generateObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .head(name[, options])\n\nHead an object and get the meta info.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status, maybe 200 or 304\n- meta {Object} object user meta, if not set on `put()`, will return null.\n    If return status 304, meta will be null too\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-version-id] return in multiversion\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Head an exists object and get user meta\n\n```js\nawait this.store.put('ossdemo/head-meta', Buffer.from('foo'), {\n  meta: {\n    uid: 1,\n    path: 'foo/demo.txt'\n  }\n});\nconst object = await this.store.head('ossdemo/head-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  meta: {\n    uid: '1',\n    path: 'foo/demo.txt'\n  },\n  res: { ... }\n}\n```\n\n- Head a not exists object\n\n```js\nconst object = await this.store.head('ossdemo/head-meta');\n// will throw NoSuchKeyError\n```\n\n### .getObjectMeta(name[, options])\n\nGet an  object meta info include ETag、Size、LastModified and so on, not return object content.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info, including\n  - headers {Object} response headers\n\nexample:\n\n- Head an exists object and get object meta info\n\n```js\nawait this.store.put('ossdemo/object-meta', Buffer.from('foo'));\nconst object = await this.store.getObjectMeta('ossdemo/object-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  res: { ... }\n}\n```\n\n### .get(name[, file, options])\n\nGet an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the content\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [versionId] {String} the version id of history object\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [responseCacheControl] {String} default `no-cache`, (only support Browser). response-cache-control, will response with HTTP Header `Cache-Control`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Range' get specifying range bytes content, e.g.: `Range: bytes=0-9`\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/demo.txt', filepath);\n```\n\n_ Store object to a writestream\n\n```js\nawait store.get('ossdemo/demo.txt', somestream);\n```\n\n- Get an object content buffer\n\n```js\nconst result = await store.get('ossdemo/demo.txt');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a processed image and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.png';\nawait store.get('ossdemo/demo.png', filepath, {process: 'image/resize,w_200'});\n```\n\n- Get a not exists object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/not-exists-demo.txt', filepath);\n// will throw NoSuchKeyError\n```\n\n- Get a historic version object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nconst versionId = 'versionId string';\nawait store.get('ossdemo/not-exists-demo.txt', filepath, {\n  versionId\n});\n```\n\n### .getStream(name[, options])\n\nGet an object read stream.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object stream\n\n```js\nconst result = await store.getStream('ossdemo/demo.txt');\nresult.stream.pipe(fs.createWriteStream('some file.txt'));\n```\n\n### .delete(name[, options])\n\nDelete an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf delete object not exists, will also delete success.\n\nexample:\n\n- Delete an exists object\n\n```js\nawait store.delete('ossdemo/someobject');\n```\n\n- Delete a not exists object\n\n```js\nawait store.delete('ossdemo/some-not-exists-object');\n```\n\n- Delete a history object or deleteMarker\n\n```js\nconst versionId = 'versionId';\nawait store.delete('ossdemo/some-not-exists-object', { versionId });\n```\n\n### .copy(name, sourceName[, sourceBucket, options])\n\nCopy an object from `sourceName` to `name`.\n\nparameters:\n\n- name {String} object name store on OSS\n- sourceName {String} source object name\n- [sourceBucket] {String} source Bucket. if doesn't exist，`sourceBucket` is same bucket. \n- [options] {Object} optional parameters\n  - [versionId] {String} the version id of history object\n  - [timeout] {Number} the operation timeout\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n    If the `meta` set, will override the source object meta.\n  - [headers] {Object} extra headers\n    - 'If-Match' do copy if source object etag equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' do copy if source object etag not equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-Modified-Since' do copy if source object modified after this time,\n        otherwise throw PreconditionFailedError\n    - 'If-Unmodified-Since' do copy if source object modified before this time,\n        otherwise throw PreconditionFailedError\n    - See more: [CopyObject](https://help.aliyun.com/document_detail/31979.html?#title-tzy-vxc-ncx)\n\nSuccess will return the copy result in `data` property.\n\nobject:\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT string\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf source object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Copy same bucket object\n\n```js\nstore.copy('newName', 'oldName').then((result) => {\n  console.log(result);\n});\n```\n\n- Copy other bucket object\n\n```js\nstore.copy('logo.png', 'logo.png', 'other-bucket').then((result) => {\n  console.log(result);\n});\n```\n\n- Copy historic object\n\n```js\nconst versionId = 'your verisonId'\nstore.copy('logo.png', 'logo.png', 'other-bucket', { versionId }).then((result) => {\n  console.log(result);\n});\n```\n\n### .putMeta(name, meta[, options])\n\nSet an exists object meta.\n\nparameters:\n\n- name {String} object name store on OSS\n- meta {Object} user meta, will send with `x-oss-meta-` prefix string\n  e.g.: `{ uid: 123, pid: 110 }`\n  If `meta: null`, will clean up the exists meta\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the putMeta result in `data` property.\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Update exists object meta\n\n```js\nconst result = await store.putMeta('ossdemo.txt', {\n  uid: 1, pid: 'p123'\n});\nconsole.log(result);\n```\n\n- Clean up object meta\n\n```js\nawait store.putMeta('ossdemo.txt', null);\n```\n\n### .deleteMulti(names[, options])\n\nDelete multi objects in one request.\n\nparameters:\n\n- names {Array<Object>} object names, max 1000 objects in once.\n  - key {String} object name\n  - [versionId] {String} the version id of history object or deleteMarker\n- [options] {Object} optional parameters\n  - [quiet] {Boolean} quiet mode or verbose mode, default is `false`, verbose mode\n    quiet mode: if all objects delete succes, return emtpy response.\n      otherwise return delete error object results.\n    verbose mode: return all object delete results.\n  - [timeout] {Number} the operation timeout\n\nSuccess will return delete success objects in `deleted` property.\n\n- [deleted] {Array<Object>} deleted object or deleteMarker info list\n  - [Key] {String} object name\n  - [VersionId] {String} object versionId\n  - [DeleteMarker] {String} generate or delete marker\n  - [DeleteMarkerVersionId] {String} marker versionId \n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete multi objects in quiet mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3'], {\n  quiet: true\n});\n```\n\n- Delete multi objects in verbose mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3']);\n```\n\n- Delete multi objects in multiversion\n\n```js\nconst obj1 = {\n  key: 'key1',\n  versionId: 'versionId1'\n}\nconst obj2 = {\n  key: 'key2',\n  versionId: 'versionId2'\n}\nconst result = await store.deleteMulti([obj1, obj2]);\n```\n\n### .list(query[, options])\n\nList objects in the bucket.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 objects\n\n```js\nconst result = await store.list();\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nconst result = await store.list({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nconst result = await store.list({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n### .listV2(query[, options])\n\nList objects in the bucket.(recommended)\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [continuation-token] (continuationToken) {String} search start from `continuationToken`, including `continuationToken` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n  - [start-after] {String} specifies the Start-after value from which to start the list. The names of objects are returned in alphabetical order.\n  - [fetch-owner] {Boolean} specifies whether to include the owner information in the response.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n  - name {String} object name on oss\n  - url {String} resource url\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n  - type {String} object type, e.g.: `Normal`\n  - size {Number} object size, e.g.: `344606`\n  - storageClass {String} storage class type, e.g.: `Standard`\n  - owner {Object|null} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextContinuationToken {String} next continuation-token string\n- keyCount {Number} The number of keys returned for this request. If Delimiter is specified, KeyCount is the sum of the elements in Key and CommonPrefixes.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n- List top 10 objects\n\n```js\nconst result = await store.listV2({\n  'max-keys': 10\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nconst result = await store.listV2({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nconst result = await store.listV2({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n- List `a/` dir objects, after `a/b` and not include `a/b`\n\n```js\nconst result = await store.listV2({\n  delimiter: '/',\n  prefix: 'a/',\n  'start-after': 'a/b'\n});\nconsole.log(result.objects);\n```\n\n### .getBucketVersions(query[, options])\n\nList the version information of all objects in the bucket, including the delete marker (Delete Marker).\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [versionIdMarker] {String} set the result to return from the version ID marker of the key marker object and sort by the versions\n  - [keyMarker] {String} search start from `keyMarker`, including `keyMarker` key\n  - [encodingType] {String} specifies that the returned content is encoded, and specifies the type of encoding\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [maxKeys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - isLatest {Boolean}\n    - versionId {String} object versionId\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- deleteMarker {Array<ObjectDeleteMarker>} object delete marker info list\n  Each `ObjectDeleteMarker`\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - versionId {String} object versionId\n- isTruncated {Boolean} truncate or not\n- nextKeyMarker (nextMarker) {String} next marker string\n- nextVersionIdMarker (NextVersionIdMarker) {String} next version ID marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- View all versions of objects and deleteMarker of bucket\n\n```js\nconst result = await store.getBucketVersions();\nconsole.log(result.objects);\nconsole.log(result.deleteMarker);\n```\n\n- List from key-marker\n\n```js\nconst result = await store.getBucketVersions({\n  'keyMarker': 'keyMarker'\n});\nconsole.log(result.objects);\n```\n\n- List from the version-id-marker of key-marker\n\n```js\nconst result = await store.getBucketVersions({\n  'versionIdMarker': 'versionIdMarker',\n  'keyMarker': 'keyMarker'\n});\nconsole.log(result.objects);\nconsole.log(result.deleteMarker);\n```\n\n### .signatureUrl(name[, options])\n\nCreate a signature url for download or upload object. When you put object with signatureUrl ,you need to pass `Content-Type`.Please look at the example.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [method] {String} the HTTP method, default is 'GET'\n  - [Content-Type] {String} set the request content type\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [trafficLimit] {Number} traffic limit, range: `819200`~`838860800`.\n  - [subResource] {Object} additional signature parameters in url.\n  - [response] {Object} set the response headers for download\n    - [content-type] {String} set the response content type\n    - [content-disposition] {String} set the response content disposition\n    - [cache-control] {String} set the response cache control\n    - See more: https://help.aliyun.com/document_detail/oss/api-reference/object/GetObject.html\n  - [callback] {Object} set the callback for the operation\n    - url {String} set the url for callback\n    - [host] {String} set the host for callback\n    - body {String} set the body for callback\n    - [contentType] {String} set the type for body\n    - [customValue] {Object} set the custom value for callback,eg. {var1: value1,var2:value2}\n\nSuccess will return signature url.\n\nexample:\n\n- Get signature url for object\n\n```js\nconst url = store.signatureUrl('ossdemo.txt');\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT'\n});\nconsole.log(url);\n\n//  put object with signatureUrl\n// -------------------------------------------------\n\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT',\n  'Content-Type': 'text/plain; charset=UTF-8',\n});\nconsole.log(url);\n\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  response: {\n    'content-type': 'text/custom',\n    'content-disposition': 'attachment'\n  }\n});\nconsole.log(url);\n\n// put operation\n```\n\n- Get a signature url for a processed image\n\n```js\nconst url = store.signatureUrl('ossdemo.png', {\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.png', {\n  expires: 3600,\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n```\n\n### .putACL(name, acl[, options])\n\nSet object's ACL.\n\nparameters:\n\n- name {String} object name\n- acl {String} acl (private/public-read/public-read-write)\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object \n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set an object's ACL\n\n```js\nawait store.putACL('ossdemo.txt', 'public-read');\n```\n\n- Set an history object's ACL\n\n```js\nconst versionId = 'object versionId'\nawait store.putACL('ossdemo.txt', 'public-read', {\n  versionId\n});\n```\n\n### .getACL(name[, options])\n\nGet object's ACL.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get an object's ACL\n\n```js\nconst result = await store.getACL('ossdemo.txt');\nconsole.log(result.acl);\n```\n\n- Get an history object's ACL\n\n```js\nconst versionId = 'object versionId'\nconst result = await store.getACL('ossdemo.txt', { versionId });\nconsole.log(result.acl);\n```\n\n### .restore(name[, options])\n\nRestore Object.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object \n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Restore an object\n\n```js\nconst result = await store.restore('ossdemo.txt');\nconsole.log(result.status);\n```\n\n- Restore an history object\n\n```js\nconst versionId = 'object versionId';\nconst result = await store.restore('ossdemo.txt', { versionId });\nconsole.log(result.status);\n```\n\n### .putSymlink(name, targetName[, options])\n\nPutSymlink\n\nparameters:\n\n- name {String} object name\n- targetName {String} target object name\n- [options] {Object} optional parameters\n  - [storageClass] {String} the storage type include (Standard,IA,Archive)\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers, detail see [PutSymlink](https://help.aliyun.com/document_detail/45126.html#title-x71-l2b-7i8)\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst options = {\n  storageClass: 'IA',\n  meta: {\n    uid: '1',\n    slus: 'test.html' \n  }\n}\nconst result = await store.putSymlink('ossdemo.txt', 'targetName', options)\nconsole.log(result.res)\n```\n\nputSymlink multiversion \n```js\nconst options = {\n  storageClass: 'IA',\n  meta: {\n    uid: '1',\n    slus: 'test.html' \n  },\n}\nconst result = await store.putSymlink('ossdemo.txt', 'targetName', options)\nconsole.log(result.res.headers['x-oss-version-id'])\n```\n\n### .getSymlink(name[, options])\n\nGetSymlink\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n- [versionId] {String} the version id of history object\n\nSuccess will return\n\n- targetName {String} target object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst result = await store.getSymlink('ossdemo.txt')\nconsole.log(result.targetName)\n```\n\nfor history object\n```js\nconst versionId = 'object versionId';\nconst result = await store.getSymlink('ossdemo.txt', { versionId })\nconsole.log(result.targetName)\n```\n\n### .initMultipartUpload(name[, options])\nBefore transmitting data in the Multipart Upload mode,\nyou must call the Initiate Multipart Upload interface to notify the OSS to initiate a Multipart Upload event.\nThe Initiate Multipart Upload interface returns a globally unique Upload ID created by the OSS server to identify this Multipart Upload event.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] Mime file type e.g.: application/octet-stream\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - [x-oss-server-side-encryption]\n    Specify the server-side encryption algorithm used to upload each part of this object,Type: string, Valid value: AES256 `x-oss-server-side-encryption: AES256`<br>\n    if use in browser you should be set cors expose header x-oss-server-side-encryption\n    - See more: [InitiateMultipartUpload](https://help.aliyun.com/document_detail/31992.html?#title-wh0-a2h-rur)\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-server-side-encryption] if set request header x-oss-server-side-encryption, will return\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- uploadId {String} upload id, use for uploadPart, completeMultipart\n\nexample:\n\n```js\n  const result = await store.initMultipartUpload('object');\n  console.log(result);\n```\n\n### .uploadPart(name, uploadId, partNo, file, start, end[, options])\nAfter initiating a Multipart Upload event, you can upload data in parts based on the specified object name and Upload ID.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- file {File|String}  is File or FileName, the whole file<br>\n Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB. <br>\n In Node you can use File or FileName, but in browser you only can use File.\n- start {Number} part start bytes  e.g: 102400\n- end {Number} part end bytes  e.g: 204800\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n  const uploadId = result.uploadId;\n  const file; //the data you want to upload, is a File or FileName(only in node)\n  //if file part is 10\n  const partSize = 100 * 1024;\n  const fileSize = 10 * partSize;//you need to calculate\n  const dones = [];\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const part = await store.uploadPart(name, uploadId, i, file, start, end);\n    dones.push({\n      number: i,\n      etag: part.etag\n    });\n    console.log(part);\n  }\n\n  //end need to call completeMultipartUpload api\n```\n\n### .uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])\nUsing Upload Part Copy, you can copy data from an existing object and upload a part of the data.\nWhen copying a file larger than 1 GB, you must use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- range {String} Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB, range value like `0-102400`\n- sourceData {Object}\n  - sourceKey {String} the source object name\n  - sourceBucketName {String} the source bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n  - [headers] {Object} The following request header is used for the source objects specified by x-oss-copy-source.\n    - [x-oss-copy-source-if-match]  default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]   default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]   default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since]   default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  const partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const range = start + '-' + (end - 1);\n    const part = await store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n- use history object to uploadPartCopy\n\n```js\n  const versionId = 'object versionId';\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n  const partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const range = start + '-' + (end - 1);\n    const part = await store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    }, {\n      versionId\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n### .completeMultipartUpload(name, uploadId, parts[, options])\nAfter uploading all data parts, you must call the Complete Multipart Upload API to complete Multipart Upload for the entire file.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- parts {Array} more part {Object} from uploadPartCopy, , each in the structure:\n  - number {Number} partNo\n  - etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [CompleteMultipartUpload](https://help.aliyun.com/document_detail/31995.html?#title-nan-5y3-rjd)\n\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data , sdk use JSON.parse() return\n\nexample:\n\n```js\n\n  //init multipart\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  //upload part\n  const file; //the data you want to upload, this example size is 10 * 100 * 1024\n  const fileSize;//you need to calculate\n  const partSize = 100 * 1024;//100kb\n  const done = [];\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const data = file.slice(start, end);\n    const part = yield store.uploadPart(name, result.uploadId, i, data);\n    console.log(part);\n    done.push({\n          number: i,\n          etag: part.res.headers.etag\n        });\n  }\n\n  //complete\n  const completeData = await store.completeMultipartUpload(name, result.uploadId, done);\n  console.log(completeData);\n```\n\n\n### .multipartUpload(name, file[, options])\n\nUpload file with [OSS multipart][oss-multipart].<br>\nthis function contains initMultipartUpload, uploadPart, completeMultipartUpload.\nWhen you use multipartUpload api，if you encounter problems with ConnectionTimeoutError, you should handle ConnectionTimeoutError in your business code. How to resolve ConnectionTimeoutError, you can decrease `partSize` size 、 Increase `timeout` 、Retry request ,\nor give tips in your business code;\n\nparameters:\n\n- name {String} object name\n- file {String|File(only support Browser)|Blob(only support Browser)|Buffer} file path or HTML5 Web File or web Blob or content buffer\n- [options] {Object} optional args\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part, defalut `1024 * 1024`(1MB), minimum `100 * 1024`(100KB)\n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n    - file {File} The file object selected by the user, if the browser is restarted, it needs the user to manually trigger the settings\n    - name {String} object key\n    - fileSize {Number} file size\n    - partSize {Number} part size\n    - uploadId {String} upload id\n    - doneParts {Array} An array of pieces that have been completed, including the object structure as follows\n       - number {Number} part number\n       - etag {String} part etag\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [mime] {String} custom mime , will send with `Content-Type` entity header\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n          e.g.:\n         ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n         ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [disabledMD5] {Boolean} default true, it just work in Browser. if false,it means that MD5 is automatically calculated for uploaded files. **_NOTE:_** Synchronous computing tasks will block the main process\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data, sdk use JSON.parse() return\n\nexample:\n\n- Upload using multipart\n\n```js\nconst result = await store.multipartUpload('object', '/tmp/file');\nlet savedCpt;\nconsole.log(result);\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    savedCpt = cpt;\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) { //progress is generator\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\n```\n\n- multipartUpload progress example\n\n```js\n\n//async function\nasync function asyncProgress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result1 = await store.multipartUpload('object', '/tmp/file', {\n  progress: asyncProgress\n});\n\n//function\nfunction progress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result2 = await store.multipartUpload('object', '/tmp/file', {\n  progress: progress\n});\n\n```\n\n- multipartUpload with abort\n\n>tips: abort multipartUpload support on node and browser\n\n```js\n\n//start upload\nlet abortCheckpoint;\nstore.multipartUpload('object', '/tmp/file', {\n  progress: function (p, cpt, res) {\n    abortCheckpoint = cpt;\n  }\n}).then(res => {\n  // do something\n}.catch(err => {\n   //if abort will catch abort event\n  if (err.name === 'abort') {\n    // handle abort\n    console.log('error: ', err.message)\n  }\n}))\n\n// abort\nstore.abortMultipartUpload(abortCheckpoint.name, abortCheckpoint.uploadId)\n\n```\n\n- multipartUpload with cancel\n\n>tips: cancel multipartUpload support on node and browser\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n- multipartUpload with capture `ConnectionTimeoutError`  error\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  if (err.code === 'ConnectionTimeoutError') {\n    console.log(\"Woops,Woops ,timeout error!!!\");\n    // do ConnectionTimeoutError operation\n  }\n}\n\n```\n\n### .multipartUploadCopy(name, sourceData[, options])\n\nCopy file with [OSS multipart][oss-multipart]. <br>\nthis function contains head, initMultipartUpload, uploadPartCopy, completeMultipartUpload.<br>\nWhen copying a file larger than 1 GB, you should use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part, defalut `1024 * 1024`(1MB), minimum `100 * 1024`(100KB)\n  - [versionId] {String} the version id of history object \n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [copyheaders] {Object} only uploadPartCopy api used, detail [see](https://www.alibabacloud.com/help/doc-detail/31994.htm)\n    - [x-oss-copy-source-if-match]  only uploadPartCopy api used, default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]  only uploadPartCopy api used, default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]  only uploadPartCopy api used, default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since] only uploadPartCopy api used, default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n- Copy using multipart\n\n```js\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n});\nlet savedCpt;\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    savedCpt = cpt;\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\n```\n\n- multipartUploadCopy with abort\n\n```js\n\n//start upload\nlet abortCheckpoint;\nstore.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n  progress: function (p, cpt, res) {\n    abortCheckpoint = cpt;\n  }\n}).then(res => {\n  // do something\n}.catch(err => {\n   //if abort will catch abort event\n  if (err.name === 'abort') {\n    // handle abort\n    console.log('error: ', err.message)\n  }\n}))\n\n//the other event to abort, for example: click event\n//to abort upload must use the same client instance\nstore.abortMultipartUpload(abortCheckpoint.name, abortCheckpoint.uploadId)\n\n```\n\n- multipartUploadCopy with cancel\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n- multipartUploadCopy with versionId\n\n```js\n\nconst versionId = 'object versionId'\n//start upload\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  },\n  versionId\n});\n\n```\n\n### .listParts(name, uploadId[, query, options])\n\nThe ListParts command can be used to list all successfully uploaded parts mapped to a specific upload ID, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- name {String} object key\n- uploadId {String} upload ID from initMultipartUpload api\n- [query] {Object} query parameters\n  - [max-parts] {Number} The maximum part number in the response of the OSS. default value: 1000.\n  - [part-number-marker] {Number} Starting position of a specific list. A part is listed only when the part number is greater than the value of this parameter.\n  - [encoding-type] {String} Specify the encoding of the returned content and the encoding type. Optional value: url\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- uploadId {String} upload ID\n- bucket {String} Specify the bucket name.\n- name {String} object name\n- PartNumberMarker {Number} Starting position of the part numbers in the listing result.\n- nextPartNumberMarker {Number} If not all results are returned this time, the response request includes the NextPartNumberMarker element to indicate the value of PartNumberMarker in the next request.\n- maxParts {Number} upload ID\n- isTruncated {Boolean} Whether the returned result list for List Parts is truncated. The “true” indicates that not all results are returned; “false” indicates that all results are returned.\n- parts {Array} The container that saves part information, each in the structure:\n  - PartNumber {Number} Part number.\n  - LastModified {Date} Time when a part is uploaded.\n  - ETag {String} ETag value in the content of the uploaded part.\n  - Size {Number} Size of the uploaded part.\n\nexample:\n\n- List uploaded part\n\n```js\n\nconst result = await store.listParts('objcet', 'uploadId', {\n  'max-parts': 1000\n});\nconsole.log(result);\n```\n\n### .listUploads(query[, options])\n\nList on-going multipart uploads, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- query {Object} query parameters\n  - [prefix] {String} the object key prefix\n  - [max-uploads] {Number} the max uploads to return\n  - [key-marker] {String} the object key marker, if `upload-id-marker`\n    is not provided, return uploads with `key > marker`, otherwise\n    return uploads with `key >= marker && uploadId > id-marker`\n  - [upload-id-marker] {String} the upload id marker, must be used\n    **WITH** `key-marker`\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- List on-going multipart uploads\n\n```js\n\nconst result = await store.listUploads({\n  'max-uploads': 100,\n  'key-marker': 'my-object',\n  'upload-id-marker': 'upload-id'\n});\nconsole.log(result);\n```\n\n### .abortMultipartUpload(name, uploadId[, options])\n\nAbort a multipart upload for object.\n\nparameters:\n\n- name {String} the object name\n- uploadId {String} the upload id\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- Abort a multipart upload\n\n```js\nconst result = await store.abortMultipartUpload('object', 'upload-id');\nconsole.log(result);\n```\n\n### .calculatePostSignature(policy)\n\nget postObject params \n\nparameters:\n\n- policy {JSON or Object} policy must contain expiration and conditions.\n\nSuccess will return postObject Api params.\n\nObject:\n\n- OSSAccessKeyId {String}\n- Signature {String}\n- policy {Object} response info\n\n### .getObjectTagging(name[, options])\n\nObtains the tags of an object.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- tag {Object} the tag of object\n- res {Object} response info\n\n### .putObjectTagging(name, tag[, options])\n\nConfigures or updates the tags of an object.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n### .deleteObjectTagging(name[, options])\n\nDeletes the tag of a specified object.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n### .processObjectSave(sourceObject, targetObject, process[, targetBucket])\n\nPersistency indicates that images are asynchronously stored in the specified Bucket\n\nparameters:\n\n- sourceObject {String} source object name\n- targetObject {String} target object name\n- process {String} process string\n- [targetBucket] {String} target bucket\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n\n```js\nconst sourceObject = 'a.png'\nconst targetObject = 'b.png'\nconst process = 'image/watermark,text_aGVsbG8g5Zu+54mH5pyN5Yqh77yB,color_ff6a00'\n\nawait this.store.processObjectSave(sourceObject, targetObject, process);\n```\n\n## RTMP Operations\n\nAll operations function is [async], except `getRtmpUrl`.\n\nasync function format: `async functionName(...)`.\n\n### .putChannel(id, conf[, options])\n\nCreate a live channel.\n\nparameters:\n\n- id {String} the channel id\n- conf {Object} the channel config\n  - [Description] {String} the channel description\n  - [Status] {String} the channel status: 'enabled' or 'disabled'\n  - [Target] {Object}\n    - [Type] {String} the data type for the channel, only 'HLS' is supported now\n    - [FragDuration] {Number} duration of a 'ts' segment\n    - [FragCount] {Number} the number of 'ts' segments in a 'm3u8'\n    - [PlaylistName] {String} the 'm3u8' name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- publishUrls {Array} the publish urls\n- playUrls {Array} the play urls\n- res {Object} response info\n\nexample:\n\n- Create a live channel\n\n```js\nconst cid = 'my-channel';\nconst conf = {\n  Description: 'this is channel 1',\n  Status: 'enabled',\n  Target: {\n    Type: 'HLS',\n    FragDuration: '10',\n    FragCount: '5',\n    PlaylistName: 'playlist.m3u8'\n  }\n};\n\nconst r = await this.store.putChannel(cid, conf);\nconsole.log(r);\n```\n\n### .getChannel(id[, options])\n\nGet live channel info.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- data {Object} channel info, same as conf in [.putChannel](#putchannelid-conf-options)\n- res {Object} response info\n\nexample:\n\n- Get live channel info\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannel(cid);\nconsole.log(r);\n```\n\n### .deleteChannel(id[, options])\n\nDelete a live channel.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response infomation.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Delete a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.deleteChannel(cid);\nconsole.log(r);\n```\n\n### .putChannelStatus(id, status[, options])\n\nChange the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- status {String} the status: 'enabled' or 'disabled'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Disable a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.putChannelStatus(cid, 'disabled');\nconsole.log(r);\n```\n\n### .getChannelStatus(id[, options])\n\nGet the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel status information.\n\nobject:\n\n- data {Object}\n  - Status {String} the channel status: 'Live' or 'Idle'\n  - [ConnectedTime] {String} the connected time of rtmp pushing\n  - [RemoteAddr] {String} the remote addr of rtmp pushing\n  - [Video] {Object} the video parameters (Width/Height/FrameRate/Bandwidth/Codec)\n  - [Audio] {Object} the audio parameters (Bandwidth/SampleRate/Codec)\n- res {Object} response info\n\nexample:\n\n- Get a live channel status\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelStatus(cid);\nconsole.log(r);\n\n// { Status: 'Live',\n//   ConnectedTime: '2016-04-12T11:51:03.000Z',\n//   RemoteAddr: '42.120.74.98:53931',\n//   Video:\n//   { Width: '672',\n//     Height: '378',\n//     FrameRate: '29',\n//     Bandwidth: '60951',\n//     Codec: 'H264' },\n//   Audio: { Bandwidth: '5959', SampleRate: '22050', Codec: 'AAC' }\n// }\n```\n\n### .listChannels(query[, options])\n\nList channels.\n\nparameters:\n\n- query {Object} parameters for list\n  - prefix {String}: the channel id prefix (returns channels with this prefix)\n  - marker {String}: the channle id marker (returns channels after this id)\n  - max-keys {Number}: max number of channels to return\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel list.\n\nobject:\n\n- channels {Array} the channels, each in the structure:\n  - Name {String} the channel id\n  - Description {String} the channel description\n  - Status {String} the channel status\n  - LastModified {String} the last modification time of the channel\n  - PublishUrls {Array} the publish urls for the channel\n  - PlayUrls {Array} the play urls for the channel\n- nextMarker: result.data.NextMarker || null,\n- isTruncated: result.data.IsTruncated === 'true'\n- res {Object} response info\n\nexample:\n\n- List live channels\n\n```js\nconst r = await this.store.listChannels({\n  prefix: 'my-channel',\n  'max-keys': 3\n});\nconsole.log(r);\n```\n\n### .getChannelHistory(id[, options])\n\nGet the live channel history.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the history information.\n\nobject:\n\n- records {Object} the pushing records, each in the structure:\n  - StartTime {String} the start time\n  - EndTime {String} the end time\n  - RemoteAddr {String} the remote addr\n- res {Object} response info\n\nexample:\n\n- Get the live channel history\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelHistory(cid);\nconsole.log(r);\n```\n\n### .createVod(id, name, time[, options])\n\nCreate a VOD playlist for the channel.\n\nparameters:\n\n- id {String} the channel id\n- name {String} the playlist name\n- time {Object} the duration time\n  - startTime {Number} the start time in epoch seconds\n  - endTime {Number} the end time in epoch seconds\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Create a vod playlist of a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.createVod(cid, 're-play', {\n  startTime: 1460464870,\n  endTime: 1460465877\n});\nconsole.log(r);\n```\n\n### .getRtmpUrl(channelId[, options])\n\nGet signatured rtmp url for publishing.\n\nparameters:\n\n- channelId {String} the channel id\n- [options] {Object} optional parameters\n  - [expires] {Number} the expire time in seconds of the url\n  - [params] {Object} the additional paramters for url, e.g.: {playlistName: 'play.m3u8'}\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the rtmp url.\n\nexample:\n\n- Get a rtmp url.\n\n```js\nconst cid = 'my-channel';\n\nconst url = this.store.getRtmpUrl(this.cid, {\n  params: {\n    playlistName: 'play.m3u8'\n  },\n  expires: 3600\n});\nconsole.log(url);\n// rtmp://ossliveshow.oss-cn-hangzhou.aliyuncs.com/live/tl-channel?OSSAccessKeyId=T0cqQWBk2ThfRS6m&Expires=1460466188&Signature=%2BnzTtpyxUWDuQn924jdS6b51vT8%3D\n```\n\n## Create A Image Service Instance\n\nEach Image Service instance required `accessKeyId`, `accessKeySecret`, `bucket` and `imageHost`.\n\n### oss.ImageClient(options)\n\nCreate a Image service instance.\n\noptions:\n- imageHost {String} your image service domain that binding to a OSS bucket\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- bucket {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nconst oss = require('ali-oss');\n\nconst imgClient = oss.ImageClient({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'my_image_bucket'\n  imageHost: 'thumbnail.myimageservice.com'\n});\n```\n\n## Image Operations\n\nAll operations function is [async], except `imgClient.signatureUrl`.\n\nasync function format: `async functionName(...)`.\n\n### imgClient.get(name, file[, options])\n\nGet an image from the image channel.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the image\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image with a style and store it to the local file\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', filepath);\n```\n\n_ Store image to a writestream\n\n```js\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', somestream);\n```\n\n- Get an image content buffer\n\n```js\nconst result = await imgClient.get('ossdemo/demo.jpg@200w_200h');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a not exists object or a not image object\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/not-exists-demo.jpg@200w_200h', filepath);\n// will throw NoSuchKeyError\n```\n\n### imgClient.getStream(name[, options])\n\nGet an image read stream.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image object stream\n\n```js\nconst result = await imgClient.getStream('ossdemo/demo.jpg@200w_200h');\nresult.stream.pipe(fs.createWriteStream('some demo.jpg'));\n```\n\n### imgClient.getExif(name[, options])\n\nGet a image exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nIf object don't have exif, will throw 400 BadRequest.\n\nexample:\n\n```js\nconst result = await imgClient.getExif('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n### imgClient.getInfo(name[, options])\n\nGet a image info and exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nexample:\n\n```js\nconst result = await imgClient.getInfo('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     Format: \"jpg\",\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n\n### imgClient.putStyle(name, style[, options])\n// TODO\n\n### imgClient.getStyle(name[, options])\n\nGet a style by name from the image channel.\n\nparameters:\n- name {String} image style name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} styles object\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.getStyle('400');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"234\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:58:20 GMT\"\n//     },\n//     size: 234,\n//     aborted: false,\n//     rt: 398,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }\n// }\n```\n\n### imgClient.listStyle([options])\n\nGet all styles from the image channel.\n\nparameters:\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Array} styles array, a style object:\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.listStyle();\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"913\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:47:32 GMT\"\n//     },\n//     size: 913,\n//     aborted: false,\n//     rt: 1911,\n//     keepAliveSocket: false\n//   },\n//   data: [{\n//     Name: \"200-200\",\n//     Content: \"0e_200w_200h_0c_0i_0o_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:28:08 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:28:08 GMT\"\n//   }, {\n//     Name: \"800\",\n//     Content: \"800w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:29:15 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:29:15 GMT\"\n//   }, {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }, {\n//     Name: \"600\",\n//     Content: \"600w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:35:02 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:35:02 GMT\"\n//   }]\n// }\n```\n\n### imgClient.deleteStyle(name[, options])\n// TODO\n\n### imgClient.signatureUrl(name)\n\nCreate a signature url for directly download.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return full signature url.\n\nexample:\n\n```js\nconst url = imgClient.signatureUrl('\n');\n// http://thumbnail.myimageservice.com/demo.jpg@200w_200h?OSSAccessKeyId=uZxyLARzYZtGwHKY&Expires=1427803849&Signature=JSPRe06%2FjQpQSj5zlx2ld1V%2B35I%3D\n```\n\n## Cluster Mode\n\nCluster mode now only support object operations.\n\n```js\nconst Cluster = require('ali-oss').ClusterClient;\n\nconst client = Cluster({\n  cluster: [{\n    host: 'host1',\n    accessKeyId: 'id1',\n    accessKeySecret: 'secret1'\n  }, {\n    host: 'host2',\n    accessKeyId: 'id2',\n    accessKeySecret: 'secret2'\n  }],\n  schedule: 'masterSlave', //default is `roundRobin`\n});\n\n// listen error event to logging error\nclient.on('error', function(err) {\n  console.error(err.stack);\n});\n\n// client init ready\nclient.ready(function() {\n  console.log('cluster client init ready, go ahead!');\n});\n```\n\n### Get Methods\n\nWill choose an alive client by schedule(`masterSlave` or `roundRobin`).\n\n- `client.get()`\n- `client.head()`\n- `client.getStream()`\n- `client.list()`\n- `client.signatureUrl()`\n- `client.chooseAvailable()` - choose an available client by schedule.\n- `client.getACL()`\n\n### Put Methods\n\nWill put to all clients.\n\n- `client.put()`\n- `client.putStream()`\n- `client.delete()`\n- `client.deleteMulti()`\n- `client.copy()`\n- `client.putMeta()`\n- `client.putACL()`\n- `client.restore()`\n\n## Known Errors\n\nEach error return by OSS server will contains these properties:\n\n- name {String} error name\n- message {String} error message\n- requestId {String} uuid for this request, if you meet some unhandled problem,\n    you can send this request id to OSS engineer to find out what's happend.\n- hostId {String} OSS cluster name for this request\n\nThe following table lists the OSS error codes:\n\n[More code info](https://help.aliyun.com/knowledge_detail/32005.html)\n\nname | code | status | message | message in Chinese\n---  | ---  | --- | ---     | ---\nAccessDeniedError | AccessDenied | 403 | Access Denied | 拒绝访问\nBucketAlreadyExistsError | BucketAlreadyExists | 409 | Bucket already exists | Bucket 已经存在\nBucketNotEmptyError | BucketNotEmpty | 409 | Bucket is not empty | Bucket 不为空\nRestoreAlreadyInProgressError | RestoreAlreadyInProgress | 409 | The restore operation is in progress. | restore 操作正在进行中\nOperationNotSupportedError | OperationNotSupported | 400 | The operation is not supported for this resource | 该资源暂不支持restore操作\nEntityTooLargeError | EntityTooLarge | 400 | Entity too large | 实体过大\nEntityTooSmallError | EntityTooSmall | 400 | Entity too small | 实体过小\nFileGroupTooLargeError | FileGroupTooLarge | 400 | File group too large | 文件组过大\nInvalidLinkNameError | InvalidLinkName | 400 | Link name can't be the same as the object name | Object Link 与指向的 Object 同名\nLinkPartNotExistError | LinkPartNotExist | 400 | Can't link to not exists object | Object Link 中指向的 Object 不存在\nObjectLinkTooLargeError | ObjectLinkTooLarge | 400 | Too many links to this object | Object Link 中 Object 个数过多\nFieldItemTooLongError | FieldItemTooLong | 400 | Post form fields items too large | Post 请求中表单域过大\nFilePartInterityError | FilePartInterity | 400 | File part has changed | 文件 Part 已改变\nFilePartNotExistError | FilePartNotExist | 400 | File part not exists | 文件 Part 不存在\nFilePartStaleError | FilePartStale| 400 | File part stale | 文件 Part 过时\nIncorrectNumberOfFilesInPOSTRequestError | IncorrectNumberOfFilesInPOSTRequest | 400 | Post request contains invalid number of files | Post 请求中文件个数非法\nInvalidArgumentError | InvalidArgument | 400 | Invalid format argument | 参数格式错误\nInvalidAccessKeyIdError | InvalidAccessKeyId | 400 | Access key id not exists | Access Key ID 不存在\nInvalidBucketNameError | InvalidBucketName | 400 | Invalid bucket name | 无效的 Bucket 名字\nInvalidDigestError | InvalidDigest | 400 | Invalid digest | 无效的摘要\nInvalidEncryptionAlgorithmError | InvalidEncryptionAlgorithm | 400 | Invalid encryption algorithm | 指定的熵编码加密算法错误\nInvalidObjectNameError | InvalidObjectName | 400 | Invalid object name | 无效的 Object 名字\nInvalidPartError | InvalidPart | 400 | Invalid part | 无效的 Part\nInvalidPartOrderError | InvalidPartOrder | 400 | Invalid part order | 无效的 part 顺序\nInvalidPolicyDocumentError | InvalidPolicyDocument | 400 | Invalid policy document | 无效的 Policy 文档\nInvalidTargetBucketForLoggingError | InvalidTargetBucketForLogging | 400 | Invalid bucket on logging operation | Logging 操作中有无效的目标 bucket\nInternalError | Internal | 500 | OSS server internal error | OSS 内部发生错误\nMalformedXMLError | MalformedXML | 400 | Malformed XML format | XML 格式非法\nMalformedPOSTRequestError | MalformedPOSTRequest | 400 | Invalid post body format | Post 请求的 body 格式非法\nMaxPOSTPreDataLengthExceededError | MaxPOSTPreDataLengthExceeded | 400 | Post extra data too large | Post 请求上传文件内容之外的 body 过大\nMethodNotAllowedError | MethodNotAllowed | 405 | Not allowed method | 不支持的方法\nMissingArgumentError | MissingArgument | 411 | Missing argument | 缺少参数\nMissingContentLengthError | MissingContentLength | 411 | Missing `Content-Length` header | 缺少内容长度\nNoSuchBucketError | NoSuchBucket | 404 | Bucket not exists | Bucket 不存在\nNoSuchKeyError | NoSuchKey | 404 | Object not exists | 文件不存在\nNoSuchUploadError | NoSuchUpload | 404 | Multipart upload id not exists | Multipart Upload ID 不存在\nNotImplementedError | NotImplemented | 501 | Not implemented | 无法处理的方法\nPreconditionFailedError | PreconditionFailed | 412 | Pre condition failed | 预处理错误\nRequestTimeTooSkewedError | RequestTimeTooSkewed | 403 | Request time exceeds 15 minutes to server time | 发起请求的时间和服务器时间超出 15 分钟\nRequestTimeoutError | RequestTimeout | 400 | Request timeout | 请求超时\nRequestIsNotMultiPartContentError | RequestIsNotMultiPartContent | 400 | Invalid post content-type | Post 请求 content-type 非法\nSignatureDoesNotMatchError | SignatureDoesNotMatch | 403 | Invalid signature | 签名错误\nTooManyBucketsError | TooManyBuckets | 400 | Too many buckets on this user | 用户的 Bucket 数目超过限制\nRequestError | RequestError | -1 | network error | 网络出现中断或异常\nConnectionTimeoutError | ConnectionTimeoutError | -2 | request connect timeout | 请求连接超时\nSecurityTokenExpiredError | SecurityTokenExpired | 403 | sts Security Token Expired | sts Security Token 超时失效\n\n[generator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n[oss-sts]: https://help.aliyun.com/document_detail/oss/practice/ram_guide.html\n[browser-sample]: https://github.com/rockuw/oss-in-browser\n[oss-multipart]: https://help.aliyun.com/document_detail/oss/api-reference/multipart-upload/InitiateMultipartUpload.html\n[disabled-browser-headers]: https://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n",
      "readmeFilename": "README.md",
      "_id": "ali-oss@6.15.2-parallel.3",
      "_nodeVersion": "14.17.0",
      "_npmVersion": "6.14.13",
      "dist": {
        "integrity": "sha512-kVzcFMyQdEO9cGXhdseR0GPXz4tG3RauiIZJBn1cHUyVAvOKBA+lUe8nhSTUFGrV9KPOTkeF8tuDA6mn8GFevg==",
        "shasum": "65ed9901849fb860f064d83bb8ae647984c82efd",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.15.2-parallel.3.tgz",
        "fileCount": 212,
        "unpackedSize": 2313598,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgyXSjCRA9TVsSAnZWagAAMS8QAKEkoAcgMAJw3L66AFhx\nVqpD8aurx0l1zeYRqvRSkJmTlDCmaTP/bv6JyCQv5EiFy5z5vGufkmWfsU9V\nP5+E2sGVHFeT0eNAbWeKPY9ixN2rYhKLfmyWAz8N/Xkdddew9QCjQCYYnD4c\nB0TKhXpEK8W2LmKX5wneVbdim1G0+rgXMmmZMhe32/7k3m4WEGOxGPg5iie5\nsAz77m/WunzQ7PvGoxNWhtoS2Fd3FjK6AiB8OV+EwdkH4wm39MV62Zvkoonm\nVdSQvMgRpDZ2gAUaV1wwV/+lIv/ZXIUtbrquUqiSnrD4rTFvFkC3UQuut/1k\nNcOGVOFH538Gt02sA7nn5HKoaAx6fMWHDdfeT5vcmUhL5rUf9u7AOBMNYR4T\n1VM5zXdY91+kYOxZ+941hgG4RsnVtBGaP9+sulOD8RP3ysxkfDB5+T2YtzL0\nZL5wC2zhGlFJS89ckDmHNJcX+nFrPtrus7TdL/3kirgeIlSDB+AxbDbK0hec\nFOjhGcN5EpZ4ljlNEAHuqtsgmvuqA18OJZh1rHnTid0AABE62xiopmsqf9YG\nJQrBJw2X7bZQoWUzuK5C2O+yAPmfGnPuJBCoJNDs42zYsZCrrx63sEDjYfyt\n1yuA+ilWpbYqBemOOPVNXxzrnmuesQsgrb1jlfrh9Lc4qzWSLWbOvR4Yzq42\nzNI7\r\n=UFcV\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIE2CjvAvw17kx18SDJlFA+jztjNnEYkEVL9vzgBHqWPBAiBcuM+8rU1Kc9pSuqZTd38BmCPogtjfkWow50PpQcv4Yw=="
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.15.2-parallel.3_1623815331701_0.9437400916668139"
      },
      "_hasShrinkwrap": false
    },
    "6.16.0": {
      "name": "ali-oss",
      "version": "6.16.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "lib/client.js",
      "browser": {
        "lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "npm run tsc && mocha -t 60000 -r thunk-mocha -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "npm run tsc && nyc --reporter=lcov node_modules/.bin/_mocha -t 60000 -r thunk-mocha -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^16.5.2",
        "co-fs": "^1.2.0",
        "co-mocha": "^1.2.1",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^16.1.0",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "immediate": "^3.3.0",
        "karma": "^1.7.1",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^1.3.0",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^3.5.3",
        "nyc": "^13.3.0",
        "promise-polyfill": "^6.0.2",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "1.454.0",
        "standard-version": "^8.0.1",
        "stream-equal": "^1.1.0",
        "thunk-mocha": "^1.0.3",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^2.8.29",
        "watchify": "^3.9.0"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "co-defer": "^1.0.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^0.2.3",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "bb565c202abbea2b329d4c03b0eddaed9ece9766",
      "_id": "ali-oss@6.16.0",
      "_nodeVersion": "10.21.0",
      "_npmVersion": "7.14.0",
      "dist": {
        "integrity": "sha512-tK/+yEKtBBD+kMoHABxg6lCgC+Ad9HNjCln7qdL6LRYbUm+FFTKJubC4hT2FIooMBDb9tnI7My4MVreKnbJQRg==",
        "shasum": "3b7fbe10f13fbd535478fc31c7d05aaf4280269b",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.16.0.tgz",
        "fileCount": 209,
        "unpackedSize": 2243496,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg6/c4CRA9TVsSAnZWagAAx8UP/RZI/D7PgNFjsbpaPrNi\nFYLuxcEng3PQndB/1W6Q0rXoCbiwsu4dcQz1hREWmTknGFYYltKew+7y+F+6\n91+u2uF9AAylUh/A4H0QcoNmZdBGbkDPgvniJxEsXuJBhIR0Buwkd52T9tuz\nuPoa5RUa9Bzs1uX/X08KLE9Di9PjMcy5BqPm7eLAnOrIrw5Ki0KB6MLoxT8c\n7m9RtvoKEnfKiQV1+JvMhTaw7QzhY57Gd0ZvL1yvYWjD7qFCCb27a6+0noKr\nYVj1Jfxye7yIDOebcrFNjQK1b7SA9kwwR0HcCnYFLl0EEYcYGTIqLS+xc18m\nWtGOkWDn3oNxFgLOp94o8c6Snx8osE3h3qPtW7x/7pvLWcttOycgIaa/pOvG\nMXGggIKn8Q1maoUIdLmyQmiFJhNxLLBdqyCaranXJioEGyGTC/SFj95wvXsh\nDQKMod6D1ExjxHHxrKqsKGOSz8D20HoPcSRHvE5ZXRCOCuBEM7MbdBVqqL5e\n0K/V3ux0R1UPUBAVHJA9+2whIuBsg/YFLb++mPQiMNprRgRYTCZjTD5fUE98\nATrgXgBw6EvzCnW7fH5A8t8r9j4SS5YLw3oRbtwztkcKPtUmZcJbClShfitJ\nRLyIvUDJqd79HiHG2IYVcGnmlvdqKaYcHalZM2Y2dwqvJC06h2VY38PhVIos\npMgY\r\n=8qve\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBL5UcBC3jlJs0y4KFRNqUwE+r1iuFQJzle3Y9KOhxlkAiEA0cjLV9lnnAGTy5S/1oAOEB9ZO5pf4Hv5DC00EDO5WwE="
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.16.0_1626076983726_0.34995772054669105"
      },
      "_hasShrinkwrap": false,
      "deprecated": "this version has been deprecated, please use 6.17.1 instead"
    },
    "6.17.0-beta.1": {
      "name": "ali-oss",
      "version": "6.17.0-beta.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "./lib/client.js",
      "browser": {
        "./lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "npm run tsc && mocha -t 120000 -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "npm run tsc && nyc --reporter=lcov node_modules/.bin/_mocha -t 120000 -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "13.3.0",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^18.2.1",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "immediate": "^3.3.0",
        "karma": "^6.3.4",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^2.0.1",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^9.1.2",
        "nyc": "^15.1.0",
        "promise-polyfill": "^6.0.2",
        "puppeteer": "^10.4.0",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.727.0",
        "standard-version": "^9.3.1",
        "stream-equal": "^1.1.0",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^3.14.2",
        "watchify": "^3.11.1"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^2.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "readme": "oss-js-sdk\n=======\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage][cov-image]][cov-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/ali-oss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/ali-oss\n[travis-image]: https://img.shields.io/travis/ali-sdk/ali-oss/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ali-sdk/ali-oss.svg?branch=master\n[cov-image]: http://codecov.io/github/ali-sdk/ali-oss/coverage.svg?branch=master\n[cov-url]: http://codecov.io/github/ali-sdk/ali-oss?branch=master\n[david-image]: https://img.shields.io/david/ali-sdk/ali-oss.svg?style=flat-square\n[david-url]: https://david-dm.org/ali-sdk/ali-oss\n\naliyun OSS(Object Storage Service) js client for Node and Browser env.\n\n`NOTE`： For SDK `5.X` document, please go to [README.md](https://github.com/ali-sdk/ali-oss/blob/5.x/README.md)\n\n## Install\n\n```bash\nnpm install ali-oss --save\n```\n\n## Compatibility\n\n### Node\nNode.js >= 8.0.0 required. You can use 4.x in Node.js < 8.\n\n### Browser\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n\n`Note`:\n- For Lower browsers you can refer to [PostObject](https://help.aliyun.com/document_detail/31988.html), if you want to see more practices ,please refer to [Web Post](https://help.aliyun.com/document_detail/31923.html)\n\n### QA\nYou can join DingDing Talk Group, [Group Link](https://qr.dingtalk.com/action/joingroup?code=v1,k1,inkSDqCxm7LilkaR/kknRVBDQ8PDA0Lj5hj4Cf9io3w=&_dt_no_comment=1&origin=11)\n\n<img src=\"task/dingding.jpg\" height=\"400\" title=\"dingding\" width=\"300\">\n\n## License\n\n[MIT](LICENSE)\n\n# OSS Usage\n\nOSS, Object Storage Service. Equal to well known Amazon [S3](http://aws.amazon.com/s3/).\n\nAll operation use es7 async/await to implement. All api is async function.\n\n## Summary\n\n- [Node Usage](#node-usage)\n- [Browser Usage](#browser-usage)\n- [Data Regions](#data-regions)\n- [Create Account](#create-account)\n- [Create A Bucket Instance](#create-a-bucket-instance)\n  - [oss(options)](#ossoptions)\n- [Bucket Operations](#bucket-operations)\n  - Base\n    - [.listBuckets(query[, options])](#listbucketsquery-options)\n    - [.putBucket(name[, options])](#putbucketname-options)\n    - [.useBucket(name)](#usebucketname)\n    - [.deleteBucket(name[, options])](#deletebucketname-options)\n    - [.getBucketInfo(name)](#getbucketinfoname)\n    - [.getBucketLocation(name)](#getbucketlocationname)\n  - ACL\n    - [.putBucketACL(name, acl[, options])](#putbucketaclname-acl-options)\n    - [.getBucketACL(name[, options])](#getbucketaclname-options)\n  - Logging\n    - [.putBucketLogging(name, prefix[, options])](#putbucketloggingname-prefix-options)\n    - [.getBucketLogging(name[, options])](#getbucketloggingname-options)\n    - [.deleteBucketLogging(name[, options])](#deletebucketloggingname-options)\n  - Website\n    - [.putBucketWebsite(name, config[, options])](#putbucketwebsitename-config-options)\n    - [.getBucketWebsite(name[, options])](#getbucketwebsitename-options)\n    - [.deleteBucketWebsite(name, region[, options])](#deletebucketwebsitename-options)\n  - Referer\n    - [.putBucketReferer(name, allowEmpty, referers[, options])](#putbucketreferername-allowempty-referers-options)\n    - [.getBucketReferer(name[, options])](#getbucketreferername-options)\n    - [.deleteBucketReferer(name[, options])](#deletebucketreferername-options)\n  - Lifecycle\n    - [.putBucketLifecycle(name, rules[, options])](#putbucketlifecyclename-rules-options)\n    - [.getBucketLifecycle(name[, options])](#getbucketlifecyclename-options)\n    - [.deleteBucketLifecycle(name[, options])](#deletebucketlifecyclename-options)\n  - CORS\n    - [.putBucketCORS(name, rules[, options])](#putbucketcorsname-rules-options)\n    - [.getBucketCORS(name[, options])](#getbucketcorsname-options)\n    - [.deleteBucketCORS(name[, options])](#deletebucketcorsname-options)\n  - RequestPayment\n    - [.getBucketRequestPayment(bucketName[, options])](#getbucketrequestpaymentbucketname-options)\n    - [.putBucketRequestPayment(bucketName, payer[, options])](#putBucketRequestpaymentbucketname-payer-options)\n  - BucketEncryption\n    - [.putBucketEncryption(name[, rules])](#putbucketencryptionname-rules)\n    - [.getBucketEncryption(name)](#getbucketencryptionname)\n    - [.deleteBucketEncryption(name)](#deletebucketencryptionname)\n  - tagging\n    - [.putBucketTags(name, tag[, options])](#putBucketTagsname-tag-options)\n    - [.getBucketTags(name, [, options])](#getBucketTagsname-options)\n    - [.deleteBucketTags(name, [, options])](#deleteBucketTagsname-options)\n  - policy\n    - [.putBucketPolicy(name, policy[, options])](#putBucketPolicyname-policy-options)\n    - [.getBucketPolicy(name, [, options])](#getBucketPolicyname-options)\n    - [.deleteBucketPolicy(name, [, options])](#deleteBucketPolicyname-options)\n  - versioning\n    - [.getBucketVersioning(name, [, options])](#getBucketVersioningname-options)\n    - [.putBucketVersioning(name, status[, options])](#putBucketVersioningname-status-options)\n  - inventory\n      - [.getBucketInventory(name, inventoryId[, options])](#getBucketInventoryname-inventoryid-options)\n      - [.putBucketInventory(name, inventory[, options])](#putBucketInventoryname-inventory-options)\n      - [.deleteBucketInventory(name, inventoryId[, options])](#deleteBucketInventoryname-inventoryid-options)\n      - [.listBucketInventory(name, [, options])](#listBucketInventoryname-options)\n  - worm\n    - [.abortBucketWorm(name[, options])](#abortBucketWormname-options)\n    - [.completeBucketWorm(name, wormId[, options])](#completeBucketWormname-wormId-options)\n    - [.extendBucketWorm(name, wormId, days[, options])](#extendBucketWormname-wormId-days-options)\n    - [.getBucketWorm(name[, options])](#getBucketWormname-options)\n    - [.initiateBucketWorm(name, days[, options])](#initiateBucketWormname-days-options)\n\n- [Object Operations](#object-operations)\n  - [.list(query[, options])](#listquery-options)\n  - [.listV2(query[, options])](#listV2query-options)\n  - [.getBucketVersions(query[, options])](#getBucketVersionsquery-options)\n  - [.put(name, file[, options])](#putname-file-options)\n  - [.putStream(name, stream[, options])](#putstreamname-stream-options)\n  - [.append(name, file[, options])](#appendname-file-options)\n  - [.getObjectUrl(name[, baseUrl])](#getobjecturlname-baseurl)\n  - [.generateObjectUrl(name[, baseUrl])](#generateobjecturlname-baseurl)\n  - [.head(name[, options])](#headname-options)\n  - [.getObjectMeta(name[, options])](#getobjectmetaname-options)\n  - [.get(name[, file, options])](#getname-file-options)\n  - [.getStream(name[, options])](#getstreamname-options)\n  - [.delete(name[, options])](#deletename-options)\n  - [.copy(name, sourceName[, sourceBucket, options])](#copyname-sourcename-sourcebucket-options)\n  - [.putMeta(name, meta[, options])](#putmetaname-meta-options)\n  - [.deleteMulti(names[, options])](#deletemultinames-options)\n  - [.signatureUrl(name[, options])](#signatureurlname-options)\n  - [.putACL(name, acl[, options])](#putaclname-acl-options)\n  - [.getACL(name[, options])](#getaclname-options)\n  - [.restore(name[, options])](#restorename-options)\n  - [.putSymlink(name, targetName[, options])](#putsymlinkname-targetname-options)\n  - [.getSymlink(name[, options])](#getsymlinkname-options)\n  - [.initMultipartUpload(name[, options])](#initmultipartuploadname-options)\n  - [.uploadPart(name, uploadId, partNo, file, start, end[, options])](#uploadpartname-uploadid-partno-file-start-end-options)\n  - [.uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])](#uploadpartcopyname-uploadid-partno-range-sourcedata-options)\n  - [.completeMultipartUpload(name, uploadId, parts[, options])](#completemultipartuploadname-uploadid-parts-options)\n  - [.multipartUpload(name, file[, options])](#multipartuploadname-file-options)\n  - [.multipartUploadCopy(name, sourceData[, options])](#multipartuploadcopyname-sourcedata-options)\n  - [.listParts(name, uploadId[, query, options])](#listpartsname-uploadid-query-options)\n  - [.listUploads(query[, options])](#listuploadsquery-options)\n  - [.abortMultipartUpload(name, uploadId[, options])](#abortmultipartuploadname-uploadid-options)\n  - [.calculatePostSignature(policy)](#calculatePostSignaturepolicy)\n  - [.getObjectTagging(name, [, options])](#getObjectTaggingname-options)\n  - [.putObjectTagging(name, tag[, options])](#putObjectTaggingname-tag-options)\n  - [.deleteObjectTagging(name, [, options])](#deleteObjectTaggingname-options)\n- [RTMP Operations](#rtmp-operations)\n  - [.putChannel(id, conf[, options])](#putchannelid-conf-options)\n  - [.getChannel(id[, options])](#getchannelid-options)\n  - [.deleteChannel(id[, options])](#deletechannelid-options)\n  - [.putChannelStatus(id, status[, options])](#putchannelstatusid-status-options)\n  - [.getChannelStatus(id[, options])](#getchannelstatusid-options)\n  - [.listChannels(query[, options])](#listchannelsquery-options)\n  - [.getChannelHistory(id[, options])](#getchannelhistoryid-options)\n  - [.createVod(id, name, time[, options])](#createvodid-name-time-options)\n  - [.getRtmpUrl(channelId[, options])](#getrtmpurlchannelid-options)\n- [Create A Image Service Instance](#create-a-image-service-instance)\n  - [oss.ImageClient(options)](#ossimageclientoptions)\n- [Image Operations](#image-operations)\n  - [imgClient.get(name, file[, options])](#imgclientgetname-file-options)\n  - [imgClient.getStream(name[, options])](#imgclientgetstreamname-options)\n  - [imgClient.getExif(name[, options])](#imgclientgetexifname-options)\n  - [imgClient.getInfo(name[, options])](#imgclientgetinfoname-options)\n  - [imgClient.putStyle(name, style[, options])](#imgclientputstylename-style-options)\n  - [imgClient.getStyle(name[, options])](#imgclientgetstylename-options)\n  - [imgClient.listStyle([options])](#imgclientliststyleoptions)\n  - [imgClient.deleteStyle(name[, options])](#imgclientdeletestylename-options)\n  - [imgClient.signatureUrl(name)](#imgclientsignatureurlname)\n- [Known Errors](#known-errors)\n\n## Node Usage\n\n### Compatibility\n- Node: >= 8.0.0\n\n### Basic usage\n1.install SDK using npm\n```\nnpm install ali-oss --save\n```\n2.for example:\n```js\nconst OSS = require('ali-oss');\nconst client = new OSS({\n  region: '<oss region>',\n  accessKeyId: '<Your accessKeyId>',\n  accessKeySecret: '<Your accessKeySecret>',\n  bucket: '<Your bucket name>'\n});\n```\n## Browser Usage\n\nYou can use most of the functionalities of `ali-oss` in browser with\nsome exceptions:\n\n- put object with streaming: no chunked encoding, we use multipart\n  upload instead\n- get object to local file: we cannot manipulate file system in\n  browser, we provide signed object url for downloading needs\n- bucket operations(listBuckets, putBucketLogging, etc) will fail: OSS\n  server currently do not support CORS requests for bucket operations\n  (will probably be fixed later)\n\n### Compatibility\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n    >Note: Because some browsers do not support promises, you need to introduce promise compatible libraries.<br>\n    For example: IE10 and IE11 need to introduce a promise-polyfill.\n\n### Setup\n\n#### Bucket setup\n\nAs browser-side javascript involves CORS operations. You need to setup\nyour bucket CORS rules to allow CORS operations:\n\n- set allowed origins to '\\*'\n- allowed methods to 'PUT, GET, POST, DELETE, HEAD'\n- set allowed headers to '\\*'\n- expose 'ETag' in expose headers\n\n#### STS setup\n\nAs we don't want to expose the accessKeyId/accessKeySecret in the\nbrowser, a [common practice][oss-sts] is to use STS to grant temporary\naccess.\n\n### Basic usage\n\nInclude the sdk lib in the `<script>` tag and you have `OSS` available\nfor creating client.\n\n```html\n // x.x.x The specific version number represented\n // we recommend introducing offline resources, because the usability of online resources depends on the stability of the cdn server.\n <!-- Introducing online resources -->\n <script src=\"http://gosspublic.alicdn.com/aliyun-oss-sdk-x.x.x.min.js\"></script>\n <!-- Introducing offline resources -->\n <script src=\"./aliyun-oss-sdk-x.x.x.min.js\"></script>\n\n<script type=\"text/javascript\">\n  const client = new OSS({\n    region: 'oss-cn-hangzhou',\n    accessKeyId: '<access-key-id>',\n    accessKeySecret: '<access-key-secret>',\n    bucket: '<bucket-name>',\n    stsToken: '<security-token>'\n  });\n\n  client.list().then((result) => {\n    console.log('objects: %j', result.objects);\n    return client.put('my-obj', new OSS.Buffer('hello world'));\n  }).then((result) => {\n    console.log('put result: %j', result);\n    return client.get('my-obj');\n  }).then((result) => {\n    console.log('get result: %j', result.content.toString());\n  });\n</script>\n```\nThe full sample can be found [here][browser-sample].\n\n### How to build\n\n```bash\nnpm run build-dist\n```\n\nAnd see the build artifacts under `dist/`.\n\n\n## Data Regions\n\n[OSS current data regions](https://help.aliyun.com/document_detail/31837.html).\n\nregion | country | city | endpoint | internal endpoint\n---  | ---     | ---  | --- | ---\noss-cn-hangzhou | China | HangZhou | oss-cn-hangzhou.aliyuncs.com | oss-cn-hangzhou-internal.aliyuncs.com\noss-cn-shanghai | China | ShangHai | oss-cn-shanghai.aliyuncs.com | oss-cn-shanghai-internal.aliyuncs.com\noss-cn-qingdao | China | QingDao | oss-cn-qingdao.aliyuncs.com | oss-cn-qingdao-internal.aliyuncs.com\noss-cn-beijing | China | BeiJing | oss-cn-beijing.aliyuncs.com | oss-cn-beijing-internal.aliyuncs.com\noss-cn-shenzhen | China | ShenZhen | oss-cn-shenzhen.aliyuncs.com | oss-cn-shenzhen-internal.aliyuncs.com\noss-cn-hongkong | China | HongKong | oss-cn-hongkong.aliyuncs.com | oss-cn-hongkong-internal.aliyuncs.com\noss-us-west-1 | US | Silicon Valley | oss-us-west-1.aliyuncs.com | oss-us-west-1-internal.aliyuncs.com\noss-ap-southeast-1 | Singapore | Singapore | oss-ap-southeast-1.aliyuncs.com | oss-ap-southeast-1-internal.aliyuncs.com\n\n## Create Account\n\nGo to [OSS website](http://www.aliyun.com/product/oss/?lang=en), create a new account for new user.\n\nAfter account created, you can create the OSS instance and get the `accessKeyId` and `accessKeySecret`.\n\n## Create A Bucket Instance\n\nEach OSS instance required `accessKeyId`, `accessKeySecret` and `bucket`.\n\n## oss(options)\n\nCreate a Bucket store instance.\n\noptions:\n\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- [stsToken] {String} used by temporary authorization, detail [see](https://www.alibabacloud.com/help/doc-detail/32077.htm)\n- [refreshSTSToken] {Function} used by auto set `stsToken`、`accessKeyId`、`accessKeySecret` when sts info expires. return value must be object contains `stsToken`、`accessKeyId`、`accessKeySecret`\n- [refreshSTSTokenInterval] {number} use time (ms) of refresh STSToken interval it should be\n  less than sts info expire interval, default is 300000ms(5min)\n  when sts info expires. return value must be object contains `stsToken`、`accessKeyId`、`accessKeySecret`\n- [bucket] {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [endpoint] {String} oss region domain. It takes priority over `region`. Set as extranet domain name, intranet domain name, accelerated domain name, etc. according to different needs. please see [endpoints](https://www.alibabacloud.com/help/doc-detail/31837.htm)\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`.\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`.\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [secure] {Boolean} instruct OSS client to use HTTPS (secure: true) or HTTP (secure: false) protocol.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`.\n- [cname] {Boolean}, default false, access oss with custom domain name. if true, you can fill `endpoint` field with your custom domain name,\n- [isRequestPay] {Boolean}, default false, whether request payer function of the bucket is open, if true, will send headers `'x-oss-request-payer': 'requester'` to oss server.\n  the details you can see [requestPay](https://help.aliyun.com/document_detail/91337.htm)\n- [useFetch] {Boolean}, default false, it just work in Browser, if true,it means upload object with\n`fetch` mode ,else `XMLHttpRequest`\n- [enableProxy] {Boolean}, Enable proxy request, default is false.\n- [proxy] {String | Object}, proxy agent uri or options, default is null.\n- [retryMax] {Number}, used by auto retry send request count when request error is net error or timeout.  **_NOTE:_**  Not support `put` with stream, `putStream`, `append` with stream because the stream can only be consumed once\n- [maxSockets] {Number} Maximum number of sockets to allow per host. Default is infinity\n\nexample:\n\n1. basic usage\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\n```\n2. use accelerate endpoint\n- Global accelerate endpoint: oss-accelerate.aliyuncs.com\n- Accelerate endpoint of regions outside mainland China: oss-accelerate-overseas.aliyuncs.com\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  endpoint: 'oss-accelerate.aliyuncs.com',\n});\n```\n\n3. use custom domain\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  cname: true,\n  endpoint: 'your custome domain',\n});\n```\n\n4. use STS and refreshSTSToken\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your STS key',\n  accessKeySecret: 'your STS secret',\n  stsToken: 'your STS token',\n  refreshSTSToken: async () => {\n    const info = await fetch('you sts server');\n    return {\n      accessKeyId: info.accessKeyId,\n      accessKeySecret: info.accessKeySecret,\n      stsToken: info.stsToken\n    }\n  },\n  refreshSTSTokenInterval: 300000\n});\n```\n\n5. retry request with stream\n```js\nfor (let i = 0; i <= store.options.retryMax; i++) {\n  try {\n    const result = await store.putStream(\"<example-object>\", fs.createReadStream(\"<example-path>\"));\n    console.log(result);\n    break; // break if success\n  } catch (e) {\n    console.log(e);\n  }\n}\n```\n\n## Bucket Operations\n\n### .listBuckets(query[, options])\n\nList buckets in this account.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search buckets using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [max-keys] {String|Number} max buckets, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return buckets list on `buckets` properties.\n\n- buckets {Array<BucketMeta>} bucket meta info list\n  Each `BucketMeta` will contains blow properties:\n    - name {String} bucket name\n    - region {String} bucket store data region, e.g.: `oss-cn-hangzhou-a`\n    - creationDate {String} bucket create GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - storageClass {String} e.g.: `Standard`, `IA`, `Archive`\n- owner {Object} object owner, including `id` and `displayName`\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 buckets\n\n```js\nstore.listBuckets({\n  \"max-keys\": 10\n}).then((result) => {\n  console.log(result);\n});\n\n```\n\n### .putBucket(name[, options])\n\nCreate a new bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket exists and not belong to current account, will throw BucketAlreadyExistsError.\n  If bucket not exists, will create a new bucket and set it's ACL.\n- [options] {Object} optional parameters\n  - [acl] {String} include `private`,`public-read`,`public-read-write`\n  - [storageClass] {String} the storage type include (Standard,IA,Archive)\n  - [dataRedundancyType] {String} default `LRS`, include `LRS`,`ZRS`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the bucket name on `bucket` properties.\n\n- bucket {String} bucket name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Create a bucket name `helloworld` location on HongKong\n\n```js\nstore.putBucket('helloworld').then((result) => {\n  // use it by default\n  store.useBucket('helloworld');\n});\n```\n\n- Create a bucket name `helloworld` location on HongKong StorageClass `Archive`\n\n```js\nawait store.putBucket('helloworld', { StorageClass: 'Archive' });\n// use it by default\nstore.useBucket('helloworld');\n```\n\n### .deleteBucket(name[, options])\n\nDelete an empty bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket is not empty, will throw BucketNotEmptyError.\n  If bucket is not exists, will throw NoSuchBucketError.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete the exists 'helloworld' bucket on 'oss-cn-hongkong'\n\n```js\nstore.deleteBucket('helloworld').then((result) => {});\n```\n\n### .useBucket(name)\n\nUse the bucket.\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.useBucket('helloworld');\n```\n\n### .getBucketInfo(name)\n\nGet bucket information,include CreationDate、ExtranetEndpoint、IntranetEndpoint、Location、Name、StorageClass、\nOwner、AccessControlList、Versioning\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketInfo('helloworld').then( (res) => {\n  console.log(res.bucket)\n})\n```\n\n### .getBucketLocation(name)\n\nGet bucket location\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketLocation('helloworld').then( (res) => {\n  console.log(res.location)\n})\n```\n\n---\n\n### .putBucketACL(name, acl[, options])\n\nUpdate the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- acl {String} access control list, current available: `public-read-write`, `public-read` and `private`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set bucket `helloworld` to `public-read-write`\n\n```js\nstore.putBucketACL('helloworld', 'public-read-write').then((result) => {\n});\n```\n\n### .getBucketACL(name[, options])\n\nGet the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld`\n\n```js\nstore.getBucketACL('helloworld').then((result) => {\n  console.log(result.acl);\n});\n```\n\n---\n\n### .putBucketLogging(name, prefix[, options])\n\nUpdate the bucket logging settings.\nLog file will create every one hour and name format: `<prefix><bucket>-YYYY-mm-DD-HH-MM-SS-UniqueString`.\n\nparameters:\n\n- name {String} bucket name\n- [prefix] {String} prefix path name to store the log files\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Enable bucket `helloworld` logging and save with prefix `logs/`\n\n```js\nstore.putBucketLogging('helloworld', 'logs/').then((result) => {\n});\n```\n\n### .getBucketLogging(name[, options])\n\nGet the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- enable {Boolean} enable logging or not\n- prefix {String} prefix path name to store the log files, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld` logging settings\n\n```js\nstore.getBucketLogging('helloworld').then((result) => {\n  console.log(result.enable, result.prefix);\n});\n```\n\n### .deleteBucketLogging(name[, options])\n\nDelete the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketWebsite(name, config[, options])\n\nSet the bucket as a static website.\n\nparameters:\n\n- name {String} bucket name\n- config {Object} website config, contains blow properties:\n  - index {String} default page, e.g.: `index.html`\n  - [error] {String} error page, e.g.: 'error.html'\n  - [supportSubDir] {String} default vaule false\n  - [type] {String} default value 0\n  - [routingRules] {Array} RoutingRules\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketWebsite('hello', {\n  index: 'index.html'\n}).then((result) => {\n});\n```\n\n### .getBucketWebsite(name[, options])\n\nGet the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- index {String} index page\n- error {String} error page, maybe `null`\n- supportSubDir {String}\n- type {String}\n- routingRules {Array}\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketWebsite(name[, options])\n\nDelete the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketReferer(name, allowEmpty, referers[, options])\n\nSet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list, e.g.:\n  ```js\n  [\n    'https://npm.taobao.org',\n    'http://cnpmjs.org'\n  ]\n  ```\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketReferer('hello', false, [\n  'https://npm.taobao.org',\n  'http://cnpmjs.org'\n]).then((result) => {\n});\n```\n\n### .getBucketReferer(name[, options])\n\nGet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketReferer(name[, options])\n\nDelete the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketLifecycle(name, rules[, options])\n\nSet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains blow properties:\n  - [id] {String} rule id, if not set, OSS will auto create it with random string.\n  - prefix {String} store prefix\n  - status {String} rule status, allow values: `Enabled` or `Disabled`\n  - [expiration] {Object} specifies the expiration attribute of the lifecycle rules for the object.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    - [expiredObjectDeleteMarker] {String} value `true`\n    `createdBeforeDate` and `days`  and `expiredObjectDeleteMarker` must have one.\n  - [abortMultipartUpload] {Object} Specifies the expiration attribute of the multipart upload tasks that are not complete.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `createdBeforeDate` and `days` must have one.\n  - [transition] {Object} Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle.\n    - storageClass {String} Specifies the storage class that objects that conform to the rule are converted into. allow values: `IA` or `Archive`\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    `createdBeforeDate` and `days` must have one.\n  - [noncurrentVersionTransition] {Object} Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle.\n    - storageClass {String} Specifies the storage class that history objects that conform to the rule are converted into. allow values: `IA` or `Archive`\n    - noncurrentDays {String} expire after the `noncurrentDays`\n  `expiration`、 `abortMultipartUpload`、 `transition`、 `noncurrentVersionTransition` must have one.\n  - [noncurrentVersionExpiration] {Object} specifies the expiration attribute of the lifecycle rules for the history object.\n    - noncurrentDays {String} expire after the `noncurrentDays`\n  - [tag] {Object} Specifies the object tag applicable to a rule. Multiple tags are supported.\n    - key {String} Indicates the tag key.\n    - value {String} Indicates the tag value.\n    `tag` cannot be used with `abortMultipartUpload`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketLifecycle('hello', [\n  {\n    id: 'delete after one day',\n    prefix: 'logs/',\n    status: 'Enabled',\n    days: 1\n  },\n  {\n    prefix: 'logs2/',\n    status: 'Disabled',\n    date: '2022-10-11T00:00:00.000Z'\n  }\n]).then((result) => {});\n```\n\nexample: for history with noncurrentVersionExpiration\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  expiration: {\n    days: '1'\n  },\n  noncurrentVersionExpiration: {\n    noncurrentDays: '1'\n  }\n}]);\nconsole.log(result)\n```\n\nexample: for history with expiredObjectDeleteMarker\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  expiration: {\n    expiredObjectDeleteMarker: 'true'\n  },\n  noncurrentVersionExpiration: {\n    noncurrentDays: '1'\n  }\n}]);\nconsole.log(result)\n```\n\nexample: for history with noncurrentVersionTransition\n\n```js\n const result = await store.putBucketLifecycle(bucket, [{\n  id: 'expiration1',\n  prefix: 'logs/',\n  status: 'Enabled',\n  noncurrentVersionTransition: {\n    noncurrentDays: '10',\n    storageClass: 'IA'\n  }\n}]);\nconsole.log(result)\n```\n\n### .getBucketLifecycle(name[, options])\n\nGet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the lifecycle rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketLifecycle(name[, options])\n\nDelete the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketCORS(name, rules[, options])\n\nSet CORS rules of the bucket object\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains below properties:\n  - allowedOrigin {String/Array} configure for Access-Control-Allow-Origin header\n  - allowedMethod {String/Array} configure for Access-Control-Allow-Methods header\n  - [allowedHeader] {String/Array} configure for Access-Control-Allow-Headers header\n  - [exposeHeader] {String/Array} configure for Access-Control-Expose-Headers header\n  - [maxAgeSeconds] {String} configure for Access-Control-Max-Age header\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketCORS('hello', [\n  {\n    allowedOrigin: '*',\n    allowedMethod: [\n      'GET',\n      'HEAD',\n    ],\n  }\n]).then((result) => {});\n```\n\n### .getBucketCORS(name[, options])\n\nGet CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the CORS rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketCORS(name[, options])\n\nDelete CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .getBucketRequestPayment(bucketName[, options])\n\nget RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String} bucket name\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- payer {String} payer, BucketOwner or Requester\n- res {Object} response info, including\n  - data {Buffer} xml\n\n---\n\n### .putBucketRequestPayment(bucketName, payer[, options])\n\nput RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String}\n- payer {String} payer\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketEncryption(name, rules)\n\nput BucketEncryption value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [rules] {Object} parameters\n  - SSEAlgorithm {String} encryption type, expect AES256 or KMS\n  - {KMSMasterKeyID} {String} needed when encryption type is KMS\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketEncryption(name)\n\nget BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n- encryption {Object} rules\n  - SSEAlgorithm {String} encryption type, AES256 or KMS\n  - {KMSMasterKeyID} {String} will be return when encryption type is KMS\n\n---\n\n### .deleteBucketEncryption(name)\n\ndelete BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketTags(name, tag[, options])\n\nAdds tags for a bucket or modify the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketTags(name[, options])\n\nObtains the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- tag {Object} the tag of object\n- res {Object} response info\n\n---\n\n### .deleteBucketTags(name[, options])\n\nDeletes the tags added for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketPolicy(name, policy[, options])\n\nAdds or modify policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- policy {Object} bucket policy\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\nexample:\n```js\nconst policy = {\n  Version: '1',\n  Statement: [\n    {\n      Action: ['oss:PutObject', 'oss:GetObject'],\n      Effect: 'Deny',\n      Principal: ['1234567890'],\n      Resource: ['acs:oss:*:1234567890:*/*']\n    }\n  ]\n};\nconst result = await store.putBucketPolicy(bucket, policy);\nconsole.log(result);\n```\n---\n\n### .getBucketPolicy(name[, options])\n\nObtains the policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- policy {Object} the policy of bucket, if not exist, the value is null\n- res {Object} response info\n- status {Number} response status\n\n---\n\n### .deleteBucketPolicy(name[, options])\n\nDeletes the policy added for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n### .getBucketVersioning(name[, options])\n\nObtains the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- versionStatus {String | undefined} version status, `Suspended` or `Enabled`. default value: `undefined`\n- res {Object} response info\n\n---\n\n### .putBucketVersioning(name, status[, options])\n\nset the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- status {String} version status, allow values: `Enabled` or `Suspended`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n\n### .getBucketInventory(name, inventoryId[, options])\n\nget bucket inventory by inventory-id\n\nparameters:\n\n- name {String} the bucket name\n- inventoryId {String} inventory-id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- inventory {Inventory}\n- status {Number} response status\n- res {Object} response info\n\n```js\nasync function getBucketInventoryById() {\n  try {\n    const result = await client.getBucketInventory('bucket', 'inventoryid');\n    console.log(result.inventory)\n  } catch (err) {\n    console.log(err)\n  }\n}\n\ngetBucketInventoryById();\n```\n\n### putBucketInventory(name, inventory[, options])\n\nset bucket inventory\n\nparameters:\n\n- name {String} the bucket name\n- inventory {Inventory} inventory config\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n```ts\ntype Field = 'Size | LastModifiedDate | ETag | StorageClass | IsMultipartUploaded | EncryptionStatus';\ninterface Inventory {\n  id: string;\n  isEnabled: true | false;\n  prefix?: string;\n  OSSBucketDestination: {\n    format: 'CSV';\n    accountId: string;\n    rolename: string;\n    bucket: string;\n    prefix?: string;\n    encryption?:\n    | {'SSE-OSS': ''}\n    | {\n      'SSE-KMS': {\n        keyId: string;\n      };\n    };\n  };\n  frequency: 'Daily' | 'Weekly';\n  includedObjectVersions: 'Current' | 'All';\n  optionalFields?: {\n    field?: Field[];\n  };\n}\n```\n```js\nconst inventory = {\n  id: 'default',\n  isEnabled: false, // `true` | `false`\n  prefix: 'ttt', // filter prefix\n  OSSBucketDestination: {\n    format: 'CSV',\n    accountId: '1817184078010220',\n    rolename: 'AliyunOSSRole',\n    bucket: 'your bucket',\n    prefix: 'test',\n    //encryption: {'SSE-OSS': ''},\n    /*\n      encryption: {\n      'SSE-KMS': {\n        keyId: 'test-kms-id';\n      };,\n    */\n  },\n  frequency: 'Daily', // `WEEKLY` | `Daily`\n  includedObjectVersions: 'All', // `All` | `Current`\n  optionalFields: {\n    field: [\"Size\", \"LastModifiedDate\", \"ETag\", \"StorageClass\", \"IsMultipartUploaded\", \"EncryptionStatus\"]\n  },\n}\n\nasync function putInventory(){\n  const bucket = 'Your Bucket Name';\n  try {\n    await client.putBucketInventory(bucket, inventory);\n  } catch(err) {\n    console.log(err);\n  }\n}\n\nputInventory()\n```\n\n### deleteBucketInventory(name, inventoryId[, options])\n\ndelete bucket inventory by inventory-id\n\nparameters:\n\n- name {String} the bucket name\n- inventoryId {String} inventory-id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n### listBucketInventory(name[, options])\n\nlist bucket inventory\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n  - continuationToken used by search next page\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\nexample:\n\n```js\nasync function listBucketInventory() {\n  const bucket = 'Your Bucket Name';\n  let nextContinuationToken;\n  // list all inventory of the bucket\n  do {\n    const result = await client.listBucketInventory(bucket, nextContinuationToken);\n    console.log(result.inventoryList);\n    nextContinuationToken = result.nextContinuationToken;\n  } while (nextContinuationToken)\n}\n\nlistBucketInventory();\n```\n\n### .abortBucketWorm(name[, options])\n\nused to delete an unlocked retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .completeBucketWorm(name, wormId[, options])\n\nused to lock a retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- wormId {String} worm id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .extendBucketWorm(name, wormId, days[, options])\n\n used to extend the retention period of objects in a bucket whose retention policy is locked.\n\nparameters:\n\n- name {String} the bucket name\n- wormId {String} worm id\n- days {String | Number} retention days\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketWorm(name[, options])\n\n used to query the retention policy information of the specified bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- wormId {String} worm id\n- state {String} `Locked` or `InProgress`\n- days {String} retention days\n- creationDate {String}\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .initiateBucketWorm(name, days[, options])\n\ncreate a retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- days {String | Number}} set retention days\n- [options] {Object} optional args\n\nSuccess will return:\n\n- wormId {String} worm id\n- status {Number} response status\n- res {Object} response info\n\n---\n\n## Object Operations\n\nAll operations function return Promise, except `signatureUrl`.\n\n### .put(name, file[, options])\n\nAdd an object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream|File(only support Browser)|Blob(only support Browser)} object local path, content buffer or ReadStream content instance use in Node, Blob and html5 File\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - See more: [PutObject](https://help.aliyun.com/document_detail/31978.html#title-yxe-96d-x61)\n  - [disabledMD5] {Boolean} default true, it just work in Browser. if false,it means that MD5 is automatically calculated for uploaded files. **_NOTE:_** Synchronous computing tasks will block the main process\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- data {Object} callback server response data, sdk use JSON.parse() return\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through local file path\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/demo.txt', filepath).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/demo.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829244'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through content buffer\n\n```js\nstore.put('ossdemo/buffer', Buffer.from('foo content')).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/buffer',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/buffer',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"xxx\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829243'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .putStream(name, stream[, options])\n\nAdd a stream object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- stream {ReadStream} object ReadStream content instance\n- [options] {Object} optional parameters\n  - [contentLength] {Number} the stream length, `chunked encoding` will be used if absent\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.putStream('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .append(name, file[, options])\n\nAppend an object to the bucket, it's almost same as put, but it can add content to existing object rather than override it.\n\nAll parameters are same as put except for options.position\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [position] {String} specify the position which is the content length of the latest object\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n\nobject:\n\n- name {String} object name\n- url {String} the url of oss\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- nextAppendPosition {String} the next position\n\nexample:\n\n```js\nlet object = await store.append('ossdemo/buffer', Buffer.from('foo'));\n\n// append content to the existing object\nobject = await store.append('ossdemo/buffer', Buffer.from('bar'), {\n  position: object.nextAppendPosition,\n});\n```\n\n### .getObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `endpoint`.\n\ne.g.:\n\n```js\nconst cdnUrl = client.getObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .generateObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `bucket and endpoint `.\nSuggest use generateObjectUrl instead of getObjectUrl.\n\ne.g.:\n\n```js\nconst url = client.generateObjectUrl('foo/bar.jpg');\n// cdnUrl should be `https://${bucketname}.${endpotint}foo/bar.jpg`\n\nconst cdnUrl = client.generateObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .head(name[, options])\n\nHead an object and get the meta info.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status, maybe 200 or 304\n- meta {Object} object user meta, if not set on `put()`, will return null.\n    If return status 304, meta will be null too\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-version-id] return in multiversion\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Head an exists object and get user meta\n\n```js\nawait this.store.put('ossdemo/head-meta', Buffer.from('foo'), {\n  meta: {\n    uid: 1,\n    path: 'foo/demo.txt'\n  }\n});\nconst object = await this.store.head('ossdemo/head-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  meta: {\n    uid: '1',\n    path: 'foo/demo.txt'\n  },\n  res: { ... }\n}\n```\n\n- Head a not exists object\n\n```js\nconst object = await this.store.head('ossdemo/head-meta');\n// will throw NoSuchKeyError\n```\n\n### .getObjectMeta(name[, options])\n\nGet an  object meta info include ETag、Size、LastModified and so on, not return object content.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info, including\n  - headers {Object} response headers\n\nexample:\n\n- Head an exists object and get object meta info\n\n```js\nawait this.store.put('ossdemo/object-meta', Buffer.from('foo'));\nconst object = await this.store.getObjectMeta('ossdemo/object-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  res: { ... }\n}\n```\n\n### .get(name[, file, options])\n\nGet an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the content\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [versionId] {String} the version id of history object\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [responseCacheControl] {String} default `no-cache`, (only support Browser). response-cache-control, will response with HTTP Header `Cache-Control`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Range' get specifying range bytes content, e.g.: `Range: bytes=0-9`\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/demo.txt', filepath);\n```\n\n_ Store object to a writestream\n\n```js\nawait store.get('ossdemo/demo.txt', somestream);\n```\n\n- Get an object content buffer\n\n```js\nconst result = await store.get('ossdemo/demo.txt');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a processed image and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.png';\nawait store.get('ossdemo/demo.png', filepath, {process: 'image/resize,w_200'});\n```\n\n- Get a not exists object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/not-exists-demo.txt', filepath);\n// will throw NoSuchKeyError\n```\n\n- Get a historic version object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nconst versionId = 'versionId string';\nawait store.get('ossdemo/not-exists-demo.txt', filepath, {\n  versionId\n});\n```\n\n### .getStream(name[, options])\n\nGet an object read stream.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object stream\n\n```js\nconst result = await store.getStream('ossdemo/demo.txt');\nresult.stream.pipe(fs.createWriteStream('some file.txt'));\n```\n\n### .delete(name[, options])\n\nDelete an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf delete object not exists, will also delete success.\n\nexample:\n\n- Delete an exists object\n\n```js\nawait store.delete('ossdemo/someobject');\n```\n\n- Delete a not exists object\n\n```js\nawait store.delete('ossdemo/some-not-exists-object');\n```\n\n- Delete a history object or deleteMarker\n\n```js\nconst versionId = 'versionId';\nawait store.delete('ossdemo/some-not-exists-object', { versionId });\n```\n\n### .copy(name, sourceName[, sourceBucket, options])\n\nCopy an object from `sourceName` to `name`.\n\nparameters:\n\n- name {String} object name store on OSS\n- sourceName {String} source object name\n- [sourceBucket] {String} source Bucket. if doesn't exist，`sourceBucket` is same bucket.\n- [options] {Object} optional parameters\n  - [versionId] {String} the version id of history object\n  - [timeout] {Number} the operation timeout\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n    If the `meta` set, will override the source object meta.\n  - [headers] {Object} extra headers\n    - 'If-Match' do copy if source object etag equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' do copy if source object etag not equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-Modified-Since' do copy if source object modified after this time,\n        otherwise throw PreconditionFailedError\n    - 'If-Unmodified-Since' do copy if source object modified before this time,\n        otherwise throw PreconditionFailedError\n    - See more: [CopyObject](https://help.aliyun.com/document_detail/31979.html?#title-tzy-vxc-ncx)\n\nSuccess will return the copy result in `data` property.\n\nobject:\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT string\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf source object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Copy same bucket object\n\n```js\nstore.copy('newName', 'oldName').then((result) => {\n  console.log(result);\n});\n```\n\n- Copy other bucket object\n\n```js\nstore.copy('logo.png', 'logo.png', 'other-bucket').then((result) => {\n  console.log(result);\n});\n```\n\n- Copy historic object\n\n```js\nconst versionId = 'your verisonId'\nstore.copy('logo.png', 'logo.png', 'other-bucket', { versionId }).then((result) => {\n  console.log(result);\n});\n```\n\n### .putMeta(name, meta[, options])\n\nSet an exists object meta.\n\nparameters:\n\n- name {String} object name store on OSS\n- meta {Object} user meta, will send with `x-oss-meta-` prefix string\n  e.g.: `{ uid: 123, pid: 110 }`\n  If `meta: null`, will clean up the exists meta\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the putMeta result in `data` property.\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Update exists object meta\n\n```js\nconst result = await store.putMeta('ossdemo.txt', {\n  uid: 1, pid: 'p123'\n});\nconsole.log(result);\n```\n\n- Clean up object meta\n\n```js\nawait store.putMeta('ossdemo.txt', null);\n```\n\n### .deleteMulti(names[, options])\n\nDelete multi objects in one request.\n\nparameters:\n\n- names {Array<Object>} object names, max 1000 objects in once.\n  - key {String} object name\n  - [versionId] {String} the version id of history object or deleteMarker\n- [options] {Object} optional parameters\n  - [quiet] {Boolean} quiet mode or verbose mode, default is `false`, verbose mode\n    quiet mode: if all objects delete succes, return emtpy response.\n      otherwise return delete error object results.\n    verbose mode: return all object delete results.\n  - [timeout] {Number} the operation timeout\n\nSuccess will return delete success objects in `deleted` property.\n\n- [deleted] {Array<Object>} deleted object or deleteMarker info list\n  - [Key] {String} object name\n  - [VersionId] {String} object versionId\n  - [DeleteMarker] {String} generate or delete marker\n  - [DeleteMarkerVersionId] {String} marker versionId\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete multi objects in quiet mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3'], {\n  quiet: true\n});\n```\n\n- Delete multi objects in verbose mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3']);\n```\n\n- Delete multi objects in multiversion\n\n```js\nconst obj1 = {\n  key: 'key1',\n  versionId: 'versionId1'\n}\nconst obj2 = {\n  key: 'key2',\n  versionId: 'versionId2'\n}\nconst result = await store.deleteMulti([obj1, obj2]);\n```\n\n### .list(query[, options])\n\nList objects in the bucket.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 objects\n\n```js\nconst result = await store.list();\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nconst result = await store.list({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nconst result = await store.list({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n### .listV2(query[, options])\n\nList objects in the bucket.(recommended)\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [continuation-token] (continuationToken) {String} search start from `continuationToken`, including `continuationToken` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n  - [start-after] {String} specifies the Start-after value from which to start the list. The names of objects are returned in alphabetical order.\n  - [fetch-owner] {Boolean} specifies whether to include the owner information in the response.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n  - name {String} object name on oss\n  - url {String} resource url\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n  - type {String} object type, e.g.: `Normal`\n  - size {Number} object size, e.g.: `344606`\n  - storageClass {String} storage class type, e.g.: `Standard`\n  - owner {Object|null} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextContinuationToken {String} next continuation-token string\n- keyCount {Number} The number of keys returned for this request. If Delimiter is specified, KeyCount is the sum of the elements in Key and CommonPrefixes.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n- List top 10 objects\n\n```js\nconst result = await store.listV2({\n  'max-keys': 10\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nconst result = await store.listV2({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nconst result = await store.listV2({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n- List `a/` dir objects, after `a/b` and not include `a/b`\n\n```js\nconst result = await store.listV2({\n  delimiter: '/',\n  prefix: 'a/',\n  'start-after': 'a/b'\n});\nconsole.log(result.objects);\n```\n\n### .getBucketVersions(query[, options])\n\nList the version information of all objects in the bucket, including the delete marker (Delete Marker).\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [versionIdMarker] {String} set the result to return from the version ID marker of the key marker object and sort by the versions\n  - [keyMarker] {String} search start from `keyMarker`, including `keyMarker` key\n  - [encodingType] {String} specifies that the returned content is encoded, and specifies the type of encoding\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [maxKeys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n    - type {String} object type, e.g.: `Normal`\n    - size {Number} object size, e.g.: `344606`\n    - isLatest {Boolean}\n    - versionId {String} object versionId\n    - storageClass {String} storage class type, e.g.: `Standard`\n    - owner {Object} object owner, including `id` and `displayName`\n- deleteMarker {Array<ObjectDeleteMarker>} object delete marker info list\n  Each `ObjectDeleteMarker`\n    - name {String} object name on oss\n    - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n    - versionId {String} object versionId\n- isTruncated {Boolean} truncate or not\n- nextKeyMarker (nextMarker) {String} next marker string\n- nextVersionIdMarker (NextVersionIdMarker) {String} next version ID marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- View all versions of objects and deleteMarker of bucket\n\n```js\nconst result = await store.getBucketVersions();\nconsole.log(result.objects);\nconsole.log(result.deleteMarker);\n```\n\n- List from key-marker\n\n```js\nconst result = await store.getBucketVersions({\n  'keyMarker': 'keyMarker'\n});\nconsole.log(result.objects);\n```\n\n- List from the version-id-marker of key-marker\n\n```js\nconst result = await store.getBucketVersions({\n  'versionIdMarker': 'versionIdMarker',\n  'keyMarker': 'keyMarker'\n});\nconsole.log(result.objects);\nconsole.log(result.deleteMarker);\n```\n\n### .signatureUrl(name[, options])\n\nCreate a signature url for download or upload object. When you put object with signatureUrl ,you need to pass `Content-Type`.Please look at the example.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [method] {String} the HTTP method, default is 'GET'\n  - [Content-Type] {String} set the request content type\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [trafficLimit] {Number} traffic limit, range: `819200`~`838860800`.\n  - [subResource] {Object} additional signature parameters in url.\n  - [response] {Object} set the response headers for download\n    - [content-type] {String} set the response content type\n    - [content-disposition] {String} set the response content disposition\n    - [cache-control] {String} set the response cache control\n    - See more: <https://help.aliyun.com/document_detail/31980.html>\n  - [callback] {Object} set the callback for the operation\n    - url {String} set the url for callback\n    - [host] {String} set the host for callback\n    - body {String} set the body for callback\n    - [contentType] {String} set the type for body\n    - [customValue] {Object} set the custom value for callback,eg. {var1: value1,var2:value2}\n\nSuccess will return signature url.\n\nexample:\n\n- Get signature url for object\n\n```js\nconst url = store.signatureUrl('ossdemo.txt');\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT'\n});\nconsole.log(url);\n\n//  put object with signatureUrl\n// -------------------------------------------------\n\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT',\n  'Content-Type': 'text/plain; charset=UTF-8',\n});\nconsole.log(url);\n\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  response: {\n    'content-type': 'text/custom',\n    'content-disposition': 'attachment'\n  }\n});\nconsole.log(url);\n\n// put operation\n```\n\n- Get a signature url for a processed image\n\n```js\nconst url = store.signatureUrl('ossdemo.png', {\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.png', {\n  expires: 3600,\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n```\n\n### .putACL(name, acl[, options])\n\nSet object's ACL.\n\nparameters:\n\n- name {String} object name\n- acl {String} acl (private/public-read/public-read-write)\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set an object's ACL\n\n```js\nawait store.putACL('ossdemo.txt', 'public-read');\n```\n\n- Set an history object's ACL\n\n```js\nconst versionId = 'object versionId'\nawait store.putACL('ossdemo.txt', 'public-read', {\n  versionId\n});\n```\n\n### .getACL(name[, options])\n\nGet object's ACL.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get an object's ACL\n\n```js\nconst result = await store.getACL('ossdemo.txt');\nconsole.log(result.acl);\n```\n\n- Get an history object's ACL\n\n```js\nconst versionId = 'object versionId'\nconst result = await store.getACL('ossdemo.txt', { versionId });\nconsole.log(result.acl);\n```\n\n### .restore(name[, options])\n\nRestore Object.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object \n  - [type] {String} the default type is Archive \n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Restore an object with Archive type\n\n```js\nconst result = await store.restore('ossdemo.txt');\nconsole.log(result.status);\n```\n\n- Restore an object with ColdArchive type\n\n```js\nconst result = await store.restore('ossdemo.txt',{type:'ColdArchive'});\nconsole.log(result.status);\n```\n\n\n- Days for unfreezing Specifies the days for unfreezing\n\n```js\nconst result = await store.restore('ossdemo.txt',{type:'ColdArchive',Days:2});\nconsole.log(result.status);\n```\n\n- Restore an history object\n\n```js\nconst versionId = 'object versionId';\nconst result = await store.restore('ossdemo.txt', { versionId });\nconsole.log(result.status);\n```\n\n### .putSymlink(name, targetName[, options])\n\nPutSymlink\n\nparameters:\n\n- name {String} object name\n- targetName {String} target object name\n- [options] {Object} optional parameters\n  - [storageClass] {String} the storage type include (Standard,IA,Archive)\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers, detail see [PutSymlink](https://help.aliyun.com/document_detail/45126.html#title-x71-l2b-7i8)\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst options = {\n  storageClass: 'IA',\n  meta: {\n    uid: '1',\n    slus: 'test.html'\n  }\n}\nconst result = await store.putSymlink('ossdemo.txt', 'targetName', options)\nconsole.log(result.res)\n```\n\nputSymlink multiversion\n```js\nconst options = {\n  storageClass: 'IA',\n  meta: {\n    uid: '1',\n    slus: 'test.html'\n  },\n}\nconst result = await store.putSymlink('ossdemo.txt', 'targetName', options)\nconsole.log(result.res.headers['x-oss-version-id'])\n```\n\n### .getSymlink(name[, options])\n\nGetSymlink\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n- [versionId] {String} the version id of history object\n\nSuccess will return\n\n- targetName {String} target object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst result = await store.getSymlink('ossdemo.txt')\nconsole.log(result.targetName)\n```\n\nfor history object\n```js\nconst versionId = 'object versionId';\nconst result = await store.getSymlink('ossdemo.txt', { versionId })\nconsole.log(result.targetName)\n```\n\n### .initMultipartUpload(name[, options])\nBefore transmitting data in the Multipart Upload mode,\nyou must call the Initiate Multipart Upload interface to notify the OSS to initiate a Multipart Upload event.\nThe Initiate Multipart Upload interface returns a globally unique Upload ID created by the OSS server to identify this Multipart Upload event.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] Mime file type e.g.: application/octet-stream\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - [x-oss-server-side-encryption]\n    Specify the server-side encryption algorithm used to upload each part of this object,Type: string, Valid value: AES256 `x-oss-server-side-encryption: AES256`<br>\n    if use in browser you should be set cors expose header x-oss-server-side-encryption\n    - See more: [InitiateMultipartUpload](https://help.aliyun.com/document_detail/31992.html?#title-wh0-a2h-rur)\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-server-side-encryption] if set request header x-oss-server-side-encryption, will return\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- uploadId {String} upload id, use for uploadPart, completeMultipart\n\nexample:\n\n```js\n  const result = await store.initMultipartUpload('object');\n  console.log(result);\n```\n\n### .uploadPart(name, uploadId, partNo, file, start, end[, options])\nAfter initiating a Multipart Upload event, you can upload data in parts based on the specified object name and Upload ID.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- file {File|String}  is File or FileName, the whole file<br>\n Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB. <br>\n In Node you can use File or FileName, but in browser you only can use File.\n- start {Number} part start bytes  e.g: 102400\n- end {Number} part end bytes  e.g: 204800\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n  const uploadId = result.uploadId;\n  const file; //the data you want to upload, is a File or FileName(only in node)\n  //if file part is 10\n  const partSize = 100 * 1024;\n  const fileSize = 10 * partSize;//you need to calculate\n  const dones = [];\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const part = await store.uploadPart(name, uploadId, i, file, start, end);\n    dones.push({\n      number: i,\n      etag: part.etag\n    });\n    console.log(part);\n  }\n\n  //end need to call completeMultipartUpload api\n```\n\n### .uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])\nUsing Upload Part Copy, you can copy data from an existing object and upload a part of the data.\nWhen copying a file larger than 1 GB, you must use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- range {String} Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB, range value like `0-102400`\n- sourceData {Object}\n  - sourceKey {String} the source object name\n  - sourceBucketName {String} the source bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n  - [headers] {Object} The following request header is used for the source objects specified by x-oss-copy-source.\n    - [x-oss-copy-source-if-match]  default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]   default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]   default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since]   default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  const partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const range = start + '-' + (end - 1);\n    const part = await store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n- use history object to uploadPartCopy\n\n```js\n  const versionId = 'object versionId';\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n  const partSize = 100 * 1024;//100kb\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const range = start + '-' + (end - 1);\n    const part = await store.uploadPartCopy(name, result.uploadId, i, range, {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    }, {\n      versionId\n    });\n    console.log(part);\n  }\n\n  //end need complete api\n```\n\n### .completeMultipartUpload(name, uploadId, parts[, options])\nAfter uploading all data parts, you must call the Complete Multipart Upload API to complete Multipart Upload for the entire file.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- parts {Array} more part {Object} from uploadPartCopy, , each in the structure:\n  - number {Number} partNo\n  - etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n         e.g.:\n        ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n        ```\n  - [headers] {Object} extra headers, detail see [CompleteMultipartUpload](https://help.aliyun.com/document_detail/31995.html?#title-nan-5y3-rjd)\n\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data , sdk use JSON.parse() return\n\nexample:\n\n```js\n\n  //init multipart\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  //upload part\n  const file; //the data you want to upload, this example size is 10 * 100 * 1024\n  const fileSize;//you need to calculate\n  const partSize = 100 * 1024;//100kb\n  const done = [];\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const data = file.slice(start, end);\n    const part = yield store.uploadPart(name, result.uploadId, i, data);\n    console.log(part);\n    done.push({\n          number: i,\n          etag: part.res.headers.etag\n        });\n  }\n\n  //complete\n  const completeData = await store.completeMultipartUpload(name, result.uploadId, done);\n  console.log(completeData);\n```\n\n\n### .multipartUpload(name, file[, options])\n\nUpload file with [OSS multipart][oss-multipart].<br>\nthis function contains initMultipartUpload, uploadPart, completeMultipartUpload.\nWhen you use multipartUpload api，if you encounter problems with ConnectionTimeoutError, you should handle ConnectionTimeoutError in your business code. How to resolve ConnectionTimeoutError, you can decrease `partSize` size 、 Increase `timeout` 、Retry request ,\nor give tips in your business code;\n\nparameters:\n\n- name {String} object name\n- file {String|File(only support Browser)|Blob(only support Browser)|Buffer} file path or HTML5 Web File or web Blob or content buffer\n- [options] {Object} optional args\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part, defalut `1024 * 1024`(1MB), minimum `100 * 1024`(100KB)\n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n    - file {File} The file object selected by the user, if the browser is restarted, it needs the user to manually trigger the settings\n    - name {String} object key\n    - fileSize {Number} file size\n    - partSize {Number} part size\n    - uploadId {String} upload id\n    - doneParts {Array} An array of pieces that have been completed, including the object structure as follows\n       - number {Number} part number\n       - etag {String} part etag\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [mime] {String} custom mime , will send with `Content-Type` entity header\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=$(key)&etag=$(etag)&my_var=$(x:my_var).\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n          e.g.:\n         ```js\n           var customValue = {var1: 'value1', var2: 'value2'}\n         ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [disabledMD5] {Boolean} default true, it just work in Browser. if false,it means that MD5 is automatically calculated for uploaded files. **_NOTE:_** Synchronous computing tasks will block the main process\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data, sdk use JSON.parse() return\n\nexample:\n\n- Upload using multipart\n\n```js\nconst result = await store.multipartUpload('object', '/tmp/file');\nlet savedCpt;\nconsole.log(result);\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    savedCpt = cpt;\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) { //progress is generator\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\n```\n\n- multipartUpload progress example\n\n```js\n\n//async function\nasync function asyncProgress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result1 = await store.multipartUpload('object', '/tmp/file', {\n  progress: asyncProgress\n});\n\n//function\nfunction progress(p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n}\n\nconst result2 = await store.multipartUpload('object', '/tmp/file', {\n  progress: progress\n});\n\n```\n\n- multipartUpload with abort\n\n>tips: abort multipartUpload support on node and browser\n\n```js\n\n//start upload\nlet abortCheckpoint;\nstore.multipartUpload('object', '/tmp/file', {\n  progress: function (p, cpt, res) {\n    abortCheckpoint = cpt;\n  }\n}).then(res => {\n  // do something\n}.catch(err => {\n   //if abort will catch abort event\n  if (err.name === 'abort') {\n    // handle abort\n    console.log('error: ', err.message)\n  }\n}))\n\n// abort\nstore.abortMultipartUpload(abortCheckpoint.name, abortCheckpoint.uploadId)\n\n```\n\n- multipartUpload with cancel\n\n>tips: cancel multipartUpload support on node and browser\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n\n- multipartUpload with capture `ConnectionTimeoutError`  error\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  if (err.code === 'ConnectionTimeoutError') {\n    console.log(\"Woops,Woops ,timeout error!!!\");\n    // do ConnectionTimeoutError operation\n  }\n}\n\n```\n\n### .multipartUploadCopy(name, sourceData[, options])\n\nCopy file with [OSS multipart][oss-multipart]. <br>\nthis function contains head, initMultipartUpload, uploadPartCopy, completeMultipartUpload.<br>\nWhen copying a file larger than 1 GB, you should use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part, defalut `1024 * 1024`(1MB), minimum `100 * 1024`(100KB)\n  - [versionId] {String} the version id of history object\n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [copyheaders] {Object} only uploadPartCopy api used, detail [see](https://www.alibabacloud.com/help/doc-detail/31994.htm)\n    - [x-oss-copy-source-if-match]  only uploadPartCopy api used, default none<br>\n    If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match]  only uploadPartCopy api used, default none<br>\n    If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since]  only uploadPartCopy api used, default none<br>\n    If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since] only uploadPartCopy api used, default none<br>\n    If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n- Copy using multipart\n\n```js\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n});\nlet savedCpt;\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    savedCpt = cpt;\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconsole.log(result);\n\n```\n\n- multipartUploadCopy with abort\n\n```js\n\n//start upload\nlet abortCheckpoint;\nstore.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n  progress: function (p, cpt, res) {\n    abortCheckpoint = cpt;\n  }\n}).then(res => {\n  // do something\n}.catch(err => {\n   //if abort will catch abort event\n  if (err.name === 'abort') {\n    // handle abort\n    console.log('error: ', err.message)\n  }\n}))\n\n//the other event to abort, for example: click event\n//to abort upload must use the same client instance\nstore.abortMultipartUpload(abortCheckpoint.name, abortCheckpoint.uploadId)\n\n```\n\n- multipartUploadCopy with cancel\n\n```js\n\n//start upload\ntry {\n  const result = await store.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n\n```\n- multipartUploadCopy with versionId\n\n```js\n\nconst versionId = 'object versionId'\n//start upload\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n}, {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  },\n  versionId\n});\n\n```\n\n### .listParts(name, uploadId[, query, options])\n\nThe ListParts command can be used to list all successfully uploaded parts mapped to a specific upload ID, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- name {String} object key\n- uploadId {String} upload ID from initMultipartUpload api\n- [query] {Object} query parameters\n  - [max-parts] {Number} The maximum part number in the response of the OSS. default value: 1000.\n  - [part-number-marker] {Number} Starting position of a specific list. A part is listed only when the part number is greater than the value of this parameter.\n  - [encoding-type] {String} Specify the encoding of the returned content and the encoding type. Optional value: url\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- uploadId {String} upload ID\n- bucket {String} Specify the bucket name.\n- name {String} object name\n- PartNumberMarker {Number} Starting position of the part numbers in the listing result.\n- nextPartNumberMarker {Number} If not all results are returned this time, the response request includes the NextPartNumberMarker element to indicate the value of PartNumberMarker in the next request.\n- maxParts {Number} upload ID\n- isTruncated {Boolean} Whether the returned result list for List Parts is truncated. The “true” indicates that not all results are returned; “false” indicates that all results are returned.\n- parts {Array} The container that saves part information, each in the structure:\n  - PartNumber {Number} Part number.\n  - LastModified {Date} Time when a part is uploaded.\n  - ETag {String} ETag value in the content of the uploaded part.\n  - Size {Number} Size of the uploaded part.\n\nexample:\n\n- List uploaded part\n\n```js\n\nconst result = await store.listParts('objcet', 'uploadId', {\n  'max-parts': 1000\n});\nconsole.log(result);\n```\n\n### .listUploads(query[, options])\n\nList on-going multipart uploads, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- query {Object} query parameters\n  - [prefix] {String} the object key prefix\n  - [max-uploads] {Number} the max uploads to return\n  - [key-marker] {String} the object key marker, if `upload-id-marker`\n    is not provided, return uploads with `key > marker`, otherwise\n    return uploads with `key >= marker && uploadId > id-marker`\n  - [upload-id-marker] {String} the upload id marker, must be used\n    **WITH** `key-marker`\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- List on-going multipart uploads\n\n```js\n\nconst result = await store.listUploads({\n  'max-uploads': 100,\n  'key-marker': 'my-object',\n  'upload-id-marker': 'upload-id'\n});\nconsole.log(result);\n```\n\n### .abortMultipartUpload(name, uploadId[, options])\n\nAbort a multipart upload for object.\n\nparameters:\n\n- name {String} the object name\n- uploadId {String} the upload id\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- Abort a multipart upload\n\n```js\nconst result = await store.abortMultipartUpload('object', 'upload-id');\nconsole.log(result);\n```\n\n### .calculatePostSignature(policy)\n\nget postObject params\n\nparameters:\n\n- policy {JSON or Object} policy must contain expiration and conditions.\n\nSuccess will return postObject Api params.\n\nObject:\n\n- OSSAccessKeyId {String}\n- Signature {String}\n- policy {Object} response info\n\n### .getObjectTagging(name[, options])\n\nObtains the tags of an object.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- tag {Object} the tag of object\n- res {Object} response info\n\n### .putObjectTagging(name, tag[, options])\n\nConfigures or updates the tags of an object.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n### .deleteObjectTagging(name[, options])\n\nDeletes the tag of a specified object.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n### .processObjectSave(sourceObject, targetObject, process[, targetBucket])\n\nPersistency indicates that images are asynchronously stored in the specified Bucket\n\nparameters:\n\n- sourceObject {String} source object name\n- targetObject {String} target object name\n- process {String} process string\n- [targetBucket] {String} target bucket\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n\n```js\nconst sourceObject = 'a.png'\nconst targetObject = 'b.png'\nconst process = 'image/watermark,text_aGVsbG8g5Zu+54mH5pyN5Yqh77yB,color_ff6a00'\n\nawait this.store.processObjectSave(sourceObject, targetObject, process);\n```\n\n## RTMP Operations\n\nAll operations function is [async], except `getRtmpUrl`.\n\nasync function format: `async functionName(...)`.\n\n### .putChannel(id, conf[, options])\n\nCreate a live channel.\n\nparameters:\n\n- id {String} the channel id\n- conf {Object} the channel config\n  - [Description] {String} the channel description\n  - [Status] {String} the channel status: 'enabled' or 'disabled'\n  - [Target] {Object}\n    - [Type] {String} the data type for the channel, only 'HLS' is supported now\n    - [FragDuration] {Number} duration of a 'ts' segment\n    - [FragCount] {Number} the number of 'ts' segments in a 'm3u8'\n    - [PlaylistName] {String} the 'm3u8' name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- publishUrls {Array} the publish urls\n- playUrls {Array} the play urls\n- res {Object} response info\n\nexample:\n\n- Create a live channel\n\n```js\nconst cid = 'my-channel';\nconst conf = {\n  Description: 'this is channel 1',\n  Status: 'enabled',\n  Target: {\n    Type: 'HLS',\n    FragDuration: '10',\n    FragCount: '5',\n    PlaylistName: 'playlist.m3u8'\n  }\n};\n\nconst r = await this.store.putChannel(cid, conf);\nconsole.log(r);\n```\n\n### .getChannel(id[, options])\n\nGet live channel info.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- data {Object} channel info, same as conf in [.putChannel](#putchannelid-conf-options)\n- res {Object} response info\n\nexample:\n\n- Get live channel info\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannel(cid);\nconsole.log(r);\n```\n\n### .deleteChannel(id[, options])\n\nDelete a live channel.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response infomation.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Delete a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.deleteChannel(cid);\nconsole.log(r);\n```\n\n### .putChannelStatus(id, status[, options])\n\nChange the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- status {String} the status: 'enabled' or 'disabled'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Disable a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.putChannelStatus(cid, 'disabled');\nconsole.log(r);\n```\n\n### .getChannelStatus(id[, options])\n\nGet the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel status information.\n\nobject:\n\n- data {Object}\n  - Status {String} the channel status: 'Live' or 'Idle'\n  - [ConnectedTime] {String} the connected time of rtmp pushing\n  - [RemoteAddr] {String} the remote addr of rtmp pushing\n  - [Video] {Object} the video parameters (Width/Height/FrameRate/Bandwidth/Codec)\n  - [Audio] {Object} the audio parameters (Bandwidth/SampleRate/Codec)\n- res {Object} response info\n\nexample:\n\n- Get a live channel status\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelStatus(cid);\nconsole.log(r);\n\n// { Status: 'Live',\n//   ConnectedTime: '2016-04-12T11:51:03.000Z',\n//   RemoteAddr: '42.120.74.98:53931',\n//   Video:\n//   { Width: '672',\n//     Height: '378',\n//     FrameRate: '29',\n//     Bandwidth: '60951',\n//     Codec: 'H264' },\n//   Audio: { Bandwidth: '5959', SampleRate: '22050', Codec: 'AAC' }\n// }\n```\n\n### .listChannels(query[, options])\n\nList channels.\n\nparameters:\n\n- query {Object} parameters for list\n  - prefix {String}: the channel id prefix (returns channels with this prefix)\n  - marker {String}: the channle id marker (returns channels after this id)\n  - max-keys {Number}: max number of channels to return\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel list.\n\nobject:\n\n- channels {Array} the channels, each in the structure:\n  - Name {String} the channel id\n  - Description {String} the channel description\n  - Status {String} the channel status\n  - LastModified {String} the last modification time of the channel\n  - PublishUrls {Array} the publish urls for the channel\n  - PlayUrls {Array} the play urls for the channel\n- nextMarker: result.data.NextMarker || null,\n- isTruncated: result.data.IsTruncated === 'true'\n- res {Object} response info\n\nexample:\n\n- List live channels\n\n```js\nconst r = await this.store.listChannels({\n  prefix: 'my-channel',\n  'max-keys': 3\n});\nconsole.log(r);\n```\n\n### .getChannelHistory(id[, options])\n\nGet the live channel history.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the history information.\n\nobject:\n\n- records {Object} the pushing records, each in the structure:\n  - StartTime {String} the start time\n  - EndTime {String} the end time\n  - RemoteAddr {String} the remote addr\n- res {Object} response info\n\nexample:\n\n- Get the live channel history\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelHistory(cid);\nconsole.log(r);\n```\n\n### .createVod(id, name, time[, options])\n\nCreate a VOD playlist for the channel.\n\nparameters:\n\n- id {String} the channel id\n- name {String} the playlist name\n- time {Object} the duration time\n  - startTime {Number} the start time in epoch seconds\n  - endTime {Number} the end time in epoch seconds\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Create a vod playlist of a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.createVod(cid, 're-play', {\n  startTime: 1460464870,\n  endTime: 1460465877\n});\nconsole.log(r);\n```\n\n### .getRtmpUrl(channelId[, options])\n\nGet signatured rtmp url for publishing.\n\nparameters:\n\n- channelId {String} the channel id\n- [options] {Object} optional parameters\n  - [expires] {Number} the expire time in seconds of the url\n  - [params] {Object} the additional paramters for url, e.g.: {playlistName: 'play.m3u8'}\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the rtmp url.\n\nexample:\n\n- Get a rtmp url.\n\n```js\nconst cid = 'my-channel';\n\nconst url = this.store.getRtmpUrl(this.cid, {\n  params: {\n    playlistName: 'play.m3u8'\n  },\n  expires: 3600\n});\nconsole.log(url);\n// rtmp://ossliveshow.oss-cn-hangzhou.aliyuncs.com/live/tl-channel?OSSAccessKeyId=T0cqQWBk2ThfRS6m&Expires=1460466188&Signature=%2BnzTtpyxUWDuQn924jdS6b51vT8%3D\n```\n\n## Create A Image Service Instance\n\nEach Image Service instance required `accessKeyId`, `accessKeySecret`, `bucket` and `imageHost`.\n\n### oss.ImageClient(options)\n\nCreate a Image service instance.\n\noptions:\n- imageHost {String} your image service domain that binding to a OSS bucket\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- bucket {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nconst oss = require('ali-oss');\n\nconst imgClient = oss.ImageClient({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'my_image_bucket'\n  imageHost: 'thumbnail.myimageservice.com'\n});\n```\n\n## Image Operations\n\nAll operations function is [async], except `imgClient.signatureUrl`.\n\nasync function format: `async functionName(...)`.\n\n### imgClient.get(name, file[, options])\n\nGet an image from the image channel.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the image\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image with a style and store it to the local file\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', filepath);\n```\n\n_ Store image to a writestream\n\n```js\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', somestream);\n```\n\n- Get an image content buffer\n\n```js\nconst result = await imgClient.get('ossdemo/demo.jpg@200w_200h');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a not exists object or a not image object\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/not-exists-demo.jpg@200w_200h', filepath);\n// will throw NoSuchKeyError\n```\n\n### imgClient.getStream(name[, options])\n\nGet an image read stream.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n        otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n        otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n        otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance\n    if response status is not 200, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image object stream\n\n```js\nconst result = await imgClient.getStream('ossdemo/demo.jpg@200w_200h');\nresult.stream.pipe(fs.createWriteStream('some demo.jpg'));\n```\n\n### imgClient.getExif(name[, options])\n\nGet a image exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nIf object don't have exif, will throw 400 BadRequest.\n\nexample:\n\n```js\nconst result = await imgClient.getExif('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n### imgClient.getInfo(name[, options])\n\nGet a image info and exif info by image object name from the image channel.\n\nparameters:\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nexample:\n\n```js\nconst result = await imgClient.getInfo('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     Format: \"jpg\",\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n\n```\n\n\n### imgClient.putStyle(name, style[, options])\n// TODO\n\n### imgClient.getStyle(name[, options])\n\nGet a style by name from the image channel.\n\nparameters:\n- name {String} image style name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} styles object\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.getStyle('400');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"234\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:58:20 GMT\"\n//     },\n//     size: 234,\n//     aborted: false,\n//     rt: 398,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }\n// }\n```\n\n### imgClient.listStyle([options])\n\nGet all styles from the image channel.\n\nparameters:\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Array} styles array, a style object:\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.listStyle();\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"913\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:47:32 GMT\"\n//     },\n//     size: 913,\n//     aborted: false,\n//     rt: 1911,\n//     keepAliveSocket: false\n//   },\n//   data: [{\n//     Name: \"200-200\",\n//     Content: \"0e_200w_200h_0c_0i_0o_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:28:08 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:28:08 GMT\"\n//   }, {\n//     Name: \"800\",\n//     Content: \"800w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:29:15 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:29:15 GMT\"\n//   }, {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }, {\n//     Name: \"600\",\n//     Content: \"600w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:35:02 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:35:02 GMT\"\n//   }]\n// }\n```\n\n### imgClient.deleteStyle(name[, options])\n// TODO\n\n### imgClient.signatureUrl(name)\n\nCreate a signature url for directly download.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return full signature url.\n\nexample:\n\n```js\nconst url = imgClient.signatureUrl('\n');\n// http://thumbnail.myimageservice.com/demo.jpg@200w_200h?OSSAccessKeyId=uZxyLARzYZtGwHKY&Expires=1427803849&Signature=JSPRe06%2FjQpQSj5zlx2ld1V%2B35I%3D\n```\n\n## Cluster Mode\n\nCluster mode now only support object operations.\n\n```js\nconst Cluster = require('ali-oss').ClusterClient;\n\nconst client = Cluster({\n  cluster: [{\n    host: 'host1',\n    accessKeyId: 'id1',\n    accessKeySecret: 'secret1'\n  }, {\n    host: 'host2',\n    accessKeyId: 'id2',\n    accessKeySecret: 'secret2'\n  }],\n  schedule: 'masterSlave', //default is `roundRobin`\n});\n\n// listen error event to logging error\nclient.on('error', function(err) {\n  console.error(err.stack);\n});\n\n// client init ready\nclient.ready(function() {\n  console.log('cluster client init ready, go ahead!');\n});\n```\n\n### Get Methods\n\nWill choose an alive client by schedule(`masterSlave` or `roundRobin`).\n\n- `client.get()`\n- `client.head()`\n- `client.getStream()`\n- `client.list()`\n- `client.signatureUrl()`\n- `client.chooseAvailable()` - choose an available client by schedule.\n- `client.getACL()`\n\n### Put Methods\n\nWill put to all clients.\n\n- `client.put()`\n- `client.putStream()`\n- `client.delete()`\n- `client.deleteMulti()`\n- `client.copy()`\n- `client.putMeta()`\n- `client.putACL()`\n- `client.restore()`\n\n## Known Errors\n\nEach error return by OSS server will contains these properties:\n\n- name {String} error name\n- message {String} error message\n- requestId {String} uuid for this request, if you meet some unhandled problem,\n    you can send this request id to OSS engineer to find out what's happend.\n- hostId {String} OSS cluster name for this request\n\nThe following table lists the OSS error codes:\n\n[More code info](https://help.aliyun.com/knowledge_detail/32005.html)\n\nname | code | status | message | message in Chinese\n---  | ---  | --- | ---     | ---\nAccessDeniedError | AccessDenied | 403 | Access Denied | 拒绝访问\nBucketAlreadyExistsError | BucketAlreadyExists | 409 | Bucket already exists | Bucket 已经存在\nBucketNotEmptyError | BucketNotEmpty | 409 | Bucket is not empty | Bucket 不为空\nRestoreAlreadyInProgressError | RestoreAlreadyInProgress | 409 | The restore operation is in progress. | restore 操作正在进行中\nOperationNotSupportedError | OperationNotSupported | 400 | The operation is not supported for this resource | 该资源暂不支持restore操作\nEntityTooLargeError | EntityTooLarge | 400 | Entity too large | 实体过大\nEntityTooSmallError | EntityTooSmall | 400 | Entity too small | 实体过小\nFileGroupTooLargeError | FileGroupTooLarge | 400 | File group too large | 文件组过大\nInvalidLinkNameError | InvalidLinkName | 400 | Link name can't be the same as the object name | Object Link 与指向的 Object 同名\nLinkPartNotExistError | LinkPartNotExist | 400 | Can't link to not exists object | Object Link 中指向的 Object 不存在\nObjectLinkTooLargeError | ObjectLinkTooLarge | 400 | Too many links to this object | Object Link 中 Object 个数过多\nFieldItemTooLongError | FieldItemTooLong | 400 | Post form fields items too large | Post 请求中表单域过大\nFilePartInterityError | FilePartInterity | 400 | File part has changed | 文件 Part 已改变\nFilePartNotExistError | FilePartNotExist | 400 | File part not exists | 文件 Part 不存在\nFilePartStaleError | FilePartStale| 400 | File part stale | 文件 Part 过时\nIncorrectNumberOfFilesInPOSTRequestError | IncorrectNumberOfFilesInPOSTRequest | 400 | Post request contains invalid number of files | Post 请求中文件个数非法\nInvalidArgumentError | InvalidArgument | 400 | Invalid format argument | 参数格式错误\nInvalidAccessKeyIdError | InvalidAccessKeyId | 400 | Access key id not exists | Access Key ID 不存在\nInvalidBucketNameError | InvalidBucketName | 400 | Invalid bucket name | 无效的 Bucket 名字\nInvalidDigestError | InvalidDigest | 400 | Invalid digest | 无效的摘要\nInvalidEncryptionAlgorithmError | InvalidEncryptionAlgorithm | 400 | Invalid encryption algorithm | 指定的熵编码加密算法错误\nInvalidObjectNameError | InvalidObjectName | 400 | Invalid object name | 无效的 Object 名字\nInvalidPartError | InvalidPart | 400 | Invalid part | 无效的 Part\nInvalidPartOrderError | InvalidPartOrder | 400 | Invalid part order | 无效的 part 顺序\nInvalidPolicyDocumentError | InvalidPolicyDocument | 400 | Invalid policy document | 无效的 Policy 文档\nInvalidTargetBucketForLoggingError | InvalidTargetBucketForLogging | 400 | Invalid bucket on logging operation | Logging 操作中有无效的目标 bucket\nInternalError | Internal | 500 | OSS server internal error | OSS 内部发生错误\nMalformedXMLError | MalformedXML | 400 | Malformed XML format | XML 格式非法\nMalformedPOSTRequestError | MalformedPOSTRequest | 400 | Invalid post body format | Post 请求的 body 格式非法\nMaxPOSTPreDataLengthExceededError | MaxPOSTPreDataLengthExceeded | 400 | Post extra data too large | Post 请求上传文件内容之外的 body 过大\nMethodNotAllowedError | MethodNotAllowed | 405 | Not allowed method | 不支持的方法\nMissingArgumentError | MissingArgument | 411 | Missing argument | 缺少参数\nMissingContentLengthError | MissingContentLength | 411 | Missing `Content-Length` header | 缺少内容长度\nNoSuchBucketError | NoSuchBucket | 404 | Bucket not exists | Bucket 不存在\nNoSuchKeyError | NoSuchKey | 404 | Object not exists | 文件不存在\nNoSuchUploadError | NoSuchUpload | 404 | Multipart upload id not exists | Multipart Upload ID 不存在\nNotImplementedError | NotImplemented | 501 | Not implemented | 无法处理的方法\nPreconditionFailedError | PreconditionFailed | 412 | Pre condition failed | 预处理错误\nRequestTimeTooSkewedError | RequestTimeTooSkewed | 403 | Request time exceeds 15 minutes to server time | 发起请求的时间和服务器时间超出 15 分钟\nRequestTimeoutError | RequestTimeout | 400 | Request timeout | 请求超时\nRequestIsNotMultiPartContentError | RequestIsNotMultiPartContent | 400 | Invalid post content-type | Post 请求 content-type 非法\nSignatureDoesNotMatchError | SignatureDoesNotMatch | 403 | Invalid signature | 签名错误\nTooManyBucketsError | TooManyBuckets | 400 | Too many buckets on this user | 用户的 Bucket 数目超过限制\nRequestError | RequestError | -1 | network error | 网络出现中断或异常\nConnectionTimeoutError | ConnectionTimeoutError | -2 | request connect timeout | 请求连接超时\nSecurityTokenExpiredError | SecurityTokenExpired | 403 | sts Security Token Expired | sts Security Token 超时失效\n\n[generator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n[oss-sts]: https://help.aliyun.com/document_detail/oss/practice/ram_guide.html\n[browser-sample]: https://github.com/rockuw/oss-in-browser\n[oss-multipart]: https://help.aliyun.com/document_detail/31992.html\n[disabled-browser-headers]: https://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n",
      "readmeFilename": "README.md",
      "gitHead": "4790a19bac8a1c0e59bc601d2e82cca7f220855e",
      "_id": "ali-oss@6.17.0-beta.1",
      "_nodeVersion": "14.17.6",
      "_npmVersion": "8.1.0",
      "dist": {
        "integrity": "sha512-yJb24nZJSJ2tbzC5poRPupWkO4tDT6IM5dXU24wU4N9QXhcUFVy49ap4aoj+YGkwFFhEPaybYprylNQyVKdlQQ==",
        "shasum": "c8eef1c57b506ea512b85def440c21a4258fe1de",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.17.0-beta.1.tgz",
        "fileCount": 212,
        "unpackedSize": 2181549,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh8jvdCRA9TVsSAnZWagAAwMYP/2yCAptXXifjHaAchsts\nF9kfxRB3FUq8wslFVDQ6uqeIxo44OfbxR03PdYja5XNmuwt1oYYUaNaCMK5v\nZUhjbpcEXb/ghAsYX7wBoQIVrTbvEMIpNYyYvaVP6Jnng4ahGG+oZ+bVdGqX\nvBlcGCZeGeuaNQUGwQS1PClK4rY2wnm50QrJtSvj9zVt+bzQQN45LVfJ85aS\nopCFOR9fH/F9tIa3AXZBEBkp/D9ZABLpfjvPf8I9GoBoqI5Rp/b/hhI4gVBQ\nbofOb9wPb0zejUrk2s6FEb6pbY0Ygo8ccZCNyZvBlWVdEoXmpfX0lR5d+/5T\nErcggG0iEBGduvrHuSCARET+x1LdOmuI7HXREt/oCH5YdzLgkcvxU+8NBRyk\nuzmFqcEOXnKodu+rxM5heTdN0Nl8xVwoHrYPcafwBXYjDvQ+30f/T8HzKYQ2\naKow+6qiY5D14zkPNHQw3bOdui+pCceZ5XQIVQZnFKo84Mwq+pWnSCV0vnvJ\nLo3XZCGnZ6hfb9Bvx+F/1lFjJdZ1kzReZPVlVABk3dkAS6nXy0uxmdaoFHb3\nfmXJLJliBzJJ96CFbPelvdyGIqSAIAO/AUCIpKXdlUZrj+D6Tkn5LO8qFTUi\nfVX1zzMY/xU7KHOIr8APR9WKfCo9Tew/koX7k3x3gmZfhZbf3oApTcKGOGt8\nEANa\r\n=r1Cp\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHL0E4v8dr5wHUFWJKfF+1VoeLjRRoZfU8pLBoWQ71ctAiEAkVdiTRSSKkbk92/BKiwQYHlm3vsXumFi7LbBYgYUw14="
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.17.0-beta.1_1643264988714_0.020732462854477607"
      },
      "_hasShrinkwrap": false
    },
    "6.17.0": {
      "name": "ali-oss",
      "version": "6.17.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "./lib/client.js",
      "browser": {
        "./lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "npm run tsc && mocha -t 120000 -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "npm run tsc && nyc --reporter=lcov node_modules/.bin/_mocha -t 120000 -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "13.3.0",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^18.2.1",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "immediate": "^3.3.0",
        "karma": "^6.3.4",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^2.0.1",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^9.1.2",
        "nyc": "^15.1.0",
        "promise-polyfill": "^6.0.2",
        "puppeteer": "^10.4.0",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.727.0",
        "standard-version": "^9.3.1",
        "stream-equal": "^1.1.0",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^3.14.2",
        "watchify": "^3.11.1"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^2.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "b0f5930e656603d94e7fed1e19d81bdb806b9758",
      "_id": "ali-oss@6.17.0",
      "_nodeVersion": "14.17.6",
      "_npmVersion": "8.1.0",
      "dist": {
        "integrity": "sha512-T9ma+G1/gQj0c/tkgSpXh2dqU4CPXHICh7TAdhxYiIPdkx+tX24k721dCMDonyJmiQkkWar1z4t76yrDqv09kA==",
        "shasum": "74c2d0d4697122d31b4dc83533846317344f8224",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.17.0.tgz",
        "fileCount": 212,
        "unpackedSize": 2181542,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiBHoHCRA9TVsSAnZWagAAGwgP/2nHmKZFlKnjkJ6MjI4V\nEMIGCbn8kfXn1kUropk0lrk+DeKRatJZOfK9vAd0R+EliSmK4SPcNRdW35Sh\nh3f51Zx1cC1cSJJFlnaB7MfBBY1vOOKrjGWw5IxBSLgEvkSxpM6raKOyFIGB\ndX5WwxPJR7Xif2LIqkhCeBtPYs4//O8WyHNwZw17PhUxERfg/k0VDxYF2ID1\nAO14kCzQjayRuCzyzioCNBqJk5yx9h/51Rs6gyAKUT+w/wD8byk7EJwNKwWA\nTID8ZPieXgvJVLiTzNNQt/psmeSy1KJJe6PnVPXLI3yss2kGTibSpMkPa9oc\nhuEEgf+T0MpUoJOH+EKnS8/SsBwsRDXhbs61DgIQlFVdZPYTTOHyeS6uD/bf\nfHnJ+B9waNTESKQQYi/eTx87jvHvtQ9isDpOrvFO6kyudYkinT3MA8qMob4V\n8TjZjb/1xFEh7xZoaksAJN3+r3TQv/B8reQDKXyjYLYuCGf0UzSRYvY/xWu/\nSujzozju+5NJ8kntuOdEOfTnTdjTPYMVVqI8rBRSzI5YKKKtyjZ+qLG26c7a\nfsiUjKhjfD7tA2x4C1vODnjWd1Hetx8dBT/iR+ep+Pv8gmKTW+BWbd+t6CN4\nV2HXwDp+vFvNdDel0wxZUDf0cnQJtRkvAxowKZ8dxQfB1tZ7PManeBBX4k3x\nW41w\r\n=wrRX\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFCdpdPU/7OM2EBzJhpjR61YKygFfzoqUMvt5hibhmb2AiEA1snjXPIjUGlC2FLcdsou3cn6rVT+NnldG798NjZSFAo="
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.17.0_1644460551343_0.6241525222201483"
      },
      "_hasShrinkwrap": false
    },
    "6.17.1": {
      "name": "ali-oss",
      "version": "6.17.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "./lib/client.js",
      "browser": {
        "./lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "npm run tsc && mocha -t 120000 -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "npm run tsc && nyc --reporter=lcov node_modules/.bin/_mocha -t 120000 -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "autod": "autod",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean "
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ],
        "pre-commit": "npm run lint-staged"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^2.34.0",
        "@typescript-eslint/parser": "^2.34.0",
        "aliasify": "^2.0.0",
        "autod": "^2.6.1",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "13.3.0",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^6.8.0",
        "eslint-config-airbnb": "^18.2.1",
        "eslint-config-ali": "^9.0.2",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-react": "^7.7.0",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "immediate": "^3.3.0",
        "karma": "^6.3.4",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^2.0.1",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^9.5.0",
        "mm": "^2.0.0",
        "mocha": "^9.1.2",
        "nyc": "^15.1.0",
        "promise-polyfill": "^6.0.2",
        "puppeteer": "^10.4.0",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "snyk": "^1.727.0",
        "standard-version": "^9.3.1",
        "stream-equal": "^1.1.0",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^3.14.2",
        "watchify": "^3.11.1"
      },
      "dependencies": {
        "address": "^1.0.0",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.0.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^2.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "mz-modules": "^2.1.0",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.8.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "d6572f1d1fe7df74f9c06f192fe744381c0057d0",
      "_id": "ali-oss@6.17.1",
      "_nodeVersion": "14.17.6",
      "_npmVersion": "8.1.0",
      "dist": {
        "integrity": "sha512-v2oT3UhSJTH/LrsscVvi7iEGrnundydNaFzpYAKatqOl4JNcBV4UiwtlJU+ZHLys040JH2k+CutznA0GoE+P2w==",
        "shasum": "3e88738ec01111a26a2b967cf857d97050886156",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.17.1.tgz",
        "fileCount": 212,
        "unpackedSize": 2181660,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiBMhICRA9TVsSAnZWagAA79EP/2RmJ9FpFGGV8Eq7hjK5\ndhXSBc8M+qlfDv6cyE23kemanmKMivKw0nPpmIA/O30xnmv2adWS9M1uF2+l\n5oo/iX/HBexFUlmQfNhgRECGlN/4RB2GU1f9QpzLNHVmee3vgRurJ66mWEYQ\n0URdpSlCuMpGl/EIAs+SBpB0YNZkip0C84oHoKMcFAy8qkh/XbJlL+/46dMP\nsFtiwhOeQpnfe0FJka/GPPDz/GZOASD5whLROgh0ZoyIzFYzrBctGL+upp3a\npBIDE/k/ngdmsVCZSi4bneFm6NdUFYAlp0BNE4jO7Mxbo6tlcaXSg2CJIJDC\neYpfCn7Y5jOfU3lriwd9vk5hpHLis81/2D1kCEvub7EIxSrR7ElOq6eyzowS\n+OSX29TYqUvP2nb7X4RPP1+2ospyF/pPadnPQeqrwkQXqgCj7Nq5n4s8JNha\n0O70l99zJ+Wai06SqGGEXpdDfQT2JH1wNJxFT0KmjiYdWgTsFHHY30dKdb8O\n/8GwYInTJFe0rtVvKvYKtyrIS76f7H38VL16QoochL+qzZ/9ddyVVTp6vbnj\nD3lkrpL1R3aDtAFansQmg6zrYUNFWYFIMNqmbtns8fkeDP5JIgcbp6c4naHu\nEjTfAQc7d0rI8DpVf3eaVRqq6PIGhkgyuUr6krGSVeGU7Evi5OV9ZJ9S8j3e\nsqm0\r\n=wxn/\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICTK837KmDKCJ8FVUmcc0eiNhlkORhYiiUrcYUk+RqAfAiAj8LNBlZiecBfpk5w1W0vTk+TZAowTAPtk/KnasMuyOA=="
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.17.1_1644480583492_0.2857855107529548"
      },
      "_hasShrinkwrap": false
    },
    "6.18.0": {
      "name": "ali-oss",
      "version": "6.18.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "./lib/client.js",
      "browser": {
        "./lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "npm run tsc && mocha -t 120000 -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "npm run tsc && nyc --reporter=lcov node_modules/.bin/_mocha -t 120000 -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk-protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean ",
        "prepare": "husky install"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=8"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@commitlint/cli": "^16.2.4",
        "@commitlint/config-conventional": "^16.2.4",
        "@snyk/protect": "^1.1196.0",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^5.0.0",
        "@typescript-eslint/parser": "^5.0.0",
        "aliasify": "^2.0.0",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "13.3.0",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^8.44.0",
        "eslint-config-airbnb": "^19.0.4",
        "eslint-config-ali": "^13.0.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-prettier": "^4.2.1",
        "filereader": "^0.10.3",
        "git-pre-hooks": "^1.2.0",
        "husky": "^8.0.3",
        "immediate": "^3.3.0",
        "karma": "^6.3.4",
        "karma-browserify": "^5.1.1",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^2.0.1",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^12.4.1",
        "mm": "^2.0.0",
        "mocha": "^9.1.2",
        "nyc": "^15.1.0",
        "prettier": "^3.0.0",
        "promise-polyfill": "^6.0.2",
        "puppeteer": "^20.9.0",
        "request": "^2.88.0",
        "should": "^11.0.0",
        "sinon": "^1.17.7",
        "standard-version": "^9.3.1",
        "stream-equal": "^1.1.0",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^3.14.2",
        "watchify": "^3.11.1"
      },
      "dependencies": {
        "address": "^1.2.2",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^2.2.0",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.4.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^2.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^2.33.1",
        "utility": "^1.18.0",
        "xml2js": "^0.4.16"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ],
        "**/*.{js,ts}": [
          "eslint --cache --fix --ext .js,.ts",
          "prettier --write",
          "git add"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "2468cf8f4d7419c426a316881b3e3fedd4c15a0a",
      "_id": "ali-oss@6.18.0",
      "_nodeVersion": "16.14.0",
      "_npmVersion": "9.6.2",
      "dist": {
        "integrity": "sha512-6wjHOsLvIsAkp9EZRocp99I2DZUHUti4vbap57vhbfQR/0mrZBwzMfGkLE9cmG2F4J9hYQWvVy3GbKjDLdrSGw==",
        "shasum": "89ecb9a66c27967b40550041e40169969a7f06a5",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.18.0.tgz",
        "fileCount": 219,
        "unpackedSize": 3448243,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIF1qNaaZbqpQPhImNbVa9XfAZQbwdx8umhLhvuEaz8eLAiEAzOCwOEVOAa4Q3e9Fp2BILhLCsLdH7mAvNaHWJJ7TtZo="
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.18.0_1690940914410_0.05944437461363572"
      },
      "_hasShrinkwrap": false
    },
    "6.19.0-audit.1": {
      "name": "ali-oss",
      "version": "6.19.0-audit.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "./lib/client.js",
      "browser": {
        "./lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "npm run tsc && mocha -t 120000 -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "npm run tsc && nyc --reporter=lcov node_modules/.bin/_mocha -t 120000 -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk-protect",
        "prepublish": "npm run snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean ",
        "prepare": "husky install"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/aliyun/oss-nodejs-sdk.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/aliyun/oss-nodejs-sdk/issues"
      },
      "engines": {
        "node": ">=14"
      },
      "homepage": "https://github.com/aliyun/oss-nodejs-sdk",
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@commitlint/cli": "^17.6.7",
        "@commitlint/config-conventional": "^16.2.4",
        "@snyk/protect": "^1.1196.0",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^5.0.0",
        "@typescript-eslint/parser": "^5.0.0",
        "aliasify": "^2.0.0",
        "axios": "^1.4.0",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^17.0.0",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^8.44.0",
        "eslint-config-airbnb": "^19.0.4",
        "eslint-config-ali": "^13.0.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-prettier": "^4.2.1",
        "filereader": "^0.10.3",
        "form-data": "^4.0.0",
        "git-pre-hooks": "^1.2.0",
        "husky": "^7.0.4",
        "immediate": "^3.3.0",
        "karma": "^6.3.4",
        "karma-browserify": "^8.1.0",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^2.0.1",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^12.4.1",
        "mm": "^2.0.0",
        "mocha": "^9.1.2",
        "nyc": "^15.1.0",
        "prettier": "^3.0.0",
        "promise-polyfill": "^6.0.2",
        "puppeteer": "^20.9.0",
        "should": "^11.0.0",
        "sinon": "^15.2.0",
        "standard-version": "^9.3.1",
        "stream-equal": "^1.1.0",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^3.14.2",
        "watchify": "^4.0.0"
      },
      "dependencies": {
        "address": "^1.2.2",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^4.3.4",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.4.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^2.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "^3.17.1",
        "utility": "^1.18.0",
        "xml2js": "^0.6.2"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ],
        "**/*.{js,ts}": [
          "eslint --cache --fix --ext .js,.ts",
          "prettier --write",
          "git add"
        ]
      },
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "readme": "# oss-js-sdk\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage][cov-image]][cov-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/ali-oss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/ali-oss\n[travis-image]: https://img.shields.io/travis/ali-sdk/ali-oss/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ali-sdk/ali-oss.svg?branch=master\n[cov-image]: http://codecov.io/github/ali-sdk/ali-oss/coverage.svg?branch=master\n[cov-url]: http://codecov.io/github/ali-sdk/ali-oss?branch=master\n[david-image]: https://img.shields.io/david/ali-sdk/ali-oss.svg?style=flat-square\n[david-url]: https://david-dm.org/ali-sdk/ali-oss\n\naliyun OSS(Object Storage Service) js client for Node and Browser env.\n\n`NOTE`： For SDK `5.X` document, please go to [README.md](https://github.com/ali-sdk/ali-oss/blob/5.x/README.md)\n\n## Install\n\n```bash\nnpm install ali-oss --save\n```\n\n## Compatibility\n\n### Node\n\nNode.js >= 8.0.0 required. You can use 4.x in Node.js < 8.\n\n### Browser\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n\n`Note`:\n\n- For Lower browsers you can refer to [PostObject](https://help.aliyun.com/document_detail/31988.html), if you want to see more practices ,please refer to [Web Post](https://help.aliyun.com/document_detail/31923.html)\n\n### QA\n\nYou can join DingDing Talk Group, [Group Link](https://qr.dingtalk.com/action/joingroup?code=v1,k1,E60EuCmxajfilkaR/kknRcGR9UissskPEXu/1td36z0=)\n\n<img src=\"task/dingding.jpg\" height=\"400\" title=\"dingding\" width=\"300\">\n\n## License\n\n[MIT](LICENSE)\n\n# OSS Usage\n\nOSS, Object Storage Service. Equal to well known Amazon [S3](http://aws.amazon.com/s3/).\n\nAll operation use es7 async/await to implement. All api is async function.\n\n## Summary\n\n- [Node Usage](#node-usage)\n- [Browser Usage](#browser-usage)\n- [Data Regions](#data-regions)\n- [Create Account](#create-account)\n- [Create A Bucket Instance](#create-a-bucket-instance)\n  - [oss(options)](#ossoptions)\n- [Bucket Operations](#bucket-operations)\n\n  - Base\n    - [.listBuckets(query[, options])](#listbucketsquery-options)\n    - [.putBucket(name[, options])](#putbucketname-options)\n    - [.useBucket(name)](#usebucketname)\n    - [.deleteBucket(name[, options])](#deletebucketname-options)\n    - [.getBucketInfo(name)](#getbucketinfoname)\n    - [.getBucketStat(name)](#getbucketstatname)\n    - [.getBucketLocation(name)](#getbucketlocationname)\n  - ACL\n    - [.putBucketACL(name, acl[, options])](#putbucketaclname-acl-options)\n    - [.getBucketACL(name[, options])](#getbucketaclname-options)\n  - Logging\n    - [.putBucketLogging(name, prefix[, options])](#putbucketloggingname-prefix-options)\n    - [.getBucketLogging(name[, options])](#getbucketloggingname-options)\n    - [.deleteBucketLogging(name[, options])](#deletebucketloggingname-options)\n  - Website\n    - [.putBucketWebsite(name, config[, options])](#putbucketwebsitename-config-options)\n    - [.getBucketWebsite(name[, options])](#getbucketwebsitename-options)\n    - [.deleteBucketWebsite(name, region[, options])](#deletebucketwebsitename-options)\n  - Referer\n    - [.putBucketReferer(name, allowEmpty, referers[, options])](#putbucketreferername-allowempty-referers-options)\n    - [.getBucketReferer(name[, options])](#getbucketreferername-options)\n    - [.deleteBucketReferer(name[, options])](#deletebucketreferername-options)\n  - Lifecycle\n    - [.putBucketLifecycle(name, rules[, options])](#putbucketlifecyclename-rules-options)\n    - [.getBucketLifecycle(name[, options])](#getbucketlifecyclename-options)\n    - [.deleteBucketLifecycle(name[, options])](#deletebucketlifecyclename-options)\n  - CORS\n    - [.putBucketCORS(name, rules[, options])](#putbucketcorsname-rules-options)\n    - [.getBucketCORS(name[, options])](#getbucketcorsname-options)\n    - [.deleteBucketCORS(name[, options])](#deletebucketcorsname-options)\n  - RequestPayment\n    - [.getBucketRequestPayment(bucketName[, options])](#getbucketrequestpaymentbucketname-options)\n    - [.putBucketRequestPayment(bucketName, payer[, options])](#putBucketRequestpaymentbucketname-payer-options)\n  - BucketEncryption\n    - [.putBucketEncryption(name[, rules])](#putbucketencryptionname-rules)\n    - [.getBucketEncryption(name)](#getbucketencryptionname)\n    - [.deleteBucketEncryption(name)](#deletebucketencryptionname)\n  - tagging\n    - [.putBucketTags(name, tag[, options])](#putBucketTagsname-tag-options)\n    - [.getBucketTags(name, [, options])](#getBucketTagsname-options)\n    - [.deleteBucketTags(name, [, options])](#deleteBucketTagsname-options)\n  - policy\n    - [.putBucketPolicy(name, policy[, options])](#putBucketPolicyname-policy-options)\n    - [.getBucketPolicy(name, [, options])](#getBucketPolicyname-options)\n    - [.deleteBucketPolicy(name, [, options])](#deleteBucketPolicyname-options)\n  - versioning\n    - [.getBucketVersioning(name, [, options])](#getBucketVersioningname-options)\n    - [.putBucketVersioning(name, status[, options])](#putBucketVersioningname-status-options)\n  - inventory\n    - [.getBucketInventory(name, inventoryId[, options])](#getBucketInventoryname-inventoryid-options)\n    - [.putBucketInventory(name, inventory[, options])](#putBucketInventoryname-inventory-options)\n    - [.deleteBucketInventory(name, inventoryId[, options])](#deleteBucketInventoryname-inventoryid-options)\n    - [.listBucketInventory(name, [, options])](#listBucketInventoryname-options)\n  - worm\n    - [.abortBucketWorm(name[, options])](#abortBucketWormname-options)\n    - [.completeBucketWorm(name, wormId[, options])](#completeBucketWormname-wormId-options)\n    - [.extendBucketWorm(name, wormId, days[, options])](#extendBucketWormname-wormId-days-options)\n    - [.getBucketWorm(name[, options])](#getBucketWormname-options)\n    - [.initiateBucketWorm(name, days[, options])](#initiateBucketWormname-days-options)\n\n- [Object Operations](#object-operations)\n  - [.list(query[, options])](#listquery-options)\n  - [.listV2(query[, options])](#listV2query-options)\n  - [.getBucketVersions(query[, options])](#getBucketVersionsquery-options)\n  - [.put(name, file[, options])](#putname-file-options)\n  - [.putStream(name, stream[, options])](#putstreamname-stream-options)\n  - [.append(name, file[, options])](#appendname-file-options)\n  - [.getObjectUrl(name[, baseUrl])](#getobjecturlname-baseurl)\n  - [.generateObjectUrl(name[, baseUrl])](#generateobjecturlname-baseurl)\n  - [.head(name[, options])](#headname-options)\n  - [.getObjectMeta(name[, options])](#getobjectmetaname-options)\n  - [.get(name[, file, options])](#getname-file-options)\n  - [.getStream(name[, options])](#getstreamname-options)\n  - [.delete(name[, options])](#deletename-options)\n  - [.copy(name, sourceName[, sourceBucket, options])](#copyname-sourcename-sourcebucket-options)\n  - [.putMeta(name, meta[, options])](#putmetaname-meta-options)\n  - [.deleteMulti(names[, options])](#deletemultinames-options)\n  - [.signatureUrl(name[, options])](#signatureurlname-options)\n  - [.asyncSignatureUrl(name[, options])](#signatureurlname-options)\n  - [.putACL(name, acl[, options])](#putaclname-acl-options)\n  - [.getACL(name[, options])](#getaclname-options)\n  - [.restore(name[, options])](#restorename-options)\n  - [.putSymlink(name, targetName[, options])](#putsymlinkname-targetname-options)\n  - [.getSymlink(name[, options])](#getsymlinkname-options)\n  - [.initMultipartUpload(name[, options])](#initmultipartuploadname-options)\n  - [.uploadPart(name, uploadId, partNo, file, start, end[, options])](#uploadpartname-uploadid-partno-file-start-end-options)\n  - [.uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])](#uploadpartcopyname-uploadid-partno-range-sourcedata-options)\n  - [.completeMultipartUpload(name, uploadId, parts[, options])](#completemultipartuploadname-uploadid-parts-options)\n  - [.multipartUpload(name, file[, options])](#multipartuploadname-file-options)\n  - [.multipartUploadCopy(name, sourceData[, options])](#multipartuploadcopyname-sourcedata-options)\n  - [.listParts(name, uploadId[, query, options])](#listpartsname-uploadid-query-options)\n  - [.listUploads(query[, options])](#listuploadsquery-options)\n  - [.abortMultipartUpload(name, uploadId[, options])](#abortmultipartuploadname-uploadid-options)\n  - [.calculatePostSignature(policy)](#calculatePostSignaturepolicy)\n  - [.getObjectTagging(name, [, options])](#getObjectTaggingname-options)\n  - [.putObjectTagging(name, tag[, options])](#putObjectTaggingname-tag-options)\n  - [.deleteObjectTagging(name, [, options])](#deleteObjectTaggingname-options)\n- [RTMP Operations](#rtmp-operations)\n  - [.putChannel(id, conf[, options])](#putchannelid-conf-options)\n  - [.getChannel(id[, options])](#getchannelid-options)\n  - [.deleteChannel(id[, options])](#deletechannelid-options)\n  - [.putChannelStatus(id, status[, options])](#putchannelstatusid-status-options)\n  - [.getChannelStatus(id[, options])](#getchannelstatusid-options)\n  - [.listChannels(query[, options])](#listchannelsquery-options)\n  - [.getChannelHistory(id[, options])](#getchannelhistoryid-options)\n  - [.createVod(id, name, time[, options])](#createvodid-name-time-options)\n  - [.getRtmpUrl(channelId[, options])](#getrtmpurlchannelid-options)\n- [Create A Image Service Instance](#create-a-image-service-instance)\n  - [oss.ImageClient(options)](#ossimageclientoptions)\n- [Image Operations](#image-operations)\n  - [imgClient.get(name, file[, options])](#imgclientgetname-file-options)\n  - [imgClient.getStream(name[, options])](#imgclientgetstreamname-options)\n  - [imgClient.getExif(name[, options])](#imgclientgetexifname-options)\n  - [imgClient.getInfo(name[, options])](#imgclientgetinfoname-options)\n  - [imgClient.putStyle(name, style[, options])](#imgclientputstylename-style-options)\n  - [imgClient.getStyle(name[, options])](#imgclientgetstylename-options)\n  - [imgClient.listStyle([options])](#imgclientliststyleoptions)\n  - [imgClient.deleteStyle(name[, options])](#imgclientdeletestylename-options)\n  - [imgClient.signatureUrl(name)](#imgclientsignatureurlname)\n- [Known Errors](#known-errors)\n\n## Node Usage\n\n### Compatibility\n\n- Node: >= 8.0.0\n\n### Basic usage\n\n1.install SDK using npm\n\n```\nnpm install ali-oss --save\n```\n\n2.for example:\n\n```js\nconst OSS = require('ali-oss');\nconst store = new OSS({\n  region: '<oss region>',\n  accessKeyId: '<Your accessKeyId>',\n  accessKeySecret: '<Your accessKeySecret>',\n  bucket: '<Your bucket name>'\n});\n```\n\n## Browser Usage\n\nYou can use most of the functionalities of `ali-oss` in browser with\nsome exceptions:\n\n- put object with streaming: no chunked encoding, we use multipart\n  upload instead\n- get object to local file: we cannot manipulate file system in\n  browser, we provide signed object url for downloading needs\n- bucket operations(listBuckets, putBucketLogging, etc) will fail: OSS\n  server currently do not support CORS requests for bucket operations\n  (will probably be fixed later)\n\n### Compatibility\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n  > Note: Because some browsers do not support promises, you need to introduce promise compatible libraries.<br>\n  > For example: IE10 and IE11 need to introduce a promise-polyfill.\n\n### Setup\n\n#### Bucket setup\n\nAs browser-side javascript involves CORS operations. You need to setup\nyour bucket CORS rules to allow CORS operations:\n\n- set allowed origins to '\\*'\n- allowed methods to 'PUT, GET, POST, DELETE, HEAD'\n- set allowed headers to '\\*'\n- expose 'ETag' in expose headers\n\n#### STS setup\n\nAs we don't want to expose the accessKeyId/accessKeySecret in the\nbrowser, a [common practice][oss-sts] is to use STS to grant temporary\naccess.\n\n### Basic usage\n\nInclude the sdk lib in the `<script>` tag and you have `OSS` available\nfor creating client.\n\n```html\n// x.x.x The specific version number represented // we recommend introducing offline resources, because the usability of\nonline resources depends on the stability of the cdn server.\n<!-- Introducing online resources -->\n<script src=\"http://gosspublic.alicdn.com/aliyun-oss-sdk-x.x.x.min.js\"></script>\n<!-- Introducing offline resources -->\n<script src=\"./aliyun-oss-sdk-x.x.x.min.js\"></script>\n\n<script type=\"text/javascript\">\n  const store = new OSS({\n    region: 'oss-cn-hangzhou',\n    accessKeyId: '<access-key-id>',\n    accessKeySecret: '<access-key-secret>',\n    bucket: '<bucket-name>',\n    stsToken: '<security-token>'\n  });\n\n  store\n    .list()\n    .then(result => {\n      console.log('objects: %j', result.objects);\n      return store.put('my-obj', new OSS.Buffer('hello world'));\n    })\n    .then(result => {\n      console.log('put result: %j', result);\n      return store.get('my-obj');\n    })\n    .then(result => {\n      console.log('get result: %j', result.content.toString());\n    });\n</script>\n```\n\nThe full sample can be found [here][browser-sample].\n\n### How to build\n\n```bash\nnpm run build-dist\n```\n\nAnd see the build artifacts under `dist/`.\n\n## Data Regions\n\n[OSS current data regions](https://help.aliyun.com/document_detail/31837.html).\n\n| region             | country   | city           | endpoint                        | internal endpoint                        |\n| ------------------ | --------- | -------------- | ------------------------------- | ---------------------------------------- |\n| oss-cn-hangzhou    | China     | HangZhou       | oss-cn-hangzhou.aliyuncs.com    | oss-cn-hangzhou-internal.aliyuncs.com    |\n| oss-cn-shanghai    | China     | ShangHai       | oss-cn-shanghai.aliyuncs.com    | oss-cn-shanghai-internal.aliyuncs.com    |\n| oss-cn-qingdao     | China     | QingDao        | oss-cn-qingdao.aliyuncs.com     | oss-cn-qingdao-internal.aliyuncs.com     |\n| oss-cn-beijing     | China     | BeiJing        | oss-cn-beijing.aliyuncs.com     | oss-cn-beijing-internal.aliyuncs.com     |\n| oss-cn-shenzhen    | China     | ShenZhen       | oss-cn-shenzhen.aliyuncs.com    | oss-cn-shenzhen-internal.aliyuncs.com    |\n| oss-cn-hongkong    | China     | HongKong       | oss-cn-hongkong.aliyuncs.com    | oss-cn-hongkong-internal.aliyuncs.com    |\n| oss-us-west-1      | US        | Silicon Valley | oss-us-west-1.aliyuncs.com      | oss-us-west-1-internal.aliyuncs.com      |\n| oss-ap-southeast-1 | Singapore | Singapore      | oss-ap-southeast-1.aliyuncs.com | oss-ap-southeast-1-internal.aliyuncs.com |\n\n## Create Account\n\nGo to [OSS website](http://www.aliyun.com/product/oss/?lang=en), create a new account for new user.\n\nAfter account created, you can create the OSS instance and get the `accessKeyId` and `accessKeySecret`.\n\n## Create A Bucket Instance\n\nEach OSS instance required `accessKeyId`, `accessKeySecret` and `bucket`.\n\n## oss(options)\n\nCreate a Bucket store instance.\n\noptions:\n\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- [stsToken] {String} used by temporary authorization, detail [see](https://www.alibabacloud.com/help/doc-detail/32077.htm)\n- [refreshSTSToken] {Function} used by auto set `stsToken`、`accessKeyId`、`accessKeySecret` when sts info expires. return value must be object contains `stsToken`、`accessKeyId`、`accessKeySecret`\n- [refreshSTSTokenInterval] {number} use time (ms) of refresh STSToken interval it should be less than sts info expire interval, default is 300000ms(5min)\n- [bucket] {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [endpoint] {String} oss region domain. It takes priority over `region`. Set as extranet domain name, intranet domain name, accelerated domain name, etc. according to different needs. please see [endpoints](https://www.alibabacloud.com/help/doc-detail/31837.htm)\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`.\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`.\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [secure] {Boolean} instruct OSS client to use HTTPS (secure: true) or HTTP (secure: false) protocol.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`.\n- [cname] {Boolean}, default false, access oss with custom domain name. if true, you can fill `endpoint` field with your custom domain name,\n- [isRequestPay] {Boolean}, default false, whether request payer function of the bucket is open, if true, will send headers `'x-oss-request-payer': 'requester'` to oss server.\n  the details you can see [requestPay](https://help.aliyun.com/document_detail/91337.htm)\n- [useFetch] {Boolean}, default false, it just work in Browser, if true,it means upload object with\n  `fetch` mode ,else `XMLHttpRequest`\n- [enableProxy] {Boolean}, Enable proxy request, default is false.\n- [proxy] {String | Object}, proxy agent uri or options, default is null.\n- [retryMax] {Number}, used by auto retry send request count when request error is net error or timeout. **_NOTE:_** Not support `put` with stream, `putStream`, `append` with stream because the stream can only be consumed once\n- [maxSockets] {Number} Maximum number of sockets to allow per host. Default is infinity\n\nexample:\n\n1. basic usage\n\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\n```\n\n2. use accelerate endpoint\n\n- Global accelerate endpoint: oss-accelerate.aliyuncs.com\n- Accelerate endpoint of regions outside mainland China: oss-accelerate-overseas.aliyuncs.com\n\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  endpoint: 'oss-accelerate.aliyuncs.com'\n});\n```\n\n3. use custom domain\n\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  cname: true,\n  endpoint: 'your custome domain'\n});\n```\n\n4. use STS and refreshSTSToken\n\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your STS key',\n  accessKeySecret: 'your STS secret',\n  stsToken: 'your STS token',\n  refreshSTSToken: async () => {\n    const info = await fetch('you sts server');\n    return {\n      accessKeyId: info.accessKeyId,\n      accessKeySecret: info.accessKeySecret,\n      stsToken: info.stsToken\n    };\n  },\n  refreshSTSTokenInterval: 300000\n});\n```\n\n5. retry request with stream\n\n```js\nfor (let i = 0; i <= store.options.retryMax; i++) {\n  try {\n    const result = await store.putStream('<example-object>', fs.createReadStream('<example-path>'));\n    console.log(result);\n    break; // break if success\n  } catch (e) {\n    console.log(e);\n  }\n}\n```\n\n## Bucket Operations\n\n### .listBuckets(query[, options])\n\nList buckets in this account.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search buckets using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [max-keys] {String|Number} max buckets, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return buckets list on `buckets` properties.\n\n- buckets {Array<BucketMeta>} bucket meta info list\n  Each `BucketMeta` will contains blow properties:\n  - name {String} bucket name\n  - region {String} bucket store data region, e.g.: `oss-cn-hangzhou-a`\n  - creationDate {String} bucket create GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - storageClass {String} e.g.: `Standard`, `IA`, `Archive`\n- owner {Object} object owner, including `id` and `displayName`\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 buckets\n\n```js\nstore\n  .listBuckets({\n    'max-keys': 10\n  })\n  .then(result => {\n    console.log(result);\n  });\n```\n\n### .putBucket(name[, options])\n\nCreate a new bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket exists and not belong to current account, will throw BucketAlreadyExistsError.\n  If bucket not exists, will create a new bucket and set it's ACL.\n- [options] {Object} optional parameters\n  - [acl] {String} include `private`,`public-read`,`public-read-write`\n  - [storageClass] {String} the storage type include (Standard,IA,Archive)\n  - [dataRedundancyType] {String} default `LRS`, include `LRS`,`ZRS`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the bucket name on `bucket` properties.\n\n- bucket {String} bucket name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Create a bucket name `helloworld` location on HongKong\n\n```js\nstore.putBucket('helloworld').then(result => {\n  // use it by default\n  store.useBucket('helloworld');\n});\n```\n\n- Create a bucket name `helloworld` location on HongKong StorageClass `Archive`\n\n```js\nawait store.putBucket('helloworld', { StorageClass: 'Archive' });\n// use it by default\nstore.useBucket('helloworld');\n```\n\n### .deleteBucket(name[, options])\n\nDelete an empty bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket is not empty, will throw BucketNotEmptyError.\n  If bucket is not exists, will throw NoSuchBucketError.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete the exists 'helloworld' bucket on 'oss-cn-hongkong'\n\n```js\nstore.deleteBucket('helloworld').then(result => {});\n```\n\n### .useBucket(name)\n\nUse the bucket.\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.useBucket('helloworld');\n```\n\n### .getBucketInfo(name)\n\nGet bucket information,include CreationDate、ExtranetEndpoint、IntranetEndpoint、Location、Name、StorageClass、\nOwner、AccessControlList、Versioning\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketInfo('helloworld').then(res => {\n  console.log(res.bucket);\n});\n```\n\n### .getBucketStat(name)\n\nCall the GetBucketStat interface to get the storage capacity of the specified storage space (Bucket) and the number of files (Object).\n\nCalling this interface requires the oss:GetBucketStat permission.\nThe data obtained by calling this interface is not real-time data and may be delayed for more than an hour.\nThe point in time of the stored information obtained by calling this interface is not guaranteed to be up-to-date, i.e. the LastModifiedTime field returned by a later call to this interface may be smaller than the LastModifiedTime field returned by a previous call to this interface.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- stat {Object} container for the BucketStat structure:\n\n  - Storage {String} the total storage capacity of the Bucket, in bytes.\n  - ObjectCount {String} total number of Objects in the Bucket。\n  - MultipartUploadCount {String} the number of Multipart Uploads in the Bucket that have been initialized but not yet completed (Complete) or not yet aborted (Abort).\n  - LiveChannelCount {String} the number of Live Channels in the Bucket.\n  - LastModifiedTime {String} the point in time, in timestamps, when the storage information was retrieved.\n  - StandardStorage {String} the amount of storage of the standard storage type, in bytes.\n  - StandardObjectCount {String} the number of objects of the standard storage type.\n  - InfrequentAccessStorage {String} the amount of billed storage for the low-frequency storage type, in bytes.\n  - InfrequentAccessRealStorage {String} the actual storage amount of the low-frequency storage type, in bytes.\n  - InfrequentAccessObjectCount {String} the number of Objects of the low-frequency storage type.\n  - ArchiveStorage {String} the amount of billed storage for the archive storage type, in bytes.\n  - ArchiveRealStorage {String} the actual storage amount of the archive storage type, in bytes.\n  - ArchiveObjectCount {String} the number of objects of the archive storage type.\n  - ColdArchiveStorage {String} the amount of billed storage for the cold archive storage type, in bytes.\n  - ColdArchiveRealStorage {String} the actual storage amount in bytes for the cold archive storage type.\n  - ColdArchiveObjectCount {String} the number of objects of the cold archive storage type.\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- If you don't fill in the name, the default is the bucket defined during initialization.\n\n```js\nstore.getBucketStat().then(res => console.log(res));\n```\n\n### .getBucketLocation(name)\n\nGet bucket location\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketLocation('helloworld').then(res => {\n  console.log(res.location);\n});\n```\n\n---\n\n### .putBucketACL(name, acl[, options])\n\nUpdate the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- acl {String} access control list, current available: `public-read-write`, `public-read` and `private`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set bucket `helloworld` to `public-read-write`\n\n```js\nstore.putBucketACL('helloworld', 'public-read-write').then(result => {});\n```\n\n### .getBucketACL(name[, options])\n\nGet the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld`\n\n```js\nstore.getBucketACL('helloworld').then(result => {\n  console.log(result.acl);\n});\n```\n\n---\n\n### .putBucketLogging(name, prefix[, options])\n\nUpdate the bucket logging settings.\nLog file will create every one hour and name format: `<prefix><bucket>-YYYY-mm-DD-HH-MM-SS-UniqueString`.\n\nparameters:\n\n- name {String} bucket name\n- [prefix] {String} prefix path name to store the log files\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Enable bucket `helloworld` logging and save with prefix `logs/`\n\n```js\nstore.putBucketLogging('helloworld', 'logs/').then(result => {});\n```\n\n### .getBucketLogging(name[, options])\n\nGet the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- enable {Boolean} enable logging or not\n- prefix {String} prefix path name to store the log files, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld` logging settings\n\n```js\nstore.getBucketLogging('helloworld').then(result => {\n  console.log(result.enable, result.prefix);\n});\n```\n\n### .deleteBucketLogging(name[, options])\n\nDelete the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketWebsite(name, config[, options])\n\nSet the bucket as a static website.\n\nparameters:\n\n- name {String} bucket name\n- config {Object} website config, contains blow properties:\n  - index {String} default page, e.g.: `index.html`\n  - [error] {String} error page, e.g.: 'error.html'\n  - [supportSubDir] {String} default vaule false\n  - [type] {String} default value 0\n  - [routingRules] {Array} RoutingRules\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore\n  .putBucketWebsite('hello', {\n    index: 'index.html'\n  })\n  .then(result => {});\n```\n\n### .getBucketWebsite(name[, options])\n\nGet the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- index {String} index page\n- error {String} error page, maybe `null`\n- supportSubDir {String}\n- type {String}\n- routingRules {Array}\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketWebsite(name[, options])\n\nDelete the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketReferer(name, allowEmpty, referers[, options])\n\nSet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list, e.g.:\n  ```js\n  ['https://npm.taobao.org', 'http://cnpmjs.org'];\n  ```\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketReferer('hello', false, ['https://npm.taobao.org', 'http://cnpmjs.org']).then(result => {});\n```\n\n### .getBucketReferer(name[, options])\n\nGet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketReferer(name[, options])\n\nDelete the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketLifecycle(name, rules[, options])\n\nSet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains blow properties:\n  - [id] {String} rule id, if not set, OSS will auto create it with random string.\n  - prefix {String} store prefix\n  - status {String} rule status, allow values: `Enabled` or `Disabled`\n  - [expiration] {Object} specifies the expiration attribute of the lifecycle rules for the object.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    - [expiredObjectDeleteMarker] {String} value `true`\n      `createdBeforeDate` and `days` and `expiredObjectDeleteMarker` must have one.\n  - [abortMultipartUpload] {Object} Specifies the expiration attribute of the multipart upload tasks that are not complete.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n      `createdBeforeDate` and `days` must have one.\n  - [transition] {Object} Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle.\n    - storageClass {String} Specifies the storage class that objects that conform to the rule are converted into. allow values: `IA` or `Archive`\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n      `createdBeforeDate` and `days` must have one.\n  - [noncurrentVersionTransition] {Object} Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle.\n    - storageClass {String} Specifies the storage class that history objects that conform to the rule are converted into. allow values: `IA` or `Archive`\n    - noncurrentDays {String} expire after the `noncurrentDays`\n      `expiration`、 `abortMultipartUpload`、 `transition`、 `noncurrentVersionTransition` must have one.\n  - [noncurrentVersionExpiration] {Object} specifies the expiration attribute of the lifecycle rules for the history object.\n    - noncurrentDays {String} expire after the `noncurrentDays`\n  - [tag] {Object} Specifies the object tag applicable to a rule. Multiple tags are supported.\n    - key {String} Indicates the tag key.\n    - value {String} Indicates the tag value.\n      `tag` cannot be used with `abortMultipartUpload`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore\n  .putBucketLifecycle('hello', [\n    {\n      id: 'delete after one day',\n      prefix: 'logs/',\n      status: 'Enabled',\n      days: 1\n    },\n    {\n      prefix: 'logs2/',\n      status: 'Disabled',\n      date: '2022-10-11T00:00:00.000Z'\n    }\n  ])\n  .then(result => {});\n```\n\nexample: for history with noncurrentVersionExpiration\n\n```js\nconst result = await store.putBucketLifecycle(bucket, [\n  {\n    id: 'expiration1',\n    prefix: 'logs/',\n    status: 'Enabled',\n    expiration: {\n      days: '1'\n    },\n    noncurrentVersionExpiration: {\n      noncurrentDays: '1'\n    }\n  }\n]);\nconsole.log(result);\n```\n\nexample: for history with expiredObjectDeleteMarker\n\n```js\nconst result = await store.putBucketLifecycle(bucket, [\n  {\n    id: 'expiration1',\n    prefix: 'logs/',\n    status: 'Enabled',\n    expiration: {\n      expiredObjectDeleteMarker: 'true'\n    },\n    noncurrentVersionExpiration: {\n      noncurrentDays: '1'\n    }\n  }\n]);\nconsole.log(result);\n```\n\nexample: for history with noncurrentVersionTransition\n\n```js\nconst result = await store.putBucketLifecycle(bucket, [\n  {\n    id: 'expiration1',\n    prefix: 'logs/',\n    status: 'Enabled',\n    noncurrentVersionTransition: {\n      noncurrentDays: '10',\n      storageClass: 'IA'\n    }\n  }\n]);\nconsole.log(result);\n```\n\n### .getBucketLifecycle(name[, options])\n\nGet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the lifecycle rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketLifecycle(name[, options])\n\nDelete the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketCORS(name, rules[, options])\n\nSet CORS rules of the bucket object\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains below properties:\n  - allowedOrigin {String/Array} configure for Access-Control-Allow-Origin header\n  - allowedMethod {String/Array} configure for Access-Control-Allow-Methods header\n  - [allowedHeader] {String/Array} configure for Access-Control-Allow-Headers header\n  - [exposeHeader] {String/Array} configure for Access-Control-Expose-Headers header\n  - [maxAgeSeconds] {String} configure for Access-Control-Max-Age header\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore\n  .putBucketCORS('hello', [\n    {\n      allowedOrigin: '*',\n      allowedMethod: ['GET', 'HEAD']\n    }\n  ])\n  .then(result => {});\n```\n\n### .getBucketCORS(name[, options])\n\nGet CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the CORS rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketCORS(name[, options])\n\nDelete CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .getBucketRequestPayment(bucketName[, options])\n\nget RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String} bucket name\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- payer {String} payer, BucketOwner or Requester\n- res {Object} response info, including\n  - data {Buffer} xml\n\n---\n\n### .putBucketRequestPayment(bucketName, payer[, options])\n\nput RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String}\n- payer {String} payer\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketEncryption(name, rules)\n\nput BucketEncryption value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [rules] {Object} parameters\n  - SSEAlgorithm {String} encryption type, expect AES256 or KMS\n  - {KMSMasterKeyID} {String} needed when encryption type is KMS\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketEncryption(name)\n\nget BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n- encryption {Object} rules\n  - SSEAlgorithm {String} encryption type, AES256 or KMS\n  - {KMSMasterKeyID} {String} will be return when encryption type is KMS\n\n---\n\n### .deleteBucketEncryption(name)\n\ndelete BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketTags(name, tag[, options])\n\nAdds tags for a bucket or modify the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketTags(name[, options])\n\nObtains the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- tag {Object} the tag of object\n- res {Object} response info\n\n---\n\n### .deleteBucketTags(name[, options])\n\nDeletes the tags added for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketPolicy(name, policy[, options])\n\nAdds or modify policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- policy {Object} bucket policy\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\nexample:\n\n```js\nconst policy = {\n  Version: '1',\n  Statement: [\n    {\n      Action: ['oss:PutObject', 'oss:GetObject'],\n      Effect: 'Deny',\n      Principal: ['1234567890'],\n      Resource: ['acs:oss:*:1234567890:*/*']\n    }\n  ]\n};\nconst result = await store.putBucketPolicy(bucket, policy);\nconsole.log(result);\n```\n\n---\n\n### .getBucketPolicy(name[, options])\n\nObtains the policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- policy {Object} the policy of bucket, if not exist, the value is null\n- res {Object} response info\n- status {Number} response status\n\n---\n\n### .deleteBucketPolicy(name[, options])\n\nDeletes the policy added for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketVersioning(name[, options])\n\nObtains the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- versionStatus {String | undefined} version status, `Suspended` or `Enabled`. default value: `undefined`\n- res {Object} response info\n\n---\n\n### .putBucketVersioning(name, status[, options])\n\nset the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- status {String} version status, allow values: `Enabled` or `Suspended`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketInventory(name, inventoryId[, options])\n\nget bucket inventory by inventory-id\n\nparameters:\n\n- name {String} the bucket name\n- inventoryId {String} inventory-id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- inventory {Inventory}\n- status {Number} response status\n- res {Object} response info\n\n```js\nasync function getBucketInventoryById() {\n  try {\n    const result = await store.getBucketInventory('bucket', 'inventoryid');\n    console.log(result.inventory);\n  } catch (err) {\n    console.log(err);\n  }\n}\n\ngetBucketInventoryById();\n```\n\n### putBucketInventory(name, inventory[, options])\n\nset bucket inventory\n\nparameters:\n\n- name {String} the bucket name\n- inventory {Inventory} inventory config\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n```ts\ntype Field = 'Size | LastModifiedDate | ETag | StorageClass | IsMultipartUploaded | EncryptionStatus';\ninterface Inventory {\n  id: string;\n  isEnabled: true | false;\n  prefix?: string;\n  OSSBucketDestination: {\n    format: 'CSV';\n    accountId: string;\n    rolename: string;\n    bucket: string;\n    prefix?: string;\n    encryption?:\n      | { 'SSE-OSS': '' }\n      | {\n          'SSE-KMS': {\n            keyId: string;\n          };\n        };\n  };\n  frequency: 'Daily' | 'Weekly';\n  includedObjectVersions: 'Current' | 'All';\n  optionalFields?: {\n    field?: Field[];\n  };\n}\n```\n\n```js\nconst inventory = {\n  id: 'default',\n  isEnabled: false, // `true` | `false`\n  prefix: 'ttt', // filter prefix\n  OSSBucketDestination: {\n    format: 'CSV',\n    accountId: '1817184078010220',\n    rolename: 'AliyunOSSRole',\n    bucket: 'your bucket',\n    prefix: 'test'\n    //encryption: {'SSE-OSS': ''},\n    /*\n      encryption: {\n      'SSE-KMS': {\n        keyId: 'test-kms-id';\n      };,\n    */\n  },\n  frequency: 'Daily', // `WEEKLY` | `Daily`\n  includedObjectVersions: 'All', // `All` | `Current`\n  optionalFields: {\n    field: ['Size', 'LastModifiedDate', 'ETag', 'StorageClass', 'IsMultipartUploaded', 'EncryptionStatus']\n  }\n};\n\nasync function putInventory() {\n  const bucket = 'Your Bucket Name';\n  try {\n    await store.putBucketInventory(bucket, inventory);\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nputInventory();\n```\n\n### deleteBucketInventory(name, inventoryId[, options])\n\ndelete bucket inventory by inventory-id\n\nparameters:\n\n- name {String} the bucket name\n- inventoryId {String} inventory-id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n### listBucketInventory(name[, options])\n\nlist bucket inventory\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n  - continuationToken used by search next page\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\nexample:\n\n```js\nasync function listBucketInventory() {\n  const bucket = 'Your Bucket Name';\n  let nextContinuationToken;\n  // list all inventory of the bucket\n  do {\n    const result = await store.listBucketInventory(bucket, nextContinuationToken);\n    console.log(result.inventoryList);\n    nextContinuationToken = result.nextContinuationToken;\n  } while (nextContinuationToken);\n}\n\nlistBucketInventory();\n```\n\n### .abortBucketWorm(name[, options])\n\nused to delete an unlocked retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .completeBucketWorm(name, wormId[, options])\n\nused to lock a retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- wormId {String} worm id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .extendBucketWorm(name, wormId, days[, options])\n\nused to extend the retention period of objects in a bucket whose retention policy is locked.\n\nparameters:\n\n- name {String} the bucket name\n- wormId {String} worm id\n- days {String | Number} retention days\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketWorm(name[, options])\n\nused to query the retention policy information of the specified bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- wormId {String} worm id\n- state {String} `Locked` or `InProgress`\n- days {String} retention days\n- creationDate {String}\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .initiateBucketWorm(name, days[, options])\n\ncreate a retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- days {String | Number}} set retention days\n- [options] {Object} optional args\n\nSuccess will return:\n\n- wormId {String} worm id\n- status {Number} response status\n- res {Object} response info\n\n---\n\n## Object Operations\n\nAll operations function return Promise, except `signatureUrl`.\n\n### .put(name, file[, options])\n\nAdd an object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream|File(only support Browser)|Blob(only support Browser)} object local path, content buffer or ReadStream content instance use in Node, Blob and html5 File\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, `key=${key}&etag=${etag}&my_var=${x:my_var}`.\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n      e.g.:\n      ```js\n      var customValue = { var1: 'value1', var2: 'value2' };\n      ```\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - See more: [PutObject](https://help.aliyun.com/document_detail/31978.html#title-yxe-96d-x61)\n  - [disabledMD5] {Boolean} default true, it just work in Browser. if false,it means that MD5 is automatically calculated for uploaded files. **_NOTE:_** Synchronous computing tasks will block the main process\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- data {Object} callback server response data, sdk use JSON.parse() return\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through local file path\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/demo.txt', filepath).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/demo.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829244'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through content buffer\n\n```js\nstore.put('ossdemo/buffer', Buffer.from('foo content')).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/buffer',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/buffer',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"xxx\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829243'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .putStream(name, stream[, options])\n\nAdd a stream object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- stream {ReadStream} object ReadStream content instance\n- [options] {Object} optional parameters\n  - [contentLength] {Number} the stream length, `chunked encoding` will be used if absent\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=${key}&etag=${etag}&my_var=${x:my_var}.\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n      e.g.:\n      ```js\n      var customValue = { var1: 'value1', var2: 'value2' };\n      ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.putStream('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .append(name, file[, options])\n\nAppend an object to the bucket, it's almost same as put, but it can add content to existing object rather than override it.\n\nAll parameters are same as put except for options.position\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [position] {String} specify the position which is the content length of the latest object\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n\nobject:\n\n- name {String} object name\n- url {String} the url of oss\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- nextAppendPosition {String} the next position（The browser needs to set cross domain and expose the x-oss-next-append-position header）\n\nexample:\n\n```js\nlet object = await store.append('ossdemo/buffer', Buffer.from('foo'));\n\n// append content to the existing object\nobject = await store.append('ossdemo/buffer', Buffer.from('bar'), {\n  position: object.nextAppendPosition\n});\n```\n\n### .getObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `endpoint`.\n\ne.g.:\n\n```js\nconst cdnUrl = store.getObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .generateObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `bucket and endpoint `.\nSuggest use generateObjectUrl instead of getObjectUrl.\n\ne.g.:\n\n```js\nconst url = store.generateObjectUrl('foo/bar.jpg');\n// cdnUrl should be `https://${bucketname}.${endpotint}foo/bar.jpg`\n\nconst cdnUrl = store.generateObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .head(name[, options])\n\nHead an object and get the meta info.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n      otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n      otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n      otherwise return 304 not modified\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status, maybe 200 or 304\n- meta {Object} object user meta, if not set on `put()`, will return null.\n  If return status 304, meta will be null too\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-version-id] return in multiversion\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Head an exists object and get user meta\n\n```js\nawait this.store.put('ossdemo/head-meta', Buffer.from('foo'), {\n  meta: {\n    uid: 1,\n    path: 'foo/demo.txt'\n  }\n});\nconst object = await this.store.head('ossdemo/head-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  meta: {\n    uid: '1',\n    path: 'foo/demo.txt'\n  },\n  res: { ... }\n}\n```\n\n- Head a not exists object\n\n```js\nconst object = await this.store.head('ossdemo/head-meta');\n// will throw NoSuchKeyError\n```\n\n### .getObjectMeta(name[, options])\n\nGet an object meta info include ETag、Size、LastModified and so on, not return object content.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info, including\n  - headers {Object} response headers\n\nexample:\n\n- Head an exists object and get object meta info\n\n```js\nawait this.store.put('ossdemo/object-meta', Buffer.from('foo'));\nconst object = await this.store.getObjectMeta('ossdemo/object-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  res: { ... }\n}\n```\n\n### .get(name[, file, options])\n\nGet an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the content\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [versionId] {String} the version id of history object\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [responseCacheControl] {String} default `no-cache`, (only support Browser). response-cache-control, will response with HTTP Header `Cache-Control`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Range' get specifying range bytes content, e.g.: `Range: bytes=0-9`\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n      otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n      otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n      otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/demo.txt', filepath);\n```\n\n\\_ Store object to a writestream\n\n```js\nawait store.get('ossdemo/demo.txt', somestream);\n```\n\n- Get an object content buffer\n\n```js\nconst result = await store.get('ossdemo/demo.txt');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a processed image and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.png';\nawait store.get('ossdemo/demo.png', filepath, { process: 'image/resize,w_200' });\n```\n\n- Get a not exists object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/not-exists-demo.txt', filepath);\n// will throw NoSuchKeyError\n```\n\n- Get a historic version object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nconst versionId = 'versionId string';\nawait store.get('ossdemo/not-exists-demo.txt', filepath, {\n  versionId\n});\n```\n\n### .getStream(name[, options])\n\nGet an object read stream.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n      otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n      otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n      otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance. If response status is not `200`, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object stream\n\n```js\nconst result = await store.getStream('ossdemo/demo.txt');\nresult.stream.pipe(fs.createWriteStream('some file.txt'));\n```\n\n### .delete(name[, options])\n\nDelete an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf delete object not exists, will also delete success.\n\nexample:\n\n- Delete an exists object\n\n```js\nawait store.delete('ossdemo/someobject');\n```\n\n- Delete a not exists object\n\n```js\nawait store.delete('ossdemo/some-not-exists-object');\n```\n\n- Delete a history object or deleteMarker\n\n```js\nconst versionId = 'versionId';\nawait store.delete('ossdemo/some-not-exists-object', { versionId });\n```\n\n### .copy(name, sourceName[, sourceBucket, options])\n\nCopy an object from `sourceName` to `name`.\n\nparameters:\n\n- name {String} object name store on OSS\n- sourceName {String} source object name\n- [sourceBucket] {String} source Bucket. if doesn't exist，`sourceBucket` is same bucket.\n- [options] {Object} optional parameters\n  - [versionId] {String} the version id of history object\n  - [timeout] {Number} the operation timeout\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n    If the `meta` set, will override the source object meta.\n  - [headers] {Object} extra headers\n    - 'If-Match' do copy if source object etag equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' do copy if source object etag not equal this,\n      otherwise throw PreconditionFailedError\n    - 'If-Modified-Since' do copy if source object modified after this time,\n      otherwise throw PreconditionFailedError\n    - 'If-Unmodified-Since' do copy if source object modified before this time,\n      otherwise throw PreconditionFailedError\n    - See more: [CopyObject](https://help.aliyun.com/document_detail/31979.html?#title-tzy-vxc-ncx)\n\nSuccess will return the copy result in `data` property.\n\nobject:\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT string\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf source object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Copy same bucket object\n\n```js\nstore.copy('newName', 'oldName').then(result => {\n  console.log(result);\n});\n```\n\n- Copy other bucket object\n\n```js\nstore.copy('logo.png', 'logo.png', 'other-bucket').then(result => {\n  console.log(result);\n});\n```\n\n- Copy historic object\n\n```js\nconst versionId = 'your verisonId';\nstore.copy('logo.png', 'logo.png', 'other-bucket', { versionId }).then(result => {\n  console.log(result);\n});\n```\n\n### .putMeta(name, meta[, options])\n\nSet an exists object meta.\n\nparameters:\n\n- name {String} object name store on OSS\n- meta {Object} user meta, will send with `x-oss-meta-` prefix string\n  e.g.: `{ uid: 123, pid: 110 }`\n  If `meta: null`, will clean up the exists meta\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the putMeta result in `data` property.\n\n- data {Object} copy result\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Update exists object meta\n\n```js\nconst result = await store.putMeta('ossdemo.txt', {\n  uid: 1,\n  pid: 'p123'\n});\nconsole.log(result);\n```\n\n- Clean up object meta\n\n```js\nawait store.putMeta('ossdemo.txt', null);\n```\n\n### .deleteMulti(names[, options])\n\nDelete multi objects in one request.\n\nparameters:\n\n- names {Array<Object>} object names, max 1000 objects in once.\n  - key {String} object name\n  - [versionId] {String} the version id of history object or deleteMarker\n- [options] {Object} optional parameters\n  - [quiet] {Boolean} quiet mode or verbose mode, default is `false`, verbose mode\n    quiet mode: if all objects delete succes, return emtpy response.\n    otherwise return delete error object results.\n    verbose mode: return all object delete results.\n  - [timeout] {Number} the operation timeout\n\nSuccess will return delete success objects in `deleted` property.\n\n- [deleted] {Array<Object>} deleted object or deleteMarker info list\n  - [Key] {String} object name\n  - [VersionId] {String} object versionId\n  - [DeleteMarker] {String} generate or delete marker\n  - [DeleteMarkerVersionId] {String} marker versionId\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete multi objects in quiet mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3'], {\n  quiet: true\n});\n```\n\n- Delete multi objects in verbose mode\n\n```js\nconst result = await store.deleteMulti(['obj1', 'obj2', 'obj3']);\n```\n\n- Delete multi objects in multiversion\n\n```js\nconst obj1 = {\n  key: 'key1',\n  versionId: 'versionId1'\n};\nconst obj2 = {\n  key: 'key2',\n  versionId: 'versionId2'\n};\nconst result = await store.deleteMulti([obj1, obj2]);\n```\n\n### .list(query[, options])\n\nList objects in the bucket.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n  - name {String} object name on oss\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n  - type {String} object type, e.g.: `Normal`\n  - size {Number} object size, e.g.: `344606`\n  - storageClass {String} storage class type, e.g.: `Standard`\n  - owner {Object} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 objects\n\n```js\nconst result = await store.list();\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nconst result = await store.list({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nconst result = await store.list({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n### .listV2(query[, options])\n\nList objects in the bucket.(recommended)\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [continuation-token] (continuationToken) {String} search start from `continuationToken`, including `continuationToken` key\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [max-keys] {String|Number} max objects, default is `100`, limit to `1000`\n  - [start-after] {String} specifies the Start-after value from which to start the list. The names of objects are returned in alphabetical order.\n  - [fetch-owner] {Boolean} specifies whether to include the owner information in the response.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n  - name {String} object name on oss\n  - url {String} resource url\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n  - type {String} object type, e.g.: `Normal`\n  - size {Number} object size, e.g.: `344606`\n  - storageClass {String} storage class type, e.g.: `Standard`\n  - owner {Object|null} object owner, including `id` and `displayName`\n- prefixes {Array<String>} prefix list\n- isTruncated {Boolean} truncate or not\n- nextContinuationToken {String} next continuation-token string\n- keyCount {Number} The number of keys returned for this request. If Delimiter is specified, KeyCount is the sum of the elements in Key and CommonPrefixes.\n- res {Object} response info, including\n\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n- List top 10 objects\n\n```js\nconst result = await store.listV2({\n  'max-keys': 10\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir including subdirs objects\n\n```js\nconst result = await store.listV2({\n  prefix: 'fun/'\n});\nconsole.log(result.objects);\n```\n\n- List `fun/` dir objects, not including subdirs\n\n```js\nconst result = await store.listV2({\n  prefix: 'fun/',\n  delimiter: '/'\n});\nconsole.log(result.objects);\n```\n\n- List `a/` dir objects, after `a/b` and not include `a/b`\n\n```js\nconst result = await store.listV2({\n  delimiter: '/',\n  prefix: 'a/',\n  'start-after': 'a/b'\n});\nconsole.log(result.objects);\n```\n\n### .getBucketVersions(query[, options])\n\nList the version information of all objects in the bucket, including the delete marker (Delete Marker).\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search object using `prefix` key\n  - [versionIdMarker] {String} set the result to return from the version ID marker of the key marker object and sort by the versions\n  - [keyMarker] {String} search start from `keyMarker`, including `keyMarker` key\n  - [encodingType] {String} specifies that the returned content is encoded, and specifies the type of encoding\n  - [delimiter] {String} delimiter search scope\n    e.g. `/` only search current dir, not including subdir\n  - [maxKeys] {String|Number} max objects, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return objects list on `objects` properties.\n\n- objects {Array<ObjectMeta>} object meta info list\n  Each `ObjectMeta` will contains blow properties:\n  - name {String} object name on oss\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - etag {String} object etag contains `\"`, e.g.: `\"5B3C1A2E053D763E1B002CC607C5A0FE\"`\n  - type {String} object type, e.g.: `Normal`\n  - size {Number} object size, e.g.: `344606`\n  - isLatest {Boolean}\n  - versionId {String} object versionId\n  - storageClass {String} storage class type, e.g.: `Standard`\n  - owner {Object} object owner, including `id` and `displayName`\n- deleteMarker {Array<ObjectDeleteMarker>} object delete marker info list\n  Each `ObjectDeleteMarker`\n  - name {String} object name on oss\n  - lastModified {String} object last modified GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - versionId {String} object versionId\n- isTruncated {Boolean} truncate or not\n- nextKeyMarker (nextMarker) {String} next marker string\n- nextVersionIdMarker (NextVersionIdMarker) {String} next version ID marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- View all versions of objects and deleteMarker of bucket\n\n```js\nconst result = await store.getBucketVersions();\nconsole.log(result.objects);\nconsole.log(result.deleteMarker);\n```\n\n- List from key-marker\n\n```js\nconst result = await store.getBucketVersions({\n  keyMarker: 'keyMarker'\n});\nconsole.log(result.objects);\n```\n\n- List from the version-id-marker of key-marker\n\n```js\nconst result = await store.getBucketVersions({\n  versionIdMarker: 'versionIdMarker',\n  keyMarker: 'keyMarker'\n});\nconsole.log(result.objects);\nconsole.log(result.deleteMarker);\n```\n\n### .signatureUrl(name[, options])\n\nCreate a signature url for download or upload object. When you put object with signatureUrl ,you need to pass `Content-Type`.Please look at the example.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [method] {String} the HTTP method, default is 'GET'\n  - [Content-Type] {String} set the request content type\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [trafficLimit] {Number} traffic limit, range: `819200`~`838860800`.\n  - [subResource] {Object} additional signature parameters in url.\n  - [response] {Object} set the response headers for download\n    - [content-type] {String} set the response content type\n    - [content-disposition] {String} set the response content disposition\n    - [cache-control] {String} set the response cache control\n    - See more: <https://help.aliyun.com/document_detail/31980.html>\n  - [callback] {Object} set the callback for the operation\n    - url {String} set the url for callback\n    - [host] {String} set the host for callback\n    - body {String} set the body for callback\n    - [contentType] {String} set the type for body\n    - [customValue] {Object} set the custom value for callback,eg. {var1: value1,var2:value2}\n\nSuccess will return signature url.\n\nexample:\n\n- Get signature url for object\n\n```js\nconst url = store.signatureUrl('ossdemo.txt');\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT'\n});\nconsole.log(url);\n\n//  put object with signatureUrl\n// -------------------------------------------------\n\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT',\n  'Content-Type': 'text/plain; charset=UTF-8'\n});\nconsole.log(url);\n\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.txt', {\n  expires: 3600,\n  response: {\n    'content-type': 'text/custom',\n    'content-disposition': 'attachment'\n  }\n});\nconsole.log(url);\n\n// put operation\n```\n\n- Get a signature url for a processed image\n\n```js\nconst url = store.signatureUrl('ossdemo.png', {\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n// --------------------------------------------------\nconst url = store.signatureUrl('ossdemo.png', {\n  expires: 3600,\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n```\n\n### .asyncSignatureUrl(name[, options])\n\nBasically the same as signatureUrl, if refreshSTSToken is configured asyncSignatureUrl will refresh stsToken\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [method] {String} the HTTP method, default is 'GET'\n  - [Content-Type] {String} set the request content type\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [trafficLimit] {Number} traffic limit, range: `819200`~`838860800`.\n  - [subResource] {Object} additional signature parameters in url.\n  - [response] {Object} set the response headers for download\n    - [content-type] {String} set the response content type\n    - [content-disposition] {String} set the response content disposition\n    - [cache-control] {String} set the response cache control\n    - See more: <https://help.aliyun.com/document_detail/31980.html>\n  - [callback] {Object} set the callback for the operation\n    - url {String} set the url for callback\n    - [host] {String} set the host for callback\n    - body {String} set the body for callback\n    - [contentType] {String} set the type for body\n    - [customValue] {Object} set the custom value for callback,eg. {var1: value1,var2:value2}\n\nSuccess will return signature url.\n\nexample:\n\n- Get signature url for object\n\n```js\nconst url = await store.asyncSignatureUrl('ossdemo.txt');\nconsole.log(url);\n// --------------------------------------------------\nconst url = await store.asyncSignatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT'\n});\nconsole.log(url);\n//  put object with signatureUrl\n// -------------------------------------------------\nconst url = await store.asyncSignatureUrl('ossdemo.txt', {\n  expires: 3600,\n  method: 'PUT',\n  'Content-Type': 'text/plain; charset=UTF-8'\n});\nconsole.log(url);\n// --------------------------------------------------\nconst url = await store.asyncSignatureUrl('ossdemo.txt', {\n  expires: 3600,\n  response: {\n    'content-type': 'text/custom',\n    'content-disposition': 'attachment'\n  }\n});\nconsole.log(url);\n// put operation\n```\n\n- Get a signature url for a processed image\n\n```js\nconst url = await store.asyncSignatureUrl('ossdemo.png', {\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n// --------------------------------------------------\nconst url = await store.asyncSignatureUrl('ossdemo.png', {\n  expires: 3600,\n  process: 'image/resize,w_200'\n});\nconsole.log(url);\n```\n\n### .putACL(name, acl[, options])\n\nSet object's ACL.\n\nparameters:\n\n- name {String} object name\n- acl {String} acl (private/public-read/public-read-write)\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set an object's ACL\n\n```js\nawait store.putACL('ossdemo.txt', 'public-read');\n```\n\n- Set an history object's ACL\n\n```js\nconst versionId = 'object versionId';\nawait store.putACL('ossdemo.txt', 'public-read', {\n  versionId\n});\n```\n\n### .getACL(name[, options])\n\nGet object's ACL.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get an object's ACL\n\n```js\nconst result = await store.getACL('ossdemo.txt');\nconsole.log(result.acl);\n```\n\n- Get an history object's ACL\n\n```js\nconst versionId = 'object versionId';\nconst result = await store.getACL('ossdemo.txt', { versionId });\nconsole.log(result.acl);\n```\n\n### .restore(name[, options])\n\nRestore Object.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n  - [type] {String} the default type is Archive\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Restore an object with Archive type\n\n```js\nconst result = await store.restore('ossdemo.txt');\nconsole.log(result.status);\n```\n\n- Restore an object with ColdArchive type\n\n```js\nconst result = await store.restore('ossdemo.txt', { type: 'ColdArchive' });\nconsole.log(result.status);\n```\n\n- Days for unfreezing Specifies the days for unfreezing\n\n```js\nconst result = await store.restore('ossdemo.txt', { type: 'ColdArchive', Days: 2 });\nconsole.log(result.status);\n```\n\n- Restore an history object\n\n```js\nconst versionId = 'object versionId';\nconst result = await store.restore('ossdemo.txt', { versionId });\nconsole.log(result.status);\n```\n\n### .putSymlink(name, targetName[, options])\n\nPutSymlink\n\nparameters:\n\n- name {String} object name\n- targetName {String} target object name\n- [options] {Object} optional parameters\n\n  - [storageClass] {String} the storage type include (Standard,IA,Archive)\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers, detail see [PutSymlink](https://help.aliyun.com/document_detail/45126.html#title-x71-l2b-7i8)\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst options = {\n  storageClass: 'IA',\n  meta: {\n    uid: '1',\n    slus: 'test.html'\n  }\n};\nconst result = await store.putSymlink('ossdemo.txt', 'targetName', options);\nconsole.log(result.res);\n```\n\nputSymlink multiversion\n\n```js\nconst options = {\n  storageClass: 'IA',\n  meta: {\n    uid: '1',\n    slus: 'test.html'\n  }\n};\nconst result = await store.putSymlink('ossdemo.txt', 'targetName', options);\nconsole.log(result.res.headers['x-oss-version-id']);\n```\n\n### .getSymlink(name[, options])\n\nGetSymlink\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n- [versionId] {String} the version id of history object\n\nSuccess will return\n\n- targetName {String} target object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nconst result = await store.getSymlink('ossdemo.txt');\nconsole.log(result.targetName);\n```\n\nfor history object\n\n```js\nconst versionId = 'object versionId';\nconst result = await store.getSymlink('ossdemo.txt', { versionId });\nconsole.log(result.targetName);\n```\n\n### .initMultipartUpload(name[, options])\n\nBefore transmitting data in the Multipart Upload mode,\nyou must call the Initiate Multipart Upload interface to notify the OSS to initiate a Multipart Upload event.\nThe Initiate Multipart Upload interface returns a globally unique Upload ID created by the OSS server to identify this Multipart Upload event.\n\nparameters:\n\n- name {String} object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [mime] Mime file type e.g.: application/octet-stream\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - [x-oss-server-side-encryption]\n      Specify the server-side encryption algorithm used to upload each part of this object,Type: string, Valid value: AES256 `x-oss-server-side-encryption: AES256`<br>\n      if use in browser you should be set cors expose header x-oss-server-side-encryption\n    - See more: [InitiateMultipartUpload](https://help.aliyun.com/document_detail/31992.html?#title-wh0-a2h-rur)\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-server-side-encryption] if set request header x-oss-server-side-encryption, will return\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- uploadId {String} upload id, use for uploadPart, completeMultipart\n\nexample:\n\n```js\nconst result = await store.initMultipartUpload('object');\nconsole.log(result);\n```\n\n### .uploadPart(name, uploadId, partNo, file, start, end[, options])\n\nAfter initiating a Multipart Upload event, you can upload data in parts based on the specified object name and Upload ID.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- file {File|String} is File or FileName, the whole file<br>\n  Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB. <br>\n  In Node you can use File or FileName, but in browser you only can use File.\n- start {Number} part start bytes e.g: 102400\n- end {Number} part end bytes e.g: 204800\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n  const uploadId = result.uploadId;\n  const file; //the data you want to upload, is a File or FileName(only in node)\n  //if file part is 10\n  const partSize = 100 * 1024;\n  const fileSize = 10 * partSize;//you need to calculate\n  const dones = [];\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const part = await store.uploadPart(name, uploadId, i, file, start, end);\n    dones.push({\n      number: i,\n      etag: part.etag\n    });\n    console.log(part);\n  }\n\n  //end need to call completeMultipartUpload api\n```\n\n### .uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])\n\nUsing Upload Part Copy, you can copy data from an existing object and upload a part of the data.\nWhen copying a file larger than 1 GB, you must use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- partNo {Number} range is 1-10000, If this range is exceeded, OSS returns the InvalidArgument's error code.\n- range {String} Multipart Upload requires that the size of any Part other than the last Part is greater than 100KB, range value like `0-102400`\n- sourceData {Object}\n  - sourceKey {String} the source object name\n  - sourceBucketName {String} the source bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n  - [headers] {Object} The following request header is used for the source objects specified by x-oss-copy-source.\n    - [x-oss-copy-source-if-match] default none<br>\n      If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match] default none<br>\n      If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since] default none<br>\n      If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since] default none<br>\n      If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n```js\nconst name = 'object';\nconst result = await store.initMultipartUpload(name);\n\nconst partSize = 100 * 1024; //100kb\n//if file part is 10\nfor (let i = 1; i <= 10; i++) {\n  const start = partSize * (i - 1);\n  const end = Math.min(start + partSize, fileSize);\n  const range = start + '-' + (end - 1);\n  const part = await store.uploadPartCopy(name, result.uploadId, i, range, {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  });\n  console.log(part);\n}\n\n//end need complete api\n```\n\n- use history object to uploadPartCopy\n\n```js\nconst versionId = 'object versionId';\nconst name = 'object';\nconst result = await store.initMultipartUpload(name);\nconst partSize = 100 * 1024; //100kb\n//if file part is 10\nfor (let i = 1; i <= 10; i++) {\n  const start = partSize * (i - 1);\n  const end = Math.min(start + partSize, fileSize);\n  const range = start + '-' + (end - 1);\n  const part = await store.uploadPartCopy(\n    name,\n    result.uploadId,\n    i,\n    range,\n    {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    },\n    {\n      versionId\n    }\n  );\n  console.log(part);\n}\n\n//end need complete api\n```\n\n### .completeMultipartUpload(name, uploadId, parts[, options])\n\nAfter uploading all data parts, you must call the Complete Multipart Upload API to complete Multipart Upload for the entire file.\n\nparameters:\n\n- name {String} object name\n- uploadId {String} get by initMultipartUpload api\n- parts {Array} more part {Object} from uploadPartCopy, , each in the structure:\n  - number {Number} partNo\n  - etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=${key}&etag=${etag}&my_var=${x:my_var}.\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n      e.g.:\n      ```js\n      var customValue = { var1: 'value1', var2: 'value2' };\n      ```\n  - [headers] {Object} extra headers, detail see [CompleteMultipartUpload](https://help.aliyun.com/document_detail/31995.html?#title-nan-5y3-rjd)\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data , sdk use JSON.parse() return\n\nexample:\n\n```js\n\n  //init multipart\n  const name = 'object';\n  const result = await store.initMultipartUpload(name);\n\n  //upload part\n  const file; //the data you want to upload, this example size is 10 * 100 * 1024\n  const fileSize;//you need to calculate\n  const partSize = 100 * 1024;//100kb\n  const done = [];\n  //if file part is 10\n  for (let i = 1; i <= 10; i++) {\n    const start = partSize * (i -1);\n    const end = Math.min(start + partSize, fileSize);\n    const data = file.slice(start, end);\n    const part = store.uploadPart(name, result.uploadId, i, data, 0, data.length);\n    console.log(part);\n    done.push({\n          number: i,\n          etag: part.res.headers.etag\n        });\n  }\n\n  //complete\n  const completeData = await store.completeMultipartUpload(name, result.uploadId, done);\n  console.log(completeData);\n```\n\n### .multipartUpload(name, file[, options])\n\nUpload file with [OSS multipart][oss-multipart].<br>\nthis function contains initMultipartUpload, uploadPart, completeMultipartUpload.\nWhen you use multipartUpload api，if you encounter problems with ConnectionTimeoutError, you should handle ConnectionTimeoutError in your business code. How to resolve ConnectionTimeoutError, you can decrease `partSize` size 、 Increase `timeout` 、Retry request ,\nor give tips in your business code;\n\nparameters:\n\n- name {String} object name\n- file {String|File(only support Browser)|Blob(only support Browser)|Buffer} file path or HTML5 Web File or web Blob or content buffer\n- [options] {Object} optional args\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part, defalut `1024 * 1024`(1MB), minimum `100 * 1024`(100KB)\n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n    - file {File} The file object selected by the user, if the browser is restarted, it needs the user to manually trigger the settings\n    - name {String} object key\n    - fileSize {Number} file size\n    - partSize {Number} part size\n    - uploadId {String} upload id\n    - doneParts {Array} An array of pieces that have been completed, including the object structure as follows\n      - number {Number} part number\n      - etag {String} part etag\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n  - [mime] {String} custom mime , will send with `Content-Type` entity header\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=${key}&etag=${etag}&my_var=${x:my_var}.\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n      e.g.:\n      ```js\n      var customValue = { var1: 'value1', var2: 'value2' };\n      ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [disabledMD5] {Boolean} default true, it just work in Browser. if false,it means that MD5 is automatically calculated for uploaded files. **_NOTE:_** Synchronous computing tasks will block the main process\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n- data {Object} callback server response data, sdk use JSON.parse() return\n\nexample:\n\n- Upload using multipart\n\n```js\nconst result = await store.multipartUpload('object', '/tmp/file');\nlet savedCpt;\nconsole.log(result);\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  parallel: 4,\n  partSize: 1024 * 1024,\n  progress: function (p, cpt, res) {\n    console.log(p);\n    savedCpt = cpt;\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n\nconst result = await store.multipartUpload('object', '/tmp/file', {\n  checkpoint: savedCpt,\n  progress: function (p, cpt, res) {\n    //progress is generator\n    console.log(p);\n    console.log(cpt);\n    console.log(res.headers['x-oss-request-id']);\n  }\n});\n```\n\n- multipartUpload progress example\n\n```js\n//async function\nasync function asyncProgress(p, cpt, res) {\n  console.log(p);\n  console.log(cpt);\n  console.log(res.headers['x-oss-request-id']);\n}\n\nconst result1 = await store.multipartUpload('object', '/tmp/file', {\n  progress: asyncProgress\n});\n\n//function\nfunction progress(p, cpt, res) {\n  console.log(p);\n  console.log(cpt);\n  console.log(res.headers['x-oss-request-id']);\n}\n\nconst result2 = await store.multipartUpload('object', '/tmp/file', {\n  progress: progress\n});\n```\n\n- multipartUpload with abort\n\n> tips: abort multipartUpload support on node and browser\n\n```js\n\n//start upload\nlet abortCheckpoint;\nstore.multipartUpload('object', '/tmp/file', {\n  progress: function (p, cpt, res) {\n    abortCheckpoint = cpt;\n  }\n}).then(res => {\n  // do something\n}.catch(err => {\n   //if abort will catch abort event\n  if (err.name === 'abort') {\n    // handle abort\n    console.log('error: ', err.message)\n  }\n}))\n\n// abort\nstore.abortMultipartUpload(abortCheckpoint.name, abortCheckpoint.uploadId)\n\n```\n\n- multipartUpload with cancel\n\n> tips: cancel multipartUpload support on node and browser\n\n```js\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n```\n\n- multipartUpload with capture `ConnectionTimeoutError` error\n\n```js\n//start upload\ntry {\n  const result = await store.multipartUpload('object', '/tmp/file', {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  });\n} catch (err) {\n  if (err.code === 'ConnectionTimeoutError') {\n    console.log('Woops,Woops ,timeout error!!!');\n    // do ConnectionTimeoutError operation\n  }\n}\n```\n\n### .multipartUploadCopy(name, sourceData[, options])\n\nCopy file with [OSS multipart][oss-multipart]. <br>\nthis function contains head, initMultipartUpload, uploadPartCopy, completeMultipartUpload.<br>\nWhen copying a file larger than 1 GB, you should use the Upload Part Copy method. If you want to copy a file smaller than 1 GB, see Copy Object.\n\nparameters:\n\n- name {String} object name\n- file {String|File} file path or HTML5 Web File\n- [options] {Object} optional args\n  - [timeout] {Number} Milliseconds before a request is considered to be timed out\n  - [parallel] {Number} the number of parts to be uploaded in parallel\n  - [partSize] {Number} the suggested size for each part, defalut `1024 * 1024`(1MB), minimum `100 * 1024`(100KB)\n  - [versionId] {String} the version id of history object\n  - [progress] {Function} function | async | Promise, the progress callback called after each\n    successful upload of one part, it will be given three parameters:\n    (percentage {Number}, checkpoint {Object}, res {Object})\n  - [checkpoint] {Object} the checkpoint to resume upload, if this is\n    provided, it will continue the upload from where interrupted,\n    otherwise a new multipart upload will be created.\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - **NOTE**: Some headers are [disabled in browser][disabled-browser-headers]\n  - [copyheaders] {Object} only uploadPartCopy api used, detail [see](https://www.alibabacloud.com/help/doc-detail/31994.htm)\n    - [x-oss-copy-source-if-match] only uploadPartCopy api used, default none<br>\n      If the ETAG value of the source object is equal to the ETAG value provided by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-none-match] only uploadPartCopy api used, default none<br>\n      If the source object has not been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n    - [x-oss-copy-source-if-unmodified-since] only uploadPartCopy api used, default none<br>\n      If the time specified by the received parameter is the same as or later than the modification time of the file, the system transfers the file normally, and returns 200 OK; otherwise, the system returns 412 Precondition Failed.\n    - [x-oss-copy-source-if-modified-since] only uploadPartCopy api used, default none<br>\n      If the source object has been modified since the time specified by the user, the system performs the Copy Object operation; otherwise, the system returns the 412 Precondition Failed message.\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- bucket {String} bucket name\n- name name {String} object name store on OSS\n- etag {String} object etag contains \", e.g.: \"5B3C1A2E053D763E1B002CC607C5A0FE\"\n\nexample:\n\n- Copy using multipart\n\n```js\nconst result = await store.multipartUploadCopy('object', {\n  sourceKey: 'sourceKey',\n  sourceBucketName: 'sourceBucketName'\n});\nlet savedCpt;\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy(\n  'object',\n  {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  },\n  {\n    parallel: 4,\n    partSize: 1024 * 1024,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      savedCpt = cpt;\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  }\n);\n\nconsole.log(result);\n\nconst result = await store.multipartUploadCopy(\n  'object',\n  {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  },\n  {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    }\n  }\n);\n\nconsole.log(result);\n```\n\n- multipartUploadCopy with abort\n\n```js\n\n//start upload\nlet abortCheckpoint;\nstore.multipartUploadCopy('object', {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  }, {\n  progress: function (p, cpt, res) {\n    abortCheckpoint = cpt;\n  }\n}).then(res => {\n  // do something\n}.catch(err => {\n   //if abort will catch abort event\n  if (err.name === 'abort') {\n    // handle abort\n    console.log('error: ', err.message)\n  }\n}))\n\n//the other event to abort, for example: click event\n//to abort upload must use the same client instance\nstore.abortMultipartUpload(abortCheckpoint.name, abortCheckpoint.uploadId)\n\n```\n\n- multipartUploadCopy with cancel\n\n```js\n//start upload\ntry {\n  const result = await store.multipartUploadCopy(\n    'object',\n    {\n      sourceKey: 'sourceKey',\n      sourceBucketName: 'sourceBucketName'\n    },\n    {\n      checkpoint: savedCpt,\n      progress: function (p, cpt, res) {\n        console.log(p);\n        console.log(cpt);\n        console.log(res.headers['x-oss-request-id']);\n      }\n    }\n  );\n} catch (err) {\n  //if cancel will catch cancel event\n  if (store.isCancel()) {\n    //do something\n  }\n}\n\n//the other event to cancel, for example: click event\n//to cancel upload must use the same client instance\nstore.cancel();\n```\n\n- multipartUploadCopy with versionId\n\n```js\nconst versionId = 'object versionId';\n//start upload\nconst result = await store.multipartUploadCopy(\n  'object',\n  {\n    sourceKey: 'sourceKey',\n    sourceBucketName: 'sourceBucketName'\n  },\n  {\n    checkpoint: savedCpt,\n    progress: function (p, cpt, res) {\n      console.log(p);\n      console.log(cpt);\n      console.log(res.headers['x-oss-request-id']);\n    },\n    versionId\n  }\n);\n```\n\n### .listParts(name, uploadId[, query, options])\n\nThe ListParts command can be used to list all successfully uploaded parts mapped to a specific upload ID, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- name {String} object key\n- uploadId {String} upload ID from initMultipartUpload api\n- [query] {Object} query parameters\n  - [max-parts] {Number} The maximum part number in the response of the OSS. default value: 1000.\n  - [part-number-marker] {Number} Starting position of a specific list. A part is listed only when the part number is greater than the value of this parameter.\n  - [encoding-type] {String} Specify the encoding of the returned content and the encoding type. Optional value: url\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- uploadId {String} upload ID\n- bucket {String} Specify the bucket name.\n- name {String} object name\n- PartNumberMarker {Number} Starting position of the part numbers in the listing result.\n- nextPartNumberMarker {Number} If not all results are returned this time, the response request includes the NextPartNumberMarker element to indicate the value of PartNumberMarker in the next request.\n- maxParts {Number} upload ID\n- isTruncated {Boolean} Whether the returned result list for List Parts is truncated. The “true” indicates that not all results are returned; “false” indicates that all results are returned.\n- parts {Array} The container that saves part information, each in the structure:\n  - PartNumber {Number} Part number.\n  - LastModified {Date} Time when a part is uploaded.\n  - ETag {String} ETag value in the content of the uploaded part.\n  - Size {Number} Size of the uploaded part.\n\nexample:\n\n- List uploaded part\n\n```js\nconst result = await store.listParts('objcet', 'uploadId', {\n  'max-parts': 1000\n});\nconsole.log(result);\n```\n\n### .listUploads(query[, options])\n\nList on-going multipart uploads, i.e.: those not completed and not\naborted.\n\nparameters:\n\n- query {Object} query parameters\n  - [prefix] {String} the object key prefix\n  - [max-uploads] {Number} the max uploads to return\n  - [key-marker] {String} the object key marker, if `upload-id-marker`\n    is not provided, return uploads with `key > marker`, otherwise\n    return uploads with `key >= marker && uploadId > id-marker`\n  - [upload-id-marker] {String} the upload id marker, must be used\n    **WITH** `key-marker`\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- List on-going multipart uploads\n\n```js\nconst result = await store.listUploads({\n  'max-uploads': 100,\n  'key-marker': 'my-object',\n  'upload-id-marker': 'upload-id'\n});\nconsole.log(result);\n```\n\n### .abortMultipartUpload(name, uploadId[, options])\n\nAbort a multipart upload for object.\n\nparameters:\n\n- name {String} the object name\n- uploadId {String} the upload id\n- [options] {Object} optional args\n  - [timeout] {Number} the operation timeout\n\nexample:\n\n- Abort a multipart upload\n\n```js\nconst result = await store.abortMultipartUpload('object', 'upload-id');\nconsole.log(result);\n```\n\n### .calculatePostSignature(policy)\n\nget postObject params\n\nparameters:\n\n- policy {JSON or Object} policy must contain expiration and conditions.\n\nSuccess will return postObject Api params.\n\nObject:\n\n- OSSAccessKeyId {String}\n- Signature {String}\n- policy {Object} response info\n\n### .getObjectTagging(name[, options])\n\nObtains the tags of an object.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- tag {Object} the tag of object\n- res {Object} response info\n\n### .putObjectTagging(name, tag[, options])\n\nConfigures or updates the tags of an object.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n### .deleteObjectTagging(name[, options])\n\nDeletes the tag of a specified object.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n  - [versionId] {String} the version id of history object\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n### .processObjectSave(sourceObject, targetObject, process[, targetBucket])\n\nPersistency indicates that images are asynchronously stored in the specified Bucket\n\nparameters:\n\n- sourceObject {String} source object name\n- targetObject {String} target object name\n- process {String} process string\n- [targetBucket] {String} target bucket\n\nSuccess will return the channel information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info\n\n```js\nconst sourceObject = 'a.png';\nconst targetObject = 'b.png';\nconst process = 'image/watermark,text_aGVsbG8g5Zu+54mH5pyN5Yqh77yB,color_ff6a00';\n\nawait this.store.processObjectSave(sourceObject, targetObject, process);\n```\n\n## RTMP Operations\n\nAll operations function is [async], except `getRtmpUrl`.\n\nasync function format: `async functionName(...)`.\n\n### .putChannel(id, conf[, options])\n\nCreate a live channel.\n\nparameters:\n\n- id {String} the channel id\n- conf {Object} the channel config\n  - [Description] {String} the channel description\n  - [Status] {String} the channel status: 'enabled' or 'disabled'\n  - [Target] {Object}\n    - [Type] {String} the data type for the channel, only 'HLS' is supported now\n    - [FragDuration] {Number} duration of a 'ts' segment\n    - [FragCount] {Number} the number of 'ts' segments in a 'm3u8'\n    - [PlaylistName] {String} the 'm3u8' name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- publishUrls {Array} the publish urls\n- playUrls {Array} the play urls\n- res {Object} response info\n\nexample:\n\n- Create a live channel\n\n```js\nconst cid = 'my-channel';\nconst conf = {\n  Description: 'this is channel 1',\n  Status: 'enabled',\n  Target: {\n    Type: 'HLS',\n    FragDuration: '10',\n    FragCount: '5',\n    PlaylistName: 'playlist.m3u8'\n  }\n};\n\nconst r = await this.store.putChannel(cid, conf);\nconsole.log(r);\n```\n\n### .getChannel(id[, options])\n\nGet live channel info.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel information.\n\nobject:\n\n- data {Object} channel info, same as conf in [.putChannel](#putchannelid-conf-options)\n- res {Object} response info\n\nexample:\n\n- Get live channel info\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannel(cid);\nconsole.log(r);\n```\n\n### .deleteChannel(id[, options])\n\nDelete a live channel.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response infomation.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Delete a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.deleteChannel(cid);\nconsole.log(r);\n```\n\n### .putChannelStatus(id, status[, options])\n\nChange the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- status {String} the status: 'enabled' or 'disabled'\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Disable a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.putChannelStatus(cid, 'disabled');\nconsole.log(r);\n```\n\n### .getChannelStatus(id[, options])\n\nGet the live channel status.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel status information.\n\nobject:\n\n- data {Object}\n  - Status {String} the channel status: 'Live' or 'Idle'\n  - [ConnectedTime] {String} the connected time of rtmp pushing\n  - [RemoteAddr] {String} the remote addr of rtmp pushing\n  - [Video] {Object} the video parameters (Width/Height/FrameRate/Bandwidth/Codec)\n  - [Audio] {Object} the audio parameters (Bandwidth/SampleRate/Codec)\n- res {Object} response info\n\nexample:\n\n- Get a live channel status\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelStatus(cid);\nconsole.log(r);\n\n// { Status: 'Live',\n//   ConnectedTime: '2016-04-12T11:51:03.000Z',\n//   RemoteAddr: '42.120.74.98:53931',\n//   Video:\n//   { Width: '672',\n//     Height: '378',\n//     FrameRate: '29',\n//     Bandwidth: '60951',\n//     Codec: 'H264' },\n//   Audio: { Bandwidth: '5959', SampleRate: '22050', Codec: 'AAC' }\n// }\n```\n\n### .listChannels(query[, options])\n\nList channels.\n\nparameters:\n\n- query {Object} parameters for list\n  - prefix {String}: the channel id prefix (returns channels with this prefix)\n  - marker {String}: the channle id marker (returns channels after this id)\n  - max-keys {Number}: max number of channels to return\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the channel list.\n\nobject:\n\n- channels {Array} the channels, each in the structure:\n  - Name {String} the channel id\n  - Description {String} the channel description\n  - Status {String} the channel status\n  - LastModified {String} the last modification time of the channel\n  - PublishUrls {Array} the publish urls for the channel\n  - PlayUrls {Array} the play urls for the channel\n- nextMarker: result.data.NextMarker || null,\n- isTruncated: result.data.IsTruncated === 'true'\n- res {Object} response info\n\nexample:\n\n- List live channels\n\n```js\nconst r = await this.store.listChannels({\n  prefix: 'my-channel',\n  'max-keys': 3\n});\nconsole.log(r);\n```\n\n### .getChannelHistory(id[, options])\n\nGet the live channel history.\n\nparameters:\n\n- id {String} the channel id\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the history information.\n\nobject:\n\n- records {Object} the pushing records, each in the structure:\n  - StartTime {String} the start time\n  - EndTime {String} the end time\n  - RemoteAddr {String} the remote addr\n- res {Object} response info\n\nexample:\n\n- Get the live channel history\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.getChannelHistory(cid);\nconsole.log(r);\n```\n\n### .createVod(id, name, time[, options])\n\nCreate a VOD playlist for the channel.\n\nparameters:\n\n- id {String} the channel id\n- name {String} the playlist name\n- time {Object} the duration time\n  - startTime {Number} the start time in epoch seconds\n  - endTime {Number} the end time in epoch seconds\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the response information.\n\nobject:\n\n- res {Object} response info\n\nexample:\n\n- Create a vod playlist of a live channel\n\n```js\nconst cid = 'my-channel';\n\nconst r = await this.store.createVod(cid, 're-play', {\n  startTime: 1460464870,\n  endTime: 1460465877\n});\nconsole.log(r);\n```\n\n### .getRtmpUrl(channelId[, options])\n\nGet signatured rtmp url for publishing.\n\nparameters:\n\n- channelId {String} the channel id\n- [options] {Object} optional parameters\n  - [expires] {Number} the expire time in seconds of the url\n  - [params] {Object} the additional paramters for url, e.g.: {playlistName: 'play.m3u8'}\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the rtmp url.\n\nexample:\n\n- Get a rtmp url.\n\n```js\nconst cid = 'my-channel';\n\nconst url = this.store.getRtmpUrl(this.cid, {\n  params: {\n    playlistName: 'play.m3u8'\n  },\n  expires: 3600\n});\nconsole.log(url);\n// rtmp://ossliveshow.oss-cn-hangzhou.aliyuncs.com/live/tl-channel?OSSAccessKeyId=T0cqQWBk2ThfRS6m&Expires=1460466188&Signature=%2BnzTtpyxUWDuQn924jdS6b51vT8%3D\n```\n\n## Create A Image Service Instance\n\nEach Image Service instance required `accessKeyId`, `accessKeySecret`, `bucket` and `imageHost`.\n\n### oss.ImageClient(options)\n\nCreate a Image service instance.\n\noptions:\n\n- imageHost {String} your image service domain that binding to a OSS bucket\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- bucket {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`\n  Current available: `oss-cn-hangzhou`, `oss-cn-qingdao`, `oss-cn-beijing`, `oss-cn-hongkong` and `oss-cn-shenzhen`\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`\n  If your servers are running on aliyun too, you can set `true` to save lot of money.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`\n\nexample:\n\n```js\nconst oss = require('ali-oss');\n\nconst imgClient = oss.ImageClient({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'my_image_bucket'\n  imageHost: 'thumbnail.myimageservice.com'\n});\n```\n\n## Image Operations\n\nAll operations function is [async], except `imgClient.signatureUrl`.\n\nasync function format: `async functionName(...)`.\n\n### imgClient.get(name, file[, options])\n\nGet an image from the image channel.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the image\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n      otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n      otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n      otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image with a style and store it to the local file\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', filepath);\n```\n\n\\_ Store image to a writestream\n\n```js\nawait imgClient.get('ossdemo/demo.jpg@200w_200h', somestream);\n```\n\n- Get an image content buffer\n\n```js\nconst result = await imgClient.get('ossdemo/demo.jpg@200w_200h');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a not exists object or a not image object\n\n```js\nconst imagepath = '/home/ossdemo/demo.jpg';\nawait imgClient.get('ossdemo/not-exists-demo.jpg@200w_200h', filepath);\n// will throw NoSuchKeyError\n```\n\n### imgClient.getStream(name[, options])\n\nGet an image read stream.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n      otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n      otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n      otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance. If response status is not `200`, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists image object stream\n\n```js\nconst result = await imgClient.getStream('ossdemo/demo.jpg@200w_200h');\nresult.stream.pipe(fs.createWriteStream('some demo.jpg'));\n```\n\n### imgClient.getExif(name[, options])\n\nGet a image exif info by image object name from the image channel.\n\nparameters:\n\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nIf object don't have exif, will throw 400 BadRequest.\n\nexample:\n\n```js\nconst result = await imgClient.getExif('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n```\n\n### imgClient.getInfo(name[, options])\n\nGet a image info and exif info by image object name from the image channel.\n\nparameters:\n\n- name {String} image object name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} image exif object\n\nexample:\n\n```js\nconst result = await imgClient.getInfo('demo.jpg');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/json\",\n//       content - length: \"148\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 11:06:32 GMT\",\n//       \"last-modified\": \"Mon, 30 Mar 2015 10:46:35 GMT\"\n//     },\n//     size: 148,\n//     aborted: false,\n//     rt: 461,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     FileSize: 343683,\n//     Format: \"jpg\",\n//     ImageHeight: 1200,\n//     ImageWidth: 1600,\n//     Orientation: 1\n//   }\n// }\n```\n\n### imgClient.putStyle(name, style[, options])\n\n// TODO\n\n### imgClient.getStyle(name[, options])\n\nGet a style by name from the image channel.\n\nparameters:\n\n- name {String} image style name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Object} styles object\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.getStyle('400');\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"234\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:58:20 GMT\"\n//     },\n//     size: 234,\n//     aborted: false,\n//     rt: 398,\n//     keepAliveSocket: false\n//   },\n//   data: {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }\n// }\n```\n\n### imgClient.listStyle([options])\n\nGet all styles from the image channel.\n\nparameters:\n\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the info contains response.\n\nobject:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- data {Array} styles array, a style object:\n  - Name {String} style name\n  - Content {String} style content\n  - CreateTime {String} style create time\n  - LastModifyTime {String} style last modify time\n\nexample:\n\n```js\nconst result = await imgClient.listStyle();\n// resut:\n// {\n//   res: {\n//     status: 200,\n//     statusCode: 200,\n//     headers: {\n//       server: \"Tengine\",\n//       content - type: \"application/xml\",\n//       content - length: \"913\",\n//       connection: \"keep-alive\",\n//       date: \"Tue, 31 Mar 2015 10:47:32 GMT\"\n//     },\n//     size: 913,\n//     aborted: false,\n//     rt: 1911,\n//     keepAliveSocket: false\n//   },\n//   data: [{\n//     Name: \"200-200\",\n//     Content: \"0e_200w_200h_0c_0i_0o_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:28:08 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:28:08 GMT\"\n//   }, {\n//     Name: \"800\",\n//     Content: \"800w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:29:15 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:29:15 GMT\"\n//   }, {\n//     Name: \"400\",\n//     Content: \"400w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:34:21 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:34:21 GMT\"\n//   }, {\n//     Name: \"600\",\n//     Content: \"600w_90Q_1x.jpg\",\n//     CreateTime: \"Thu, 19 Mar 2015 08:35:02 GMT\",\n//     LastModifyTime: \"Thu, 19 Mar 2015 08:35:02 GMT\"\n//   }]\n// }\n```\n\n### imgClient.deleteStyle(name[, options])\n\n// TODO\n\n### imgClient.signatureUrl(name)\n\nCreate a signature url for directly download.\n\nparameters:\n\n- name {String} image object name with operation style store on OSS\n- [options] {Object} optional parameters\n  - [expires] {Number} after expires seconds, the url will become invalid, default is `1800`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return full signature url.\n\nexample:\n\n```js\nconst url = imgClient.signatureUrl('\n');\n// http://thumbnail.myimageservice.com/demo.jpg@200w_200h?OSSAccessKeyId=uZxyLARzYZtGwHKY&Expires=1427803849&Signature=JSPRe06%2FjQpQSj5zlx2ld1V%2B35I%3D\n```\n\n## Cluster Mode\n\nCluster mode now only support object operations.\n\n```js\nconst Cluster = require('ali-oss').ClusterClient;\n\nconst client = Cluster({\n  cluster: [\n    {\n      host: 'host1',\n      accessKeyId: 'id1',\n      accessKeySecret: 'secret1'\n    },\n    {\n      host: 'host2',\n      accessKeyId: 'id2',\n      accessKeySecret: 'secret2'\n    }\n  ],\n  schedule: 'masterSlave' //default is `roundRobin`\n});\n\n// listen error event to logging error\nclient.on('error', function (err) {\n  console.error(err.stack);\n});\n\n// client init ready\nclient.ready(function () {\n  console.log('cluster client init ready, go ahead!');\n});\n```\n\n### Get Methods\n\nWill choose an alive client by schedule(`masterSlave` or `roundRobin`).\n\n- `client.get()`\n- `client.head()`\n- `client.getStream()`\n- `client.list()`\n- `client.signatureUrl()`\n- `client.chooseAvailable()` - choose an available client by schedule.\n- `client.getACL()`\n\n### Put Methods\n\nWill put to all clients.\n\n- `client.put()`\n- `client.putStream()`\n- `client.delete()`\n- `client.deleteMulti()`\n- `client.copy()`\n- `client.putMeta()`\n- `client.putACL()`\n- `client.restore()`\n\n## Known Errors\n\nEach error return by OSS server will contains these properties:\n\n- name {String} error name\n- message {String} error message\n- requestId {String} uuid for this request, if you meet some unhandled problem,\n  you can send this request id to OSS engineer to find out what's happend.\n- hostId {String} OSS cluster name for this request\n\nThe following table lists the OSS error codes:\n\n[More code info](https://help.aliyun.com/knowledge_detail/32005.html)\n\n| name                                     | code                                | status | message                                          | message in Chinese                     |\n| ---------------------------------------- | ----------------------------------- | ------ | ------------------------------------------------ | -------------------------------------- |\n| AccessDeniedError                        | AccessDenied                        | 403    | Access Denied                                    | 拒绝访问                               |\n| BucketAlreadyExistsError                 | BucketAlreadyExists                 | 409    | Bucket already exists                            | Bucket 已经存在                        |\n| BucketNotEmptyError                      | BucketNotEmpty                      | 409    | Bucket is not empty                              | Bucket 不为空                          |\n| RestoreAlreadyInProgressError            | RestoreAlreadyInProgress            | 409    | The restore operation is in progress.            | restore 操作正在进行中                 |\n| OperationNotSupportedError               | OperationNotSupported               | 400    | The operation is not supported for this resource | 该资源暂不支持restore操作              |\n| EntityTooLargeError                      | EntityTooLarge                      | 400    | Entity too large                                 | 实体过大                               |\n| EntityTooSmallError                      | EntityTooSmall                      | 400    | Entity too small                                 | 实体过小                               |\n| FileGroupTooLargeError                   | FileGroupTooLarge                   | 400    | File group too large                             | 文件组过大                             |\n| InvalidLinkNameError                     | InvalidLinkName                     | 400    | Link name can't be the same as the object name   | Object Link 与指向的 Object 同名       |\n| LinkPartNotExistError                    | LinkPartNotExist                    | 400    | Can't link to not exists object                  | Object Link 中指向的 Object 不存在     |\n| ObjectLinkTooLargeError                  | ObjectLinkTooLarge                  | 400    | Too many links to this object                    | Object Link 中 Object 个数过多         |\n| FieldItemTooLongError                    | FieldItemTooLong                    | 400    | Post form fields items too large                 | Post 请求中表单域过大                  |\n| FilePartInterityError                    | FilePartInterity                    | 400    | File part has changed                            | 文件 Part 已改变                       |\n| FilePartNotExistError                    | FilePartNotExist                    | 400    | File part not exists                             | 文件 Part 不存在                       |\n| FilePartStaleError                       | FilePartStale                       | 400    | File part stale                                  | 文件 Part 过时                         |\n| IncorrectNumberOfFilesInPOSTRequestError | IncorrectNumberOfFilesInPOSTRequest | 400    | Post request contains invalid number of files    | Post 请求中文件个数非法                |\n| InvalidArgumentError                     | InvalidArgument                     | 400    | Invalid format argument                          | 参数格式错误                           |\n| InvalidAccessKeyIdError                  | InvalidAccessKeyId                  | 400    | Access key id not exists                         | Access Key ID 不存在                   |\n| InvalidBucketNameError                   | InvalidBucketName                   | 400    | Invalid bucket name                              | 无效的 Bucket 名字                     |\n| InvalidDigestError                       | InvalidDigest                       | 400    | Invalid digest                                   | 无效的摘要                             |\n| InvalidEncryptionAlgorithmError          | InvalidEncryptionAlgorithm          | 400    | Invalid encryption algorithm                     | 指定的熵编码加密算法错误               |\n| InvalidObjectNameError                   | InvalidObjectName                   | 400    | Invalid object name                              | 无效的 Object 名字                     |\n| InvalidPartError                         | InvalidPart                         | 400    | Invalid part                                     | 无效的 Part                            |\n| InvalidPartOrderError                    | InvalidPartOrder                    | 400    | Invalid part order                               | 无效的 part 顺序                       |\n| InvalidPolicyDocumentError               | InvalidPolicyDocument               | 400    | Invalid policy document                          | 无效的 Policy 文档                     |\n| InvalidTargetBucketForLoggingError       | InvalidTargetBucketForLogging       | 400    | Invalid bucket on logging operation              | Logging 操作中有无效的目标 bucket      |\n| InternalError                            | Internal                            | 500    | OSS server internal error                        | OSS 内部发生错误                       |\n| MalformedXMLError                        | MalformedXML                        | 400    | Malformed XML format                             | XML 格式非法                           |\n| MalformedPOSTRequestError                | MalformedPOSTRequest                | 400    | Invalid post body format                         | Post 请求的 body 格式非法              |\n| MaxPOSTPreDataLengthExceededError        | MaxPOSTPreDataLengthExceeded        | 400    | Post extra data too large                        | Post 请求上传文件内容之外的 body 过大  |\n| MethodNotAllowedError                    | MethodNotAllowed                    | 405    | Not allowed method                               | 不支持的方法                           |\n| MissingArgumentError                     | MissingArgument                     | 411    | Missing argument                                 | 缺少参数                               |\n| MissingContentLengthError                | MissingContentLength                | 411    | Missing `Content-Length` header                  | 缺少内容长度                           |\n| NoSuchBucketError                        | NoSuchBucket                        | 404    | Bucket not exists                                | Bucket 不存在                          |\n| NoSuchKeyError                           | NoSuchKey                           | 404    | Object not exists                                | 文件不存在                             |\n| NoSuchUploadError                        | NoSuchUpload                        | 404    | Multipart upload id not exists                   | Multipart Upload ID 不存在             |\n| NotImplementedError                      | NotImplemented                      | 501    | Not implemented                                  | 无法处理的方法                         |\n| PreconditionFailedError                  | PreconditionFailed                  | 412    | Pre condition failed                             | 预处理错误                             |\n| RequestTimeTooSkewedError                | RequestTimeTooSkewed                | 403    | Request time exceeds 15 minutes to server time   | 发起请求的时间和服务器时间超出 15 分钟 |\n| RequestTimeoutError                      | RequestTimeout                      | 400    | Request timeout                                  | 请求超时                               |\n| RequestIsNotMultiPartContentError        | RequestIsNotMultiPartContent        | 400    | Invalid post content-type                        | Post 请求 content-type 非法            |\n| SignatureDoesNotMatchError               | SignatureDoesNotMatch               | 403    | Invalid signature                                | 签名错误                               |\n| TooManyBucketsError                      | TooManyBuckets                      | 400    | Too many buckets on this user                    | 用户的 Bucket 数目超过限制             |\n| RequestError                             | RequestError                        | -1     | network error                                    | 网络出现中断或异常                     |\n| ConnectionTimeoutError                   | ConnectionTimeoutError              | -2     | request connect timeout                          | 请求连接超时                           |\n| SecurityTokenExpiredError                | SecurityTokenExpired                | 403    | sts Security Token Expired                       | sts Security Token 超时失效            |\n\n[generator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\n[oss-sts]: https://help.aliyun.com/document_detail/oss/practice/ram_guide.html\n[browser-sample]: https://github.com/rockuw/oss-in-browser\n[oss-multipart]: https://help.aliyun.com/document_detail/31992.html\n[disabled-browser-headers]: https://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n",
      "readmeFilename": "README.md",
      "gitHead": "6a90639e32a8ddab79bd0ebac08ed66b252299b2",
      "_id": "ali-oss@6.19.0-audit.1",
      "_nodeVersion": "16.14.0",
      "_npmVersion": "9.6.2",
      "dist": {
        "integrity": "sha512-u+mbuzbDiPAolefbMXatx0LrrbVK+ZNa+oOO6wEWr5HU2PD9FvMqyNrfAp94IPX/r0SdKsbX4NXEC45gURb8JA==",
        "shasum": "fc1692006f20062e56a74d661906d299939c3f9a",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.19.0-audit.1.tgz",
        "fileCount": 219,
        "unpackedSize": 3449307,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDhEmbl/6umBLcOQgJOIgA2hDXXpe4Sllty/B860ou/ngIgfHf4LNmGmYrPtJ04n5EToD7f+sH64blu2Z/jBwLFf4E="
          }
        ]
      },
      "_npmUser": {
        "name": "peizerao",
        "email": "peizerao@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.19.0-audit.1_1691651561385_0.36294640782435295"
      },
      "_hasShrinkwrap": false
    },
    "6.18.1": {
      "name": "ali-oss",
      "version": "6.18.1",
      "description": "aliyun oss(object storage service) node client",
      "main": "./lib/client.js",
      "browser": {
        "./lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "npm run tsc && mocha -t 120000 -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "npm run tsc && nyc --reporter=lcov node_modules/.bin/_mocha -t 120000 -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean ",
        "prepare": "husky install"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "homepage": "https://github.com/ali-sdk/ali-oss",
      "bugs": {
        "url": "https://github.com/ali-sdk/ali-oss/issues"
      },
      "publishConfig": {
        "registry": "https://registry.npmjs.org/",
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/ali-sdk/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@commitlint/cli": "^17.6.7",
        "@commitlint/config-conventional": "^16.2.4",
        "@octokit/core": "^5.0.0",
        "@semantic-release/exec": "^6.0.3",
        "@semantic-release/git": "^10.0.1",
        "@semantic-release/npm": "^10.0.5",
        "@snyk/protect": "^1.1196.0",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^5.0.0",
        "@typescript-eslint/parser": "^5.0.0",
        "aliasify": "^2.0.0",
        "axios": "0.27.2",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^17.0.0",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^8.44.0",
        "eslint-config-airbnb": "^19.0.4",
        "eslint-config-ali": "^13.0.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-prettier": "^4.2.1",
        "filereader": "^0.10.3",
        "form-data": "^4.0.0",
        "git-pre-hooks": "^1.2.0",
        "husky": "^7.0.4",
        "immediate": "^3.3.0",
        "karma": "^6.3.4",
        "karma-browserify": "^8.1.0",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^2.0.1",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^12.4.1",
        "mm": "^2.0.0",
        "mocha": "^9.1.2",
        "nyc": "^15.1.0",
        "prettier": "^3.0.0",
        "promise-polyfill": "^6.0.2",
        "puppeteer": "19.0.0",
        "semantic-release": "^21.1.1",
        "should": "^11.0.0",
        "sinon": "^15.2.0",
        "standard-version": "^9.3.1",
        "stream-equal": "^1.1.0",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^3.14.2",
        "watchify": "^4.0.0"
      },
      "dependencies": {
        "address": "^1.2.2",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^4.3.4",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.4.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^2.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "2.41.0",
        "utility": "^1.18.0",
        "xml2js": "^0.6.2"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ],
        "**/*.{js,ts}": [
          "eslint --cache --fix --ext .js,.ts",
          "prettier --write",
          "git add"
        ]
      },
      "_id": "ali-oss@6.18.1",
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "6d281a325c0409da63570e04a5436ce33a03d102",
      "_nodeVersion": "18.17.1",
      "_npmVersion": "9.8.1",
      "dist": {
        "integrity": "sha512-VsptD0jX3JNc3AjiLs5a9oTP0ArfT9IYhBuY6G/SpuY6LMuiwfqywrAosY65BlHKODAdYy8VWL6kmt0mO7BUGA==",
        "shasum": "13f2eb5f5c2a2cf2d322c1b35412133c18cec485",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.18.1.tgz",
        "fileCount": 225,
        "unpackedSize": 2519174,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDsu8BSvoyZSoXT9c1rH6wB2VTpTtcBKl7m0B0G0TFxGQIgXw+RaeGiK3iKkx2Tc2Cj8UL7zYtLO7TZbnFLiUZQ87k="
          }
        ]
      },
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.18.1_1694417392741_0.2827379144688924"
      },
      "_hasShrinkwrap": false
    },
    "6.19.0": {
      "name": "ali-oss",
      "version": "6.19.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "./lib/client.js",
      "browser": {
        "./lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "npm run tsc && mocha -t 120000 -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "npm run tsc && nyc --reporter=lcov node_modules/.bin/_mocha -t 120000 -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean ",
        "prepare": "husky install"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "homepage": "https://github.com/ali-sdk/ali-oss",
      "bugs": {
        "url": "https://github.com/ali-sdk/ali-oss/issues"
      },
      "publishConfig": {
        "registry": "https://registry.npmjs.org/",
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/ali-sdk/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@commitlint/cli": "^17.6.7",
        "@commitlint/config-conventional": "^16.2.4",
        "@octokit/core": "^5.0.0",
        "@semantic-release/exec": "^6.0.3",
        "@semantic-release/git": "^10.0.1",
        "@semantic-release/npm": "^10.0.5",
        "@snyk/protect": "^1.1196.0",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^5.0.0",
        "@typescript-eslint/parser": "^5.0.0",
        "aliasify": "^2.0.0",
        "axios": "0.27.2",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^17.0.0",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^8.44.0",
        "eslint-config-airbnb": "^19.0.4",
        "eslint-config-ali": "^13.0.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-prettier": "^4.2.1",
        "filereader": "^0.10.3",
        "form-data": "^4.0.0",
        "git-pre-hooks": "^1.2.0",
        "husky": "^7.0.4",
        "immediate": "^3.3.0",
        "karma": "^6.3.4",
        "karma-browserify": "^8.1.0",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^2.0.1",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^12.4.1",
        "mm": "^2.0.0",
        "mocha": "^9.1.2",
        "nyc": "^15.1.0",
        "prettier": "^3.0.0",
        "promise-polyfill": "^6.0.2",
        "puppeteer": "19.0.0",
        "semantic-release": "^21.1.1",
        "should": "^11.0.0",
        "sinon": "^15.2.0",
        "standard-version": "^9.3.1",
        "stream-equal": "^1.1.0",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^3.14.2",
        "watchify": "^4.0.0"
      },
      "dependencies": {
        "address": "^1.2.2",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^4.3.4",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.4.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^2.0.0",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "2.41.0",
        "utility": "^1.18.0",
        "xml2js": "^0.6.2"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ],
        "**/*.{js,ts}": [
          "eslint --cache --fix --ext .js,.ts",
          "prettier --write",
          "git add"
        ]
      },
      "_id": "ali-oss@6.19.0",
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "2690269297a2639601a768395ea526887d08a339",
      "_nodeVersion": "18.19.0",
      "_npmVersion": "9.8.1",
      "dist": {
        "integrity": "sha512-8+5SJoXlqMMG+2QHu57jkrTnu3oUi0y0P4yqZveNjy/jG9MEEqw/59UZLK21lahaHknEDrigxFdivRhFhSFU0Q==",
        "shasum": "cd235cbe500060e03a6a9a0181a3ff9c028d57f5",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.19.0.tgz",
        "fileCount": 225,
        "unpackedSize": 2521595,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEzvfIkS9ags7bPToRgboGpmKbcIlhK9l3xL7Sk1a7iUAiEAow7rXfwLa+nGUlYlxNGE1pOv//NxuHl7ycltoh5bgqs="
          }
        ]
      },
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.19.0_1702892342276_0.7633651908548176"
      },
      "_hasShrinkwrap": false
    },
    "6.20.0": {
      "name": "ali-oss",
      "version": "6.20.0",
      "description": "aliyun oss(object storage service) node client",
      "main": "./lib/client.js",
      "browser": {
        "./lib/client.js": "./dist/aliyun-oss-sdk.js",
        "mime": "mime/lite",
        "urllib": "./shims/xhr.js",
        "utility": "./shims/utility.js",
        "crypto": "./shims/crypto/crypto.js",
        "debug": "./shims/debug",
        "fs": false,
        "child_process": false,
        "is-type-of": "./shims/is-type-of.js"
      },
      "scripts": {
        "build-change-log": "standard-version",
        "test": "npm run tsc && mocha -t 120000 -r should -r dotenv/config test/node/*.test.js test/node/**/*.test.js",
        "test-cov": "npm run tsc && nyc --reporter=lcov node_modules/.bin/_mocha -t 120000 -r should test/node/*.test.js test/node/**/*.test.js",
        "jshint": "jshint .",
        "build-test": "MINIFY=1 node browser-build.js > test/browser/build/aliyun-oss-sdk.min.js && node -r dotenv/config task/browser-test-build.js > test/browser/build/tests.js",
        "browser-test": "npm run build-test && karma start",
        "build-dist": "npm run tsc && node browser-build.js > dist/aliyun-oss-sdk.js && MINIFY=1 node browser-build.js > dist/aliyun-oss-sdk.min.js",
        "publish-to-npm": "node publish-npm-check.js && npm publish",
        "publish-to-cdn": "node publish.js",
        "snyk-protect": "snyk-protect",
        "lint-staged": "lint-staged",
        "detect-secrets": "node task/detect-secrets",
        "tsc": "npm run tsc:clean && npm run tsc:build",
        "tsc:build": "tsc -b tsconfig.json tsconfig-cjs.json",
        "tsc:watch": "tsc -b tsconfig.json tsconfig-cjs.json --watch",
        "tsc:clean": "tsc -b tsconfig.json tsconfig-cjs.json --clean ",
        "prepare": "husky install"
      },
      "git-pre-hooks": {
        "pre-release": "npm run build-dist",
        "post-release": [
          "npm run publish-to-npm",
          "npm run publish-to-cdn"
        ]
      },
      "homepage": "https://github.com/ali-sdk/ali-oss",
      "bugs": {
        "url": "https://github.com/ali-sdk/ali-oss/issues"
      },
      "publishConfig": {
        "registry": "https://registry.npmjs.org/",
        "access": "public"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/ali-sdk/ali-oss.git"
      },
      "keywords": [
        "oss",
        "client",
        "file",
        "aliyun"
      ],
      "author": {
        "name": "dead_horse"
      },
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "devDependencies": {
        "@babel/core": "^7.11.6",
        "@babel/plugin-transform-regenerator": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.11.5",
        "@babel/preset-env": "^7.11.5",
        "@babel/runtime": "^7.11.2",
        "@commitlint/cli": "^17.6.7",
        "@commitlint/config-conventional": "^16.2.4",
        "@octokit/core": "^5.0.0",
        "@semantic-release/exec": "^6.0.3",
        "@semantic-release/git": "^10.0.1",
        "@semantic-release/npm": "^10.0.5",
        "@snyk/protect": "^1.1196.0",
        "@types/node": "^14.0.12",
        "@typescript-eslint/eslint-plugin": "^5.0.0",
        "@typescript-eslint/parser": "^5.0.0",
        "aliasify": "^2.0.0",
        "axios": "0.27.2",
        "babelify": "^10.0.0",
        "beautify-benchmark": "^0.2.4",
        "benchmark": "^2.1.1",
        "bluebird": "^3.1.5",
        "browserify": "^17.0.0",
        "core-js": "^3.6.5",
        "crypto-js": "^3.1.9-1",
        "dotenv": "^8.2.0",
        "eslint": "^8.44.0",
        "eslint-config-airbnb": "^19.0.4",
        "eslint-config-ali": "^13.0.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-plugin-import": "^2.21.1",
        "eslint-plugin-jsx-a11y": "^6.0.3",
        "eslint-plugin-prettier": "^4.2.1",
        "filereader": "^0.10.3",
        "form-data": "^4.0.0",
        "git-pre-hooks": "^1.2.0",
        "husky": "^7.0.4",
        "immediate": "^3.3.0",
        "karma": "^6.3.4",
        "karma-browserify": "^8.1.0",
        "karma-chrome-launcher": "^2.2.0",
        "karma-firefox-launcher": "^1.0.1",
        "karma-ie-launcher": "^1.0.0",
        "karma-mocha": "^2.0.1",
        "karma-safari-launcher": "^1.0.0",
        "lint-staged": "^12.4.1",
        "mm": "^2.0.0",
        "mocha": "^9.1.2",
        "nyc": "^15.1.0",
        "prettier": "^3.0.0",
        "promise-polyfill": "^6.0.2",
        "puppeteer": "19.0.0",
        "semantic-release": "^21.1.1",
        "should": "^11.0.0",
        "sinon": "^15.2.0",
        "standard-version": "^9.3.1",
        "stream-equal": "^1.1.0",
        "timemachine": "^0.3.0",
        "typescript": "^3.9.5",
        "uglify-js": "^3.14.2",
        "watchify": "^4.0.0"
      },
      "dependencies": {
        "address": "^1.2.2",
        "agentkeepalive": "^3.4.1",
        "bowser": "^1.6.0",
        "copy-to": "^2.0.1",
        "dateformat": "^2.0.0",
        "debug": "^4.3.4",
        "destroy": "^1.0.4",
        "end-or-error": "^1.0.1",
        "get-ready": "^1.0.0",
        "humanize-ms": "^1.2.0",
        "is-type-of": "^1.4.0",
        "js-base64": "^2.5.2",
        "jstoxml": "^2.0.0",
        "lodash": "^4.17.21",
        "merge-descriptors": "^1.0.1",
        "mime": "^2.4.5",
        "platform": "^1.3.1",
        "pump": "^3.0.0",
        "qs": "^6.4.0",
        "sdk-base": "^2.0.1",
        "stream-http": "2.8.2",
        "stream-wormhole": "^1.0.4",
        "urllib": "2.41.0",
        "utility": "^1.18.0",
        "xml2js": "^0.6.2"
      },
      "snyk": true,
      "lint-staged": {
        "**/!(dist)/*": [
          "npm run detect-secrets --"
        ],
        "**/*.{js,ts}": [
          "eslint --cache --fix --ext .js,.ts",
          "prettier --write",
          "git add"
        ]
      },
      "_id": "ali-oss@6.20.0",
      "contributors": [
        {
          "name": "PeterRao",
          "email": "peizerao@gmail.com",
          "url": "https://github.com/PeterRao"
        },
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "chunpu",
          "email": "fengtong@mail.ustc.edu.cn"
        },
        {
          "name": "fengmk2",
          "email": "m@fengmk2.com",
          "url": "https://github.com/fengmk2"
        },
        {
          "name": "Yan Qing",
          "email": "admin@zensh.com",
          "url": "https://github.com/zensh"
        },
        {
          "name": "mars-coder",
          "email": "mars.ll@alibaba-inc.com",
          "url": "https://github.com/mars-coder"
        },
        {
          "name": "Jacky Tang",
          "email": "jackytck@gmail.com",
          "url": "https://github.com/jackytck"
        }
      ],
      "gitHead": "ccffa6614f004644fd179ed8dd268787b924e395",
      "_nodeVersion": "18.19.0",
      "_npmVersion": "9.9.2",
      "dist": {
        "integrity": "sha512-TzFXgGlw81sy2JvcCveSYsa2b2+6kv+HA6WTc+cXg6bu8nUAmVPfncRGbn3x2getSOniOFA+TyGy3V4l3Fks+Q==",
        "shasum": "a19b0207560399f18db6827097e8631ef9c9cfd7",
        "tarball": "https://registry.npmjs.org/ali-oss/-/ali-oss-6.20.0.tgz",
        "fileCount": 233,
        "unpackedSize": 2718829,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDIZB+ras3ciF3W7yIUOpIKog0KGk+aI4lD7M3zkV/bkAIgbs0sV2kyzmihhqy1Fa2/AxWCxC2zTUWQdoO1BwMPRVA="
          }
        ]
      },
      "_npmUser": {
        "name": "fengmk2",
        "email": "fengmk2@gmail.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "dead_horse",
          "email": "dead_horse@qq.com"
        },
        {
          "name": "peizerao",
          "email": "peizerao@gmail.com"
        },
        {
          "name": "fengmk2",
          "email": "fengmk2@gmail.com"
        },
        {
          "name": "popomore",
          "email": "sakura9515@gmail.com"
        },
        {
          "name": "haibing.w",
          "email": "binghaiwang@gmail.com"
        },
        {
          "name": "jackycheung888",
          "email": "2378278470@qq.com"
        },
        {
          "name": "qq1019272778",
          "email": "1019272778@qq.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/ali-oss_6.20.0_1705658703086_0.14812070079317263"
      },
      "_hasShrinkwrap": false
    }
  },
  "readme": "# oss-js-sdk\n\n[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage][cov-image]][cov-url]\n[![David deps][david-image]][david-url]\n\n[npm-image]: https://img.shields.io/npm/v/ali-oss.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/ali-oss\n[travis-image]: https://img.shields.io/travis/ali-sdk/ali-oss/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/ali-sdk/ali-oss.svg?branch=master\n[cov-image]: http://codecov.io/github/ali-sdk/ali-oss/coverage.svg?branch=master\n[cov-url]: http://codecov.io/github/ali-sdk/ali-oss?branch=master\n[david-image]: https://img.shields.io/david/ali-sdk/ali-oss.svg?style=flat-square\n[david-url]: https://david-dm.org/ali-sdk/ali-oss\n\naliyun OSS(Object Storage Service) js client for Node and Browser env.\n\n`NOTE`： For SDK `5.X` document, please go to [README.md](https://github.com/ali-sdk/ali-oss/blob/5.x/README.md)\n\n## Install\n\n```bash\nnpm install ali-oss --save\n```\n\n## Compatibility\n\n### Node\n\nNode.js >= 8.0.0 required. You can use 4.x in Node.js < 8.\n\n### Browser\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n\n`Note`:\n\n- For Lower browsers you can refer to [PostObject](https://help.aliyun.com/document_detail/31988.html), if you want to see more practices ,please refer to [Web Post](https://help.aliyun.com/document_detail/31923.html)\n\n### QA\n\nYou can join DingDing Talk Group, [Group Link](https://qr.dingtalk.com/action/joingroup?code=v1,k1,E60EuCmxajfilkaR/kknRcGR9UissskPEXu/1td36z0=)\n\n<img src=\"task/dingding.jpg\" height=\"400\" title=\"dingding\" width=\"300\">\n\n## License\n\n[MIT](LICENSE)\n\n# OSS Usage\n\nOSS, Object Storage Service. Equal to well known Amazon [S3](http://aws.amazon.com/s3/).\n\nAll operation use es7 async/await to implement. All api is async function.\n\n## Summary\n\n- [Node Usage](#node-usage)\n- [Browser Usage](#browser-usage)\n- [Data Regions](#data-regions)\n- [Create Account](#create-account)\n- [Create A Bucket Instance](#create-a-bucket-instance)\n  - [oss(options)](#ossoptions)\n- [Bucket Operations](#bucket-operations)\n\n  - Base\n    - [.listBuckets(query[, options])](#listbucketsquery-options)\n    - [.putBucket(name[, options])](#putbucketname-options)\n    - [.useBucket(name)](#usebucketname)\n    - [.deleteBucket(name[, options])](#deletebucketname-options)\n    - [.getBucketInfo(name)](#getbucketinfoname)\n    - [.getBucketStat(name)](#getbucketstatname)\n    - [.getBucketLocation(name)](#getbucketlocationname)\n  - ACL\n    - [.putBucketACL(name, acl[, options])](#putbucketaclname-acl-options)\n    - [.getBucketACL(name[, options])](#getbucketaclname-options)\n  - Logging\n    - [.putBucketLogging(name, prefix[, options])](#putbucketloggingname-prefix-options)\n    - [.getBucketLogging(name[, options])](#getbucketloggingname-options)\n    - [.deleteBucketLogging(name[, options])](#deletebucketloggingname-options)\n  - Website\n    - [.putBucketWebsite(name, config[, options])](#putbucketwebsitename-config-options)\n    - [.getBucketWebsite(name[, options])](#getbucketwebsitename-options)\n    - [.deleteBucketWebsite(name, region[, options])](#deletebucketwebsitename-options)\n  - Referer\n    - [.putBucketReferer(name, allowEmpty, referers[, options])](#putbucketreferername-allowempty-referers-options)\n    - [.getBucketReferer(name[, options])](#getbucketreferername-options)\n    - [.deleteBucketReferer(name[, options])](#deletebucketreferername-options)\n  - Lifecycle\n    - [.putBucketLifecycle(name, rules[, options])](#putbucketlifecyclename-rules-options)\n    - [.getBucketLifecycle(name[, options])](#getbucketlifecyclename-options)\n    - [.deleteBucketLifecycle(name[, options])](#deletebucketlifecyclename-options)\n  - CORS\n    - [.putBucketCORS(name, rules[, options])](#putbucketcorsname-rules-options)\n    - [.getBucketCORS(name[, options])](#getbucketcorsname-options)\n    - [.deleteBucketCORS(name[, options])](#deletebucketcorsname-options)\n  - RequestPayment\n    - [.getBucketRequestPayment(bucketName[, options])](#getbucketrequestpaymentbucketname-options)\n    - [.putBucketRequestPayment(bucketName, payer[, options])](#putBucketRequestpaymentbucketname-payer-options)\n  - BucketEncryption\n    - [.putBucketEncryption(name[, rules])](#putbucketencryptionname-rules)\n    - [.getBucketEncryption(name)](#getbucketencryptionname)\n    - [.deleteBucketEncryption(name)](#deletebucketencryptionname)\n  - tagging\n    - [.putBucketTags(name, tag[, options])](#putBucketTagsname-tag-options)\n    - [.getBucketTags(name, [, options])](#getBucketTagsname-options)\n    - [.deleteBucketTags(name, [, options])](#deleteBucketTagsname-options)\n  - policy\n    - [.putBucketPolicy(name, policy[, options])](#putBucketPolicyname-policy-options)\n    - [.getBucketPolicy(name, [, options])](#getBucketPolicyname-options)\n    - [.deleteBucketPolicy(name, [, options])](#deleteBucketPolicyname-options)\n  - versioning\n    - [.getBucketVersioning(name, [, options])](#getBucketVersioningname-options)\n    - [.putBucketVersioning(name, status[, options])](#putBucketVersioningname-status-options)\n  - inventory\n    - [.getBucketInventory(name, inventoryId[, options])](#getBucketInventoryname-inventoryid-options)\n    - [.putBucketInventory(name, inventory[, options])](#putBucketInventoryname-inventory-options)\n    - [.deleteBucketInventory(name, inventoryId[, options])](#deleteBucketInventoryname-inventoryid-options)\n    - [.listBucketInventory(name, [, options])](#listBucketInventoryname-options)\n  - worm\n    - [.abortBucketWorm(name[, options])](#abortBucketWormname-options)\n    - [.completeBucketWorm(name, wormId[, options])](#completeBucketWormname-wormId-options)\n    - [.extendBucketWorm(name, wormId, days[, options])](#extendBucketWormname-wormId-days-options)\n    - [.getBucketWorm(name[, options])](#getBucketWormname-options)\n    - [.initiateBucketWorm(name, days[, options])](#initiateBucketWormname-days-options)\n\n- [Object Operations](#object-operations)\n  - [.list(query[, options])](#listquery-options)\n  - [.listV2(query[, options])](#listV2query-options)\n  - [.getBucketVersions(query[, options])](#getBucketVersionsquery-options)\n  - [.put(name, file[, options])](#putname-file-options)\n  - [.putStream(name, stream[, options])](#putstreamname-stream-options)\n  - [.append(name, file[, options])](#appendname-file-options)\n  - [.getObjectUrl(name[, baseUrl])](#getobjecturlname-baseurl)\n  - [.generateObjectUrl(name[, baseUrl])](#generateobjecturlname-baseurl)\n  - [.head(name[, options])](#headname-options)\n  - [.getObjectMeta(name[, options])](#getobjectmetaname-options)\n  - [.get(name[, file, options])](#getname-file-options)\n  - [.getStream(name[, options])](#getstreamname-options)\n  - [.delete(name[, options])](#deletename-options)\n  - [.copy(name, sourceName[, sourceBucket, options])](#copyname-sourcename-sourcebucket-options)\n  - [.putMeta(name, meta[, options])](#putmetaname-meta-options)\n  - [.deleteMulti(names[, options])](#deletemultinames-options)\n  - [.signatureUrl(name[, options])](#signatureurlname-options)\n  - [.asyncSignatureUrl(name[, options])](#signatureurlname-options)\n  - [.putACL(name, acl[, options])](#putaclname-acl-options)\n  - [.getACL(name[, options])](#getaclname-options)\n  - [.restore(name[, options])](#restorename-options)\n  - [.putSymlink(name, targetName[, options])](#putsymlinkname-targetname-options)\n  - [.getSymlink(name[, options])](#getsymlinkname-options)\n  - [.initMultipartUpload(name[, options])](#initmultipartuploadname-options)\n  - [.uploadPart(name, uploadId, partNo, file, start, end[, options])](#uploadpartname-uploadid-partno-file-start-end-options)\n  - [.uploadPartCopy(name, uploadId, partNo, range, sourceData[, options])](#uploadpartcopyname-uploadid-partno-range-sourcedata-options)\n  - [.completeMultipartUpload(name, uploadId, parts[, options])](#completemultipartuploadname-uploadid-parts-options)\n  - [.multipartUpload(name, file[, options])](#multipartuploadname-file-options)\n  - [.multipartUploadCopy(name, sourceData[, options])](#multipartuploadcopyname-sourcedata-options)\n  - [.listParts(name, uploadId[, query, options])](#listpartsname-uploadid-query-options)\n  - [.listUploads(query[, options])](#listuploadsquery-options)\n  - [.abortMultipartUpload(name, uploadId[, options])](#abortmultipartuploadname-uploadid-options)\n  - [.calculatePostSignature(policy)](#calculatePostSignaturepolicy)\n  - [.getObjectTagging(name, [, options])](#getObjectTaggingname-options)\n  - [.putObjectTagging(name, tag[, options])](#putObjectTaggingname-tag-options)\n  - [.deleteObjectTagging(name, [, options])](#deleteObjectTaggingname-options)\n- [RTMP Operations](#rtmp-operations)\n  - [.putChannel(id, conf[, options])](#putchannelid-conf-options)\n  - [.getChannel(id[, options])](#getchannelid-options)\n  - [.deleteChannel(id[, options])](#deletechannelid-options)\n  - [.putChannelStatus(id, status[, options])](#putchannelstatusid-status-options)\n  - [.getChannelStatus(id[, options])](#getchannelstatusid-options)\n  - [.listChannels(query[, options])](#listchannelsquery-options)\n  - [.getChannelHistory(id[, options])](#getchannelhistoryid-options)\n  - [.createVod(id, name, time[, options])](#createvodid-name-time-options)\n  - [.getRtmpUrl(channelId[, options])](#getrtmpurlchannelid-options)\n- [Create A Image Service Instance](#create-a-image-service-instance)\n  - [oss.ImageClient(options)](#ossimageclientoptions)\n- [Image Operations](#image-operations)\n  - [imgClient.get(name, file[, options])](#imgclientgetname-file-options)\n  - [imgClient.getStream(name[, options])](#imgclientgetstreamname-options)\n  - [imgClient.getExif(name[, options])](#imgclientgetexifname-options)\n  - [imgClient.getInfo(name[, options])](#imgclientgetinfoname-options)\n  - [imgClient.putStyle(name, style[, options])](#imgclientputstylename-style-options)\n  - [imgClient.getStyle(name[, options])](#imgclientgetstylename-options)\n  - [imgClient.listStyle([options])](#imgclientliststyleoptions)\n  - [imgClient.deleteStyle(name[, options])](#imgclientdeletestylename-options)\n  - [imgClient.signatureUrl(name)](#imgclientsignatureurlname)\n- [Known Errors](#known-errors)\n\n## Node Usage\n\n### Compatibility\n\n- Node: >= 8.0.0\n\n### Basic usage\n\n1.install SDK using npm\n\n```\nnpm install ali-oss --save\n```\n\n2.for example:\n\n```js\nconst OSS = require('ali-oss');\nconst store = new OSS({\n  region: '<oss region>',\n  accessKeyId: '<Your accessKeyId>',\n  accessKeySecret: '<Your accessKeySecret>',\n  bucket: '<Your bucket name>'\n});\n```\n\n## Browser Usage\n\nYou can use most of the functionalities of `ali-oss` in browser with\nsome exceptions:\n\n- put object with streaming: no chunked encoding, we use multipart\n  upload instead\n- get object to local file: we cannot manipulate file system in\n  browser, we provide signed object url for downloading needs\n- bucket operations(listBuckets, putBucketLogging, etc) will fail: OSS\n  server currently do not support CORS requests for bucket operations\n  (will probably be fixed later)\n\n### Compatibility\n\n- IE >= 10 & Edge\n- Major versions of Chrome/Firefox/Safari\n- Major versions of Android/iOS/WP\n  > Note: Because some browsers do not support promises, you need to introduce promise compatible libraries.<br>\n  > For example: IE10 and IE11 need to introduce a promise-polyfill.\n\n### Setup\n\n#### Bucket setup\n\nAs browser-side javascript involves CORS operations. You need to setup\nyour bucket CORS rules to allow CORS operations:\n\n- set allowed origins to '\\*'\n- allowed methods to 'PUT, GET, POST, DELETE, HEAD'\n- set allowed headers to '\\*'\n- expose 'ETag' in expose headers\n\n#### STS setup\n\nAs we don't want to expose the accessKeyId/accessKeySecret in the\nbrowser, a [common practice][oss-sts] is to use STS to grant temporary\naccess.\n\n### Basic usage\n\nInclude the sdk lib in the `<script>` tag and you have `OSS` available\nfor creating client.\n\n```html\n// x.x.x The specific version number represented // we recommend introducing offline resources, because the usability of\nonline resources depends on the stability of the cdn server.\n<!-- Introducing online resources -->\n<script src=\"http://gosspublic.alicdn.com/aliyun-oss-sdk-x.x.x.min.js\"></script>\n<!-- Introducing offline resources -->\n<script src=\"./aliyun-oss-sdk-x.x.x.min.js\"></script>\n\n<script type=\"text/javascript\">\n  const store = new OSS({\n    region: 'oss-cn-hangzhou',\n    accessKeyId: '<access-key-id>',\n    accessKeySecret: '<access-key-secret>',\n    bucket: '<bucket-name>',\n    stsToken: '<security-token>'\n  });\n\n  store\n    .list()\n    .then(result => {\n      console.log('objects: %j', result.objects);\n      return store.put('my-obj', new OSS.Buffer('hello world'));\n    })\n    .then(result => {\n      console.log('put result: %j', result);\n      return store.get('my-obj');\n    })\n    .then(result => {\n      console.log('get result: %j', result.content.toString());\n    });\n</script>\n```\n\nThe full sample can be found [here][browser-sample].\n\n### How to build\n\n```bash\nnpm run build-dist\n```\n\nAnd see the build artifacts under `dist/`.\n\n## Data Regions\n\n[OSS current data regions](https://help.aliyun.com/document_detail/31837.html).\n\n| region             | country   | city           | endpoint                        | internal endpoint                        |\n| ------------------ | --------- | -------------- | ------------------------------- | ---------------------------------------- |\n| oss-cn-hangzhou    | China     | HangZhou       | oss-cn-hangzhou.aliyuncs.com    | oss-cn-hangzhou-internal.aliyuncs.com    |\n| oss-cn-shanghai    | China     | ShangHai       | oss-cn-shanghai.aliyuncs.com    | oss-cn-shanghai-internal.aliyuncs.com    |\n| oss-cn-qingdao     | China     | QingDao        | oss-cn-qingdao.aliyuncs.com     | oss-cn-qingdao-internal.aliyuncs.com     |\n| oss-cn-beijing     | China     | BeiJing        | oss-cn-beijing.aliyuncs.com     | oss-cn-beijing-internal.aliyuncs.com     |\n| oss-cn-shenzhen    | China     | ShenZhen       | oss-cn-shenzhen.aliyuncs.com    | oss-cn-shenzhen-internal.aliyuncs.com    |\n| oss-cn-hongkong    | China     | HongKong       | oss-cn-hongkong.aliyuncs.com    | oss-cn-hongkong-internal.aliyuncs.com    |\n| oss-us-west-1      | US        | Silicon Valley | oss-us-west-1.aliyuncs.com      | oss-us-west-1-internal.aliyuncs.com      |\n| oss-ap-southeast-1 | Singapore | Singapore      | oss-ap-southeast-1.aliyuncs.com | oss-ap-southeast-1-internal.aliyuncs.com |\n\n## Create Account\n\nGo to [OSS website](http://www.aliyun.com/product/oss/?lang=en), create a new account for new user.\n\nAfter account created, you can create the OSS instance and get the `accessKeyId` and `accessKeySecret`.\n\n## Create A Bucket Instance\n\nEach OSS instance required `accessKeyId`, `accessKeySecret` and `bucket`.\n\n## oss(options)\n\nCreate a Bucket store instance.\n\noptions:\n\n- accessKeyId {String} access key you create on aliyun console website\n- accessKeySecret {String} access secret you create\n- [stsToken] {String} used by temporary authorization, detail [see](https://www.alibabacloud.com/help/doc-detail/32077.htm)\n- [refreshSTSToken] {Function} used by auto set `stsToken`、`accessKeyId`、`accessKeySecret` when sts info expires. return value must be object contains `stsToken`、`accessKeyId`、`accessKeySecret`\n- [refreshSTSTokenInterval] {number} use time (ms) of refresh STSToken interval it should be less than sts info expire interval, default is 300000ms(5min)\n- [bucket] {String} the default bucket you want to access\n  If you don't have any bucket, please use `putBucket()` create one first.\n- [endpoint] {String} oss region domain. It takes priority over `region`. Set as extranet domain name, intranet domain name, accelerated domain name, etc. according to different needs. please see [endpoints](https://www.alibabacloud.com/help/doc-detail/31837.htm)\n- [region] {String} the bucket data region location, please see [Data Regions](#data-regions),\n  default is `oss-cn-hangzhou`.\n- [internal] {Boolean} access OSS with aliyun internal network or not, default is `false`.\n  If your servers are running on aliyun too, you can set `true` to save a lot of money.\n- [secure] {Boolean} instruct OSS client to use HTTPS (secure: true) or HTTP (secure: false) protocol.\n- [timeout] {String|Number} instance level timeout for all operations, default is `60s`.\n- [cname] {Boolean}, default false, access oss with custom domain name. if true, you can fill `endpoint` field with your custom domain name,\n- [isRequestPay] {Boolean}, default false, whether request payer function of the bucket is open, if true, will send headers `'x-oss-request-payer': 'requester'` to oss server.\n  the details you can see [requestPay](https://help.aliyun.com/document_detail/91337.htm)\n- [useFetch] {Boolean}, default false, it just work in Browser, if true,it means upload object with\n  `fetch` mode ,else `XMLHttpRequest`\n- [enableProxy] {Boolean}, Enable proxy request, default is false.\n- [proxy] {String | Object}, proxy agent uri or options, default is null.\n- [retryMax] {Number}, used by auto retry send request count when request error is net error or timeout. **_NOTE:_** Not support `put` with stream, `putStream`, `append` with stream because the stream can only be consumed once\n- [maxSockets] {Number} Maximum number of sockets to allow per host. Default is infinity\n- [authorizationV4] {Boolean} Use V4 signature. Default is false.\n\nexample:\n\n1. basic usage\n\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou'\n});\n```\n\n2. use accelerate endpoint\n\n- Global accelerate endpoint: oss-accelerate.aliyuncs.com\n- Accelerate endpoint of regions outside mainland China: oss-accelerate-overseas.aliyuncs.com\n\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  endpoint: 'oss-accelerate.aliyuncs.com'\n});\n```\n\n3. use custom domain\n\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  cname: true,\n  endpoint: 'your custome domain'\n});\n```\n\n4. use STS and refreshSTSToken\n\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your STS key',\n  accessKeySecret: 'your STS secret',\n  stsToken: 'your STS token',\n  refreshSTSToken: async () => {\n    const info = await fetch('you sts server');\n    return {\n      accessKeyId: info.accessKeyId,\n      accessKeySecret: info.accessKeySecret,\n      stsToken: info.stsToken\n    };\n  },\n  refreshSTSTokenInterval: 300000\n});\n```\n\n5. retry request with stream\n\n```js\nfor (let i = 0; i <= store.options.retryMax; i++) {\n  try {\n    const result = await store.putStream('<example-object>', fs.createReadStream('<example-path>'));\n    console.log(result);\n    break; // break if success\n  } catch (e) {\n    console.log(e);\n  }\n}\n```\n\n6. use V4 signature, and use optional additionalHeaders option which type is a string array, and the values inside need to be included in the header.\n\n```js\nconst OSS = require('ali-oss');\n\nconst store = new OSS({\n  accessKeyId: 'your access key',\n  accessKeySecret: 'your access secret',\n  bucket: 'your bucket name',\n  region: 'oss-cn-hangzhou',\n  authorizationV4: true\n});\n\ntry {\n  const bucketInfo = await store.getBucketInfo('your bucket name');\n  console.log(bucketInfo);\n} catch (e) {\n  console.log(e);\n}\n\ntry {\n  const putObjectResult = await store.put('your bucket name', 'your object name', {\n    headers: {\n      // The headers of this request\n      'header1': 'value1',\n      'header2': 'value2'\n    },\n    // The keys of the request headers that need to be calculated into the V4 signature. Please ensure that these additional headers are included in the request headers.\n    additionalHeaders: ['additional header1', 'additional header2']\n  });\n  console.log(putObjectResult);\n} catch (e) {\n  console.log(e);\n}\n```\n\n## Bucket Operations\n\n### .listBuckets(query[, options])\n\nList buckets in this account.\n\nparameters:\n\n- [query] {Object} query parameters, default is `null`\n  - [prefix] {String} search buckets using `prefix` key\n  - [marker] {String} search start from `marker`, including `marker` key\n  - [max-keys] {String|Number} max buckets, default is `100`, limit to `1000`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return buckets list on `buckets` properties.\n\n- buckets {Array<BucketMeta>} bucket meta info list\n  Each `BucketMeta` will contains blow properties:\n  - name {String} bucket name\n  - region {String} bucket store data region, e.g.: `oss-cn-hangzhou-a`\n  - creationDate {String} bucket create GMT date, e.g.: `2015-02-19T08:39:44.000Z`\n  - storageClass {String} e.g.: `Standard`, `IA`, `Archive`\n- owner {Object} object owner, including `id` and `displayName`\n- isTruncated {Boolean} truncate or not\n- nextMarker {String} next marker string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- List top 10 buckets\n\n```js\nstore\n  .listBuckets({\n    'max-keys': 10\n  })\n  .then(result => {\n    console.log(result);\n  });\n```\n\n### .putBucket(name[, options])\n\nCreate a new bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket exists and not belong to current account, will throw BucketAlreadyExistsError.\n  If bucket not exists, will create a new bucket and set it's ACL.\n- [options] {Object} optional parameters\n  - [acl] {String} include `private`,`public-read`,`public-read-write`\n  - [storageClass] {String} the storage type include (Standard,IA,Archive)\n  - [dataRedundancyType] {String} default `LRS`, include `LRS`,`ZRS`\n  - [timeout] {Number} the operation timeout\n\nSuccess will return the bucket name on `bucket` properties.\n\n- bucket {String} bucket name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Create a bucket name `helloworld` location on HongKong\n\n```js\nstore.putBucket('helloworld').then(result => {\n  // use it by default\n  store.useBucket('helloworld');\n});\n```\n\n- Create a bucket name `helloworld` location on HongKong StorageClass `Archive`\n\n```js\nawait store.putBucket('helloworld', { StorageClass: 'Archive' });\n// use it by default\nstore.useBucket('helloworld');\n```\n\n### .deleteBucket(name[, options])\n\nDelete an empty bucket.\n\nparameters:\n\n- name {String} bucket name\n  If bucket is not empty, will throw BucketNotEmptyError.\n  If bucket is not exists, will throw NoSuchBucketError.\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Delete the exists 'helloworld' bucket on 'oss-cn-hongkong'\n\n```js\nstore.deleteBucket('helloworld').then(result => {});\n```\n\n### .useBucket(name)\n\nUse the bucket.\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.useBucket('helloworld');\n```\n\n### .getBucketInfo(name)\n\nGet bucket information,include CreationDate、ExtranetEndpoint、IntranetEndpoint、Location、Name、StorageClass、\nOwner、AccessControlList、Versioning\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketInfo('helloworld').then(res => {\n  console.log(res.bucket);\n});\n```\n\n### .getBucketStat(name)\n\nCall the GetBucketStat interface to get the storage capacity of the specified storage space (Bucket) and the number of files (Object).\n\nCalling this interface requires the oss:GetBucketStat permission.\nThe data obtained by calling this interface is not real-time data and may be delayed for more than an hour.\nThe point in time of the stored information obtained by calling this interface is not guaranteed to be up-to-date, i.e. the LastModifiedTime field returned by a later call to this interface may be smaller than the LastModifiedTime field returned by a previous call to this interface.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- stat {Object} container for the BucketStat structure:\n\n  - Storage {String} the total storage capacity of the Bucket, in bytes.\n  - ObjectCount {String} total number of Objects in the Bucket。\n  - MultipartUploadCount {String} the number of Multipart Uploads in the Bucket that have been initialized but not yet completed (Complete) or not yet aborted (Abort).\n  - LiveChannelCount {String} the number of Live Channels in the Bucket.\n  - LastModifiedTime {String} the point in time, in timestamps, when the storage information was retrieved.\n  - StandardStorage {String} the amount of storage of the standard storage type, in bytes.\n  - StandardObjectCount {String} the number of objects of the standard storage type.\n  - InfrequentAccessStorage {String} the amount of billed storage for the low-frequency storage type, in bytes.\n  - InfrequentAccessRealStorage {String} the actual storage amount of the low-frequency storage type, in bytes.\n  - InfrequentAccessObjectCount {String} the number of Objects of the low-frequency storage type.\n  - ArchiveStorage {String} the amount of billed storage for the archive storage type, in bytes.\n  - ArchiveRealStorage {String} the actual storage amount of the archive storage type, in bytes.\n  - ArchiveObjectCount {String} the number of objects of the archive storage type.\n  - ColdArchiveStorage {String} the amount of billed storage for the cold archive storage type, in bytes.\n  - ColdArchiveRealStorage {String} the actual storage amount in bytes for the cold archive storage type.\n  - ColdArchiveObjectCount {String} the number of objects of the cold archive storage type.\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- If you don't fill in the name, the default is the bucket defined during initialization.\n\n```js\nstore.getBucketStat().then(res => console.log(res));\n```\n\n### .getBucketLocation(name)\n\nGet bucket location\n\nparameters:\n\n- name {String} bucket name\n\nexample:\n\n- Use `helloworld` as the default bucket\n\n```js\nstore.getBucketLocation('helloworld').then(res => {\n  console.log(res.location);\n});\n```\n\n---\n\n### .putBucketACL(name, acl[, options])\n\nUpdate the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- acl {String} access control list, current available: `public-read-write`, `public-read` and `private`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Set bucket `helloworld` to `public-read-write`\n\n```js\nstore.putBucketACL('helloworld', 'public-read-write').then(result => {});\n```\n\n### .getBucketACL(name[, options])\n\nGet the bucket ACL.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- acl {String} acl settiongs string\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld`\n\n```js\nstore.getBucketACL('helloworld').then(result => {\n  console.log(result.acl);\n});\n```\n\n---\n\n### .putBucketLogging(name, prefix[, options])\n\nUpdate the bucket logging settings.\nLog file will create every one hour and name format: `<prefix><bucket>-YYYY-mm-DD-HH-MM-SS-UniqueString`.\n\nparameters:\n\n- name {String} bucket name\n- [prefix] {String} prefix path name to store the log files\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Enable bucket `helloworld` logging and save with prefix `logs/`\n\n```js\nstore.putBucketLogging('helloworld', 'logs/').then(result => {});\n```\n\n### .getBucketLogging(name[, options])\n\nGet the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- enable {Boolean} enable logging or not\n- prefix {String} prefix path name to store the log files, maybe `null`\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Get bucket `helloworld` logging settings\n\n```js\nstore.getBucketLogging('helloworld').then(result => {\n  console.log(result.enable, result.prefix);\n});\n```\n\n### .deleteBucketLogging(name[, options])\n\nDelete the bucket logging settings.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketWebsite(name, config[, options])\n\nSet the bucket as a static website.\n\nparameters:\n\n- name {String} bucket name\n- config {Object} website config, contains blow properties:\n  - index {String} default page, e.g.: `index.html`\n  - [error] {String} error page, e.g.: 'error.html'\n  - [supportSubDir] {String} default vaule false\n  - [type] {String} default value 0\n  - [routingRules] {Array} RoutingRules\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore\n  .putBucketWebsite('hello', {\n    index: 'index.html'\n  })\n  .then(result => {});\n```\n\n### .getBucketWebsite(name[, options])\n\nGet the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- index {String} index page\n- error {String} error page, maybe `null`\n- supportSubDir {String}\n- type {String}\n- routingRules {Array}\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketWebsite(name[, options])\n\nDelete the bucket website config.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketReferer(name, allowEmpty, referers[, options])\n\nSet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list, e.g.:\n  ```js\n  ['https://npm.taobao.org', 'http://cnpmjs.org'];\n  ```\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore.putBucketReferer('hello', false, ['https://npm.taobao.org', 'http://cnpmjs.org']).then(result => {});\n```\n\n### .getBucketReferer(name[, options])\n\nGet the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- allowEmpty {Boolean} allow empty request referer or not\n- referers {Array<String>} `Referer` white list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketReferer(name[, options])\n\nDelete the bucket request `Referer` white list.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketLifecycle(name, rules[, options])\n\nSet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains blow properties:\n  - [id] {String} rule id, if not set, OSS will auto create it with random string.\n  - prefix {String} store prefix\n  - status {String} rule status, allow values: `Enabled` or `Disabled`\n  - [expiration] {Object} specifies the expiration attribute of the lifecycle rules for the object.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n    - [expiredObjectDeleteMarker] {String} value `true`\n      `createdBeforeDate` and `days` and `expiredObjectDeleteMarker` must have one.\n  - [abortMultipartUpload] {Object} Specifies the expiration attribute of the multipart upload tasks that are not complete.\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n      `createdBeforeDate` and `days` must have one.\n  - [transition] {Object} Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle.\n    - storageClass {String} Specifies the storage class that objects that conform to the rule are converted into. allow values: `IA` or `Archive`\n    - [days] {Number|String} expire after the `days`\n    - [createdBeforeDate] {String} expire date, e.g.: `2022-10-11T00:00:00.000Z`\n      `createdBeforeDate` and `days` must have one.\n  - [noncurrentVersionTransition] {Object} Specifies the time when an object is converted to the IA or archive storage class during a valid life cycle.\n    - storageClass {String} Specifies the storage class that history objects that conform to the rule are converted into. allow values: `IA` or `Archive`\n    - noncurrentDays {String} expire after the `noncurrentDays`\n      `expiration`、 `abortMultipartUpload`、 `transition`、 `noncurrentVersionTransition` must have one.\n  - [noncurrentVersionExpiration] {Object} specifies the expiration attribute of the lifecycle rules for the history object.\n    - noncurrentDays {String} expire after the `noncurrentDays`\n  - [tag] {Object} Specifies the object tag applicable to a rule. Multiple tags are supported.\n    - key {String} Indicates the tag key.\n    - value {String} Indicates the tag value.\n      `tag` cannot be used with `abortMultipartUpload`\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore\n  .putBucketLifecycle('hello', [\n    {\n      id: 'delete after one day',\n      prefix: 'logs/',\n      status: 'Enabled',\n      days: 1\n    },\n    {\n      prefix: 'logs2/',\n      status: 'Disabled',\n      date: '2022-10-11T00:00:00.000Z'\n    }\n  ])\n  .then(result => {});\n```\n\nexample: for history with noncurrentVersionExpiration\n\n```js\nconst result = await store.putBucketLifecycle(bucket, [\n  {\n    id: 'expiration1',\n    prefix: 'logs/',\n    status: 'Enabled',\n    expiration: {\n      days: '1'\n    },\n    noncurrentVersionExpiration: {\n      noncurrentDays: '1'\n    }\n  }\n]);\nconsole.log(result);\n```\n\nexample: for history with expiredObjectDeleteMarker\n\n```js\nconst result = await store.putBucketLifecycle(bucket, [\n  {\n    id: 'expiration1',\n    prefix: 'logs/',\n    status: 'Enabled',\n    expiration: {\n      expiredObjectDeleteMarker: 'true'\n    },\n    noncurrentVersionExpiration: {\n      noncurrentDays: '1'\n    }\n  }\n]);\nconsole.log(result);\n```\n\nexample: for history with noncurrentVersionTransition\n\n```js\nconst result = await store.putBucketLifecycle(bucket, [\n  {\n    id: 'expiration1',\n    prefix: 'logs/',\n    status: 'Enabled',\n    noncurrentVersionTransition: {\n      noncurrentDays: '10',\n      storageClass: 'IA'\n    }\n  }\n]);\nconsole.log(result);\n```\n\n### .getBucketLifecycle(name[, options])\n\nGet the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the lifecycle rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketLifecycle(name[, options])\n\nDelete the bucket object lifecycle.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n---\n\n### .putBucketCORS(name, rules[, options])\n\nSet CORS rules of the bucket object\n\nparameters:\n\n- name {String} bucket name\n- rules {Array<Rule>} rule config list, each `Rule` will contains below properties:\n  - allowedOrigin {String/Array} configure for Access-Control-Allow-Origin header\n  - allowedMethod {String/Array} configure for Access-Control-Allow-Methods header\n  - [allowedHeader] {String/Array} configure for Access-Control-Allow-Headers header\n  - [exposeHeader] {String/Array} configure for Access-Control-Expose-Headers header\n  - [maxAgeSeconds] {String} configure for Access-Control-Max-Age header\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n```js\nstore\n  .putBucketCORS('hello', [\n    {\n      allowedOrigin: '*',\n      allowedMethod: ['GET', 'HEAD']\n    }\n  ])\n  .then(result => {});\n```\n\n### .getBucketCORS(name[, options])\n\nGet CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- rules {Array<Rule>} the CORS rule list\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .deleteBucketCORS(name[, options])\n\nDelete CORS rules of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n\nSuccess will return:\n\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\n### .getBucketRequestPayment(bucketName[, options])\n\nget RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String} bucket name\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- payer {String} payer, BucketOwner or Requester\n- res {Object} response info, including\n  - data {Buffer} xml\n\n---\n\n### .putBucketRequestPayment(bucketName, payer[, options])\n\nput RequestPayment value of the bucket object.\n\nparameters:\n\n- bucketName {String}\n- payer {String} payer\n- [options] {Object} optional parameters\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketEncryption(name, rules)\n\nput BucketEncryption value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n- [rules] {Object} parameters\n  - SSEAlgorithm {String} encryption type, expect AES256 or KMS\n  - {KMSMasterKeyID} {String} needed when encryption type is KMS\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketEncryption(name)\n\nget BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n- encryption {Object} rules\n  - SSEAlgorithm {String} encryption type, AES256 or KMS\n  - {KMSMasterKeyID} {String} will be return when encryption type is KMS\n\n---\n\n### .deleteBucketEncryption(name)\n\ndelete BucketEncryption rule value of the bucket object.\n\nparameters:\n\n- name {String} bucket name\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketTags(name, tag[, options])\n\nAdds tags for a bucket or modify the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- tag {Object} tag, eg. `{var1: value1,var2:value2}`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketTags(name[, options])\n\nObtains the tags for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- tag {Object} the tag of object\n- res {Object} response info\n\n---\n\n### .deleteBucketTags(name[, options])\n\nDeletes the tags added for a bucket.\n\nparameters:\n\n- name {String} the object name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .putBucketPolicy(name, policy[, options])\n\nAdds or modify policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- policy {Object} bucket policy\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\nexample:\n\n```js\nconst policy = {\n  Version: '1',\n  Statement: [\n    {\n      Action: ['oss:PutObject', 'oss:GetObject'],\n      Effect: 'Deny',\n      Principal: ['1234567890'],\n      Resource: ['acs:oss:*:1234567890:*/*']\n    }\n  ]\n};\nconst result = await store.putBucketPolicy(bucket, policy);\nconsole.log(result);\n```\n\n---\n\n### .getBucketPolicy(name[, options])\n\nObtains the policy for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- policy {Object} the policy of bucket, if not exist, the value is null\n- res {Object} response info\n- status {Number} response status\n\n---\n\n### .deleteBucketPolicy(name[, options])\n\nDeletes the policy added for a bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketVersioning(name[, options])\n\nObtains the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- versionStatus {String | undefined} version status, `Suspended` or `Enabled`. default value: `undefined`\n- res {Object} response info\n\n---\n\n### .putBucketVersioning(name, status[, options])\n\nset the version status of an object\n\nparameters:\n\n- name {String} the bucket name\n- status {String} version status, allow values: `Enabled` or `Suspended`\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketInventory(name, inventoryId[, options])\n\nget bucket inventory by inventory-id\n\nparameters:\n\n- name {String} the bucket name\n- inventoryId {String} inventory-id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- inventory {Inventory}\n- status {Number} response status\n- res {Object} response info\n\n```js\nasync function getBucketInventoryById() {\n  try {\n    const result = await store.getBucketInventory('bucket', 'inventoryid');\n    console.log(result.inventory);\n  } catch (err) {\n    console.log(err);\n  }\n}\n\ngetBucketInventoryById();\n```\n\n### putBucketInventory(name, inventory[, options])\n\nset bucket inventory\n\nparameters:\n\n- name {String} the bucket name\n- inventory {Inventory} inventory config\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n```ts\ntype Field = 'Size | LastModifiedDate | ETag | StorageClass | IsMultipartUploaded | EncryptionStatus';\ninterface Inventory {\n  id: string;\n  isEnabled: true | false;\n  prefix?: string;\n  OSSBucketDestination: {\n    format: 'CSV';\n    accountId: string;\n    rolename: string;\n    bucket: string;\n    prefix?: string;\n    encryption?:\n      | { 'SSE-OSS': '' }\n      | {\n          'SSE-KMS': {\n            keyId: string;\n          };\n        };\n  };\n  frequency: 'Daily' | 'Weekly';\n  includedObjectVersions: 'Current' | 'All';\n  optionalFields?: {\n    field?: Field[];\n  };\n}\n```\n\n```js\nconst inventory = {\n  id: 'default',\n  isEnabled: false, // `true` | `false`\n  prefix: 'ttt', // filter prefix\n  OSSBucketDestination: {\n    format: 'CSV',\n    accountId: '1817184078010220',\n    rolename: 'AliyunOSSRole',\n    bucket: 'your bucket',\n    prefix: 'test'\n    //encryption: {'SSE-OSS': ''},\n    /*\n      encryption: {\n      'SSE-KMS': {\n        keyId: 'test-kms-id';\n      };,\n    */\n  },\n  frequency: 'Daily', // `WEEKLY` | `Daily`\n  includedObjectVersions: 'All', // `All` | `Current`\n  optionalFields: {\n    field: ['Size', 'LastModifiedDate', 'ETag', 'StorageClass', 'IsMultipartUploaded', 'EncryptionStatus']\n  }\n};\n\nasync function putInventory() {\n  const bucket = 'Your Bucket Name';\n  try {\n    await store.putBucketInventory(bucket, inventory);\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nputInventory();\n```\n\n### deleteBucketInventory(name, inventoryId[, options])\n\ndelete bucket inventory by inventory-id\n\nparameters:\n\n- name {String} the bucket name\n- inventoryId {String} inventory-id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n### listBucketInventory(name[, options])\n\nlist bucket inventory\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n  - continuationToken used by search next page\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\nexample:\n\n```js\nasync function listBucketInventory() {\n  const bucket = 'Your Bucket Name';\n  let nextContinuationToken;\n  // list all inventory of the bucket\n  do {\n    const result = await store.listBucketInventory(bucket, nextContinuationToken);\n    console.log(result.inventoryList);\n    nextContinuationToken = result.nextContinuationToken;\n  } while (nextContinuationToken);\n}\n\nlistBucketInventory();\n```\n\n### .abortBucketWorm(name[, options])\n\nused to delete an unlocked retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .completeBucketWorm(name, wormId[, options])\n\nused to lock a retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- wormId {String} worm id\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .extendBucketWorm(name, wormId, days[, options])\n\nused to extend the retention period of objects in a bucket whose retention policy is locked.\n\nparameters:\n\n- name {String} the bucket name\n- wormId {String} worm id\n- days {String | Number} retention days\n- [options] {Object} optional args\n\nSuccess will return:\n\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .getBucketWorm(name[, options])\n\nused to query the retention policy information of the specified bucket.\n\nparameters:\n\n- name {String} the bucket name\n- [options] {Object} optional args\n\nSuccess will return:\n\n- wormId {String} worm id\n- state {String} `Locked` or `InProgress`\n- days {String} retention days\n- creationDate {String}\n- status {Number} response status\n- res {Object} response info\n\n---\n\n### .initiateBucketWorm(name, days[, options])\n\ncreate a retention policy.\n\nparameters:\n\n- name {String} the bucket name\n- days {String | Number}} set retention days\n- [options] {Object} optional args\n\nSuccess will return:\n\n- wormId {String} worm id\n- status {Number} response status\n- res {Object} response info\n\n---\n\n## Object Operations\n\nAll operations function return Promise, except `signatureUrl`.\n\n### .put(name, file[, options])\n\nAdd an object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream|File(only support Browser)|Blob(only support Browser)} object local path, content buffer or ReadStream content instance use in Node, Blob and html5 File\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout (ms)\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, `key=${key}&etag=${etag}&my_var=${x:my_var}`.\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n      e.g.:\n      ```js\n      var customValue = { var1: 'value1', var2: 'value2' };\n      ```\n  - [headers] {Object} extra headers\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n    - See more: [PutObject](https://help.aliyun.com/document_detail/31978.html#title-yxe-96d-x61)\n  - [disabledMD5] {Boolean} default true, it just work in Browser. if false,it means that MD5 is automatically calculated for uploaded files. **_NOTE:_** Synchronous computing tasks will block the main process\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- data {Object} callback server response data, sdk use JSON.parse() return\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through local file path\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/demo.txt', filepath).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/demo.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829244'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through content buffer\n\n```js\nstore.put('ossdemo/buffer', Buffer.from('foo content')).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/buffer',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/buffer',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"xxx\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829243'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.put('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .putStream(name, stream[, options])\n\nAdd a stream object to the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- stream {ReadStream} object ReadStream content instance\n- [options] {Object} optional parameters\n  - [contentLength] {Number} the stream length, `chunked encoding` will be used if absent\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [callback] {Object} The callback parameter is composed of a JSON string encoded in Base64,detail [see](https://www.alibabacloud.com/help/doc-detail/31989.htm)<br>\n    - url {String} After a file is uploaded successfully, the OSS sends a callback request to this URL.\n    - [host] {String} The host header value for initiating callback requests.\n    - body {String} The value of the request body when a callback is initiated, for example, key=${key}&etag=${etag}&my_var=${x:my_var}.\n    - [contentType] {String} The Content-Type of the callback requests initiatiated, It supports application/x-www-form-urlencoded and application/json, and the former is the default value.\n    - [customValue] {Object} Custom parameters are a map of key-values<br>\n      e.g.:\n      ```js\n      var customValue = { var1: 'value1', var2: 'value2' };\n      ```\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n\nSuccess will return the object information.\n\nobject:\n\n- name {String} object name\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Add an object through readstream\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nstore.putStream('ossdemo/readstream.txt', fs.createReadStream(filepath)).then((result) => {\n  console.log(result);\n});\n\n{\n  name: 'ossdemo/readstream.txt',\n  url: 'http://demo.oss-cn-hangzhou.aliyuncs.com/ossdemo/readstream.txt',\n  res: {\n    status: 200,\n    headers: {\n      date: 'Tue, 17 Feb 2015 13:28:17 GMT',\n      'content-length': '0',\n      connection: 'close',\n      etag: '\"BF7A03DA01440845BC5D487B369BC168\"',\n      server: 'AliyunOSS',\n      'x-oss-request-id': '54E341F1707AA0275E829242'\n    },\n    size: 0,\n    rt: 92\n  }\n}\n```\n\n### .append(name, file[, options])\n\nAppend an object to the bucket, it's almost same as put, but it can add content to existing object rather than override it.\n\nAll parameters are same as put except for options.position\n\n- name {String} object name store on OSS\n- file {String|Buffer|ReadStream} object local path, content buffer or ReadStream content instance\n- [options] {Object} optional parameters\n  - [position] {String} specify the position which is the content length of the latest object\n  - [timeout] {Number} the operation timeout\n  - [mime] {String} custom mime, will send with `Content-Type` entity header\n  - [meta] {Object} user meta, will send with `x-oss-meta-` prefix string\n    e.g.: `{ uid: 123, pid: 110 }`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Cache-Control' cache control for download, e.g.: `Cache-Control: public, no-cache`\n    - 'Content-Disposition' object name for download, e.g.: `Content-Disposition: somename`\n    - 'Content-Encoding' object content encoding for download, e.g.: `Content-Encoding: gzip`\n    - 'Expires' expires time for download, an absolute date and time. e.g.: `Tue, 08 Dec 2020 13:49:43 GMT`\n\nobject:\n\n- name {String} object name\n- url {String} the url of oss\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n- nextAppendPosition {String} the next position（The browser needs to set cross domain and expose the x-oss-next-append-position header）\n\nexample:\n\n```js\nlet object = await store.append('ossdemo/buffer', Buffer.from('foo'));\n\n// append content to the existing object\nobject = await store.append('ossdemo/buffer', Buffer.from('bar'), {\n  position: object.nextAppendPosition\n});\n```\n\n### .getObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `endpoint`.\n\ne.g.:\n\n```js\nconst cdnUrl = store.getObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .generateObjectUrl(name[, baseUrl])\n\nGet the Object url.\nIf provide `baseUrl`, will use `baseUrl` instead the default `bucket and endpoint `.\nSuggest use generateObjectUrl instead of getObjectUrl.\n\ne.g.:\n\n```js\nconst url = store.generateObjectUrl('foo/bar.jpg');\n// cdnUrl should be `https://${bucketname}.${endpotint}foo/bar.jpg`\n\nconst cdnUrl = store.generateObjectUrl('foo/bar.jpg', 'https://mycdn.domian.com');\n// cdnUrl should be `https://mycdn.domian.com/foo/bar.jpg`\n```\n\n### .head(name[, options])\n\nHead an object and get the meta info.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n      otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n      otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n      otherwise return 304 not modified\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status, maybe 200 or 304\n- meta {Object} object user meta, if not set on `put()`, will return null.\n  If return status 304, meta will be null too\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n    - [x-oss-version-id] return in multiversion\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nexample:\n\n- Head an exists object and get user meta\n\n```js\nawait this.store.put('ossdemo/head-meta', Buffer.from('foo'), {\n  meta: {\n    uid: 1,\n    path: 'foo/demo.txt'\n  }\n});\nconst object = await this.store.head('ossdemo/head-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  meta: {\n    uid: '1',\n    path: 'foo/demo.txt'\n  },\n  res: { ... }\n}\n```\n\n- Head a not exists object\n\n```js\nconst object = await this.store.head('ossdemo/head-meta');\n// will throw NoSuchKeyError\n```\n\n### .getObjectMeta(name[, options])\n\nGet an object meta info include ETag、Size、LastModified and so on, not return object content.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [versionId] {String} the version id of history object\n\nSuccess will return the object's meta information.\n\nobject:\n\n- status {Number} response status\n- res {Object} response info, including\n  - headers {Object} response headers\n\nexample:\n\n- Head an exists object and get object meta info\n\n```js\nawait this.store.put('ossdemo/object-meta', Buffer.from('foo'));\nconst object = await this.store.getObjectMeta('ossdemo/object-meta');\nconsole.log(object);\n\n{\n  status: 200,\n  res: { ... }\n}\n```\n\n### .get(name[, file, options])\n\nGet an object from the bucket.\n\nparameters:\n\n- name {String} object name store on OSS\n- [file] {String|WriteStream} file path or WriteStream instance to store the content\n  If `file` is null or ignore this parameter, function will return info contains `content` property.\n- [options] {Object} optional parameters\n  - [versionId] {String} the version id of history object\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n    e.g.: `{process: 'image/resize,w_200'}`\n  - [responseCacheControl] {String} default `no-cache`, (only support Browser). response-cache-control, will response with HTTP Header `Cache-Control`\n  - [headers] {Object} extra headers, detail see [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html)\n    - 'Range' get specifying range bytes content, e.g.: `Range: bytes=0-9`\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n      otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n      otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n      otherwise return 304 not modified\n\nSuccess will return the info contains response.\n\nobject:\n\n- [content] {Buffer} file content buffer if `file` parameter is null or ignore\n- res {Object} response info, including\n  - status {Number} response status\n  - headers {Object} response headers\n  - size {Number} response size\n  - rt {Number} request total use time (ms)\n\nIf object not exists, will throw NoSuchKeyError.\n\nexample:\n\n- Get an exists object and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/demo.txt', filepath);\n```\n\n\\_ Store object to a writestream\n\n```js\nawait store.get('ossdemo/demo.txt', somestream);\n```\n\n- Get an object content buffer\n\n```js\nconst result = await store.get('ossdemo/demo.txt');\nconsole.log(Buffer.isBuffer(result.content));\n```\n\n- Get a processed image and store it to the local file\n\n```js\nconst filepath = '/home/ossdemo/demo.png';\nawait store.get('ossdemo/demo.png', filepath, { process: 'image/resize,w_200' });\n```\n\n- Get a not exists object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nawait store.get('ossdemo/not-exists-demo.txt', filepath);\n// will throw NoSuchKeyError\n```\n\n- Get a historic version object\n\n```js\nconst filepath = '/home/ossdemo/demo.txt';\nconst versionId = 'versionId string';\nawait store.get('ossdemo/not-exists-demo.txt', filepath, {\n  versionId\n});\n```\n\n### .getStream(name[, options])\n\nGet an object read stream.\n\nparameters:\n\n- name {String} object name store on OSS\n- [options] {Object} optional parameters\n  - [timeout] {Number} the operation timeout\n  - [process] {String} image process params, will send with `x-oss-process`\n  - [headers] {Object} extra headers\n    - 'If-Modified-Since' object modified after this time will return 200 and object meta,\n      otherwise return 304 not modified\n    - 'If-Unmodified-Since' object modified before this time will return 200 and object meta,\n      otherwise throw PreconditionFailedError\n    - 'If-Match' object etag equal this will return 200 and object meta,\n      otherwise throw PreconditionFailedError\n    - 'If-None-Match' object etag not equal this will return 200 and object meta,\n      otherwise return 304 not modified\n\nSuccess will return the stream instance and response info.\n\nobject:\n\n- stream {ReadStream} readable stream instance. If response status is not `200`, stream will be `null`.\n- res {Object} response info, including\n  - status {Number} response st",
  "maintainers": [
    {
      "name": "dead_horse",
      "email": "dead_horse@qq.com"
    },
    {
      "name": "peizerao",
      "email": "peizerao@gmail.com"
    },
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com"
    },
    {
      "name": "popomore",
      "email": "sakura9515@gmail.com"
    },
    {
      "name": "haibing.w",
      "email": "binghaiwang@gmail.com"
    },
    {
      "name": "jackycheung888",
      "email": "2378278470@qq.com"
    },
    {
      "name": "qq1019272778",
      "email": "1019272778@qq.com"
    }
  ],
  "time": {
    "modified": "2024-01-19T10:05:03.565Z",
    "created": "2014-04-06T03:59:12.662Z",
    "0.0.0": "2014-04-06T03:59:12.662Z",
    "0.0.1": "2014-04-08T15:32:07.163Z",
    "0.0.2": "2014-04-09T18:20:51.067Z",
    "0.0.3": "2014-04-11T09:58:55.536Z",
    "1.0.0": "2014-10-26T06:38:01.153Z",
    "1.1.0": "2015-01-30T16:33:26.095Z",
    "2.0.0": "2015-02-27T17:14:58.509Z",
    "2.1.0": "2015-03-23T14:08:47.422Z",
    "2.2.0": "2015-04-02T09:14:01.907Z",
    "2.4.0": "2015-08-14T17:43:39.317Z",
    "2.5.0": "2015-08-22T05:51:34.712Z",
    "2.5.1": "2015-08-24T10:13:11.831Z",
    "2.6.0": "2015-09-07T15:50:55.450Z",
    "2.6.1": "2015-09-09T14:15:21.231Z",
    "2.7.0": "2015-09-22T14:51:22.228Z",
    "2.8.0": "2015-09-29T05:11:31.754Z",
    "3.0.0": "2015-09-30T09:00:45.123Z",
    "3.0.1": "2015-09-30T09:58:01.741Z",
    "3.0.2": "2015-10-01T03:12:23.304Z",
    "3.0.3": "2015-10-03T03:30:10.814Z",
    "3.1.0": "2015-10-23T07:30:32.938Z",
    "3.1.1": "2015-10-23T09:04:54.300Z",
    "3.1.2": "2015-10-26T04:43:49.460Z",
    "3.1.3": "2015-12-18T08:23:11.906Z",
    "4.0.0": "2016-01-22T15:19:29.878Z",
    "4.0.1": "2016-01-25T06:01:36.583Z",
    "3.1.4": "2016-01-26T08:35:23.294Z",
    "4.1.0": "2016-01-26T15:34:14.594Z",
    "4.1.2": "2016-01-27T06:47:07.270Z",
    "4.1.3": "2016-01-27T09:37:41.066Z",
    "4.1.4": "2016-01-28T06:05:43.380Z",
    "4.1.5": "2016-03-02T11:38:40.548Z",
    "3.1.5": "2016-03-08T06:55:31.889Z",
    "4.1.6": "2016-03-16T04:19:56.313Z",
    "4.1.7": "2016-03-30T09:20:16.068Z",
    "4.2.0": "2016-04-07T08:47:35.111Z",
    "4.2.1": "2016-04-07T10:10:44.976Z",
    "4.2.2": "2016-04-12T10:39:52.796Z",
    "4.3.0": "2016-04-14T05:56:58.332Z",
    "4.4.0": "2016-04-28T12:15:06.065Z",
    "4.4.1": "2016-05-04T05:20:13.793Z",
    "4.4.2": "2016-05-05T10:29:06.006Z",
    "4.4.3": "2016-05-17T04:03:20.765Z",
    "4.4.4": "2016-06-03T16:59:01.363Z",
    "4.5.0": "2016-10-13T03:11:04.041Z",
    "4.6.0": "2016-10-27T13:02:55.207Z",
    "4.6.2": "2016-10-28T12:14:53.378Z",
    "4.6.3": "2016-12-20T09:04:46.096Z",
    "4.7.0": "2017-01-05T14:33:08.194Z",
    "4.7.1": "2017-01-05T16:19:00.770Z",
    "4.7.3": "2017-01-06T11:28:45.373Z",
    "4.8.0": "2017-01-18T17:40:37.371Z",
    "4.9.0": "2017-07-28T07:26:58.885Z",
    "4.10.0": "2017-08-07T15:35:12.591Z",
    "4.10.1": "2017-08-30T06:52:57.886Z",
    "4.10.2": "2017-10-20T06:08:55.151Z",
    "4.11.0": "2017-10-25T02:54:38.980Z",
    "4.11.1": "2017-11-07T06:47:09.136Z",
    "4.11.2": "2017-11-07T07:55:09.311Z",
    "4.11.3": "2017-12-21T09:16:35.812Z",
    "4.11.4": "2018-01-09T09:06:33.008Z",
    "4.12.1": "2018-02-01T03:27:31.931Z",
    "4.12.2": "2018-02-01T12:24:11.099Z",
    "4.13.0": "2018-03-08T01:30:23.004Z",
    "4.13.1": "2018-03-11T13:49:52.559Z",
    "4.13.2": "2018-03-13T07:49:53.689Z",
    "4.14.1": "2018-04-03T05:58:15.066Z",
    "5.0.0": "2018-04-03T07:52:46.581Z",
    "4.14.2": "2018-04-03T09:41:38.962Z",
    "5.0.1": "2018-04-13T03:33:16.539Z",
    "4.15.0": "2018-04-14T08:39:39.702Z",
    "5.1.0": "2018-04-14T08:45:37.770Z",
    "5.1.1": "2018-04-16T12:02:09.768Z",
    "5.2.0": "2018-05-08T05:57:05.287Z",
    "5.3.0": "2018-06-20T06:21:38.510Z",
    "5.3.1": "2018-06-28T02:54:52.767Z",
    "6.0.0": "2018-07-10T09:33:46.989Z",
    "5.3.2": "2018-07-17T17:50:54.996Z",
    "6.0.1": "2018-07-18T11:01:06.352Z",
    "4.15.1": "2018-07-19T08:10:37.925Z",
    "6.0.2": "2018-12-10T03:12:06.817Z",
    "6.1.0": "2019-01-07T03:42:09.872Z",
    "6.1.1-beta.1": "2019-04-09T05:37:05.598Z",
    "6.1.1": "2019-04-10T07:55:36.320Z",
    "4.16.0": "2019-05-14T14:19:13.243Z",
    "6.2.0": "2019-11-14T03:44:56.582Z",
    "6.2.1": "2019-11-15T10:01:06.959Z",
    "6.3.0": "2019-12-02T02:41:29.589Z",
    "6.3.1": "2019-12-03T07:00:42.002Z",
    "6.4.0": "2019-12-27T08:29:39.239Z",
    "6.4.0-beta": "2020-01-06T01:50:39.627Z",
    "6.4.0-beta-1": "2020-01-07T08:06:37.071Z",
    "6.5.0": "2020-01-16T09:07:14.753Z",
    "6.5.1": "2020-01-17T10:01:32.215Z",
    "6.6.0": "2020-04-07T07:34:48.905Z",
    "6.7.0": "2020-04-17T05:47:21.023Z",
    "6.8.0-beta": "2020-04-28T11:06:12.239Z",
    "6.8.0": "2020-05-12T07:54:46.718Z",
    "6.9.0": "2020-06-05T09:03:53.112Z",
    "6.9.1": "2020-06-15T08:35:57.974Z",
    "6.10.0": "2020-07-14T02:25:52.348Z",
    "7.0.0-beta.1": "2020-08-27T12:20:34.969Z",
    "6.11.0": "2020-10-09T09:54:25.623Z",
    "6.11.1": "2020-10-09T10:05:40.484Z",
    "6.11.2": "2020-10-10T05:21:55.500Z",
    "6.12.0": "2020-12-03T06:14:11.755Z",
    "6.13.0": "2021-01-06T07:02:58.104Z",
    "6.13.1": "2021-01-07T06:41:52.013Z",
    "6.13.2": "2021-01-21T07:41:53.247Z",
    "7.0.0-test.1": "2021-03-01T07:33:11.330Z",
    "6.14.0": "2021-03-19T06:10:54.137Z",
    "6.14.1": "2021-03-23T09:26:39.984Z",
    "6.15.0": "2021-03-26T02:25:55.176Z",
    "6.15.1": "2021-04-01T08:17:31.336Z",
    "6.15.2": "2021-04-01T08:30:32.439Z",
    "6.15.2-parallel.1": "2021-06-15T08:43:42.389Z",
    "6.15.2-parallel.2": "2021-06-15T08:54:11.618Z",
    "6.15.2-parallel.3": "2021-06-16T03:48:51.913Z",
    "6.16.0": "2021-07-12T08:03:03.941Z",
    "6.17.0-beta.1": "2022-01-27T06:29:49.081Z",
    "6.17.0": "2022-02-10T02:35:51.556Z",
    "6.17.1": "2022-02-10T08:09:44.428Z",
    "6.18.0": "2023-08-02T01:48:34.566Z",
    "6.19.0-audit.1": "2023-08-10T07:12:41.720Z",
    "6.18.1": "2023-09-11T07:29:53.086Z",
    "6.19.0": "2023-12-18T09:39:02.500Z",
    "6.20.0": "2024-01-19T10:05:03.383Z"
  },
  "homepage": "https://github.com/ali-sdk/ali-oss",
  "keywords": [
    "oss",
    "client",
    "file",
    "aliyun"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ali-sdk/ali-oss.git"
  },
  "author": {
    "name": "dead_horse"
  },
  "bugs": {
    "url": "https://github.com/ali-sdk/ali-oss/issues"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "contributors": [
    {
      "name": "PeterRao",
      "email": "peizerao@gmail.com",
      "url": "https://github.com/PeterRao"
    },
    {
      "name": "dead_horse",
      "email": "dead_horse@qq.com"
    },
    {
      "name": "chunpu",
      "email": "fengtong@mail.ustc.edu.cn"
    },
    {
      "name": "fengmk2",
      "email": "m@fengmk2.com",
      "url": "https://github.com/fengmk2"
    },
    {
      "name": "Yan Qing",
      "email": "admin@zensh.com",
      "url": "https://github.com/zensh"
    },
    {
      "name": "mars-coder",
      "email": "mars.ll@alibaba-inc.com",
      "url": "https://github.com/mars-coder"
    },
    {
      "name": "Jacky Tang",
      "email": "jackytck@gmail.com",
      "url": "https://github.com/jackytck"
    }
  ],
  "users": {
    "noyobo": true,
    "nickeltobias": true,
    "xueboren": true,
    "xinwangwang": true,
    "liupengbo": true,
    "shapl": true,
    "mobeicaoyuan": true,
    "flitrue": true
  }
}