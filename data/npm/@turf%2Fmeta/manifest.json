{
  "_id": "@turf/meta",
  "_rev": "124-451a2a4f0a6afafeb14e905940634caf",
  "name": "@turf/meta",
  "description": "turf meta module",
  "dist-tags": {
    "latest": "6.5.0",
    "canary": "3.5.2-alpha.d2c36ee7",
    "prerelease": "7.0.0-alpha.113"
  },
  "versions": {
    "3.0.15": {
      "name": "@turf/meta",
      "version": "3.0.15",
      "description": "meta and functional programming helpers for turf modules",
      "main": "index.js",
      "scripts": {
        "test": "tape test.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Tom MacWright"
      },
      "license": "ISC",
      "devDependencies": {
        "tape": "^3.4.0",
        "@turf/random": "^3.0.15"
      },
      "repository": {
        "type": "git",
        "url": "git+ssh://git@github.com/Turfjs/turf-meta.git"
      },
      "dependencies": {},
      "bugs": {
        "url": "https://github.com/Turfjs/turf-meta/issues"
      },
      "homepage": "https://github.com/Turfjs/turf-meta#readme",
      "_id": "@turf/meta@3.0.15",
      "_shasum": "87dbdaeb5ac1f4e5fec0c8b2edf89f585e446909",
      "_from": ".",
      "_npmVersion": "2.15.8",
      "_nodeVersion": "4.4.7",
      "_npmUser": {
        "name": "tmcw",
        "email": "tom@macwright.org"
      },
      "dist": {
        "shasum": "87dbdaeb5ac1f4e5fec0c8b2edf89f585e446909",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.0.15.tgz",
        "integrity": "sha512-LaCyRQVZ9QIdJsV7X0pPrlaR0WVyg1OZzMRxoFtSfBY+GHFlEPUyV9JXN2tbhJPeP2BGv3B8YNjMV05kxi1pIg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHLlIenOQ6y9vzUoQ0K4hNUZT9ynd4+i9rVWveBg6hpjAiBuwoeeC82NJh+Bsfc5Mv7kRJGVqu17QlP6f0EUPVgZ5g=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/meta-3.0.15.tgz_1467820692857_0.9919460129458457"
      },
      "directories": {}
    },
    "3.0.16": {
      "name": "@turf/meta",
      "version": "3.0.16",
      "description": "meta and functional programming helpers for turf modules",
      "main": "index.js",
      "scripts": {
        "test": "tape test.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Tom MacWright"
      },
      "license": "ISC",
      "devDependencies": {
        "tape": "^3.4.0",
        "@turf/random": "^3.0.16"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "dependencies": {},
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "_id": "@turf/meta@3.0.16",
      "_shasum": "8c01913c0ba73e30a54296cb4429c7d45c682e75",
      "_from": ".",
      "_npmVersion": "2.15.8",
      "_nodeVersion": "4.4.7",
      "_npmUser": {
        "name": "tmcw",
        "email": "tom@macwright.org"
      },
      "dist": {
        "shasum": "8c01913c0ba73e30a54296cb4429c7d45c682e75",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.0.16.tgz",
        "integrity": "sha512-wV/GcqMlFHZb6gPvXUl0BolVY+pol2LZdfbAKfGhe7k1zeHfdzLiC+p3n1OfmQmI2hjt6czHhTCZQul4JfuOlA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIFE7oIar/sdy5wGRmu9X0ub9OO4lSKZh/55nidP6aha8AiEAuLMEZlhfm9V4FcPzGm2ZJhVltnV+Mhd16ZA4E9MByAY="
          }
        ]
      },
      "maintainers": [
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/meta-3.0.16.tgz_1467825409574_0.6875669036526233"
      },
      "directories": {}
    },
    "3.1.1": {
      "name": "@turf/meta",
      "version": "3.1.1",
      "description": "meta and functional programming helpers for turf modules",
      "main": "index.js",
      "scripts": {
        "test": "tape test.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Tom MacWright"
      },
      "license": "ISC",
      "devDependencies": {
        "tape": "^3.4.0",
        "@turf/random": "^3.0.16"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "dependencies": {},
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "_id": "@turf/meta@3.1.1",
      "_shasum": "0686109bdf8c775e52ec9edc489ba8546e6d3da8",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "4.4.7",
      "_npmUser": {
        "name": "tmcw",
        "email": "tom@macwright.org"
      },
      "dist": {
        "shasum": "0686109bdf8c775e52ec9edc489ba8546e6d3da8",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.1.1.tgz",
        "integrity": "sha512-XDnU0DWlH9uVsCdoUzzBiUiDJnm3giofjkGAUvQanrxYX5u/vJO/yKb4isnOMLDZnnZIee10YHlPP79GSI832g==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHxeuoZmuj7Jw7zcQxs9drudT0ZSllaTuPjbOyb3fsNFAiBmmGu1cxBPqp/dWESi+kJsrsgTNw9a7rShKpoM7Pb5Bw=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/meta-3.1.1.tgz_1468327292162_0.9094677651301026"
      },
      "directories": {}
    },
    "3.1.2": {
      "name": "@turf/meta",
      "version": "3.1.2",
      "description": "meta and functional programming helpers for turf modules",
      "main": "index.js",
      "scripts": {
        "test": "tape test.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Tom MacWright"
      },
      "license": "ISC",
      "devDependencies": {
        "tape": "^3.4.0",
        "@turf/random": "^3.0.16"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "dependencies": {},
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "_id": "@turf/meta@3.1.2",
      "_shasum": "6a08b8a7a33996b4f3ed3fd1a9c94a1dda95fd46",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "4.4.7",
      "_npmUser": {
        "name": "tmcw",
        "email": "tom@macwright.org"
      },
      "dist": {
        "shasum": "6a08b8a7a33996b4f3ed3fd1a9c94a1dda95fd46",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.1.2.tgz",
        "integrity": "sha512-kMjnMtLhFr/oFzwSnVw24RWGwi4LVTmM40mcn6KIhcg3j0rOrLfZNVaf8Q4IGDVSAgUFeIVc5RTIhn1NB0jTwg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHZJs2JgLAwosnujzhsDc1Nmmwnn9hV/1lM4qpbTsy6OAiEAkuqjVQmplW7oGE5r+i0nADVYubGcI5uhSm6qL2NT9TA="
          }
        ]
      },
      "maintainers": [
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/meta-3.1.2.tgz_1468339576868_0.6829860948491842"
      },
      "directories": {}
    },
    "3.3.3": {
      "name": "@turf/meta",
      "version": "3.3.3",
      "description": "meta and functional programming helpers for turf modules",
      "main": "index.js",
      "scripts": {
        "test": "tape test.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Tom MacWright"
      },
      "license": "ISC",
      "devDependencies": {
        "tape": "^3.4.0",
        "@turf/random": "^3.3.3"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "dependencies": {},
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "_id": "@turf/meta@3.3.3",
      "_shasum": "974f0b2dbfbca574ac97781472352bd4c4fb6e79",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "4.4.7",
      "_npmUser": {
        "name": "tmcw",
        "email": "tom@macwright.org"
      },
      "dist": {
        "shasum": "974f0b2dbfbca574ac97781472352bd4c4fb6e79",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.3.3.tgz",
        "integrity": "sha512-EcJi98UUYKdu/Kb2mBBAJkU37ZgBl+88Z33W+ffVD6dz6HHhe5mmphmgw6YMHdEevD0cCN5zBvcEflopGRPWrA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBg0gtcTz66Kp+OaEa+3TOzxvetclatV3Wj28aYI6y1mAiEA0zl/fMVFSSqqrtf/VL7P9haMl8qzKj/NaDNt2oC7lpY="
          }
        ]
      },
      "maintainers": [
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/meta-3.3.3.tgz_1468428045355_0.302016397472471"
      },
      "directories": {}
    },
    "3.5.2": {
      "name": "@turf/meta",
      "version": "3.5.2",
      "description": "meta and functional programming helpers for turf modules",
      "main": "index.js",
      "scripts": {
        "test": "tape test.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Tom MacWright"
      },
      "license": "ISC",
      "devDependencies": {
        "tape": "^3.4.0",
        "@turf/random": "^3.5.2"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "dependencies": {},
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "_id": "@turf/meta@3.5.2",
      "_shasum": "61b74308c8cbbcc9bc27a37647d3c87ec427cb66",
      "_from": ".",
      "_npmVersion": "2.15.9",
      "_nodeVersion": "4.5.0",
      "_npmUser": {
        "name": "tmcw",
        "email": "tom@macwright.org"
      },
      "dist": {
        "shasum": "61b74308c8cbbcc9bc27a37647d3c87ec427cb66",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.5.2.tgz",
        "integrity": "sha512-cgFe0QeYVDrdCuMbvAE0RJ7I9whuPOEJW4cph26s7cZNZYK+fKT+r2wnzlOEFraHNKQUSBmP27oQT1X8RGylMA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIBgnFFZzFeE4Czff9N6kdl8C9JGpd/K7Xt0EsbrhBN3DAiBOaXYCgawGzkUOPm/fTxxdsRSi7YUt6oXc5t2+Ua/YzA=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/meta-3.5.2.tgz_1471904469838_0.060294202994555235"
      },
      "directories": {}
    },
    "3.5.2-alpha.d2c36ee7": {
      "name": "@turf/meta",
      "version": "3.5.2-alpha.d2c36ee7",
      "description": "meta and functional programming helpers for turf modules",
      "main": "index.js",
      "scripts": {
        "test": "tape test.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Tom MacWright"
      },
      "license": "ISC",
      "devDependencies": {
        "tape": "^3.4.0",
        "@turf/random": "^3.5.2-alpha.d2c36ee7"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "dependencies": {},
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "_id": "@turf/meta@3.5.2-alpha.d2c36ee7",
      "_shasum": "fee088f50b343f1c6d0c989dd6c303099da28649",
      "_from": ".",
      "_npmVersion": "2.15.9",
      "_nodeVersion": "4.5.0",
      "_npmUser": {
        "name": "morganherlocker",
        "email": "morgan.herlocker@gmail.com"
      },
      "dist": {
        "shasum": "fee088f50b343f1c6d0c989dd6c303099da28649",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.5.2-alpha.d2c36ee7.tgz",
        "integrity": "sha512-Ya/s6gKqakss6uH2dTWhFgYCncTbpH1o1K2pTFiBGT8wxJELwls9tLhKmYUVCS9rpMCbLBK416wvgUzrcMvRgQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDDG78xNziOy7ZEctUeHjMjYGMhfvU7iJpjXbbgR7JXeAiEAilrPVUoxnTriSlrcTwYf6XuZso4GP26/vkrT6UA/+jE="
          }
        ]
      },
      "maintainers": [
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/meta-3.5.2-alpha.d2c36ee7.tgz_1478287990556_0.4401931348256767"
      },
      "directories": {}
    },
    "3.5.3": {
      "name": "@turf/meta",
      "version": "3.5.3",
      "description": "meta and functional programming helpers for turf modules",
      "main": "index.js",
      "scripts": {
        "test": "tape test.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Tom MacWright"
      },
      "license": "ISC",
      "devDependencies": {
        "tape": "^3.4.0",
        "@turf/random": "^3.5.2"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "dependencies": {},
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "_id": "@turf/meta@3.5.3",
      "_shasum": "91bc7883e3ab8e76a9b09b9ea7b82cca24e35f05",
      "_from": ".",
      "_npmVersion": "3.10.8",
      "_nodeVersion": "4.6.1",
      "_npmUser": {
        "name": "tmcw",
        "email": "tom@macwright.org"
      },
      "dist": {
        "shasum": "91bc7883e3ab8e76a9b09b9ea7b82cca24e35f05",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.5.3.tgz",
        "integrity": "sha512-pV6DqPn05IB59wEP7pTxrzDCrrctUBs7UXZu6OOt8F/6Kpo4SOuNVf48rMZ8tJsSMkDJxhOXjX5DjoOq7grX4Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCk8l02a56dWafC+dSjnYZHV1pev2+jXD0veQ+LS3zdfQIgCelg/2+t/o9ZZRH3/+dlA5ZX8v5gr8dPGCgK7zf92B8="
          }
        ]
      },
      "maintainers": [
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/meta-3.5.3.tgz_1478534900801_0.4154131361283362"
      },
      "directories": {}
    },
    "3.6.1": {
      "name": "@turf/meta",
      "version": "3.6.1",
      "description": "meta and functional programming helpers for turf modules",
      "main": "index.js",
      "scripts": {
        "test": "tape test.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Tom MacWright"
      },
      "license": "ISC",
      "devDependencies": {
        "tape": "^3.4.0",
        "@turf/random": "^3.5.2"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "dependencies": {},
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "_id": "@turf/meta@3.6.1",
      "_shasum": "e2e76519e8e536f83e397d0f8c2dde53c3dcfdc4",
      "_from": ".",
      "_npmVersion": "2.15.9",
      "_nodeVersion": "4.6.2",
      "_npmUser": {
        "name": "tmcw",
        "email": "tom@macwright.org"
      },
      "dist": {
        "shasum": "e2e76519e8e536f83e397d0f8c2dde53c3dcfdc4",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.6.1.tgz",
        "integrity": "sha512-G+vQau99nGY3V7nBkv7LmM/RJqhT83sT87BV7HPuFuwLgUapC60uid5Vj2J82a06g/UtilNFiHxV3mYwqu8AMA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDFvP5aSgdB6W6TSafwB6lyLY97fzs6R0WjR4lCz0GVpQIgZJyiyuw2hLLDh78XTcx3BDvbx5X7HrSTXZB3/hMteRU="
          }
        ]
      },
      "maintainers": [
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/meta-3.6.1.tgz_1479396721854_0.9027667019981891"
      },
      "directories": {}
    },
    "3.6.3": {
      "name": "@turf/meta",
      "version": "3.6.3",
      "description": "meta and functional programming helpers for turf modules",
      "main": "index.js",
      "scripts": {
        "test": "tape test.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Tom MacWright"
      },
      "license": "ISC",
      "devDependencies": {
        "tape": "^3.4.0",
        "@turf/random": "^3.6.3"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "dependencies": {},
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "_id": "@turf/meta@3.6.3",
      "_shasum": "693e9ab467254042b300e828288086bc4ac91571",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.3.1",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "693e9ab467254042b300e828288086bc4ac91571",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.6.3.tgz",
        "integrity": "sha512-xyc5VKUKuVntaVS09CLkXxqi2x+B0YyYhXxFRaTJLAGkEjvqt6X/iKYCc7oguQV1UafNCqkN98NHgplzPFABAQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDL37uQ9fmn2NubLux9O2mutWKZt3grZ17JsHfl79kI4wIgB+yBuKND6SbxbXyWMZtM1njZnHb1fzYAlhOf0Dqtx2Y="
          }
        ]
      },
      "maintainers": [
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/meta-3.6.3.tgz_1480511380595_0.2528787492774427"
      },
      "directories": {}
    },
    "3.7.0": {
      "name": "@turf/meta",
      "version": "3.7.0",
      "description": "meta and functional programming helpers for turf modules",
      "main": "index.js",
      "scripts": {
        "test": "tape test.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Tom MacWright"
      },
      "license": "ISC",
      "devDependencies": {
        "tape": "^3.4.0",
        "@turf/random": "^3.7.0"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "dependencies": {},
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "types": "index.d.ts",
      "_id": "@turf/meta@3.7.0",
      "_shasum": "c7dad3dd6e04113c0df252cc17f37d9958d5eacc",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.3.1",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "c7dad3dd6e04113c0df252cc17f37d9958d5eacc",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.7.0.tgz",
        "integrity": "sha512-MD+HbmQt3PCepS+aWnbNMmIo/lScEKXTDH8NuI+vxgnpKLNVw37eR3YD+mu3fyXzQjhpPO/EaYVBAgTGnfhrYA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCuu/P+rw6JuKQNVPIvevjmCzu50AexXkNtipMsbwJrQAIgT46Q+NppW/xW1PT4IvBRCanXhnV8as5TJv96TudrOhg="
          }
        ]
      },
      "maintainers": [
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/meta-3.7.0.tgz_1480513572916_0.30705266655422747"
      },
      "directories": {}
    },
    "3.7.3": {
      "name": "@turf/meta",
      "version": "3.7.3",
      "description": "meta and functional programming helpers for turf modules",
      "main": "index.js",
      "scripts": {
        "test": "tape test.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Tom MacWright"
      },
      "license": "ISC",
      "devDependencies": {
        "tape": "^3.4.0",
        "@turf/random": "^3.7.3"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "dependencies": {},
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "types": "index.d.ts",
      "_id": "@turf/meta@3.7.3",
      "_shasum": "47f2a2937fa9fee5550eb8c0c649f3f39e13dfd6",
      "_from": ".",
      "_npmVersion": "2.15.11",
      "_nodeVersion": "4.7.2",
      "_npmUser": {
        "name": "tmcw",
        "email": "tom@macwright.org"
      },
      "dist": {
        "shasum": "47f2a2937fa9fee5550eb8c0c649f3f39e13dfd6",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.7.3.tgz",
        "integrity": "sha512-/ZgE4Q1hul28Np8r7XmN2gr1RCBGSX3ZJgQENYyFUOXkFkJTZ3QVPxE4gocROb8cwxygXMICdriaJd47rOYhJQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDnayJ2iiNMaL6M7XyFOslcxOcFOFJHPs/a3NKH6NI4dAiEAwCaSs2JJqn6LtnDMnuyniBhhMPr68EYMArHgIrUF6VE="
          }
        ]
      },
      "maintainers": [
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/meta-3.7.3.tgz_1483981201590_0.1840871162712574"
      },
      "directories": {}
    },
    "3.7.5": {
      "name": "@turf/meta",
      "version": "3.7.5",
      "description": "meta and functional programming helpers for turf modules",
      "main": "index.js",
      "scripts": {
        "test": "tape test.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Tom MacWright"
      },
      "license": "ISC",
      "devDependencies": {
        "tape": "^3.4.0",
        "@turf/random": "^3.7.5"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "dependencies": {},
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "types": "index.d.ts",
      "_id": "@turf/meta@3.7.5",
      "_shasum": "16c68fe7fe34ed075ccbda287b0c9e6ba47ace38",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "7.3.0",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "16c68fe7fe34ed075ccbda287b0c9e6ba47ace38",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.7.5.tgz",
        "integrity": "sha512-VsKIPD0iMIWk/ubNytAidPNzXNsk9UKbIN9VVY2Q9bsZfVaxADdjuvLlOC/kUETPAYU1QYWV8kLKmTfZeg4b4w==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDzvtXkivpO7NJT4CRyK1v3SzQcRRK9F6an9UECdfK5pgIhAIP9c3NeqtgL0pYTkWhs68BtTSlNu3b1FtMd1xuPNEhB"
          }
        ]
      },
      "maintainers": [
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/meta-3.7.5.tgz_1485134225765_0.20072849793359637"
      },
      "directories": {}
    },
    "3.10.0": {
      "name": "@turf/meta",
      "version": "3.10.0",
      "description": "meta and functional programming helpers for turf modules",
      "main": "index.js",
      "scripts": {
        "test": "tape test.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "license": "MIT",
      "devDependencies": {
        "@turf/random": "^3.10.0",
        "eslint": "^3.14.1",
        "eslint-config-mourner": "^2.0.1",
        "tape": "^3.4.0"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "dependencies": {},
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "types": "index.d.ts",
      "_id": "@turf/meta@3.10.0",
      "_shasum": "94345a892265bc7712e39e36f50f54f5d80e725b",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.9.5",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "94345a892265bc7712e39e36f50f54f5d80e725b",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.10.0.tgz",
        "integrity": "sha512-s23kCYs8eURuLxXNdjyNldyLiW5xp1UZagXpVTQSK1SZ/uvKjt1EA9bNk3mKiMfXtR2vmLm+4t4zBXmnb197gA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFUbYrbVlHR/KN53CrsHkXju2kT9sTERFQOh2w1UYxWtAiA1+MYjcCE9OsBB/Le71cspGxhkmDTANOsoaliKa6zG0g=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/meta-3.10.0.tgz_1487104196162_0.604032323230058"
      },
      "directories": {}
    },
    "3.10.4": {
      "name": "@turf/meta",
      "version": "3.10.4",
      "description": "meta and functional programming helpers for turf modules",
      "main": "index.js",
      "scripts": {
        "test": "tape test.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "license": "MIT",
      "devDependencies": {
        "@turf/random": "^3.10.0",
        "eslint": "^3.14.1",
        "eslint-config-mourner": "^2.0.1",
        "tape": "^3.4.0"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "dependencies": {},
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "types": "index.d.ts",
      "_id": "@turf/meta@3.10.4",
      "_shasum": "67a7d3ccf585b13b29116080efc46e53889d0cbd",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.9.5",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "67a7d3ccf585b13b29116080efc46e53889d0cbd",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.10.4.tgz",
        "integrity": "sha512-IkJGGG0O3lCwUVgDRzQcgDoNzRy+6RxFvhijB1h7oiy++WmCVkgKal+jgrkxzdvAnDTzIixfOjgJVSNp24mGNw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCHy8ESeviwKWv3RD6sb8rCTTr6rhQPB4BLzyAk5BPGBgIgOiNIGO85SoN7k71V+PSu25AN3W7KsR8tLvslyuGygSI="
          }
        ]
      },
      "maintainers": [
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/meta-3.10.4.tgz_1488289064859_0.3268254026770592"
      },
      "directories": {}
    },
    "3.10.5": {
      "name": "@turf/meta",
      "version": "3.10.5",
      "description": "meta and functional programming helpers for turf modules",
      "main": "index.js",
      "scripts": {
        "test": "tape test.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "license": "MIT",
      "devDependencies": {
        "@turf/helpers": "^3.10.5",
        "@turf/random": "^3.10.0",
        "benchmark": "^2.1.3",
        "eslint": "^3.14.1",
        "eslint-config-mourner": "^2.0.1",
        "tape": "^3.4.0"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "dependencies": {},
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "types": "index.d.ts",
      "_id": "@turf/meta@3.10.5",
      "_shasum": "bf80d4a628032b570f46ea10862b1d1a1768bcf6",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.9.5",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "bf80d4a628032b570f46ea10862b1d1a1768bcf6",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.10.5.tgz",
        "integrity": "sha512-f4Px1mQAAbS/xlbWx82mFSQ/AxD5cmPUNhPqHN34T/K/L9ZCVvWoKcvHz8GDSLSzTnD6r54Z6VdrukDi5zg+KQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIB8M3hDqjxVxcJaPQcO7MYwfC1zEqNzKQ1hBWwSVh7iMAiAk2K3q/OzRt8qnucNNw8lN1lGQrhtS4Gjz2uT7ssNJ5Q=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/meta-3.10.5.tgz_1488490102689_0.5844914081972092"
      },
      "directories": {}
    },
    "3.13.0": {
      "name": "@turf/meta",
      "version": "3.13.0",
      "description": "turf meta module",
      "main": "index.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts"
      ],
      "scripts": {
        "test": "node test.js",
        "bench": "node bench.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "devDependencies": {
        "@turf/helpers": "^3.13.0",
        "@turf/random": "^3.13.0",
        "benchmark": "^2.1.3",
        "eslint": "^3.14.1",
        "eslint-config-mourner": "^2.0.1",
        "tape": "^3.4.0"
      },
      "dependencies": {},
      "_id": "@turf/meta@3.13.0",
      "_shasum": "95c97993016777358f242615b8ec437c54163601",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.9.5",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "95c97993016777358f242615b8ec437c54163601",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.13.0.tgz",
        "integrity": "sha512-fsXyQ0az8fkVw7C5sSfaJBbfvrz1gjElvP8jqLZ6geHdDdKxDu9EnI1p81j8cm/SvpxOQ9mx7iKcQd2aQBuf0A==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIBtCAgG4gBIKxXwwq6+qGLPPU0fokkMUgxtQGmLRffsAAiBD0QqgtGsXI1NQaAFze7GhO0RlwJ6ofTozoOv2JE+9/A=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/meta-3.13.0.tgz_1489294901953_0.8120555323548615"
      },
      "directories": {}
    },
    "3.14.0": {
      "name": "@turf/meta",
      "version": "3.14.0",
      "description": "turf meta module",
      "main": "index.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts"
      ],
      "scripts": {
        "test": "node test.js",
        "bench": "node bench.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "devDependencies": {
        "@turf/helpers": "^3.13.0",
        "@turf/random": "^3.14.0",
        "benchmark": "^2.1.3",
        "eslint": "^3.14.1",
        "eslint-config-mourner": "^2.0.1",
        "tape": "^3.4.0"
      },
      "dependencies": {},
      "_id": "@turf/meta@3.14.0",
      "_shasum": "8d3050c1a0f44bf406a633b6bd28c510f7bcee27",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.9.5",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "8d3050c1a0f44bf406a633b6bd28c510f7bcee27",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-3.14.0.tgz",
        "integrity": "sha512-OtXqLQuR9hlQ/HkAF/OdzRea7E0eZK1ay8y8CBXkoO2R6v34CsDrWYLMSo0ZzMsaQDpKo76NPP2GGo+PyG1cSg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDx3g4JQl7GL1AehMKG0AIsmH6IikIjmZt+Z+fPLPokCQIgG1EfsLenj8DMjE8g8V/Vtp5KEq8rpSvuKcY4tA6qTmA="
          }
        ]
      },
      "maintainers": [
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/meta-3.14.0.tgz_1490197943717_0.15920880413614213"
      },
      "directories": {}
    },
    "4.0.0": {
      "name": "@turf/meta",
      "version": "4.0.0",
      "description": "turf meta module",
      "main": "index.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts"
      ],
      "scripts": {
        "test": "node test.js",
        "bench": "node bench.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "devDependencies": {
        "@turf/helpers": "^4.0.0",
        "@turf/random": "^3.14.0",
        "benchmark": "^2.1.3",
        "eslint": "^3.14.1",
        "eslint-config-mourner": "^2.0.1",
        "tape": "^3.4.0"
      },
      "dependencies": {},
      "_id": "@turf/meta@4.0.0",
      "_shasum": "13e5d9a93a430c72789cf08812261876d6f054e6",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.10.1",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "13e5d9a93a430c72789cf08812261876d6f054e6",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-4.0.0.tgz",
        "integrity": "sha512-mjKU/P2oUgmOQLDh0H7d0xr9aiBs5y9D6ra4GLImquiw4wxp987BQXmU1uO3g7tUlvWfD+/GkP9UzEobVTnEng==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCv+nBjRutO5qbf+LHL6y2j9g91GKSG8Vvz0M+nLQPp2gIgXvWZkSTyFpQ0/pwfYGAHx0OPxmzRfKe+gKrX2q4o4Zo="
          }
        ]
      },
      "maintainers": [
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/meta-4.0.0.tgz_1491179486063_0.3602999730501324"
      },
      "directories": {}
    },
    "4.0.1": {
      "name": "@turf/meta",
      "version": "4.0.1",
      "description": "turf meta module",
      "main": "index.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts"
      ],
      "scripts": {
        "test": "node test.js",
        "bench": "node bench.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "devDependencies": {
        "@turf/helpers": "^4.0.1",
        "@turf/random": "^3.14.0",
        "benchmark": "^2.1.3",
        "eslint": "^3.14.1",
        "eslint-config-mourner": "^2.0.1",
        "tape": "^3.4.0"
      },
      "dependencies": {},
      "_id": "@turf/meta@4.0.1",
      "_shasum": "4b6214a0708ccf7e69342782ab4ac349f176c611",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.10.1",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "4b6214a0708ccf7e69342782ab4ac349f176c611",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-4.0.1.tgz",
        "integrity": "sha512-5sp2mtDpmnwzau2ZHrynkz+qDp36AImaYBMTfV4KbynUF+jLyc2FBlnUTNV3vG+vKq9FzAQcatFXzd/Tu0iLfg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICWaYU+k281EUuuI0w2gJZRXLDWnOXqd3W0mo+w1fWUwAiBwXwLEYiccjE8cUJO6HBg+yKP2EIIMip3QFNPLDQS/hQ=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/meta-4.0.1.tgz_1491432684160_0.6642033054959029"
      },
      "directories": {}
    },
    "4.0.2": {
      "name": "@turf/meta",
      "version": "4.0.2",
      "description": "turf meta module",
      "main": "index.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts"
      ],
      "scripts": {
        "test": "node test.js",
        "bench": "node bench.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "devDependencies": {
        "@turf/helpers": "^4.0.1",
        "@turf/random": "^4.0.2",
        "benchmark": "^2.1.3",
        "eslint": "^3.14.1",
        "eslint-config-mourner": "^2.0.1",
        "tape": "^3.4.0"
      },
      "dependencies": {},
      "_id": "@turf/meta@4.0.2",
      "_shasum": "9c0aef1e607e72f99c86e1d4287d76598b973110",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.10.1",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "9c0aef1e607e72f99c86e1d4287d76598b973110",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-4.0.2.tgz",
        "integrity": "sha512-D3Y6gb+G51m6EFi4MCu2udoz/YWDLE4n9ZwKPtsUH1JoFsV8hpc/TGhrXQqv/Ni2kjrAZ9wTrIepWM2KAsvthQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCC299sU2v1hHyiC7DLDdM6OW/DZS7fHxg1LvrtakgEPAIgEQT739JGHGQPeotX/ru+JP4wPPPE54Cy3EzKDSIO2BY="
          }
        ]
      },
      "maintainers": [
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/meta-4.0.2.tgz_1491495928179_0.4595710812136531"
      },
      "directories": {}
    },
    "4.1.0": {
      "name": "@turf/meta",
      "version": "4.1.0",
      "description": "turf meta module",
      "main": "index.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts"
      ],
      "scripts": {
        "test": "node test.js",
        "bench": "node bench.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "devDependencies": {
        "@turf/helpers": "^4.1.0",
        "@turf/random": "^4.1.0",
        "benchmark": "^2.1.3",
        "eslint": "^3.14.1",
        "eslint-config-mourner": "^2.0.1",
        "tape": "^3.4.0"
      },
      "dependencies": {},
      "_id": "@turf/meta@4.1.0",
      "_shasum": "7b0715832ff483d28d2669051f1e00c6cefcbf75",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.10.1",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "7b0715832ff483d28d2669051f1e00c6cefcbf75",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-4.1.0.tgz",
        "integrity": "sha512-w7CizgfhC9m/50p/2Jcges54ITwfAINLmwQ31n3nckeCUMwLDQsnckj8QV/Jdr/TWvl731vNW5uXQoE99fGTog==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFZVSvB0438pF11R3P3Oo2+op4yc48BuwKNrfx2jb8bzAiAu2p7xP+Y6ZAjL1dP9iQT2f4qk2+M9LY1hnBbrTwBF9A=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/meta-4.1.0.tgz_1491835169157_0.1817603933159262"
      },
      "directories": {}
    },
    "4.2.0": {
      "name": "@turf/meta",
      "version": "4.2.0",
      "description": "turf meta module",
      "main": "index.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts"
      ],
      "scripts": {
        "test": "node test.js",
        "bench": "node bench.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "devDependencies": {
        "@turf/helpers": "^4.2.0",
        "@turf/random": "^4.2.0",
        "benchmark": "^2.1.3",
        "eslint": "^3.14.1",
        "eslint-config-mourner": "^2.0.1",
        "tape": "^3.4.0"
      },
      "dependencies": {},
      "_id": "@turf/meta@4.2.0",
      "_shasum": "02dbc23599efb2287e79f12a72f5462a4283fdba",
      "_from": ".",
      "_npmVersion": "4.2.0",
      "_nodeVersion": "7.9.0",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "02dbc23599efb2287e79f12a72f5462a4283fdba",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-4.2.0.tgz",
        "integrity": "sha512-+ZIf9U+J5zZLvob8HiIh+C7cEBFCmIq4AOHaynxY7LPOfXZ64+wGpjFzazsR8KDH5rwt6WWwaEfqkArK/0aECg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDnUZcYkjUQR285ESxlgVY1Rr9vGCdl0wzu58tq0yYi/AiBEY5fNjwkA9m8sK9ym3SqRvhXRooe1tNXJwdjvLhC04A=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/meta-4.2.0.tgz_1493588842492_0.23024760908447206"
      },
      "directories": {}
    },
    "4.3.0": {
      "name": "@turf/meta",
      "version": "4.3.0",
      "description": "turf meta module",
      "main": "index.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts"
      ],
      "scripts": {
        "test": "node test.js",
        "bench": "node bench.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "devDependencies": {
        "@turf/helpers": "^4.3.0",
        "@turf/random": "^4.3.0",
        "benchmark": "^2.1.4",
        "eslint": "^3.14.1",
        "eslint-config-mourner": "^2.0.1",
        "tape": "^4.6.3"
      },
      "dependencies": {},
      "_id": "@turf/meta@4.3.0",
      "_shasum": "eb11dd2c2511524258123767fe0f5c3bd963e8d7",
      "_from": ".",
      "_npmVersion": "4.2.0",
      "_nodeVersion": "7.10.0",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "eb11dd2c2511524258123767fe0f5c3bd963e8d7",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-4.3.0.tgz",
        "integrity": "sha512-VgUauVdXeXVFEw2l30g7zYCGvr7fha/jqYmDKieFDx5sCFbQ8qLN/UhLlZtCiNocrtiZVo3MSNW7em7vu43XdQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDenPjfqJztm083DSDkEjZJfs9k2Hzo2fNj11OdPCxmIQIgFSXKkYFQ1H4vqY/6w5MpHybatGU9XGK2SeYMbu924Nc="
          }
        ]
      },
      "maintainers": [
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/meta-4.3.0.tgz_1494554707556_0.45850145211443305"
      },
      "directories": {}
    },
    "4.4.0": {
      "name": "@turf/meta",
      "version": "4.4.0",
      "description": "turf meta module",
      "main": "index.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts"
      ],
      "scripts": {
        "test": "node test.js",
        "bench": "node bench.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "devDependencies": {
        "@turf/helpers": "^4.4.0",
        "@turf/random": "^4.4.0",
        "benchmark": "^2.1.4",
        "tape": "^4.6.3"
      },
      "_id": "@turf/meta@4.4.0",
      "_shasum": "4fa25d4cc0525bd4cdbaf4ff68a6f8ae81f1975f",
      "_from": ".",
      "_npmVersion": "4.2.0",
      "_nodeVersion": "7.10.0",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "4fa25d4cc0525bd4cdbaf4ff68a6f8ae81f1975f",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-4.4.0.tgz",
        "integrity": "sha512-Aj4bYgPO9LXjhFEbki+m3IarnK8ATrD8fm4kdrMztEQUXMoleLd++euo6idNcfhHx8iemrLKMiMjwTYtgmnD3Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCq4FQUN5tfpWDdwsT1hkt628caNgTwBm2RfGJ3WePofQIgQ0pR9Br3KUjX/nqGZXiXSBVVSq3aDfwIZOVx1cwMLAA="
          }
        ]
      },
      "maintainers": [
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-4.4.0.tgz_1496713933341_0.039755227975547314"
      },
      "directories": {}
    },
    "4.5.1": {
      "name": "@turf/meta",
      "version": "4.5.1",
      "description": "turf meta module",
      "main": "index.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts"
      ],
      "scripts": {
        "test": "node test.js",
        "bench": "node bench.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "devDependencies": {
        "@turf/helpers": "^4.5.1",
        "@turf/random": "^4.5.1",
        "benchmark": "^2.1.4",
        "tape": "^4.6.3"
      },
      "_id": "@turf/meta@4.5.1",
      "_shasum": "b9b3cba5919edd72342b43c035db2d9817f73aad",
      "_from": ".",
      "_npmVersion": "4.2.0",
      "_nodeVersion": "7.9.0",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "b9b3cba5919edd72342b43c035db2d9817f73aad",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-4.5.1.tgz",
        "integrity": "sha512-2ujWou9oSWYI+V8DdoXIxBJVqJLwD9qmKXS6/Ztwktkt/HIpICLfhx++gd21fnpSWxwveaH01k/sE2uej2W0Ng==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC6xF5/SkJfI1bLNb0Qm7DKlBvi5u3ercH8QpJx2QrjRwIhAPstY+lJE6wprt0UpAmshO062FYF0hE2czVz0NIvfTx4"
          }
        ]
      },
      "maintainers": [
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-4.5.1.tgz_1498842419246_0.1431029282975942"
      },
      "directories": {}
    },
    "4.5.2": {
      "name": "@turf/meta",
      "version": "4.5.2",
      "description": "turf meta module",
      "main": "index.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts"
      ],
      "scripts": {
        "test": "node test.js",
        "bench": "node bench.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "devDependencies": {
        "@turf/helpers": "^4.5.2",
        "@turf/random": "^4.5.2",
        "benchmark": "^2.1.4",
        "tape": "^4.6.3"
      },
      "_id": "@turf/meta@4.5.2",
      "_shasum": "8450fc442d2a59494251a5a52ae520017e2dcf0d",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.10.3",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "8450fc442d2a59494251a5a52ae520017e2dcf0d",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-4.5.2.tgz",
        "integrity": "sha512-p3NDhUBBCzFfUD/QcG6RsRxfdEWN60okBtz10RpT0vX6MK7rDBMIyEnepg1ZdHXi247BburVKZZe58LdsQgLbg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEefNHeYxxLuHwXC7zig82OurZhWNE91UUTTVfxu0piDAiEAvrf7aaMa1Erqd5zmbhKWwR5/oLE8hnQujj4YUOYIKvk="
          }
        ]
      },
      "maintainers": [
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-4.5.2.tgz_1498843382117_0.22809900878928602"
      },
      "directories": {}
    },
    "4.6.0": {
      "name": "@turf/meta",
      "version": "4.6.0",
      "description": "turf meta module",
      "main": "index.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts"
      ],
      "scripts": {
        "test": "node test.js",
        "bench": "node bench.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "devDependencies": {
        "@turf/helpers": "^4.6.0",
        "@turf/random": "^4.5.2",
        "benchmark": "^2.1.4",
        "tape": "^4.6.3"
      },
      "_id": "@turf/meta@4.6.0",
      "_shasum": "0d3f9a218e58d1c5e5deedf467c3321dd61203f3",
      "_from": ".",
      "_npmVersion": "4.2.0",
      "_nodeVersion": "7.10.0",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "0d3f9a218e58d1c5e5deedf467c3321dd61203f3",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-4.6.0.tgz",
        "integrity": "sha512-QGETKwPathiwm6gNTB7cw3OTbHTRZJuiTRF0twrx1Gg4kn3m2pyjEpHj7YCv5NnWyoOnR8fylluBfdJQWno7fQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDOrK0ISSZLrhA3fX8NXqsJStcg/1JfjhQ7aMRElIf8PAIgJHTTVJEC/0C2IpHjeHbk92nuGGpmf0Uqqkje7xnpQc0="
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom+npm@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-4.6.0.tgz_1501693043817_0.2279110406525433"
      },
      "directories": {}
    },
    "4.7.0": {
      "name": "@turf/meta",
      "version": "4.7.0",
      "description": "turf meta module",
      "main": "index.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts"
      ],
      "scripts": {
        "test": "node test.js",
        "bench": "node bench.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "devDependencies": {
        "@turf/helpers": "4.7.0",
        "@turf/random": "4.7.0",
        "benchmark": "2.1.4",
        "tape": "4.8.0"
      },
      "_id": "@turf/meta@4.7.0",
      "_shasum": "8fdf119d64a4f0497a09f3d7dc997eac74738ecb",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.2",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "8fdf119d64a4f0497a09f3d7dc997eac74738ecb",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-4.7.0.tgz",
        "integrity": "sha512-0UZp7AayEPvQjfwvCgoTNlorjlpLMmtkVRynjcNOYjUR0or5uxETMqdTApBlxEXuzCDQ/xSaBeah7l0JsO86dQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDrJVkbboXHkLlTPa4WSonSVblDuNT0vFxSPL92rxZXOQIgccJ8sbWP0XqMcZttL8r80taS8jJYP7GAmwkoZF8I1+c="
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom+npm@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-4.7.0.tgz_1504625427967_0.3441233434714377"
      },
      "directories": {}
    },
    "4.7.1": {
      "name": "@turf/meta",
      "version": "4.7.1",
      "description": "turf meta module",
      "main": "index.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts"
      ],
      "scripts": {
        "test": "node test.js",
        "bench": "node bench.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "devDependencies": {
        "@turf/helpers": "4.7.1",
        "@turf/random": "4.7.1",
        "benchmark": "2.1.4",
        "tape": "4.8.0"
      },
      "_id": "@turf/meta@4.7.1",
      "_shasum": "53a55281ae08a5fa2f414d9ba50a951d38e86ab5",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.2",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "53a55281ae08a5fa2f414d9ba50a951d38e86ab5",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-4.7.1.tgz",
        "integrity": "sha512-S/+ixW2FQFDZLNWyrnlfYtSQZUZO3DhAaFw0nxd1XGMQ2q2z2mnscTncF7tRWW1OIVhkjXJwb80VADzq+EAIDg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHtHLVle+an8EZryvJeZAtyGnfIgv+ze7Sr+Cgw79osxAiEA2hgQtYyUzD2/5aUxCCrPAcJPjNjxOSxezo9XuH3nPeg="
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom+npm@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-4.7.1.tgz_1504625786278_0.9236379042267799"
      },
      "directories": {}
    },
    "4.7.3": {
      "name": "@turf/meta",
      "version": "4.7.3",
      "description": "turf meta module",
      "main": "index.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts"
      ],
      "scripts": {
        "test": "node test.js",
        "bench": "node bench.js"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "devDependencies": {
        "@turf/helpers": "^4.7.3",
        "@turf/random": "^4.7.3",
        "benchmark": "2.1.4",
        "tape": "4.8.0"
      },
      "_id": "@turf/meta@4.7.3",
      "_shasum": "038970178e90c8e43cf7dfed79d5782298a1080d",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.2",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "038970178e90c8e43cf7dfed79d5782298a1080d",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-4.7.3.tgz",
        "integrity": "sha512-GXp2yWPp/CIQ31tFduncnTMpLPwOduQ/icIFMubpuxhcNt2sm+7B5EB4mx6eZ4X3aR7dXoVCRt0BSWUIk+zIAw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQD8Vw0evmX2q0maLYdVO1LXvzPphNQEbVoVFSHos689YgIgb3BW3LkfySF+Tm8jo+n4IFq1J3mownrMhGyBulSYwQ8="
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom+npm@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-4.7.3.tgz_1505222469754_0.5743270595557988"
      },
      "directories": {}
    },
    "4.7.4": {
      "name": "@turf/meta",
      "version": "4.7.4",
      "description": "turf meta module",
      "main": "index.es5.js",
      "module": "index.js",
      "jsnext:main": "index.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts",
        "index.es5.js"
      ],
      "scripts": {
        "pretest": "rollup -c ../../rollup.config.js",
        "test": "node test.es5.js",
        "bench": "node bench.js"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@turf/helpers": "*",
        "@turf/random": "*",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {},
      "_id": "@turf/meta@4.7.4",
      "_shasum": "6de2f1e9890b8f64b669e4b47c09b20893063977",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.2",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "6de2f1e9890b8f64b669e4b47c09b20893063977",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-4.7.4.tgz",
        "integrity": "sha512-cvwz4EI9BjrgRHxmJ3Z3HKxq6k/fj/V95kwNZ8uWNLncCvrb7x1jUBDkQUo1tShnYdZ8eBgA+a2bvJmAM+MJ0A==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDYPvD96bHWxyg73YQKbJILqtWesX/6JMldRHmaftrPmwIhAOTz70CHCppheIOetgIzbuOV1IqOIQH0LCdrifGIlRLM"
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-4.7.4.tgz_1506385701404_0.8420534876640886"
      },
      "directories": {}
    },
    "5.0.0-alpha": {
      "name": "@turf/meta",
      "version": "5.0.0-alpha",
      "description": "turf meta module",
      "main": "index.es5.js",
      "module": "index.js",
      "jsnext:main": "index.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts",
        "index.es5.js"
      ],
      "scripts": {
        "pretest": "rollup -c ../../rollup.config.js",
        "test": "node test.es5.js",
        "bench": "node bench.js"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@turf/helpers": "*",
        "@turf/random": "*",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {},
      "_id": "@turf/meta@5.0.0-alpha",
      "_shasum": "15cf9170bea0e7ed0e22aa3af8ade9c9ed83108e",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.2",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "15cf9170bea0e7ed0e22aa3af8ade9c9ed83108e",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-5.0.0-alpha.tgz",
        "integrity": "sha512-/61KYpdHS+DvsV5bjJ3SFwmcheY5+aBvZ8SZEdZNyS/TOaLmxx6VxNn/AnguwrVXEuLg0cG4eISmQnQ/QaZxTg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDQYav+1MKgd3yrvRHzwt5qLHJ8weUMLk5Ti6b2VBGEHgIhANYf9mNpElEtcSlhegsrp1SWYIgkomO3fr4zH8goB1iE"
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-5.0.0-alpha.tgz_1506390326434_0.1776660366449505"
      },
      "directories": {}
    },
    "5.0.0": {
      "name": "@turf/meta",
      "version": "5.0.0",
      "description": "turf meta module",
      "main": "main",
      "module": "index",
      "jsnext:main": "index",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts",
        "main.js"
      ],
      "scripts": {
        "pretest": "rollup -c ../../rollup.config.js",
        "test": "node -r @std/esm test.js",
        "posttest": "uglifyjs main.js -o main.min.js",
        "bench": "node -r @std/esm bench.js"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@turf/helpers": "5.0.0",
        "@turf/random": "*",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*",
        "@std/esm": "*",
        "uglify-js": "*"
      },
      "dependencies": {},
      "@std/esm": {
        "esm": "js",
        "cjs": true
      },
      "_id": "@turf/meta@5.0.0",
      "_shasum": "75b100e9854cd7b2fa63e68561e1298dac09d7b4",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.2",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "75b100e9854cd7b2fa63e68561e1298dac09d7b4",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-5.0.0.tgz",
        "integrity": "sha512-mGuE0Y0E8Si9mUNkJ/KKFIOR7QlhlW4BCM9oXM3tq/hhB9FKqsVGkywLGYC3ulXVW5FU+XfTrlR7sKevmdiMHA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCH0JI3eukcJH8D0JBlAdgvHpWIfY0+CME32gqh3vIlKAIhAIcxCl8R45KYWELwxBKDZFYWpXGDpHtxAf4UXKSYOhMd"
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-5.0.0.tgz_1506899847266_0.7870313317980617"
      },
      "directories": {}
    },
    "5.0.1": {
      "name": "@turf/meta",
      "version": "5.0.1",
      "description": "turf meta module",
      "main": "main",
      "module": "index",
      "jsnext:main": "index",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts",
        "main.js"
      ],
      "scripts": {
        "test": "node -r @std/esm test.js",
        "posttest": "rollup -c ../../rollup.config.js",
        "bench": "node -r @std/esm bench.js"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@turf/random": "*",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*",
        "@std/esm": "*"
      },
      "dependencies": {
        "@turf/helpers": "^5.0.0"
      },
      "@std/esm": {
        "esm": "js",
        "cjs": true
      },
      "_id": "@turf/meta@5.0.1",
      "_shasum": "030b1719a9ce68592632dee5375e7c9238e443dc",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.2",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "030b1719a9ce68592632dee5375e7c9238e443dc",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-5.0.1.tgz",
        "integrity": "sha512-Zqut1+0BTse0j7kNXXw1/KknX1J8mT7zr3tXO5FcgiA+6vWOb98UNG5LudjizrfYgXhaac7otUfwAiaglVaa+w==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCRAtk3Y2wrRSU3D5hRjEtpVsw9VQaswlTo8s0/5v0qgwIgZxoJ76mMmT+wTnulSYD6aDQI2unxm/hgJ+VfeDXtvqM="
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-5.0.1.tgz_1507662370354_0.8559002892579883"
      },
      "directories": {}
    },
    "5.0.2": {
      "name": "@turf/meta",
      "version": "5.0.2",
      "description": "turf meta module",
      "main": "main",
      "module": "index",
      "jsnext:main": "index",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts",
        "main.js"
      ],
      "scripts": {
        "test": "node -r @std/esm test.js",
        "posttest": "rollup -c ../../rollup.config.js",
        "bench": "node -r @std/esm bench.js"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@turf/random": "*",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*",
        "@std/esm": "*"
      },
      "dependencies": {
        "@turf/helpers": "^5.0.0"
      },
      "@std/esm": {
        "esm": "js",
        "cjs": true
      },
      "_id": "@turf/meta@5.0.2",
      "_shasum": "712ff485cdaa6024d1f97d6fbed69d3f8e31e686",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.2",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "712ff485cdaa6024d1f97d6fbed69d3f8e31e686",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-5.0.2.tgz",
        "integrity": "sha512-Srz/dunNeR+jOvgOJ3ehdeQxoA97PzdGmjcVoL4L8naKHiQgzMNqdIGAspz2g2FTOFv0EnlnS624C3FTE0HF6Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHOusJjzFJkisBPkRC4D3mtB3AuBxliU8iNjCbWW07rwAiEA3SKaihWQZkvKgQeNAHUZ5swbzRMQUiWEpHfLYQ3POKA="
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-5.0.2.tgz_1507696526949_0.013172419043257833"
      },
      "directories": {}
    },
    "5.0.4": {
      "name": "@turf/meta",
      "version": "5.0.4",
      "description": "turf meta module",
      "main": "main",
      "module": "index",
      "jsnext:main": "index",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts",
        "main.js"
      ],
      "scripts": {
        "pretest": "rollup -c ../../rollup.config.js",
        "test": "node -r @std/esm test.js",
        "bench": "node -r @std/esm bench.js"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@std/esm": "*",
        "@turf/random": "^5.0.4",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "^5.0.4"
      },
      "@std/esm": {
        "esm": "js",
        "cjs": true
      },
      "_id": "@turf/meta@5.0.4",
      "_shasum": "b41d08f19d2ecc934805b6d713a663abd9f83213",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.2",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "b41d08f19d2ecc934805b6d713a663abd9f83213",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-5.0.4.tgz",
        "integrity": "sha512-Qb64qwUaj/KBL6PDhbUtFPnpl6fbXUSjPoknGPrgKoQlcZZuS4SHGCcX0Z0RpD78s8pULWsxGhpPUqZ0GmQHQA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEfr7+Dw1stUFQIuMrPZ9DO7QuMyy/B+JRWE4Ku8e7wIAiEA1Ccy6zExZznVQBjBmjjl51eKJAZb8XMr/Bls2UQ7KbA="
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-5.0.4.tgz_1510249664764_0.16732610017061234"
      },
      "directories": {}
    },
    "5.1.0": {
      "name": "@turf/meta",
      "version": "5.1.0",
      "description": "turf meta module",
      "main": "main.js",
      "module": "main.mjs",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts",
        "main.js",
        "main.mjs"
      ],
      "scripts": {
        "pretest": "rollup -c ../../rollup.config.js",
        "test": "node -r @std/esm test.js",
        "bench": "node -r @std/esm bench.js",
        "docs": "node ../../scripts/generate-readmes"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@std/esm": "*",
        "@turf/random": "^5.1.0",
        "benchmark": "*",
        "rollup": "*",
        "rollup-plugin-buble": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "^5.1.0"
      },
      "@std/esm": {
        "esm": "js",
        "cjs": true
      },
      "_id": "@turf/meta@5.1.0",
      "_shasum": "a52b2aa959f7ce7c90f00ee6e999c0f22a87138c",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.2",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "a52b2aa959f7ce7c90f00ee6e999c0f22a87138c",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-5.1.0.tgz",
        "integrity": "sha512-syWypsUmv/QWJcfPsppxdo+tpV5/zk9CRopQmNUWQDBobv8FYbQNb7CQSjeFazhU+lsB9etR0Wgj7p3vKfPRuA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGfiSVDoKg4QFQ7wGrX3bZRYuKwCDc2ohX7gOsg0vHQoAiEA+ak7zlche6kZ/afVtKVjpqOwPh1hhfQw4o8sm2jAxHo="
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-5.1.0.tgz_1512674731135_0.44001428061164916"
      },
      "directories": {}
    },
    "5.1.1": {
      "name": "@turf/meta",
      "version": "5.1.1",
      "description": "turf meta module",
      "main": "main.js",
      "module": "main.mjs",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts",
        "main.js",
        "main.mjs"
      ],
      "scripts": {
        "pretest": "rollup -c ../../rollup.config.js",
        "test": "node -r @std/esm test.js",
        "bench": "node -r @std/esm bench.js",
        "docs": "node ../../scripts/generate-readmes"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@std/esm": "*",
        "@turf/random": "*",
        "benchmark": "*",
        "rollup": "*",
        "rollup-plugin-uglify": "*",
        "tape": "*",
        "rollup-plugin-node-resolve": "*",
        "rollup-plugin-commonjs": "*"
      },
      "dependencies": {
        "@turf/helpers": "^5.1.0"
      },
      "@std/esm": {
        "esm": "js",
        "cjs": true
      },
      "_id": "@turf/meta@5.1.1",
      "_shasum": "0526442338e831d48a6dcc9a03b2c7d691b667fb",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.2",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "0526442338e831d48a6dcc9a03b2c7d691b667fb",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-5.1.1.tgz",
        "integrity": "sha512-kGlIlpMuAXi6JHNMArP89l9Su+hZJ5SKsqKw2FFC0xtNtpJOwTE0sgWyF7IxZdBwJPVFIYIAQip7ABr5m3WvWQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC9E3RkR+VKxEuEeINaTWGsIfZOA47i1GBZarTZiF2bpQIhANvnfc/a8hc2Bv52DjiAL2Ydc1OrttVNqgmObKBO9+Y7"
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-5.1.1.tgz_1512808211268_0.17907715123146772"
      },
      "directories": {}
    },
    "5.1.4": {
      "name": "@turf/meta",
      "version": "5.1.4",
      "description": "turf meta module",
      "main": "main.js",
      "module": "main.es.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts",
        "main.js",
        "main.es.js"
      ],
      "scripts": {
        "pretest": "rollup -c ../../rollup.config.js",
        "test": "node -r @std/esm test.js",
        "posttest": "node -r @std/esm ../../scripts/validate-es5-dependencies.js",
        "bench": "node -r @std/esm bench.js",
        "docs": "node ../../scripts/generate-readmes"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@std/esm": "*",
        "@turf/random": "^5.1.4",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "^5.1.4"
      },
      "@std/esm": {
        "esm": "js",
        "cjs": true
      },
      "_id": "@turf/meta@5.1.4",
      "_shasum": "7f5c8426159be43b2325e3e731a966aa1a48225f",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.2",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "7f5c8426159be43b2325e3e731a966aa1a48225f",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-5.1.4.tgz",
        "integrity": "sha512-jj78vzD2SlI26ygihwhbSuiQWViCYlHPuVvAd55ZNls0fz5I1qoB+SYSt7bCl3CjRrkiJrNFi0xbafwdR2eZzQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCkvGNt7tJNYXVMhHDm0XJR3R88KfDLZaGBNzPKb8c2JQIhAO0cHfPEFJR8cIMVYd6NiDTYmK7aFfMhK8zz15Y2A/GQ"
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-5.1.4.tgz_1512882204177_0.046157052740454674"
      },
      "directories": {}
    },
    "5.1.5": {
      "name": "@turf/meta",
      "version": "5.1.5",
      "description": "turf meta module",
      "main": "main.js",
      "module": "main.es.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts",
        "main.js",
        "main.es.js"
      ],
      "scripts": {
        "pretest": "rollup -c ../../rollup.config.js",
        "test": "node -r @std/esm test.js",
        "posttest": "node -r @std/esm ../../scripts/validate-es5-dependencies.js",
        "bench": "node -r @std/esm bench.js",
        "docs": "node ../../scripts/generate-readmes"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@std/esm": "*",
        "@turf/random": "^5.1.5",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "^5.1.5"
      },
      "@std/esm": {
        "esm": "js",
        "cjs": true
      },
      "_id": "@turf/meta@5.1.5",
      "_shasum": "043e95b8ad73c383b5c5ffc662d102569101f0ba",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.2",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "043e95b8ad73c383b5c5ffc662d102569101f0ba",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-5.1.5.tgz",
        "integrity": "sha512-mCqgFjFUl0EqDfhXNcGs2EcGzNRwb2XuGuJpsWrwEcWAsfeZU1ri7f8mYIBj4/vhyGB4Tq1Gxlntwvd2TA0MKw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDVNl4Eezu3zUHiI5zPbBh9K9PETAsq7Xa0OU1LDYA5ggIgJgMa0OUAYVZ36zbEToM9MwUj0KfFIYIFBm+VoutQ2pU="
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-5.1.5.tgz_1512882656349_0.9627394189592451"
      },
      "directories": {}
    },
    "5.1.6": {
      "name": "@turf/meta",
      "version": "5.1.6",
      "description": "turf meta module",
      "main": "main.js",
      "module": "main.es.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts",
        "main.js",
        "main.es.js"
      ],
      "scripts": {
        "pretest": "rollup -c ../../rollup.config.js",
        "test": "node -r @std/esm test.js",
        "posttest": "node -r @std/esm ../../scripts/validate-es5-dependencies.js",
        "bench": "node -r @std/esm bench.js",
        "docs": "node ../../scripts/generate-readmes"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@std/esm": "*",
        "@turf/random": "^5.1.5",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "^5.1.5"
      },
      "@std/esm": {
        "esm": "js",
        "cjs": true
      },
      "_id": "@turf/meta@5.1.6",
      "_shasum": "c20a863eded0869fb28548dee889341bccb46a46",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.2",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "c20a863eded0869fb28548dee889341bccb46a46",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-5.1.6.tgz",
        "integrity": "sha512-lv+6LCgoc3LVitQZ4TScN/8a/fcctq8bIoxBTMJVq4aU8xoHeY1851Dq8MCU37EzbH33utkx8/jENaQP+aeElg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFLWpmo6tHrxTSeJwqi/BP2vGQtvFZddsYijzVc59ME7AiB9F9uCAZG1+2C0wT4lenv0VOdsIMEPtffmS3J/WHoO9g=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-5.1.6.tgz_1512940335239_0.19245993182994425"
      },
      "directories": {}
    },
    "5.2.0": {
      "name": "@turf/meta",
      "version": "5.2.0",
      "description": "turf meta module",
      "main": "main.js",
      "module": "main.es.js",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts",
        "main.js",
        "main.es.js"
      ],
      "scripts": {
        "pretest": "rollup -c ../../rollup.config.js",
        "test": "node -r @std/esm test.js",
        "posttest": "node -r @std/esm ../../scripts/validate-es5-dependencies.js",
        "bench": "node -r @std/esm bench.js",
        "docs": "node ../../scripts/generate-readmes"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@std/esm": "*",
        "@turf/random": "^5.1.5",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "^5.1.5"
      },
      "@std/esm": {
        "esm": "js",
        "cjs": true
      },
      "_id": "@turf/meta@5.2.0",
      "_shasum": "3b1ad485ee0c3b0b1775132a32c384d53e4ba53d",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "6.11.2",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "shasum": "3b1ad485ee0c3b0b1775132a32c384d53e4ba53d",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-5.2.0.tgz",
        "integrity": "sha512-ZjQ3Ii62X9FjnK4hhdsbT+64AYRpaI8XMBMcyftEOGSmPMUVnkbvuv3C9geuElAXfQU7Zk1oWGOcrGOD9zr78Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIE75rBvtZeJOOiJ+wtJvFbhkULVmvSFgcWG9pzSe5FKPAiBf4yXdv0lRjIS1xaHQerX4JsGhiOMngchRXuefar8cdA=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-5.2.0.tgz_1514571290652_0.7391720185987651"
      },
      "directories": {}
    },
    "6.0.0-beta.2": {
      "name": "@turf/meta",
      "version": "6.0.0-beta.2",
      "description": "turf meta module",
      "main": "index",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.mjs",
        "index.d.ts"
      ],
      "scripts": {
        "pretest": "rollup -f cjs -i index.mjs -o index.js",
        "test": "node test.js",
        "posttest": "node ../../scripts/validate-es5-dependencies.js",
        "bench": "node bench.js",
        "docs": "node ../../scripts/generate-readmes"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@std/esm": "*",
        "@turf/random": "^5.1.5",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "6.0.0-beta.2"
      },
      "@std/esm": {
        "esm": "js",
        "cjs": true
      },
      "_id": "@turf/meta@6.0.0-beta.2",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "9.3.0",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "integrity": "sha512-iOgYglbTRKWcnLrqmE9tCKkkDMAjWoX2Nxip4PchfCiyEczha9yXJbxNzCKo5upfbVS3SzF7p7vuutY6doWbUQ==",
        "shasum": "e1654a0aef18e084720da85786ca2f4e9b2c33a1",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-6.0.0-beta.2.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCukU21uoX0WNpv8l2yuYXySFW8OGB5dNZfuaVzrUZ/cwIhAMxb7kUyBsDhtyBhJYWYykUtxoEzxpC1RFQvjsGanWXo"
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-6.0.0-beta.2.tgz_1515173640922_0.6635738064069301"
      },
      "directories": {}
    },
    "6.0.0-beta.3": {
      "name": "@turf/meta",
      "version": "6.0.0-beta.3",
      "description": "turf meta module",
      "main": "index",
      "module": "index.mjs",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.mjs",
        "index.d.ts"
      ],
      "scripts": {
        "pretest": "rollup -f cjs -i index.mjs -o index.js",
        "test": "node test.js",
        "posttest": "node ../../scripts/validate-es5-dependencies.js",
        "bench": "node bench.js",
        "docs": "node ../../scripts/generate-readmes"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@turf/random": "^5.1.5",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "6.0.0-beta.3"
      },
      "_id": "@turf/meta@6.0.0-beta.3",
      "_npmVersion": "5.5.1",
      "_nodeVersion": "9.3.0",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "integrity": "sha512-BvDXrWSdEnYeL9hN1HLSN85V3C0IqW+zvqzmHqS0wISVo+F3q62wIEo3TpBqpGHfegIwuMkhPIQxtZkuNX/QSw==",
        "shasum": "4affbd91e0686bbb7f6f075e41ccfe2f4e223201",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-6.0.0-beta.3.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD9QRs5ICcOlLX7Gj9EwPxDz/1Rcw+PVya8v/PdwUUUbQIhALML+biriGHe0zUbXtYpEfnyydy1Eq80gAVVMRbTlQMB"
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-6.0.0-beta.3.tgz_1515175212199_0.9453858411870897"
      },
      "directories": {}
    },
    "6.0.0-beta.4": {
      "name": "@turf/meta",
      "version": "6.0.0-beta.4",
      "description": "turf meta module",
      "main": "index",
      "module": "index.mjs",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.mjs",
        "index.d.ts"
      ],
      "scripts": {
        "pretest": "rollup -f cjs -o index.js index.mjs",
        "test": "node test.js",
        "bench": "node bench.js",
        "docs": "node ../../scripts/generate-readmes"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@turf/random": "^5.1.5",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "6.0.0-beta.4"
      },
      "_id": "@turf/meta@6.0.0-beta.4",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "9.3.0",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "integrity": "sha512-soYD4vZQKOxCw++8erHQYAmUd1KvQUElJcYcAuZhz+aWGturWnZxRRXShipYzsgmH/720ceRtqcfkDtUzXepMw==",
        "shasum": "dbc9fb39b42d53db2e1985301f3e916da43865b0",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-6.0.0-beta.4.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDCPiDoIOLMsKP5N7fhm0uxZeXHulGI2KoepTBcMQ3ePAiEAspigfUlwKnn28hkwzwLYpw/8fSJE7zOTlnxoFtdGwGA="
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-6.0.0-beta.4.tgz_1517004080077_0.7952965230215341"
      },
      "directories": {}
    },
    "6.0.0": {
      "name": "@turf/meta",
      "version": "6.0.0",
      "description": "turf meta module",
      "main": "index",
      "module": "index.mjs",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.mjs",
        "index.d.ts"
      ],
      "scripts": {
        "pretest": "rollup -f cjs -o index.js index.mjs",
        "test": "node test.js",
        "bench": "node bench.js",
        "docs": "node ../../scripts/generate-readmes"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@turf/random": "*",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "6.x"
      },
      "_id": "@turf/meta@6.0.0",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "9.3.0",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "integrity": "sha512-ibLV9ItDJbnU2l6IdcAkGyjXCtnFJHf1Rm7uLbyrNMazZ0Ig4JYkLz0QCzDBAY6HthHb8KskQGS7PLM1ugGy3Q==",
        "shasum": "b5ca11fedb75c2ab5cb8b82e896a1ffd4150127a",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-6.0.0.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEiRqCyLzE1Bh6XBbgTDKqnz1J9RDI6Dhs9iRmg/jsw7AiEA5bJ5IY1lCjdqmC8l86XQxHisAdFzIPF7dnJnR33I8hk="
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-6.0.0.tgz_1517007057130_0.47843346814624965"
      },
      "directories": {}
    },
    "6.0.1": {
      "name": "@turf/meta",
      "version": "6.0.1",
      "description": "turf meta module",
      "main": "index",
      "module": "index.mjs",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.mjs",
        "index.d.ts"
      ],
      "scripts": {
        "pretest": "rollup -f cjs -o index.js index.mjs",
        "test": "node test.js",
        "bench": "node bench.js",
        "docs": "node ../../scripts/generate-readmes"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@turf/random": "*",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "6.x"
      },
      "_id": "@turf/meta@6.0.1",
      "_npmVersion": "5.6.0",
      "_nodeVersion": "9.3.0",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "integrity": "sha512-+2mBdPM2sOrjbpm41OwzbFXqs0Vl05IRthFwbTfA4+QIhu97SvcMbX406P3QEerMPFtKEb33f01e4yMrEot/AA==",
        "shasum": "cf6f3f2263a3d24fc8d6a7e90f0420bbc44c090d",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-6.0.1.tgz",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC7H9gxhZFfNQf95voJMiq04sOnqw6g7pUwfQkTGSTb/gIhAIwQDt2mqUXb3Lz8iPvTY0okvO06BM6uHjumWSmOtNPZ"
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta-6.0.1.tgz_1517238428504_0.4013731882441789"
      },
      "directories": {}
    },
    "6.0.2": {
      "name": "@turf/meta",
      "version": "6.0.2",
      "description": "turf meta module",
      "main": "index",
      "types": "index.d.ts",
      "files": [
        "index.js",
        "index.d.ts"
      ],
      "scripts": {
        "pretest": "rollup -f cjs -o index.js index.mjs",
        "test": "node test.js",
        "bench": "node bench.js",
        "docs": "node ../../scripts/generate-readmes"
      },
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "devDependencies": {
        "@turf/random": "*",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "6.x"
      },
      "_id": "@turf/meta@6.0.2",
      "_npmVersion": "5.7.1",
      "_nodeVersion": "9.3.0",
      "_npmUser": {
        "name": "deniscarriere",
        "email": "carriere.denis@gmail.com"
      },
      "dist": {
        "integrity": "sha512-VA7HJkx7qF1l3+GNGkDVn2oXy4+QoLP6LktXAaZKjuT1JI0YESat7quUkbCMy4zP9lAUuvS4YMslLyTtr919FA==",
        "shasum": "eb92951126d24a613ac1b7b99d733fcc20fd30cf",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-6.0.2.tgz",
        "fileCount": 5,
        "unpackedSize": 84239,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa7dT4CRA9TVsSAnZWagAAVDIQAI3SqkDHpia2XpZ58tuK\nW6u89h7TdwMe7wjA0U60XSbAC7Lf8M1uicfAQ3pDv4VRmg4SlI1w9nTOsNQl\nPRDG8hBr1RSafd7QJW4iBPvL05DkdJNvczKCGf5kX1ZZE0iuMw9/kl/Vv+xx\nJQ7fQ0txsAT5yR1XMujzuFMJy5uyoEHavzLARl+z9/dnYaGxbAmKaS1V39x5\nNht58lfM7Un0Klj5xSYM74SKJfYnIAfxn9A7zTeDu340cft4KmFvkAidertV\nBo8Rn0HcKeVvhMscXjftBJGksV6MUGQUNVshlAV7XrmB+fD8HXBOMth3izf9\nEp/hfJeotREjsnNBduNBKX3b0zqawA+FshXd1lu6Yy/IQs/Lq0SJyHpjm42b\nCB1Lw0PcKHQw100RUiOe4gU2TDoXyf4rjj5cD3X30bL2de/k/efdRMO+tqoh\nJcmJHlW64bfL3VWU4nFOHX2dyUIjbTOSyqSddhfEhA8f3PYt/1Jz1VbUmL6s\nSz9JO+1BB+63wHglWeAE3ltpbJEz8/CzrLGpNs+XD4rtW9Wt9ygqkdg+GSn5\nO+dzLhL355gmVNgeGAOZA7Q+0zYJSVLZPzvmjimvts68PvKNhrWWASTTeo9d\n8RieYbdl7ZJBxOFTeucUQcgINoIc/J02hFizA/+39PmkzXKksZf5RUhbMWe9\nzgaq\r\n=iu8K\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHd/B2UKnW83DjiYl9zsAaPqCIAmteKosG6Heu2zw2CyAiEA+LY94hjzwtY7Q4zN3CgW+TVNg+XhfBumeNo0bi2OXek="
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta_6.0.2_1525535990623_0.5207582950432192"
      },
      "_hasShrinkwrap": false
    },
    "6.2.0-alpha.0": {
      "name": "@turf/meta",
      "version": "6.2.0-alpha.0",
      "description": "turf meta module",
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "main": "dist/js/index.js",
      "module": "dist/es/index.js",
      "types": "index.d.ts",
      "sideEffects": false,
      "scripts": {
        "bench": "npm-run-all prepare bench:run",
        "bench:run": "node bench.js",
        "docs": "node ../../scripts/generate-readmes",
        "posttest": "node -r esm ../../scripts/validate-es5-dependencies.js",
        "prepare": "rollup -c ../../rollup.config.js",
        "test": "npm-run-all prepare test:*",
        "test:tape": "node -r esm test.js",
        "test:types": "tsc --noEmit types.ts"
      },
      "devDependencies": {
        "@turf/random": "^6.2.0-alpha.0",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "^6.2.0-alpha.0"
      },
      "gitHead": "23b651deaa1ca6a0960d0142aea620b7cc6a076d",
      "_id": "@turf/meta@6.2.0-alpha.0",
      "_nodeVersion": "13.10.1",
      "_npmVersion": "lerna/3.20.2/node@v13.10.1+x64 (darwin)",
      "_npmUser": {
        "name": "mdfedderly",
        "email": "mdfedderly@mdfedderly.com"
      },
      "dist": {
        "integrity": "sha512-zTcSVuPJcEyZ9xeLs9ymZnvz7TrIApjFpdXhUV6XGQSceQygJZssQ6BMXaPnzfc45Wo3qRtEgRmlOZC+WFKCjA==",
        "shasum": "bb2a2cc9332a3439ff9e8eb3b6efac2a87e13c63",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-6.2.0-alpha.0.tgz",
        "fileCount": 8,
        "unpackedSize": 224703,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJefS4fCRA9TVsSAnZWagAA8T4QAIGl9qzv3PDpJjJ2UD+n\nS81XDSjUH49G8b8zIF+D6osVpao4jXBlHZy5Tlr0O5HSxVcljss58fBnTMmJ\ntwWcpoebWOiSYAV87B16UJ3kyblxq4xSCBLs0IpG3StRV5vYk7A3BsPcXEJP\n3GVVezRvL8OufU3bNKc86vm1ariZVvDBDYoZNezcx/mGYgmnohku8TkOTf6q\n7Y1S5HqAEF3exChMXXp8lDpcxXoCKPLfTcpEWTmcdkzJJrg44z01T+KLL3ks\nMYMzhtJXm7zL/PBwU+OyUrwwxUf0JS6PsmRZ+6vr9im33HoEQW2QR2l4azCE\nnLkwmL4ENacYMxZ82ZvJd36Bbm0igvZ2exxbHHoXwtkGshgJjO0cex5QZ1nR\nDUo0EfMp0+uyveFTB6MhzybfTlYalvJl1vlYa7t9kdqQ6LIi/YydQEnulvZu\nhjPrxEXyYpqK6gOs7/VvfdfcATrBa35Y9qat+Jox3d23JZ95sAhWrxoI672b\nSfVea/IA39Z6NYcO7rWq2fCFf8AfLQMb5qluUKT4azZWWN3gYosBiv2J8XWR\n1ZAg7fBBRsg7ShxEeDzXgEQfa051M+VWOyGjhNMygqXy91d8Uc15uZC39My0\nJgKnNiirhNqJAIYJmn97l357irfx7bwhcDEfZJkr6rGDmb5egcXoHHxp9ZxL\nc60q\r\n=2+Y7\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIH/1dDjEZC3k3BqWT6b39jeZbRoYkd1Azow/1mP8w7MiAiA1Al2MdW9oPERy/8txzVlcxYF1T2YwmSbbthXiiY9Xnw=="
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "mdfedderly@mdfedderly.com",
          "name": "mdfedderly"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "rowanwins@yahoo.com.au",
          "name": "rowanwins"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta_6.2.0-alpha.0_1585262103694_0.9342158955535951"
      },
      "_hasShrinkwrap": false
    },
    "6.2.0-alpha.1": {
      "name": "@turf/meta",
      "version": "6.2.0-alpha.1",
      "description": "turf meta module",
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "publishConfig": {
        "access": "public"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "main": "dist/js/index.js",
      "module": "dist/es/index.js",
      "types": "index.d.ts",
      "sideEffects": false,
      "scripts": {
        "bench": "npm-run-all prepare bench:run",
        "bench:run": "node bench.js",
        "docs": "node ../../scripts/generate-readmes",
        "posttest": "node -r esm ../../scripts/validate-es5-dependencies.js",
        "prepare": "rollup -c ../../rollup.config.js",
        "test": "npm-run-all prepare test:*",
        "test:tape": "node -r esm test.js",
        "test:types": "tsc --noEmit types.ts"
      },
      "devDependencies": {
        "@turf/random": "^6.2.0-alpha.1",
        "benchmark": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "^6.2.0-alpha.1"
      },
      "gitHead": "fc519c045a8931c1e14eab9160a7e28391f8da02",
      "_id": "@turf/meta@6.2.0-alpha.1",
      "_nodeVersion": "13.10.1",
      "_npmVersion": "lerna/3.20.2/node@v13.10.1+x64 (darwin)",
      "_npmUser": {
        "name": "mdfedderly",
        "email": "mdfedderly@mdfedderly.com"
      },
      "dist": {
        "integrity": "sha512-D1DF5uS8DOrNpeEGPBHo+p4ebqgTPBQkGd7Qk/bINpWt77EdJbjXhkDlRxx6+WXEYR6WhVa1htGMYsjL0j3Q9A==",
        "shasum": "b839855985be54955c58a6d18f56ca618f352bb4",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-6.2.0-alpha.1.tgz",
        "fileCount": 8,
        "unpackedSize": 224752,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJefUJQCRA9TVsSAnZWagAA+rsP/0ug/YvtojjQBtmdxV2m\nP9KqKeDZ/JA9olcxzDGptLRr9pCcziCR3aFkjHCvR+UYEpPbbWY8p08fhu7W\nA0qwBWyiPQmwruiKzQyo/wEy24HR/99KaP106J1ZLPekXgkvfY6PYSghGAQv\nHA7Wl5Tz8eLYn1kTMi6Mui+3l1XtfFH+QG0fAYicuf2Lyeb9us1AconIgUEM\nAsl9UJdC2YKqNKhk0HlBDC0vms/NsoV/GuHwnWpsPZDb8ikKV412RYjDGiWT\nRLjABuZzS0x1FmAHZyOhj4KZABhp9FbO6qMQo9uuwvR7PS3clXkVQlhwHi5z\nE58JK2Tz1PNzrvs4My31h92q53II8TGpn8tiaMtmbB9e9Aw9pLLsOtMIMnhj\n1LKv1nNULZt2ygf3q2HNFFKlH2V1gik4x3pjH9qhk/fVRIosfjJkkEvmgw0H\nok4qWQasC0lNqVtZbnLm31DjexQBE5HKSau7T+M2FftDBZjMA4gAhKDtqebb\n9E3h5PGTHje9plPTWunUlUrzTXQZiNc6Vzun30TXutpdGNJS3uN+ISLGj8ow\n6KghNWr+k85IVThHvxQumH+kNsWNLIsIZg6deiCD3LBgJB0QTD0KqO0nZzm1\nxaoM/RvlXgiA/cp+UY/sMZ0PV21+1Mztka/FMGsbGLf72LgAuh5CgEqLdOyk\n6M+F\r\n=U0Xx\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD/cYM0bmIkSrHNlhEvXh18jtOJg90eks7T/sezh0fS+AIhAPo3LAsq9+JBFp7+eNR2ChY2O+htTbFX9p9DkOO/d2QJ"
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "mdfedderly@mdfedderly.com",
          "name": "mdfedderly"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "rowanwins@yahoo.com.au",
          "name": "rowanwins"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta_6.2.0-alpha.1_1585267280156_0.37519513413381245"
      },
      "_hasShrinkwrap": false
    },
    "6.2.0-alpha.2": {
      "name": "@turf/meta",
      "version": "6.2.0-alpha.2",
      "description": "turf meta module",
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "publishConfig": {
        "access": "public"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "main": "dist/js/index.js",
      "module": "dist/es/index.js",
      "types": "index.d.ts",
      "sideEffects": false,
      "scripts": {
        "bench": "npm-run-all prepare bench:run",
        "bench:run": "node bench.js",
        "docs": "node ../../scripts/generate-readmes",
        "posttest": "node -r esm ../../scripts/validate-es5-dependencies.js",
        "prepare": "rollup -c ../../rollup.config.js",
        "test": "npm-run-all prepare test:*",
        "test:tape": "node -r esm test.js",
        "test:types": "tsc --noEmit types.ts"
      },
      "devDependencies": {
        "@turf/random": "^6.2.0-alpha.2",
        "benchmark": "*",
        "npm-run-all": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "^6.2.0-alpha.2"
      },
      "gitHead": "23d5cb91d77e0c1e2e903a2252f525797f1d0d09",
      "readme": "# @turf/meta\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n## coordEachCallback\n\nCallback for coordEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentCoord` **[Array][2]&lt;[number][3]>** The current coordinate being processed.\n-   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## coordEach\n\nIterate over coordinates in any GeoJSON object, similar to Array.forEach()\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n-   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\nReturns **void** \n\n## coordReduce\n\nReduce coordinates in any GeoJSON object, similar to Array.reduce()\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Geometry][6] \\| [Feature][5])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentCoord, coordIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n-   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentCoord;\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## coordReduceCallback\n\nCallback for coordReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentCoord` **[Array][2]&lt;[number][3]>** The current coordinate being processed.\n-   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n    Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## propEach\n\nIterate over properties in any GeoJSON object, similar to Array.forEach()\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (currentProperties, featureIndex)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propEach(features, function (currentProperties, featureIndex) {\n  //=currentProperties\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## propEachCallback\n\nCallback for propEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentProperties` **[Object][8]** The current Properties being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propReduceCallback\n\nCallback for propReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentProperties` **any** The current Properties being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propReduce\n\nReduce properties in any GeoJSON object into a single value,\nsimilar to how Array.reduce works. However, in this case we lazily run\nthe reduction, so an array of all properties is unnecessary.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentProperties, featureIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n  //=previousValue\n  //=currentProperties\n  //=featureIndex\n  return currentProperties\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## featureEachCallback\n\nCallback for featureEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentFeature` **[Feature][5]&lt;any>** The current Feature being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureEach\n\nIterate over features in any GeoJSON object, similar to\nArray.forEach.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.featureEach(features, function (currentFeature, featureIndex) {\n  //=currentFeature\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## featureReduceCallback\n\nCallback for featureReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentFeature` **[Feature][5]** The current Feature being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## coordAll\n\nGet all coordinates from any GeoJSON object.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nvar coords = turf.coordAll(features);\n//= [[26, 37], [36, 53]]\n```\n\nReturns **[Array][2]&lt;[Array][2]&lt;[number][3]>>** coordinate position array\n\n## geomEachCallback\n\nCallback for geomEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n-   `featureBBox` **[Array][2]&lt;[number][3]>** The current Feature BBox being processed.\n-   `featureId` **([number][3] \\| [string][9])** The current Feature Id being processed.\n\n## geomEach\n\nIterate over each geometry in any GeoJSON object, similar to Array.forEach()\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n});\n```\n\nReturns **void** \n\n## geomReduceCallback\n\nCallback for geomReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n-   `featureBBox` **[Array][2]&lt;[number][3]>** The current Feature BBox being processed.\n-   `featureId` **([number][3] \\| [string][9])** The current Feature Id being processed.\n\n## geomReduce\n\nReduce geometry in any GeoJSON object, similar to Array.reduce().\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=previousValue\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n  return currentGeometry\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## flattenEachCallback\n\nCallback for flattenEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentFeature` **[Feature][5]** The current flattened feature being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenEach\n\nIterate over flattened features in any GeoJSON object, similar to\nArray.forEach.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n});\n```\n\n## flattenReduceCallback\n\nCallback for flattenReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentFeature` **[Feature][5]** The current Feature being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenReduce\n\nReduce flattened features in any GeoJSON object, similar to Array.reduce().\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## segmentEachCallback\n\nCallback for segmentEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentSegment` **[Feature][5]&lt;[LineString][10]>** The current Segment being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n-   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\nReturns **void** \n\n## segmentEach\n\nIterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON\n-   `callback` **[Function][1]** a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n\n**Examples**\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //=currentSegment\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  //=segmentIndex\n});\n\n// Calculate the total number of segments\nvar total = 0;\nturf.segmentEach(polygon, function () {\n    total++;\n});\n```\n\nReturns **void** \n\n## segmentReduceCallback\n\nCallback for segmentReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentSegment` **[Feature][5]&lt;[LineString][10]>** The current Segment being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n-   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\n## segmentReduce\n\nReduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON\n-   `callback` **[Function][1]** a method that takes (previousValue, currentSegment, currentIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //= previousSegment\n  //= currentSegment\n  //= featureIndex\n  //= multiFeatureIndex\n  //= geometryIndex\n  //= segmentInex\n  return currentSegment\n});\n\n// Calculate the total number of segments\nvar initialValue = 0\nvar total = turf.segmentReduce(polygon, function (previousValue) {\n    previousValue++;\n    return previousValue;\n}, initialValue);\n```\n\nReturns **void** \n\n## lineEachCallback\n\nCallback for lineEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentLine` **[Feature][5]&lt;[LineString][10]>** The current LineString|LinearRing being processed\n-   `featureIndex` **[number][3]** The current index of the Feature being processed\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineEach\n\nIterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\nsimilar to Array.forEach.\n\n**Parameters**\n\n-   `geojson` **([Geometry][6] \\| [Feature][5]&lt;([LineString][10] \\| [Polygon][11] \\| [MultiLineString][12] \\| [MultiPolygon][13])>)** object\n-   `callback` **[Function][1]** a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n\n**Examples**\n\n```javascript\nvar multiLine = turf.multiLineString([\n  [[26, 37], [35, 45]],\n  [[36, 53], [38, 50], [41, 55]]\n]);\n\nturf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\n## lineReduceCallback\n\nCallback for lineReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentLine` **[Feature][5]&lt;[LineString][10]>** The current LineString|LinearRing being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n**Parameters**\n\n-   `geojson` **([Geometry][6] \\| [Feature][5]&lt;([LineString][10] \\| [Polygon][11] \\| [MultiLineString][12] \\| [MultiPolygon][13])>)** object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar multiPoly = turf.multiPolygon([\n  turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n  turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n]);\n\nturf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentLine\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## findSegment\n\nFinds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\nPoint & MultiPoint will always return null.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** Any GeoJSON Feature or Geometry\n-   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n    -   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    -   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    -   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    -   `options.segmentIndex` **[number][3]** Segment Index (optional, default `0`)\n    -   `options.properties` **[Object][8]** Translate Properties to output LineString (optional, default `{}`)\n    -   `options.bbox` **[BBox][14]** Translate BBox to output LineString (optional, default `{}`)\n    -   `options.id` **([number][3] \\| [string][9])** Translate Id to output LineString (optional, default `{}`)\n\n**Examples**\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findSegment(multiLine);\n// => Feature<LineString<[[10, 10], [50, 30]]>>\n\n// First Segment of 2nd Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: 1});\n// => Feature<LineString<[[-10, -10], [-50, -30]]>>\n\n// Last Segment of Last Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n// => Feature<LineString<[[-50, -30], [-30, -40]]>>\n```\n\nReturns **[Feature][5]&lt;[LineString][10]>** 2-vertex GeoJSON Feature LineString\n\n## findPoint\n\nFinds a particular Point from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** Any GeoJSON Feature or Geometry\n-   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n    -   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    -   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    -   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    -   `options.coordIndex` **[number][3]** Coord Index (optional, default `0`)\n    -   `options.properties` **[Object][8]** Translate Properties to output Point (optional, default `{}`)\n    -   `options.bbox` **[BBox][14]** Translate BBox to output Point (optional, default `{}`)\n    -   `options.id` **([number][3] \\| [string][9])** Translate Id to output Point (optional, default `{}`)\n\n**Examples**\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findPoint(multiLine);\n// => Feature<Point<[10, 10]>>\n\n// First Segment of the 2nd Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: 1});\n// => Feature<Point<[-10, -10]>>\n\n// Last Segment of last Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n// => Feature<Point<[-30, -40]>>\n```\n\nReturns **[Feature][5]&lt;[Point][15]>** 2-vertex GeoJSON Feature Point\n\n[1]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\n\n[2]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[3]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[4]: https://tools.ietf.org/html/rfc7946#section-3.3\n\n[5]: https://tools.ietf.org/html/rfc7946#section-3.2\n\n[6]: https://tools.ietf.org/html/rfc7946#section-3.1\n\n[7]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[8]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[9]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[10]: https://tools.ietf.org/html/rfc7946#section-3.1.4\n\n[11]: https://tools.ietf.org/html/rfc7946#section-3.1.6\n\n[12]: https://tools.ietf.org/html/rfc7946#section-3.1.5\n\n[13]: https://tools.ietf.org/html/rfc7946#section-3.1.7\n\n[14]: https://tools.ietf.org/html/rfc7946#section-5\n\n[15]: https://tools.ietf.org/html/rfc7946#section-3.1.2\n\n<!-- This file is automatically generated. Please don't edit it directly:\nif you find an error, edit the source file (likely index.js), and re-run\n./scripts/generate-readmes in the turf project. -->\n\n---\n\nThis module is part of the [Turfjs project](http://turfjs.org/), an open source\nmodule collection dedicated to geographic algorithms. It is maintained in the\n[Turfjs/turf](https://github.com/Turfjs/turf) repository, where you can create\nPRs and issues.\n\n### Installation\n\nInstall this module individually:\n\n```sh\n$ npm install @turf/meta\n```\n\nOr install the Turf module that includes it as a function:\n\n```sh\n$ npm install @turf/turf\n```\n",
      "readmeFilename": "README.md",
      "_id": "@turf/meta@6.2.0-alpha.2",
      "_nodeVersion": "13.10.1",
      "_npmVersion": "lerna/3.20.2/node@v13.10.1+x64 (darwin)",
      "_npmUser": {
        "name": "mdfedderly",
        "email": "mdfedderly@mdfedderly.com"
      },
      "dist": {
        "integrity": "sha512-Hk2gnRSto/yiT6oO0bHYPiOvWTsgb1dlQm9cTcrrR068Zlfzx/7cJV5Me2Ls085rMBMlT376CgaHySexXVRrIg==",
        "shasum": "8234b31ab277ccb9e2b779ec3595af32135ea291",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-6.2.0-alpha.2.tgz",
        "fileCount": 8,
        "unpackedSize": 224808,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfDHI4CRA9TVsSAnZWagAADeYP+gNop4z2VFWa9cXKZDjM\nVA50Egeb5wHvwE7ap0RQiGEqpIqqsG6mk9Idy0ueoD+QBg9Lqz6R/HRau5p6\nkPXHC3wsf2XKieJIkIFb+gTL/FKygJWm2JFO12GoARHtUkuz/FNnz0Wk6Kz4\nUCk6mUGL2A69rIaj4CnG71BMFZMgn9qiKwcOsiFfeI15QQPRJ1KW1vorxH/m\nN2+6lRGrJjPxaQdIq3+YLSEUKP0jJQtdQ8NHHcRoU2YYRe7ci4qc8mGncQRs\nldnY9OL48lWyCz0c/NxNvnh7DY7olPbR7298g28jI67Z9eWOj/MFrnuQto/b\nXyY2Z6joV/YXe5p5PXwvxuR6yzh4t70I1vIXR/AK91rsA6/f6rlavcSLX0Uv\nVrLQVbQGumKQ5GszkQoCp62rR0Cl2GX9H3G9wNdPLQdSxVOUDz1Aqxgtj4OW\nIXuaOy9MRCNHfqFhfL+wGXe/sAMw3q3qmLsAuLbziX7aNV0r9WrP3UfqYB1w\nomu7hwICxHf76wTJ8c1fwG2FSvdclz/wk1YtiKHL3vm4hQZ3q+JcvOMNU7dc\nqxF4dPcxpCF7tsOsAI79vwZNrRgbUXYXOwTyj68v32RO/aH8FlfffMCQSmZS\nFaypk7QFZEc9XHEydNYxumRAWWWw9+PKugArta7GmSQsFqnKYH4cas4TARbf\ndx45\r\n=h07v\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCqtR6cfikYa9ithBU10S3Wpu3n7CIkjHIQ+DO1E6KzXwIhAOqzbSFJojMlgPwlIexFQ7RpTwOUkn9OdEfO4V0WoWSa"
          }
        ]
      },
      "maintainers": [
        {
          "email": "carriere.denis@gmail.com",
          "name": "deniscarriere"
        },
        {
          "email": "mdfedderly@mdfedderly.com",
          "name": "mdfedderly"
        },
        {
          "email": "morgan.herlocker@gmail.com",
          "name": "morganherlocker"
        },
        {
          "email": "rowanwins@yahoo.com.au",
          "name": "rowanwins"
        },
        {
          "email": "tim.channell@gmail.com",
          "name": "tcql"
        },
        {
          "email": "tom@macwright.org",
          "name": "tmcw"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta_6.2.0-alpha.2_1594651191859_0.5744857229167502"
      },
      "_hasShrinkwrap": false
    },
    "6.2.0-alpha.3": {
      "name": "@turf/meta",
      "version": "6.2.0-alpha.3",
      "description": "turf meta module",
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "publishConfig": {
        "access": "public"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "main": "dist/js/index.js",
      "module": "dist/es/index.js",
      "exports": {
        "import": "./dist/es/index.js",
        "require": "./dist/js/index.js"
      },
      "types": "index.d.ts",
      "sideEffects": false,
      "scripts": {
        "bench": "node -r esm bench.js",
        "build": "rollup -c ../../rollup.config.js && echo '{\"type\":\"module\"}' > dist/es/package.json",
        "docs": "node ../../scripts/generate-readmes",
        "posttest": "node -r esm ../../scripts/validate-es5-dependencies.js",
        "test": "npm-run-all test:*",
        "test:tape": "node -r esm test.js",
        "test:types": "tsc --esModuleInterop --noEmit types.ts"
      },
      "devDependencies": {
        "@turf/random": "^6.2.0-alpha.3",
        "benchmark": "*",
        "npm-run-all": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "^6.2.0-alpha.3"
      },
      "gitHead": "dce9edfc705352e8cb9e0083c9330ba0e8d77409",
      "readme": "# @turf/meta\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n## coordEachCallback\n\nCallback for coordEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentCoord` **[Array][2]&lt;[number][3]>** The current coordinate being processed.\n-   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## coordEach\n\nIterate over coordinates in any GeoJSON object, similar to Array.forEach()\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n-   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\nReturns **void** \n\n## coordReduce\n\nReduce coordinates in any GeoJSON object, similar to Array.reduce()\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Geometry][6] \\| [Feature][5])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentCoord, coordIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n-   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentCoord;\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## coordReduceCallback\n\nCallback for coordReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentCoord` **[Array][2]&lt;[number][3]>** The current coordinate being processed.\n-   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n    Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## propEach\n\nIterate over properties in any GeoJSON object, similar to Array.forEach()\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (currentProperties, featureIndex)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propEach(features, function (currentProperties, featureIndex) {\n  //=currentProperties\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## propEachCallback\n\nCallback for propEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentProperties` **[Object][8]** The current Properties being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propReduceCallback\n\nCallback for propReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentProperties` **any** The current Properties being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propReduce\n\nReduce properties in any GeoJSON object into a single value,\nsimilar to how Array.reduce works. However, in this case we lazily run\nthe reduction, so an array of all properties is unnecessary.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentProperties, featureIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n  //=previousValue\n  //=currentProperties\n  //=featureIndex\n  return currentProperties\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## featureEachCallback\n\nCallback for featureEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentFeature` **[Feature][5]&lt;any>** The current Feature being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureEach\n\nIterate over features in any GeoJSON object, similar to\nArray.forEach.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.featureEach(features, function (currentFeature, featureIndex) {\n  //=currentFeature\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## featureReduceCallback\n\nCallback for featureReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentFeature` **[Feature][5]** The current Feature being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## coordAll\n\nGet all coordinates from any GeoJSON object.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nvar coords = turf.coordAll(features);\n//= [[26, 37], [36, 53]]\n```\n\nReturns **[Array][2]&lt;[Array][2]&lt;[number][3]>>** coordinate position array\n\n## geomEachCallback\n\nCallback for geomEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n-   `featureBBox` **[Array][2]&lt;[number][3]>** The current Feature BBox being processed.\n-   `featureId` **([number][3] \\| [string][9])** The current Feature Id being processed.\n\n## geomEach\n\nIterate over each geometry in any GeoJSON object, similar to Array.forEach()\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n});\n```\n\nReturns **void** \n\n## geomReduceCallback\n\nCallback for geomReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n-   `featureBBox` **[Array][2]&lt;[number][3]>** The current Feature BBox being processed.\n-   `featureId` **([number][3] \\| [string][9])** The current Feature Id being processed.\n\n## geomReduce\n\nReduce geometry in any GeoJSON object, similar to Array.reduce().\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=previousValue\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n  return currentGeometry\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## flattenEachCallback\n\nCallback for flattenEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentFeature` **[Feature][5]** The current flattened feature being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenEach\n\nIterate over flattened features in any GeoJSON object, similar to\nArray.forEach.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n});\n```\n\n## flattenReduceCallback\n\nCallback for flattenReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentFeature` **[Feature][5]** The current Feature being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenReduce\n\nReduce flattened features in any GeoJSON object, similar to Array.reduce().\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## segmentEachCallback\n\nCallback for segmentEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentSegment` **[Feature][5]&lt;[LineString][10]>** The current Segment being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n-   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\nReturns **void** \n\n## segmentEach\n\nIterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON\n-   `callback` **[Function][1]** a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n\n**Examples**\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //=currentSegment\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  //=segmentIndex\n});\n\n// Calculate the total number of segments\nvar total = 0;\nturf.segmentEach(polygon, function () {\n    total++;\n});\n```\n\nReturns **void** \n\n## segmentReduceCallback\n\nCallback for segmentReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentSegment` **[Feature][5]&lt;[LineString][10]>** The current Segment being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n-   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\n## segmentReduce\n\nReduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON\n-   `callback` **[Function][1]** a method that takes (previousValue, currentSegment, currentIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //= previousSegment\n  //= currentSegment\n  //= featureIndex\n  //= multiFeatureIndex\n  //= geometryIndex\n  //= segmentInex\n  return currentSegment\n});\n\n// Calculate the total number of segments\nvar initialValue = 0\nvar total = turf.segmentReduce(polygon, function (previousValue) {\n    previousValue++;\n    return previousValue;\n}, initialValue);\n```\n\nReturns **void** \n\n## lineEachCallback\n\nCallback for lineEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentLine` **[Feature][5]&lt;[LineString][10]>** The current LineString|LinearRing being processed\n-   `featureIndex` **[number][3]** The current index of the Feature being processed\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineEach\n\nIterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\nsimilar to Array.forEach.\n\n**Parameters**\n\n-   `geojson` **([Geometry][6] \\| [Feature][5]&lt;([LineString][10] \\| [Polygon][11] \\| [MultiLineString][12] \\| [MultiPolygon][13])>)** object\n-   `callback` **[Function][1]** a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n\n**Examples**\n\n```javascript\nvar multiLine = turf.multiLineString([\n  [[26, 37], [35, 45]],\n  [[36, 53], [38, 50], [41, 55]]\n]);\n\nturf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\n## lineReduceCallback\n\nCallback for lineReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentLine` **[Feature][5]&lt;[LineString][10]>** The current LineString|LinearRing being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n**Parameters**\n\n-   `geojson` **([Geometry][6] \\| [Feature][5]&lt;([LineString][10] \\| [Polygon][11] \\| [MultiLineString][12] \\| [MultiPolygon][13])>)** object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar multiPoly = turf.multiPolygon([\n  turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n  turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n]);\n\nturf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentLine\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## findSegment\n\nFinds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\nPoint & MultiPoint will always return null.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** Any GeoJSON Feature or Geometry\n-   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n    -   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    -   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    -   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    -   `options.segmentIndex` **[number][3]** Segment Index (optional, default `0`)\n    -   `options.properties` **[Object][8]** Translate Properties to output LineString (optional, default `{}`)\n    -   `options.bbox` **[BBox][14]** Translate BBox to output LineString (optional, default `{}`)\n    -   `options.id` **([number][3] \\| [string][9])** Translate Id to output LineString (optional, default `{}`)\n\n**Examples**\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findSegment(multiLine);\n// => Feature<LineString<[[10, 10], [50, 30]]>>\n\n// First Segment of 2nd Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: 1});\n// => Feature<LineString<[[-10, -10], [-50, -30]]>>\n\n// Last Segment of Last Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n// => Feature<LineString<[[-50, -30], [-30, -40]]>>\n```\n\nReturns **[Feature][5]&lt;[LineString][10]>** 2-vertex GeoJSON Feature LineString\n\n## findPoint\n\nFinds a particular Point from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** Any GeoJSON Feature or Geometry\n-   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n    -   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    -   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    -   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    -   `options.coordIndex` **[number][3]** Coord Index (optional, default `0`)\n    -   `options.properties` **[Object][8]** Translate Properties to output Point (optional, default `{}`)\n    -   `options.bbox` **[BBox][14]** Translate BBox to output Point (optional, default `{}`)\n    -   `options.id` **([number][3] \\| [string][9])** Translate Id to output Point (optional, default `{}`)\n\n**Examples**\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findPoint(multiLine);\n// => Feature<Point<[10, 10]>>\n\n// First Segment of the 2nd Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: 1});\n// => Feature<Point<[-10, -10]>>\n\n// Last Segment of last Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n// => Feature<Point<[-30, -40]>>\n```\n\nReturns **[Feature][5]&lt;[Point][15]>** 2-vertex GeoJSON Feature Point\n\n[1]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\n\n[2]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[3]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[4]: https://tools.ietf.org/html/rfc7946#section-3.3\n\n[5]: https://tools.ietf.org/html/rfc7946#section-3.2\n\n[6]: https://tools.ietf.org/html/rfc7946#section-3.1\n\n[7]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[8]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[9]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[10]: https://tools.ietf.org/html/rfc7946#section-3.1.4\n\n[11]: https://tools.ietf.org/html/rfc7946#section-3.1.6\n\n[12]: https://tools.ietf.org/html/rfc7946#section-3.1.5\n\n[13]: https://tools.ietf.org/html/rfc7946#section-3.1.7\n\n[14]: https://tools.ietf.org/html/rfc7946#section-5\n\n[15]: https://tools.ietf.org/html/rfc7946#section-3.1.2\n\n<!-- This file is automatically generated. Please don't edit it directly:\nif you find an error, edit the source file (likely index.js), and re-run\n./scripts/generate-readmes in the turf project. -->\n\n---\n\nThis module is part of the [Turfjs project](http://turfjs.org/), an open source\nmodule collection dedicated to geographic algorithms. It is maintained in the\n[Turfjs/turf](https://github.com/Turfjs/turf) repository, where you can create\nPRs and issues.\n\n### Installation\n\nInstall this module individually:\n\n```sh\n$ npm install @turf/meta\n```\n\nOr install the Turf module that includes it as a function:\n\n```sh\n$ npm install @turf/turf\n```\n",
      "readmeFilename": "README.md",
      "_id": "@turf/meta@6.2.0-alpha.3",
      "_nodeVersion": "13.10.1",
      "_npmVersion": "lerna/3.20.2/node@v13.10.1+x64 (darwin)",
      "_npmUser": {
        "name": "mdfedderly",
        "email": "mdfedderly@mdfedderly.com"
      },
      "dist": {
        "integrity": "sha512-E9d3VQdpu4uTKHMKSsd5hg7cSiR5AqVDSj64Fmo8SFR4wZ9ZmD9EOntkLqx4C5ABs2HTQi+PfN+XLOmja1eBKw==",
        "shasum": "d984db5b5af1bef23814e837e6d2ee2ff542ad4a",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-6.2.0-alpha.3.tgz",
        "fileCount": 8,
        "unpackedSize": 181002,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf0o1SCRA9TVsSAnZWagAAH2gP/11KswAI3hZ5Tkzhn61o\nZofSvFA/ZKdHcy4SbXBT52BxnvsPqBnW9hZbqTJfjVgfBtGVfU03o1b6dJLl\n4PgUD7P/g9ykPy2rYPiWupFS/9lbhyV/pRyxv31q7G6Gc6RpBgVk8vMhlMeO\nDQMa2czvH3EBNSaC1j1Rt0oGLJkEnsDGR4pU7EAr6wR516/hNRqHe9ZKDg2a\n46+2ImJNXiRhV2R6gGdgrALOgoObCSfelWzVNM6evYbv/DTme9u9dFOPiWEI\nUUXY0LQPA6HQMozA9UkMMrbBXSY73yqJbVZB6BkuU2CJ6iU6g9jA6vRjPyzO\nV0vBpmvyeqSvLmYNbCS2ay5l5c+Xrq5Oq26IBWLOAxKLqNmi4g9MpPnN8F3e\nsyxfs6UNkW8b8n2S/RGDxbNs10oDx6ZBBZLX2jhW1PS19WKw93txkF07iSWc\ngPeWvc+nPiet94x6SpuVJISb37UPWewQNGCcfYwhqJqA1U6PLi3OMPMTIuSQ\ncBjI63KKA1oaf6V8bNt53wAUqXU7ByblEOhfmSP8+zrz4dtO0xK83LhQOd3A\nsHSuVpsD8i7HJH1Ro9QRAc2CqLcuRXyuFqvyhonmCNOZwmfvTvC3kcV05rYC\n/9jJEEhSA9pb4IPFduLmYE1mqFNY8Y8+pya5REZa/pK1WfbGmwmb5Ze1DoG7\nJri2\r\n=sBy/\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIE9nqzD+ry+7EkLwdUYzNIW9fDc/LGkJRGjdmPzCgjs4AiEA1TUihBAmNJktY3jDDvXEV+nLGBiMNSpvvWmrmnOaFdM="
          }
        ]
      },
      "directories": {},
      "maintainers": [
        {
          "name": "mdfedderly",
          "email": "mdfedderly@mdfedderly.com"
        },
        {
          "name": "rowanwins",
          "email": "rowanwins@yahoo.com.au"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.org"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta_6.2.0-alpha.3_1607634257629_0.31595297720619153"
      },
      "_hasShrinkwrap": false
    },
    "6.2.0": {
      "name": "@turf/meta",
      "version": "6.2.0",
      "description": "turf meta module",
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "publishConfig": {
        "access": "public"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "main": "dist/js/index.js",
      "module": "dist/es/index.js",
      "exports": {
        "import": "./dist/es/index.js",
        "require": "./dist/js/index.js"
      },
      "types": "index.d.ts",
      "sideEffects": false,
      "scripts": {
        "bench": "node -r esm bench.js",
        "build": "rollup -c ../../rollup.config.js && echo '{\"type\":\"module\"}' > dist/es/package.json",
        "docs": "node ../../scripts/generate-readmes",
        "test": "npm-run-all test:*",
        "test:tape": "node -r esm test.js",
        "test:types": "tsc --esModuleInterop --noEmit types.ts"
      },
      "devDependencies": {
        "@turf/random": "^6.2.0",
        "benchmark": "*",
        "npm-run-all": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "^6.2.0"
      },
      "gitHead": "c277baf2b967a35efec75de9ae54869d20da5288",
      "_id": "@turf/meta@6.2.0",
      "_nodeVersion": "13.10.1",
      "_npmVersion": "lerna/3.20.2/node@v13.10.1+x64 (darwin)",
      "_npmUser": {
        "name": "mdfedderly",
        "email": "mdfedderly@mdfedderly.com"
      },
      "dist": {
        "integrity": "sha512-8bM69hzRYKNfpZ+cyLxXZLw1IqCxm3cBcyEkVBHROFsQJb1o1Ghv2cd4iCSIuvkc1xSWD+qQvUjYr40XSNsyOQ==",
        "shasum": "a225477fd8b5a4166d98e2e70cc4ed843db0f48d",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-6.2.0.tgz",
        "fileCount": 7,
        "unpackedSize": 133877,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf/bjICRA9TVsSAnZWagAAhLwQAIyk3FDFD7+aY/eEfqZA\nztjXIgfqFW+ZVzyqv3p6OWKvC4MQVgoOaFXHvLUFCzvHioa2jZZaWm0/1jIu\nNK5BAhgCIezDrCTkCQYQB9pv/0dKZZD6nDMdz3A8w6a4OFundCGv2Mz42bYZ\njwjM8zHF7+lwq/vgOrJNK+M4ZX67iI/x+VBweKaTRR5e45mFOZj7tpI4yzG8\nQ5GavNgx+jNaapwhfwqMGVSwLJiuLgGgXvIVBcUExwOqtQZeRPn4HDBv4gN0\nqWW7SNk4WH6yqNHgnWDdfXAaIz6BMpebZ8EPr1qJ0XEwWZZ8d1xagM60iUvH\n4FEsspEh/z39ekvMKGqpk5PEdO8hTfJHqsnQMbeN7fAQ8Mk0i4+gPZ85ZmWd\nFvupIdt8iBglYIrY+h6IAZ5FzXHTKcbzSQcom9FFpeYGumL/mUf7DAVHOjb4\nw5viYzQBrP7ARlzT0kONdmxGfD2qYKNHoEdyjEjL58uwCTilIIwKqZr2S5X0\nkJAApiNxXNty7ykNl7mBsXBbJVzKj2O6OsGRJosVlSVr3ayokRMQETfNeF+o\nif4zKBrzq1RkKSArtGs+fufk2bXM8dri2a7xSQwXmwukVp226v/7Nc2vbgWb\nUbvado3or3Ip538zwP3RM9eijHSnI6Rr6ygej02tdsfvbhUEA+ODfT+yDCPs\nL0V0\r\n=2mhG\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIC2E+TnrmsWyY03P/tIGw78VjXRZHxyzKqGCqpE0P7BlAiB7aDT6V3S9M/0xG61OcGO4JJusZyDp6AWCLDT+fITUrQ=="
          }
        ]
      },
      "directories": {},
      "maintainers": [
        {
          "name": "rowanwins",
          "email": "rowanwins@yahoo.com.au"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        },
        {
          "name": "mdfedderly",
          "email": "mdfedderly@mdfedderly.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta_6.2.0_1610463431509_0.4321024142201799"
      },
      "_hasShrinkwrap": false
    },
    "6.3.0": {
      "name": "@turf/meta",
      "version": "6.3.0",
      "description": "turf meta module",
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "publishConfig": {
        "access": "public"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "main": "dist/js/index.js",
      "module": "dist/es/index.js",
      "exports": {
        "./package.json": "./package.json",
        ".": {
          "import": "./dist/es/index.js",
          "require": "./dist/js/index.js"
        }
      },
      "types": "index.d.ts",
      "sideEffects": false,
      "scripts": {
        "bench": "node -r esm bench.js",
        "build": "rollup -c ../../rollup.config.js && echo '{\"type\":\"module\"}' > dist/es/package.json",
        "docs": "node ../../scripts/generate-readmes",
        "test": "npm-run-all test:*",
        "test:tape": "node -r esm test.js",
        "test:types": "tsc --esModuleInterop --noEmit types.ts"
      },
      "devDependencies": {
        "@turf/random": "^6.3.0",
        "benchmark": "*",
        "npm-run-all": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "^6.3.0"
      },
      "gitHead": "57c8877e1e2d67effc2cdd23385c02b2a6615a49",
      "_id": "@turf/meta@6.3.0",
      "_nodeVersion": "13.10.1",
      "_npmVersion": "lerna/3.20.2/node@v13.10.1+x64 (darwin)",
      "_npmUser": {
        "name": "mdfedderly",
        "email": "mdfedderly@mdfedderly.com"
      },
      "dist": {
        "integrity": "sha512-qBJjaAJS9H3ap0HlGXyF/Bzfl0qkA9suafX/jnDsZvWMfVLt+s+o6twKrXOGk5t7nnNON2NFRC8+czxpu104EQ==",
        "shasum": "f3e280ab29641f21e4f99310ce77f9c8394ae394",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-6.3.0.tgz",
        "fileCount": 7,
        "unpackedSize": 133938,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgCEB4CRA9TVsSAnZWagAAF6cP/3MOkTB70jIEZeoqKmQa\n14NjkJYHL350VYTWRxNgMVIGlbYzZrpQNioKCtJGprGQTWGq6/0lQZgaErx0\nfff1mMA3g25g7KJ1WqRnpC2nU6c3c2uqQATO5EZUsFqE4BgR+dujHUvPssYU\nWRsmeRl032Q++5ZMUx8gs1tsE9gjQtGx0zI8bsCuDWFDxEibyXv9PbqeDONL\nY2gLWGKQwiUfQfzYNhbiYTDvwd4mq8P/3zjinC17oFoJGLRcX3uPjsoYJj8S\nqIQtNHjiRJ91ZN9pDdc+hGfL+uKQ+dj8UONpOZ5LchfGQDdeu4ISNFIEwWnM\nTvSsr4ImUhbCQqWtJghbp66RJhhuDqaEA+Tth/itCdGm9wj9bE4OmcDmgV/w\n7FcaA+XAlOJzTVDFCbQDrqHGBqVRSh8TMYvFLXZh8S+U6rtot+Og3l8pYJbu\nGF9Ug60AaWmyG+GOCTMdGmgiwMbwLIiRT3CwCkcB8gDD+d5RHNHFNRKmLR55\ncdrib9VaSj/mObmeh8Ju6dLqAIfmvOeAhxwqzbl7m+g+syu45qK+OXebH5Nz\n/1NjFC3QPcir+9AWAGyd92foSRmLGlRG+CBsUhS6ASLiopYgKf+0ucXSMlit\nhpNOePT9Mwb+A2TxktGq9qWUJSmkvkakPnvMfxbpCd+fFJsVCxSZmwwU2I9h\nOreO\r\n=/2VV\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIGyDU/StOTUMrtTicDfsKvunUon/UuGxhN/FLvJs34h4AiAm4mT5AzBbWpxxcggHfoq7Ao3RskGxZz3qE1Wiay1pLQ=="
          }
        ]
      },
      "directories": {},
      "maintainers": [
        {
          "name": "rowanwins",
          "email": "rowanwins@yahoo.com.au"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        },
        {
          "name": "mdfedderly",
          "email": "mdfedderly@mdfedderly.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta_6.3.0_1611153527675_0.6393373916449467"
      },
      "_hasShrinkwrap": false
    },
    "6.4.0": {
      "name": "@turf/meta",
      "version": "6.4.0",
      "description": "turf meta module",
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "publishConfig": {
        "access": "public"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "main": "dist/js/index.js",
      "module": "dist/es/index.js",
      "exports": {
        "./package.json": "./package.json",
        ".": {
          "import": "./dist/es/index.js",
          "require": "./dist/js/index.js"
        }
      },
      "types": "index.d.ts",
      "sideEffects": false,
      "scripts": {
        "bench": "node -r esm bench.js",
        "build": "rollup -c ../../rollup.config.js && echo '{\"type\":\"module\"}' > dist/es/package.json",
        "docs": "node ../../scripts/generate-readmes",
        "test": "npm-run-all test:*",
        "test:tape": "node -r esm test.js",
        "test:types": "tsc --esModuleInterop --noEmit types.ts"
      },
      "devDependencies": {
        "@turf/random": "^6.4.0",
        "benchmark": "*",
        "npm-run-all": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "^6.4.0"
      },
      "gitHead": "1e62773cfc88c627cca8effcb5c14cfb65a905ac",
      "_id": "@turf/meta@6.4.0",
      "_nodeVersion": "14.14.0",
      "_npmVersion": "lerna/3.20.2/node@v14.14.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-fMra6vMskwz1knn0/tb22ppOeE8CCmpvOvTIxLdV1WYWAoC4bJ4WdXKvZRsJKpHOX5iFehx4DT8aaGdROA4Y3Q==",
        "shasum": "6f6ff110199063c8eee3ee036ede2c1e52d12a04",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-6.4.0.tgz",
        "fileCount": 7,
        "unpackedSize": 133938,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgy056CRA9TVsSAnZWagAA5EsQAInAiVuQyKpqcC/zVYiJ\nNr4AMnIeRnFNBDgobsI3zzlZgFRYC3s8Wd638PSzBUru+oUG1eLgU8iOXgQg\n/P1dFTX35cOsYIXDHbEOkWNva7qaz2WuPO3hPe2Tb0cJ5kFw0xBmlREm7e6e\nt11VSR/XHdBhnRVjeqI4VmDD4svNRppE9gUXQBlkFljYDR8b/N9PcS/zFPW9\nU7LNLbWoX3FtIMgl5ubniKdqy7r85WNXmp7rcf8MEar+lXrbXBVrwDId29rg\naINmEZFJ6Ea+B6SG8wPeWisFFSDypzjlEyva/a+UHE0BXz2X7bx7KjCKR8vU\nBKp9GtyIkgUNIzeYo7L51GCKF6VyLNID52sF7MeeCI/kFod+VQmhnEnnspCz\nnhAJKMiKIHTBGPJoRO1mADoi+4M4s2SEX+F2rD2INru48YVm6KvkWFmgp9WM\n3SqUYaKhuOzfqKrAVUbWv58irSYmN2SuKcP0E3K4x9uvvYmTQZQZgyxKe/8e\nNNveQlOud4RQ6hY3H0ovmGS48dfVMvljCa8XR4KhpRbgEuKKqrWX83kfl7Lj\nnk/N5GE6+GmHEkCRfPJgd4HQbrLSj+TlSL6kkk/ssOO5GAGo33vm5zBZPkJv\nkOpW0ckR9jL/PHt6nedYNVUHbwYOkPJC+ows2EDGidlOVP4HBENU6+EwLdRl\nU5Wp\r\n=LPAk\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCm5d1edjp6Q4dXm/ZJYmcC6RSMpjrd0J8hVhdHwlTtHAIhANddcYz57FwgyWVX5VpFCbCX4ywFRAI6p+sr6ublwscX"
          }
        ]
      },
      "_npmUser": {
        "name": "rowanwins",
        "email": "rowanwins@yahoo.com.au"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "rowanwins",
          "email": "rowanwins@yahoo.com.au"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        },
        {
          "name": "mdfedderly",
          "email": "mdfedderly@mdfedderly.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta_6.4.0_1623936634401_0.5282119295142953"
      },
      "_hasShrinkwrap": false
    },
    "6.5.0": {
      "name": "@turf/meta",
      "version": "6.5.0",
      "description": "turf meta module",
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "funding": "https://opencollective.com/turf",
      "publishConfig": {
        "access": "public"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "main": "dist/js/index.js",
      "module": "dist/es/index.js",
      "exports": {
        "./package.json": "./package.json",
        ".": {
          "import": "./dist/es/index.js",
          "require": "./dist/js/index.js"
        }
      },
      "types": "index.d.ts",
      "sideEffects": false,
      "scripts": {
        "bench": "node -r esm bench.js",
        "build": "rollup -c ../../rollup.config.js && echo '{\"type\":\"module\"}' > dist/es/package.json",
        "docs": "node ../../scripts/generate-readmes",
        "test": "npm-run-all test:*",
        "test:tape": "node -r esm test.js",
        "test:types": "tsc --esModuleInterop --noEmit types.ts"
      },
      "devDependencies": {
        "@turf/random": "^6.5.0",
        "benchmark": "*",
        "npm-run-all": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "^6.5.0"
      },
      "gitHead": "5375941072b90d489389db22b43bfe809d5e451e",
      "_id": "@turf/meta@6.5.0",
      "_nodeVersion": "14.8.0",
      "_npmVersion": "lerna/4.0.0/node@v14.8.0+x64 (darwin)",
      "dist": {
        "integrity": "sha512-RrArvtsV0vdsCBegoBtOalgdSOfkBrTJ07VkpiCnq/491W67hnMWmDu7e6Ztw0C3WldRYTXkg3SumfdzZxLBHA==",
        "shasum": "b725c3653c9f432133eaa04d3421f7e51e0418ca",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-6.5.0.tgz",
        "fileCount": 7,
        "unpackedSize": 133953,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh2fJwCRA9TVsSAnZWagAAlakP/2ABXyl3QjB/TqRtzNUk\nCmzJJLxTj8pLT79aWJWfvIH56zV9KzAyVr7kmfKKNnsPX5c3ibPwL6d+C/22\nMhWj6fJ2aOla34C1CETSPbupPv0igG3CWmcwy0yXOApbgNinhInY0ggnPBRB\nEuqw6tZi58W68Y5YSjHZkmb8XIF9SQSLlAfTQxByTqoKSgIkrZ+B6/UFxkQf\nhztBCuCDlak08ysQ8H2xVOybR6genOW0eFdMsFhrb5jLCsAxHcy2yZLStoEf\n8zvbaz5lE9gletgh0v/N3UrliRNnt6yV1zUQrHGGStaOnHGjYiBNrwZx2DkJ\nxTpJGu5p7+2etETWF44UMvvyiWDq7em5Jo/HRmIdeFDuDY0drV2Jan9ruJgm\n38q1UmEoRVVrVjzs7zotyM7I5dsB6y71odfwvQ2G4sVHegrwU+Rws0md8s16\nMVLMvUZA2gb6WTBzl6JW0gTvVNcCu6Ge7MGUize8HdoUWRk2xXDgulYGu9fR\n6yhD+MCxLr8JdlbqL6ePm70j22MPZaaNv036RvuUcIXZyDP2rl5seNzow1Tx\ncZ99BSyPazmzLTISNMccN+YJ7scGQAkJf+O/oZ2s817vE/y9IXDkSr652tDY\nG6j5mYUQapXEbXYzM+gNNyTD0ULClUCB4hj+1W3pUSnFYEZzZErKuvNHbSn3\narLf\r\n=42IN\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCICZ5F/2324zadIVOVDZT8ZLlqhF15dZfilcuvQvt3HHfAiEA0gup5lEANVs+Kdo0KCU8KqxCPn2dC+qFlaF2BdiRMqQ="
          }
        ]
      },
      "_npmUser": {
        "name": "rowanwins",
        "email": "rowanwins@yahoo.com.au"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "rowanwins",
          "email": "rowanwins@yahoo.com.au"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "deniscarriere",
          "email": "carriere.denis@gmail.com"
        },
        {
          "name": "mdfedderly",
          "email": "mdfedderly@mdfedderly.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta_6.5.0_1625912243521_0.6071521752820783"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-alpha.0": {
      "name": "@turf/meta",
      "version": "7.0.0-alpha.0",
      "description": "turf meta module",
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "funding": "https://opencollective.com/turf",
      "publishConfig": {
        "access": "public"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "main": "dist/js/index.js",
      "module": "dist/es/index.js",
      "exports": {
        "./package.json": "./package.json",
        ".": {
          "import": "./dist/es/index.js",
          "require": "./dist/js/index.js"
        }
      },
      "types": "index.d.ts",
      "sideEffects": false,
      "scripts": {
        "bench": "node -r esm bench.js",
        "build": "rollup -c ../../rollup.config.js && echo '{\"type\":\"module\"}' > dist/es/package.json",
        "docs": "node ../../scripts/generate-readmes",
        "test": "npm-run-all test:*",
        "test:tape": "node -r esm test.js",
        "test:types": "tsc --esModuleInterop --noEmit --strict types.ts"
      },
      "devDependencies": {
        "@turf/random": "^7.0.0-alpha.0",
        "benchmark": "*",
        "npm-run-all": "*",
        "rollup": "*",
        "tape": "*"
      },
      "dependencies": {
        "@turf/helpers": "^7.0.0-alpha.0"
      },
      "gitHead": "0edc4c491b999e5ace770a61e1cf549f7c004189",
      "readme": "# @turf/meta\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n## coordEachCallback\n\nCallback for coordEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentCoord` **[Array][2]<[number][3]>** The current coordinate being processed.\n*   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## coordEach\n\nIterate over coordinates in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n*   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\nReturns **void** \n\n## coordReduceCallback\n\nCallback for coordReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentCoord` **[Array][2]<[number][3]>** The current coordinate being processed.\n*   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n    Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## coordReduce\n\nReduce coordinates in any GeoJSON object, similar to Array.reduce()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Geometry][6] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentCoord, coordIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n*   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentCoord;\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## propEachCallback\n\nCallback for propEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentProperties` **[Object][8]** The current Properties being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propEach\n\nIterate over properties in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentProperties, featureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propEach(features, function (currentProperties, featureIndex) {\n  //=currentProperties\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## propReduceCallback\n\nCallback for propReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentProperties` **any** The current Properties being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propReduce\n\nReduce properties in any GeoJSON object into a single value,\nsimilar to how Array.reduce works. However, in this case we lazily run\nthe reduction, so an array of all properties is unnecessary.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentProperties, featureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n  //=previousValue\n  //=currentProperties\n  //=featureIndex\n  return currentProperties\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## featureEachCallback\n\nCallback for featureEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentFeature` **[Feature][5]\\<any>** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureEach\n\nIterate over features in any GeoJSON object, similar to\nArray.forEach.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.featureEach(features, function (currentFeature, featureIndex) {\n  //=currentFeature\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## featureReduceCallback\n\nCallback for featureReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentFeature` **[Feature][5]** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## coordAll\n\nGet all coordinates from any GeoJSON object.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nvar coords = turf.coordAll(features);\n//= [[26, 37], [36, 53]]\n```\n\nReturns **[Array][2]<[Array][2]<[number][3]>>** coordinate position array\n\n## geomEachCallback\n\nCallback for geomEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n*   `featureBBox` **[Array][2]<[number][3]>** The current Feature BBox being processed.\n*   `featureId` **([number][3] | [string][9])** The current Feature Id being processed.\n\n## geomEach\n\nIterate over each geometry in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n});\n```\n\nReturns **void** \n\n## geomReduceCallback\n\nCallback for geomReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n*   `featureBBox` **[Array][2]<[number][3]>** The current Feature BBox being processed.\n*   `featureId` **([number][3] | [string][9])** The current Feature Id being processed.\n\n## geomReduce\n\nReduce geometry in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=previousValue\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n  return currentGeometry\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## flattenEachCallback\n\nCallback for flattenEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentFeature` **[Feature][5]** The current flattened feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenEach\n\nIterate over flattened features in any GeoJSON object, similar to\nArray.forEach.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n});\n```\n\n## flattenReduceCallback\n\nCallback for flattenReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentFeature` **[Feature][5]** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenReduce\n\nReduce flattened features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## segmentEachCallback\n\nCallback for segmentEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentSegment` **[Feature][5]<[LineString][10]>** The current Segment being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n*   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\nReturns **void** \n\n## segmentEach\n\nIterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON\n*   `callback` **[Function][1]** a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n\n### Examples\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //=currentSegment\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  //=segmentIndex\n});\n\n// Calculate the total number of segments\nvar total = 0;\nturf.segmentEach(polygon, function () {\n    total++;\n});\n```\n\nReturns **void** \n\n## segmentReduceCallback\n\nCallback for segmentReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentSegment` **[Feature][5]<[LineString][10]>** The current Segment being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n*   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\n## segmentReduce\n\nReduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON\n*   `callback` **[Function][1]** a method that takes (previousValue, currentSegment, currentIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //= previousSegment\n  //= currentSegment\n  //= featureIndex\n  //= multiFeatureIndex\n  //= geometryIndex\n  //= segmentIndex\n  return currentSegment\n});\n\n// Calculate the total number of segments\nvar initialValue = 0\nvar total = turf.segmentReduce(polygon, function (previousValue) {\n    previousValue++;\n    return previousValue;\n}, initialValue);\n```\n\nReturns **void** \n\n## lineEachCallback\n\nCallback for lineEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentLine` **[Feature][5]<[LineString][10]>** The current LineString|LinearRing being processed\n*   `featureIndex` **[number][3]** The current index of the Feature being processed\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineEach\n\nIterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\nsimilar to Array.forEach.\n\n### Parameters\n\n*   `geojson` **([Geometry][6] | [Feature][5]<([LineString][10] | [Polygon][11] | [MultiLineString][12] | [MultiPolygon][13])>)** object\n*   `callback` **[Function][1]** a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n  [[26, 37], [35, 45]],\n  [[36, 53], [38, 50], [41, 55]]\n]);\n\nturf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\n## lineReduceCallback\n\nCallback for lineReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentLine` **[Feature][5]<[LineString][10]>** The current LineString|LinearRing being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([Geometry][6] | [Feature][5]<([LineString][10] | [Polygon][11] | [MultiLineString][12] | [MultiPolygon][13])>)** object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar multiPoly = turf.multiPolygon([\n  turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n  turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n]);\n\nturf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentLine\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## findSegment\n\nFinds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\nPoint & MultiPoint will always return null.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** Any GeoJSON Feature or Geometry\n*   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n\n    *   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    *   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    *   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    *   `options.segmentIndex` **[number][3]** Segment Index (optional, default `0`)\n    *   `options.properties` **[Object][8]** Translate Properties to output LineString (optional, default `{}`)\n    *   `options.bbox` **[BBox][14]** Translate BBox to output LineString (optional, default `{}`)\n    *   `options.id` **([number][3] | [string][9])** Translate Id to output LineString (optional, default `{}`)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findSegment(multiLine);\n// => Feature<LineString<[[10, 10], [50, 30]]>>\n\n// First Segment of 2nd Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: 1});\n// => Feature<LineString<[[-10, -10], [-50, -30]]>>\n\n// Last Segment of Last Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n// => Feature<LineString<[[-50, -30], [-30, -40]]>>\n```\n\nReturns **[Feature][5]<[LineString][10]>** 2-vertex GeoJSON Feature LineString\n\n## findPoint\n\nFinds a particular Point from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** Any GeoJSON Feature or Geometry\n*   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n\n    *   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    *   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    *   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    *   `options.coordIndex` **[number][3]** Coord Index (optional, default `0`)\n    *   `options.properties` **[Object][8]** Translate Properties to output Point (optional, default `{}`)\n    *   `options.bbox` **[BBox][14]** Translate BBox to output Point (optional, default `{}`)\n    *   `options.id` **([number][3] | [string][9])** Translate Id to output Point (optional, default `{}`)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findPoint(multiLine);\n// => Feature<Point<[10, 10]>>\n\n// First Segment of the 2nd Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: 1});\n// => Feature<Point<[-10, -10]>>\n\n// Last Segment of last Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n// => Feature<Point<[-30, -40]>>\n```\n\nReturns **[Feature][5]<[Point][15]>** 2-vertex GeoJSON Feature Point\n\n[1]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\n\n[2]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[3]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[4]: https://tools.ietf.org/html/rfc7946#section-3.3\n\n[5]: https://tools.ietf.org/html/rfc7946#section-3.2\n\n[6]: https://tools.ietf.org/html/rfc7946#section-3.1\n\n[7]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[8]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[9]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[10]: https://tools.ietf.org/html/rfc7946#section-3.1.4\n\n[11]: https://tools.ietf.org/html/rfc7946#section-3.1.6\n\n[12]: https://tools.ietf.org/html/rfc7946#section-3.1.5\n\n[13]: https://tools.ietf.org/html/rfc7946#section-3.1.7\n\n[14]: https://tools.ietf.org/html/rfc7946#section-5\n\n[15]: https://tools.ietf.org/html/rfc7946#section-3.1.2\n\n<!-- This file is automatically generated. Please don't edit it directly:\nif you find an error, edit the source file (likely index.js), and re-run\n./scripts/generate-readmes in the turf project. -->\n\n---\n\nThis module is part of the [Turfjs project](http://turfjs.org/), an open source\nmodule collection dedicated to geographic algorithms. It is maintained in the\n[Turfjs/turf](https://github.com/Turfjs/turf) repository, where you can create\nPRs and issues.\n\n### Installation\n\nInstall this module individually:\n\n```sh\n$ npm install @turf/meta\n```\n\nOr install the Turf module that includes it as a function:\n\n```sh\n$ npm install @turf/turf\n```\n",
      "readmeFilename": "README.md",
      "_id": "@turf/meta@7.0.0-alpha.0",
      "_nodeVersion": "19.0.1",
      "_npmVersion": "lerna/4.0.0/node@v19.0.1+arm64 (darwin)",
      "dist": {
        "integrity": "sha512-BGn9d5GIk25CXkgU5P0YcW4eOAL04zFpVwFIRreHNU28baI0s+bM8WUtC+DcYTs75hSvJo4gbvb1FiRFj9Viow==",
        "shasum": "655c7eed32b5240492476723d75ea4e158b33966",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-7.0.0-alpha.0.tgz",
        "fileCount": 8,
        "unpackedSize": 163580,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC9Jt86N4pYOSV0yXUCyXi6S7nDHa49hM9HAEdAnmoaiAIhAJSEEzwwjoS+umAgLmOwjC9T6iwGe+y9pdcqQLzT8lbl"
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJja8OkACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr9rw/5AbZ3IOOSARxbGBAHS/xAt5LtZcgmFTml8ECrif/PqMnnVhTK\r\nIENx+lrIavyHijF8ruKX9HR7gLcuSPoKJU54iGWOGmjKU1qXbyRBwakYDZ48\r\ntkjCcuYkgBOGMafnkDjBsJMXGbGknoXF73dbgWmz7nXGJenSFXcXHDwbQALc\r\nkRqCNKCNY+6uTid6trHyJuvQETjZaTUrhPkLTz/omxHaBOCuiJppRraHPasJ\r\n+xGC+DqQn5JLM9FuUT77RrwrFP2ItjOF70O1VFEcGMokMrS8LNgVM5pim30t\r\n3EtR5gdJzTSnxqGXetaq/hP17jyX5fcNRNZzRXXY7tuzpjUrpSYLJwKC341I\r\nfLm/JrBdMFY5W9F7mZPHqEAdTXvntNNB6xveFqbra7/r0IbFqtiBmxSAGEPV\r\nG1rEZhD3Eyx79hOCCrRja1qD4WhUdzE6L5FuvOHfQfTSdJTvwfYpY6Z8iKdU\r\n6xKlq7BPcaQeubk0bmXMZTV3PEETzP7CnQS5daPnmowjGy56a8TYTLk6G9dk\r\nBk8Eq0VEY+XlcAaFDB52264RmNJBeTFgXBBEc+QMR275MS6ydbFqzkHLhHGk\r\nOTFSQHKCh6MJtsNdqVn1tQhX8QRIfcPqkzYLovHovTF7D8ONabyk1Qbk/e0/\r\n/jNLeymR98OQIFuRMd1spc7bAa9EfZQPtTg=\r\n=T3Mm\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "mdfedderly",
        "email": "mdfedderly@mdfedderly.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "twelch",
          "email": "tim.j.welch@gmail.com"
        },
        {
          "name": "jamesmilneruk",
          "email": "jamesmilner22@hotmail.com"
        },
        {
          "name": "rowanwins",
          "email": "rowanwins@yahoo.com.au"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "mdfedderly",
          "email": "mdfedderly@mdfedderly.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta_7.0.0-alpha.0_1668006819857_0.6597701896091781"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-alpha.1": {
      "name": "@turf/meta",
      "version": "7.0.0-alpha.1",
      "description": "turf meta module",
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "funding": "https://opencollective.com/turf",
      "publishConfig": {
        "access": "public"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "main": "dist/js/index.js",
      "module": "dist/es/index.js",
      "exports": {
        "./package.json": "./package.json",
        ".": {
          "types": "./index.d.ts",
          "import": "./dist/es/index.js",
          "require": "./dist/js/index.js"
        }
      },
      "types": "index.d.ts",
      "sideEffects": false,
      "scripts": {
        "bench": "tsx bench.js",
        "build": "rollup -c ../../rollup.config.js && echo '{\"type\":\"module\"}' > dist/es/package.json",
        "docs": "tsx ../../scripts/generate-readmes",
        "test": "npm-run-all test:*",
        "test:tape": "tsx test.js",
        "test:types": "tsc --esModuleInterop --noEmit --strict types.ts"
      },
      "devDependencies": {
        "@turf/random": "^7.0.0-alpha.1",
        "benchmark": "*",
        "npm-run-all": "*",
        "rollup": "*",
        "tape": "*",
        "tsx": "*"
      },
      "dependencies": {
        "@turf/helpers": "^7.0.0-alpha.1"
      },
      "gitHead": "cf7a0c507b017ca066acffd0ce23bda5b393fb5a",
      "readme": "# @turf/meta\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n## coordEachCallback\n\nCallback for coordEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentCoord` **[Array][2]<[number][3]>** The current coordinate being processed.\n*   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## coordEach\n\nIterate over coordinates in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n*   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\nReturns **void** \n\n## coordReduceCallback\n\nCallback for coordReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentCoord` **[Array][2]<[number][3]>** The current coordinate being processed.\n*   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n    Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## coordReduce\n\nReduce coordinates in any GeoJSON object, similar to Array.reduce()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Geometry][6] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentCoord, coordIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n*   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentCoord;\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## propEachCallback\n\nCallback for propEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentProperties` **[Object][8]** The current Properties being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propEach\n\nIterate over properties in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentProperties, featureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propEach(features, function (currentProperties, featureIndex) {\n  //=currentProperties\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## propReduceCallback\n\nCallback for propReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentProperties` **any** The current Properties being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propReduce\n\nReduce properties in any GeoJSON object into a single value,\nsimilar to how Array.reduce works. However, in this case we lazily run\nthe reduction, so an array of all properties is unnecessary.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentProperties, featureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n  //=previousValue\n  //=currentProperties\n  //=featureIndex\n  return currentProperties\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## featureEachCallback\n\nCallback for featureEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentFeature` **[Feature][5]\\<any>** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureEach\n\nIterate over features in any GeoJSON object, similar to\nArray.forEach.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.featureEach(features, function (currentFeature, featureIndex) {\n  //=currentFeature\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## featureReduceCallback\n\nCallback for featureReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentFeature` **[Feature][5]** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## coordAll\n\nGet all coordinates from any GeoJSON object.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nvar coords = turf.coordAll(features);\n//= [[26, 37], [36, 53]]\n```\n\nReturns **[Array][2]<[Array][2]<[number][3]>>** coordinate position array\n\n## geomEachCallback\n\nCallback for geomEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n*   `featureBBox` **[Array][2]<[number][3]>** The current Feature BBox being processed.\n*   `featureId` **([number][3] | [string][9])** The current Feature Id being processed.\n\n## geomEach\n\nIterate over each geometry in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n});\n```\n\nReturns **void** \n\n## geomReduceCallback\n\nCallback for geomReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n*   `featureBBox` **[Array][2]<[number][3]>** The current Feature BBox being processed.\n*   `featureId` **([number][3] | [string][9])** The current Feature Id being processed.\n\n## geomReduce\n\nReduce geometry in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=previousValue\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n  return currentGeometry\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## flattenEachCallback\n\nCallback for flattenEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentFeature` **[Feature][5]** The current flattened feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenEach\n\nIterate over flattened features in any GeoJSON object, similar to\nArray.forEach.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n});\n```\n\n## flattenReduceCallback\n\nCallback for flattenReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentFeature` **[Feature][5]** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenReduce\n\nReduce flattened features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## segmentEachCallback\n\nCallback for segmentEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentSegment` **[Feature][5]<[LineString][10]>** The current Segment being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n*   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\nReturns **void** \n\n## segmentEach\n\nIterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON\n*   `callback` **[Function][1]** a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n\n### Examples\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //=currentSegment\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  //=segmentIndex\n});\n\n// Calculate the total number of segments\nvar total = 0;\nturf.segmentEach(polygon, function () {\n    total++;\n});\n```\n\nReturns **void** \n\n## segmentReduceCallback\n\nCallback for segmentReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentSegment` **[Feature][5]<[LineString][10]>** The current Segment being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n*   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\n## segmentReduce\n\nReduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON\n*   `callback` **[Function][1]** a method that takes (previousValue, currentSegment, currentIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //= previousSegment\n  //= currentSegment\n  //= featureIndex\n  //= multiFeatureIndex\n  //= geometryIndex\n  //= segmentIndex\n  return currentSegment\n});\n\n// Calculate the total number of segments\nvar initialValue = 0\nvar total = turf.segmentReduce(polygon, function (previousValue) {\n    previousValue++;\n    return previousValue;\n}, initialValue);\n```\n\nReturns **void** \n\n## lineEachCallback\n\nCallback for lineEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentLine` **[Feature][5]<[LineString][10]>** The current LineString|LinearRing being processed\n*   `featureIndex` **[number][3]** The current index of the Feature being processed\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineEach\n\nIterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\nsimilar to Array.forEach.\n\n### Parameters\n\n*   `geojson` **([Geometry][6] | [Feature][5]<([LineString][10] | [Polygon][11] | [MultiLineString][12] | [MultiPolygon][13])>)** object\n*   `callback` **[Function][1]** a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n  [[26, 37], [35, 45]],\n  [[36, 53], [38, 50], [41, 55]]\n]);\n\nturf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\n## lineReduceCallback\n\nCallback for lineReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentLine` **[Feature][5]<[LineString][10]>** The current LineString|LinearRing being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([Geometry][6] | [Feature][5]<([LineString][10] | [Polygon][11] | [MultiLineString][12] | [MultiPolygon][13])>)** object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar multiPoly = turf.multiPolygon([\n  turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n  turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n]);\n\nturf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentLine\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## findSegment\n\nFinds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\nPoint & MultiPoint will always return null.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** Any GeoJSON Feature or Geometry\n*   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n\n    *   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    *   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    *   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    *   `options.segmentIndex` **[number][3]** Segment Index (optional, default `0`)\n    *   `options.properties` **[Object][8]** Translate Properties to output LineString (optional, default `{}`)\n    *   `options.bbox` **[BBox][14]** Translate BBox to output LineString (optional, default `{}`)\n    *   `options.id` **([number][3] | [string][9])** Translate Id to output LineString (optional, default `{}`)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findSegment(multiLine);\n// => Feature<LineString<[[10, 10], [50, 30]]>>\n\n// First Segment of 2nd Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: 1});\n// => Feature<LineString<[[-10, -10], [-50, -30]]>>\n\n// Last Segment of Last Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n// => Feature<LineString<[[-50, -30], [-30, -40]]>>\n```\n\nReturns **[Feature][5]<[LineString][10]>** 2-vertex GeoJSON Feature LineString\n\n## findPoint\n\nFinds a particular Point from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** Any GeoJSON Feature or Geometry\n*   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n\n    *   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    *   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    *   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    *   `options.coordIndex` **[number][3]** Coord Index (optional, default `0`)\n    *   `options.properties` **[Object][8]** Translate Properties to output Point (optional, default `{}`)\n    *   `options.bbox` **[BBox][14]** Translate BBox to output Point (optional, default `{}`)\n    *   `options.id` **([number][3] | [string][9])** Translate Id to output Point (optional, default `{}`)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findPoint(multiLine);\n// => Feature<Point<[10, 10]>>\n\n// First Segment of the 2nd Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: 1});\n// => Feature<Point<[-10, -10]>>\n\n// Last Segment of last Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n// => Feature<Point<[-30, -40]>>\n```\n\nReturns **[Feature][5]<[Point][15]>** 2-vertex GeoJSON Feature Point\n\n[1]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\n\n[2]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[3]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[4]: https://tools.ietf.org/html/rfc7946#section-3.3\n\n[5]: https://tools.ietf.org/html/rfc7946#section-3.2\n\n[6]: https://tools.ietf.org/html/rfc7946#section-3.1\n\n[7]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[8]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[9]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[10]: https://tools.ietf.org/html/rfc7946#section-3.1.4\n\n[11]: https://tools.ietf.org/html/rfc7946#section-3.1.6\n\n[12]: https://tools.ietf.org/html/rfc7946#section-3.1.5\n\n[13]: https://tools.ietf.org/html/rfc7946#section-3.1.7\n\n[14]: https://tools.ietf.org/html/rfc7946#section-5\n\n[15]: https://tools.ietf.org/html/rfc7946#section-3.1.2\n\n<!-- This file is automatically generated. Please don't edit it directly:\nif you find an error, edit the source file (likely index.js), and re-run\n./scripts/generate-readmes in the turf project. -->\n\n---\n\nThis module is part of the [Turfjs project](http://turfjs.org/), an open source\nmodule collection dedicated to geographic algorithms. It is maintained in the\n[Turfjs/turf](https://github.com/Turfjs/turf) repository, where you can create\nPRs and issues.\n\n### Installation\n\nInstall this module individually:\n\n```sh\n$ npm install @turf/meta\n```\n\nOr install the Turf module that includes it as a function:\n\n```sh\n$ npm install @turf/turf\n```\n",
      "readmeFilename": "README.md",
      "_id": "@turf/meta@7.0.0-alpha.1",
      "_nodeVersion": "19.6.1",
      "_npmVersion": "lerna/4.0.0/node@v19.6.1+arm64 (darwin)",
      "dist": {
        "integrity": "sha512-5pg9SBqWECIIKpI5rnBku7KfEGb68s0Nfgghh6LCKM+VvdWWyCQf1mF4bLtNvROFnQ4WEaDVRbDHLp/pO7CTiA==",
        "shasum": "53971fb6164215e1428e63945defbbd039431861",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-7.0.0-alpha.1.tgz",
        "fileCount": 8,
        "unpackedSize": 163572,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIG4lPiBSTkqtmlUEb24gl7BdrjNM1HwAdx4Lq+IGt8/BAiEA/F3oK5DO58nVhoF6SobC/DlC3L6aTBu12N2g1cncvv8="
          }
        ]
      },
      "_npmUser": {
        "name": "mdfedderly",
        "email": "mdfedderly@mdfedderly.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "twelch",
          "email": "tim.j.welch@gmail.com"
        },
        {
          "name": "jamesmilneruk",
          "email": "jamesmilner22@hotmail.com"
        },
        {
          "name": "rowanwins",
          "email": "rowanwins@yahoo.com.au"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "mdfedderly",
          "email": "mdfedderly@mdfedderly.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta_7.0.0-alpha.1_1695080742174_0.9662904373975463"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-alpha.2": {
      "name": "@turf/meta",
      "version": "7.0.0-alpha.2",
      "description": "turf meta module",
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "funding": "https://opencollective.com/turf",
      "publishConfig": {
        "access": "public"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "main": "dist/js/index.js",
      "module": "dist/es/index.js",
      "exports": {
        "./package.json": "./package.json",
        ".": {
          "types": "./index.d.ts",
          "import": "./dist/es/index.js",
          "require": "./dist/js/index.js"
        }
      },
      "types": "index.d.ts",
      "sideEffects": false,
      "scripts": {
        "bench": "tsx bench.js",
        "build": "rollup -c ../../rollup.config.js && echo '{\"type\":\"module\"}' > dist/es/package.json",
        "docs": "tsx ../../scripts/generate-readmes",
        "test": "npm-run-all test:*",
        "test:tape": "tsx test.js",
        "test:types": "tsc --esModuleInterop --noEmit --strict types.ts"
      },
      "devDependencies": {
        "@turf/random": "^7.0.0-alpha.2",
        "benchmark": "*",
        "npm-run-all": "*",
        "rollup": "*",
        "tape": "*",
        "tsx": "*"
      },
      "dependencies": {
        "@turf/helpers": "^7.0.0-alpha.2"
      },
      "gitHead": "dd35b52725945b4fa29a98d9a550733e06cc222e",
      "readme": "# @turf/meta\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n## coordEachCallback\n\nCallback for coordEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentCoord` **[Array][2]<[number][3]>** The current coordinate being processed.\n*   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## coordEach\n\nIterate over coordinates in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n*   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\nReturns **void** \n\n## coordReduceCallback\n\nCallback for coordReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentCoord` **[Array][2]<[number][3]>** The current coordinate being processed.\n*   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n    Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## coordReduce\n\nReduce coordinates in any GeoJSON object, similar to Array.reduce()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Geometry][6] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentCoord, coordIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n*   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentCoord;\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## propEachCallback\n\nCallback for propEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentProperties` **[Object][8]** The current Properties being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propEach\n\nIterate over properties in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentProperties, featureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propEach(features, function (currentProperties, featureIndex) {\n  //=currentProperties\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## propReduceCallback\n\nCallback for propReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentProperties` **any** The current Properties being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propReduce\n\nReduce properties in any GeoJSON object into a single value,\nsimilar to how Array.reduce works. However, in this case we lazily run\nthe reduction, so an array of all properties is unnecessary.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentProperties, featureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n  //=previousValue\n  //=currentProperties\n  //=featureIndex\n  return currentProperties\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## featureEachCallback\n\nCallback for featureEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentFeature` **[Feature][5]\\<any>** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureEach\n\nIterate over features in any GeoJSON object, similar to\nArray.forEach.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.featureEach(features, function (currentFeature, featureIndex) {\n  //=currentFeature\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## featureReduceCallback\n\nCallback for featureReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentFeature` **[Feature][5]** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## coordAll\n\nGet all coordinates from any GeoJSON object.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nvar coords = turf.coordAll(features);\n//= [[26, 37], [36, 53]]\n```\n\nReturns **[Array][2]<[Array][2]<[number][3]>>** coordinate position array\n\n## geomEachCallback\n\nCallback for geomEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n*   `featureBBox` **[Array][2]<[number][3]>** The current Feature BBox being processed.\n*   `featureId` **([number][3] | [string][9])** The current Feature Id being processed.\n\n## geomEach\n\nIterate over each geometry in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n});\n```\n\nReturns **void** \n\n## geomReduceCallback\n\nCallback for geomReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n*   `featureBBox` **[Array][2]<[number][3]>** The current Feature BBox being processed.\n*   `featureId` **([number][3] | [string][9])** The current Feature Id being processed.\n\n## geomReduce\n\nReduce geometry in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=previousValue\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n  return currentGeometry\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## flattenEachCallback\n\nCallback for flattenEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentFeature` **[Feature][5]** The current flattened feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenEach\n\nIterate over flattened features in any GeoJSON object, similar to\nArray.forEach.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n});\n```\n\n## flattenReduceCallback\n\nCallback for flattenReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentFeature` **[Feature][5]** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenReduce\n\nReduce flattened features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## segmentEachCallback\n\nCallback for segmentEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentSegment` **[Feature][5]<[LineString][10]>** The current Segment being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n*   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\nReturns **void** \n\n## segmentEach\n\nIterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON\n*   `callback` **[Function][1]** a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n\n### Examples\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //=currentSegment\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  //=segmentIndex\n});\n\n// Calculate the total number of segments\nvar total = 0;\nturf.segmentEach(polygon, function () {\n    total++;\n});\n```\n\nReturns **void** \n\n## segmentReduceCallback\n\nCallback for segmentReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentSegment` **[Feature][5]<[LineString][10]>** The current Segment being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n*   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\n## segmentReduce\n\nReduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON\n*   `callback` **[Function][1]** a method that takes (previousValue, currentSegment, currentIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //= previousSegment\n  //= currentSegment\n  //= featureIndex\n  //= multiFeatureIndex\n  //= geometryIndex\n  //= segmentIndex\n  return currentSegment\n});\n\n// Calculate the total number of segments\nvar initialValue = 0\nvar total = turf.segmentReduce(polygon, function (previousValue) {\n    previousValue++;\n    return previousValue;\n}, initialValue);\n```\n\nReturns **void** \n\n## lineEachCallback\n\nCallback for lineEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentLine` **[Feature][5]<[LineString][10]>** The current LineString|LinearRing being processed\n*   `featureIndex` **[number][3]** The current index of the Feature being processed\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineEach\n\nIterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\nsimilar to Array.forEach.\n\n### Parameters\n\n*   `geojson` **([Geometry][6] | [Feature][5]<([LineString][10] | [Polygon][11] | [MultiLineString][12] | [MultiPolygon][13])>)** object\n*   `callback` **[Function][1]** a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n  [[26, 37], [35, 45]],\n  [[36, 53], [38, 50], [41, 55]]\n]);\n\nturf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\n## lineReduceCallback\n\nCallback for lineReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentLine` **[Feature][5]<[LineString][10]>** The current LineString|LinearRing being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([Geometry][6] | [Feature][5]<([LineString][10] | [Polygon][11] | [MultiLineString][12] | [MultiPolygon][13])>)** object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar multiPoly = turf.multiPolygon([\n  turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n  turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n]);\n\nturf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentLine\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## findSegment\n\nFinds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\nPoint & MultiPoint will always return null.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** Any GeoJSON Feature or Geometry\n*   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n\n    *   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    *   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    *   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    *   `options.segmentIndex` **[number][3]** Segment Index (optional, default `0`)\n    *   `options.properties` **[Object][8]** Translate Properties to output LineString (optional, default `{}`)\n    *   `options.bbox` **[BBox][14]** Translate BBox to output LineString (optional, default `{}`)\n    *   `options.id` **([number][3] | [string][9])** Translate Id to output LineString (optional, default `{}`)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findSegment(multiLine);\n// => Feature<LineString<[[10, 10], [50, 30]]>>\n\n// First Segment of 2nd Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: 1});\n// => Feature<LineString<[[-10, -10], [-50, -30]]>>\n\n// Last Segment of Last Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n// => Feature<LineString<[[-50, -30], [-30, -40]]>>\n```\n\nReturns **[Feature][5]<[LineString][10]>** 2-vertex GeoJSON Feature LineString\n\n## findPoint\n\nFinds a particular Point from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** Any GeoJSON Feature or Geometry\n*   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n\n    *   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    *   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    *   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    *   `options.coordIndex` **[number][3]** Coord Index (optional, default `0`)\n    *   `options.properties` **[Object][8]** Translate Properties to output Point (optional, default `{}`)\n    *   `options.bbox` **[BBox][14]** Translate BBox to output Point (optional, default `{}`)\n    *   `options.id` **([number][3] | [string][9])** Translate Id to output Point (optional, default `{}`)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findPoint(multiLine);\n// => Feature<Point<[10, 10]>>\n\n// First Segment of the 2nd Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: 1});\n// => Feature<Point<[-10, -10]>>\n\n// Last Segment of last Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n// => Feature<Point<[-30, -40]>>\n```\n\nReturns **[Feature][5]<[Point][15]>** 2-vertex GeoJSON Feature Point\n\n[1]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\n\n[2]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[3]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[4]: https://tools.ietf.org/html/rfc7946#section-3.3\n\n[5]: https://tools.ietf.org/html/rfc7946#section-3.2\n\n[6]: https://tools.ietf.org/html/rfc7946#section-3.1\n\n[7]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[8]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[9]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[10]: https://tools.ietf.org/html/rfc7946#section-3.1.4\n\n[11]: https://tools.ietf.org/html/rfc7946#section-3.1.6\n\n[12]: https://tools.ietf.org/html/rfc7946#section-3.1.5\n\n[13]: https://tools.ietf.org/html/rfc7946#section-3.1.7\n\n[14]: https://tools.ietf.org/html/rfc7946#section-5\n\n[15]: https://tools.ietf.org/html/rfc7946#section-3.1.2\n\n<!-- This file is automatically generated. Please don't edit it directly:\nif you find an error, edit the source file (likely index.js), and re-run\n./scripts/generate-readmes in the turf project. -->\n\n---\n\nThis module is part of the [Turfjs project](http://turfjs.org/), an open source\nmodule collection dedicated to geographic algorithms. It is maintained in the\n[Turfjs/turf](https://github.com/Turfjs/turf) repository, where you can create\nPRs and issues.\n\n### Installation\n\nInstall this module individually:\n\n```sh\n$ npm install @turf/meta\n```\n\nOr install the Turf module that includes it as a function:\n\n```sh\n$ npm install @turf/turf\n```\n",
      "readmeFilename": "README.md",
      "_id": "@turf/meta@7.0.0-alpha.2",
      "_nodeVersion": "19.6.1",
      "_npmVersion": "lerna/4.0.0/node@v19.6.1+arm64 (darwin)",
      "dist": {
        "integrity": "sha512-NqQntK+4kFF0H/ZLFkO7IsTm5pGlcWcGdNadRyRginz00TAb6lPYS4ZSgKI96Pv8BJlfdm0R9jgZcgSvlHGc3w==",
        "shasum": "851a140e00ee3d8c9ea48e0abf43eff6db2a022d",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-7.0.0-alpha.2.tgz",
        "fileCount": 7,
        "unpackedSize": 134082,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDHfgo8VxkN11b67V0NuhX91GkINJYBWxdMLCBRHN0ayAiBPPUyFh70Pd/seeCzvdMdZ6C1q7sukAjl+85Rez1xzHQ=="
          }
        ]
      },
      "_npmUser": {
        "name": "mdfedderly",
        "email": "mdfedderly@mdfedderly.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "twelch",
          "email": "tim.j.welch@gmail.com"
        },
        {
          "name": "jamesmilneruk",
          "email": "jamesmilner22@hotmail.com"
        },
        {
          "name": "rowanwins",
          "email": "rowanwins@yahoo.com.au"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "mdfedderly",
          "email": "mdfedderly@mdfedderly.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta_7.0.0-alpha.2_1696254953354_0.25116939127520377"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-alpha.110": {
      "name": "@turf/meta",
      "version": "7.0.0-alpha.110",
      "description": "turf meta module",
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "funding": "https://opencollective.com/turf",
      "publishConfig": {
        "access": "public"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "type": "commonjs",
      "main": "dist/cjs/index.cjs",
      "module": "dist/esm/index.mjs",
      "types": "dist/cjs/index.d.ts",
      "exports": {
        "./package.json": "./package.json",
        ".": {
          "import": {
            "types": "./dist/esm/index.d.mts",
            "default": "./dist/esm/index.mjs"
          },
          "require": {
            "types": "./dist/cjs/index.d.ts",
            "default": "./dist/cjs/index.cjs"
          }
        }
      },
      "sideEffects": false,
      "scripts": {
        "bench": "tsx bench.ts",
        "build": "tsup --config ../../tsup.config.ts",
        "docs": "tsx ../../scripts/generate-readmes.ts",
        "test": "npm-run-all --npm-path npm test:*",
        "test:tape": "tsx test.ts",
        "test:types": "tsc --esModuleInterop --noEmit --strict types.ts"
      },
      "devDependencies": {
        "@turf/random": "^7.0.0-alpha.110+1411d63a7",
        "benchmark": "^2.1.4",
        "npm-run-all": "^4.1.5",
        "tape": "^5.7.2",
        "tsup": "^8.0.1",
        "tsx": "^4.6.2"
      },
      "dependencies": {
        "@turf/helpers": "^7.0.0-alpha.110+1411d63a7"
      },
      "gitHead": "1411d63a74c275c9216fe48e9d3cb2d48a359068",
      "readme": "# @turf/meta\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n## coordEachCallback\n\nCallback for coordEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentCoord` **[Array][2]<[number][3]>** The current coordinate being processed.\n*   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## coordEach\n\nIterate over coordinates in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n*   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\nReturns **void** \n\n## coordReduceCallback\n\nCallback for coordReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentCoord` **[Array][2]<[number][3]>** The current coordinate being processed.\n*   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n    Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## coordReduce\n\nReduce coordinates in any GeoJSON object, similar to Array.reduce()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Geometry][6] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentCoord, coordIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n*   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentCoord;\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## propEachCallback\n\nCallback for propEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentProperties` **[Object][8]** The current Properties being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propEach\n\nIterate over properties in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentProperties, featureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propEach(features, function (currentProperties, featureIndex) {\n  //=currentProperties\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## propReduceCallback\n\nCallback for propReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentProperties` **any** The current Properties being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propReduce\n\nReduce properties in any GeoJSON object into a single value,\nsimilar to how Array.reduce works. However, in this case we lazily run\nthe reduction, so an array of all properties is unnecessary.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentProperties, featureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n  //=previousValue\n  //=currentProperties\n  //=featureIndex\n  return currentProperties\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## featureEachCallback\n\nCallback for featureEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentFeature` **[Feature][5]\\<any>** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureEach\n\nIterate over features in any GeoJSON object, similar to\nArray.forEach.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.featureEach(features, function (currentFeature, featureIndex) {\n  //=currentFeature\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## featureReduceCallback\n\nCallback for featureReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentFeature` **[Feature][5]** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## coordAll\n\nGet all coordinates from any GeoJSON object.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nvar coords = turf.coordAll(features);\n//= [[26, 37], [36, 53]]\n```\n\nReturns **[Array][2]<[Array][2]<[number][3]>>** coordinate position array\n\n## geomEachCallback\n\nCallback for geomEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n*   `featureBBox` **[Array][2]<[number][3]>** The current Feature BBox being processed.\n*   `featureId` **([number][3] | [string][9])** The current Feature Id being processed.\n\n## geomEach\n\nIterate over each geometry in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n});\n```\n\nReturns **void** \n\n## geomReduceCallback\n\nCallback for geomReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n*   `featureBBox` **[Array][2]<[number][3]>** The current Feature BBox being processed.\n*   `featureId` **([number][3] | [string][9])** The current Feature Id being processed.\n\n## geomReduce\n\nReduce geometry in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=previousValue\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n  return currentGeometry\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## flattenEachCallback\n\nCallback for flattenEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentFeature` **[Feature][5]** The current flattened feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenEach\n\nIterate over flattened features in any GeoJSON object, similar to\nArray.forEach.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n});\n```\n\n## flattenReduceCallback\n\nCallback for flattenReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentFeature` **[Feature][5]** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenReduce\n\nReduce flattened features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## segmentEachCallback\n\nCallback for segmentEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentSegment` **[Feature][5]<[LineString][10]>** The current Segment being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n*   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\nReturns **void** \n\n## segmentEach\n\nIterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON\n*   `callback` **[Function][1]** a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n\n### Examples\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //=currentSegment\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  //=segmentIndex\n});\n\n// Calculate the total number of segments\nvar total = 0;\nturf.segmentEach(polygon, function () {\n    total++;\n});\n```\n\nReturns **void** \n\n## segmentReduceCallback\n\nCallback for segmentReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentSegment` **[Feature][5]<[LineString][10]>** The current Segment being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n*   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\n## segmentReduce\n\nReduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON\n*   `callback` **[Function][1]** a method that takes (previousValue, currentSegment, currentIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //= previousSegment\n  //= currentSegment\n  //= featureIndex\n  //= multiFeatureIndex\n  //= geometryIndex\n  //= segmentIndex\n  return currentSegment\n});\n\n// Calculate the total number of segments\nvar initialValue = 0\nvar total = turf.segmentReduce(polygon, function (previousValue) {\n    previousValue++;\n    return previousValue;\n}, initialValue);\n```\n\nReturns **void** \n\n## lineEachCallback\n\nCallback for lineEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentLine` **[Feature][5]<[LineString][10]>** The current LineString|LinearRing being processed\n*   `featureIndex` **[number][3]** The current index of the Feature being processed\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineEach\n\nIterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\nsimilar to Array.forEach.\n\n### Parameters\n\n*   `geojson` **([Geometry][6] | [Feature][5]<([LineString][10] | [Polygon][11] | [MultiLineString][12] | [MultiPolygon][13])>)** object\n*   `callback` **[Function][1]** a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n  [[26, 37], [35, 45]],\n  [[36, 53], [38, 50], [41, 55]]\n]);\n\nturf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\n## lineReduceCallback\n\nCallback for lineReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentLine` **[Feature][5]<[LineString][10]>** The current LineString|LinearRing being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([Geometry][6] | [Feature][5]<([LineString][10] | [Polygon][11] | [MultiLineString][12] | [MultiPolygon][13])>)** object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar multiPoly = turf.multiPolygon([\n  turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n  turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n]);\n\nturf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentLine\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## findSegment\n\nFinds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\nPoint & MultiPoint will always return null.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** Any GeoJSON Feature or Geometry\n*   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n\n    *   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    *   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    *   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    *   `options.segmentIndex` **[number][3]** Segment Index (optional, default `0`)\n    *   `options.properties` **[Object][8]** Translate Properties to output LineString (optional, default `{}`)\n    *   `options.bbox` **[BBox][14]** Translate BBox to output LineString (optional, default `{}`)\n    *   `options.id` **([number][3] | [string][9])** Translate Id to output LineString (optional, default `{}`)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findSegment(multiLine);\n// => Feature<LineString<[[10, 10], [50, 30]]>>\n\n// First Segment of 2nd Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: 1});\n// => Feature<LineString<[[-10, -10], [-50, -30]]>>\n\n// Last Segment of Last Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n// => Feature<LineString<[[-50, -30], [-30, -40]]>>\n```\n\nReturns **[Feature][5]<[LineString][10]>** 2-vertex GeoJSON Feature LineString\n\n## findPoint\n\nFinds a particular Point from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** Any GeoJSON Feature or Geometry\n*   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n\n    *   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    *   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    *   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    *   `options.coordIndex` **[number][3]** Coord Index (optional, default `0`)\n    *   `options.properties` **[Object][8]** Translate Properties to output Point (optional, default `{}`)\n    *   `options.bbox` **[BBox][14]** Translate BBox to output Point (optional, default `{}`)\n    *   `options.id` **([number][3] | [string][9])** Translate Id to output Point (optional, default `{}`)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findPoint(multiLine);\n// => Feature<Point<[10, 10]>>\n\n// First Segment of the 2nd Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: 1});\n// => Feature<Point<[-10, -10]>>\n\n// Last Segment of last Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n// => Feature<Point<[-30, -40]>>\n```\n\nReturns **[Feature][5]<[Point][15]>** 2-vertex GeoJSON Feature Point\n\n[1]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\n\n[2]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[3]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[4]: https://tools.ietf.org/html/rfc7946#section-3.3\n\n[5]: https://tools.ietf.org/html/rfc7946#section-3.2\n\n[6]: https://tools.ietf.org/html/rfc7946#section-3.1\n\n[7]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[8]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[9]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[10]: https://tools.ietf.org/html/rfc7946#section-3.1.4\n\n[11]: https://tools.ietf.org/html/rfc7946#section-3.1.6\n\n[12]: https://tools.ietf.org/html/rfc7946#section-3.1.5\n\n[13]: https://tools.ietf.org/html/rfc7946#section-3.1.7\n\n[14]: https://tools.ietf.org/html/rfc7946#section-5\n\n[15]: https://tools.ietf.org/html/rfc7946#section-3.1.2\n\n<!-- This file is automatically generated. Please don't edit it directly. If you find an error, edit the source file of the module in question (likely index.js or index.ts), and re-run \"yarn docs\" from the root of the turf project. -->\n\n---\n\nThis module is part of the [Turfjs project](https://turfjs.org/), an open source module collection dedicated to geographic algorithms. It is maintained in the [Turfjs/turf](https://github.com/Turfjs/turf) repository, where you can create PRs and issues.\n\n### Installation\n\nInstall this single module individually:\n\n```sh\n$ npm install @turf/meta\n```\n\nOr install the all-encompassing @turf/turf module that includes all modules as functions:\n\n```sh\n$ npm install @turf/turf\n```\n",
      "readmeFilename": "README.md",
      "_id": "@turf/meta@7.0.0-alpha.110",
      "_nodeVersion": "18.19.0",
      "_npmVersion": "lerna/7.4.2/node@v18.19.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-4CTF+JLu5W7uPywl5DtLMkUY9Qvf7UnMLdW9SQqR0Mj4Q3Kd5D4JW679UmQ/ZhprmDFrZUxYXoqX6k0SA/6JyQ==",
        "shasum": "0c01bc45f97db74638a64074a9562022f3d070c6",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-7.0.0-alpha.110.tgz",
        "fileCount": 10,
        "unpackedSize": 214828,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDc7/C2SnJwGavv6KKIOEm78QMw0IgZ34WD5mh6D2tzRAiAbr8LNe7J1nbnru+QU1n8FACq2CQ+lmZ8BflDuiJM3yw=="
          }
        ]
      },
      "_npmUser": {
        "name": "mdfedderly",
        "email": "mdfedderly@mdfedderly.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "twelch",
          "email": "tim.j.welch@gmail.com"
        },
        {
          "name": "jamesmilneruk",
          "email": "jamesmilner22@hotmail.com"
        },
        {
          "name": "rowanwins",
          "email": "rowanwins@yahoo.com.au"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "mdfedderly",
          "email": "mdfedderly@mdfedderly.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta_7.0.0-alpha.110_1703973711759_0.35236927712208566"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-alpha.111": {
      "name": "@turf/meta",
      "version": "7.0.0-alpha.111",
      "description": "turf meta module",
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "funding": "https://opencollective.com/turf",
      "publishConfig": {
        "access": "public"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "type": "commonjs",
      "main": "dist/cjs/index.cjs",
      "module": "dist/esm/index.mjs",
      "types": "dist/cjs/index.d.ts",
      "exports": {
        "./package.json": "./package.json",
        ".": {
          "import": {
            "types": "./dist/esm/index.d.mts",
            "default": "./dist/esm/index.mjs"
          },
          "require": {
            "types": "./dist/cjs/index.d.ts",
            "default": "./dist/cjs/index.cjs"
          }
        }
      },
      "sideEffects": false,
      "scripts": {
        "bench": "tsx bench.ts",
        "build": "tsup --config ../../tsup.config.ts",
        "docs": "tsx ../../scripts/generate-readmes.ts",
        "test": "npm-run-all --npm-path npm test:*",
        "test:tape": "tsx test.ts",
        "test:types": "tsc --esModuleInterop --noEmit --strict types.ts"
      },
      "devDependencies": {
        "@turf/random": "^7.0.0-alpha.111+08576cb50",
        "benchmark": "^2.1.4",
        "npm-run-all": "^4.1.5",
        "tape": "^5.7.2",
        "tsup": "^8.0.1",
        "tsx": "^4.6.2"
      },
      "dependencies": {
        "@turf/helpers": "^7.0.0-alpha.111+08576cb50"
      },
      "gitHead": "08576cb50376e0199aea02dbd887e3af83672246",
      "readme": "# @turf/meta\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n## coordEachCallback\n\nCallback for coordEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentCoord` **[Array][2]<[number][3]>** The current coordinate being processed.\n*   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## coordEach\n\nIterate over coordinates in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n*   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\nReturns **void** \n\n## coordReduceCallback\n\nCallback for coordReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentCoord` **[Array][2]<[number][3]>** The current coordinate being processed.\n*   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n    Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## coordReduce\n\nReduce coordinates in any GeoJSON object, similar to Array.reduce()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Geometry][6] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentCoord, coordIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n*   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentCoord;\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## propEachCallback\n\nCallback for propEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentProperties` **[Object][8]** The current Properties being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propEach\n\nIterate over properties in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentProperties, featureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propEach(features, function (currentProperties, featureIndex) {\n  //=currentProperties\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## propReduceCallback\n\nCallback for propReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentProperties` **any** The current Properties being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propReduce\n\nReduce properties in any GeoJSON object into a single value,\nsimilar to how Array.reduce works. However, in this case we lazily run\nthe reduction, so an array of all properties is unnecessary.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentProperties, featureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n  //=previousValue\n  //=currentProperties\n  //=featureIndex\n  return currentProperties\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## featureEachCallback\n\nCallback for featureEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentFeature` **[Feature][5]\\<any>** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureEach\n\nIterate over features in any GeoJSON object, similar to\nArray.forEach.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.featureEach(features, function (currentFeature, featureIndex) {\n  //=currentFeature\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## featureReduceCallback\n\nCallback for featureReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentFeature` **[Feature][5]** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## coordAll\n\nGet all coordinates from any GeoJSON object.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nvar coords = turf.coordAll(features);\n//= [[26, 37], [36, 53]]\n```\n\nReturns **[Array][2]<[Array][2]<[number][3]>>** coordinate position array\n\n## geomEachCallback\n\nCallback for geomEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n*   `featureBBox` **[Array][2]<[number][3]>** The current Feature BBox being processed.\n*   `featureId` **([number][3] | [string][9])** The current Feature Id being processed.\n\n## geomEach\n\nIterate over each geometry in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n});\n```\n\nReturns **void** \n\n## geomReduceCallback\n\nCallback for geomReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n*   `featureBBox` **[Array][2]<[number][3]>** The current Feature BBox being processed.\n*   `featureId` **([number][3] | [string][9])** The current Feature Id being processed.\n\n## geomReduce\n\nReduce geometry in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=previousValue\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n  return currentGeometry\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## flattenEachCallback\n\nCallback for flattenEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentFeature` **[Feature][5]** The current flattened feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenEach\n\nIterate over flattened features in any GeoJSON object, similar to\nArray.forEach.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n});\n```\n\n## flattenReduceCallback\n\nCallback for flattenReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentFeature` **[Feature][5]** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenReduce\n\nReduce flattened features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## segmentEachCallback\n\nCallback for segmentEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentSegment` **[Feature][5]<[LineString][10]>** The current Segment being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n*   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\nReturns **void** \n\n## segmentEach\n\nIterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON\n*   `callback` **[Function][1]** a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n\n### Examples\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //=currentSegment\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  //=segmentIndex\n});\n\n// Calculate the total number of segments\nvar total = 0;\nturf.segmentEach(polygon, function () {\n    total++;\n});\n```\n\nReturns **void** \n\n## segmentReduceCallback\n\nCallback for segmentReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentSegment` **[Feature][5]<[LineString][10]>** The current Segment being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n*   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\n## segmentReduce\n\nReduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON\n*   `callback` **[Function][1]** a method that takes (previousValue, currentSegment, currentIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //= previousSegment\n  //= currentSegment\n  //= featureIndex\n  //= multiFeatureIndex\n  //= geometryIndex\n  //= segmentIndex\n  return currentSegment\n});\n\n// Calculate the total number of segments\nvar initialValue = 0\nvar total = turf.segmentReduce(polygon, function (previousValue) {\n    previousValue++;\n    return previousValue;\n}, initialValue);\n```\n\nReturns **void** \n\n## lineEachCallback\n\nCallback for lineEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentLine` **[Feature][5]<[LineString][10]>** The current LineString|LinearRing being processed\n*   `featureIndex` **[number][3]** The current index of the Feature being processed\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineEach\n\nIterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\nsimilar to Array.forEach.\n\n### Parameters\n\n*   `geojson` **([Geometry][6] | [Feature][5]<([LineString][10] | [Polygon][11] | [MultiLineString][12] | [MultiPolygon][13])>)** object\n*   `callback` **[Function][1]** a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n  [[26, 37], [35, 45]],\n  [[36, 53], [38, 50], [41, 55]]\n]);\n\nturf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\n## lineReduceCallback\n\nCallback for lineReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentLine` **[Feature][5]<[LineString][10]>** The current LineString|LinearRing being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([Geometry][6] | [Feature][5]<([LineString][10] | [Polygon][11] | [MultiLineString][12] | [MultiPolygon][13])>)** object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar multiPoly = turf.multiPolygon([\n  turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n  turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n]);\n\nturf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentLine\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## findSegment\n\nFinds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\nPoint & MultiPoint will always return null.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** Any GeoJSON Feature or Geometry\n*   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n\n    *   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    *   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    *   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    *   `options.segmentIndex` **[number][3]** Segment Index (optional, default `0`)\n    *   `options.properties` **[Object][8]** Translate Properties to output LineString (optional, default `{}`)\n    *   `options.bbox` **[BBox][14]** Translate BBox to output LineString (optional, default `{}`)\n    *   `options.id` **([number][3] | [string][9])** Translate Id to output LineString (optional, default `{}`)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findSegment(multiLine);\n// => Feature<LineString<[[10, 10], [50, 30]]>>\n\n// First Segment of 2nd Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: 1});\n// => Feature<LineString<[[-10, -10], [-50, -30]]>>\n\n// Last Segment of Last Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n// => Feature<LineString<[[-50, -30], [-30, -40]]>>\n```\n\nReturns **[Feature][5]<[LineString][10]>** 2-vertex GeoJSON Feature LineString\n\n## findPoint\n\nFinds a particular Point from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** Any GeoJSON Feature or Geometry\n*   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n\n    *   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    *   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    *   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    *   `options.coordIndex` **[number][3]** Coord Index (optional, default `0`)\n    *   `options.properties` **[Object][8]** Translate Properties to output Point (optional, default `{}`)\n    *   `options.bbox` **[BBox][14]** Translate BBox to output Point (optional, default `{}`)\n    *   `options.id` **([number][3] | [string][9])** Translate Id to output Point (optional, default `{}`)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findPoint(multiLine);\n// => Feature<Point<[10, 10]>>\n\n// First Segment of the 2nd Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: 1});\n// => Feature<Point<[-10, -10]>>\n\n// Last Segment of last Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n// => Feature<Point<[-30, -40]>>\n```\n\nReturns **[Feature][5]<[Point][15]>** 2-vertex GeoJSON Feature Point\n\n[1]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\n\n[2]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[3]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[4]: https://tools.ietf.org/html/rfc7946#section-3.3\n\n[5]: https://tools.ietf.org/html/rfc7946#section-3.2\n\n[6]: https://tools.ietf.org/html/rfc7946#section-3.1\n\n[7]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[8]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[9]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[10]: https://tools.ietf.org/html/rfc7946#section-3.1.4\n\n[11]: https://tools.ietf.org/html/rfc7946#section-3.1.6\n\n[12]: https://tools.ietf.org/html/rfc7946#section-3.1.5\n\n[13]: https://tools.ietf.org/html/rfc7946#section-3.1.7\n\n[14]: https://tools.ietf.org/html/rfc7946#section-5\n\n[15]: https://tools.ietf.org/html/rfc7946#section-3.1.2\n\n<!-- This file is automatically generated. Please don't edit it directly. If you find an error, edit the source file of the module in question (likely index.js or index.ts), and re-run \"yarn docs\" from the root of the turf project. -->\n\n---\n\nThis module is part of the [Turfjs project](https://turfjs.org/), an open source module collection dedicated to geographic algorithms. It is maintained in the [Turfjs/turf](https://github.com/Turfjs/turf) repository, where you can create PRs and issues.\n\n### Installation\n\nInstall this single module individually:\n\n```sh\n$ npm install @turf/meta\n```\n\nOr install the all-encompassing @turf/turf module that includes all modules as functions:\n\n```sh\n$ npm install @turf/turf\n```\n",
      "readmeFilename": "README.md",
      "_id": "@turf/meta@7.0.0-alpha.111",
      "_nodeVersion": "18.19.0",
      "_npmVersion": "lerna/7.4.2/node@v18.19.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-gZj4AjdA+9BUBJNgLA44zhSCxxJFvfxfCmXsVg6sau1/x/EfjPpjwGHq5u9LkVi3rA0LkYPelUujv/Ai/S37wQ==",
        "shasum": "0a3442d58d75922b0fe1f0478694960afa7af26c",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-7.0.0-alpha.111.tgz",
        "fileCount": 10,
        "unpackedSize": 214828,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHLagiy5RJs53MjkVjDyB4jVjRuvpw8sqkw9cOwRgSmZAiEA18oTFNERd/bNuP7P3lA1cbd/3eomBLIBaolqvsCpyMU="
          }
        ]
      },
      "_npmUser": {
        "name": "mdfedderly",
        "email": "mdfedderly@mdfedderly.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "twelch",
          "email": "tim.j.welch@gmail.com"
        },
        {
          "name": "jamesmilneruk",
          "email": "jamesmilner22@hotmail.com"
        },
        {
          "name": "rowanwins",
          "email": "rowanwins@yahoo.com.au"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "mdfedderly",
          "email": "mdfedderly@mdfedderly.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta_7.0.0-alpha.111_1705498934483_0.08109982740656974"
      },
      "_hasShrinkwrap": false
    },
    "7.0.0-alpha.113": {
      "name": "@turf/meta",
      "version": "7.0.0-alpha.113",
      "description": "turf meta module",
      "author": {
        "name": "Turf Authors"
      },
      "contributors": [
        {
          "name": "Tom MacWright",
          "email": "@tmcw"
        },
        {
          "name": "Daniel Pulido",
          "email": "@dpmcmlxxvi"
        },
        {
          "name": "Denis Carriere",
          "email": "@DenisCarriere"
        }
      ],
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/Turfjs/turf/issues"
      },
      "homepage": "https://github.com/Turfjs/turf",
      "repository": {
        "type": "git",
        "url": "git://github.com/Turfjs/turf.git"
      },
      "funding": "https://opencollective.com/turf",
      "publishConfig": {
        "access": "public"
      },
      "keywords": [
        "functional",
        "programming",
        "turfjs",
        "geojson",
        "meta",
        "flattenEach",
        "flattenReduce",
        "segmentEach",
        "segmentReduce",
        "coordEach",
        "coordReduce",
        "propEach",
        "propReduce",
        "featureEach",
        "featureReduce",
        "coordAll",
        "geomEach",
        "geomReduce",
        "lineEeach",
        "lineReduce"
      ],
      "type": "commonjs",
      "main": "dist/cjs/index.cjs",
      "module": "dist/esm/index.mjs",
      "types": "dist/cjs/index.d.ts",
      "exports": {
        "./package.json": "./package.json",
        ".": {
          "import": {
            "types": "./dist/esm/index.d.mts",
            "default": "./dist/esm/index.mjs"
          },
          "require": {
            "types": "./dist/cjs/index.d.ts",
            "default": "./dist/cjs/index.cjs"
          }
        }
      },
      "sideEffects": false,
      "scripts": {
        "bench": "tsx bench.ts",
        "build": "tsup --config ../../tsup.config.ts",
        "docs": "tsx ../../scripts/generate-readmes.ts",
        "test": "npm-run-all --npm-path npm test:*",
        "test:tape": "tsx test.ts",
        "test:types": "tsc --esModuleInterop --noEmit --strict types.ts"
      },
      "devDependencies": {
        "@turf/random": "^7.0.0-alpha.113+876702a45",
        "benchmark": "^2.1.4",
        "npm-run-all": "^4.1.5",
        "tape": "^5.7.2",
        "tsup": "^8.0.1",
        "tsx": "^4.6.2"
      },
      "dependencies": {
        "@turf/helpers": "^7.0.0-alpha.113+876702a45"
      },
      "gitHead": "876702a454d5d085d6e1e54ae286c2b5bc08f584",
      "readme": "# @turf/meta\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n## coordEachCallback\n\nCallback for coordEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentCoord` **[Array][2]<[number][3]>** The current coordinate being processed.\n*   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## coordEach\n\nIterate over coordinates in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n*   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\nReturns **void** \n\n## coordReduceCallback\n\nCallback for coordReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentCoord` **[Array][2]<[number][3]>** The current coordinate being processed.\n*   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n    Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## coordReduce\n\nReduce coordinates in any GeoJSON object, similar to Array.reduce()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Geometry][6] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentCoord, coordIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n*   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentCoord;\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## propEachCallback\n\nCallback for propEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentProperties` **[Object][8]** The current Properties being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propEach\n\nIterate over properties in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentProperties, featureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propEach(features, function (currentProperties, featureIndex) {\n  //=currentProperties\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## propReduceCallback\n\nCallback for propReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentProperties` **any** The current Properties being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propReduce\n\nReduce properties in any GeoJSON object into a single value,\nsimilar to how Array.reduce works. However, in this case we lazily run\nthe reduction, so an array of all properties is unnecessary.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentProperties, featureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n  //=previousValue\n  //=currentProperties\n  //=featureIndex\n  return currentProperties\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## featureEachCallback\n\nCallback for featureEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentFeature` **[Feature][5]\\<any>** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureEach\n\nIterate over features in any GeoJSON object, similar to\nArray.forEach.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.featureEach(features, function (currentFeature, featureIndex) {\n  //=currentFeature\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## featureReduceCallback\n\nCallback for featureReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentFeature` **[Feature][5]** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## coordAll\n\nGet all coordinates from any GeoJSON object.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nvar coords = turf.coordAll(features);\n//= [[26, 37], [36, 53]]\n```\n\nReturns **[Array][2]<[Array][2]<[number][3]>>** coordinate position array\n\n## geomEachCallback\n\nCallback for geomEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n*   `featureBBox` **[Array][2]<[number][3]>** The current Feature BBox being processed.\n*   `featureId` **([number][3] | [string][9])** The current Feature Id being processed.\n\n## geomEach\n\nIterate over each geometry in any GeoJSON object, similar to Array.forEach()\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n});\n```\n\nReturns **void** \n\n## geomReduceCallback\n\nCallback for geomReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n*   `featureBBox` **[Array][2]<[number][3]>** The current Feature BBox being processed.\n*   `featureId` **([number][3] | [string][9])** The current Feature Id being processed.\n\n## geomReduce\n\nReduce geometry in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=previousValue\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n  return currentGeometry\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## flattenEachCallback\n\nCallback for flattenEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentFeature` **[Feature][5]** The current flattened feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenEach\n\nIterate over flattened features in any GeoJSON object, similar to\nArray.forEach.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n});\n```\n\n## flattenReduceCallback\n\nCallback for flattenReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentFeature` **[Feature][5]** The current Feature being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenReduce\n\nReduce flattened features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## segmentEachCallback\n\nCallback for segmentEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentSegment` **[Feature][5]<[LineString][10]>** The current Segment being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n*   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\nReturns **void** \n\n## segmentEach\n\nIterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON\n*   `callback` **[Function][1]** a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n\n### Examples\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //=currentSegment\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  //=segmentIndex\n});\n\n// Calculate the total number of segments\nvar total = 0;\nturf.segmentEach(polygon, function () {\n    total++;\n});\n```\n\nReturns **void** \n\n## segmentReduceCallback\n\nCallback for segmentReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentSegment` **[Feature][5]<[LineString][10]>** The current Segment being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed.\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n*   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\n## segmentReduce\n\nReduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** any GeoJSON\n*   `callback` **[Function][1]** a method that takes (previousValue, currentSegment, currentIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //= previousSegment\n  //= currentSegment\n  //= featureIndex\n  //= multiFeatureIndex\n  //= geometryIndex\n  //= segmentIndex\n  return currentSegment\n});\n\n// Calculate the total number of segments\nvar initialValue = 0\nvar total = turf.segmentReduce(polygon, function (previousValue) {\n    previousValue++;\n    return previousValue;\n}, initialValue);\n```\n\nReturns **void** \n\n## lineEachCallback\n\nCallback for lineEach\n\nType: [Function][1]\n\n### Parameters\n\n*   `currentLine` **[Feature][5]<[LineString][10]>** The current LineString|LinearRing being processed\n*   `featureIndex` **[number][3]** The current index of the Feature being processed\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineEach\n\nIterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\nsimilar to Array.forEach.\n\n### Parameters\n\n*   `geojson` **([Geometry][6] | [Feature][5]<([LineString][10] | [Polygon][11] | [MultiLineString][12] | [MultiPolygon][13])>)** object\n*   `callback` **[Function][1]** a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n  [[26, 37], [35, 45]],\n  [[36, 53], [38, 50], [41, 55]]\n]);\n\nturf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\n## lineReduceCallback\n\nCallback for lineReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n*   The previousValue argument is initialValue.\n*   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n*   The previousValue argument is the value of the first element present in the array.\n*   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n### Parameters\n\n*   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n*   `currentLine` **[Feature][5]<[LineString][10]>** The current LineString|LinearRing being processed.\n*   `featureIndex` **[number][3]** The current index of the Feature being processed\n*   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n*   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n### Parameters\n\n*   `geojson` **([Geometry][6] | [Feature][5]<([LineString][10] | [Polygon][11] | [MultiLineString][12] | [MultiPolygon][13])>)** object\n*   `callback` **[Function][1]** a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n*   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n### Examples\n\n```javascript\nvar multiPoly = turf.multiPolygon([\n  turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n  turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n]);\n\nturf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentLine\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## findSegment\n\nFinds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\nPoint & MultiPoint will always return null.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** Any GeoJSON Feature or Geometry\n*   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n\n    *   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    *   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    *   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    *   `options.segmentIndex` **[number][3]** Segment Index (optional, default `0`)\n    *   `options.properties` **[Object][8]** Translate Properties to output LineString (optional, default `{}`)\n    *   `options.bbox` **[BBox][14]** Translate BBox to output LineString (optional, default `{}`)\n    *   `options.id` **([number][3] | [string][9])** Translate Id to output LineString (optional, default `{}`)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findSegment(multiLine);\n// => Feature<LineString<[[10, 10], [50, 30]]>>\n\n// First Segment of 2nd Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: 1});\n// => Feature<LineString<[[-10, -10], [-50, -30]]>>\n\n// Last Segment of Last Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n// => Feature<LineString<[[-50, -30], [-30, -40]]>>\n```\n\nReturns **[Feature][5]<[LineString][10]>** 2-vertex GeoJSON Feature LineString\n\n## findPoint\n\nFinds a particular Point from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\n\n### Parameters\n\n*   `geojson` **([FeatureCollection][4] | [Feature][5] | [Geometry][6])** Any GeoJSON Feature or Geometry\n*   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n\n    *   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    *   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    *   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    *   `options.coordIndex` **[number][3]** Coord Index (optional, default `0`)\n    *   `options.properties` **[Object][8]** Translate Properties to output Point (optional, default `{}`)\n    *   `options.bbox` **[BBox][14]** Translate BBox to output Point (optional, default `{}`)\n    *   `options.id` **([number][3] | [string][9])** Translate Id to output Point (optional, default `{}`)\n\n### Examples\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findPoint(multiLine);\n// => Feature<Point<[10, 10]>>\n\n// First Segment of the 2nd Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: 1});\n// => Feature<Point<[-10, -10]>>\n\n// Last Segment of last Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n// => Feature<Point<[-30, -40]>>\n```\n\nReturns **[Feature][5]<[Point][15]>** 2-vertex GeoJSON Feature Point\n\n[1]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\n\n[2]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[3]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[4]: https://tools.ietf.org/html/rfc7946#section-3.3\n\n[5]: https://tools.ietf.org/html/rfc7946#section-3.2\n\n[6]: https://tools.ietf.org/html/rfc7946#section-3.1\n\n[7]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[8]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[9]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[10]: https://tools.ietf.org/html/rfc7946#section-3.1.4\n\n[11]: https://tools.ietf.org/html/rfc7946#section-3.1.6\n\n[12]: https://tools.ietf.org/html/rfc7946#section-3.1.5\n\n[13]: https://tools.ietf.org/html/rfc7946#section-3.1.7\n\n[14]: https://tools.ietf.org/html/rfc7946#section-5\n\n[15]: https://tools.ietf.org/html/rfc7946#section-3.1.2\n\n<!-- This file is automatically generated. Please don't edit it directly. If you find an error, edit the source file of the module in question (likely index.js or index.ts), and re-run \"yarn docs\" from the root of the turf project. -->\n\n---\n\nThis module is part of the [Turfjs project](https://turfjs.org/), an open source module collection dedicated to geographic algorithms. It is maintained in the [Turfjs/turf](https://github.com/Turfjs/turf) repository, where you can create PRs and issues.\n\n### Installation\n\nInstall this single module individually:\n\n```sh\n$ npm install @turf/meta\n```\n\nOr install the all-encompassing @turf/turf module that includes all modules as functions:\n\n```sh\n$ npm install @turf/turf\n```\n",
      "readmeFilename": "README.md",
      "_id": "@turf/meta@7.0.0-alpha.113",
      "_nodeVersion": "18.19.0",
      "_npmVersion": "lerna/7.4.2/node@v18.19.0+x64 (linux)",
      "dist": {
        "integrity": "sha512-cWFVfbi9aY1K+I4COqjlpXKk9JdXKFjmMrglI+TSr5PTLi3Lv2JypqNbNkCfm1+0sCcb0OuSDe9h86XikPhcaA==",
        "shasum": "e12467de57f5e2f0a26fc380cb219357c7ea2c87",
        "tarball": "https://registry.npmjs.org/@turf/meta/-/meta-7.0.0-alpha.113.tgz",
        "fileCount": 10,
        "unpackedSize": 214828,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICZBxtN+E/6husk7drM/LGhberjzn1hvjoEGTunXyFn/AiBWwhdCASBkZIHQoen11sCgyncPJi218Vql16eu7+rxCQ=="
          }
        ]
      },
      "_npmUser": {
        "name": "mdfedderly",
        "email": "mdfedderly@mdfedderly.com"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "twelch",
          "email": "tim.j.welch@gmail.com"
        },
        {
          "name": "jamesmilneruk",
          "email": "jamesmilner22@hotmail.com"
        },
        {
          "name": "rowanwins",
          "email": "rowanwins@yahoo.com.au"
        },
        {
          "name": "tmcw",
          "email": "tom@macwright.com"
        },
        {
          "name": "morganherlocker",
          "email": "morgan.herlocker@gmail.com"
        },
        {
          "name": "tcql",
          "email": "tim.channell@gmail.com"
        },
        {
          "name": "mdfedderly",
          "email": "mdfedderly@mdfedderly.com"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/meta_7.0.0-alpha.113_1706992345220_0.010903014401233424"
      },
      "_hasShrinkwrap": false
    }
  },
  "readme": "",
  "maintainers": [
    {
      "name": "twelch",
      "email": "tim.j.welch@gmail.com"
    },
    {
      "name": "jamesmilneruk",
      "email": "jamesmilner22@hotmail.com"
    },
    {
      "name": "rowanwins",
      "email": "rowanwins@yahoo.com.au"
    },
    {
      "name": "tmcw",
      "email": "tom@macwright.com"
    },
    {
      "name": "morganherlocker",
      "email": "morgan.herlocker@gmail.com"
    },
    {
      "name": "tcql",
      "email": "tim.channell@gmail.com"
    },
    {
      "name": "mdfedderly",
      "email": "mdfedderly@mdfedderly.com"
    }
  ],
  "time": {
    "modified": "2024-02-03T20:32:25.683Z",
    "created": "2016-07-06T15:58:13.921Z",
    "3.0.15": "2016-07-06T15:58:13.921Z",
    "3.0.16": "2016-07-06T17:16:50.642Z",
    "3.1.1": "2016-07-12T12:41:34.589Z",
    "3.1.2": "2016-07-12T16:06:19.185Z",
    "3.3.3": "2016-07-13T16:40:47.910Z",
    "3.5.2": "2016-08-22T22:21:11.847Z",
    "3.5.2-alpha.d2c36ee7": "2016-11-04T19:33:10.783Z",
    "3.5.3": "2016-11-07T16:08:22.812Z",
    "3.6.1": "2016-11-17T15:32:03.992Z",
    "3.6.3": "2016-11-30T13:09:42.489Z",
    "3.7.0": "2016-11-30T13:46:14.720Z",
    "3.7.3": "2017-01-09T17:00:02.164Z",
    "3.7.5": "2017-01-23T01:17:07.512Z",
    "3.10.0": "2017-02-14T20:29:56.393Z",
    "3.10.4": "2017-02-28T13:37:45.093Z",
    "3.10.5": "2017-03-02T21:28:22.922Z",
    "3.13.0": "2017-03-12T05:01:42.203Z",
    "3.14.0": "2017-03-22T15:52:23.980Z",
    "4.0.0": "2017-04-03T00:31:28.076Z",
    "4.0.1": "2017-04-05T22:51:26.143Z",
    "4.0.2": "2017-04-06T16:25:30.098Z",
    "4.1.0": "2017-04-10T14:39:29.473Z",
    "4.2.0": "2017-04-30T21:47:24.359Z",
    "4.3.0": "2017-05-12T02:05:10.851Z",
    "4.4.0": "2017-06-06T01:52:13.501Z",
    "4.5.1": "2017-06-30T17:07:00.059Z",
    "4.5.2": "2017-06-30T17:23:02.202Z",
    "4.6.0": "2017-08-02T16:57:23.975Z",
    "4.7.0": "2017-09-05T15:30:28.126Z",
    "4.7.1": "2017-09-05T15:36:26.358Z",
    "4.7.3": "2017-09-12T13:21:09.858Z",
    "4.7.4": "2017-09-26T00:28:21.611Z",
    "5.0.0-alpha": "2017-09-26T01:45:26.588Z",
    "5.0.0": "2017-10-01T23:17:27.369Z",
    "5.0.1": "2017-10-10T19:06:10.450Z",
    "5.0.2": "2017-10-11T04:35:27.066Z",
    "5.0.4": "2017-11-09T17:47:44.854Z",
    "5.1.0": "2017-12-07T19:25:31.240Z",
    "5.1.1": "2017-12-09T08:30:11.409Z",
    "5.1.4": "2017-12-10T05:03:24.248Z",
    "5.1.5": "2017-12-10T05:10:56.433Z",
    "5.1.6": "2017-12-10T21:12:15.457Z",
    "5.2.0": "2017-12-29T18:14:50.758Z",
    "6.0.0-beta.2": "2018-01-05T17:34:01.140Z",
    "6.0.0-beta.3": "2018-01-05T18:00:12.343Z",
    "6.0.0-beta.4": "2018-01-26T22:01:20.207Z",
    "6.0.0": "2018-01-26T22:50:57.212Z",
    "6.0.1": "2018-01-29T15:07:08.613Z",
    "6.0.2": "2018-05-05T15:59:50.757Z",
    "6.2.0-alpha.0": "2020-03-26T22:35:10.874Z",
    "6.2.0-alpha.1": "2020-03-27T00:01:20.307Z",
    "6.2.0-alpha.2": "2020-07-13T14:39:51.974Z",
    "6.2.0-alpha.3": "2020-12-10T21:04:17.779Z",
    "6.2.0": "2021-01-12T14:57:11.667Z",
    "6.3.0": "2021-01-20T14:38:47.816Z",
    "6.4.0": "2021-06-17T13:30:34.587Z",
    "6.5.0": "2021-07-10T10:17:23.667Z",
    "7.0.0-alpha.0": "2022-11-09T15:13:39.994Z",
    "7.0.0-alpha.1": "2023-09-18T23:45:42.333Z",
    "7.0.0-alpha.2": "2023-10-02T13:55:53.564Z",
    "7.0.0-alpha.110": "2023-12-30T22:01:52.267Z",
    "7.0.0-alpha.111": "2024-01-17T13:42:14.615Z",
    "7.0.0-alpha.113": "2024-02-03T20:32:25.412Z"
  },
  "homepage": "https://github.com/Turfjs/turf",
  "keywords": [
    "functional",
    "programming",
    "turfjs",
    "geojson",
    "meta",
    "flattenEach",
    "flattenReduce",
    "segmentEach",
    "segmentReduce",
    "coordEach",
    "coordReduce",
    "propEach",
    "propReduce",
    "featureEach",
    "featureReduce",
    "coordAll",
    "geomEach",
    "geomReduce",
    "lineEeach",
    "lineReduce"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/Turfjs/turf.git"
  },
  "author": {
    "name": "Turf Authors"
  },
  "bugs": {
    "url": "https://github.com/Turfjs/turf/issues"
  },
  "license": "MIT",
  "readmeFilename": "",
  "contributors": [
    {
      "name": "Tom MacWright",
      "email": "@tmcw"
    },
    {
      "name": "Daniel Pulido",
      "email": "@dpmcmlxxvi"
    },
    {
      "name": "Denis Carriere",
      "email": "@DenisCarriere"
    }
  ]
}