{
  "_id": "karma-typescript",
  "_rev": "88-67d1553914e879d63f9c97f8d559defc",
  "name": "karma-typescript",
  "description": "Simplifying running unit tests with coverage for Typescript projects.",
  "dist-tags": {
    "latest": "5.5.4",
    "beta": "5.0.0-beta.3"
  },
  "versions": {
    "1.0.0": {
      "name": "karma-typescript",
      "version": "1.0.0",
      "description": "Preprocessor for transpiling Typescript files on the fly with sourcemaps for debugging.",
      "main": "index.js",
      "keywords": [
        "Jasmine",
        "CommonJS",
        "Karma",
        "Typescript",
        "Unit test"
      ],
      "author": {
        "name": "Erik Barke"
      },
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "gitHead": "79b7608324285954677e753651f4ab99f5c08abe",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@1.0.0",
      "scripts": {},
      "_shasum": "34254c804161d2b61cb46534bb5baa814d1c9142",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "34254c804161d2b61cb46534bb5baa814d1c9142",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-1.0.0.tgz",
        "integrity": "sha512-hELgUmkGbqwYSg48Nx7p0Zd1I6jmf7ctNCJiNoG2hn5MzCp113WMwVSAy51lVXZLsdMldqEGuAr5kJKDaMD8qg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCICia9nWcbEHJOPxE3/t0cVHNEnJv4U6vaXYEVl68b5NsAiEAzwrDsxGh6VD8JaHg0x5OHn+ZXdDMo7E6TWGTKqm00r4="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-1.0.0.tgz_1471847421499_0.5422693474683911"
      },
      "directories": {}
    },
    "1.0.1": {
      "name": "karma-typescript",
      "version": "1.0.1",
      "description": "Preprocessor for transpiling Typescript files on the fly with sourcemaps for debugging.",
      "main": "index.js",
      "keywords": [
        "Jasmine",
        "CommonJS",
        "Karma",
        "Typescript",
        "Unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "gitHead": "aec3635292e636f295d7d793fddb94438af65bf0",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@1.0.1",
      "scripts": {},
      "_shasum": "9a0a14e0d5ae30f961623856833e7802a74f4bdb",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "9a0a14e0d5ae30f961623856833e7802a74f4bdb",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-1.0.1.tgz",
        "integrity": "sha512-C8K+Cz3Hl+vGttDVy+HMaOeFcIr7DJLyurGSxqM9ARioKsG5DmmbH1zn/E1bouFxncX6tYTxna/lAjeBp9V0+w==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQC41qYy7PKzCUaxM/eTMDWi+8O4X9J6q8mU2eE7ApyXhwIhANkrXgDxnvYcstySWhOR/y2Zi8X5MX2NXHzBCHCD/wP3"
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-1.0.1.tgz_1471848244097_0.8809665320441127"
      },
      "directories": {}
    },
    "1.0.2": {
      "name": "karma-typescript",
      "version": "1.0.2",
      "description": "Preprocessor for transpiling Typescript files on the fly with sourcemaps for debugging.",
      "main": "index.js",
      "keywords": [
        "Jasmine",
        "CommonJS",
        "Karma",
        "Typescript",
        "Unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "gitHead": "027c0b5561dbae9d0c68619e329d2c1f0aba7360",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@1.0.2",
      "scripts": {},
      "_shasum": "d3176e8e30a93e1303ed78d551f8708e56b92133",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "d3176e8e30a93e1303ed78d551f8708e56b92133",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-1.0.2.tgz",
        "integrity": "sha512-4ekB8UAtp+WTH9Jcf1csYj5Tq+zX4Oalm0o4VTJT7xFJZ3pLitYQFe+m4r1cpCgGzwkz3VVyw75E/ZZt+fY/+w==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIAjs68dE5y8AGIVeDemt0zK0WqA5GClbX0kD+Y6Y9inoAiBY/K9IWlmdJAiv+W09AzGjkXVrMGbi903KakHnvN4TjQ=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-1.0.2.tgz_1471922727981_0.15656949277035892"
      },
      "directories": {}
    },
    "1.0.3": {
      "name": "karma-typescript",
      "version": "1.0.3",
      "description": "Preprocessor for transpiling Typescript files on the fly with sourcemaps for debugging.",
      "main": "index.js",
      "keywords": [
        "Jasmine",
        "CommonJS",
        "Karma",
        "Typescript",
        "Unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "gitHead": "4f8a5e16b3d8a8eac25041915e8ddb2d5a06b2c6",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@1.0.3",
      "scripts": {},
      "_shasum": "687adfcea00ae20902ec301ddee47b985ea8481f",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "687adfcea00ae20902ec301ddee47b985ea8481f",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-1.0.3.tgz",
        "integrity": "sha512-WTvM/27VDczZ4irYx6QgKrmkr5gqu1NmWk/Mwi4vXwKvXE5y33MbESDF7lBzX8i+F9LErz89HexJyZ3CgREwTw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIDN5M477yZPJyc3pxPt+nKvMXJxXEFaCUnwYEV5QDItkAiBxcHhJvUwQfrSXw1xb5rcwqrlanXvmeT/C2fbi1E2noQ=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-1.0.3.tgz_1471927462319_0.249557240633294"
      },
      "directories": {}
    },
    "1.0.4": {
      "_args": [
        [
          {
            "raw": "karma-typescript@^1.0.1",
            "scope": null,
            "escapedName": "karma-typescript",
            "name": "karma-typescript",
            "rawSpec": "^1.0.1",
            "spec": ">=1.0.1 <2.0.0",
            "type": "range"
          },
          "/Users/erikbarke/Development/tiplinga/client"
        ]
      ],
      "_from": ".",
      "_id": "karma-typescript@1.0.4",
      "_inCache": true,
      "_installable": true,
      "_location": "/karma-typescript",
      "_nodeVersion": "6.4.0",
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-1.0.4.tgz_1471965856618_0.623972054105252"
      },
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "_npmVersion": "3.10.3",
      "_phantomChildren": {},
      "_requested": {
        "raw": "karma-typescript@^1.0.1",
        "scope": null,
        "escapedName": "karma-typescript",
        "name": "karma-typescript",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "_requiredBy": [
        "#DEV:/",
        "#USER"
      ],
      "_resolved": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-1.0.3.tgz",
      "_shasum": "8da570eec6271ee0d00cf1cd1396235b53c041f7",
      "_shrinkwrap": null,
      "_spec": "karma-typescript@^1.0.1",
      "_where": "/Users/erikbarke/Development/tiplinga/client",
      "author": {
        "name": "monounity"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "dependencies": {},
      "description": "Preprocessor for transpiling Typescript files on the fly with sourcemaps for debugging.",
      "devDependencies": {},
      "directories": {},
      "dist": {
        "shasum": "8da570eec6271ee0d00cf1cd1396235b53c041f7",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-1.0.4.tgz",
        "integrity": "sha512-nIvwC86xk8KznWpm9VgwlzC8xsoDcOjg+ey2zEQz4KSK3YbfMdZPONd1GmXBAC4KvqEThB0KuCXtXZHU0ZSPfw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGY/rkMhakwXxPKPbhj8ZNrstnc7PAXlvSTJtn28yS9xAiEA7y4F0IGkNuuJ2jchDz8h3zVK6Sckc0eMzSUQB7VHOxU="
          }
        ]
      },
      "gitHead": "4f8a5e16b3d8a8eac25041915e8ddb2d5a06b2c6",
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "keywords": [
        "Jasmine",
        "CommonJS",
        "Karma",
        "Typescript",
        "Unit test"
      ],
      "license": "MIT",
      "main": "index.js",
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "name": "karma-typescript",
      "optionalDependencies": {},
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "scripts": {},
      "version": "1.0.4"
    },
    "1.0.5": {
      "_args": [
        [
          {
            "raw": "karma-typescript@^1.0.1",
            "scope": null,
            "escapedName": "karma-typescript",
            "name": "karma-typescript",
            "rawSpec": "^1.0.1",
            "spec": ">=1.0.1 <2.0.0",
            "type": "range"
          },
          "/Users/erikbarke/Development/tiplinga/client"
        ]
      ],
      "_from": ".",
      "_id": "karma-typescript@1.0.5",
      "_inCache": true,
      "_installable": true,
      "_location": "/karma-typescript",
      "_nodeVersion": "6.4.0",
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-1.0.5.tgz_1471965998796_0.7734717028215528"
      },
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "_npmVersion": "3.10.3",
      "_phantomChildren": {},
      "_requested": {
        "raw": "karma-typescript@^1.0.1",
        "scope": null,
        "escapedName": "karma-typescript",
        "name": "karma-typescript",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "_requiredBy": [
        "#DEV:/",
        "#USER"
      ],
      "_resolved": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-1.0.3.tgz",
      "_shasum": "6045265d2c2e3d5c6c1a5d2335d23a1d47c4133c",
      "_shrinkwrap": null,
      "_spec": "karma-typescript@^1.0.1",
      "_where": "/Users/erikbarke/Development/tiplinga/client",
      "author": {
        "name": "monounity"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "dependencies": {},
      "description": "Preprocessor for transpiling Typescript files on the fly with sourcemaps for debugging.",
      "devDependencies": {},
      "directories": {},
      "dist": {
        "shasum": "6045265d2c2e3d5c6c1a5d2335d23a1d47c4133c",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-1.0.5.tgz",
        "integrity": "sha512-Q7E6TYXg31ZokUpnR8VqrTi1lHDggzX82cEDMEbH3IldA43cOXERA49rZMdM0+qwI2ceox/cYldjLHwAXEDWAg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDnOV/fhYoad3ndI4p1mbbEeSWycpQ25et56XcVtMChGwIhAPNPWm0a2IzUJdFMLqFPFlM9sUvM9hJ5Qfnh9FrOl2kX"
          }
        ]
      },
      "gitHead": "4f8a5e16b3d8a8eac25041915e8ddb2d5a06b2c6",
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "keywords": [
        "Jasmine",
        "CommonJS",
        "Karma",
        "Typescript",
        "Unit test"
      ],
      "license": "MIT",
      "main": "index.js",
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "name": "karma-typescript",
      "optionalDependencies": {},
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "scripts": {},
      "version": "1.0.5"
    },
    "1.0.6": {
      "_args": [
        [
          {
            "raw": "karma-typescript@^1.0.1",
            "scope": null,
            "escapedName": "karma-typescript",
            "name": "karma-typescript",
            "rawSpec": "^1.0.1",
            "spec": ">=1.0.1 <2.0.0",
            "type": "range"
          },
          "/Users/erikbarke/Development/tiplinga/client"
        ]
      ],
      "_from": ".",
      "_id": "karma-typescript@1.0.6",
      "_inCache": true,
      "_installable": true,
      "_location": "/karma-typescript",
      "_nodeVersion": "6.4.0",
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-1.0.6.tgz_1471966209483_0.6259583833161741"
      },
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "_npmVersion": "3.10.3",
      "_phantomChildren": {},
      "_requested": {
        "raw": "karma-typescript@^1.0.1",
        "scope": null,
        "escapedName": "karma-typescript",
        "name": "karma-typescript",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "_requiredBy": [
        "#DEV:/",
        "#USER"
      ],
      "_resolved": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-1.0.3.tgz",
      "_shasum": "61847a5137768177757f4d129494b25770017417",
      "_shrinkwrap": null,
      "_spec": "karma-typescript@^1.0.1",
      "_where": "/Users/erikbarke/Development/tiplinga/client",
      "author": {
        "name": "monounity"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "dependencies": {},
      "description": "Preprocessor for transpiling Typescript files on the fly with sourcemaps for debugging.",
      "devDependencies": {},
      "directories": {},
      "dist": {
        "shasum": "61847a5137768177757f4d129494b25770017417",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-1.0.6.tgz",
        "integrity": "sha512-dw4RWodZ60JYrLwePwfon06ZWyOXbjKEL6N2UdCDYxBxTu4+VcPQ2pZ2PImZrdFeJFCadf2SrAf1KUhXQ7oZ4Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCaAXjbmOG97ZbVqDz8wk92fvLvd5umG9Onyd/b7OSeGgIhAOefWeFy+RHZoeA2KrAOtxJw/1U1pGWZKXjKW/ObxR1l"
          }
        ]
      },
      "gitHead": "4f8a5e16b3d8a8eac25041915e8ddb2d5a06b2c6",
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "keywords": [
        "Jasmine",
        "CommonJS",
        "Karma",
        "Typescript",
        "Unit test"
      ],
      "license": "MIT",
      "main": "index.js",
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "name": "karma-typescript",
      "optionalDependencies": {},
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "scripts": {},
      "version": "1.0.6"
    },
    "1.0.7": {
      "_args": [
        [
          {
            "raw": "karma-typescript@^1.0.1",
            "scope": null,
            "escapedName": "karma-typescript",
            "name": "karma-typescript",
            "rawSpec": "^1.0.1",
            "spec": ">=1.0.1 <2.0.0",
            "type": "range"
          },
          "/Users/erikbarke/Development/tiplinga/client"
        ]
      ],
      "_from": ".",
      "_id": "karma-typescript@1.0.7",
      "_inCache": true,
      "_installable": true,
      "_location": "/karma-typescript",
      "_nodeVersion": "6.4.0",
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-1.0.7.tgz_1471966346235_0.09488988760858774"
      },
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "_npmVersion": "3.10.3",
      "_phantomChildren": {},
      "_requested": {
        "raw": "karma-typescript@^1.0.1",
        "scope": null,
        "escapedName": "karma-typescript",
        "name": "karma-typescript",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "_requiredBy": [
        "#DEV:/",
        "#USER"
      ],
      "_resolved": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-1.0.3.tgz",
      "_shasum": "9ddd395a1d6b56e16eb9d44a64278132b0b5e6bc",
      "_shrinkwrap": null,
      "_spec": "karma-typescript@^1.0.1",
      "_where": "/Users/erikbarke/Development/tiplinga/client",
      "author": {
        "name": "monounity"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "dependencies": {},
      "description": "Preprocessor for transpiling Typescript files on the fly with sourcemaps for debugging.",
      "devDependencies": {},
      "directories": {},
      "dist": {
        "shasum": "9ddd395a1d6b56e16eb9d44a64278132b0b5e6bc",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-1.0.7.tgz",
        "integrity": "sha512-98Gc/QVTcX4InBlZVHklf29J+wbTGizig/2M0wQKXTyrzSiENbbPSWZODi1VheTQap0C4hWHDbAOgWnuA3OWbw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHzWrhOkcsTLVjmcM3bjcwJ5pBBWzRv8ZkPqj4BgwMLsAiA4L/HpUBaK6NSv11yUGUU4599dMSSCOVJ29EtxtNTiQA=="
          }
        ]
      },
      "gitHead": "4f8a5e16b3d8a8eac25041915e8ddb2d5a06b2c6",
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "keywords": [
        "Jasmine",
        "CommonJS",
        "Karma",
        "Typescript",
        "Unit test"
      ],
      "license": "MIT",
      "main": "index.js",
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "name": "karma-typescript",
      "optionalDependencies": {},
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "scripts": {},
      "version": "1.0.7"
    },
    "1.0.8": {
      "name": "karma-typescript",
      "version": "1.0.8",
      "description": "Preprocessor for transpiling Typescript files on the fly with sourcemaps for debugging.",
      "main": "index.js",
      "keywords": [
        "Jasmine",
        "CommonJS",
        "Karma",
        "Typescript",
        "Unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "gitHead": "c4279b6a5c5fa24ecae7ba52ff161e99b6e4781c",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@1.0.8",
      "scripts": {},
      "_shasum": "bd8f64894d36f27d1fdf625ffd8a24f8c74e83ec",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "bd8f64894d36f27d1fdf625ffd8a24f8c74e83ec",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-1.0.8.tgz",
        "integrity": "sha512-qM1ZYEnyC9TF4h3Z393i246lxBsU5yv1Vw3DmcLxilO5VZfYBiaNQrlICyw0H9elc8pukPBj6dJMmeTLVqO3HQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQChTjnH609Mp6YrqRjrQSXaymxmJv+rQHDsgXpMJHYXMgIgSFA54a+Nl6JQdy7BjVzICt/JTEjXOF9vMHJ0IvNP+2w="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-1.0.8.tgz_1471966496267_0.23161867284215987"
      },
      "directories": {}
    },
    "1.0.9": {
      "name": "karma-typescript",
      "version": "1.0.9",
      "description": "Preprocessor for transpiling Typescript files on the fly with sourcemaps for debugging.",
      "main": "index.js",
      "keywords": [
        "Jasmine",
        "CommonJS",
        "Karma",
        "Typescript",
        "Unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "gitHead": "b15d85c81a5cff69eaea93a765a7883312c36b17",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@1.0.9",
      "scripts": {},
      "_shasum": "d79ca5ae389a809b5fddb4f00e73172a9174d195",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "d79ca5ae389a809b5fddb4f00e73172a9174d195",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-1.0.9.tgz",
        "integrity": "sha512-t1i2/A/KrheyKKixPgmWh9SjytAkMOor/JEVUZpAZvYENpQpUjgP6567F4Tl8/kPQALCN1Op4a/O0AYNQSMvmw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCeRvu8goLQ7L0gJCNeUxTQQ/plaeP0LrDK3XlXJgPzjgIhAOu1etyKalmZIF366T3m+So3A4JQM6bJFAsfeiJnpeeN"
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-1.0.9.tgz_1472011888868_0.2019897010177374"
      },
      "directories": {}
    },
    "1.0.10": {
      "name": "karma-typescript",
      "version": "1.0.10",
      "description": "Preprocessor for transpiling Typescript files on the fly with sourcemaps for debugging.",
      "main": "index.js",
      "keywords": [
        "Jasmine",
        "CommonJS",
        "Karma",
        "Typescript",
        "Unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "gitHead": "a1e88dd0e2f445873ca16b01d65d101284ec2d4d",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@1.0.10",
      "scripts": {},
      "_shasum": "32983920c8be1281de03d18561e131b7164b8d07",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "32983920c8be1281de03d18561e131b7164b8d07",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-1.0.10.tgz",
        "integrity": "sha512-iz/p6zfNl38jL6Ei/2Tpm77RGKBsAPt9nMVQ5q0NmrIWu64iCZvlRDJLy7fcyeSiMmPfBj+FiqDhhDZet8zXBw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEtghUapcFPUfe4zgEm7DrKo+T6lCDXRX9fIIbsaSB2oAiA+neR6iwj2oOtgYqFXUuuGvW42oNu6zbxKB3/gTodvPg=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-1.0.10.tgz_1472016089788_0.14316729945130646"
      },
      "directories": {}
    },
    "1.0.11": {
      "name": "karma-typescript",
      "version": "1.0.11",
      "description": "Preprocessor for unit testing Typescript projects on the fly.",
      "main": "index.js",
      "keywords": [
        "amd",
        "commonjs",
        "coverage",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "remap",
        "requirejs",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "gitHead": "477c7b5d628a4fde6535934885f9e06ad5fcfcda",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@1.0.11",
      "scripts": {},
      "_shasum": "dc0abe891c420968b365096730d9a5624cd41fec",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "dc0abe891c420968b365096730d9a5624cd41fec",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-1.0.11.tgz",
        "integrity": "sha512-aDQ1y3P1dBlymZ/SfzjMouccHpS3p6r7v81SYUw3Mjq00Y7hVC57nk1htFJSMGdfumQ+pevq+WHyBVsROILVyA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQC2NioUJDEfuMbz253Ttt4KUY0d2IYfx77SfV0XeRxkCAIgOcBG1KKj6z9yMpdUcMxEP6f9WkUQWZUxXep6PyY7CQI="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-1.0.11.tgz_1472362552949_0.6754811638966203"
      },
      "directories": {}
    },
    "2.0.0": {
      "name": "karma-typescript",
      "version": "2.0.0",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "index.js",
      "keywords": [
        "commonjs",
        "coverage",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-commonjs",
        "karma-coverage",
        "karma-plugin",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "dependencies": {
        "karma-commonjs": "^1.0.0",
        "karma-coverage": "^1.1.1",
        "remap-istanbul": "git+https://github.com/SitePen/remap-istanbul.git#master"
      },
      "devDependencies": {
        "eslint": "^3.4.0"
      },
      "gitHead": "d00fbbaac3908dcc34b2cffc80368e556f9b37e6",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@2.0.0",
      "scripts": {},
      "_shasum": "fefc59ec3f47810ad0e03626c8283d5f56bebd3f",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "fefc59ec3f47810ad0e03626c8283d5f56bebd3f",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-2.0.0.tgz",
        "integrity": "sha512-wiNc4BQInrSLu9BLW+mpiy8chJgeddojjdFg63NhTmXQkaKjxaom11I6am4s7OahJIcDwtmJZEnEgH1AThTRwg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDNkK1nfqieaF9Y2PhayPYPfZINVTZSTinPL5zDMiAbIAIhAMgT6qB1W6BmWktNHJE5WN7gEiiaLziWCkgWL9cTZbOn"
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-2.0.0.tgz_1472875652533_0.32426180480979383"
      },
      "directories": {}
    },
    "2.0.1": {
      "name": "karma-typescript",
      "version": "2.0.1",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "index.js",
      "keywords": [
        "commonjs",
        "coverage",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-commonjs",
        "karma-coverage",
        "karma-plugin",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "dependencies": {
        "karma-commonjs": "^1.0.0",
        "karma-coverage": "^1.1.1",
        "remap-istanbul": "git+https://github.com/SitePen/remap-istanbul.git#master"
      },
      "devDependencies": {
        "eslint": "^3.4.0"
      },
      "gitHead": "daacd3d6244343d20009c954db3b66143c62dad5",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@2.0.1",
      "scripts": {},
      "_shasum": "d6aa34850807331c0138a6020b7905a52caa7b22",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "d6aa34850807331c0138a6020b7905a52caa7b22",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-2.0.1.tgz",
        "integrity": "sha512-ADMOePUhgnlnL4VqOthy9wNz79tolHSx5VYiQtf7cnr90NaKb5lHEQnYPTTuOnSevRjNxw/lsLVWAbuy/lZ/nA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEIkujivH2RUGjKvSYglYH5blJgrOxH59IDFszd4Ato0AiBUtmTsN4j/EjtyVLjoyyjLhDq3FljfbLDXdYfMOr789A=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-2.0.1.tgz_1472876290362_0.6804912290535867"
      },
      "directories": {}
    },
    "2.0.2": {
      "name": "karma-typescript",
      "version": "2.0.2",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "index.js",
      "keywords": [
        "commonjs",
        "coverage",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-commonjs",
        "karma-coverage",
        "karma-plugin",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "dependencies": {
        "karma-commonjs": "^1.0.0",
        "karma-coverage": "^1.1.1",
        "remap-istanbul": "git+https://github.com/SitePen/remap-istanbul.git#master"
      },
      "devDependencies": {
        "eslint": "^3.4.0"
      },
      "gitHead": "07d6ebd479a4fb3ac22a97808de48f92e833def1",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@2.0.2",
      "scripts": {},
      "_shasum": "1e320c403b9d1f00dbbea65cf410b177be457033",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "1e320c403b9d1f00dbbea65cf410b177be457033",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-2.0.2.tgz",
        "integrity": "sha512-fhmLdtTtot+fjXzVt1LlKgFxPxW+IEVl1wHP4fflAdSbOI95eM0pBGdPf6yFU9mimblbOI9+YmRTRPT0cwkYTg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDsjReyZApUJwo8mzl3C69xL8DUUhvX1SZmkcp3OhwRQAIhANU2Ia1qqHgG9wbe+E3Aes1j7PztJPIp+r0ShxIRa0tz"
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-2.0.2.tgz_1473310984509_0.663153569214046"
      },
      "directories": {}
    },
    "2.0.3": {
      "name": "karma-typescript",
      "version": "2.0.3",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "index.js",
      "keywords": [
        "commonjs",
        "coverage",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-commonjs",
        "karma-coverage",
        "karma-plugin",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "dependencies": {
        "karma-commonjs": "^1.0.0",
        "karma-coverage": "^1.1.1",
        "remap-istanbul": "git+https://github.com/SitePen/remap-istanbul.git#master"
      },
      "devDependencies": {
        "eslint": "^3.4.0"
      },
      "gitHead": "6e93af5d170c030f9e5e1d205bbc6fd5022f5bf8",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@2.0.3",
      "scripts": {},
      "_shasum": "9ebb25f1135b2bda77fbe967a4a54953d83d30eb",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "9ebb25f1135b2bda77fbe967a4a54953d83d30eb",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-2.0.3.tgz",
        "integrity": "sha512-fWW2BW03BtcLkQyotcWgBZ3qNUssknimbRTKnWrdvvZ86ZpR8jwuKEycvdIfymgpFkiYSaUNcvc/IO0kiwi1Wg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFKZyWRDVu3VdFFhBycRglTXHcMD2EMSlI8DyWx5tZf9AiA62EVdlu7Wx80dbRSiklcYbUJqUEbrb8g7gJZSP/SlpA=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-2.0.3.tgz_1473398423785_0.9497790497262031"
      },
      "directories": {}
    },
    "2.0.4": {
      "name": "karma-typescript",
      "version": "2.0.4",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "index.js",
      "keywords": [
        "commonjs",
        "coverage",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-commonjs",
        "karma-coverage",
        "karma-plugin",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "dependencies": {
        "karma-commonjs": "^1.0.0",
        "karma-coverage": "^1.1.1"
      },
      "devDependencies": {
        "eslint": "^3.4.0"
      },
      "gitHead": "747cb6fcfd33c934d327a25c0a0b74f881c1130b",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@2.0.4",
      "scripts": {},
      "_shasum": "f4d5b5936dcb20f90f73452e532fb0f33a4e6f58",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "f4d5b5936dcb20f90f73452e532fb0f33a4e6f58",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-2.0.4.tgz",
        "integrity": "sha512-ahk6Co2+gR+gsLFdnIAJJ1MlCrT0mUgOv8wR3syLI8rk2VM65QuYu9TUhLvB0qY3jLb/DJ2Rk/RN5UDHusi3PA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQD2+/N+t9bHiqGgEqTDwqMuvQSMWX7JP3ZVon3aiWm81wIgUM1TZ8hZmet709fY88LUjbIu/Hbr2UAGjuG6IYFMe+U="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-16-east.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-2.0.4.tgz_1473520115401_0.925334979314357"
      },
      "directories": {}
    },
    "2.0.5": {
      "name": "karma-typescript",
      "version": "2.0.5",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "index.js",
      "keywords": [
        "commonjs",
        "coverage",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-commonjs",
        "karma-coverage",
        "karma-plugin",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "dependencies": {
        "glob": "^7.0.6",
        "karma-commonjs": "^1.0.0",
        "karma-coverage": "^1.1.1"
      },
      "devDependencies": {
        "eslint": "^3.4.0"
      },
      "gitHead": "fe6f0285d1a1b7e99eb7ba4fbb750cfe633a5c5f",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@2.0.5",
      "scripts": {},
      "_shasum": "208f2048eecfde4f7a8d3e2e1308249595729a9f",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "208f2048eecfde4f7a8d3e2e1308249595729a9f",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-2.0.5.tgz",
        "integrity": "sha512-ObPf/ZMcziN0h+MxFNyFaSHY+LCHEyhyLAy2JVmdfC+QYxYtwamBK6IIvghkSmNFqJcBOa/CyCiJrlK5S8xpyg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIALCHPIc2f23pjF+amy7Gefzjgbn5KB4WF3agcQCOCaJAiAgeTjAcxvyP1LfH070FIDoeNQOllJwzzeBJQEw0kmO7A=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-2.0.5.tgz_1473725547899_0.1618531383574009"
      },
      "directories": {}
    },
    "2.0.6": {
      "name": "karma-typescript",
      "version": "2.0.6",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "index.js",
      "keywords": [
        "commonjs",
        "coverage",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-commonjs",
        "karma-coverage",
        "karma-plugin",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "dependencies": {
        "glob": "^7.0.6",
        "karma-commonjs": "^1.0.0",
        "karma-coverage": "^1.1.1",
        "amdefine": "1.0.0",
        "gulp-util": "3.0.7",
        "istanbul": "0.4.3",
        "source-map": ">=0.5.6",
        "through2": "2.0.1"
      },
      "devDependencies": {
        "eslint": "^3.4.0"
      },
      "gitHead": "75019fb02c6176ea8d20d9f7218b197dec89ea59",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@2.0.6",
      "scripts": {},
      "_shasum": "177c0effb70e5befbdbb3d8054dad620c5d42ede",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "177c0effb70e5befbdbb3d8054dad620c5d42ede",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-2.0.6.tgz",
        "integrity": "sha512-5gHlw43Gs/SiSSqHhbUzN5OuS5rCp0D3CW7rGpNQzppVZp1lmIitzdWwr4ryf1A4L5CFw92Fvf3N/gm2f+0MmQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCJmFhVlC54AICpClY5KPBFPTDexUcGwCjTXUNvb2B01gIgOxLoNy58RnA+Ta8CElg6ooXihsWhhvs2cCCtJC7jpCc="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-2.0.6.tgz_1474080717363_0.7046137603465468"
      },
      "directories": {}
    },
    "2.0.9": {
      "name": "karma-typescript",
      "version": "2.0.9",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "index.js",
      "keywords": [
        "commonjs",
        "coverage",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-commonjs",
        "karma-coverage",
        "karma-plugin",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "VilleSalonen"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "dependencies": {
        "glob": "^7.0.6",
        "karma-commonjs": "^1.0.0",
        "karma-coverage": "^1.1.1",
        "amdefine": "1.0.0",
        "gulp-util": "3.0.7",
        "istanbul": "0.4.3",
        "source-map": ">=0.5.6",
        "through2": "2.0.1"
      },
      "devDependencies": {
        "eslint": "^3.4.0"
      },
      "gitHead": "50cc6aac44242babc5ba6d37a431874e2ae0ace4",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@2.0.9",
      "scripts": {},
      "_shasum": "5494153aa4e3ec48a4f3c50b8cc2f3503dcc866a",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "5494153aa4e3ec48a4f3c50b8cc2f3503dcc866a",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-2.0.9.tgz",
        "integrity": "sha512-Bgq5kvQPanghBzBzZmVEZWMMxI9ihrF7P42O1Iv45C4i7eeK/+PHmTgzLdggfuq8ehI9jbW/v/eg5eVUKnGSRA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCi2jXxx+g1ptInNhkOhaV4KiwaxmtNfZFlnUUEH9m8FAIhAI61JcPR1w0WPf2G9eas3RhHdyil6SV9wODx8JKFRAHb"
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-2.0.9.tgz_1477365346329_0.9757823366671801"
      },
      "directories": {}
    },
    "2.1.0": {
      "name": "karma-typescript",
      "version": "2.1.0",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "VilleSalonen"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "dependencies": {
        "amdefine": "1.0.0",
        "browserify": "^13.1.1",
        "gulp-util": "3.0.7",
        "istanbul": "0.4.3",
        "karma-coverage": "^1.1.1",
        "lodash.debounce": "^4.0.8",
        "lodash.union": "^4.6.0",
        "source-map": ">=0.5.6",
        "through2": "2.0.1",
        "tmp": "0.0.29"
      },
      "devDependencies": {
        "eslint": "^3.4.0"
      },
      "gitHead": "290e1b8ebd8a26bc729c3e97d5450eea1c6db0b2",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@2.1.0",
      "scripts": {},
      "_shasum": "adb23310b25830814120a5989dce3cb7177817b1",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "adb23310b25830814120a5989dce3cb7177817b1",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-2.1.0.tgz",
        "integrity": "sha512-Pd4P7UyNIk7qMLmqM0QpE733CNkVkIaaug4EvBeap866oUBq6Yid/CkDYPWpzO3vpZdaXv0St6j9IpV6kBlLmg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCcXRzCLjkXgNm4XNRJnWFYeiAGxuVISWQ6JHF6yljAPAIgNZePly/RxKN4QVT7lgs63M+V8T2pmoUmPBe7qdvzYW0="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-2.1.0.tgz_1478752473636_0.1789354111533612"
      },
      "directories": {}
    },
    "2.1.1": {
      "name": "karma-typescript",
      "version": "2.1.1",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "VilleSalonen"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "dependencies": {
        "amdefine": "1.0.0",
        "browserify": "^13.1.1",
        "gulp-util": "3.0.7",
        "istanbul": "0.4.3",
        "karma-coverage": "^1.1.1",
        "lodash.debounce": "^4.0.8",
        "lodash.union": "^4.6.0",
        "source-map": ">=0.5.6",
        "through2": "2.0.1",
        "tmp": "0.0.29"
      },
      "devDependencies": {
        "eslint": "^3.4.0"
      },
      "gitHead": "be5bfdb10a1bfa95b632d0197045d9208b09ec2f",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@2.1.1",
      "scripts": {},
      "_shasum": "0cb91a400f0608eac5013630a9f3d9f5d4bc7f74",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "0cb91a400f0608eac5013630a9f3d9f5d4bc7f74",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-2.1.1.tgz",
        "integrity": "sha512-+DAQv+/Cy5oGKxVVnL+J+TJzXWvDBSTbXI/hIzdqcUxC+7N7IDUxuVN42TjCqQpkdAV/ac/rMbQaAiVJvYi++Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEBHh8vQI7q/zTDhVCWuH8vFQLe6qQ8MXD2vC4OuFeVoAiBDjjMI6Yl/g8bKvvCxL1uQHGH0HR1/rjAmFMLjR4zoqA=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-2.1.1.tgz_1478828331766_0.2163653818424791"
      },
      "directories": {}
    },
    "2.1.2": {
      "name": "karma-typescript",
      "version": "2.1.2",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "VilleSalonen"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "dependencies": {
        "amdefine": "1.0.0",
        "browserify": "^13.1.1",
        "gulp-util": "3.0.7",
        "istanbul": "0.4.3",
        "karma-coverage": "^1.1.1",
        "lodash.debounce": "^4.0.8",
        "lodash.union": "^4.6.0",
        "source-map": ">=0.5.6",
        "through2": "2.0.1",
        "tmp": "0.0.29"
      },
      "devDependencies": {
        "eslint": "^3.4.0"
      },
      "gitHead": "fe3a215b38b8eb995b073907031a8f6ae81af4b2",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@2.1.2",
      "scripts": {},
      "_shasum": "7666b80414e8e907b2265f021d8934719ad97b0d",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "7666b80414e8e907b2265f021d8934719ad97b0d",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-2.1.2.tgz",
        "integrity": "sha512-mvjGvwUY4dUw5s0eXdZKXm/ANVzws6ctzzc+Oip21zvCTzRAhqAkCn3mm2fiN6mGhZd0afDHZ0cyHmQoELDRSg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIEND92qgt81xt74dBgn9hhXgf+cAy7HThDoXhiKc3lqpAiAOKZQ9+el3GBCh4pSLeAst3D8qWHVjAiY/fr44lUTxow=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-2.1.2.tgz_1478927448552_0.9276216852013022"
      },
      "directories": {}
    },
    "2.1.3": {
      "name": "karma-typescript",
      "version": "2.1.3",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "dependencies": {
        "amdefine": "1.0.0",
        "assert": "~1.3.0",
        "browser-resolve": "^1.11.0",
        "browserify": "^13.1.1",
        "browserify-zlib": "~0.1.2",
        "buffer": "^4.1.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "~1.0.0",
        "crypto-browserify": "^3.0.0",
        "detective": "^4.3.2",
        "domain-browser": "~1.1.0",
        "events": "~1.1.0",
        "gulp-util": "3.0.7",
        "https-browserify": "~0.0.0",
        "istanbul": "0.4.3",
        "karma-coverage": "^1.1.1",
        "lodash.clonedeep": "^4.5.0",
        "lodash.debounce": "^4.0.8",
        "lodash.union": "^4.6.0",
        "os-browserify": "~0.1.1",
        "path-browserify": "~0.0.0",
        "process": "~0.11.0",
        "punycode": "^1.3.2",
        "querystring-es3": "~0.2.0",
        "readable-stream": "^2.0.2",
        "source-map": ">=0.5.6",
        "stream-browserify": "^2.0.0",
        "stream-http": "^2.0.0",
        "string_decoder": "~0.10.0",
        "through2": "2.0.1",
        "timers-browserify": "^1.0.1",
        "tmp": "0.0.29",
        "tty-browserify": "~0.0.0",
        "url": "~0.11.0",
        "util": "~0.10.1",
        "vm-browserify": "~0.0.1"
      },
      "devDependencies": {
        "eslint": "^3.4.0"
      },
      "gitHead": "8c99ec582192fdc1df69871e095bc008cc733e5f",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@2.1.3",
      "scripts": {},
      "_shasum": "d113cf7c8e52420d285613b569eefdb283cdd6d3",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "d113cf7c8e52420d285613b569eefdb283cdd6d3",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-2.1.3.tgz",
        "integrity": "sha512-6eRIPsApgoczgcJAtR9cMGL0PwtwC4UIfGDCxx9rDeuN3z3CLq5FMJHgS9x6tWGugY2aLYZxnJmEkAqwXFYJ6A==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCNdrgjZbqyHXjGUMCPZlpH2XdX2h+n7k9p6pQPtj9W9AIgPTKn/WyynZiW1MRsiWIVe7mgDsBKa3JfGNpr2XBc4Wo="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-2.1.3.tgz_1479618085146_0.11595318419858813"
      },
      "directories": {}
    },
    "2.1.4": {
      "name": "karma-typescript",
      "version": "2.1.4",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "dependencies": {
        "amdefine": "1.0.0",
        "assert": "~1.3.0",
        "browser-resolve": "^1.11.0",
        "browserify": "^13.1.1",
        "browserify-zlib": "~0.1.2",
        "buffer": "^4.1.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "~1.0.0",
        "crypto-browserify": "^3.0.0",
        "detective": "^4.3.2",
        "domain-browser": "~1.1.0",
        "events": "~1.1.0",
        "gulp-util": "3.0.7",
        "https-browserify": "~0.0.0",
        "istanbul": "0.4.3",
        "karma-coverage": "^1.1.1",
        "lodash.clonedeep": "^4.5.0",
        "lodash.debounce": "^4.0.8",
        "lodash.union": "^4.6.0",
        "os-browserify": "~0.1.1",
        "path-browserify": "~0.0.0",
        "process": "~0.11.0",
        "punycode": "^1.3.2",
        "querystring-es3": "~0.2.0",
        "readable-stream": "^2.0.2",
        "source-map": ">=0.5.6",
        "stream-browserify": "^2.0.0",
        "stream-http": "^2.0.0",
        "string_decoder": "~0.10.0",
        "through2": "2.0.1",
        "timers-browserify": "^1.0.1",
        "tmp": "0.0.29",
        "tty-browserify": "~0.0.0",
        "url": "~0.11.0",
        "util": "~0.10.1",
        "vm-browserify": "~0.0.1"
      },
      "devDependencies": {
        "eslint": "^3.4.0"
      },
      "gitHead": "e83b3c294dcda77be57a333e6790642933f684b4",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@2.1.4",
      "scripts": {},
      "_shasum": "2b6d4ffde3817da209429afc665374c7ca203ef0",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "2b6d4ffde3817da209429afc665374c7ca203ef0",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-2.1.4.tgz",
        "integrity": "sha512-DjymOH5JNu7EDHiVKRhHkWALwfGRmxh2nMGCW5/xzJph9Y9oKM7WTORb0qVS0ruMbAe0VwvR5h75FcXbOeofkg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHHG6xzEkRM0YK5hVAmynKPrn2SB1Ny9GwfQoe6gPB2+AiEArl1WtsspY+mcNExYWrLMLi9Vazuo1MeRRjz7QoPrM4A="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-2.1.4.tgz_1480224066789_0.2454398493282497"
      },
      "directories": {}
    },
    "2.1.5": {
      "name": "karma-typescript",
      "version": "2.1.5",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "dependencies": {
        "amdefine": "1.0.0",
        "assert": "~1.3.0",
        "browser-resolve": "^1.11.0",
        "browserify": "^13.1.1",
        "browserify-zlib": "~0.1.2",
        "buffer": "^4.1.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "~1.0.0",
        "crypto-browserify": "^3.0.0",
        "detective": "^4.3.2",
        "domain-browser": "~1.1.0",
        "events": "~1.1.0",
        "gulp-util": "3.0.7",
        "https-browserify": "~0.0.0",
        "istanbul": "0.4.3",
        "karma-coverage": "^1.1.1",
        "lodash.clonedeep": "^4.5.0",
        "lodash.debounce": "^4.0.8",
        "lodash.union": "^4.6.0",
        "os-browserify": "~0.1.1",
        "path-browserify": "~0.0.0",
        "process": "~0.11.0",
        "punycode": "^1.3.2",
        "querystring-es3": "~0.2.0",
        "readable-stream": "^2.0.2",
        "source-map": ">=0.5.6",
        "stream-browserify": "^2.0.0",
        "stream-http": "^2.0.0",
        "string_decoder": "~0.10.0",
        "through2": "2.0.1",
        "timers-browserify": "^1.0.1",
        "tmp": "0.0.29",
        "tty-browserify": "~0.0.0",
        "url": "~0.11.0",
        "util": "~0.10.1",
        "vm-browserify": "~0.0.1"
      },
      "devDependencies": {
        "eslint": "^3.4.0"
      },
      "gitHead": "978650ef5ea14697f51bcba6e3e84bdf8f0565df",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@2.1.5",
      "scripts": {},
      "_shasum": "4aa0e0308496ed3afeb3b7233639c68c40144675",
      "_from": ".",
      "_npmVersion": "3.10.3",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "4aa0e0308496ed3afeb3b7233639c68c40144675",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-2.1.5.tgz",
        "integrity": "sha512-orquVSZihRMieJ2mNeZdPZhPpLMO93jOSFJG2Yxh/sAxdYTw6Bgh2/+2RyUH4qzOJNIVpQWbznt4jUUd7W0oGg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBx4JqMo6JsWDQMWyjYtkVgEXa7HJzTiB0ilB7EYwzU3AiEA14o/31Cy2lHyZVt56N9lAvZ7IafdqbO2QU4i2JhctZk="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-2.1.5.tgz_1482115513073_0.8336278351489455"
      },
      "directories": {}
    },
    "2.1.6": {
      "name": "karma-typescript",
      "version": "2.1.6",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "dependencies": {
        "acorn": "^4.0.4",
        "amdefine": "1.0.0",
        "assert": "~1.3.0",
        "browser-resolve": "^1.11.0",
        "browserify": "^13.1.1",
        "browserify-zlib": "~0.1.2",
        "buffer": "^4.1.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "~1.0.0",
        "crypto-browserify": "^3.0.0",
        "detective": "^4.3.2",
        "domain-browser": "~1.1.0",
        "events": "~1.1.0",
        "glob": "^7.1.1",
        "gulp-util": "3.0.7",
        "https-browserify": "~0.0.0",
        "istanbul": "0.4.3",
        "karma-coverage": "^1.1.1",
        "lodash.clonedeep": "^4.5.0",
        "lodash.debounce": "^4.0.8",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.union": "^4.6.0",
        "os-browserify": "~0.1.1",
        "path-browserify": "~0.0.0",
        "process": "~0.11.0",
        "punycode": "^1.3.2",
        "querystring-es3": "~0.2.0",
        "readable-stream": "^2.0.2",
        "source-map": ">=0.5.6",
        "stream-browserify": "^2.0.0",
        "stream-http": "^2.0.0",
        "string_decoder": "~0.10.0",
        "through2": "2.0.1",
        "timers-browserify": "^1.0.1",
        "tmp": "0.0.29",
        "tty-browserify": "~0.0.0",
        "url": "~0.11.0",
        "util": "~0.10.1",
        "vm-browserify": "~0.0.1"
      },
      "devDependencies": {
        "eslint": "^3.4.0"
      },
      "gitHead": "736b56d02fa86a7e01cc3a6028a6d4918c7436bc",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@2.1.6",
      "scripts": {},
      "_shasum": "57f3fdf1d8fff375d88686258b6cba537cbad0c6",
      "_from": ".",
      "_npmVersion": "4.0.5",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "57f3fdf1d8fff375d88686258b6cba537cbad0c6",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-2.1.6.tgz",
        "integrity": "sha512-fKm1+CcKYnDSXjQZ0JBD8NNqldZyFIFXTP86LwI2cGdELgz7fH4R2OMkCE5R46yyboZ4raDe5AWkLzMmDcRVMQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIHQSaRP31tUqToEjMzWmaegBE00TlQL0oBbTU6EknMwbAiAxWlkC13Hj6bzwhU4ycxPq3nz4gTnBIhsVMIQkIEGpdg=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-2.1.6.tgz_1484024636481_0.28227637335658073"
      },
      "directories": {}
    },
    "2.1.7": {
      "name": "karma-typescript",
      "version": "2.1.7",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "fchiumeo"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint ./lib/*.js",
        "test": "./ci/run.sh",
        "test:unix": "./ci/install.sh && ./ci/run.sh",
        "test:windows": ".\\ci\\install.bat & .\\ci\\run.bat"
      },
      "dependencies": {
        "acorn": "^4.0.4",
        "amdefine": "1.0.0",
        "assert": "~1.3.0",
        "browser-resolve": "^1.11.0",
        "browserify": "^13.1.1",
        "browserify-zlib": "~0.1.2",
        "buffer": "^4.1.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "~1.0.0",
        "crypto-browserify": "^3.0.0",
        "detective": "^4.3.2",
        "domain-browser": "~1.1.0",
        "es6-promise": "^4.0.5",
        "events": "~1.1.0",
        "glob": "^7.1.1",
        "gulp-util": "3.0.7",
        "https-browserify": "~0.0.0",
        "istanbul": "0.4.5",
        "karma-coverage": "^1.1.1",
        "lodash.clonedeep": "^4.5.0",
        "lodash.debounce": "^4.0.8",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.union": "^4.6.0",
        "os-browserify": "~0.1.1",
        "path-browserify": "~0.0.0",
        "process": "~0.11.0",
        "punycode": "^1.3.2",
        "querystring-es3": "~0.2.0",
        "readable-stream": "^2.0.2",
        "remap-istanbul": "^0.8.4",
        "source-map": ">=0.5.6",
        "stream-browserify": "^2.0.0",
        "stream-http": "^2.0.0",
        "string_decoder": "~0.10.0",
        "through2": "2.0.1",
        "timers-browserify": "^1.0.1",
        "tmp": "0.0.29",
        "tty-browserify": "~0.0.0",
        "url": "~0.11.0",
        "util": "~0.10.1",
        "vm-browserify": "~0.0.1"
      },
      "devDependencies": {
        "cli-clear": "^1.0.4",
        "copy": "^0.3.0",
        "del": "^2.2.2",
        "eslint": "^3.4.0",
        "gulp": "^3.9.1",
        "gulp-util": "^3.0.7",
        "phantomjs-prebuilt": "^2.1.14"
      },
      "gitHead": "deb61b33526508626f201eabd1cdab866c8d8882",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@2.1.7",
      "_shasum": "5e49a31cf8ef41ac69c439b569a24f0ad9a15973",
      "_from": ".",
      "_npmVersion": "4.0.5",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "5e49a31cf8ef41ac69c439b569a24f0ad9a15973",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-2.1.7.tgz",
        "integrity": "sha512-SvG29PvE0FpS/wqGyok0+UOj48ph+fALmDfH6p/uzRTLEmO24yMoVmfGtaPjh8CNg/OTnFJE5PG3ajGpiUae7w==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCeI4i6K156n03vhLHD+RFENT6O+Ue9kAzJZsy8YdL7DAIgdqfwY9QTzC59XEtfyA2Jjf2EJoI2YYPe3IVgeqY1nmA="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-2.1.7.tgz_1485448736272_0.9355554131325334"
      },
      "directories": {}
    },
    "3.0.0-beta.1": {
      "name": "karma-typescript",
      "version": "3.0.0-beta.1",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "sir-marc"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "build": "tsc --rootDir ./src",
        "build:ci": "tsc --noEmit --rootDir ./src",
        "build:watch": "tsc -w --rootDir ./src",
        "lint": "eslint ./lib/*.js && tslint --project tsconfig.json",
        "test": "./ci/run.sh",
        "test:unix": "./ci/install.sh && ./ci/run.sh",
        "test:windows": ".\\ci\\install.bat & .\\ci\\run.bat"
      },
      "dependencies": {
        "acorn": "^4.0.4",
        "amdefine": "1.0.0",
        "assert": "~1.3.0",
        "async": "^2.1.4",
        "browser-resolve": "^1.11.0",
        "browserify": "^13.1.1",
        "browserify-zlib": "~0.1.2",
        "buffer": "^4.1.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "~1.0.0",
        "crypto-browserify": "^3.0.0",
        "domain-browser": "~1.1.0",
        "es6-promise": "^4.0.5",
        "events": "~1.1.0",
        "glob": "^7.1.1",
        "gulp-util": "3.0.7",
        "https-browserify": "~0.0.0",
        "istanbul": "0.4.5",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.4",
        "magic-string": "^0.19.0",
        "minimatch": "^3.0.3",
        "os-browserify": "~0.1.1",
        "path-browserify": "~0.0.0",
        "process": "~0.11.0",
        "punycode": "^1.3.2",
        "querystring-es3": "~0.2.0",
        "readable-stream": "^2.0.2",
        "remap-istanbul": "^0.8.4",
        "source-map": ">=0.5.6",
        "stream-browserify": "^2.0.0",
        "stream-http": "^2.0.0",
        "string_decoder": "~0.10.0",
        "through2": "2.0.1",
        "timers-browserify": "^1.0.1",
        "tmp": "0.0.29",
        "tty-browserify": "~0.0.0",
        "url": "~0.11.0",
        "util": "~0.10.1",
        "vm-browserify": "~0.0.1"
      },
      "devDependencies": {
        "@types/acorn": "^4.0.0",
        "@types/async": "^2.0.38",
        "@types/browser-resolve": "0.0.4",
        "@types/glob": "^5.0.30",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^0.13.33",
        "@types/lodash": "^4.14.52",
        "@types/minimatch": "^2.0.29",
        "@types/node": "^7.0.5",
        "@types/tmp": "0.0.32",
        "cli-clear": "^1.0.4",
        "copy": "^0.3.0",
        "del": "^2.2.2",
        "eslint": "^3.4.0",
        "gulp": "^3.9.1",
        "gulp-util": "^3.0.7",
        "tslint": "^4.4.2",
        "tslint-eslint-rules": "^3.3.0",
        "typescript": "latest"
      },
      "gitHead": "3ffaf928494ae5db9458188189a8da053befbd64",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@3.0.0-beta.1",
      "_shasum": "c784abe21d27385fb6563e8ea7a4cf25462e2bec",
      "_from": ".",
      "_npmVersion": "4.0.5",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "c784abe21d27385fb6563e8ea7a4cf25462e2bec",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-3.0.0-beta.1.tgz",
        "integrity": "sha512-hDukFyLlKuTs1PhBxxAQOC97GY4eSG8tM7hAg3Kr0FrAoD7DZWpFgtQP50DHhF0mAgqVMKHZTd3bK2lsq0JYAA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDiiigtEXY0OSsb/30evWT+85OaaRHrqFsmc+nFCenYlgIgXRctlw9/NEw+YyI5Vuo+6+GrryQ8yDGrpa7wQlQJFww="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-3.0.0-beta.1.tgz_1488691781549_0.6588439017068595"
      },
      "directories": {}
    },
    "3.0.0-beta.2": {
      "name": "karma-typescript",
      "version": "3.0.0-beta.2",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "sir-marc"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "build": "tsc --rootDir ./src",
        "build:ci": "tsc --noEmit --rootDir ./src",
        "build:watch": "tsc -w --rootDir ./src",
        "lint": "eslint ./lib/*.js && tslint --project tsconfig.json",
        "test": "./ci/run.sh",
        "test:unix": "./ci/install.sh && ./ci/run.sh",
        "test:windows": ".\\ci\\install.bat & .\\ci\\run.bat"
      },
      "dependencies": {
        "acorn": "^4.0.4",
        "amdefine": "1.0.0",
        "assert": "~1.3.0",
        "async": "^2.1.4",
        "browser-resolve": "^1.11.0",
        "browserify": "^13.1.1",
        "browserify-zlib": "~0.1.2",
        "buffer": "^4.1.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "~1.0.0",
        "crypto-browserify": "^3.0.0",
        "diff": "^3.2.0",
        "domain-browser": "~1.1.0",
        "es6-promise": "^4.0.5",
        "events": "~1.1.0",
        "glob": "^7.1.1",
        "gulp-util": "3.0.7",
        "https-browserify": "~0.0.0",
        "istanbul": "0.4.5",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.4",
        "magic-string": "^0.19.0",
        "minimatch": "^3.0.3",
        "os-browserify": "~0.1.1",
        "pad": "^1.1.0",
        "path-browserify": "~0.0.0",
        "process": "~0.11.0",
        "punycode": "^1.3.2",
        "querystring-es3": "~0.2.0",
        "readable-stream": "^2.0.2",
        "remap-istanbul": "^0.8.4",
        "source-map": ">=0.5.6",
        "stream-browserify": "^2.0.0",
        "stream-http": "^2.0.0",
        "string_decoder": "~0.10.0",
        "through2": "2.0.1",
        "timers-browserify": "^1.0.1",
        "tmp": "0.0.29",
        "tty-browserify": "~0.0.0",
        "url": "~0.11.0",
        "util": "~0.10.1",
        "vm-browserify": "~0.0.1"
      },
      "devDependencies": {
        "@types/acorn": "^4.0.0",
        "@types/async": "^2.0.38",
        "@types/browser-resolve": "0.0.4",
        "@types/diff": "0.0.31",
        "@types/glob": "^5.0.30",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^0.13.33",
        "@types/lodash": "^4.14.52",
        "@types/minimatch": "^2.0.29",
        "@types/node": "^7.0.5",
        "@types/pad": "^1.0.0",
        "@types/tmp": "0.0.32",
        "cli-clear": "^1.0.4",
        "copy": "^0.3.0",
        "del": "^2.2.2",
        "eslint": "^3.4.0",
        "gulp": "^3.9.1",
        "gulp-util": "^3.0.7",
        "tslint": "^4.4.2",
        "tslint-eslint-rules": "^3.3.0",
        "typescript": "latest"
      },
      "gitHead": "59f0ca31f64e2086a83a31c8987d1645a1c82963",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@3.0.0-beta.2",
      "_shasum": "f5c59a9dd647426f488ac46f4cc944805284f005",
      "_from": ".",
      "_npmVersion": "4.0.5",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "f5c59a9dd647426f488ac46f4cc944805284f005",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-3.0.0-beta.2.tgz",
        "integrity": "sha512-uOtIp/BjBwHqzAdTlx/P1x1H/mWgnExjlwm1m+7bXxbiVhim2DEp9ltuvcDSK07x/55q8duZ8z+xjU9YkW4V2Q==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCICi3AsqvNNpjZYgOF+o+RVrDt9WSD2UVd1dEHgLiCdPuAiBa/1IZbG8suZN54dXyghDknwBresgn9zDvgxO3zHkqsA=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-3.0.0-beta.2.tgz_1489358105702_0.31161309662275016"
      },
      "directories": {}
    },
    "3.0.0": {
      "name": "karma-typescript",
      "version": "3.0.0",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "glennvorhes"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "build": "tsc --rootDir ./src",
        "build:ci": "tsc --noEmit --rootDir ./src",
        "build:watch": "tsc -w --rootDir ./src",
        "lint": "eslint ./lib/*.js && tslint --project tsconfig.json",
        "test": "./ci/run.sh",
        "test:unix": "./ci/install.sh && ./ci/run.sh",
        "test:windows": ".\\ci\\install.bat & .\\ci\\run.bat"
      },
      "dependencies": {
        "acorn": "^4.0.4",
        "amdefine": "1.0.0",
        "assert": "~1.3.0",
        "async": "^2.1.4",
        "base64-js": "^1.0.2",
        "browser-resolve": "^1.11.0",
        "browserify-zlib": "~0.1.2",
        "buffer": "^4.1.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "~1.0.0",
        "crypto-browserify": "^3.0.0",
        "diff": "^3.2.0",
        "domain-browser": "~1.1.0",
        "es6-promise": "^4.0.5",
        "events": "~1.1.0",
        "glob": "^7.1.1",
        "gulp-util": "3.0.7",
        "https-browserify": "~0.0.0",
        "ieee754": "^1.1.4",
        "isarray": "^1.0.0",
        "istanbul": "0.4.5",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.4",
        "log4js": "^1.1.1",
        "magic-string": "^0.19.0",
        "minimatch": "^3.0.3",
        "os-browserify": "~0.1.1",
        "pad": "^1.1.0",
        "path-browserify": "~0.0.0",
        "process": "~0.11.0",
        "punycode": "^1.3.2",
        "querystring-es3": "~0.2.0",
        "readable-stream": "^2.0.2",
        "remap-istanbul": "^0.8.4",
        "source-map": ">=0.5.6",
        "stream-browserify": "^2.0.0",
        "stream-http": "^2.0.0",
        "string_decoder": "~0.10.0",
        "through2": "2.0.1",
        "timers-browserify": "^1.0.1",
        "tmp": "0.0.29",
        "tty-browserify": "~0.0.0",
        "url": "~0.11.0",
        "util": "~0.10.1",
        "vm-browserify": "~0.0.1"
      },
      "devDependencies": {
        "@types/acorn": "^4.0.0",
        "@types/async": "^2.0.38",
        "@types/browser-resolve": "0.0.4",
        "@types/diff": "0.0.31",
        "@types/glob": "^5.0.30",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^0.13.33",
        "@types/lodash": "^4.14.59",
        "@types/minimatch": "^2.0.29",
        "@types/node": "^7.0.5",
        "@types/pad": "^1.0.0",
        "@types/tmp": "0.0.32",
        "cli-clear": "^1.0.4",
        "copy": "^0.3.0",
        "del": "^2.2.2",
        "eslint": "^3.4.0",
        "gulp": "^3.9.1",
        "gulp-util": "^3.0.7",
        "tslint": "^4.4.2",
        "tslint-eslint-rules": "^3.3.0",
        "typescript": "latest"
      },
      "gitHead": "2b5f3a9f3ceb36aff97d3ea80ca42f134c1cf51b",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@3.0.0",
      "_shasum": "517abd4fa2e36fdab4f191975226b58e1de5a76a",
      "_from": ".",
      "_npmVersion": "4.0.5",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "517abd4fa2e36fdab4f191975226b58e1de5a76a",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-3.0.0.tgz",
        "integrity": "sha512-gULB7T4Z5MNFTMc0Qs2Y6oTc1qBcO6wGO9oVtjv+Q7/CyLvsIhSGZOut7uhXFZxQWohXRjPM6sS1fRERGfJ/og==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFfm3SAT9CxLt341ovpOgCPBliuJjvhSV7gqK4sHq86eAiBSQh6nl3bQAKvF86+btYdmnIRuFzAtFBcLAHU6cneLRQ=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-18-east.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-3.0.0.tgz_1491161053543_0.2673556599766016"
      },
      "directories": {}
    },
    "3.0.1": {
      "name": "karma-typescript",
      "version": "3.0.1",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "glennvorhes"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "build": "tsc --rootDir ./src",
        "build:ci": "tsc --noEmit --rootDir ./src",
        "build:watch": "tsc -w --rootDir ./src",
        "lint": "eslint ./lib/*.js && tslint --project tsconfig.json",
        "test": "./ci/run.sh",
        "test:unix": "./ci/install.sh && ./ci/run.sh",
        "test:windows": ".\\ci\\install.bat & .\\ci\\run.bat",
        "test:unit": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^4.0.4",
        "amdefine": "1.0.0",
        "assert": "~1.3.0",
        "async": "^2.1.4",
        "base64-js": "^1.0.2",
        "browser-resolve": "^1.11.0",
        "browserify-zlib": "~0.1.2",
        "buffer": "^4.1.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "~1.0.0",
        "crypto-browserify": "^3.0.0",
        "diff": "^3.2.0",
        "domain-browser": "~1.1.0",
        "es6-promise": "^4.0.5",
        "events": "~1.1.0",
        "glob": "^7.1.1",
        "gulp-util": "3.0.7",
        "https-browserify": "~0.0.0",
        "ieee754": "^1.1.4",
        "isarray": "^1.0.0",
        "istanbul": "0.4.5",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.4",
        "log4js": "^1.1.1",
        "magic-string": "^0.19.0",
        "minimatch": "^3.0.3",
        "os-browserify": "~0.1.1",
        "pad": "^1.1.0",
        "path-browserify": "~0.0.0",
        "process": "~0.11.0",
        "punycode": "^1.3.2",
        "querystring-es3": "~0.2.0",
        "readable-stream": "^2.0.2",
        "remap-istanbul": "^0.8.4",
        "source-map": ">=0.5.6",
        "stream-browserify": "^2.0.0",
        "stream-http": "^2.0.0",
        "string_decoder": "~0.10.0",
        "through2": "2.0.1",
        "timers-browserify": "^1.0.1",
        "tmp": "0.0.29",
        "tty-browserify": "~0.0.0",
        "url": "~0.11.0",
        "util": "~0.10.1",
        "vm-browserify": "~0.0.1"
      },
      "devDependencies": {
        "@types/acorn": "^4.0.0",
        "@types/async": "^2.0.38",
        "@types/browser-resolve": "0.0.4",
        "@types/diff": "0.0.31",
        "@types/glob": "^5.0.30",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^0.13.33",
        "@types/lodash": "^4.14.59",
        "@types/minimatch": "^2.0.29",
        "@types/mock-require": "^1.3.3",
        "@types/node": "^7.0.5",
        "@types/pad": "^1.0.0",
        "@types/sinon": "^2.1.2",
        "@types/tape": "^4.2.29",
        "@types/tmp": "0.0.32",
        "cli-clear": "^1.0.4",
        "copy": "^0.3.0",
        "del": "^2.2.2",
        "eslint": "^3.4.0",
        "faucet": "0.0.1",
        "gulp": "^3.9.1",
        "gulp-util": "^3.0.7",
        "istanbul": "^1.1.0-alpha.1",
        "mock-require": "^2.0.2",
        "sinon": "^2.1.0",
        "tape": "^4.6.3",
        "tslint": "^4.4.2",
        "tslint-eslint-rules": "^3.3.0",
        "typescript": "latest"
      },
      "gitHead": "ad276adc19e5722fd7185aa03cda166299dbc6e5",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@3.0.1",
      "_shasum": "64619473a68973773ec3132f96be06da7428427e",
      "_from": ".",
      "_npmVersion": "4.0.5",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "64619473a68973773ec3132f96be06da7428427e",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-3.0.1.tgz",
        "integrity": "sha512-9GGyQbmrsUUBpnbCZ/h7SfzTesONM1PUzJ5tKN1uoi940prNbrhFvLjmwiLZV0S5Cm0aOMy+AT7tVwU184u7/g==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEoHZRecTS9ERbpkrDsfV+RYFAZ1T0YkICIKHy3mvv0mAiEAndSgfNH4d2/ahXz2cYhnULBPpEWFk0/MpckH90E14m0="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-3.0.1.tgz_1492694422058_0.1734098808374256"
      },
      "directories": {}
    },
    "3.0.2": {
      "name": "karma-typescript",
      "version": "3.0.2",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "yugi03"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "build": "tsc --rootDir ./src",
        "build:ci": "tsc --noEmit --rootDir ./src",
        "build:watch": "tsc -w --rootDir ./src",
        "lint": "eslint ./lib/*.js && tslint --project tsconfig.json",
        "test": "./ci/run.sh",
        "test:unix": "./ci/install.sh && ./ci/run.sh",
        "test:windows": ".\\ci\\install.bat & .\\ci\\run.bat",
        "test:unit": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^4.0.4",
        "amdefine": "1.0.0",
        "assert": "~1.3.0",
        "async": "^2.1.4",
        "base64-js": "^1.0.2",
        "browser-resolve": "^1.11.0",
        "browserify-zlib": "~0.1.2",
        "buffer": "^4.1.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "~1.0.0",
        "crypto-browserify": "^3.0.0",
        "diff": "^3.2.0",
        "domain-browser": "~1.1.0",
        "es6-promise": "^4.0.5",
        "events": "~1.1.0",
        "glob": "^7.1.1",
        "gulp-util": "3.0.7",
        "https-browserify": "~0.0.0",
        "ieee754": "^1.1.4",
        "isarray": "^1.0.0",
        "istanbul": "0.4.5",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.4",
        "log4js": "^1.1.1",
        "magic-string": "^0.19.0",
        "minimatch": "^3.0.3",
        "os-browserify": "~0.1.1",
        "pad": "^1.1.0",
        "path-browserify": "~0.0.0",
        "process": "~0.11.0",
        "punycode": "^1.3.2",
        "querystring-es3": "~0.2.0",
        "readable-stream": "^2.0.2",
        "remap-istanbul": "^0.8.4",
        "source-map": ">=0.5.6",
        "stream-browserify": "^2.0.0",
        "stream-http": "^2.0.0",
        "string_decoder": "~0.10.0",
        "through2": "2.0.1",
        "timers-browserify": "^1.0.1",
        "tmp": "0.0.29",
        "tty-browserify": "~0.0.0",
        "url": "~0.11.0",
        "util": "~0.10.1",
        "vm-browserify": "~0.0.1"
      },
      "devDependencies": {
        "@types/acorn": "^4.0.0",
        "@types/async": "^2.0.38",
        "@types/browser-resolve": "0.0.4",
        "@types/diff": "0.0.31",
        "@types/glob": "^5.0.30",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^0.13.33",
        "@types/lodash": "^4.14.59",
        "@types/minimatch": "^2.0.29",
        "@types/mock-require": "^1.3.3",
        "@types/node": "^7.0.5",
        "@types/pad": "^1.0.0",
        "@types/sinon": "^2.1.2",
        "@types/tape": "^4.2.29",
        "@types/tmp": "0.0.32",
        "cli-clear": "^1.0.4",
        "copy": "^0.3.0",
        "del": "^2.2.2",
        "eslint": "^3.4.0",
        "faucet": "0.0.1",
        "gulp": "^3.9.1",
        "gulp-util": "^3.0.7",
        "istanbul": "^1.1.0-alpha.1",
        "mock-require": "^2.0.2",
        "sinon": "^2.1.0",
        "tape": "^4.6.3",
        "tslint": "^4.4.2",
        "tslint-eslint-rules": "^3.3.0",
        "typescript": "latest"
      },
      "collective": {
        "type": "opencollective",
        "url": "https://opencollective.com/karma-typescript",
        "logo": "https://opencollective.com/opencollective/logo.txt"
      },
      "gitHead": "59f2714f9a2351a4c03fb6992dce8e5cbec55059",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@3.0.2",
      "_shasum": "992a62bec1cd48131dbe022fd01ea19a0338b090",
      "_from": ".",
      "_npmVersion": "4.0.5",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "992a62bec1cd48131dbe022fd01ea19a0338b090",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-3.0.2.tgz",
        "integrity": "sha512-CSYSELu/951nM5ExTN0CAbCouAXbEw6MtTGDXVgm/0IQim+hnuNayiHHjOZtaMqXQUEBJtBWITKRwSD6OYRzxQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCkWfbgeNI5+8vKvfZ3Ex0nq+dlF/R7K17JyHHJMSGRSgIhAK8JSMpB6xavTQpvPXnpmHw+ziijLilho7oQ9EbPz8jk"
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "packages-12-west.internal.npmjs.com",
        "tmp": "tmp/karma-typescript-3.0.2.tgz_1495046615551_0.3414610158652067"
      },
      "directories": {}
    },
    "3.0.3": {
      "name": "karma-typescript",
      "version": "3.0.3",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "yugi03"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "build": "tsc --rootDir ./src",
        "build:ci": "tsc --noEmit --rootDir ./src",
        "build:watch": "tsc -w --rootDir ./src",
        "lint": "eslint ./lib/*.js && tslint --project tsconfig.json",
        "test": "./ci/run.sh",
        "test:unix": "./ci/install.sh && ./ci/run.sh",
        "test:windows": ".\\ci\\install.bat & .\\ci\\run.bat",
        "test:unit": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^4.0.4",
        "amdefine": "1.0.0",
        "assert": "~1.3.0",
        "async": "^2.1.4",
        "base64-js": "^1.0.2",
        "browser-resolve": "^1.11.0",
        "browserify-zlib": "~0.1.2",
        "buffer": "^4.1.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "~1.0.0",
        "crypto-browserify": "^3.0.0",
        "diff": "^3.2.0",
        "domain-browser": "~1.1.0",
        "es6-promise": "^4.0.5",
        "events": "~1.1.0",
        "glob": "^7.1.1",
        "gulp-util": "3.0.7",
        "https-browserify": "~0.0.0",
        "ieee754": "^1.1.4",
        "isarray": "^1.0.0",
        "istanbul": "0.4.5",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.4",
        "log4js": "^1.1.1",
        "magic-string": "^0.19.0",
        "minimatch": "^3.0.3",
        "os-browserify": "~0.1.1",
        "pad": "^1.1.0",
        "path-browserify": "~0.0.0",
        "process": "~0.11.0",
        "punycode": "^1.3.2",
        "querystring-es3": "~0.2.0",
        "readable-stream": "^2.0.2",
        "remap-istanbul": "^0.8.4",
        "source-map": ">=0.5.6",
        "stream-browserify": "^2.0.0",
        "stream-http": "^2.0.0",
        "string_decoder": "~0.10.0",
        "through2": "2.0.1",
        "timers-browserify": "^1.0.1",
        "tmp": "0.0.29",
        "tty-browserify": "~0.0.0",
        "url": "~0.11.0",
        "util": "~0.10.1",
        "vm-browserify": "~0.0.1"
      },
      "devDependencies": {
        "@types/acorn": "^4.0.0",
        "@types/async": "^2.0.38",
        "@types/browser-resolve": "0.0.4",
        "@types/diff": "0.0.31",
        "@types/glob": "^5.0.30",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^0.13.33",
        "@types/lodash": "^4.14.59",
        "@types/minimatch": "^2.0.29",
        "@types/mock-require": "^1.3.3",
        "@types/node": "^7.0.5",
        "@types/pad": "^1.0.0",
        "@types/sinon": "^2.1.2",
        "@types/tape": "^4.2.29",
        "@types/tmp": "0.0.32",
        "cli-clear": "^1.0.4",
        "copy": "^0.3.0",
        "del": "^2.2.2",
        "eslint": "^3.4.0",
        "faucet": "0.0.1",
        "gulp": "^3.9.1",
        "gulp-util": "^3.0.7",
        "istanbul": "^1.1.0-alpha.1",
        "mock-require": "^2.0.2",
        "sinon": "^2.1.0",
        "tape": "^4.6.3",
        "tslint": "^4.4.2",
        "tslint-eslint-rules": "^3.3.0",
        "typescript": "latest"
      },
      "collective": {
        "type": "opencollective",
        "url": "https://opencollective.com/karma-typescript",
        "logo": "https://opencollective.com/opencollective/logo.txt"
      },
      "gitHead": "15d13e00aaa69bdfdf9dc05f6d220665f5000678",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@3.0.3",
      "_shasum": "737724f5a8c93b7b93f7a2598129d867937a61ce",
      "_from": ".",
      "_npmVersion": "4.0.5",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "737724f5a8c93b7b93f7a2598129d867937a61ce",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-3.0.3.tgz",
        "integrity": "sha512-4LrfwIUuxJ0AvwrisP8kovi+q3Urpei293PdJJajnB5MJ6tIfUlPBJUp0ep1HjmGBVYhnqnCuFb2SMXM3OuEAw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIDMC8HJ26ilvPNwbwGfOSBGAGhQDhJ7zGDn3h8SetBoQAiEA0mddM92IoCWsMIzmLB1uWATN+h0bMra8cKha2PT3oJA="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript-3.0.3.tgz_1496520767650_0.3725719666108489"
      },
      "directories": {}
    },
    "3.0.4": {
      "name": "karma-typescript",
      "version": "3.0.4",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "yugi03"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "build": "tsc --rootDir ./src",
        "build:ci": "tsc --noEmit --rootDir ./src",
        "build:watch": "tsc -w --rootDir ./src",
        "lint": "eslint ./lib/*.js && tslint --project tsconfig.json",
        "test": "./ci/run.sh",
        "test:unix": "./ci/install.sh && ./ci/run.sh",
        "test:windows": ".\\ci\\install.bat & .\\ci\\run.bat",
        "test:unit": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^4.0.4",
        "amdefine": "1.0.0",
        "assert": "~1.3.0",
        "async": "^2.1.4",
        "base64-js": "^1.0.2",
        "browser-resolve": "^1.11.0",
        "browserify-zlib": "~0.1.2",
        "buffer": "^4.1.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "~1.0.0",
        "crypto-browserify": "^3.0.0",
        "diff": "^3.2.0",
        "domain-browser": "~1.1.0",
        "es6-promise": "^4.0.5",
        "events": "~1.1.0",
        "glob": "^7.1.1",
        "gulp-util": "3.0.7",
        "https-browserify": "~0.0.0",
        "ieee754": "^1.1.4",
        "isarray": "^1.0.0",
        "istanbul": "0.4.5",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.4",
        "log4js": "^1.1.1",
        "magic-string": "^0.19.0",
        "minimatch": "^3.0.3",
        "os-browserify": "~0.1.1",
        "pad": "^1.1.0",
        "path-browserify": "~0.0.0",
        "process": "~0.11.0",
        "punycode": "^1.3.2",
        "querystring-es3": "~0.2.0",
        "readable-stream": "^2.0.2",
        "remap-istanbul": "^0.8.4",
        "source-map": ">=0.5.6",
        "stream-browserify": "^2.0.0",
        "stream-http": "^2.0.0",
        "string_decoder": "~0.10.0",
        "through2": "2.0.1",
        "timers-browserify": "^1.0.1",
        "tmp": "0.0.29",
        "tty-browserify": "~0.0.0",
        "url": "~0.11.0",
        "util": "~0.10.1",
        "vm-browserify": "~0.0.1"
      },
      "devDependencies": {
        "@types/acorn": "^4.0.0",
        "@types/async": "^2.0.38",
        "@types/browser-resolve": "0.0.4",
        "@types/diff": "0.0.31",
        "@types/glob": "^5.0.30",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^0.13.33",
        "@types/lodash": "^4.14.59",
        "@types/minimatch": "^2.0.29",
        "@types/mock-require": "^1.3.3",
        "@types/node": "^7.0.5",
        "@types/pad": "^1.0.0",
        "@types/sinon": "^2.1.2",
        "@types/tape": "^4.2.29",
        "@types/tmp": "0.0.32",
        "cli-clear": "^1.0.4",
        "copy": "^0.3.0",
        "del": "^2.2.2",
        "eslint": "^3.4.0",
        "faucet": "0.0.1",
        "gulp": "^3.9.1",
        "gulp-util": "^3.0.7",
        "istanbul": "^1.1.0-alpha.1",
        "mock-require": "^2.0.2",
        "sinon": "^2.1.0",
        "tape": "^4.6.3",
        "tslint": "^4.4.2",
        "tslint-eslint-rules": "^3.3.0",
        "typescript": "latest"
      },
      "collective": {
        "type": "opencollective",
        "url": "https://opencollective.com/karma-typescript",
        "logo": "https://opencollective.com/opencollective/logo.txt"
      },
      "gitHead": "717a6c6ce31b99a92bfd5ce1eedea8dd059d5b08",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@3.0.4",
      "_shasum": "9cdeeeddd1671693440c34ec62aba2d6ff9e4b05",
      "_from": ".",
      "_npmVersion": "4.0.5",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "9cdeeeddd1671693440c34ec62aba2d6ff9e4b05",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-3.0.4.tgz",
        "integrity": "sha512-gh9QwZ9FHsTk5r3JLZvXHHnub1BHrh609EaoMVTtTLS946ThQTkn/COXlGs/jjp3vCRqISdv3jO4DqlVRAMjXA==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCICjiba0tVK45qtuYSZZiDI/NtbeVs0sEqr+MRtYttzaCAiEAjmdq77VJKPRxp+GksDq9OG4D1sUCwjbfbNIaRXUQSus="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript-3.0.4.tgz_1497468522569_0.41516626509837806"
      },
      "directories": {}
    },
    "3.0.5": {
      "name": "karma-typescript",
      "version": "3.0.5",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "yugi03"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "build": "tsc --rootDir ./src",
        "build:ci": "tsc --noEmit --rootDir ./src",
        "build:watch": "tsc -w --rootDir ./src",
        "lint": "eslint ./lib/*.js && tslint --project tsconfig.json",
        "test": "./ci/run.sh",
        "test:unix": "./ci/install.sh && ./ci/run.sh",
        "test:windows": ".\\ci\\install.bat & .\\ci\\run.bat",
        "test:unit": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^4.0.4",
        "amdefine": "1.0.0",
        "assert": "^1.4.1",
        "async": "^2.1.4",
        "base64-js": "^1.2.1",
        "browser-resolve": "^1.11.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.0.6",
        "console-browserify": "^1.1.0",
        "constants-browserify": "^1.0.0",
        "crypto-browserify": "^3.11.1",
        "diff": "^3.2.0",
        "domain-browser": "^1.1.7",
        "es6-promise": "^4.0.5",
        "events": "^1.1.1",
        "glob": "^7.1.1",
        "gulp-util": "3.0.7",
        "https-browserify": "^1.0.0",
        "ieee754": "^1.1.8",
        "isarray": "^1.0.0",
        "istanbul": "0.4.5",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.4",
        "log4js": "^1.1.1",
        "magic-string": "^0.19.0",
        "minimatch": "^3.0.3",
        "os-browserify": "^0.3.0",
        "pad": "^1.1.0",
        "path-browserify": "0.0.0",
        "process": "^0.11.10",
        "punycode": "^1.4.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^2.3.3",
        "remap-istanbul": "^0.8.4",
        "source-map": ">=0.5.6",
        "stream-browserify": "^2.0.1",
        "stream-http": "^2.7.2",
        "string_decoder": "^1.0.3",
        "through2": "2.0.1",
        "timers-browserify": "^2.0.2",
        "tmp": "0.0.29",
        "tty-browserify": "0.0.0",
        "url": "^0.11.0",
        "util": "^0.10.3",
        "vm-browserify": "0.0.4"
      },
      "devDependencies": {
        "@types/acorn": "^4.0.0",
        "@types/async": "^2.0.38",
        "@types/browser-resolve": "0.0.4",
        "@types/diff": "0.0.31",
        "@types/glob": "^5.0.30",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^0.13.33",
        "@types/lodash": "^4.14.59",
        "@types/minimatch": "^2.0.29",
        "@types/mock-require": "^1.3.3",
        "@types/node": "^7.0.5",
        "@types/pad": "^1.0.0",
        "@types/sinon": "^2.1.2",
        "@types/tape": "^4.2.29",
        "@types/tmp": "0.0.32",
        "cli-clear": "^1.0.4",
        "copy": "^0.3.0",
        "del": "^2.2.2",
        "eslint": "^3.4.0",
        "faucet": "0.0.1",
        "gulp": "^3.9.1",
        "gulp-util": "^3.0.7",
        "istanbul": "^1.1.0-alpha.1",
        "mock-require": "^2.0.2",
        "sinon": "^2.1.0",
        "tape": "^4.6.3",
        "tslint": "^4.4.2",
        "tslint-eslint-rules": "^3.3.0",
        "typescript": "latest"
      },
      "collective": {
        "type": "opencollective",
        "url": "https://opencollective.com/karma-typescript",
        "logo": "https://opencollective.com/opencollective/logo.txt"
      },
      "gitHead": "4cb83cc8c3306ebd2bb532e0b8245f2bc603d499",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@3.0.5",
      "_shasum": "f49fadf3765753be543fe46692e8050145519a9f",
      "_from": ".",
      "_npmVersion": "4.0.5",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "f49fadf3765753be543fe46692e8050145519a9f",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-3.0.5.tgz",
        "integrity": "sha512-LQwWTMmTJPBr787DB5CdxuJXni0InSlw2w8Ri7ezJsdVuJYWuG+/9mtg8pLAEnFIkNCs9a1pgnQ9Rc8uZ9Ekng==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD3negjDZJ1iZ01eENna/UdAurIsLvcy/I5YSguddK6VQIhAOBzRvpNHXjB/3NcdRshNOLAE7hfYlk0lEley+ETXFlT"
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript-3.0.5.tgz_1501618977383_0.8435780392028391"
      },
      "directories": {}
    },
    "3.0.6": {
      "name": "karma-typescript",
      "version": "3.0.6",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "Hobart2967"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "build": "tsc --rootDir ./src",
        "build:ci": "tsc --noEmit --rootDir ./src",
        "build:watch": "tsc -w --rootDir ./src",
        "lint": "eslint ./lib/*.js && tslint --project tsconfig.json",
        "test": "./ci/run.sh",
        "test:unix": "./ci/install.sh && ./ci/run.sh",
        "test:windows": ".\\ci\\install.bat & .\\ci\\run.bat",
        "test:unit": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^4.0.4",
        "amdefine": "1.0.0",
        "assert": "^1.4.1",
        "async": "^2.1.4",
        "base64-js": "^1.2.1",
        "browser-resolve": "^1.11.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.0.6",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.5.0",
        "crypto-browserify": "^3.11.1",
        "diff": "^3.2.0",
        "domain-browser": "^1.1.7",
        "es6-promise": "^4.0.5",
        "events": "^1.1.1",
        "glob": "^7.1.1",
        "gulp-util": "3.0.7",
        "https-browserify": "^1.0.0",
        "ieee754": "^1.1.8",
        "isarray": "^1.0.0",
        "istanbul": "0.4.5",
        "json-stringify-safe": "^5.0.1",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.4",
        "log4js": "^1.1.1",
        "magic-string": "^0.19.0",
        "minimatch": "^3.0.3",
        "os-browserify": "^0.3.0",
        "pad": "^1.1.0",
        "path-browserify": "0.0.0",
        "process": "^0.11.10",
        "punycode": "^1.4.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^2.3.3",
        "remap-istanbul": "^0.8.4",
        "source-map": ">=0.5.6",
        "stream-browserify": "^2.0.1",
        "stream-http": "^2.7.2",
        "string_decoder": "^1.0.3",
        "through2": "2.0.1",
        "timers-browserify": "^2.0.2",
        "tmp": "0.0.29",
        "tty-browserify": "0.0.0",
        "url": "^0.11.0",
        "util": "^0.10.3",
        "vm-browserify": "0.0.4"
      },
      "devDependencies": {
        "@types/acorn": "^4.0.0",
        "@types/async": "^2.0.38",
        "@types/browser-resolve": "0.0.4",
        "@types/combine-source-map": "^0.8.0",
        "@types/convert-source-map": "^1.3.33",
        "@types/diff": "0.0.31",
        "@types/glob": "^5.0.30",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^0.13.33",
        "@types/lodash": "^4.14.59",
        "@types/minimatch": "^2.0.29",
        "@types/mock-require": "^1.3.3",
        "@types/node": "^7.0.5",
        "@types/pad": "^1.0.0",
        "@types/sinon": "^2.1.2",
        "@types/tape": "^4.2.29",
        "@types/tmp": "0.0.32",
        "cli-clear": "^1.0.4",
        "copy": "^0.3.0",
        "del": "^2.2.2",
        "eslint": "^3.4.0",
        "faucet": "0.0.1",
        "gulp": "^3.9.1",
        "gulp-util": "^3.0.7",
        "istanbul": "^1.1.0-alpha.1",
        "mock-require": "^2.0.2",
        "sinon": "^2.1.0",
        "tape": "^4.6.3",
        "tslint": "^4.4.2",
        "tslint-eslint-rules": "^3.3.0",
        "typescript": "latest"
      },
      "collective": {
        "type": "opencollective",
        "url": "https://opencollective.com/karma-typescript",
        "logo": "https://opencollective.com/opencollective/logo.txt"
      },
      "gitHead": "ac17c17c03ad6af813a93a717f2555597eba4f75",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@3.0.6",
      "_shasum": "b1c88393a12ce83bf8235f3b12911d7470f906b1",
      "_from": ".",
      "_npmVersion": "4.6.1",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "b1c88393a12ce83bf8235f3b12911d7470f906b1",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-3.0.6.tgz",
        "integrity": "sha512-R6EZBSlPvEo4HWVj8WOLIkMYQ4elYWq23SueROkVmXYWYTiyD9igT95TKFJpzNiyguJfd3s1thDlMvzgBC72sw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIEdrbFa7SQXLHnFyqX/R7RI0qd7HgcUfieFp2pOr7By+AiEAxZsHrjHBPbL9xs9iqulWUb0Sd3gcuigDaBAcFh6kYxQ="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript-3.0.6.tgz_1505759725635_0.9994571178685874"
      },
      "directories": {}
    },
    "3.0.7": {
      "name": "karma-typescript",
      "version": "3.0.7",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "Hobart2967"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "build": "tsc --rootDir ./src",
        "build:ci": "tsc --noEmit --rootDir ./src",
        "build:watch": "tsc -w --rootDir ./src",
        "lint": "eslint ./lib/*.js && tslint --project tsconfig.json",
        "test": "./ci/run.sh",
        "test:unix": "./ci/install.sh && ./ci/run.sh",
        "test:windows": ".\\ci\\install.bat & .\\ci\\run.bat",
        "test:unit": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^4.0.4",
        "amdefine": "1.0.0",
        "assert": "^1.4.1",
        "async": "^2.1.4",
        "base64-js": "^1.2.1",
        "browser-resolve": "^1.11.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.0.6",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.5.0",
        "crypto-browserify": "^3.11.1",
        "diff": "^3.2.0",
        "domain-browser": "^1.1.7",
        "es6-promise": "^4.0.5",
        "events": "^1.1.1",
        "glob": "^7.1.1",
        "gulp-util": "3.0.7",
        "https-browserify": "^1.0.0",
        "ieee754": "^1.1.8",
        "isarray": "^1.0.0",
        "istanbul": "0.4.5",
        "json-stringify-safe": "^5.0.1",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.4",
        "log4js": "^1.1.1",
        "magic-string": "^0.19.0",
        "minimatch": "^3.0.3",
        "os-browserify": "^0.3.0",
        "pad": "^1.1.0",
        "path-browserify": "0.0.0",
        "process": "^0.11.10",
        "punycode": "^1.4.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^2.3.3",
        "remap-istanbul": "^0.8.4",
        "source-map": ">=0.5.6",
        "stream-browserify": "^2.0.1",
        "stream-http": "^2.7.2",
        "string_decoder": "^1.0.3",
        "through2": "2.0.1",
        "timers-browserify": "^2.0.2",
        "tmp": "0.0.29",
        "tty-browserify": "0.0.0",
        "url": "^0.11.0",
        "util": "^0.10.3",
        "vm-browserify": "0.0.4"
      },
      "devDependencies": {
        "@types/acorn": "^4.0.0",
        "@types/async": "^2.0.38",
        "@types/browser-resolve": "0.0.4",
        "@types/combine-source-map": "^0.8.0",
        "@types/convert-source-map": "^1.3.33",
        "@types/diff": "0.0.31",
        "@types/glob": "^5.0.30",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^0.13.33",
        "@types/lodash": "^4.14.59",
        "@types/minimatch": "^2.0.29",
        "@types/mock-require": "^1.3.3",
        "@types/node": "^7.0.5",
        "@types/pad": "^1.0.0",
        "@types/sinon": "^2.1.2",
        "@types/tape": "^4.2.29",
        "@types/tmp": "0.0.32",
        "cli-clear": "^1.0.4",
        "copy": "^0.3.0",
        "del": "^2.2.2",
        "eslint": "^3.4.0",
        "faucet": "0.0.1",
        "gulp": "^3.9.1",
        "gulp-util": "^3.0.7",
        "istanbul": "^1.1.0-alpha.1",
        "mock-require": "^2.0.2",
        "sinon": "^2.1.0",
        "tape": "^4.6.3",
        "tslint": "^4.4.2",
        "tslint-eslint-rules": "^3.3.0",
        "typescript": "latest"
      },
      "collective": {
        "type": "opencollective",
        "url": "https://opencollective.com/karma-typescript",
        "logo": "https://opencollective.com/opencollective/logo.txt"
      },
      "gitHead": "02964167f54041df066aec55816bdba5155bf875",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@3.0.7",
      "_shasum": "ce2c538f66ddd2285c30a694af24430b590559f0",
      "_from": ".",
      "_npmVersion": "4.6.1",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "ce2c538f66ddd2285c30a694af24430b590559f0",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-3.0.7.tgz",
        "integrity": "sha512-RPjzha0SNgYy1WRyKBno3eWOEcAQe0EzikxyFiRzGjkBEsPDkXnfYAyMVxqxGZK1M8XescE/un3qx+GcLVE91w==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQC3fW+0YXlwrHa4r2UuQojMjeVsKaZi4Qb1fgSiv+AVVgIgFTuhA/vJFSNCBpKgZh6ZtSlxgTocvnq+mN2MT6p0nRQ="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript-3.0.7.tgz_1506364362130_0.6719510732218623"
      },
      "directories": {}
    },
    "3.0.8": {
      "name": "karma-typescript",
      "version": "3.0.8",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "gempain"
        },
        {
          "name": "mitchhentges"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "build": "tsc --rootDir ./src",
        "build:watch": "tsc -w --rootDir ./src",
        "lint": "eslint ./lib/*.js && tslint --project tsconfig.json",
        "test": "./ci/run.sh",
        "test:unit": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^4.0.4",
        "amdefine": "1.0.0",
        "assert": "^1.4.1",
        "async": "^2.1.4",
        "base64-js": "^1.2.1",
        "browser-resolve": "^1.11.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.0.6",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.5.0",
        "crypto-browserify": "^3.11.1",
        "diff": "^3.2.0",
        "domain-browser": "^1.1.7",
        "es6-promise": "^4.0.5",
        "events": "^1.1.1",
        "glob": "^7.1.1",
        "https-browserify": "^1.0.0",
        "ieee754": "^1.1.8",
        "isarray": "^1.0.0",
        "istanbul": "0.4.5",
        "json-stringify-safe": "^5.0.1",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.4",
        "log4js": "^1.1.1",
        "magic-string": "^0.19.0",
        "minimatch": "^3.0.3",
        "os-browserify": "^0.3.0",
        "pad": "^1.1.0",
        "path-browserify": "0.0.0",
        "process": "^0.11.10",
        "punycode": "^1.4.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^2.3.3",
        "remap-istanbul": "^0.8.4",
        "source-map": ">=0.5.6",
        "stream-browserify": "^2.0.1",
        "stream-http": "^2.7.2",
        "string_decoder": "^1.0.3",
        "through2": "2.0.1",
        "timers-browserify": "^2.0.2",
        "tmp": "0.0.29",
        "tty-browserify": "0.0.0",
        "url": "^0.11.0",
        "util": "^0.10.3",
        "vm-browserify": "0.0.4"
      },
      "devDependencies": {
        "@types/acorn": "^4.0.0",
        "@types/async": "^2.0.44",
        "@types/browser-resolve": "0.0.4",
        "@types/combine-source-map": "^0.8.0",
        "@types/convert-source-map": "^1.3.33",
        "@types/diff": "0.0.31",
        "@types/glob": "^5.0.30",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^0.13.33",
        "@types/lodash": "^4.14.59",
        "@types/log4js": "0.0.33",
        "@types/minimatch": "^2.0.29",
        "@types/mock-require": "^1.3.3",
        "@types/node": "^7.0.5",
        "@types/pad": "^1.0.0",
        "@types/sinon": "^2.1.2",
        "@types/tape": "^4.2.29",
        "@types/tmp": "0.0.32",
        "cli-clear": "^1.0.4",
        "copy": "^0.3.0",
        "del": "^2.2.2",
        "eslint": "^3.4.0",
        "faucet": "0.0.1",
        "gulp": "^3.9.1",
        "gulp-util": "^3.0.7",
        "mock-require": "^2.0.2",
        "sinon": "^2.1.0",
        "tape": "^4.6.3",
        "tslint": "^4.4.2",
        "tslint-eslint-rules": "^3.3.0",
        "typescript": "latest"
      },
      "collective": {
        "type": "opencollective",
        "url": "https://opencollective.com/karma-typescript",
        "logo": "https://opencollective.com/opencollective/logo.txt"
      },
      "gitHead": "56ba7747a955097d525f91be8629a5d1b07fc21f",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@3.0.8",
      "_shasum": "a1ac86b00da744dc1c03cdc7817a2982e72f1171",
      "_from": ".",
      "_npmVersion": "4.6.1",
      "_nodeVersion": "6.4.0",
      "_npmUser": {
        "name": "monounity",
        "email": "work@barke.nu"
      },
      "dist": {
        "shasum": "a1ac86b00da744dc1c03cdc7817a2982e72f1171",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-3.0.8.tgz",
        "integrity": "sha512-zHH5AfiWlgVuKCcY1g7V8lL1hgmGQ5u3eQDeB7ITRjBS0FPoHsReRVQoXHL5eI12eFtW66PMWo8qGbCrLUZXNw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCo07+v77UBIF6wBik7n505OdNIGHKrEztrvA1ku33rNAIgFdDGF6yVtUSHA/lpeFsLJ41Vhy9wKIvyiWVDi1zDDHE="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript-3.0.8.tgz_1508349094770_0.9350761000532657"
      },
      "directories": {}
    },
    "3.0.9": {
      "name": "karma-typescript",
      "version": "3.0.9",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "gempain"
        },
        {
          "name": "mitchhentges"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "build": "tsc --rootDir ./src",
        "build:watch": "tsc -w --rootDir ./src",
        "ci": "npm run lint && npm run build && npm run test:unit && npm test",
        "lint": "eslint ./lib/*.js && tslint --project tsconfig.json",
        "test": "node ci/run.js",
        "test:unit": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^4.0.4",
        "assert": "^1.4.1",
        "async": "^2.1.4",
        "browser-resolve": "^1.11.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.0.6",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.5.0",
        "crypto-browserify": "^3.11.1",
        "diff": "^3.2.0",
        "domain-browser": "^1.1.7",
        "events": "^1.1.1",
        "glob": "^7.1.1",
        "https-browserify": "^1.0.0",
        "istanbul": "0.4.5",
        "json-stringify-safe": "^5.0.1",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.4",
        "log4js": "^1.1.1",
        "minimatch": "^3.0.3",
        "os-browserify": "^0.3.0",
        "pad": "^2.0.0",
        "path-browserify": "0.0.0",
        "process": "^0.11.10",
        "punycode": "^1.4.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^2.3.3",
        "remap-istanbul": "^0.8.4",
        "source-map": ">=0.5.6",
        "stream-browserify": "^2.0.1",
        "stream-http": "^2.7.2",
        "string_decoder": "^1.0.3",
        "timers-browserify": "^2.0.2",
        "tmp": "0.0.29",
        "tty-browserify": "0.0.0",
        "url": "^0.11.0",
        "util": "^0.10.3",
        "vm-browserify": "0.0.4"
      },
      "devDependencies": {
        "@types/acorn": "^4.0.0",
        "@types/async": "^2.0.44",
        "@types/browser-resolve": "0.0.4",
        "@types/combine-source-map": "^0.8.0",
        "@types/convert-source-map": "^1.3.33",
        "@types/diff": "0.0.31",
        "@types/estree": "0.0.38",
        "@types/glob": "^5.0.30",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^0.13.33",
        "@types/lodash": "^4.14.59",
        "@types/log4js": "0.0.33",
        "@types/minimatch": "^2.0.29",
        "@types/mock-require": "^1.3.3",
        "@types/node": "^7.0.5",
        "@types/pad": "^1.0.0",
        "@types/sinon": "^2.1.2",
        "@types/tape": "^4.2.29",
        "@types/tmp": "0.0.32",
        "cli-clear": "^1.0.4",
        "copy": "^0.3.0",
        "cross-spawn": "^5.1.0",
        "del": "^2.2.2",
        "eslint": "^3.4.0",
        "faucet": "0.0.1",
        "gulp": "^3.9.1",
        "gulp-sourcemaps": "^2.6.1",
        "gulp-typescript": "^3.2.3",
        "mock-require": "^2.0.2",
        "run-sequence": "^2.2.0",
        "sinon": "^2.1.0",
        "tape": "^4.6.3",
        "tslint": "^4.4.2",
        "tslint-eslint-rules": "^3.3.0",
        "typescript": "2"
      },
      "peerDependencies": {
        "karma": "1",
        "typescript": "2"
      },
      "collective": {
        "type": "opencollective",
        "url": "https://opencollective.com/karma-typescript",
        "logo": "https://opencollective.com/opencollective/logo.txt"
      },
      "gitHead": "602e691fe71d09d09d0be44bc5801f8bda79ad08",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@3.0.9",
      "_shasum": "3d3fd54e2fb28d84dd9c22946525bfec90606078",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "8.9.3",
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "dist": {
        "shasum": "3d3fd54e2fb28d84dd9c22946525bfec90606078",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-3.0.9.tgz",
        "integrity": "sha512-y6Gys2XnU9LFnDERx2eH2x0x+MDBxmd3QqrABzqtbhTOCHBPz0u6d1IrEXlAF9yA+HZo6m+CD65HSCIlz1SPBQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQC3gm88vinnGWBljhlSvYJQ8FpJvasqDyInM4BTrRDR/gIgXe4u6tXrj2kIEadxqqJrOPVYgoVmvTxf42lsX4KMGtc="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript-3.0.9.tgz_1513575982437_0.8590526948682964"
      },
      "directories": {}
    },
    "3.0.10": {
      "name": "karma-typescript",
      "version": "3.0.10",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "gempain"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "jods4"
        },
        {
          "name": "abraham"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "build": "tsc --rootDir ./src",
        "build:watch": "tsc -w --rootDir ./src",
        "ci": "npm run lint && npm run build && npm run test:unit && npm test",
        "lint": "eslint ./lib/*.js && tslint --project tsconfig.json",
        "test": "node ci/run.js",
        "test:unit": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^4.0.4",
        "assert": "^1.4.1",
        "async": "^2.1.4",
        "browser-resolve": "^1.11.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.0.6",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.5.0",
        "crypto-browserify": "^3.11.1",
        "diff": "^3.2.0",
        "domain-browser": "^1.1.7",
        "events": "^1.1.1",
        "glob": "^7.1.1",
        "https-browserify": "^1.0.0",
        "istanbul": "0.4.5",
        "json-stringify-safe": "^5.0.1",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.4",
        "log4js": "^1.1.1",
        "minimatch": "^3.0.3",
        "os-browserify": "^0.3.0",
        "pad": "^2.0.0",
        "path-browserify": "0.0.0",
        "process": "^0.11.10",
        "punycode": "^1.4.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^2.3.3",
        "source-map": "0.6.1",
        "remap-istanbul": "^0.10.0",
        "stream-browserify": "^2.0.1",
        "stream-http": "^2.7.2",
        "string_decoder": "^1.0.3",
        "timers-browserify": "^2.0.2",
        "tmp": "0.0.29",
        "tty-browserify": "0.0.0",
        "url": "^0.11.0",
        "util": "^0.10.3",
        "vm-browserify": "0.0.4"
      },
      "devDependencies": {
        "@types/acorn": "^4.0.0",
        "@types/async": "^2.0.44",
        "@types/browser-resolve": "0.0.4",
        "@types/combine-source-map": "^0.8.0",
        "@types/convert-source-map": "^1.3.33",
        "@types/diff": "0.0.31",
        "@types/estree": "0.0.38",
        "@types/glob": "^5.0.30",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^0.13.33",
        "@types/lodash": "^4.14.59",
        "@types/log4js": "0.0.33",
        "@types/minimatch": "^2.0.29",
        "@types/mock-require": "^1.3.3",
        "@types/node": "^7.0.5",
        "@types/pad": "^1.0.0",
        "@types/sinon": "^2.1.2",
        "@types/tape": "^4.2.29",
        "@types/tmp": "0.0.32",
        "cli-clear": "^1.0.4",
        "copy": "^0.3.0",
        "cross-spawn": "^5.1.0",
        "del": "^2.2.2",
        "eslint": "^3.4.0",
        "faucet": "0.0.1",
        "gulp": "^3.9.1",
        "gulp-sourcemaps": "^2.6.1",
        "gulp-typescript": "^3.2.3",
        "mock-require": "^2.0.2",
        "run-sequence": "^2.2.0",
        "sinon": "^2.1.0",
        "tape": "^4.6.3",
        "tslint": "^4.4.2",
        "tslint-eslint-rules": "^3.3.0",
        "typescript": "2"
      },
      "peerDependencies": {
        "karma": "1 || 2",
        "typescript": "2"
      },
      "collective": {
        "type": "opencollective",
        "url": "https://opencollective.com/karma-typescript",
        "logo": "https://opencollective.com/opencollective/logo.txt"
      },
      "gitHead": "086af9bce05fea3d1d705da77acdccbf9b19ab85",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@3.0.10",
      "_shasum": "4ed31c27549fd3c78d17d7bc7d3298f227e45026",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "dist": {
        "shasum": "4ed31c27549fd3c78d17d7bc7d3298f227e45026",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-3.0.10.tgz",
        "integrity": "sha512-fHVrDMy/NysrSLxWiIpKOCA+QbArpf44NgRYLpeLPjIgybq3VHyhxDAljGf9DljpWSccqs6ysr7irfKcQeu1dw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQDmV4Kb+ALodWmDJv6f4ibK2zNJWXRpTdGrRnNGNkRvogIhAPl7L3xmRZh2mXJVNQKDNkpKU6Wwv1myenEV7s3nbZ8o"
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript-3.0.10.tgz_1517257487375_0.10454967361874878"
      },
      "directories": {}
    },
    "3.0.11": {
      "name": "karma-typescript",
      "version": "3.0.11",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "gempain"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "jods4"
        },
        {
          "name": "abraham"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "build": "tsc --rootDir ./src",
        "build:watch": "tsc -w --rootDir ./src",
        "ci": "npm run lint && npm run build && npm run test:unit && npm test",
        "lint": "eslint ./lib/*.js && tslint --project tsconfig.json",
        "test": "node ci/run.js",
        "test:unit": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^4.0.4",
        "assert": "^1.4.1",
        "async": "^2.1.4",
        "browser-resolve": "^1.11.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.0.6",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.5.0",
        "crypto-browserify": "^3.11.1",
        "diff": "^3.2.0",
        "domain-browser": "^1.1.7",
        "events": "^1.1.1",
        "glob": "^7.1.1",
        "https-browserify": "^1.0.0",
        "istanbul": "0.4.5",
        "json-stringify-safe": "^5.0.1",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.4",
        "log4js": "^1.1.1",
        "minimatch": "^3.0.3",
        "os-browserify": "^0.3.0",
        "pad": "^2.0.0",
        "path-browserify": "0.0.0",
        "process": "^0.11.10",
        "punycode": "^1.4.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^2.3.3",
        "source-map": "0.6.1",
        "remap-istanbul": "0.8.4",
        "stream-browserify": "^2.0.1",
        "stream-http": "^2.7.2",
        "string_decoder": "^1.0.3",
        "timers-browserify": "^2.0.2",
        "tmp": "0.0.29",
        "tty-browserify": "0.0.0",
        "url": "^0.11.0",
        "util": "^0.10.3",
        "vm-browserify": "0.0.4"
      },
      "devDependencies": {
        "@types/acorn": "^4.0.0",
        "@types/async": "^2.0.44",
        "@types/browser-resolve": "0.0.4",
        "@types/combine-source-map": "^0.8.0",
        "@types/convert-source-map": "^1.3.33",
        "@types/diff": "0.0.31",
        "@types/estree": "0.0.38",
        "@types/glob": "^5.0.30",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^0.13.33",
        "@types/lodash": "^4.14.59",
        "@types/log4js": "0.0.33",
        "@types/minimatch": "^2.0.29",
        "@types/mock-require": "^1.3.3",
        "@types/node": "^7.0.5",
        "@types/pad": "^1.0.0",
        "@types/sinon": "^2.1.2",
        "@types/tape": "^4.2.29",
        "@types/tmp": "0.0.32",
        "cli-clear": "^1.0.4",
        "copy": "^0.3.0",
        "cross-spawn": "^5.1.0",
        "del": "^2.2.2",
        "eslint": "^3.4.0",
        "faucet": "0.0.1",
        "gulp": "^3.9.1",
        "gulp-sourcemaps": "^2.6.1",
        "gulp-typescript": "^3.2.3",
        "mock-require": "^2.0.2",
        "run-sequence": "^2.2.0",
        "sinon": "^2.1.0",
        "tape": "^4.6.3",
        "tslint": "^4.4.2",
        "tslint-eslint-rules": "^3.3.0",
        "typescript": "2"
      },
      "peerDependencies": {
        "karma": "1 || 2",
        "typescript": "2"
      },
      "collective": {
        "type": "opencollective",
        "url": "https://opencollective.com/karma-typescript",
        "logo": "https://opencollective.com/opencollective/logo.txt"
      },
      "gitHead": "b8c8566538a887866653196192a3f5fe28419764",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@3.0.11",
      "_shasum": "352748d7eb03ac1ecec308b5da75d3fba0f5bad2",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "dist": {
        "shasum": "352748d7eb03ac1ecec308b5da75d3fba0f5bad2",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-3.0.11.tgz",
        "integrity": "sha512-aqnDe27EbmEg2ACIsraxjZUBAOc4BQKdAHn7BEARAmb2HONI/NsXUcFKNi5+Kgmio6MnlokCYaJ0wdOWf7k+nw==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQD98eRDWdozHZMkUnYaKxrwmXtPEm0PK+TvHAK21lyk2QIgc0u95MXhujbcohLfp3N+wlyM2U6/Lcc/CBEHiTjj3AE="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript-3.0.11.tgz_1517305194721_0.9728338085114956"
      },
      "directories": {}
    },
    "3.0.12": {
      "name": "karma-typescript",
      "version": "3.0.12",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "gempain"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "jods4"
        },
        {
          "name": "abraham"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "build": "tsc --rootDir ./src",
        "build:watch": "tsc -w --rootDir ./src",
        "ci": "npm run lint && npm run build && npm run test:unit && npm test",
        "lint": "eslint ./lib/*.js && tslint --project tsconfig.json",
        "test": "node ci/run.js",
        "test:unit": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^4.0.4",
        "assert": "^1.4.1",
        "async": "^2.1.4",
        "browser-resolve": "^1.11.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.0.6",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.5.0",
        "crypto-browserify": "^3.11.1",
        "diff": "^3.2.0",
        "domain-browser": "^1.1.7",
        "events": "^1.1.1",
        "glob": "^7.1.1",
        "https-browserify": "^1.0.0",
        "istanbul": "0.4.5",
        "json-stringify-safe": "^5.0.1",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.4",
        "log4js": "^1.1.1",
        "minimatch": "^3.0.3",
        "os-browserify": "^0.3.0",
        "pad": "^2.0.0",
        "path-browserify": "0.0.0",
        "process": "^0.11.10",
        "punycode": "^1.4.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^2.3.3",
        "remap-istanbul": "^0.10.1",
        "source-map": "0.6.1",
        "stream-browserify": "^2.0.1",
        "stream-http": "^2.7.2",
        "string_decoder": "^1.0.3",
        "timers-browserify": "^2.0.2",
        "tmp": "0.0.29",
        "tty-browserify": "0.0.0",
        "url": "^0.11.0",
        "util": "^0.10.3",
        "vm-browserify": "0.0.4"
      },
      "devDependencies": {
        "@types/acorn": "^4.0.0",
        "@types/async": "^2.0.44",
        "@types/browser-resolve": "0.0.4",
        "@types/combine-source-map": "^0.8.0",
        "@types/convert-source-map": "^1.3.33",
        "@types/diff": "0.0.31",
        "@types/estree": "0.0.38",
        "@types/glob": "^5.0.30",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^0.13.33",
        "@types/lodash": "^4.14.59",
        "@types/log4js": "0.0.33",
        "@types/minimatch": "^2.0.29",
        "@types/mock-require": "^1.3.3",
        "@types/node": "^7.0.5",
        "@types/pad": "^1.0.0",
        "@types/sinon": "^2.1.2",
        "@types/tape": "^4.2.29",
        "@types/tmp": "0.0.32",
        "cli-clear": "^1.0.4",
        "copy": "^0.3.0",
        "cross-spawn": "^5.1.0",
        "del": "^2.2.2",
        "eslint": "^3.4.0",
        "faucet": "0.0.1",
        "gulp": "^3.9.1",
        "gulp-sourcemaps": "^2.6.1",
        "gulp-typescript": "^3.2.3",
        "mock-require": "^2.0.2",
        "run-sequence": "^2.2.0",
        "sinon": "^2.1.0",
        "tape": "^4.6.3",
        "tslint": "^4.4.2",
        "tslint-eslint-rules": "^3.3.0",
        "typescript": "2"
      },
      "peerDependencies": {
        "karma": "1 || 2",
        "typescript": "2"
      },
      "collective": {
        "type": "opencollective",
        "url": "https://opencollective.com/karma-typescript",
        "logo": "https://opencollective.com/opencollective/logo.txt"
      },
      "gitHead": "b4e04731c44f4deefed2b94a76a8976620330950",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@3.0.12",
      "_shasum": "aa2cbdd111442a09c6dbcbaaeaf48499654c6913",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "dist": {
        "shasum": "aa2cbdd111442a09c6dbcbaaeaf48499654c6913",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-3.0.12.tgz",
        "integrity": "sha512-d6FxjGyKUkrJtY+FhERZNLRXq9Gn3sCj2LXVSzgvSb37qY/BTYd0HNsQuTi7Eo5d2EWC4xoRHSXF8NxV5hXAZQ==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIACLIQ0LWPkdHcy+Smn8VvIYq2YcXN+nUu0pyn/s4CKhAiEA628fkoSL32ReGShpSsSCUwDHi8FC4rbXPkk00lTGGYQ="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript-3.0.12.tgz_1517518910432_0.8749204464256763"
      },
      "directories": {}
    },
    "3.0.13": {
      "name": "karma-typescript",
      "version": "3.0.13",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "gempain"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "jods4"
        },
        {
          "name": "abraham"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "build": "tsc --rootDir ./src",
        "build:watch": "tsc -w --rootDir ./src",
        "ci": "npm run lint && npm run build && npm run test:unit && npm test",
        "lint": "eslint ./lib/*.js && tslint --project tsconfig.json",
        "test": "node ci/run.js",
        "test:unit": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^4.0.4",
        "assert": "^1.4.1",
        "async": "^2.1.4",
        "browser-resolve": "^1.11.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.0.6",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.5.0",
        "crypto-browserify": "^3.11.1",
        "diff": "^3.2.0",
        "domain-browser": "^1.1.7",
        "events": "^1.1.1",
        "glob": "^7.1.1",
        "https-browserify": "^1.0.0",
        "istanbul": "0.4.5",
        "json-stringify-safe": "^5.0.1",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.4",
        "log4js": "^1.1.1",
        "minimatch": "^3.0.3",
        "os-browserify": "^0.3.0",
        "pad": "^2.0.0",
        "path-browserify": "0.0.0",
        "process": "^0.11.10",
        "punycode": "^1.4.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^2.3.3",
        "remap-istanbul": "^0.10.1",
        "source-map": "0.6.1",
        "stream-browserify": "^2.0.1",
        "stream-http": "^2.7.2",
        "string_decoder": "^1.0.3",
        "timers-browserify": "^2.0.2",
        "tmp": "0.0.29",
        "tty-browserify": "0.0.0",
        "url": "^0.11.0",
        "util": "^0.10.3",
        "vm-browserify": "0.0.4"
      },
      "devDependencies": {
        "@types/acorn": "^4.0.0",
        "@types/async": "^2.0.44",
        "@types/browser-resolve": "0.0.4",
        "@types/combine-source-map": "^0.8.0",
        "@types/convert-source-map": "^1.3.33",
        "@types/diff": "0.0.31",
        "@types/estree": "0.0.38",
        "@types/glob": "^5.0.30",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^0.13.33",
        "@types/lodash": "^4.14.59",
        "@types/log4js": "0.0.33",
        "@types/minimatch": "^2.0.29",
        "@types/mock-require": "^1.3.3",
        "@types/node": "^7.0.5",
        "@types/pad": "^1.0.0",
        "@types/sinon": "^2.1.2",
        "@types/tape": "^4.2.29",
        "@types/tmp": "0.0.32",
        "cli-clear": "^1.0.4",
        "copy": "^0.3.0",
        "cross-spawn": "^5.1.0",
        "del": "^2.2.2",
        "eslint": "^3.4.0",
        "faucet": "0.0.1",
        "gulp": "^3.9.1",
        "gulp-sourcemaps": "^2.6.1",
        "gulp-typescript": "^3.2.3",
        "mock-require": "^2.0.2",
        "puppeteer": "^1.1.1",
        "run-sequence": "^2.2.0",
        "sinon": "^2.1.0",
        "tape": "^4.6.3",
        "tslint": "^4.4.2",
        "tslint-eslint-rules": "^3.3.0",
        "typescript": "2"
      },
      "peerDependencies": {
        "karma": "1 || 2",
        "typescript": "2"
      },
      "collective": {
        "type": "opencollective",
        "url": "https://opencollective.com/karma-typescript",
        "logo": "https://opencollective.com/opencollective/logo.txt"
      },
      "gitHead": "394ed46cd1a7934f6825a1c3e34cce3315c076b9",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@3.0.13",
      "_shasum": "8948afbd103ac1987a5961a0f43a1ba2871067cd",
      "_from": ".",
      "_npmVersion": "3.10.10",
      "_nodeVersion": "8.9.4",
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "dist": {
        "shasum": "8948afbd103ac1987a5961a0f43a1ba2871067cd",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-3.0.13.tgz",
        "fileCount": 193,
        "unpackedSize": 1293687,
        "integrity": "sha512-kUOfk4PrBbydFt1vKqhC2iOgmaD7yrkXSpnL0b4VOszhHr2lrKcD9mb74EgI9Tk0wPaFqZCAnjBN1A9//HbYbg==",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBuv2JzH7Y8PXolxb6IOo2QIFZSi4EcY1EhXEW5nCcFbAiEAtel5dPdBXTVmmDpQ/2nUDg4Z2NkTdz6+beZleU4abMQ="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_3.0.13_1531679111271_0.21709844050477267"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-beta.1": {
      "name": "karma-typescript",
      "version": "4.0.0-beta.1",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "tslint --project tsconfig.json",
        "build": "tsc --rootDir ./src",
        "test": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^6.0.2",
        "acorn-walk": "^6.1.0",
        "assert": "^1.4.1",
        "async": "^2.1.4",
        "browser-resolve": "^1.11.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.0.6",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.5.0",
        "crypto-browserify": "^3.11.1",
        "diff": "^3.2.0",
        "domain-browser": "^1.1.7",
        "events": "^3.0.0",
        "glob": "^7.1.1",
        "https-browserify": "^1.0.0",
        "istanbul": "0.4.5",
        "json-stringify-safe": "^5.0.1",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.11",
        "log4js": "^3.0.6",
        "minimatch": "^3.0.3",
        "os-browserify": "^0.3.0",
        "pad": "^2.0.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.0.6",
        "remap-istanbul": "^0.12.0",
        "source-map": "^0.7.3",
        "stream-browserify": "^2.0.1",
        "stream-http": "^3.0.0",
        "string_decoder": "^1.0.3",
        "timers-browserify": "^2.0.2",
        "tmp": "^0.0.33",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.11.0",
        "vm-browserify": "1.1.0"
      },
      "devDependencies": {
        "@types/async": "^2.0.44",
        "@types/browser-resolve": "0.0.5",
        "@types/combine-source-map": "^0.8.0",
        "@types/convert-source-map": "^1.3.33",
        "@types/diff": "3.5.1",
        "@types/glob": "^7.1.1",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^3.0.0",
        "@types/lodash": "^4.14.117",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^10.12.2",
        "@types/pad": "^1.0.0",
        "@types/sinon": "^5.0.5",
        "@types/tape": "^4.2.32",
        "@types/tmp": "^0.0.33",
        "cli-clear": "^1.0.4",
        "faucet": "0.0.1",
        "mock-require": "^3.0.2",
        "puppeteer": "^1.1.1",
        "tape": "^4.6.3",
        "tslint": "^5.11.0",
        "tslint-eslint-rules": "^5.4.0",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3",
        "typescript": "1 || 2 || 3"
      },
      "readme": "# karma-typescript\n\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Version\" src=\"https://img.shields.io/npm/v/karma-typescript.svg\"></a>\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Total Downloads\" src=\"https://img.shields.io/npm/dt/karma-typescript.svg\"></a>\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Monthly Downloads\" src=\"https://img.shields.io/npm/dm/karma-typescript.svg\"></a>\n<a href=\"https://travis-ci.org/monounity/karma-typescript\"><img alt=\"Travis Status\" src=\"https://img.shields.io/travis/monounity/karma-typescript/master.svg?label=travis\"></a>\n<a href=\"https://ci.appveyor.com/project/monounity/karma-typescript\"><img alt=\"Appveyor Status\" src=\"https://img.shields.io/appveyor/ci/monounity/karma-typescript/master.svg?label=appveyor\"></a>\n\n> Karma :heart: Typescript\n\n* Run unit tests written in Typescript with full type checking, seamlessly without extra build steps or scripts.\n* Get remapped test coverage with [karma-coverage](https://github.com/karma-runner/karma-coverage) and [Istanbul](https://github.com/gotwarlost/istanbul).\n* Use plain Typescript or a framework: Angular2, AngularJS, React, Sinon, any framework of choice.\n\n## Installation\n\nThe easiest way is to keep `karma-typescript` as a devDependency in `package.json`:\n\n```json\n{\n  \"devDependencies\": {\n    \"karma\": \"^3.0.0\",\n    \"karma-typescript\": \"4.0.0-beta.1\"\n  }\n}\n```\n\nDo this by installing the plugin via npm:\n\n```\nnpm install --save-dev karma-typescript\n```\n\n## Configuration\n\nBare minimum configuration can be achieved with the following `karma.conf.js` file:\n\n```javascript\nmodule.exports = function(config) {\n    config.set({\n        frameworks: [\"jasmine\", \"karma-typescript\"],\n        files: [\n            \"src/**/*.ts\" // *.tsx for React Jsx\n        ],\n        preprocessors: {\n            \"**/*.ts\": \"karma-typescript\" // *.tsx for React Jsx\n        },\n        reporters: [\"progress\", \"karma-typescript\"],\n        browsers: [\"Chrome\"]\n    });\n};\n```\n\nThe above example will compile all Typescript files and run the unit tests, producing remapped coverage in `./coverage`.\n\n## Examples\n\n[Cookbook](https://github.com/monounity/karma-typescript/tree/master/cookbook.md)\n\n### Frameworks and Integrations\n\n- [Angular2](https://github.com/monounity/karma-typescript/tree/master/examples/angular2)\n- [AngularJS](https://github.com/monounity/karma-typescript/tree/master/examples/angularjs)\n- [Docker](https://github.com/monounity/karma-typescript/tree/master/examples/docker)\n- [Gulp](https://github.com/monounity/karma-typescript/tree/master/examples/gulp)\n- [Mocha](https://github.com/monounity/karma-typescript/tree/master/examples/mocha)\n\n### Other examples\n\n- Typescript [1.8.10 to ^2.0.0](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-latest)\n- Typescript [1.6.2 to 1.7.5](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-1.6.2)\n- Typescript [1.8.10](https://github.com/monounity/karma-typescript/tree/master/tests/integration-1.8.10/src)\n- Typescript [@latest](https://github.com/monounity/karma-typescript/tree/master/tests/integration-latest/src)\n\n### Sample applications by users\n- [Hybrid app, code in JavaScript and tests in Typescript](https://github.com/adrianmarinica/karma-typescript-angularjs-sample)\n\n## Transforms:\n- [karma-typescript-angular2-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-angular2-transform)\n- [karma-typescript-cssmodules-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-cssmodules-transform)\n- [karma-typescript-es6-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-es6-transform)\n- [karma-typescript-postcss-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-postcss-transform)\n\n### Example output\n\n<img src=\"http://i.imgur.com/sc4Mswh.png\" width=\"580\" height=\"280\" />\n\n- [Angular2 screenshot](https://github.com/monounity/karma-typescript/blob/master/assets/angular2.png)\n- [React screenshot](https://github.com/monounity/karma-typescript/blob/master/assets/react.png)\n\n## Advanced configuration\n\nThe plugin has default settings for the compiler, instrumenting files and creating reports etc, which should suit most needs.\n\nThese are the default compiler settings:\n\n```javascript\nkarmaTypescriptConfig: {\n    compilerOptions: {\n        emitDecoratorMetadata: true,\n        experimentalDecorators: true,\n        jsx: \"react\",\n        module: \"commonjs\",\n        sourceMap: true,\n        target: \"ES5\"\n    },\n    exclude: [\"node_modules\"]\n}\n```\n\nThe default `karma-coverage` instrumentation settings:\n\n```javascript\nkarmaTypescriptConfig: {\n    coverageReporter: {\n        instrumenterOptions: {\n            istanbul: { noCompact: true }\n        }\n    }\n}\n```\n\nIf the defaults aren't enough, the settings can be configured from `karma.conf.js`:\n\n* **karmaTypescriptConfig.bundlerOptions.addNodeGlobals** - Boolean indicating whether the global variables\n  `process` and `Buffer` should be added to the bundle.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.bundlerOptions.constants** - An object literal with keys/values which will be available as global\n  variables in the bundle. The keys are expected to be strings and any non-string value will be stringified with `JSON.stringify`.\n\n  Configuration example:\n    ```javascript\n    constants: {\n        __STRING__: JSON.stringify(\"abc\" + 123),\n        __BOOLEAN__: true,\n        \"process.env\": {\n            \"VARIABLE\": \"value\"\n        }\n    }\n    ```\n  Code example:\n    ```javascript\n    declare var __STRING__: string;\n    declare var __BOOLEAN__: boolean;\n\n    console.log(__STRING__, __BOOLEAN__, process.env.VARIABLE);\n    ```\n\n* **karmaTypescriptConfig.bundlerOptions.entrypoints** - A `RegExp` filtering which files loaded by Karma should be executed in\n   a test run, for example only filenames ending with \".spec.ts\": `/\\.spec\\.ts$/`.<br/>\n   This setting can be used to make sure the specs have finished setting up the test environment before other code starts\n   requiring modules, which otherwise could lead to subtle bugs caused by race conditions.<br/>\n   When filtering file paths, beware that Windows uses `\\` while UNIX-like systems use `/` as path separator.<br/>\n   Defaults to all files, `/.*/`.\n\n* **karmaTypescriptConfig.bundlerOptions.exclude** - An array of npm module names that will be excluded from the bundle.\n\n* **karmaTypescriptConfig.bundlerOptions.ignore** - An array of npm module names that will be bundled as stubs, ie `module.exports = {};`.\n\n* **karmaTypescriptConfig.bundlerOptions.noParse** - An array of module names that will be bundled without being parsed for dependencies.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.alias** - An object literal where the key is a module name\n  and the value is a path that will be used when resolving the module.<br/>\n  The key is a string.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.extensions** - An array of file extensions to use, in order, when resolving modules.<br/>\n  Defaults to `[\".js\", \".json\", \".ts\", \".tsx\"]`.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.directories** - An array of directories where modules will be recursively looked up.<br/>\n  Defaults to `[\"node_modules\"]`.\n\n* **karmaTypescriptConfig.bundlerOptions.sourceMap** - A boolean indicating whether source maps should be generated for imported modules in the bundle, useful for debugging in a browser.\n  For more debugging options, please see `karmaTypescriptConfig.coverageOptions.instrumentation`.</br>\n  Defaults to `false`.\n\n* **karmaTypescriptConfig.bundlerOptions.transforms** - An array of functions altering or replacing compiled Typescript code/Javascript\n  code loaded from `node_modules` before bundling it.\n  For more detailed documentation on transforms, please refer to the [Transforms API section](#transforms-api) in this document.<br/>\n\n* **karmaTypescriptConfig.bundlerOptions.validateSyntax** - A boolean indicating whether the syntax of the bundled code should be validated.\n  Setting this to `false` may speed up bundling for large projects with lots of imports from `node_modules`.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.compilerDelay** - The number of milliseconds the compiler waits before compiling the project on each run.</br>\n  For projects with a large number of files it might be necessary to increase this value to make sure the compiler has collected all files before firing.</br>\n  Defaults to 250 ms.\n\n* **karmaTypescriptConfig.compilerOptions** - This setting will override or add to existing compiler options.<br/>\n  Valid options are the same as for the `compilerOptions` section in `tsconfig.json`, with the\n  exception of `outDir`and `outFile` which are ignored since the code is compiled in-memory.\n\n  If `noEmitOnError` is set to a truthy value, in either `tsconfig.json` or in `karmaTypescriptConfig.compilerOptions`,\n  the karma process will exit with `ts.ExitStatus.DiagnosticsPresent_OutputsSkipped` if any compilation errors occur.\n\n* **karmaTypescriptConfig.coverageOptions.instrumentation** - A boolean indicating whether the code should be instrumented,\n  set this property to `false` to see the original Typescript code when debugging.\n  Please note that setting this property to `true` requires the Typescript compiler option `sourceMap` to also be set to `true`.\n  For more debugging options, please see `karmaTypescriptConfig.coverageOptions.sourceMap`.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.coverageOptions.exclude** - A `RegExp` object or an array of `RegExp` objects for filtering which files should be excluded from coverage instrumentation.<br/>\n  When filtering file paths, beware that Windows uses `\\` while UNIX-like systems use `/` as path separator.<br/>\n  Defaults to `/\\.(d|spec|test)\\.ts$/i` which excludes &ast;.d.ts, &ast;.spec.ts and &ast;.test.ts (case insensitive).\n\n* **karmaTypescriptConfig.coverageOptions.threshold** - An object with minimum coverage thresholds. The threshold values can be set on\n  a global level and on a per-file level, with options to exclude files and directories, and override settings on a per-file basis using globbing patterns.<br/>\n  A positive value will be used as a minimum percentage, for example `statements: 50` means that at least 50% of the statements should be covered by a test.<br/>\n  A negative value will be used as a maximum number of uncovered items, for example `lines: 10` means that no more than 10 uncovered lines are allowed.\n    ```javascript\n    threshold: {\n        global: {\n            statements: 100,\n            branches: 100,\n            functions: -10,\n            lines: 100,\n            excludes: [\n                \"src/foo/**/*.js\"\n            ]\n        },\n        file: {\n            statements: -10,\n            branches: 100,\n            functions: 100,\n            lines: 100,\n            excludes: [\n                \"src/bar/**/*.js\"\n            ],\n            overrides: {\n                \"src/file.js\": {\n                    statements: 90\n                }\n            }\n        }\n    }\n    ```\n\n* **karmaTypescriptConfig.exclude** - File string patterns to be excluded by the compiler. This property may be an `array` or an `object` for more fine-grained control.\n  * Array: The string values will be merged with existing options.\n  * Object: The string values will be merged with or replace existing options:\n  ```javascript\n  {\n      mode: \"merge|replace\",\n      values: [\"foo\", \"bar\"]\n  }\n  ```\n  Defaults to `[\"node_modules\"]`.\n\n* **karmaTypescriptConfig.include** - File string patterns to be included by the compiler. This property may be an `array` or an `object` for more fine-grained control.\n  * Array: The string values will be merged with existing options.\n  * Object: The string values will be merged with or replace existing options:\n  ```javascript\n  {\n      mode: \"merge|replace\",\n      values: [\"foo\", \"bar\"]\n  }\n  ```\n  This option is available in Typescript ^2.0.0.\n\n* **karmaTypescriptConfig.remapOptions** - Pass options to `remap-istanbul`.\n\n    * Available options:\n\n        * `exclude`, a regex for excluding files from remapping\n        * `warn`, a function for handling error messages\n\n* **karmaTypescriptConfig.reports** - The types of coverage reports that should be created when running the tests,\n  defaults to an html report in the directory `./coverage`.\n  Reporters are configured as `\"reporttype\": destination` where the destination can be specified in three ways:\n\n    * A `string` with a directory path, for example `\"html\": \"coverage\"`.\n    * An empty string or `null`. Writes the output to the console, for example `\"text-summary\": \"\"`. This is only possible for a subset of the reports available.\n    * An `object` with more fine-grained control over path and filename:\n    ```javascript\n    \"cobertura\": {\n        \"directory\": \"coverage\",    // optional, defaults to 'coverage'\n        \"subdirectory\": \"cobertura\" // optional, defaults to the name of the browser running the tests\n        \"filename\": \"coverage.xml\", // optional, defaults to the report name\n    }\n\n    // \"subdirectory\" may also be a function that returns a directory from a given browser\n    \"cobertura\": {\n        \"directory\": \"coverage\",\n        \"subdirectory\": function(browser) {\n            // normalizes browser name directories to lowercase without version\n            // ex: coverage/chrome/coverage.xml\n            return browser.name.toLowerCase().split(' ')[0];\n        },\n        \"filename\": \"coverage.xml\"\n    }\n    ```\n\n    * Available report types:\n        * `\"clover\": destination`\n        * `\"cobertura\": destination`\n        * `\"html\": destination`\n        * `\"json-summary\": destination`\n        * `\"json\": destination`\n        * `\"lcovonly\": destination`\n        * `\"teamcity\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text-lcov\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text-summary\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text\": destination` (redirects to the console with destination \"\" or `null`)\n\n    * Example of the three destination types:\n    ```javascript\n    karmaTypescriptConfig: {\n        reports:\n        {\n            \"cobertura\": {\n                \"directory\": \"coverage\",\n                \"filename\": \"coverage.xml\",\n                \"subdirectory\": \"cobertura\"\n            },\n            \"html\": \"coverage\",\n            \"text-summary\": \"\"\n        }\n    }\n    ```\n\n* **karmaTypescriptConfig.transformPath** - A function for renaming compiled file extensions to `.js`.<br/>\n  Defaults to renaming `.ts` and `.tsx` to `.js`.\n\n* **karmaTypescriptConfig.tsconfig** - A path to a `tsconfig.json` file.<br/>\n  The default compiler options will be replaced by the options in this file.<br/>\n  The directory of the `tsconfig.json` file will be used as the base path for the Typescript compiler, and if `karmaTypescriptConfig.tsconfig` isn't set, the `basePath` property of the Karma config will be used as the\n  compiler base path instead.\n\nExample of a full `karmaTypescriptConfig` configuration:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        addNodeGlobals: true,\n        constants: {\n            __PRODUCTION__: false\n        },\n        entrypoints: /\\.spec\\.(ts|tsx)$/,\n        exclude: [\"react/addons\"],\n        ignore: [\"ws\"],\n        noParse: \"jquery\",\n        resolve: {\n            alias: {\n                \"@angular/upgrade/static$\": \"../bundles/upgrade-static.umd.js\"\n            },\n            extensions: [\".js\", \".json\"],\n            directories: [\"node_modules\"]\n        },\n        sourceMap: false,\n        transforms: [require(\"karma-typescript-es6-transform\")()],\n        validateSyntax: true\n    },\n    compilerDelay: 500,\n    compilerOptions: {\n        noImplicitAny: true,\n    },\n    coverageOptions: {\n        instrumentation: true,\n        exclude: /\\.(d|spec|test)\\.ts/i,\n        threshold: {\n            global: {\n                statements: 100,\n                branches: 100,\n                functions: -10,\n                lines: 100,\n                excludes: [\n                    \"src/foo/**/*.js\"\n                ]\n            },\n            file: {\n                statements: -10,\n                branches: 100,\n                functions: 100,\n                lines: 100,\n                excludes: [\n                    \"src/bar/**/*.js\"\n                ],\n                overrides: {\n                    \"src/file.js\": {\n                        statements: 90\n                    }\n                }\n            }\n        },\n    },\n    exclude: [\"broken\"],\n    include: {\n        mode: \"replace\",\n        values: [\"**/*.ts\"]\n    },\n    remapOptions: {\n        warn: function(message){\n            console.log(message);\n        }\n    },\n    reports: {\n        \"cobertura\": {\n            \"directory\": \"coverage\",\n            \"filename\": \"cobertura/coverage.xml\"\n        },\n        \"html\": \"coverage\",\n        \"text-summary\": \"\"\n    },\n    transformPath: function(filepath) {\n        return filepath.replace(/\\.(ts|tsx)$/, \".js\");\n    },\n    tsconfig: \"./tsconfig.json\"\n}\n```\n\n## Automatic bundling\n\nFiles executed in the test run are bundled into a main bundle, containing dependencies required from node_modules,\nand several smaller standalone bundles containing the Typescript files. All these bundles are tied together by `commonjs.js`,\nwhich acts as a hub, loading modules when they are required by other modules.\n\nAll files are bundled by being wrapped in a custom [CommonJS](https://en.wikipedia.org/wiki/CommonJS) wrapper,\nwhich emulates the Node.js module system by injecting the require function, the module object, the exports object,\nthe &#95;&#95;dirname variable and the &#95;&#95;filename variable.\n\nFor instance, this Typescript sample:\n\n```javascript\nexport function exportedFunction(): string {\n    return \"\";\n}\n```\n\nWould be compiled to the following JavaScript (assuming the compiler option `module` is set to `commonjs`):\n\n```javascript\nfunction exportedFunction() {\n    return \"\";\n}\nexports.exportedFunction = exportedFunction;\n```\n\nIt would then be wrapped in a `CommonJS` wrapper by the bundler:\n\n```javascript\n(function(global){\n    global.wrappers['/absolutepath/app/src/file.ts']=[function(require,module,exports,__dirname,__filename){\n        function exportedFunction() {\n            return \"\";\n        }\n        exports.exportedFunction = exportedFunction;\n    },'src/file.ts',{}];\n})(this);\n```\n\n*(In this example, the source map and a few other statements have been omitted for brevity and the wrapper has been formatted for readability)*\n\nAfter compilation, a simple static analysis is performed to find \"import\" and \"require\" statements in the code and if any\ndependencies are found, for instance `import { Component } from \"@angular/core\";`, it is added to the main bundle file along\nwith its dependencies.\n\nIf no import or require statements are found in any Typescript file included in the test run, or the compiler option `module`\nis set to another value than `commonjs`, *automatic bundling will not occur*.\n\nThis means that no Typescript file will be wrapped in the CommonJS wrapper and the reason behind this is the encapsulation that\nthe Node.js module system provides. If no module requests any other module, the test run would contain only isolated islands of\ncode unreachable from the global scope, there would be nothing to execute.\n\nHowever, this intentional behavior makes it possible to use karma-typescript for projects that use the Typescript module system,\nor have the compiler option `module` set to another value than `commonjs`, or simply put everything on the global scope.\n\n### Importing stylesheets and bundling for production\n\nStyle files (.css|.less|.sass|.scss) are served as JSON strings to the browser running the tests,\nallowing styles to be loaded using the Typescript import statement, ie `import \"./style/app.scss\";`.\n\nThis means styles can be imported in order to let, for instance, webpack load the styles with\nless-loader or scss-loader etc for bundling later on, without breaking the unit test runner.\n\nNote: JSON required by modules in node_modules will be loaded automatically by the bundler.\n\n### The module object\n\n```javascript\nmodule: {\n    exports: {},\n    id: \"project-relative-path/bar.ts\",\n    uri: \"/absolute-path/project-relative-path/bar.ts\"\n}\n```\n\nThe `module.id` will be calculated from the value of `module.uri`, relative to the Karma config `basePath` value.\n\nModules exporting an extensible object such as a *function* or an *object literal* will also be decorated with\na non-enumerable `default` property if `module.exports.default` is undefined.\n\n### Globals\n\nA full Node.js environment will be provided with global variables and browser shims for builtin core modules:\n\n* &#95;&#95;dirname\n* &#95;&#95;filename\n* Buffer\n* global\n* process\n\n### Browser shims\n* [assert](https://www.npmjs.com/package/assert)\n* [buffer](https://www.npmjs.com/package/buffer)\n* [console](https://www.npmjs.com/package/console-browserify)\n* [constants](https://www.npmjs.com/package/constants-browserify)\n* [crypto](https://www.npmjs.com/package/crypto-browserify)\n* [domain](https://www.npmjs.com/package/domain-browser)\n* [events](https://www.npmjs.com/package/events)\n* [http](https://www.npmjs.com/package/stream-http)\n* [https](https://www.npmjs.com/package/https-browserify)\n* [os](https://www.npmjs.com/package/os-browserify)\n* [path](https://www.npmjs.com/package/path-browserify)\n* [punycode](https://www.npmjs.com/package/punycode)\n* [querystring](https://www.npmjs.com/package/querystring-es3)\n* [stream](https://www.npmjs.com/package/stream-browserify)\n* [string_decoder](https://www.npmjs.com/package/string_decoder)\n* [timers](https://www.npmjs.com/package/timers-browserify)\n* [tty](https://www.npmjs.com/package/tty-browserify)\n* [url](https://www.npmjs.com/package/url)\n* [util](https://www.npmjs.com/package/util)\n* [vm](https://www.npmjs.com/package/vm-browserify)\n* [zlib](https://www.npmjs.com/package/browserify-zlib)\n\nThe plugin uses [browser-resolve](https://github.com/defunctzombie/node-browser-resolve) from the [browserify](https://github.com/substack/node-browserify) tool chain to load the source code from node_modules.\n\n### Mocking\nImported modules, local or npm packages, can be mocked using [karma-typescript-mock](https://www.npmjs.com/package/karma-typescript-mock). This feature is available in `karma-typescript@^3.0.5`.\n\n## Transforms API\n\nThe bundler has a public API which lets plugins alter or completely replace code before adding it to the bundle.\nFor example, a plugin could compile ES2015 JavaScript code to to ES5 syntax, making it possible to import an `npm` module\nwritten in ES2015 syntax from a Typescript module directly.\n\nThe interface between the bundler and the plugins is a plain array of functions, specified in the configuration property `karmaTypescriptConfig.bundlerOptions.transforms`, where each function is considered a transforming plugin.\n\nThe plugin functions in the transforms array are asynchronous and adhere to the Node.js callback convention where the first\nargument of the callback function is an `Error` object or `undefined` and the following parameters contains the result.\nHowever, although each function is asynchronous, all functions will be called *synchronously* one by one in the order they were added to the array, and each function will be called with the result of the previous function, enabling transforms plugin chaining.\n\nTransforms will be executed at two points in the bundling process: right after compilation of the project Typescript files\nand when resolving `import` and `require` statements. This means each transforming function will be called for both\nTypescript files and JavaScript files from `node_modules`, making each plugin implementation responsible for validating the\ncontext before performing any logic, for example by checking the file name, module name or the existence of an ast object etc.\n\nEach transforming function will be executed before resolving dependencies, which means paths in `import` or `require` statements\nor anywhere in the code can be rewritten before bundling, to fit the Karma execution environment. \n\nExample of a simple inline transforming function replacing the contents of a `.css` file, mimicking the behavior of Css Modules:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        transforms: [\n            function(context, callback) {\n                if(context.module === \"./main.css\") {\n                    context.source = \"module.exports = { color: red };\";\n                    return callback(undefined, true);\n                }\n                return callback(undefined, false);\n            }\n        ]\n    }\n}\n```\n\nIt is also possible to change the transpiled Typescript (ie the plain JavaScript code) code by using the third callback parameter to tell the Transforms API not to recompile the transpiled code:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        transforms: [\n            function(context, callback) {\n                if(context.ts) {\n                    context.ts.transpiled = \"\\n/* istanbul ignore next */\\n\" + context.ts.transpiled;\n                    return callback(undefined, true, false);\n                }\n                return callback(undefined, false);\n            }\n        ]\n    }\n}\n```\n\n### Context\nThe context object, `TransformContext`, is defined [here](https://github.com/monounity/karma-typescript/blob/master/src/api/transforms.ts).\n\n### Callback\n\nThe callback has two signatures, the \"boolean\" and the \"object\".\n\nThe boolean callback function has three arguments:\n1. An `Error` object or `undefined`\n2. A boolean indicating whether the value of `context.source` has changed or not.\n3. A boolean indicating whether the transformed source should be recompiled. Defaults to true and can be omitted.\n\nThe object callback function has two arguments:\n\n1. An `Error` object or `undefined`\n2. An object literal, which has the following properties:\n    1. A boolean indicating whether the value of `context.source` has changed or not.\n    2. A boolean indicating whether the transformed source should be recompiled (Typescript only!).\n    3. A boolean indicating whether a new AST should be created for the transformed source (JavaScript only!).\n\n## Requirements\n\nTypescript ^1.6.2 is required.\n\nVersions 1.6.2 - 1.7.5 work but aren't as heavily tested as versions 1.8.10 and up.\n\n## Troubleshooting\n\n### Error: Can not load \"karma-typescript\", it is not registered!\n\nUsers have reported success by simply deleting the `node_modules` folder and then running `npm install` again.\n\n### Error: Cannot find module 'buffer/' from '.'\n\n*Note: this error has been fixed in karma-typescript@^3.0.0`.*\n\nThis error seems to hit mostly users of with older versions of `npm`, where all dependencies don't get pulled in automatically by `npm`.\n\nThere's a workaround reported by users, which is simply adding the missing dependencies explicitly to `package.json`:\n\n * `npm install --save-dev browser-resolve`\n * `npm install --save-dev buffer`\n * `npm install --save-dev process`\n\nOther workarounds are running `npm install` twice or, if possible, upgrading to a newer version of `npm`.\n\nThese are the environments reported failing/working:\n\n|Npm|Node.js|OS|Works|\n|---|---|---|---|\n|2.5.18|4.4.7|Unknown|No|\n|2.14.7|4.2.1|Ubuntu 14.04|No|\n|2.14.12|4.2.6|OSX 10.11.3|No|\n|2.15.9|4.5.0|OSX 10.11.6|No|\n|2.15.9|4.6.0|OSX 10.12.3|No|\n|2.15.11|4.6.2|Ubuntu 14.04|No|\n|2.15.11|4.7.0|Ubuntu 14.04|Yes|\n|3.5.3|4.2.1|Windows 10|Yes|\n|3.8.6|6.10.0|Windows Server 2012 R2|Yes|\n|3.10.3|6.4.0|OSX 10.11.6|Yes|\n|3.10.9|6.9.2|Ubuntu 14.04|Yes|\n|4.0.5|6.4.0|OSX 10.11.6|Yes|\n|4.1.2|7.5.0|OSX 10.12.2|No|\n|4.1.2|7.7.3|Ubuntu 14.04|Yes|\n\n## Licensing\n\nThis software is licensed with the MIT license.\n\n© 2016-2018 Erik Barke, Monounity\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@4.0.0-beta.1",
      "_npmVersion": "6.5.0",
      "_nodeVersion": "10.14.2",
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "dist": {
        "integrity": "sha512-7SemN8IkuGL1bOzuNla2D+3TsaQ81MxuzXeYUEhYwHjx62p3WS5xu2lzgf5S3Amj2SJKU4VJ0K70VFN8YPJh+Q==",
        "shasum": "b52bd42dfcc6b4d53452184c170e12b52ab1624a",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-4.0.0-beta.1.tgz",
        "fileCount": 112,
        "unpackedSize": 338981,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcJovvCRA9TVsSAnZWagAAP40P/3H8Q05VLPaEn6P28hvj\nrxp29MKgSWUr4jMMs7uJNRi70SXogPi7/pGTuvxENZjsgCfjI3cZQ3bWSjUI\nvz6ajrQ2kAOB3itiMBqf796cf0oIbf4awcEujy1G39RjpWKMBHVI29is0WVW\nSVs2UT2uEfQ9rL5uNo0W1keMWqHP9AVjp20eEP1UZoVPCn2t0jl/fL0A+UFK\n7xwTmt1urbvSEEuXjcJSiRnk5kvUTIMdb2RWC4S6tMFWN9hL8LQMXsQLMqMq\ntaTQXo+uMrxJMiFbCc9KN/u1R0KoFjBNxCAPdg1f4FPZTxgkAWlgERJxqc66\nJCI4nr45yugl753IklaOY6F/O5kEqOdh/pFC4aRvZPRI7d2jkFk0Um90DKGo\nFyry4p0hMloxxsf8sByGl6Jhe1A95pRNNGz6S49KEF3Hw9hcbgel8EjdIAEA\nApPXwNQLzGrKSi4Afj4G3EuQsZJ316f7YIrwPZ8RMwXpFBENYKkC4+p2bPu3\neZktemOt9qYrutcdeOlf9cy/6WhTkcD+KT7wielcNGyjvLFh8AKOH37xg5dx\n2p8ZiDPyCZu6cc2J50jbBWEbeTdPoQ93m86suryEnORROZ2xt4ze6h22huwa\n77EA2YXI6aywkQk6AA9xTHz0AJrSi5gTuOZwFAE2W6+qsFaRwULXtB8z1xMZ\n6i8k\r\n=EgNs\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIErhT/4RcLk2iD/LAgkzLOJAzvUKGmLMTT2gxp8uo8n6AiEAxlT3wE7iXkqZmOw5gTH/AP23WfijxjuaMri7Hp1DBtA="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_4.0.0-beta.1_1546030062334_0.5557716309520992"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-beta.2": {
      "name": "karma-typescript",
      "version": "4.0.0-beta.2",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "tslint --project tsconfig.json",
        "build": "tsc --rootDir ./src",
        "test": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^6.0.2",
        "acorn-walk": "^6.1.0",
        "assert": "^1.4.1",
        "async": "^2.1.4",
        "browser-resolve": "^1.11.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.0.6",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.5.0",
        "crypto-browserify": "^3.11.1",
        "diff": "^3.2.0",
        "domain-browser": "^1.1.7",
        "events": "^3.0.0",
        "glob": "^7.1.1",
        "https-browserify": "^1.0.0",
        "istanbul": "0.4.5",
        "json-stringify-safe": "^5.0.1",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.11",
        "log4js": "^3.0.6",
        "minimatch": "^3.0.3",
        "os-browserify": "^0.3.0",
        "pad": "^2.0.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.0.6",
        "remap-istanbul": "^0.12.0",
        "source-map": "^0.7.3",
        "stream-browserify": "^2.0.1",
        "stream-http": "^3.0.0",
        "string_decoder": "^1.0.3",
        "timers-browserify": "^2.0.2",
        "tmp": "^0.0.33",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.11.0",
        "vm-browserify": "1.1.0"
      },
      "devDependencies": {
        "@types/async": "^2.0.44",
        "@types/browser-resolve": "0.0.5",
        "@types/combine-source-map": "^0.8.0",
        "@types/convert-source-map": "^1.3.33",
        "@types/diff": "3.5.1",
        "@types/glob": "^7.1.1",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^3.0.0",
        "@types/lodash": "^4.14.117",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^10.12.2",
        "@types/pad": "^1.0.0",
        "@types/sinon": "^5.0.5",
        "@types/tape": "^4.2.32",
        "@types/tmp": "^0.0.33",
        "cli-clear": "^1.0.4",
        "faucet": "0.0.1",
        "mock-require": "^3.0.2",
        "puppeteer": "^1.1.1",
        "tape": "^4.6.3",
        "tslint": "^5.11.0",
        "tslint-eslint-rules": "^5.4.0",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3",
        "typescript": "1 || 2 || 3"
      },
      "readme": "# karma-typescript\n\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Version\" src=\"https://img.shields.io/npm/v/karma-typescript.svg\"></a>\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Total Downloads\" src=\"https://img.shields.io/npm/dt/karma-typescript.svg\"></a>\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Monthly Downloads\" src=\"https://img.shields.io/npm/dm/karma-typescript.svg\"></a>\n<a href=\"https://travis-ci.org/monounity/karma-typescript\"><img alt=\"Travis Status\" src=\"https://img.shields.io/travis/monounity/karma-typescript/master.svg?label=travis\"></a>\n<a href=\"https://ci.appveyor.com/project/monounity/karma-typescript\"><img alt=\"Appveyor Status\" src=\"https://img.shields.io/appveyor/ci/monounity/karma-typescript/master.svg?label=appveyor\"></a>\n\n> Karma :heart: Typescript\n\n* Run unit tests written in Typescript with full type checking, seamlessly without extra build steps or scripts.\n* Get remapped test coverage with [karma-coverage](https://github.com/karma-runner/karma-coverage) and [Istanbul](https://github.com/gotwarlost/istanbul).\n* Use plain Typescript or a framework: Angular2, AngularJS, React, Sinon, any framework of choice.\n\n## Installation\n\nThe easiest way is to keep `karma-typescript` as a devDependency in `package.json`:\n\n```json\n{\n  \"devDependencies\": {\n    \"karma\": \"^3.0.0\",\n    \"karma-typescript\": \"4.0.0-beta.2\"\n  }\n}\n```\n\nDo this by installing the plugin via npm:\n\n```\nnpm install --save-dev karma-typescript\n```\n\n## Configuration\n\nBare minimum configuration can be achieved with the following `karma.conf.js` file:\n\n```javascript\nmodule.exports = function(config) {\n    config.set({\n        frameworks: [\"jasmine\", \"karma-typescript\"],\n        files: [\n            \"src/**/*.ts\" // *.tsx for React Jsx\n        ],\n        preprocessors: {\n            \"**/*.ts\": \"karma-typescript\" // *.tsx for React Jsx\n        },\n        reporters: [\"progress\", \"karma-typescript\"],\n        browsers: [\"Chrome\"]\n    });\n};\n```\n\nThe above example will compile all Typescript files and run the unit tests, producing remapped coverage in `./coverage`.\n\n## Examples\n\n[Cookbook](https://github.com/monounity/karma-typescript/tree/master/cookbook.md)\n\n### Frameworks and Integrations\n\n- [Angular2](https://github.com/monounity/karma-typescript/tree/master/examples/angular2)\n- [AngularJS](https://github.com/monounity/karma-typescript/tree/master/examples/angularjs)\n- [Docker](https://github.com/monounity/karma-typescript/tree/master/examples/docker)\n- [Gulp](https://github.com/monounity/karma-typescript/tree/master/examples/gulp)\n- [Mocha](https://github.com/monounity/karma-typescript/tree/master/examples/mocha)\n\n### Other examples\n\n- Typescript [1.8.10 to ^2.0.0](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-latest)\n- Typescript [1.6.2 to 1.7.5](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-1.6.2)\n- Typescript [1.8.10](https://github.com/monounity/karma-typescript/tree/master/tests/integration-1.8.10/src)\n- Typescript [@latest](https://github.com/monounity/karma-typescript/tree/master/tests/integration-latest/src)\n\n### Sample applications by users\n- [Hybrid app, code in JavaScript and tests in Typescript](https://github.com/adrianmarinica/karma-typescript-angularjs-sample)\n\n## Transforms:\n- [karma-typescript-angular2-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-angular2-transform)\n- [karma-typescript-cssmodules-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-cssmodules-transform)\n- [karma-typescript-es6-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-es6-transform)\n- [karma-typescript-postcss-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-postcss-transform)\n\n### Example output\n\n<img src=\"http://i.imgur.com/sc4Mswh.png\" width=\"580\" height=\"280\" />\n\n- [Angular2 screenshot](https://github.com/monounity/karma-typescript/blob/master/assets/angular2.png)\n- [React screenshot](https://github.com/monounity/karma-typescript/blob/master/assets/react.png)\n\n## Advanced configuration\n\nThe plugin has default settings for the compiler, instrumenting files and creating reports etc, which should suit most needs.\n\nThese are the default compiler settings:\n\n```javascript\nkarmaTypescriptConfig: {\n    compilerOptions: {\n        emitDecoratorMetadata: true,\n        experimentalDecorators: true,\n        jsx: \"react\",\n        module: \"commonjs\",\n        sourceMap: true,\n        target: \"ES5\"\n    },\n    exclude: [\"node_modules\"]\n}\n```\n\nThe default `karma-coverage` instrumentation settings:\n\n```javascript\nkarmaTypescriptConfig: {\n    coverageReporter: {\n        instrumenterOptions: {\n            istanbul: { noCompact: true }\n        }\n    }\n}\n```\n\nIf the defaults aren't enough, the settings can be configured from `karma.conf.js`:\n\n* **karmaTypescriptConfig.bundlerOptions.addNodeGlobals** - Boolean indicating whether the global variables\n  `process` and `Buffer` should be added to the bundle.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.bundlerOptions.constants** - An object literal with keys/values which will be available as global\n  variables in the bundle. The keys are expected to be strings and any non-string value will be stringified with `JSON.stringify`.\n\n  Configuration example:\n    ```javascript\n    constants: {\n        __STRING__: JSON.stringify(\"abc\" + 123),\n        __BOOLEAN__: true,\n        \"process.env\": {\n            \"VARIABLE\": \"value\"\n        }\n    }\n    ```\n  Code example:\n    ```javascript\n    declare var __STRING__: string;\n    declare var __BOOLEAN__: boolean;\n\n    console.log(__STRING__, __BOOLEAN__, process.env.VARIABLE);\n    ```\n\n* **karmaTypescriptConfig.bundlerOptions.entrypoints** - A `RegExp` filtering which files loaded by Karma should be executed in\n   a test run, for example only filenames ending with \".spec.ts\": `/\\.spec\\.ts$/`.<br/>\n   This setting can be used to make sure the specs have finished setting up the test environment before other code starts\n   requiring modules, which otherwise could lead to subtle bugs caused by race conditions.<br/>\n   When filtering file paths, beware that Windows uses `\\` while UNIX-like systems use `/` as path separator.<br/>\n   Defaults to all files, `/.*/`.\n\n* **karmaTypescriptConfig.bundlerOptions.exclude** - An array of npm module names that will be excluded from the bundle.\n\n* **karmaTypescriptConfig.bundlerOptions.ignore** - An array of npm module names that will be bundled as stubs, ie `module.exports = {};`.\n\n* **karmaTypescriptConfig.bundlerOptions.noParse** - An array of module names that will be bundled without being parsed for dependencies.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.alias** - An object literal where the key is a module name\n  and the value is a path that will be used when resolving the module.<br/>\n  The key is a string.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.extensions** - An array of file extensions to use, in order, when resolving modules.<br/>\n  Defaults to `[\".js\", \".json\", \".ts\", \".tsx\"]`.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.directories** - An array of directories where modules will be recursively looked up.<br/>\n  Defaults to `[\"node_modules\"]`.\n\n* **karmaTypescriptConfig.bundlerOptions.sourceMap** - A boolean indicating whether source maps should be generated for imported modules in the bundle, useful for debugging in a browser.\n  For more debugging options, please see `karmaTypescriptConfig.coverageOptions.instrumentation`.</br>\n  Defaults to `false`.\n\n* **karmaTypescriptConfig.bundlerOptions.transforms** - An array of functions altering or replacing compiled Typescript code/Javascript\n  code loaded from `node_modules` before bundling it.\n  For more detailed documentation on transforms, please refer to the [Transforms API section](#transforms-api) in this document.<br/>\n\n* **karmaTypescriptConfig.bundlerOptions.validateSyntax** - A boolean indicating whether the syntax of the bundled code should be validated.\n  Setting this to `false` may speed up bundling for large projects with lots of imports from `node_modules`.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.compilerDelay** - The number of milliseconds the compiler waits before compiling the project on each run.</br>\n  For projects with a large number of files it might be necessary to increase this value to make sure the compiler has collected all files before firing.</br>\n  Defaults to 250 ms.\n\n* **karmaTypescriptConfig.compilerOptions** - This setting will override or add to existing compiler options.<br/>\n  Valid options are the same as for the `compilerOptions` section in `tsconfig.json`, with the\n  exception of `outDir`and `outFile` which are ignored since the code is compiled in-memory.\n\n  If `noEmitOnError` is set to a truthy value, in either `tsconfig.json` or in `karmaTypescriptConfig.compilerOptions`,\n  the karma process will exit with `ts.ExitStatus.DiagnosticsPresent_OutputsSkipped` if any compilation errors occur.\n\n* **karmaTypescriptConfig.coverageOptions.instrumentation** - A boolean indicating whether the code should be instrumented,\n  set this property to `false` to see the original Typescript code when debugging.\n  Please note that setting this property to `true` requires the Typescript compiler option `sourceMap` to also be set to `true`.\n  For more debugging options, please see `karmaTypescriptConfig.coverageOptions.sourceMap`.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.coverageOptions.exclude** - A `RegExp` object or an array of `RegExp` objects for filtering which files should be excluded from coverage instrumentation.<br/>\n  When filtering file paths, beware that Windows uses `\\` while UNIX-like systems use `/` as path separator.<br/>\n  Defaults to `/\\.(d|spec|test)\\.ts$/i` which excludes &ast;.d.ts, &ast;.spec.ts and &ast;.test.ts (case insensitive).\n\n* **karmaTypescriptConfig.coverageOptions.threshold** - An object with minimum coverage thresholds. The threshold values can be set on\n  a global level and on a per-file level, with options to exclude files and directories, and override settings on a per-file basis using globbing patterns.<br/>\n  A positive value will be used as a minimum percentage, for example `statements: 50` means that at least 50% of the statements should be covered by a test.<br/>\n  A negative value will be used as a maximum number of uncovered items, for example `lines: 10` means that no more than 10 uncovered lines are allowed.\n    ```javascript\n    threshold: {\n        global: {\n            statements: 100,\n            branches: 100,\n            functions: -10,\n            lines: 100,\n            excludes: [\n                \"src/foo/**/*.js\"\n            ]\n        },\n        file: {\n            statements: -10,\n            branches: 100,\n            functions: 100,\n            lines: 100,\n            excludes: [\n                \"src/bar/**/*.js\"\n            ],\n            overrides: {\n                \"src/file.js\": {\n                    statements: 90\n                }\n            }\n        }\n    }\n    ```\n\n* **karmaTypescriptConfig.exclude** - File string patterns to be excluded by the compiler. This property may be an `array` or an `object` for more fine-grained control.\n  * Array: The string values will be merged with existing options.\n  * Object: The string values will be merged with or replace existing options:\n  ```javascript\n  {\n      mode: \"merge|replace\",\n      values: [\"foo\", \"bar\"]\n  }\n  ```\n  Defaults to `[\"node_modules\"]`.\n\n* **karmaTypescriptConfig.include** - File string patterns to be included by the compiler. This property may be an `array` or an `object` for more fine-grained control.\n  * Array: The string values will be merged with existing options.\n  * Object: The string values will be merged with or replace existing options:\n  ```javascript\n  {\n      mode: \"merge|replace\",\n      values: [\"foo\", \"bar\"]\n  }\n  ```\n  This option is available in Typescript ^2.0.0.\n\n* **karmaTypescriptConfig.remapOptions** - Pass options to `remap-istanbul`.\n\n    * Available options:\n\n        * `exclude`, a regex for excluding files from remapping\n        * `warn`, a function for handling error messages\n\n* **karmaTypescriptConfig.reports** - The types of coverage reports that should be created when running the tests,\n  defaults to an html report in the directory `./coverage`.\n  Reporters are configured as `\"reporttype\": destination` where the destination can be specified in three ways:\n\n    * A `string` with a directory path, for example `\"html\": \"coverage\"`.\n    * An empty string or `null`. Writes the output to the console, for example `\"text-summary\": \"\"`. This is only possible for a subset of the reports available.\n    * An `object` with more fine-grained control over path and filename:\n    ```javascript\n    \"cobertura\": {\n        \"directory\": \"coverage\",    // optional, defaults to 'coverage'\n        \"subdirectory\": \"cobertura\" // optional, defaults to the name of the browser running the tests\n        \"filename\": \"coverage.xml\", // optional, defaults to the report name\n    }\n\n    // \"subdirectory\" may also be a function that returns a directory from a given browser\n    \"cobertura\": {\n        \"directory\": \"coverage\",\n        \"subdirectory\": function(browser) {\n            // normalizes browser name directories to lowercase without version\n            // ex: coverage/chrome/coverage.xml\n            return browser.name.toLowerCase().split(' ')[0];\n        },\n        \"filename\": \"coverage.xml\"\n    }\n    ```\n\n    * Available report types:\n        * `\"clover\": destination`\n        * `\"cobertura\": destination`\n        * `\"html\": destination`\n        * `\"json-summary\": destination`\n        * `\"json\": destination`\n        * `\"lcovonly\": destination`\n        * `\"teamcity\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text-lcov\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text-summary\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text\": destination` (redirects to the console with destination \"\" or `null`)\n\n    * Example of the three destination types:\n    ```javascript\n    karmaTypescriptConfig: {\n        reports:\n        {\n            \"cobertura\": {\n                \"directory\": \"coverage\",\n                \"filename\": \"coverage.xml\",\n                \"subdirectory\": \"cobertura\"\n            },\n            \"html\": \"coverage\",\n            \"text-summary\": \"\"\n        }\n    }\n    ```\n\n* **karmaTypescriptConfig.transformPath** - A function for renaming compiled file extensions to `.js`.<br/>\n  Defaults to renaming `.ts` and `.tsx` to `.js`.\n\n* **karmaTypescriptConfig.tsconfig** - A path to a `tsconfig.json` file.<br/>\n  The default compiler options will be replaced by the options in this file.<br/>\n  The directory of the `tsconfig.json` file will be used as the base path for the Typescript compiler, and if `karmaTypescriptConfig.tsconfig` isn't set, the `basePath` property of the Karma config will be used as the\n  compiler base path instead.\n\nExample of a full `karmaTypescriptConfig` configuration:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        addNodeGlobals: true,\n        constants: {\n            __PRODUCTION__: false\n        },\n        entrypoints: /\\.spec\\.(ts|tsx)$/,\n        exclude: [\"react/addons\"],\n        ignore: [\"ws\"],\n        noParse: \"jquery\",\n        resolve: {\n            alias: {\n                \"@angular/upgrade/static$\": \"../bundles/upgrade-static.umd.js\"\n            },\n            extensions: [\".js\", \".json\"],\n            directories: [\"node_modules\"]\n        },\n        sourceMap: false,\n        transforms: [require(\"karma-typescript-es6-transform\")()],\n        validateSyntax: true\n    },\n    compilerDelay: 500,\n    compilerOptions: {\n        noImplicitAny: true,\n    },\n    coverageOptions: {\n        instrumentation: true,\n        exclude: /\\.(d|spec|test)\\.ts/i,\n        threshold: {\n            global: {\n                statements: 100,\n                branches: 100,\n                functions: -10,\n                lines: 100,\n                excludes: [\n                    \"src/foo/**/*.js\"\n                ]\n            },\n            file: {\n                statements: -10,\n                branches: 100,\n                functions: 100,\n                lines: 100,\n                excludes: [\n                    \"src/bar/**/*.js\"\n                ],\n                overrides: {\n                    \"src/file.js\": {\n                        statements: 90\n                    }\n                }\n            }\n        },\n    },\n    exclude: [\"broken\"],\n    include: {\n        mode: \"replace\",\n        values: [\"**/*.ts\"]\n    },\n    remapOptions: {\n        warn: function(message){\n            console.log(message);\n        }\n    },\n    reports: {\n        \"cobertura\": {\n            \"directory\": \"coverage\",\n            \"filename\": \"cobertura/coverage.xml\"\n        },\n        \"html\": \"coverage\",\n        \"text-summary\": \"\"\n    },\n    transformPath: function(filepath) {\n        return filepath.replace(/\\.(ts|tsx)$/, \".js\");\n    },\n    tsconfig: \"./tsconfig.json\"\n}\n```\n\n## Automatic bundling\n\nFiles executed in the test run are bundled into a main bundle, containing dependencies required from node_modules,\nand several smaller standalone bundles containing the Typescript files. All these bundles are tied together by `commonjs.js`,\nwhich acts as a hub, loading modules when they are required by other modules.\n\nAll files are bundled by being wrapped in a custom [CommonJS](https://en.wikipedia.org/wiki/CommonJS) wrapper,\nwhich emulates the Node.js module system by injecting the require function, the module object, the exports object,\nthe &#95;&#95;dirname variable and the &#95;&#95;filename variable.\n\nFor instance, this Typescript sample:\n\n```javascript\nexport function exportedFunction(): string {\n    return \"\";\n}\n```\n\nWould be compiled to the following JavaScript (assuming the compiler option `module` is set to `commonjs`):\n\n```javascript\nfunction exportedFunction() {\n    return \"\";\n}\nexports.exportedFunction = exportedFunction;\n```\n\nIt would then be wrapped in a `CommonJS` wrapper by the bundler:\n\n```javascript\n(function(global){\n    global.wrappers['/absolutepath/app/src/file.ts']=[function(require,module,exports,__dirname,__filename){\n        function exportedFunction() {\n            return \"\";\n        }\n        exports.exportedFunction = exportedFunction;\n    },'src/file.ts',{}];\n})(this);\n```\n\n*(In this example, the source map and a few other statements have been omitted for brevity and the wrapper has been formatted for readability)*\n\nAfter compilation, a simple static analysis is performed to find \"import\" and \"require\" statements in the code and if any\ndependencies are found, for instance `import { Component } from \"@angular/core\";`, it is added to the main bundle file along\nwith its dependencies.\n\nIf no import or require statements are found in any Typescript file included in the test run, or the compiler option `module`\nis set to another value than `commonjs`, *automatic bundling will not occur*.\n\nThis means that no Typescript file will be wrapped in the CommonJS wrapper and the reason behind this is the encapsulation that\nthe Node.js module system provides. If no module requests any other module, the test run would contain only isolated islands of\ncode unreachable from the global scope, there would be nothing to execute.\n\nHowever, this intentional behavior makes it possible to use karma-typescript for projects that use the Typescript module system,\nor have the compiler option `module` set to another value than `commonjs`, or simply put everything on the global scope.\n\n### Importing stylesheets and bundling for production\n\nStyle files (.css|.less|.sass|.scss) are served as JSON strings to the browser running the tests,\nallowing styles to be loaded using the Typescript import statement, ie `import \"./style/app.scss\";`.\n\nThis means styles can be imported in order to let, for instance, webpack load the styles with\nless-loader or scss-loader etc for bundling later on, without breaking the unit test runner.\n\nNote: JSON required by modules in node_modules will be loaded automatically by the bundler.\n\n### The module object\n\n```javascript\nmodule: {\n    exports: {},\n    id: \"project-relative-path/bar.ts\",\n    uri: \"/absolute-path/project-relative-path/bar.ts\"\n}\n```\n\nThe `module.id` will be calculated from the value of `module.uri`, relative to the Karma config `basePath` value.\n\nModules exporting an extensible object such as a *function* or an *object literal* will also be decorated with\na non-enumerable `default` property if `module.exports.default` is undefined.\n\n### Globals\n\nA full Node.js environment will be provided with global variables and browser shims for builtin core modules:\n\n* &#95;&#95;dirname\n* &#95;&#95;filename\n* Buffer\n* global\n* process\n\n### Browser shims\n* [assert](https://www.npmjs.com/package/assert)\n* [buffer](https://www.npmjs.com/package/buffer)\n* [console](https://www.npmjs.com/package/console-browserify)\n* [constants](https://www.npmjs.com/package/constants-browserify)\n* [crypto](https://www.npmjs.com/package/crypto-browserify)\n* [domain](https://www.npmjs.com/package/domain-browser)\n* [events](https://www.npmjs.com/package/events)\n* [http](https://www.npmjs.com/package/stream-http)\n* [https](https://www.npmjs.com/package/https-browserify)\n* [os](https://www.npmjs.com/package/os-browserify)\n* [path](https://www.npmjs.com/package/path-browserify)\n* [punycode](https://www.npmjs.com/package/punycode)\n* [querystring](https://www.npmjs.com/package/querystring-es3)\n* [stream](https://www.npmjs.com/package/stream-browserify)\n* [string_decoder](https://www.npmjs.com/package/string_decoder)\n* [timers](https://www.npmjs.com/package/timers-browserify)\n* [tty](https://www.npmjs.com/package/tty-browserify)\n* [url](https://www.npmjs.com/package/url)\n* [util](https://www.npmjs.com/package/util)\n* [vm](https://www.npmjs.com/package/vm-browserify)\n* [zlib](https://www.npmjs.com/package/browserify-zlib)\n\nThe plugin uses [browser-resolve](https://github.com/defunctzombie/node-browser-resolve) from the [browserify](https://github.com/substack/node-browserify) tool chain to load the source code from node_modules.\n\n### Mocking\nImported modules, local or npm packages, can be mocked using [karma-typescript-mock](https://www.npmjs.com/package/karma-typescript-mock). This feature is available in `karma-typescript@^3.0.5`.\n\n## Transforms API\n\nThe bundler has a public API which lets plugins alter or completely replace code before adding it to the bundle.\nFor example, a plugin could compile ES2015 JavaScript code to to ES5 syntax, making it possible to import an `npm` module\nwritten in ES2015 syntax from a Typescript module directly.\n\nThe interface between the bundler and the plugins is a plain array of functions, specified in the configuration property `karmaTypescriptConfig.bundlerOptions.transforms`, where each function is considered a transforming plugin.\n\nThe plugin functions in the transforms array are asynchronous and adhere to the Node.js callback convention where the first\nargument of the callback function is an `Error` object or `undefined` and the following parameters contains the result.\nHowever, although each function is asynchronous, all functions will be called *synchronously* one by one in the order they were added to the array, and each function will be called with the result of the previous function, enabling transforms plugin chaining.\n\nTransforms will be executed at two points in the bundling process: right after compilation of the project Typescript files\nand when resolving `import` and `require` statements. This means each transforming function will be called for both\nTypescript files and JavaScript files from `node_modules`, making each plugin implementation responsible for validating the\ncontext before performing any logic, for example by checking the file name, module name or the existence of an ast object etc.\n\nEach transforming function will be executed before resolving dependencies, which means paths in `import` or `require` statements\nor anywhere in the code can be rewritten before bundling, to fit the Karma execution environment. \n\nExample of a simple inline transforming function replacing the contents of a `.css` file, mimicking the behavior of Css Modules:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        transforms: [\n            function(context, callback) {\n                if(context.module === \"./main.css\") {\n                    context.source = \"module.exports = { color: red };\";\n                    return callback(undefined, true);\n                }\n                return callback(undefined, false);\n            }\n        ]\n    }\n}\n```\n\nIt is also possible to change the transpiled Typescript (ie the plain JavaScript code) code by using the third callback parameter to tell the Transforms API not to recompile the transpiled code:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        transforms: [\n            function(context, callback) {\n                if(context.ts) {\n                    context.ts.transpiled = \"\\n/* istanbul ignore next */\\n\" + context.ts.transpiled;\n                    return callback(undefined, true, false);\n                }\n                return callback(undefined, false);\n            }\n        ]\n    }\n}\n```\n\n### Context\nThe context object, `TransformContext`, is defined [here](https://github.com/monounity/karma-typescript/blob/master/src/api/transforms.ts).\n\n### Callback\n\nThe callback has two signatures, the \"boolean\" and the \"object\".\n\nThe boolean callback function has three arguments:\n1. An `Error` object or `undefined`\n2. A boolean indicating whether the value of `context.source` has changed or not.\n3. A boolean indicating whether the transformed source should be recompiled. Defaults to true and can be omitted.\n\nThe object callback function has two arguments:\n\n1. An `Error` object or `undefined`\n2. An object literal, which has the following properties:\n    1. A boolean indicating whether the value of `context.source` has changed or not.\n    2. A boolean indicating whether the transformed source should be recompiled (Typescript only!).\n    3. A boolean indicating whether a new AST should be created for the transformed source (JavaScript only!).\n\n## Requirements\n\nTypescript ^1.6.2 is required.\n\nVersions 1.6.2 - 1.7.5 work but aren't as heavily tested as versions 1.8.10 and up.\n\n## Troubleshooting\n\n### Error: Can not load \"karma-typescript\", it is not registered!\n\nUsers have reported success by simply deleting the `node_modules` folder and then running `npm install` again.\n\n### Error: Cannot find module 'buffer/' from '.'\n\n*Note: this error has been fixed in karma-typescript@^3.0.0`.*\n\nThis error seems to hit mostly users of with older versions of `npm`, where all dependencies don't get pulled in automatically by `npm`.\n\nThere's a workaround reported by users, which is simply adding the missing dependencies explicitly to `package.json`:\n\n * `npm install --save-dev browser-resolve`\n * `npm install --save-dev buffer`\n * `npm install --save-dev process`\n\nOther workarounds are running `npm install` twice or, if possible, upgrading to a newer version of `npm`.\n\nThese are the environments reported failing/working:\n\n|Npm|Node.js|OS|Works|\n|---|---|---|---|\n|2.5.18|4.4.7|Unknown|No|\n|2.14.7|4.2.1|Ubuntu 14.04|No|\n|2.14.12|4.2.6|OSX 10.11.3|No|\n|2.15.9|4.5.0|OSX 10.11.6|No|\n|2.15.9|4.6.0|OSX 10.12.3|No|\n|2.15.11|4.6.2|Ubuntu 14.04|No|\n|2.15.11|4.7.0|Ubuntu 14.04|Yes|\n|3.5.3|4.2.1|Windows 10|Yes|\n|3.8.6|6.10.0|Windows Server 2012 R2|Yes|\n|3.10.3|6.4.0|OSX 10.11.6|Yes|\n|3.10.9|6.9.2|Ubuntu 14.04|Yes|\n|4.0.5|6.4.0|OSX 10.11.6|Yes|\n|4.1.2|7.5.0|OSX 10.12.2|No|\n|4.1.2|7.7.3|Ubuntu 14.04|Yes|\n\n## Licensing\n\nThis software is licensed with the MIT license.\n\n© 2016-2019 Erik Barke, Monounity\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@4.0.0-beta.2",
      "_npmVersion": "6.5.0",
      "_nodeVersion": "10.14.2",
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "dist": {
        "integrity": "sha512-/R1JaY/SVLm0Dy/Xdbr7zj3RduOTG91eZdcsOESDrHZhzzVAZCaJ2pTeeb2p+4k8T16yXICsTZs+Vn+0tPqQKg==",
        "shasum": "3a64196b005b746628b3ba8fb297e4fd3372b524",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-4.0.0-beta.2.tgz",
        "fileCount": 112,
        "unpackedSize": 338993,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcLqVaCRA9TVsSAnZWagAA/EEQAIEbGH52+TIlczdH5sR9\ny5kuhdxJN4/T4MSuZUeDy3eGug6fVxtSg4GGRxCLmLfJ5wfRzLY7hO9ayLQH\n0IRWpOsjAtDxrm8Fc5R+oPnMKwODod5V9I0D85yZaxQhPM4wU4XQo3vKtveZ\nEkBQgmzU18oadtsg5dIEZKVfBI4VDbgUW3DP99KruZUuf8tUaCYjnA4HdbMq\nToOLmUggOTZgasxuDrHUkveyZIq88dEnc9e7v1bi0FgggA9zyi28XPWj71Jy\n6qgNILdZGAxv+DjWEOFYx2etbcz9uEsFG3Txm431Eo3DD1iCBuNcF/U/zxO9\ng6m+8ZtYLnRrsjy8TYDbJ0wlkWZtaz9y4ZbtjdpuC6tWgC6Y373S3QZHDyZF\nqZmwhWR01ig2sO7X3wO8nr2aqU3iveJkITK8MXBnkrbTdS6cZu1QnUnExLWP\n/G6ysV9IgQF69VeiMHyupP2h95KqwII4H5j0ojuYh6P8CmKFKu9fHWfdKcCn\n+rHjJ3VUl2RhTLKsnPXWjPr0iHLGmlW6GhVPJrMYIhRPwgs4HLuLe1h6vpVd\nqmtEi1LlUCQWDj0iCqZz0lQIO/D+UELD3emfYwzgdFmp0GNXGo0WVY9nwVzZ\nWiiXv06yMvp92daYRlOJlgNDLGKhyVRGzfwbNSM6RKILv4mrdFj7hR8tbksd\nwbry\r\n=tai+\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCxOrV0PlfOgEO15yE51yXluR3JpCFs/TTS7drx9NYZMQIhAI+Jv6LVdMprwvyFHDT/XGY8g2eqBWRR+mBTkXoBWI/K"
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_4.0.0-beta.2_1546560857968_0.34395416227579134"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0-beta.3": {
      "name": "karma-typescript",
      "version": "4.0.0-beta.3",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "tslint --project tsconfig.json",
        "build": "tsc --rootDir ./src",
        "test": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^6.0.2",
        "acorn-walk": "^6.1.0",
        "assert": "^1.4.1",
        "async": "^2.1.4",
        "browser-resolve": "^1.11.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.0.6",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.5.0",
        "crypto-browserify": "^3.11.1",
        "diff": "^4.0.1",
        "domain-browser": "^1.1.7",
        "events": "^3.0.0",
        "glob": "^7.1.1",
        "https-browserify": "^1.0.0",
        "istanbul": "0.4.5",
        "json-stringify-safe": "^5.0.1",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.11",
        "log4js": "^3.0.6",
        "minimatch": "^3.0.3",
        "os-browserify": "^0.3.0",
        "pad": "^2.0.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.0.6",
        "remap-istanbul": "^0.13.0",
        "source-map": "^0.7.3",
        "stream-browserify": "^2.0.1",
        "stream-http": "^3.0.0",
        "string_decoder": "^1.0.3",
        "timers-browserify": "^2.0.2",
        "tmp": "^0.0.33",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.11.0",
        "vm-browserify": "1.1.0"
      },
      "devDependencies": {
        "@types/async": "^2.0.44",
        "@types/browser-resolve": "0.0.5",
        "@types/combine-source-map": "^0.8.0",
        "@types/convert-source-map": "^1.3.33",
        "@types/diff": "3.5.1",
        "@types/glob": "^7.1.1",
        "@types/istanbul": "^0.4.29",
        "@types/karma": "^3.0.0",
        "@types/lodash": "^4.14.117",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^10.12.2",
        "@types/pad": "^1.0.0",
        "@types/sinon": "^5.0.5",
        "@types/tape": "^4.2.32",
        "@types/tmp": "^0.0.33",
        "cli-clear": "^1.0.4",
        "faucet": "0.0.1",
        "mock-require": "^3.0.2",
        "puppeteer": "^1.1.1",
        "tape": "^4.6.3",
        "tslint": "^5.11.0",
        "tslint-eslint-rules": "^5.4.0",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3",
        "typescript": "1 || 2 || 3"
      },
      "readme": "# karma-typescript\n\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Version\" src=\"https://img.shields.io/npm/v/karma-typescript.svg\"></a>\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Total Downloads\" src=\"https://img.shields.io/npm/dt/karma-typescript.svg\"></a>\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Monthly Downloads\" src=\"https://img.shields.io/npm/dm/karma-typescript.svg\"></a>\n<a href=\"https://travis-ci.org/monounity/karma-typescript\"><img alt=\"Travis Status\" src=\"https://img.shields.io/travis/monounity/karma-typescript/master.svg?label=travis\"></a>\n<a href=\"https://ci.appveyor.com/project/monounity/karma-typescript\"><img alt=\"Appveyor Status\" src=\"https://img.shields.io/appveyor/ci/monounity/karma-typescript/master.svg?label=appveyor\"></a>\n\n> Karma :heart: Typescript\n\n* Run unit tests written in Typescript with full type checking, seamlessly without extra build steps or scripts.\n* Get remapped test coverage with [karma-coverage](https://github.com/karma-runner/karma-coverage) and [Istanbul](https://github.com/gotwarlost/istanbul).\n* Use plain Typescript or a framework: Angular2, AngularJS, React, Sinon, any framework of choice.\n\n## Installation\n\nThe easiest way is to keep `karma-typescript` as a devDependency in `package.json`:\n\n```json\n{\n  \"devDependencies\": {\n    \"karma\": \"^3.0.0\",\n    \"karma-typescript\": \"4.0.0-beta.3\"\n  }\n}\n```\n\nDo this by installing the plugin via npm:\n\n```\nnpm install --save-dev karma-typescript\n```\n\n## Configuration\n\nBare minimum configuration can be achieved with the following `karma.conf.js` file:\n\n```javascript\nmodule.exports = function(config) {\n    config.set({\n        frameworks: [\"jasmine\", \"karma-typescript\"],\n        files: [\n            \"src/**/*.ts\" // *.tsx for React Jsx\n        ],\n        preprocessors: {\n            \"**/*.ts\": \"karma-typescript\" // *.tsx for React Jsx\n        },\n        reporters: [\"progress\", \"karma-typescript\"],\n        browsers: [\"Chrome\"]\n    });\n};\n```\n\nThe above example will compile all Typescript files and run the unit tests, producing remapped coverage in `./coverage`.\n\n## Examples\n\n[Cookbook](https://github.com/monounity/karma-typescript/blob/master/packages/karma-typescript/cookbook.md)\n\n### Frameworks and Integrations\n\n- [Angular2](https://github.com/monounity/karma-typescript/tree/master/examples/angular2)\n- [AngularJS](https://github.com/monounity/karma-typescript/tree/master/examples/angularjs)\n- [Docker](https://github.com/monounity/karma-typescript/tree/master/examples/docker)\n- [Gulp](https://github.com/monounity/karma-typescript/tree/master/examples/gulp)\n- [Mocha](https://github.com/monounity/karma-typescript/tree/master/examples/mocha)\n\n### Other examples\n\n- Typescript [1.8.10 to ^2.0.0](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-latest)\n- Typescript [1.6.2 to 1.7.5](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-1.6.2)\n- Typescript [1.8.10](https://github.com/monounity/karma-typescript/tree/master/tests/integration-1.8.10/src)\n- Typescript [@latest](https://github.com/monounity/karma-typescript/tree/master/tests/integration-latest/src)\n\n### Sample applications by users\n- [Hybrid app, code in JavaScript and tests in Typescript](https://github.com/adrianmarinica/karma-typescript-angularjs-sample)\n\n## Transforms:\n- [karma-typescript-angular2-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-angular2-transform)\n- [karma-typescript-cssmodules-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-cssmodules-transform)\n- [karma-typescript-es6-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-es6-transform)\n- [karma-typescript-postcss-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-postcss-transform)\n\n### Example output\n\n<img src=\"http://i.imgur.com/sc4Mswh.png\" width=\"580\" height=\"280\" />\n\n- [Angular2 screenshot](https://github.com/monounity/karma-typescript/blob/master/assets/angular2.png)\n- [React screenshot](https://github.com/monounity/karma-typescript/blob/master/assets/react.png)\n\n## Advanced configuration\n\nThe plugin has default settings for the compiler, instrumenting files and creating reports etc, which should suit most needs.\n\nThese are the default compiler settings:\n\n```javascript\nkarmaTypescriptConfig: {\n    compilerOptions: {\n        emitDecoratorMetadata: true,\n        experimentalDecorators: true,\n        jsx: \"react\",\n        module: \"commonjs\",\n        sourceMap: true,\n        target: \"ES5\"\n    },\n    exclude: [\"node_modules\"]\n}\n```\n\nThe default `karma-coverage` instrumentation settings:\n\n```javascript\nkarmaTypescriptConfig: {\n    coverageReporter: {\n        instrumenterOptions: {\n            istanbul: { noCompact: true }\n        }\n    }\n}\n```\n\nIf the defaults aren't enough, the settings can be configured from `karma.conf.js`:\n\n* **karmaTypescriptConfig.bundlerOptions.addNodeGlobals** - Boolean indicating whether the global variables\n  `process` and `Buffer` should be added to the bundle.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.bundlerOptions.constants** - An object literal with keys/values which will be available as global\n  variables in the bundle. The keys are expected to be strings and any non-string value will be stringified with `JSON.stringify`.\n\n  Configuration example:\n    ```javascript\n    constants: {\n        __STRING__: JSON.stringify(\"abc\" + 123),\n        __BOOLEAN__: true,\n        \"process.env\": {\n            \"VARIABLE\": \"value\"\n        }\n    }\n    ```\n  Code example:\n    ```javascript\n    declare var __STRING__: string;\n    declare var __BOOLEAN__: boolean;\n\n    console.log(__STRING__, __BOOLEAN__, process.env.VARIABLE);\n    ```\n\n* **karmaTypescriptConfig.bundlerOptions.entrypoints** - A `RegExp` filtering which files loaded by Karma should be executed in\n   a test run, for example only filenames ending with \".spec.ts\": `/\\.spec\\.ts$/`.<br/>\n   This setting can be used to make sure the specs have finished setting up the test environment before other code starts\n   requiring modules, which otherwise could lead to subtle bugs caused by race conditions.<br/>\n   When filtering file paths, beware that Windows uses `\\` while UNIX-like systems use `/` as path separator.<br/>\n   Defaults to all files, `/.*/`.\n\n* **karmaTypescriptConfig.bundlerOptions.exclude** - An array of npm module names that will be excluded from the bundle.\n\n* **karmaTypescriptConfig.bundlerOptions.ignore** - An array of npm module names that will be bundled as stubs, ie `module.exports = {};`.\n\n* **karmaTypescriptConfig.bundlerOptions.noParse** - An array of module names that will be bundled without being parsed for dependencies.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.alias** - An object literal where the key is a module name\n  and the value is a path that will be used when resolving the module.<br/>\n  The key is a string.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.extensions** - An array of file extensions to use, in order, when resolving modules.<br/>\n  Defaults to `[\".js\", \".json\", \".ts\", \".tsx\"]`.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.directories** - An array of directories where modules will be recursively looked up.<br/>\n  Defaults to `[\"node_modules\"]`.\n\n* **karmaTypescriptConfig.bundlerOptions.sourceMap** - A boolean indicating whether source maps should be generated for imported modules in the bundle, useful for debugging in a browser.\n  For more debugging options, please see `karmaTypescriptConfig.coverageOptions.instrumentation`.</br>\n  Defaults to `false`.\n\n* **karmaTypescriptConfig.bundlerOptions.transforms** - An array of functions altering or replacing compiled Typescript code/Javascript\n  code loaded from `node_modules` before bundling it.\n  For more detailed documentation on transforms, please refer to the [Transforms API section](#transforms-api) in this document.<br/>\n\n* **karmaTypescriptConfig.bundlerOptions.validateSyntax** - A boolean indicating whether the syntax of the bundled code should be validated.\n  Setting this to `false` may speed up bundling for large projects with lots of imports from `node_modules`.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.compilerDelay** - The number of milliseconds the compiler waits before compiling the project on each run.</br>\n  For projects with a large number of files it might be necessary to increase this value to make sure the compiler has collected all files before firing.</br>\n  Defaults to 250 ms.\n\n* **karmaTypescriptConfig.compilerOptions** - This setting will override or add to existing compiler options.<br/>\n  Valid options are the same as for the `compilerOptions` section in `tsconfig.json`, with the\n  exception of `outDir`and `outFile` which are ignored since the code is compiled in-memory.\n\n  If `noEmitOnError` is set to a truthy value, in either `tsconfig.json` or in `karmaTypescriptConfig.compilerOptions`,\n  the karma process will exit with `ts.ExitStatus.DiagnosticsPresent_OutputsSkipped` if any compilation errors occur.\n\n* **karmaTypescriptConfig.coverageOptions.instrumentation** - A boolean indicating whether the code should be instrumented,\n  set this property to `false` to see the original Typescript code when debugging.\n  Please note that setting this property to `true` requires the Typescript compiler option `sourceMap` to also be set to `true`.\n  For more debugging options, please see `karmaTypescriptConfig.coverageOptions.sourceMap`.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.coverageOptions.exclude** - A `RegExp` object or an array of `RegExp` objects for filtering which files should be excluded from coverage instrumentation.<br/>\n  When filtering file paths, beware that Windows uses `\\` while UNIX-like systems use `/` as path separator.<br/>\n  Defaults to `/\\.(d|spec|test)\\.ts$/i` which excludes &ast;.d.ts, &ast;.spec.ts and &ast;.test.ts (case insensitive).\n\n* **karmaTypescriptConfig.coverageOptions.threshold** - An object with minimum coverage thresholds. The threshold values can be set on\n  a global level and on a per-file level, with options to exclude files and directories, and override settings on a per-file basis using globbing patterns.<br/>\n  A positive value will be used as a minimum percentage, for example `statements: 50` means that at least 50% of the statements should be covered by a test.<br/>\n  A negative value will be used as a maximum number of uncovered items, for example `lines: 10` means that no more than 10 uncovered lines are allowed.\n    ```javascript\n    threshold: {\n        global: {\n            statements: 100,\n            branches: 100,\n            functions: -10,\n            lines: 100,\n            excludes: [\n                \"src/foo/**/*.js\"\n            ]\n        },\n        file: {\n            statements: -10,\n            branches: 100,\n            functions: 100,\n            lines: 100,\n            excludes: [\n                \"src/bar/**/*.js\"\n            ],\n            overrides: {\n                \"src/file.js\": {\n                    statements: 90\n                }\n            }\n        }\n    }\n    ```\n\n* **karmaTypescriptConfig.exclude** - File string patterns to be excluded by the compiler. This property may be an `array` or an `object` for more fine-grained control.\n  * Array: The string values will be merged with existing options.\n  * Object: The string values will be merged with or replace existing options:\n  ```javascript\n  {\n      mode: \"merge|replace\",\n      values: [\"foo\", \"bar\"]\n  }\n  ```\n  Defaults to `[\"node_modules\"]`.\n\n* **karmaTypescriptConfig.include** - File string patterns to be included by the compiler. This property may be an `array` or an `object` for more fine-grained control.\n  * Array: The string values will be merged with existing options.\n  * Object: The string values will be merged with or replace existing options:\n  ```javascript\n  {\n      mode: \"merge|replace\",\n      values: [\"foo\", \"bar\"]\n  }\n  ```\n  This option is available in Typescript ^2.0.0.\n\n* **karmaTypescriptConfig.remapOptions** - Pass options to `remap-istanbul`.\n\n    * Available options:\n\n        * `exclude`, a regex for excluding files from remapping\n        * `warn`, a function for handling error messages\n\n* **karmaTypescriptConfig.reports** - The types of coverage reports that should be created when running the tests,\n  defaults to an html report in the directory `./coverage`.\n  Reporters are configured as `\"reporttype\": destination` where the destination can be specified in three ways:\n\n    * A `string` with a directory path, for example `\"html\": \"coverage\"`.\n    * An empty string or `null`. Writes the output to the console, for example `\"text-summary\": \"\"`. This is only possible for a subset of the reports available.\n    * An `object` with more fine-grained control over path and filename:\n    ```javascript\n    \"cobertura\": {\n        \"directory\": \"coverage\",    // optional, defaults to 'coverage'\n        \"subdirectory\": \"cobertura\" // optional, defaults to the name of the browser running the tests\n        \"filename\": \"coverage.xml\", // optional, defaults to the report name\n    }\n\n    // \"subdirectory\" may also be a function that returns a directory from a given browser\n    \"cobertura\": {\n        \"directory\": \"coverage\",\n        \"subdirectory\": function(browser) {\n            // normalizes browser name directories to lowercase without version\n            // ex: coverage/chrome/coverage.xml\n            return browser.name.toLowerCase().split(' ')[0];\n        },\n        \"filename\": \"coverage.xml\"\n    }\n    ```\n\n    * Available report types:\n        * `\"clover\": destination`\n        * `\"cobertura\": destination`\n        * `\"html\": destination`\n        * `\"json-summary\": destination`\n        * `\"json\": destination`\n        * `\"lcovonly\": destination`\n        * `\"teamcity\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text-lcov\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text-summary\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text\": destination` (redirects to the console with destination \"\" or `null`)\n\n    * Example of the three destination types:\n    ```javascript\n    karmaTypescriptConfig: {\n        reports:\n        {\n            \"cobertura\": {\n                \"directory\": \"coverage\",\n                \"filename\": \"coverage.xml\",\n                \"subdirectory\": \"cobertura\"\n            },\n            \"html\": \"coverage\",\n            \"text-summary\": \"\"\n        }\n    }\n    ```\n\n* **karmaTypescriptConfig.transformPath** - A function for renaming compiled file extensions to `.js`.<br/>\n  Defaults to renaming `.ts` and `.tsx` to `.js`.\n\n* **karmaTypescriptConfig.tsconfig** - A path to a `tsconfig.json` file.<br/>\n  The default compiler options will be replaced by the options in this file.<br/>\n  The directory of the `tsconfig.json` file will be used as the base path for the Typescript compiler, and if `karmaTypescriptConfig.tsconfig` isn't set, the `basePath` property of the Karma config will be used as the\n  compiler base path instead.\n\nExample of a full `karmaTypescriptConfig` configuration:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        addNodeGlobals: true,\n        constants: {\n            __PRODUCTION__: false\n        },\n        entrypoints: /\\.spec\\.(ts|tsx)$/,\n        exclude: [\"react/addons\"],\n        ignore: [\"ws\"],\n        noParse: \"jquery\",\n        resolve: {\n            alias: {\n                \"@angular/upgrade/static$\": \"../bundles/upgrade-static.umd.js\"\n            },\n            extensions: [\".js\", \".json\"],\n            directories: [\"node_modules\"]\n        },\n        sourceMap: false,\n        transforms: [require(\"karma-typescript-es6-transform\")()],\n        validateSyntax: true\n    },\n    compilerDelay: 500,\n    compilerOptions: {\n        noImplicitAny: true,\n    },\n    coverageOptions: {\n        instrumentation: true,\n        exclude: /\\.(d|spec|test)\\.ts/i,\n        threshold: {\n            global: {\n                statements: 100,\n                branches: 100,\n                functions: -10,\n                lines: 100,\n                excludes: [\n                    \"src/foo/**/*.js\"\n                ]\n            },\n            file: {\n                statements: -10,\n                branches: 100,\n                functions: 100,\n                lines: 100,\n                excludes: [\n                    \"src/bar/**/*.js\"\n                ],\n                overrides: {\n                    \"src/file.js\": {\n                        statements: 90\n                    }\n                }\n            }\n        },\n    },\n    exclude: [\"broken\"],\n    include: {\n        mode: \"replace\",\n        values: [\"**/*.ts\"]\n    },\n    remapOptions: {\n        warn: function(message){\n            console.log(message);\n        }\n    },\n    reports: {\n        \"cobertura\": {\n            \"directory\": \"coverage\",\n            \"filename\": \"cobertura/coverage.xml\"\n        },\n        \"html\": \"coverage\",\n        \"text-summary\": \"\"\n    },\n    transformPath: function(filepath) {\n        return filepath.replace(/\\.(ts|tsx)$/, \".js\");\n    },\n    tsconfig: \"./tsconfig.json\"\n}\n```\n\n## Automatic bundling\n\nFiles executed in the test run are bundled into a main bundle, containing dependencies required from node_modules,\nand several smaller standalone bundles containing the Typescript files. All these bundles are tied together by `commonjs.js`,\nwhich acts as a hub, loading modules when they are required by other modules.\n\nAll files are bundled by being wrapped in a custom [CommonJS](https://en.wikipedia.org/wiki/CommonJS) wrapper,\nwhich emulates the Node.js module system by injecting the require function, the module object, the exports object,\nthe &#95;&#95;dirname variable and the &#95;&#95;filename variable.\n\nFor instance, this Typescript sample:\n\n```javascript\nexport function exportedFunction(): string {\n    return \"\";\n}\n```\n\nWould be compiled to the following JavaScript (assuming the compiler option `module` is set to `commonjs`):\n\n```javascript\nfunction exportedFunction() {\n    return \"\";\n}\nexports.exportedFunction = exportedFunction;\n```\n\nIt would then be wrapped in a `CommonJS` wrapper by the bundler:\n\n```javascript\n(function(global){\n    global.wrappers['/absolutepath/app/src/file.ts']=[function(require,module,exports,__dirname,__filename){\n        function exportedFunction() {\n            return \"\";\n        }\n        exports.exportedFunction = exportedFunction;\n    },'src/file.ts',{}];\n})(this);\n```\n\n*(In this example, the source map and a few other statements have been omitted for brevity and the wrapper has been formatted for readability)*\n\nAfter compilation, a simple static analysis is performed to find \"import\" and \"require\" statements in the code and if any\ndependencies are found, for instance `import { Component } from \"@angular/core\";`, it is added to the main bundle file along\nwith its dependencies.\n\nIf no import or require statements are found in any Typescript file included in the test run, or the compiler option `module`\nis set to another value than `commonjs`, *automatic bundling will not occur*.\n\nThis means that no Typescript file will be wrapped in the CommonJS wrapper and the reason behind this is the encapsulation that\nthe Node.js module system provides. If no module requests any other module, the test run would contain only isolated islands of\ncode unreachable from the global scope, there would be nothing to execute.\n\nHowever, this intentional behavior makes it possible to use karma-typescript for projects that use the Typescript module system,\nor have the compiler option `module` set to another value than `commonjs`, or simply put everything on the global scope.\n\n### Importing stylesheets and bundling for production\n\nStyle files (.css|.less|.sass|.scss) are served as JSON strings to the browser running the tests,\nallowing styles to be loaded using the Typescript import statement, ie `import \"./style/app.scss\";`.\n\nThis means styles can be imported in order to let, for instance, webpack load the styles with\nless-loader or scss-loader etc for bundling later on, without breaking the unit test runner.\n\nNote: JSON required by modules in node_modules will be loaded automatically by the bundler.\n\n### The module object\n\n```javascript\nmodule: {\n    exports: {},\n    id: \"project-relative-path/bar.ts\",\n    uri: \"/absolute-path/project-relative-path/bar.ts\"\n}\n```\n\nThe `module.id` will be calculated from the value of `module.uri`, relative to the Karma config `basePath` value.\n\nModules exporting an extensible object such as a *function* or an *object literal* will also be decorated with\na non-enumerable `default` property if `module.exports.default` is undefined.\n\n### Globals\n\nA full Node.js environment will be provided with global variables and browser shims for builtin core modules:\n\n* &#95;&#95;dirname\n* &#95;&#95;filename\n* Buffer\n* global\n* process\n\n### Browser shims\n* [assert](https://www.npmjs.com/package/assert)\n* [buffer](https://www.npmjs.com/package/buffer)\n* [console](https://www.npmjs.com/package/console-browserify)\n* [constants](https://www.npmjs.com/package/constants-browserify)\n* [crypto](https://www.npmjs.com/package/crypto-browserify)\n* [domain](https://www.npmjs.com/package/domain-browser)\n* [events](https://www.npmjs.com/package/events)\n* [http](https://www.npmjs.com/package/stream-http)\n* [https](https://www.npmjs.com/package/https-browserify)\n* [os](https://www.npmjs.com/package/os-browserify)\n* [path](https://www.npmjs.com/package/path-browserify)\n* [punycode](https://www.npmjs.com/package/punycode)\n* [querystring](https://www.npmjs.com/package/querystring-es3)\n* [stream](https://www.npmjs.com/package/stream-browserify)\n* [string_decoder](https://www.npmjs.com/package/string_decoder)\n* [timers](https://www.npmjs.com/package/timers-browserify)\n* [tty](https://www.npmjs.com/package/tty-browserify)\n* [url](https://www.npmjs.com/package/url)\n* [util](https://www.npmjs.com/package/util)\n* [vm](https://www.npmjs.com/package/vm-browserify)\n* [zlib](https://www.npmjs.com/package/browserify-zlib)\n\nThe plugin uses [browser-resolve](https://github.com/defunctzombie/node-browser-resolve) from the [browserify](https://github.com/substack/node-browserify) tool chain to load the source code from node_modules.\n\n### Mocking\nImported modules, local or npm packages, can be mocked using [karma-typescript-mock](https://www.npmjs.com/package/karma-typescript-mock). This feature is available in `karma-typescript@^3.0.5`.\n\n## Transforms API\n\nThe bundler has a public API which lets plugins alter or completely replace code before adding it to the bundle.\nFor example, a plugin could compile ES2015 JavaScript code to to ES5 syntax, making it possible to import an `npm` module\nwritten in ES2015 syntax from a Typescript module directly.\n\nThe interface between the bundler and the plugins is a plain array of functions, specified in the configuration property `karmaTypescriptConfig.bundlerOptions.transforms`, where each function is considered a transforming plugin.\n\nThe plugin functions in the transforms array are asynchronous and adhere to the Node.js callback convention where the first\nargument of the callback function is an `Error` object or `undefined` and the following parameters contains the result.\nHowever, although each function is asynchronous, all functions will be called *synchronously* one by one in the order they were added to the array, and each function will be called with the result of the previous function, enabling transforms plugin chaining.\n\nTransforms will be executed at two points in the bundling process: right after compilation of the project Typescript files\nand when resolving `import` and `require` statements. This means each transforming function will be called for both\nTypescript files and JavaScript files from `node_modules`, making each plugin implementation responsible for validating the\ncontext before performing any logic, for example by checking the file name, module name or the existence of an ast object etc.\n\nEach transforming function will be executed before resolving dependencies, which means paths in `import` or `require` statements\nor anywhere in the code can be rewritten before bundling, to fit the Karma execution environment. \n\nExample of a simple inline transforming function replacing the contents of a `.css` file, mimicking the behavior of Css Modules:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        transforms: [\n            function(context, callback) {\n                if(context.module === \"./main.css\") {\n                    context.source = \"module.exports = { color: red };\";\n                    return callback(undefined, true);\n                }\n                return callback(undefined, false);\n            }\n        ]\n    }\n}\n```\n\nIt is also possible to change the transpiled Typescript (ie the plain JavaScript code) code by using the third callback parameter to tell the Transforms API not to recompile the transpiled code:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        transforms: [\n            function(context, callback) {\n                if(context.ts) {\n                    context.ts.transpiled = \"\\n/* istanbul ignore next */\\n\" + context.ts.transpiled;\n                    return callback(undefined, true, false);\n                }\n                return callback(undefined, false);\n            }\n        ]\n    }\n}\n```\n\n### Context\nThe context object, `TransformContext`, is defined [here](https://github.com/monounity/karma-typescript/blob/master/src/api/transforms.ts).\n\n### Callback\n\nThe callback has two signatures, the \"boolean\" and the \"object\".\n\nThe boolean callback function has three arguments:\n1. An `Error` object or `undefined`\n2. A boolean indicating whether the value of `context.source` has changed or not.\n3. A boolean indicating whether the transformed source should be recompiled. Defaults to true and can be omitted.\n\nThe object callback function has two arguments:\n\n1. An `Error` object or `undefined`\n2. An object literal, which has the following properties:\n    1. A boolean indicating whether the value of `context.source` has changed or not.\n    2. A boolean indicating whether the transformed source should be recompiled (Typescript only!).\n    3. A boolean indicating whether a new AST should be created for the transformed source (JavaScript only!).\n\n## Requirements\n\nTypescript ^1.6.2 is required.\n\nVersions 1.6.2 - 1.7.5 work but aren't as heavily tested as versions 1.8.10 and up.\n\n## Troubleshooting\n\n### Error: Can not load \"karma-typescript\", it is not registered!\n\nUsers have reported success by simply deleting the `node_modules` folder and then running `npm install` again.\n\n### Error: Cannot find module 'buffer/' from '.'\n\n*Note: this error has been fixed in karma-typescript@^3.0.0`.*\n\nThis error seems to hit mostly users of with older versions of `npm`, where all dependencies don't get pulled in automatically by `npm`.\n\nThere's a workaround reported by users, which is simply adding the missing dependencies explicitly to `package.json`:\n\n * `npm install --save-dev browser-resolve`\n * `npm install --save-dev buffer`\n * `npm install --save-dev process`\n\nOther workarounds are running `npm install` twice or, if possible, upgrading to a newer version of `npm`.\n\nThese are the environments reported failing/working:\n\n|Npm|Node.js|OS|Works|\n|---|---|---|---|\n|2.5.18|4.4.7|Unknown|No|\n|2.14.7|4.2.1|Ubuntu 14.04|No|\n|2.14.12|4.2.6|OSX 10.11.3|No|\n|2.15.9|4.5.0|OSX 10.11.6|No|\n|2.15.9|4.6.0|OSX 10.12.3|No|\n|2.15.11|4.6.2|Ubuntu 14.04|No|\n|2.15.11|4.7.0|Ubuntu 14.04|Yes|\n|3.5.3|4.2.1|Windows 10|Yes|\n|3.8.6|6.10.0|Windows Server 2012 R2|Yes|\n|3.10.3|6.4.0|OSX 10.11.6|Yes|\n|3.10.9|6.9.2|Ubuntu 14.04|Yes|\n|4.0.5|6.4.0|OSX 10.11.6|Yes|\n|4.1.2|7.5.0|OSX 10.12.2|No|\n|4.1.2|7.7.3|Ubuntu 14.04|Yes|\n\n## Licensing\n\nThis software is licensed with the MIT license.\n\n© 2016-2019 Erik Barke, Monounity\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@4.0.0-beta.3",
      "_npmVersion": "6.5.0",
      "_nodeVersion": "10.14.2",
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "dist": {
        "integrity": "sha512-x8rZebSyI1mVwHatdzUqj/r6ewnw76vZzQ1Sf/0M7ldNsG3d0I+lIkEm59E+fIakASlKrmDr1ZLoiMgKW6M52A==",
        "shasum": "f65e20457899f8f27f36c3e5feffae433f4846c3",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-4.0.0-beta.3.tgz",
        "fileCount": 112,
        "unpackedSize": 339007,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcPxeeCRA9TVsSAnZWagAAXwcP/i9mo95aIMY/NV2lKZeN\n1ThEyaesCBWZp3ZOkufqMv4IsECSF220aCrhk+3ygarMCOdjJyp61AjHW6TP\nO+vQW9oAUYPzbKE1tqGljaWS9CRIDMYQ00/ih8Np6DmbO5oo0kFQP7s5oy9v\nwetfN8FBC2NQ30z0ZCI21SK079qZ8bLBjndfH1hzA4xp5mwsIu0FRi1bF6iA\nrPAlQRlLuyRcrw7GYryyDde0Rr++0qFO0DAszWjZE33NdfxoWjK4jYsufJl2\nyWBti1dOvCmqfeqL4tiRfLDlYoW4rOX9LFVLZNJZt5aBdcS78pHN5NaSFmrJ\n45NYjvM8QEVodVb04rPi0ZXGXiwXFpis7vURJml9FSmNBeTE6vk7zI+MvDXw\nyhyd93v7ek0K9WyBjMmyfzRlmXWN+d0WiG1b2fYx4Q3Rbn0vBVk/dXES5qKY\nyp/iMKpEAegHtRSUBzZZp3taS1UrW8Dgt1/DT1OzuSZBZKzz/WRbKXnfS6Tt\niubB+cuRLwJhecuS1QeiZNk5KWLeDFlaEVfHU8n/ISy9CRy0R0pLMU0zKRXf\n2GGCi5qNdRyHE4L+YvZh7tj9OBbhYn3YQyhG8c3HZGOuOSd1GTwaIlAFS/o0\nkYs/rPlgoF202K1AHn11UIDN2nViXZmSxzRy4kAtVst8sXgPhUOFNPQFk6XL\nTRum\r\n=nP/s\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD2mWQ4OdpiP36CvlZ5rz/Jud6p7OIC7+Cd2kj0jnh55QIhAOUcXpnr5R9gcKNML8Fm1TMqLLdldh9r3xgUhj/kCqSs"
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_4.0.0-beta.3_1547638685872_0.9105133979057469"
      },
      "_hasShrinkwrap": false
    },
    "4.0.0": {
      "name": "karma-typescript",
      "version": "4.0.0",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "tslint --project tsconfig.json",
        "build": "tsc --rootDir ./src",
        "test": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^6.0.5",
        "acorn-walk": "^6.1.1",
        "assert": "^1.4.1",
        "async": "^2.6.1",
        "browser-resolve": "^1.11.3",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.2.1",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.6.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^1.2.0",
        "events": "^3.0.0",
        "glob": "^7.1.3",
        "https-browserify": "^1.0.0",
        "istanbul": "0.4.5",
        "json-stringify-safe": "^5.0.1",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.11",
        "log4js": "^4.0.1",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^2.2.2",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "remap-istanbul": "^0.13.0",
        "source-map": "^0.7.3",
        "stream-browserify": "^2.0.2",
        "stream-http": "^3.0.0",
        "string_decoder": "^1.2.0",
        "timers-browserify": "^2.0.10",
        "tmp": "^0.0.33",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.11.1",
        "vm-browserify": "1.1.0"
      },
      "devDependencies": {
        "@types/async": "^2.4.0",
        "@types/browser-resolve": "0.0.5",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^3.5.2",
        "@types/glob": "^7.1.1",
        "@types/istanbul": "^0.4.30",
        "@types/karma": "^3.0.1",
        "@types/lodash": "^4.14.120",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^10.12.18",
        "@types/pad": "^1.0.1",
        "@types/sinon": "^7.0.5",
        "@types/tape": "^4.2.33",
        "@types/tmp": "^0.0.33",
        "cli-clear": "^1.0.4",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "puppeteer": "^1.11.0",
        "tape": "^4.9.2",
        "tslint": "^5.12.1",
        "tslint-eslint-rules": "^5.4.0",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4",
        "typescript": "1 || 2 || 3"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@4.0.0",
      "_npmVersion": "6.5.0",
      "_nodeVersion": "10.14.2",
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "dist": {
        "integrity": "sha512-D5mrwspHW8GtvbjYCz29DbxXYqoCOFhbnhZRkmSytWMCTFAwjSHMKxozOM5HeZomS2lqWV+S0WPk4DH9nxkGgA==",
        "shasum": "e75ab28770e1be840e68012857f9e4fd979039b6",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-4.0.0.tgz",
        "fileCount": 112,
        "unpackedSize": 339000,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcWJjyCRA9TVsSAnZWagAA1U8P/0z5HKZ9DWmltAjVjADG\nvnkmt86UPRdBYC7fKsYMaH0uc7FAJI/ERDqHvvRHzaKO2KjsFlFnSakmlRxv\nrNyi/4sF8GUEPGwWrFKJKRKlNbm9SZug1sg1xr5PWxL51PMO0Dz251hFTbC+\nLj8bTPi1rCj7I0JE33N8SGd/poVzjSZLnGS6NxISl1IZoewx9XQ5R+EJ7Bz2\n+DVSJu2ic6TGa194FiqyCDbxGntD7xJqkwybWg5nnSafm08zrSYsUIsX8Cmi\ncDwFc5d2J0cbT+6aqHh0bBjlyZTekTUbOAmzux3z9wKA7QzDZmS7NnD4Py7f\n1A0SneVDKFgFCpWZdY7SxYTHWQWsxIfN2kOv4W6+nJGaSAtL+5H1zyTqoizT\nWUFxlgMSaMrF24S5qCgTxzwayZwhPWk0ZXUHqkzEVnxevQY4dTBIzLbj6taG\nELJE2h4cVont5mp5xi4YqHZ1hcR9FTlN5jbdHQz+EfnVL5Mf0X6A0OzD7YAO\nABRmTSnSJ49ykBNknVMTGPkpNqGNdVLwK3A6oejH1GpaOqMVdLf9nzrABq9B\nSHy0xCLNUoh7eKzPUM/5TTRKuSg6CNlAwYgw+Hti6jRa+vHQIh4buVqlLVym\ngaCfR4MzWHEe6VunZeBPk0KgGhv3U3co97mfFQirTsHP0YD+/XrL/ueUmdhG\n5Odd\r\n=zjrp\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCAOTShlwQwwI3x+orf39qLAmuBaryYP1lPm5MPbyyEmwIhAI6WoGmpNT/rW3aktbpoRz1Owj+f5ALjMxV0JfsCpUrz"
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_4.0.0_1549310193782_0.49484240422953296"
      },
      "_hasShrinkwrap": false
    },
    "4.1.0": {
      "name": "karma-typescript",
      "version": "4.1.0",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "tslint --project tsconfig.json",
        "build": "tsc --rootDir ./src",
        "test": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^6.0.5",
        "acorn-walk": "^6.1.1",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^1.11.3",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.2.1",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.6.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^1.2.0",
        "events": "^3.0.0",
        "glob": "^7.1.3",
        "https-browserify": "^1.0.0",
        "istanbul": "0.4.5",
        "json-stringify-safe": "^5.0.1",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.11",
        "log4js": "^4.0.1",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "remap-istanbul": "^0.13.0",
        "source-map": "^0.7.3",
        "stream-browserify": "^2.0.2",
        "stream-http": "^3.0.0",
        "string_decoder": "^1.2.0",
        "timers-browserify": "^2.0.10",
        "tmp": "^0.1.0",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.0",
        "vm-browserify": "1.1.0"
      },
      "devDependencies": {
        "@types/async": "^2.4.0",
        "@types/browser-resolve": "0.0.5",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^3.5.2",
        "@types/glob": "^7.1.1",
        "@types/istanbul": "^0.4.30",
        "@types/karma": "^3.0.1",
        "@types/lodash": "^4.14.120",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^10.12.18",
        "@types/pad": "^1.0.1",
        "@types/sinon": "^7.0.5",
        "@types/tape": "^4.2.33",
        "@types/tmp": "^0.0.33",
        "cli-clear": "^1.0.4",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "puppeteer": "^1.11.0",
        "tape": "^4.9.2",
        "tslint": "^5.12.1",
        "tslint-eslint-rules": "^5.4.0",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4",
        "typescript": "1 || 2 || 3"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@4.1.0",
      "_npmVersion": "6.5.0",
      "_nodeVersion": "10.14.2",
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "dist": {
        "integrity": "sha512-FhoZlPWVlkWN110KrUYcAOxTPeyvw9kg3uolxP2s/DsmUthdc5MWgl84yOr4j3xFGHStd9wLqek1nGRkFcJ35A==",
        "shasum": "963a1f6578acf1553a2635c6fda53369fe15118c",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-4.1.0.tgz",
        "fileCount": 112,
        "unpackedSize": 341253,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc8afPCRA9TVsSAnZWagAA+98P/itSLii9OhlCjAO+/CKS\n1eeFwKUXO0F/VH/pzrNA49sKJDXWFA5Ve91TSoCOlR7w4YH5cLDL1wuJw0VR\n/UBin/jNzKmPbAIjcZjIEqyChqXhLhQ8gMvYUN3unC00sHzrpBJ5CkAXaSQh\nYNlyvaE0PwJSS/TYPQ6J9Mf8UPL74hvl0Is/9Rg5juNxCdP49K78sLsDJwMZ\nq91IZt8HmPcpNaUq7S/Mjh/TCVK0+dLVAgtHZiwOuhbwdiyLObswjSYULbNU\nb27KZFgCP2k9OaWUoFKYiM81OZU9LIk+NP20UgwXK7JG5w6h7J7zpjijNR8k\nDjAdDnvD/iqZZuVURj7Q3cX0OOzOPOkRVhzLqrzDSPq14U3pqXZGa0z1SylU\npP1fD6KpyOpIC3EvMnEw9Z9bPd7IuubZ2IsdstyO1HcfaWaxTiVZG51iqZBW\nFDTqPj7PUI0kp8fm49S9xbvjY0PZgYeD76+fFb3Zd+hUtyB0HdOxVYFrCO1M\nBpyAPGZwUs4tNWq7Mtud5mPS+fj7KTnKg7dfN9yhWeqKmXdVYVIrUrfQiAsz\n3NZXMvhxE++HSdA/iMghUeXBb/swzDd5FDoukJIdtHbiu3KxTw45U5yIPhrT\nMzRPJAazCxLlnJdgKjjU0fe8dX7uKLv2L3mPsB/Q/C6mTj58Rg8R0XVQ8mZd\nPHXi\r\n=NbRb\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEQCIFm1u05KPBwxRqUJMS3KuI1qSpnwUTzEWcxNmkcExLkmAiBQrsYNmaTXFzN5SsXjvXXf6/FsWRSI025/0IWb+w+rvw=="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_4.1.0_1559341005856_0.5832302486876222"
      },
      "_hasShrinkwrap": false
    },
    "4.1.1": {
      "name": "karma-typescript",
      "version": "4.1.1",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-coverage",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "remap-istanbul",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "tslint --project tsconfig.json",
        "build": "tsc --rootDir ./src",
        "test": "tape dist/**/*.spec.js | faucet"
      },
      "dependencies": {
        "acorn": "^6.0.5",
        "acorn-walk": "^6.1.1",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^1.11.3",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.2.1",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.6.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^1.2.0",
        "events": "^3.0.0",
        "glob": "^7.1.3",
        "https-browserify": "^1.0.0",
        "istanbul": "0.4.5",
        "json-stringify-safe": "^5.0.1",
        "karma-coverage": "^1.1.1",
        "lodash": "^4.17.11",
        "log4js": "^4.0.1",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "remap-istanbul": "^0.13.0",
        "source-map": "^0.7.3",
        "stream-browserify": "^2.0.2",
        "stream-http": "^3.0.0",
        "string_decoder": "^1.2.0",
        "timers-browserify": "^2.0.10",
        "tmp": "^0.1.0",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.0",
        "vm-browserify": "1.1.0"
      },
      "devDependencies": {
        "@types/async": "^2.4.0",
        "@types/browser-resolve": "0.0.5",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^3.5.2",
        "@types/glob": "^7.1.1",
        "@types/istanbul": "^0.4.30",
        "@types/karma": "^3.0.1",
        "@types/lodash": "^4.14.120",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^10.12.18",
        "@types/pad": "^1.0.1",
        "@types/sinon": "^7.0.5",
        "@types/tape": "^4.2.33",
        "@types/tmp": "^0.0.33",
        "cli-clear": "^1.0.4",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "puppeteer": "^1.11.0",
        "tape": "^4.9.2",
        "tslint": "^5.12.1",
        "tslint-eslint-rules": "^5.4.0",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4",
        "typescript": "1 || 2 || 3"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@4.1.1",
      "_npmVersion": "6.5.0",
      "_nodeVersion": "10.14.2",
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "dist": {
        "integrity": "sha512-NiGt3Lh8pxKY6hSW4mBV7X45zfB+EA4ezVMNN/vnzLvN+du0UoEc8lTAhrD/DMrjKP3wDlpabku652svRyguXg==",
        "shasum": "2b37164e31f23397cf35774fb436e3a7e7f78a29",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-4.1.1.tgz",
        "fileCount": 112,
        "unpackedSize": 341850,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdF0o7CRA9TVsSAnZWagAA7QwQAJhVb9ifAB8kSzQBtVMN\noUKogi/VbbggX28LbQDEnl6zYvIOp2b9G3lmUC+OVGJX6+GP7YIgMLBFZNKx\n/hKSyNZdl5HbjifkI/EFZM3oFxmGjtwNFgmuytrpNeU3Hm0/27DZWuk9ShlZ\nok9tn3fWEQRW8EPlb8m7//3aR1xAlAuBHKCcFY7nnItHIxq0Jl70n3s24N3r\n+CcvFR0SjFz7swvb/QFS3uXwIfLHexUXwLteqh2lCtLZ/cZ8i7Q3/vI9IMa6\n8H1wbLS+TabZIi0dkcURmgED0qOopj6pstLCq6njXE2E8zurnQIa9YaKGszd\n8MBYllmkrJXH2NvPa6rKuRpNwbcFZ2Kb4NaWBBTbBTpWaH8xNoVEYWrL13+P\nomh8IHLBDOAs3y+AIimSXTCW9P8IiPXsDr99O6jbu+m2wvZtLqjt41VrzDot\nefr3WnI6XsUSYx5RiVXoGnIo47kWb39LqNQQVYZAO953ISWEaf3m5gUe4lKw\nMTWY4h/Plq1MQ8OjU79aazSbSZ/5IIFXn3hCwuMAOWGz7NR6q+xNrQ93Cy5U\n25UuKgODpdoiTHK6Vf6jFhhAh70a4JVZfr5D+aKMM/4od4AbOX7tybhc3InT\n5iv3kpijhX0rc3VC5lIliFWX6WOQIz7b8mRu3MCDVuq6+H/I1j38lYAafUll\n/cYV\r\n=YQYK\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCKWNkfnsqJTGRUMbTkmmVYA+pYUBHqm89VuHQ8WEt4+wIgT/wiueDrF4yfH9RX03VNspgGMw8DqDWctHdfP7CuimM="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_4.1.1_1561807418401_0.6300604820139506"
      },
      "_hasShrinkwrap": false
    },
    "5.0.0-beta.0": {
      "name": "karma-typescript",
      "version": "5.0.0-beta.0",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "tslint --project tsconfig.json",
        "build": "tsc --rootDir ./src",
        "test": "nyc --require ts-node/register tape src/**/*.spec.ts | faucet"
      },
      "nyc": {
        "extension": [
          ".ts"
        ],
        "exclude": [
          "**/*.spec.ts"
        ],
        "reporter": [
          "html"
        ],
        "tempDir": "./coverage/.nyc_output"
      },
      "dependencies": {
        "acorn": "^7.0.0",
        "acorn-walk": "^7.0.0",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^1.11.3",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.4.2",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.1.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.6.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^1.2.0",
        "events": "^3.0.0",
        "glob": "^7.1.3",
        "https-browserify": "^1.0.0",
        "istanbul-lib-coverage": "^2.0.5",
        "istanbul-lib-instrument": "^3.3.0",
        "istanbul-lib-report": "^2.0.8",
        "istanbul-lib-source-maps": "^3.0.6",
        "istanbul-reports": "^2.2.6",
        "json-stringify-safe": "^5.0.1",
        "lodash": "^4.17.15",
        "log4js": "^5.1.0",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "source-map": "^0.7.3",
        "stream-browserify": "^2.0.2",
        "stream-http": "^3.1.0",
        "string_decoder": "^1.3.0",
        "timers-browserify": "^2.0.11",
        "tmp": "^0.1.0",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.1",
        "vm-browserify": "1.1.0"
      },
      "devDependencies": {
        "@types/async": "^3.0.1",
        "@types/browser-resolve": "0.0.5",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^4.0.2",
        "@types/glob": "^7.1.1",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "@types/istanbul-lib-instrument": "^1.7.3",
        "@types/istanbul-lib-report": "^1.1.1",
        "@types/istanbul-lib-source-maps": "^1.2.2",
        "@types/istanbul-reports": "^1.1.1",
        "@types/karma": "^3.0.1",
        "@types/lodash": "^4.14.138",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^12.7.2",
        "@types/pad": "^1.0.1",
        "@types/sinon": "^7.0.5",
        "@types/tape": "^4.2.33",
        "@types/tmp": "^0.1.0",
        "cli-clear": "^1.0.4",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "nyc": "^14.1.1",
        "puppeteer": "^1.19.0",
        "tape": "^4.9.2",
        "ts-node": "^8.3.0",
        "tslint": "^5.19.0",
        "tslint-eslint-rules": "^5.4.0",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4",
        "typescript": "1 || 2 || 3"
      },
      "readme": "# karma-typescript\n\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Version\" src=\"https://img.shields.io/npm/v/karma-typescript.svg\"></a>\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Total Downloads\" src=\"https://img.shields.io/npm/dt/karma-typescript.svg\"></a>\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Monthly Downloads\" src=\"https://img.shields.io/npm/dm/karma-typescript.svg\"></a>\n<a href=\"https://travis-ci.org/monounity/karma-typescript\"><img alt=\"Travis Status\" src=\"https://img.shields.io/travis/monounity/karma-typescript/master.svg?label=travis\"></a>\n<a href=\"https://ci.appveyor.com/project/monounity/karma-typescript\"><img alt=\"Appveyor Status\" src=\"https://img.shields.io/appveyor/ci/monounity/karma-typescript/master.svg?label=appveyor\"></a>\n\n> Karma :heart: Typescript\n\n* Run unit tests written in Typescript with full type checking, seamlessly without extra build steps or scripts.\n* Get remapped test coverage with [Istanbul](https://istanbul.js.org).\n* Use plain Typescript or a framework: Angular, AngularJS, React, Sinon, any framework of choice.\n\n## Installation\n\nThe easiest way is to keep `karma-typescript` as a devDependency in `package.json`:\n\n```json\n{\n  \"devDependencies\": {\n    \"karma\": \"^4.0.0\",\n    \"karma-typescript\": \"5.0.0-beta.0\"\n  }\n}\n```\n\nDo this by installing the plugin via npm:\n\n```\nnpm install --save-dev karma-typescript\n```\n\n## Configuration\n\nBare minimum configuration can be achieved with the following `karma.conf.js` file:\n\n```javascript\nmodule.exports = function(config) {\n    config.set({\n        frameworks: [\"jasmine\", \"karma-typescript\"],\n        files: [\n            \"src/**/*.ts\" // *.tsx for React Jsx\n        ],\n        preprocessors: {\n            \"**/*.ts\": \"karma-typescript\" // *.tsx for React Jsx\n        },\n        reporters: [\"progress\", \"karma-typescript\"],\n        browsers: [\"Chrome\"]\n    });\n};\n```\n\nThe above example will compile all Typescript files and run the unit tests, producing remapped coverage in `./coverage`.\n\n## Examples\n\n[Cookbook](https://github.com/monounity/karma-typescript/blob/master/packages/karma-typescript/cookbook.md)\n\n### Frameworks and Integrations\n\n- [Angular](https://github.com/monounity/karma-typescript/tree/master/examples/angular2)\n- [AngularJS](https://github.com/monounity/karma-typescript/tree/master/examples/angularjs)\n- [Docker](https://github.com/monounity/karma-typescript/tree/master/examples/docker)\n- [Gulp](https://github.com/monounity/karma-typescript/tree/master/examples/gulp)\n- [Mocha](https://github.com/monounity/karma-typescript/tree/master/examples/mocha)\n\n### Other examples\n\n- Typescript [@latest](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-latest)\n- Typescript [1.8.10](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-1.8.10)\n- Typescript [1.6.2](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-1.6.2)\n\n### Sample applications by users\n- [Hybrid app, code in JavaScript and tests in Typescript](https://github.com/adrianmarinica/karma-typescript-angularjs-sample)\n\n## Transforms:\n- [karma-typescript-angular2-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-angular2-transform)\n- [karma-typescript-cssmodules-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-cssmodules-transform)\n- [karma-typescript-es6-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-es6-transform)\n- [karma-typescript-postcss-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-postcss-transform)\n\n### Example output\n\n<img src=\"http://i.imgur.com/sc4Mswh.png\" width=\"580\" height=\"280\" />\n\n- [Angular2 screenshot](https://github.com/monounity/karma-typescript/blob/master/assets/angular2.png)\n- [React screenshot](https://github.com/monounity/karma-typescript/blob/master/assets/react.png)\n\n## Advanced configuration\n\nThe plugin has default settings for the compiler, instrumenting files and creating reports etc, which should suit most needs.\n\nThese are the default compiler settings:\n\n```javascript\nkarmaTypescriptConfig: {\n    compilerOptions: {\n        emitDecoratorMetadata: true,\n        experimentalDecorators: true,\n        jsx: \"react\",\n        module: \"commonjs\",\n        sourceMap: true,\n        target: \"ES5\"\n    },\n    exclude: [\"node_modules\"]\n}\n```\n\nIf the defaults aren't enough, the settings can be configured from `karma.conf.js`:\n\n* **karmaTypescriptConfig.bundlerOptions.addNodeGlobals** - Boolean indicating whether the global variables\n  `process` and `Buffer` should be added to the bundle.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.bundlerOptions.constants** - An object literal with keys/values which will be available as global\n  variables in the bundle. The keys are expected to be strings and any non-string value will be stringified with `JSON.stringify`.\n\n  Configuration example:\n    ```javascript\n    constants: {\n        __STRING__: JSON.stringify(\"abc\" + 123),\n        __BOOLEAN__: true,\n        \"process.env\": {\n            \"VARIABLE\": \"value\"\n        }\n    }\n    ```\n  Code example:\n    ```javascript\n    declare var __STRING__: string;\n    declare var __BOOLEAN__: boolean;\n\n    console.log(__STRING__, __BOOLEAN__, process.env.VARIABLE);\n    ```\n\n* **karmaTypescriptConfig.bundlerOptions.entrypoints** - A `RegExp` filtering which files loaded by Karma should be executed in\n   a test run, for example only filenames ending with \".spec.ts\": `/\\.spec\\.ts$/`.<br/>\n   This setting can be used to make sure the specs have finished setting up the test environment before other code starts\n   requiring modules, which otherwise could lead to subtle bugs caused by race conditions.<br/>\n   When filtering file paths, beware that Windows uses `\\` while UNIX-like systems use `/` as path separator.<br/>\n   Defaults to all files, `/.*/`.\n\n* **karmaTypescriptConfig.bundlerOptions.exclude** - An array of npm module names that will be excluded from the bundle.\n\n* **karmaTypescriptConfig.bundlerOptions.ignore** - An array of npm module names that will be bundled as stubs, ie `module.exports = {};`.\n\n* **karmaTypescriptConfig.bundlerOptions.noParse** - An array of module names that will be bundled without being parsed for dependencies.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.alias** - An object literal where the key is a module name\n  and the value is a path that will be used when resolving the module.<br/>\n  The key is a string.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.extensions** - An array of file extensions to use, in order, when resolving modules.<br/>\n  Defaults to `[\".js\", \".json\", \".ts\", \".tsx\"]`.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.directories** - An array of directories where modules will be recursively looked up.<br/>\n  Defaults to `[\"node_modules\"]`.\n\n* **karmaTypescriptConfig.bundlerOptions.sourceMap** - A boolean indicating whether source maps should be generated for imported modules in the bundle, useful for debugging in a browser.\n  For more debugging options, please see `karmaTypescriptConfig.coverageOptions.instrumentation`.</br>\n  Defaults to `false`.\n\n* **karmaTypescriptConfig.bundlerOptions.transforms** - An array of functions altering or replacing compiled Typescript code/Javascript\n  code loaded from `node_modules` before bundling it.\n  For more detailed documentation on transforms, please refer to the [Transforms API section](#transforms-api) in this document.<br/>\n\n* **karmaTypescriptConfig.bundlerOptions.validateSyntax** - A boolean indicating whether the syntax of the bundled code should be validated.\n  Setting this to `false` may speed up bundling for large projects with lots of imports from `node_modules`.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.compilerDelay** - The number of milliseconds the compiler waits before compiling the project on each run.</br>\n  For projects with a large number of files it might be necessary to increase this value to make sure the compiler has collected all files before firing.</br>\n  Defaults to 250 ms.\n\n* **karmaTypescriptConfig.compilerOptions** - This setting will override or add to existing compiler options.<br/>\n  Valid options are the same as for the `compilerOptions` section in `tsconfig.json`, with the\n  exception of `outDir`and `outFile` which are ignored since the code is compiled in-memory.\n\n  If `noEmitOnError` is set to a truthy value, in either `tsconfig.json` or in `karmaTypescriptConfig.compilerOptions`,\n  the karma process will exit with `ts.ExitStatus.DiagnosticsPresent_OutputsSkipped` if any compilation errors occur.\n\n* **karmaTypescriptConfig.coverageOptions.instrumentation** - A boolean indicating whether the code should be instrumented,\n  set this property to `false` to see the original Typescript code when debugging.\n  Please note that setting this property to `true` requires the Typescript compiler option `sourceMap` to also be set to `true`.\n  For more debugging options, please see `karmaTypescriptConfig.coverageOptions.sourceMap`.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.coverageOptions.instrumenterOptions** - Pass options to the `istanbul` instrumenter, ie options supported by [istanbul-lib-instrument](https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/src/instrumenter.js):\n\n    ```js\n    {\n        // Name of global coverage variable.\n        coverageVariable: '__coverage__',\n\n        // Preserve comments in output.\n        preserveComments: false,\n\n        // Generate compact code.\n        compact: true,\n\n        // Set to true to instrument ES6 modules.\n        esModules: false,\n\n        // Set to true to allow `return` statements outside of functions.\n        autoWrap: false,\n\n        // Set to true to produce a source map for the instrumented code.\n        produceSourceMap: false,\n\n        // Set to array of class method names to ignore for coverage.\n        ignoreClassMethods: [],\n\n        // A callback function that is called when a source map URL is found in the original code.\n        // This function is called with the source file name and the source map URL.\n        sourceMapUrlCallback: null,\n\n        // Turn debugging on.\n        debug: false,\n\n        // Set plugins.\n        plugins: [\n            'asyncGenerators',\n            'bigInt',\n            'classProperties',\n            'classPrivateProperties',\n            'dynamicImport',\n            'importMeta',\n            'objectRestSpread',\n            'optionalCatchBinding',\n            'flow',\n            'jsx'\n        ]\n    };\n    ```\n\n* **karmaTypescriptConfig.coverageOptions.exclude** - A `RegExp` object or an array of `RegExp` objects for filtering which files should be excluded from coverage instrumentation.<br/>\n  When filtering file paths, beware that Windows uses `\\` while UNIX-like systems use `/` as path separator.<br/>\n  Defaults to `/\\.(d|spec|test)\\.ts$/i` which excludes &ast;.d.ts, &ast;.spec.ts and &ast;.test.ts (case insensitive).\n\n* **karmaTypescriptConfig.coverageOptions.threshold** - An object with minimum coverage thresholds. The threshold values can be set on\n  a global level and on a per-file level, with options to exclude files and directories, and override settings on a per-file basis using globbing patterns.<br/>\n  A positive value will be used as a minimum percentage, for example `statements: 50` means that at least 50% of the statements should be covered by a test.<br/>\n  A negative value will be used as a maximum number of uncovered items, for example `lines: 10` means that no more than 10 uncovered lines are allowed.\n    ```javascript\n    threshold: {\n        global: {\n            statements: 100,\n            branches: 100,\n            functions: -10,\n            lines: 100,\n            excludes: [\n                \"src/foo/**/*.js\"\n            ]\n        },\n        file: {\n            statements: -10,\n            branches: 100,\n            functions: 100,\n            lines: 100,\n            excludes: [\n                \"src/bar/**/*.js\"\n            ],\n            overrides: {\n                \"src/file.js\": {\n                    statements: 90\n                }\n            }\n        }\n    }\n    ```\n\n* **karmaTypescriptConfig.exclude** - File string patterns to be excluded by the compiler. This property may be an `array` or an `object` for more fine-grained control.\n  * Array: The string values will be merged with existing options.\n  * Object: The string values will be merged with or replace existing options:\n  ```javascript\n  {\n      mode: \"merge|replace\",\n      values: [\"foo\", \"bar\"]\n  }\n  ```\n  Defaults to `[\"node_modules\"]`.\n\n* **karmaTypescriptConfig.include** - File string patterns to be included by the compiler. This property may be an `array` or an `object` for more fine-grained control.\n  * Array: The string values will be merged with existing options.\n  * Object: The string values will be merged with or replace existing options:\n  ```javascript\n  {\n      mode: \"merge|replace\",\n      values: [\"foo\", \"bar\"]\n  }\n  ```\n  This option is available in Typescript ^2.0.0.\n\n* **karmaTypescriptConfig.reports** - The types of coverage reports that should be created when running the tests,\n  defaults to an html report in the directory `./coverage`.\n  Reporters are configured as `\"reporttype\": destination` where the destination can be specified in three ways:\n\n    * A `string` with a directory path, for example `\"html\": \"coverage\"`.\n    * An empty string or `null`. Writes the output to the console, for example `\"text-summary\": \"\"`. This is only possible for a subset of the reports available.\n    * An `object` with more fine-grained control over path and filename:\n    ```javascript\n    \"cobertura\": {\n        \"directory\": \"coverage\",    // optional, defaults to 'coverage'\n        \"subdirectory\": \"cobertura\" // optional, defaults to the name of the browser running the tests\n        \"filename\": \"coverage.xml\", // optional, defaults to the report name\n    }\n\n    // \"subdirectory\" may also be a function that returns a directory from a given browser\n    \"cobertura\": {\n        \"directory\": \"coverage\",\n        \"subdirectory\": function(browser) {\n            // normalizes browser name directories to lowercase without version\n            // ex: coverage/chrome/coverage.xml\n            return browser.name.toLowerCase().split(' ')[0];\n        },\n        \"filename\": \"coverage.xml\"\n    }\n    ```\n\n    * Available report types:\n        * `\"clover\": destination`\n        * `\"cobertura\": destination`\n        * `\"html\": destination`\n        * `\"json-summary\": destination`\n        * `\"json\": destination`\n        * `\"lcovonly\": destination`\n        * `\"teamcity\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text-lcov\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text-summary\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text\": destination` (redirects to the console with destination \"\" or `null`)\n\n    * Example of the three destination types:\n    ```javascript\n    karmaTypescriptConfig: {\n        reports:\n        {\n            \"cobertura\": {\n                \"directory\": \"coverage\",\n                \"filename\": \"coverage.xml\",\n                \"subdirectory\": \"cobertura\"\n            },\n            \"html\": \"coverage\",\n            \"text-summary\": \"\"\n        }\n    }\n    ```\n\n* **karmaTypescriptConfig.transformPath** - A function for renaming compiled file extensions to `.js`.<br/>\n  Defaults to renaming `.ts` and `.tsx` to `.js`.\n\n* **karmaTypescriptConfig.tsconfig** - A path to a `tsconfig.json` file.<br/>\n  The default compiler options will be replaced by the options in this file.<br/>\n  The directory of the `tsconfig.json` file will be used as the base path for the Typescript compiler, and if `karmaTypescriptConfig.tsconfig` isn't set, the `basePath` property of the Karma config will be used as the\n  compiler base path instead.\n\nExample of a full `karmaTypescriptConfig` configuration:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        addNodeGlobals: true,\n        constants: {\n            __PRODUCTION__: false\n        },\n        entrypoints: /\\.spec\\.(ts|tsx)$/,\n        exclude: [\"react/addons\"],\n        ignore: [\"ws\"],\n        noParse: \"jquery\",\n        resolve: {\n            alias: {\n                \"@angular/upgrade/static$\": \"../bundles/upgrade-static.umd.js\"\n            },\n            extensions: [\".js\", \".json\"],\n            directories: [\"node_modules\"]\n        },\n        sourceMap: false,\n        transforms: [require(\"karma-typescript-es6-transform\")()],\n        validateSyntax: true\n    },\n    compilerDelay: 500,\n    compilerOptions: {\n        noImplicitAny: true,\n    },\n    coverageOptions: {\n        instrumentation: true,\n        instrumenterOptions: {\n            preserveComments: true\n        },\n        exclude: /\\.(d|spec|test)\\.ts/i,\n        threshold: {\n            global: {\n                statements: 100,\n                branches: 100,\n                functions: -10,\n                lines: 100,\n                excludes: [\n                    \"src/foo/**/*.js\"\n                ]\n            },\n            file: {\n                statements: -10,\n                branches: 100,\n                functions: 100,\n                lines: 100,\n                excludes: [\n                    \"src/bar/**/*.js\"\n                ],\n                overrides: {\n                    \"src/file.js\": {\n                        statements: 90\n                    }\n                }\n            }\n        },\n    },\n    exclude: [\"broken\"],\n    include: {\n        mode: \"replace\",\n        values: [\"**/*.ts\"]\n    },\n    reports: {\n        \"cobertura\": {\n            \"directory\": \"coverage\",\n            \"filename\": \"cobertura/coverage.xml\"\n        },\n        \"html\": \"coverage\",\n        \"text-summary\": \"\"\n    },\n    transformPath: function(filepath) {\n        return filepath.replace(/\\.(ts|tsx)$/, \".js\");\n    },\n    tsconfig: \"./tsconfig.json\"\n}\n```\n\n## Automatic bundling\n\nFiles executed in the test run are bundled into a main bundle, containing dependencies required from node_modules,\nand several smaller standalone bundles containing the Typescript files. All these bundles are tied together by `commonjs.js`,\nwhich acts as a hub, loading modules when they are required by other modules.\n\nAll files are bundled by being wrapped in a custom [CommonJS](https://en.wikipedia.org/wiki/CommonJS) wrapper,\nwhich emulates the Node.js module system by injecting the require function, the module object, the exports object,\nthe &#95;&#95;dirname variable and the &#95;&#95;filename variable.\n\nFor instance, this Typescript sample:\n\n```javascript\nexport function exportedFunction(): string {\n    return \"\";\n}\n```\n\nWould be compiled to the following JavaScript (assuming the compiler option `module` is set to `commonjs`):\n\n```javascript\nfunction exportedFunction() {\n    return \"\";\n}\nexports.exportedFunction = exportedFunction;\n```\n\nIt would then be wrapped in a `CommonJS` wrapper by the bundler:\n\n```javascript\n(function(global){\n    global.wrappers['/absolutepath/app/src/file.ts']=[function(require,module,exports,__dirname,__filename){\n        function exportedFunction() {\n            return \"\";\n        }\n        exports.exportedFunction = exportedFunction;\n    },'src/file.ts',{}];\n})(this);\n```\n\n*(In this example, the source map and a few other statements have been omitted for brevity and the wrapper has been formatted for readability)*\n\nAfter compilation, a simple static analysis is performed to find \"import\" and \"require\" statements in the code and if any\ndependencies are found, for instance `import { Component } from \"@angular/core\";`, it is added to the main bundle file along\nwith its dependencies.\n\nIf no import or require statements are found in any Typescript file included in the test run, or the compiler option `module`\nis set to another value than `commonjs`, *automatic bundling will not occur*.\n\nThis means that no Typescript file will be wrapped in the CommonJS wrapper and the reason behind this is the encapsulation that\nthe Node.js module system provides. If no module requests any other module, the test run would contain only isolated islands of\ncode unreachable from the global scope, there would be nothing to execute.\n\nHowever, this intentional behavior makes it possible to use karma-typescript for projects that use the Typescript module system,\nor have the compiler option `module` set to another value than `commonjs`, or simply put everything on the global scope.\n\n### Importing stylesheets and bundling for production\n\nStyle files (.css|.less|.sass|.scss) are served as JSON strings to the browser running the tests,\nallowing styles to be loaded using the Typescript import statement, ie `import \"./style/app.scss\";`.\n\nThis means styles can be imported in order to let, for instance, webpack load the styles with\nless-loader or scss-loader etc for bundling later on, without breaking the unit test runner.\n\nNote: JSON required by modules in node_modules will be loaded automatically by the bundler.\n\n### The module object\n\n```javascript\nmodule: {\n    exports: {},\n    id: \"project-relative-path/bar.ts\",\n    uri: \"/absolute-path/project-relative-path/bar.ts\"\n}\n```\n\nThe `module.id` will be calculated from the value of `module.uri`, relative to the Karma config `basePath` value.\n\nModules exporting an extensible object such as a *function* or an *object literal* will also be decorated with\na non-enumerable `default` property if `module.exports.default` is undefined.\n\n### Globals\n\nA full Node.js environment will be provided with global variables and browser shims for builtin core modules:\n\n* &#95;&#95;dirname\n* &#95;&#95;filename\n* Buffer\n* global\n* process\n\n### Browser shims\n* [assert](https://www.npmjs.com/package/assert)\n* [buffer](https://www.npmjs.com/package/buffer)\n* [console](https://www.npmjs.com/package/console-browserify)\n* [constants](https://www.npmjs.com/package/constants-browserify)\n* [crypto](https://www.npmjs.com/package/crypto-browserify)\n* [domain](https://www.npmjs.com/package/domain-browser)\n* [events](https://www.npmjs.com/package/events)\n* [http](https://www.npmjs.com/package/stream-http)\n* [https](https://www.npmjs.com/package/https-browserify)\n* [os](https://www.npmjs.com/package/os-browserify)\n* [path](https://www.npmjs.com/package/path-browserify)\n* [punycode](https://www.npmjs.com/package/punycode)\n* [querystring](https://www.npmjs.com/package/querystring-es3)\n* [stream](https://www.npmjs.com/package/stream-browserify)\n* [string_decoder](https://www.npmjs.com/package/string_decoder)\n* [timers](https://www.npmjs.com/package/timers-browserify)\n* [tty](https://www.npmjs.com/package/tty-browserify)\n* [url](https://www.npmjs.com/package/url)\n* [util](https://www.npmjs.com/package/util)\n* [vm](https://www.npmjs.com/package/vm-browserify)\n* [zlib](https://www.npmjs.com/package/browserify-zlib)\n\nThe plugin uses [browser-resolve](https://github.com/defunctzombie/node-browser-resolve) from the [browserify](https://github.com/substack/node-browserify) tool chain to load the source code from node_modules.\n\n### Mocking\nImported modules, local or npm packages, can be mocked using [karma-typescript-mock](https://www.npmjs.com/package/karma-typescript-mock). This feature is available in `karma-typescript@^3.0.5`.\n\n## Transforms API\n\nThe bundler has a public API which lets plugins alter or completely replace code before adding it to the bundle.\nFor example, a plugin could compile ES2015 JavaScript code to to ES5 syntax, making it possible to import an `npm` module\nwritten in ES2015 syntax from a Typescript module directly.\n\nThe interface between the bundler and the plugins is a plain array of functions, specified in the configuration property `karmaTypescriptConfig.bundlerOptions.transforms`, where each function is considered a transforming plugin.\n\nThe plugin functions in the transforms array are asynchronous and adhere to the Node.js callback convention where the first\nargument of the callback function is an `Error` object or `undefined` and the following parameters contains the result.\nHowever, although each function is asynchronous, all functions will be called *synchronously* one by one in the order they were added to the array, and each function will be called with the result of the previous function, enabling transforms plugin chaining.\n\nTransforms will be executed at two points in the bundling process: right after compilation of the project Typescript files\nand when resolving `import` and `require` statements. This means each transforming function will be called for both\nTypescript files and JavaScript files from `node_modules`, making each plugin implementation responsible for validating the\ncontext before performing any logic, for example by checking the file name, module name or the existence of an ast object etc.\n\nEach transforming function will be executed before resolving dependencies, which means paths in `import` or `require` statements\nor anywhere in the code can be rewritten before bundling, to fit the Karma execution environment. \n\nExample of a simple inline transforming function replacing the contents of a `.css` file, mimicking the behavior of Css Modules:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        transforms: [\n            function(context, callback) {\n                if(context.module === \"./main.css\") {\n                    context.source = \"module.exports = { color: red };\";\n                    return callback(undefined, true);\n                }\n                return callback(undefined, false);\n            }\n        ]\n    }\n}\n```\n\nIt is also possible to change the transpiled Typescript (ie the plain JavaScript code) code by using the third callback parameter to tell the Transforms API not to recompile the transpiled code:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        transforms: [\n            function(context, callback) {\n                if(context.ts) {\n                    context.ts.transpiled = \"\\n/* istanbul ignore next */\\n\" + context.ts.transpiled;\n                    return callback(undefined, true, false);\n                }\n                return callback(undefined, false);\n            }\n        ]\n    }\n}\n```\n\n### Context\nThe context object, `TransformContext`, is defined [here](https://github.com/monounity/karma-typescript/blob/master/src/api/transforms.ts).\n\n### Callback\n\nThe callback has two signatures, the \"boolean\" and the \"object\".\n\nThe boolean callback function has three arguments:\n1. An `Error` object or `undefined`\n2. A boolean indicating whether the value of `context.source` has changed or not.\n3. A boolean indicating whether the transformed source should be recompiled. Defaults to true and can be omitted.\n\nThe object callback function has two arguments:\n\n1. An `Error` object or `undefined`\n2. An object literal, which has the following properties:\n    1. A boolean indicating whether the value of `context.source` has changed or not.\n    2. A boolean indicating whether the transformed source should be recompiled (Typescript only!).\n    3. A boolean indicating whether a new AST should be created for the transformed source (JavaScript only!).\n\n## Requirements\n\nTypescript ^1.6.2 is required.\n\nVersions 1.6.2 - 1.7.5 work but aren't as heavily tested as versions 1.8.10 and up.\n\n## Troubleshooting\n\n### Error: Can not load \"karma-typescript\", it is not registered!\n\nUsers have reported success by simply deleting the `node_modules` folder and then running `npm install` again.\n\n### Error: Cannot find module 'buffer/' from '.'\n\n*Note: this error has been fixed in karma-typescript@^3.0.0`.*\n\nThis error seems to hit mostly users of with older versions of `npm`, where all dependencies don't get pulled in automatically by `npm`.\n\nThere's a workaround reported by users, which is simply adding the missing dependencies explicitly to `package.json`:\n\n * `npm install --save-dev browser-resolve`\n * `npm install --save-dev buffer`\n * `npm install --save-dev process`\n\nOther workarounds are running `npm install` twice or, if possible, upgrading to a newer version of `npm`.\n\nThese are the environments reported failing/working:\n\n|Npm|Node.js|OS|Works|\n|---|---|---|---|\n|2.5.18|4.4.7|Unknown|No|\n|2.14.7|4.2.1|Ubuntu 14.04|No|\n|2.14.12|4.2.6|OSX 10.11.3|No|\n|2.15.9|4.5.0|OSX 10.11.6|No|\n|2.15.9|4.6.0|OSX 10.12.3|No|\n|2.15.11|4.6.2|Ubuntu 14.04|No|\n|2.15.11|4.7.0|Ubuntu 14.04|Yes|\n|3.5.3|4.2.1|Windows 10|Yes|\n|3.8.6|6.10.0|Windows Server 2012 R2|Yes|\n|3.10.3|6.4.0|OSX 10.11.6|Yes|\n|3.10.9|6.9.2|Ubuntu 14.04|Yes|\n|4.0.5|6.4.0|OSX 10.11.6|Yes|\n|4.1.2|7.5.0|OSX 10.12.2|No|\n|4.1.2|7.7.3|Ubuntu 14.04|Yes|\n\n## Licensing\n\nThis software is licensed with the MIT license.\n\n© 2016-2019 Erik Barke, Monounity\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@5.0.0-beta.0",
      "_npmVersion": "6.5.0",
      "_nodeVersion": "10.14.2",
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "dist": {
        "integrity": "sha512-YgXsZbutqGtlQEolRwPtQIFxnCivvAaW6uEXLOob541d+1fJGNAK+uhXdXqtB4UkfNR7r0Ce5X0PmaCVbji1SA==",
        "shasum": "bbc2e742b2be1124179e7b26891b1b14f990519f",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-5.0.0-beta.0.tgz",
        "fileCount": 115,
        "unpackedSize": 343886,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJde/FRCRA9TVsSAnZWagAAVnMQAKSoBF2HEVTgTsadrOYp\ndslZ+UonYhZJyd+EmX5Odiwm0Ep6x9WeTi+Utoo7UJ2uyZ33MK8AFYQekxaQ\nvPFA9gcBUfQ1HeW6H+K3SxSomIY1AOXl5V9fd58m4Tn6SqWtDhELQD5mjsmG\nb92mXOfEzetF05bOeC7VhqXDwRBf1JnqEsvZZnyEY44L7a4qqwEsNQsAUMd1\n9MVr0rRju9vg19IgfmrZAck9txdwBHGKFeRI9B4D0sH62W4INixn3Y3eZKEv\ns/UkW56i9Ffce1pZGiN+Cj5l/XjqL1JhYZ/Eqiy+cq1nVGLnoICa6lJaImZp\n+mQOA6xNLFxOWwVD73l3zU0EpKIvIAC/LjelHjLh/u7j8E43eA2fnq17E7Zy\n0E4w7MwZu689aLCVGKPjL8I63iBhurXipkpcABcyyyd0yi+gw6FePC21fAK3\n5hXc8C9Yq5UFFzFIpPg5/4iCHAFjMU9gETl6YfQgrBN/S6hFHBfdIZr3sUM2\nziyL2HUEfBU/8t65ER7EZ3MD7/9M3ufuMTu+qCxFKvT/sIzyhnGlBirt40ft\nKQdNHQXpMeWf5/GWkL/XxPbVC1zjlRho/e/CRLVFxPeBXFhxrIfUsTes8mC2\n1Gkfl/CMJfIZyZsi3iwmOw7GnCRJAf1IQD16pkvgIZ6o6oNjtEiLUPs1ktCC\nMlIE\r\n=vFX7\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDW2x54PhcW+RaJIsm8WxrFR6FX5liHzraLlQvOMKU4ZwIgS9GW40TYsqPABsPjxo1DDSUuYWctMMoEL/NkOm13xeE="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_5.0.0-beta.0_1568403792318_0.06533902153934346"
      },
      "_hasShrinkwrap": false
    },
    "5.0.0-beta.1": {
      "name": "karma-typescript",
      "version": "5.0.0-beta.1",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "tslint --project tsconfig.json",
        "build": "tsc --rootDir ./src",
        "test": "nyc --require ts-node/register tape src/**/*.spec.ts | faucet"
      },
      "nyc": {
        "extension": [
          ".ts"
        ],
        "exclude": [
          "**/*.spec.ts"
        ],
        "reporter": [
          "html"
        ],
        "tempDir": "./coverage/.nyc_output"
      },
      "dependencies": {
        "acorn": "^7.1.0",
        "acorn-walk": "^7.0.0",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^1.11.3",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.4.3",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.2.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.7.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^3.5.0",
        "events": "^3.0.0",
        "glob": "^7.1.6",
        "https-browserify": "^1.0.0",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^4.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.0.0",
        "json-stringify-safe": "^5.0.1",
        "lodash": "^4.17.15",
        "log4js": "^6.1.0",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "source-map": "^0.7.3",
        "stream-browserify": "^2.0.2",
        "stream-http": "^3.1.0",
        "string_decoder": "^1.3.0",
        "timers-browserify": "^2.0.11",
        "tmp": "^0.1.0",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.1",
        "vm-browserify": "^1.1.2"
      },
      "devDependencies": {
        "@types/async": "^3.0.3",
        "@types/browser-resolve": "0.0.5",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^4.0.2",
        "@types/glob": "^7.1.1",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "@types/istanbul-lib-instrument": "^1.7.3",
        "@types/istanbul-lib-report": "^1.1.1",
        "@types/istanbul-lib-source-maps": "^1.2.2",
        "@types/istanbul-reports": "^1.1.1",
        "@types/karma": "^3.0.5",
        "@types/lodash": "^4.14.149",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^13.1.4",
        "@types/pad": "^2.1.0",
        "@types/sinon": "^7.5.1",
        "@types/tape": "^4.2.33",
        "@types/tmp": "^0.1.0",
        "cli-clear": "^1.0.4",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "nyc": "^15.0.0",
        "puppeteer": "^2.0.0",
        "tape": "^4.12.1",
        "ts-node": "^8.5.4",
        "tslint": "^5.20.1",
        "tslint-eslint-rules": "^5.4.0",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4",
        "typescript": "1 || 2 || 3"
      },
      "readme": "# karma-typescript\n\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Version\" src=\"https://img.shields.io/npm/v/karma-typescript.svg\"></a>\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Total Downloads\" src=\"https://img.shields.io/npm/dt/karma-typescript.svg\"></a>\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Monthly Downloads\" src=\"https://img.shields.io/npm/dm/karma-typescript.svg\"></a>\n<a href=\"https://travis-ci.org/monounity/karma-typescript\"><img alt=\"Travis Status\" src=\"https://img.shields.io/travis/monounity/karma-typescript/master.svg?label=travis\"></a>\n<a href=\"https://ci.appveyor.com/project/monounity/karma-typescript\"><img alt=\"Appveyor Status\" src=\"https://img.shields.io/appveyor/ci/monounity/karma-typescript/master.svg?label=appveyor\"></a>\n\n> Karma :heart: Typescript\n\n* Run unit tests written in Typescript with full type checking, seamlessly without extra build steps or scripts.\n* Get remapped test coverage with [Istanbul](https://istanbul.js.org).\n* Use plain Typescript or a framework: Angular, AngularJS, React, Sinon, any framework of choice.\n\n## Installation\n\nThe easiest way is to keep `karma-typescript` as a devDependency in `package.json`:\n\n```json\n{\n  \"devDependencies\": {\n    \"karma\": \"^4.0.0\",\n    \"karma-typescript\": \"5.0.0-beta.1\"\n  }\n}\n```\n\nDo this by installing the plugin via npm:\n\n```\nnpm install --save-dev karma-typescript\n```\n\n## Configuration\n\nBare minimum configuration can be achieved with the following `karma.conf.js` file:\n\n```javascript\nmodule.exports = function(config) {\n    config.set({\n        frameworks: [\"jasmine\", \"karma-typescript\"],\n        files: [\n            \"src/**/*.ts\" // *.tsx for React Jsx\n        ],\n        preprocessors: {\n            \"**/*.ts\": \"karma-typescript\" // *.tsx for React Jsx\n        },\n        reporters: [\"progress\", \"karma-typescript\"],\n        browsers: [\"Chrome\"]\n    });\n};\n```\n\nThe above example will compile all Typescript files and run the unit tests, producing remapped coverage in `./coverage`.\n\n## Examples\n\n[Cookbook](https://github.com/monounity/karma-typescript/blob/master/packages/karma-typescript/cookbook.md)\n\n### Frameworks and Integrations\n\n- [Angular](https://github.com/monounity/karma-typescript/tree/master/examples/angular2)\n- [AngularJS](https://github.com/monounity/karma-typescript/tree/master/examples/angularjs)\n- [Docker](https://github.com/monounity/karma-typescript/tree/master/examples/docker)\n- [Gulp](https://github.com/monounity/karma-typescript/tree/master/examples/gulp)\n- [Mocha](https://github.com/monounity/karma-typescript/tree/master/examples/mocha)\n\n### Other examples\n\n- Typescript [@latest](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-latest)\n- Typescript [1.8.10](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-1.8.10)\n- Typescript [1.6.2](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-1.6.2)\n\n### Sample applications by users\n- [Hybrid app, code in JavaScript and tests in Typescript](https://github.com/adrianmarinica/karma-typescript-angularjs-sample)\n\n## Transforms:\n- [karma-typescript-angular2-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-angular2-transform)\n- [karma-typescript-cssmodules-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-cssmodules-transform)\n- [karma-typescript-es6-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-es6-transform)\n- [karma-typescript-postcss-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-postcss-transform)\n\n### Example output\n\n<img src=\"http://i.imgur.com/sc4Mswh.png\" width=\"580\" height=\"280\" />\n\n- [Angular2 screenshot](https://github.com/monounity/karma-typescript/blob/master/assets/angular2.png)\n- [React screenshot](https://github.com/monounity/karma-typescript/blob/master/assets/react.png)\n\n## Advanced configuration\n\nThe plugin has default settings for the compiler, instrumenting files and creating reports etc, which should suit most needs.\n\nThese are the default compiler settings:\n\n```javascript\nkarmaTypescriptConfig: {\n    compilerOptions: {\n        emitDecoratorMetadata: true,\n        experimentalDecorators: true,\n        jsx: \"react\",\n        module: \"commonjs\",\n        sourceMap: true,\n        target: \"ES5\"\n    },\n    exclude: [\"node_modules\"]\n}\n```\n\nIf the defaults aren't enough, the settings can be configured from `karma.conf.js`:\n\n* **karmaTypescriptConfig.bundlerOptions.addNodeGlobals** - Boolean indicating whether the global variables\n  `process` and `Buffer` should be added to the bundle.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.bundlerOptions.constants** - An object literal with keys/values which will be available as global\n  variables in the bundle. The keys are expected to be strings and any non-string value will be stringified with `JSON.stringify`.\n\n  Configuration example:\n    ```javascript\n    constants: {\n        __STRING__: JSON.stringify(\"abc\" + 123),\n        __BOOLEAN__: true,\n        \"process.env\": {\n            \"VARIABLE\": \"value\"\n        }\n    }\n    ```\n  Code example:\n    ```javascript\n    declare var __STRING__: string;\n    declare var __BOOLEAN__: boolean;\n\n    console.log(__STRING__, __BOOLEAN__, process.env.VARIABLE);\n    ```\n\n* **karmaTypescriptConfig.bundlerOptions.entrypoints** - A `RegExp` filtering which files loaded by Karma should be executed in\n   a test run, for example only filenames ending with \".spec.ts\": `/\\.spec\\.ts$/`.<br/>\n   This setting can be used to make sure the specs have finished setting up the test environment before other code starts\n   requiring modules, which otherwise could lead to subtle bugs caused by race conditions.<br/>\n   When filtering file paths, beware that Windows uses `\\` while UNIX-like systems use `/` as path separator.<br/>\n   Defaults to all files, `/.*/`.\n\n* **karmaTypescriptConfig.bundlerOptions.exclude** - An array of npm module names that will be excluded from the bundle.\n\n* **karmaTypescriptConfig.bundlerOptions.ignore** - An array of npm module names that will be bundled as stubs, ie `module.exports = {};`.\n\n* **karmaTypescriptConfig.bundlerOptions.noParse** - An array of module names that will be bundled without being parsed for dependencies.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.alias** - An object literal where the key is a module name\n  and the value is a path that will be used when resolving the module.<br/>\n  The key is a string.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.extensions** - An array of file extensions to use, in order, when resolving modules.<br/>\n  Defaults to `[\".js\", \".json\", \".ts\", \".tsx\"]`.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.directories** - An array of directories where modules will be recursively looked up.<br/>\n  Defaults to `[\"node_modules\"]`.\n\n* **karmaTypescriptConfig.bundlerOptions.sourceMap** - A boolean indicating whether source maps should be generated for imported modules in the bundle, useful for debugging in a browser.\n  For more debugging options, please see `karmaTypescriptConfig.coverageOptions.instrumentation`.</br>\n  Defaults to `false`.\n\n* **karmaTypescriptConfig.bundlerOptions.transforms** - An array of functions altering or replacing compiled Typescript code/Javascript\n  code loaded from `node_modules` before bundling it.\n  For more detailed documentation on transforms, please refer to the [Transforms API section](#transforms-api) in this document.<br/>\n\n* **karmaTypescriptConfig.bundlerOptions.validateSyntax** - A boolean indicating whether the syntax of the bundled code should be validated.\n  Setting this to `false` may speed up bundling for large projects with lots of imports from `node_modules`.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.compilerDelay** - The number of milliseconds the compiler waits before compiling the project on each run.</br>\n  For projects with a large number of files it might be necessary to increase this value to make sure the compiler has collected all files before firing.</br>\n  Defaults to 250 ms.\n\n* **karmaTypescriptConfig.compilerOptions** - This setting will override or add to existing compiler options.<br/>\n  Valid options are the same as for the `compilerOptions` section in `tsconfig.json`, with the\n  exception of `outDir`and `outFile` which are ignored since the code is compiled in-memory.\n\n  If `noEmitOnError` is set to a truthy value, in either `tsconfig.json` or in `karmaTypescriptConfig.compilerOptions`,\n  the karma process will exit with `ts.ExitStatus.DiagnosticsPresent_OutputsSkipped` if any compilation errors occur.\n\n* **karmaTypescriptConfig.coverageOptions.instrumentation** - A boolean indicating whether the code should be instrumented,\n  set this property to `false` to see the original Typescript code when debugging.\n  Please note that setting this property to `true` requires the Typescript compiler option `sourceMap` to also be set to `true`.\n  For more debugging options, please see `karmaTypescriptConfig.coverageOptions.sourceMap`.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.coverageOptions.instrumenterOptions** - Pass options to the `istanbul` instrumenter, ie options supported by [istanbul-lib-instrument](https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/src/instrumenter.js):\n\n    ```js\n    {\n        // Name of global coverage variable.\n        coverageVariable: '__coverage__',\n\n        // Preserve comments in output.\n        preserveComments: false,\n\n        // Generate compact code.\n        compact: true,\n\n        // Set to true to instrument ES6 modules.\n        esModules: false,\n\n        // Set to true to allow `return` statements outside of functions.\n        autoWrap: false,\n\n        // Set to true to produce a source map for the instrumented code.\n        produceSourceMap: false,\n\n        // Set to array of class method names to ignore for coverage.\n        ignoreClassMethods: [],\n\n        // A callback function that is called when a source map URL is found in the original code.\n        // This function is called with the source file name and the source map URL.\n        sourceMapUrlCallback: null,\n\n        // Turn debugging on.\n        debug: false,\n\n        // Set plugins.\n        plugins: [\n            'asyncGenerators',\n            'bigInt',\n            'classProperties',\n            'classPrivateProperties',\n            'dynamicImport',\n            'importMeta',\n            'objectRestSpread',\n            'optionalCatchBinding',\n            'flow',\n            'jsx'\n        ]\n    };\n    ```\n\n* **karmaTypescriptConfig.coverageOptions.exclude** - A `RegExp` object or an array of `RegExp` objects for filtering which files should be excluded from coverage instrumentation.<br/>\n  When filtering file paths, beware that Windows uses `\\` while UNIX-like systems use `/` as path separator.<br/>\n  Defaults to `/\\.(d|spec|test)\\.ts$/i` which excludes &ast;.d.ts, &ast;.spec.ts and &ast;.test.ts (case insensitive).\n\n* **karmaTypescriptConfig.coverageOptions.threshold** - An object with minimum coverage thresholds. The threshold values can be set on\n  a global level and on a per-file level, with options to exclude files and directories, and override settings on a per-file basis using globbing patterns.<br/>\n  A positive value will be used as a minimum percentage, for example `statements: 50` means that at least 50% of the statements should be covered by a test.<br/>\n  A negative value will be used as a maximum number of uncovered items, for example `lines: 10` means that no more than 10 uncovered lines are allowed.\n    ```javascript\n    threshold: {\n        global: {\n            statements: 100,\n            branches: 100,\n            functions: -10,\n            lines: 100,\n            excludes: [\n                \"src/foo/**/*.js\"\n            ]\n        },\n        file: {\n            statements: -10,\n            branches: 100,\n            functions: 100,\n            lines: 100,\n            excludes: [\n                \"src/bar/**/*.js\"\n            ],\n            overrides: {\n                \"src/file.js\": {\n                    statements: 90\n                }\n            }\n        }\n    }\n    ```\n\n* **karmaTypescriptConfig.exclude** - File string patterns to be excluded by the compiler. This property may be an `array` or an `object` for more fine-grained control.\n  * Array: The string values will be merged with existing options.\n  * Object: The string values will be merged with or replace existing options:\n  ```javascript\n  {\n      mode: \"merge|replace\",\n      values: [\"foo\", \"bar\"]\n  }\n  ```\n  Defaults to `[\"node_modules\"]`.\n\n* **karmaTypescriptConfig.include** - File string patterns to be included by the compiler. This property may be an `array` or an `object` for more fine-grained control.\n  * Array: The string values will be merged with existing options.\n  * Object: The string values will be merged with or replace existing options:\n  ```javascript\n  {\n      mode: \"merge|replace\",\n      values: [\"foo\", \"bar\"]\n  }\n  ```\n  This option is available in Typescript ^2.0.0.\n\n* **karmaTypescriptConfig.reports** - The types of coverage reports that should be created when running the tests,\n  defaults to an html report in the directory `./coverage`.\n  Reporters are configured as `\"reporttype\": destination` where the destination can be specified in three ways:\n\n    * A `string` with a directory path, for example `\"html\": \"coverage\"`.\n    * An empty string or `null`. Writes the output to the console, for example `\"text-summary\": \"\"`. This is only possible for a subset of the reports available.\n    * An `object` with more fine-grained control over path and filename:\n    ```javascript\n    \"cobertura\": {\n        \"directory\": \"coverage\",    // optional, defaults to 'coverage'\n        \"subdirectory\": \"cobertura\" // optional, defaults to the name of the browser running the tests\n        \"filename\": \"coverage.xml\", // optional, defaults to the report name\n    }\n\n    // \"subdirectory\" may also be a function that returns a directory from a given browser\n    \"cobertura\": {\n        \"directory\": \"coverage\",\n        \"subdirectory\": function(browser) {\n            // normalizes browser name directories to lowercase without version\n            // ex: coverage/chrome/coverage.xml\n            return browser.name.toLowerCase().split(' ')[0];\n        },\n        \"filename\": \"coverage.xml\"\n    }\n    ```\n\n    * Available report types:\n        * `\"clover\": destination`\n        * `\"cobertura\": destination`\n        * `\"html\": destination`\n        * `\"html-spa\": destination`\n        * `\"json-summary\": destination`\n        * `\"json\": destination`\n        * `\"lcovonly\": destination`\n        * `\"teamcity\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text-lcov\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text-summary\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text\": destination` (redirects to the console with destination \"\" or `null`)\n\n    * Example of the three destination types:\n    ```javascript\n    karmaTypescriptConfig: {\n        reports:\n        {\n            \"cobertura\": {\n                \"directory\": \"coverage\",\n                \"filename\": \"coverage.xml\",\n                \"subdirectory\": \"cobertura\"\n            },\n            \"html\": \"coverage\",\n            \"text-summary\": \"\"\n        }\n    }\n    ```\n\n* **karmaTypescriptConfig.transformPath** - A function for renaming compiled file extensions to `.js`.<br/>\n  Defaults to renaming `.ts` and `.tsx` to `.js`.\n\n* **karmaTypescriptConfig.tsconfig** - A path to a `tsconfig.json` file.<br/>\n  The default compiler options will be replaced by the options in this file.<br/>\n  The directory of the `tsconfig.json` file will be used as the base path for the Typescript compiler, and if `karmaTypescriptConfig.tsconfig` isn't set, the `basePath` property of the Karma config will be used as the\n  compiler base path instead.\n\nExample of a full `karmaTypescriptConfig` configuration:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        addNodeGlobals: true,\n        constants: {\n            __PRODUCTION__: false\n        },\n        entrypoints: /\\.spec\\.(ts|tsx)$/,\n        exclude: [\"react/addons\"],\n        ignore: [\"ws\"],\n        noParse: \"jquery\",\n        resolve: {\n            alias: {\n                \"@angular/upgrade/static$\": \"../bundles/upgrade-static.umd.js\"\n            },\n            extensions: [\".js\", \".json\"],\n            directories: [\"node_modules\"]\n        },\n        sourceMap: false,\n        transforms: [require(\"karma-typescript-es6-transform\")()],\n        validateSyntax: true\n    },\n    compilerDelay: 500,\n    compilerOptions: {\n        noImplicitAny: true,\n    },\n    coverageOptions: {\n        instrumentation: true,\n        instrumenterOptions: {\n            preserveComments: true\n        },\n        exclude: /\\.(d|spec|test)\\.ts/i,\n        threshold: {\n            global: {\n                statements: 100,\n                branches: 100,\n                functions: -10,\n                lines: 100,\n                excludes: [\n                    \"src/foo/**/*.js\"\n                ]\n            },\n            file: {\n                statements: -10,\n                branches: 100,\n                functions: 100,\n                lines: 100,\n                excludes: [\n                    \"src/bar/**/*.js\"\n                ],\n                overrides: {\n                    \"src/file.js\": {\n                        statements: 90\n                    }\n                }\n            }\n        },\n    },\n    exclude: [\"broken\"],\n    include: {\n        mode: \"replace\",\n        values: [\"**/*.ts\"]\n    },\n    reports: {\n        \"cobertura\": {\n            \"directory\": \"coverage\",\n            \"filename\": \"cobertura/coverage.xml\"\n        },\n        \"html\": \"coverage\",\n        \"text-summary\": \"\"\n    },\n    transformPath: function(filepath) {\n        return filepath.replace(/\\.(ts|tsx)$/, \".js\");\n    },\n    tsconfig: \"./tsconfig.json\"\n}\n```\n\n## Automatic bundling\n\nFiles executed in the test run are bundled into a main bundle, containing dependencies required from node_modules,\nand several smaller standalone bundles containing the Typescript files. All these bundles are tied together by `commonjs.js`,\nwhich acts as a hub, loading modules when they are required by other modules.\n\nAll files are bundled by being wrapped in a custom [CommonJS](https://en.wikipedia.org/wiki/CommonJS) wrapper,\nwhich emulates the Node.js module system by injecting the require function, the module object, the exports object,\nthe &#95;&#95;dirname variable and the &#95;&#95;filename variable.\n\nFor instance, this Typescript sample:\n\n```javascript\nexport function exportedFunction(): string {\n    return \"\";\n}\n```\n\nWould be compiled to the following JavaScript (assuming the compiler option `module` is set to `commonjs`):\n\n```javascript\nfunction exportedFunction() {\n    return \"\";\n}\nexports.exportedFunction = exportedFunction;\n```\n\nIt would then be wrapped in a `CommonJS` wrapper by the bundler:\n\n```javascript\n(function(global){\n    global.wrappers['/absolutepath/app/src/file.ts']=[function(require,module,exports,__dirname,__filename){\n        function exportedFunction() {\n            return \"\";\n        }\n        exports.exportedFunction = exportedFunction;\n    },'src/file.ts',{}];\n})(this);\n```\n\n*(In this example, the source map and a few other statements have been omitted for brevity and the wrapper has been formatted for readability)*\n\nAfter compilation, a simple static analysis is performed to find \"import\" and \"require\" statements in the code and if any\ndependencies are found, for instance `import { Component } from \"@angular/core\";`, it is added to the main bundle file along\nwith its dependencies.\n\nIf no import or require statements are found in any Typescript file included in the test run, or the compiler option `module`\nis set to another value than `commonjs`, *automatic bundling will not occur*.\n\nThis means that no Typescript file will be wrapped in the CommonJS wrapper and the reason behind this is the encapsulation that\nthe Node.js module system provides. If no module requests any other module, the test run would contain only isolated islands of\ncode unreachable from the global scope, there would be nothing to execute.\n\nHowever, this intentional behavior makes it possible to use karma-typescript for projects that use the Typescript module system,\nor have the compiler option `module` set to another value than `commonjs`, or simply put everything on the global scope.\n\n### Importing stylesheets and bundling for production\n\nStyle files (.css|.less|.sass|.scss) are served as JSON strings to the browser running the tests,\nallowing styles to be loaded using the Typescript import statement, ie `import \"./style/app.scss\";`.\n\nThis means styles can be imported in order to let, for instance, webpack load the styles with\nless-loader or scss-loader etc for bundling later on, without breaking the unit test runner.\n\nNote: JSON required by modules in node_modules will be loaded automatically by the bundler.\n\n### The module object\n\n```javascript\nmodule: {\n    exports: {},\n    id: \"project-relative-path/bar.ts\",\n    uri: \"/absolute-path/project-relative-path/bar.ts\"\n}\n```\n\nThe `module.id` will be calculated from the value of `module.uri`, relative to the Karma config `basePath` value.\n\nModules exporting an extensible object such as a *function* or an *object literal* will also be decorated with\na non-enumerable `default` property if `module.exports.default` is undefined.\n\n### Globals\n\nA full Node.js environment will be provided with global variables and browser shims for builtin core modules:\n\n* &#95;&#95;dirname\n* &#95;&#95;filename\n* Buffer\n* global\n* process\n\n### Browser shims\n* [assert](https://www.npmjs.com/package/assert)\n* [buffer](https://www.npmjs.com/package/buffer)\n* [console](https://www.npmjs.com/package/console-browserify)\n* [constants](https://www.npmjs.com/package/constants-browserify)\n* [crypto](https://www.npmjs.com/package/crypto-browserify)\n* [domain](https://www.npmjs.com/package/domain-browser)\n* [events](https://www.npmjs.com/package/events)\n* [http](https://www.npmjs.com/package/stream-http)\n* [https](https://www.npmjs.com/package/https-browserify)\n* [os](https://www.npmjs.com/package/os-browserify)\n* [path](https://www.npmjs.com/package/path-browserify)\n* [punycode](https://www.npmjs.com/package/punycode)\n* [querystring](https://www.npmjs.com/package/querystring-es3)\n* [stream](https://www.npmjs.com/package/stream-browserify)\n* [string_decoder](https://www.npmjs.com/package/string_decoder)\n* [timers](https://www.npmjs.com/package/timers-browserify)\n* [tty](https://www.npmjs.com/package/tty-browserify)\n* [url](https://www.npmjs.com/package/url)\n* [util](https://www.npmjs.com/package/util)\n* [vm](https://www.npmjs.com/package/vm-browserify)\n* [zlib](https://www.npmjs.com/package/browserify-zlib)\n\nThe plugin uses [browser-resolve](https://github.com/defunctzombie/node-browser-resolve) from the [browserify](https://github.com/substack/node-browserify) tool chain to load the source code from node_modules.\n\n### Mocking\nImported modules, local or npm packages, can be mocked using [karma-typescript-mock](https://www.npmjs.com/package/karma-typescript-mock). This feature is available in `karma-typescript@^3.0.5`.\n\n## Transforms API\n\nThe bundler has a public API which lets plugins alter or completely replace code before adding it to the bundle.\nFor example, a plugin could compile ES2015 JavaScript code to to ES5 syntax, making it possible to import an `npm` module\nwritten in ES2015 syntax from a Typescript module directly.\n\nThe interface between the bundler and the plugins is a plain array of functions, specified in the configuration property `karmaTypescriptConfig.bundlerOptions.transforms`, where each function is considered a transforming plugin.\n\nThe plugin functions in the transforms array are asynchronous and adhere to the Node.js callback convention where the first\nargument of the callback function is an `Error` object or `undefined` and the following parameters contains the result.\nHowever, although each function is asynchronous, all functions will be called *synchronously* one by one in the order they were added to the array, and each function will be called with the result of the previous function, enabling transforms plugin chaining.\n\nTransforms will be executed at two points in the bundling process: right after compilation of the project Typescript files\nand when resolving `import` and `require` statements. This means each transforming function will be called for both\nTypescript files and JavaScript files from `node_modules`, making each plugin implementation responsible for validating the\ncontext before performing any logic, for example by checking the file name, module name or the existence of an ast object etc.\n\nEach transforming function will be executed before resolving dependencies, which means paths in `import` or `require` statements\nor anywhere in the code can be rewritten before bundling, to fit the Karma execution environment. \n\nExample of a simple inline transforming function replacing the contents of a `.css` file, mimicking the behavior of Css Modules:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        transforms: [\n            function(context, callback) {\n                if(context.module === \"./main.css\") {\n                    context.source = \"module.exports = { color: red };\";\n                    return callback(undefined, true);\n                }\n                return callback(undefined, false);\n            }\n        ]\n    }\n}\n```\n\nIt is also possible to change the transpiled Typescript (ie the plain JavaScript code) code by using the third callback parameter to tell the Transforms API not to recompile the transpiled code:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        transforms: [\n            function(context, callback) {\n                if(context.ts) {\n                    context.ts.transpiled = \"\\n/* istanbul ignore next */\\n\" + context.ts.transpiled;\n                    return callback(undefined, true, false);\n                }\n                return callback(undefined, false);\n            }\n        ]\n    }\n}\n```\n\n### Context\nThe context object, `TransformContext`, is defined [here](https://github.com/monounity/karma-typescript/blob/master/src/api/transforms.ts).\n\n### Callback\n\nThe callback has two signatures, the \"boolean\" and the \"object\".\n\nThe boolean callback function has three arguments:\n1. An `Error` object or `undefined`\n2. A boolean indicating whether the value of `context.source` has changed or not.\n3. A boolean indicating whether the transformed source should be recompiled. Defaults to true and can be omitted.\n\nThe object callback function has two arguments:\n\n1. An `Error` object or `undefined`\n2. An object literal, which has the following properties:\n    1. A boolean indicating whether the value of `context.source` has changed or not.\n    2. A boolean indicating whether the transformed source should be recompiled (Typescript only!).\n    3. A boolean indicating whether a new AST should be created for the transformed source (JavaScript only!).\n\n## Requirements\n\nTypescript ^1.6.2 is required.\n\nVersions 1.6.2 - 1.7.5 work but aren't as heavily tested as versions 1.8.10 and up.\n\n## Troubleshooting\n\n### Error: Can not load \"karma-typescript\", it is not registered!\n\nUsers have reported success by simply deleting the `node_modules` folder and then running `npm install` again.\n\n### Error: Cannot find module 'buffer/' from '.'\n\n*Note: this error has been fixed in karma-typescript@^3.0.0`.*\n\nThis error seems to hit mostly users of with older versions of `npm`, where all dependencies don't get pulled in automatically by `npm`.\n\nThere's a workaround reported by users, which is simply adding the missing dependencies explicitly to `package.json`:\n\n * `npm install --save-dev browser-resolve`\n * `npm install --save-dev buffer`\n * `npm install --save-dev process`\n\nOther workarounds are running `npm install` twice or, if possible, upgrading to a newer version of `npm`.\n\nThese are the environments reported failing/working:\n\n|Npm|Node.js|OS|Works|\n|---|---|---|---|\n|2.5.18|4.4.7|Unknown|No|\n|2.14.7|4.2.1|Ubuntu 14.04|No|\n|2.14.12|4.2.6|OSX 10.11.3|No|\n|2.15.9|4.5.0|OSX 10.11.6|No|\n|2.15.9|4.6.0|OSX 10.12.3|No|\n|2.15.11|4.6.2|Ubuntu 14.04|No|\n|2.15.11|4.7.0|Ubuntu 14.04|Yes|\n|3.5.3|4.2.1|Windows 10|Yes|\n|3.8.6|6.10.0|Windows Server 2012 R2|Yes|\n|3.10.3|6.4.0|OSX 10.11.6|Yes|\n|3.10.9|6.9.2|Ubuntu 14.04|Yes|\n|4.0.5|6.4.0|OSX 10.11.6|Yes|\n|4.1.2|7.5.0|OSX 10.12.2|No|\n|4.1.2|7.7.3|Ubuntu 14.04|Yes|\n\n## Licensing\n\nThis software is licensed with the MIT license.\n\n© 2016-2019 Erik Barke, Monounity\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@5.0.0-beta.1",
      "_nodeVersion": "12.11.1",
      "_npmVersion": "6.11.3",
      "dist": {
        "integrity": "sha512-JNZG5gqKsAE+VseoK0xjTlN21lgKaIjEMOYS9KsitTa7wwbeOs254X40SF/cI50amfjfvOnC24UbQmGGNrbBAA==",
        "shasum": "25f3f02f6cbcc0c747fc1e026a396c295c0dc0b3",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-5.0.0-beta.1.tgz",
        "fileCount": 115,
        "unpackedSize": 347485,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeFQflCRA9TVsSAnZWagAAw1EP+wXvJ69LPv2y6+F8SkFG\nooPmGue0iQ6SR9zoHjZPoKANdPZGvClGaueEB0T+PfWCkMglvi1sjabbpNSE\n12sDszoP281Snu/yWRpwy1Je48eK+o/NmvCw6NR+/LXOPc7mmjz9lhZejwBX\n0rOCO3fILBC9Ru5X+9vN9VcAqmwycJk0f2apJd705vpvWlqLbKTI2KPQ1kNL\nxBYSp3yp7b0QI0jZRA1PYdQ9aJzZmGyhEBVGKlRtMcoJqK1SrE897zj8qrIP\nbM6dg98L4fja1oLuvduHyhP3pmshwOAwoZNZHLLuvCPNn4T0rE6vRhcy4/B9\naCP70rAlC7Ue2kQabHHh0d21Ml8lfA9Xoh+QY8b1iaHcFNrGxmTn51KK+qIU\np2J9YdtNzh4KLKfNX0m1rO7RGsItERyKWIKU/zz5W9S9yXYgapzOVxBM/ujc\nc3BCmGyOPbHxWXTpzesHv3pwVUOdQDtBVqPX/e4kNEh63U0CUi250yrdVCbk\n+F8JafHpK66y18ywdAasUSdb1CvaMIfSrpA4ND1rY/IaFtZyIZk8plJhlQVm\nUcrNyWwrO/Tu9bpQWuLaExd+1MdnAxcVyzZpMAEnot32zW8ylOEFJHxHTwqx\ngeUDDwYsPGufaTCv5A/LPZjIbhGRTMoJ8JN8otrBIpZ0xQoKeSJ8QO/0QXln\nA3a5\r\n=cuIt\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQD26IFnjCTfUo/+z5/Jat8a/e2g8pqy/pYDQWGmH69P1QIhAMfC5NkIextf4MPylgJCjuJvc1FMHHkaWH7jpinf4sGL"
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_5.0.0-beta.1_1578436580678_0.3319798160197833"
      },
      "_hasShrinkwrap": false
    },
    "5.0.0-beta.3": {
      "name": "karma-typescript",
      "version": "5.0.0-beta.3",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "tslint --project tsconfig.json",
        "build": "tsc --rootDir ./src",
        "test": "nyc --require ts-node/register tape src/**/*.spec.ts | faucet"
      },
      "nyc": {
        "extension": [
          ".ts"
        ],
        "exclude": [
          "**/*.spec.ts"
        ],
        "reporter": [
          "html"
        ],
        "tempDir": "./coverage/.nyc_output"
      },
      "dependencies": {
        "acorn": "^7.1.0",
        "acorn-walk": "^7.0.0",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^1.11.3",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.4.3",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.2.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.7.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^3.5.0",
        "events": "^3.0.0",
        "glob": "^7.1.6",
        "https-browserify": "^1.0.0",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^4.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.0.0",
        "json-stringify-safe": "^5.0.1",
        "lodash": "^4.17.15",
        "log4js": "^6.1.0",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "source-map": "^0.7.3",
        "stream-browserify": "^2.0.2",
        "stream-http": "^3.1.0",
        "string_decoder": "^1.3.0",
        "timers-browserify": "^2.0.11",
        "tmp": "^0.1.0",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.1",
        "vm-browserify": "^1.1.2"
      },
      "devDependencies": {
        "@types/async": "^3.0.3",
        "@types/browser-resolve": "0.0.5",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^4.0.2",
        "@types/glob": "^7.1.1",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "@types/istanbul-lib-instrument": "^1.7.3",
        "@types/istanbul-lib-report": "^1.1.1",
        "@types/istanbul-lib-source-maps": "^1.2.2",
        "@types/istanbul-reports": "^1.1.1",
        "@types/karma": "^3.0.5",
        "@types/lodash": "^4.14.149",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^13.1.4",
        "@types/pad": "^2.1.0",
        "@types/sinon": "^7.5.1",
        "@types/tape": "^4.2.33",
        "@types/tmp": "^0.1.0",
        "cli-clear": "^1.0.4",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "nyc": "^15.0.0",
        "puppeteer": "^2.0.0",
        "tape": "^4.12.1",
        "ts-node": "^8.5.4",
        "tslint": "^5.20.1",
        "tslint-eslint-rules": "^5.4.0",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4",
        "typescript": "1 || 2 || 3"
      },
      "readme": "# karma-typescript\n\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Version\" src=\"https://img.shields.io/npm/v/karma-typescript.svg\"></a>\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Total Downloads\" src=\"https://img.shields.io/npm/dt/karma-typescript.svg\"></a>\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Monthly Downloads\" src=\"https://img.shields.io/npm/dm/karma-typescript.svg\"></a>\n<a href=\"https://travis-ci.org/monounity/karma-typescript\"><img alt=\"Travis Status\" src=\"https://img.shields.io/travis/monounity/karma-typescript/master.svg?label=travis\"></a>\n<a href=\"https://ci.appveyor.com/project/monounity/karma-typescript\"><img alt=\"Appveyor Status\" src=\"https://img.shields.io/appveyor/ci/monounity/karma-typescript/master.svg?label=appveyor\"></a>\n\n> Karma :heart: Typescript\n\n* Run unit tests written in Typescript with full type checking, seamlessly without extra build steps or scripts.\n* Get remapped test coverage with [Istanbul](https://istanbul.js.org).\n* Use plain Typescript or a framework: Angular, AngularJS, React, Sinon, any framework of choice.\n\n## Installation\n\nThe easiest way is to keep `karma-typescript` as a devDependency in `package.json`:\n\n```json\n{\n  \"devDependencies\": {\n    \"karma\": \"^4.0.0\",\n    \"karma-typescript\": \"5.0.0-beta.3\"\n  }\n}\n```\n\nDo this by installing the plugin via npm:\n\n```\nnpm install --save-dev karma-typescript\n```\n\n## Configuration\n\nBare minimum configuration can be achieved with the following `karma.conf.js` file:\n\n```javascript\nmodule.exports = function(config) {\n    config.set({\n        frameworks: [\"jasmine\", \"karma-typescript\"],\n        files: [\n            \"src/**/*.ts\" // *.tsx for React Jsx\n        ],\n        preprocessors: {\n            \"**/*.ts\": \"karma-typescript\" // *.tsx for React Jsx\n        },\n        reporters: [\"progress\", \"karma-typescript\"],\n        browsers: [\"Chrome\"]\n    });\n};\n```\n\nThe above example will compile all Typescript files and run the unit tests, producing remapped coverage in `./coverage`.\n\n## Examples\n\n[Cookbook](https://github.com/monounity/karma-typescript/blob/master/packages/karma-typescript/cookbook.md)\n\n### Frameworks and Integrations\n\n- [Angular](https://github.com/monounity/karma-typescript/tree/master/examples/angular2)\n- [AngularJS](https://github.com/monounity/karma-typescript/tree/master/examples/angularjs)\n- [Docker](https://github.com/monounity/karma-typescript/tree/master/examples/docker)\n- [Gulp](https://github.com/monounity/karma-typescript/tree/master/examples/gulp)\n- [Mocha](https://github.com/monounity/karma-typescript/tree/master/examples/mocha)\n\n### Other examples\n\n- Typescript [@latest](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-latest)\n- Typescript [1.8.10](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-1.8.10)\n- Typescript [1.6.2](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-1.6.2)\n\n### Sample applications by users\n- [Hybrid app, code in JavaScript and tests in Typescript](https://github.com/adrianmarinica/karma-typescript-angularjs-sample)\n\n## Transforms:\n- [karma-typescript-angular2-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-angular2-transform)\n- [karma-typescript-cssmodules-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-cssmodules-transform)\n- [karma-typescript-es6-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-es6-transform)\n- [karma-typescript-postcss-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-postcss-transform)\n\n### Example output\n\n<img src=\"http://i.imgur.com/sc4Mswh.png\" width=\"580\" height=\"280\" />\n\n- [Angular2 screenshot](https://github.com/monounity/karma-typescript/blob/master/assets/angular2.png)\n- [React screenshot](https://github.com/monounity/karma-typescript/blob/master/assets/react.png)\n\n## Advanced configuration\n\nThe plugin has default settings for the compiler, instrumenting files and creating reports etc, which should suit most needs.\n\nThese are the default compiler settings:\n\n```javascript\nkarmaTypescriptConfig: {\n    compilerOptions: {\n        emitDecoratorMetadata: true,\n        experimentalDecorators: true,\n        jsx: \"react\",\n        module: \"commonjs\",\n        sourceMap: true,\n        target: \"ES5\"\n    },\n    exclude: [\"node_modules\"]\n}\n```\n\nIf the defaults aren't enough, the settings can be configured from `karma.conf.js`:\n\n* **karmaTypescriptConfig.bundlerOptions.addNodeGlobals** - Boolean indicating whether the global variables\n  `process` and `Buffer` should be added to the bundle.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.bundlerOptions.constants** - An object literal with keys/values which will be available as global\n  variables in the bundle. The keys are expected to be strings and any non-string value will be stringified with `JSON.stringify`.\n\n  Configuration example:\n    ```javascript\n    constants: {\n        __STRING__: JSON.stringify(\"abc\" + 123),\n        __BOOLEAN__: true,\n        \"process.env\": {\n            \"VARIABLE\": \"value\"\n        }\n    }\n    ```\n  Code example:\n    ```javascript\n    declare var __STRING__: string;\n    declare var __BOOLEAN__: boolean;\n\n    console.log(__STRING__, __BOOLEAN__, process.env.VARIABLE);\n    ```\n\n* **karmaTypescriptConfig.bundlerOptions.entrypoints** - A `RegExp` filtering which files loaded by Karma should be executed in\n   a test run, for example only filenames ending with \".spec.ts\": `/\\.spec\\.ts$/`.<br/>\n   This setting can be used to make sure the specs have finished setting up the test environment before other code starts\n   requiring modules, which otherwise could lead to subtle bugs caused by race conditions.<br/>\n   When filtering file paths, beware that Windows uses `\\` while UNIX-like systems use `/` as path separator.<br/>\n   Defaults to all files, `/.*/`.\n\n* **karmaTypescriptConfig.bundlerOptions.exclude** - An array of npm module names that will be excluded from the bundle.\n\n* **karmaTypescriptConfig.bundlerOptions.ignore** - An array of npm module names that will be bundled as stubs, ie `module.exports = {};`.\n\n* **karmaTypescriptConfig.bundlerOptions.noParse** - An array of module names that will be bundled without being parsed for dependencies.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.alias** - An object literal where the key is a module name\n  and the value is a path that will be used when resolving the module.<br/>\n  The key is a string.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.extensions** - An array of file extensions to use, in order, when resolving modules.<br/>\n  Defaults to `[\".js\", \".json\", \".ts\", \".tsx\"]`.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.directories** - An array of directories where modules will be recursively looked up.<br/>\n  Defaults to `[\"node_modules\"]`.\n\n* **karmaTypescriptConfig.bundlerOptions.sourceMap** - A boolean indicating whether source maps should be generated for imported modules in the bundle, useful for debugging in a browser.\n  For more debugging options, please see `karmaTypescriptConfig.coverageOptions.instrumentation`.</br>\n  Defaults to `false`.\n\n* **karmaTypescriptConfig.bundlerOptions.transforms** - An array of functions altering or replacing compiled Typescript code/Javascript\n  code loaded from `node_modules` before bundling it.\n  For more detailed documentation on transforms, please refer to the [Transforms API section](#transforms-api) in this document.<br/>\n\n* **karmaTypescriptConfig.bundlerOptions.validateSyntax** - A boolean indicating whether the syntax of the bundled code should be validated.\n  Setting this to `false` may speed up bundling for large projects with lots of imports from `node_modules`.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.compilerDelay** - The number of milliseconds the compiler waits before compiling the project on each run.</br>\n  For projects with a large number of files it might be necessary to increase this value to make sure the compiler has collected all files before firing.</br>\n  Defaults to 250 ms.\n\n* **karmaTypescriptConfig.compilerOptions** - This setting will override or add to existing compiler options.<br/>\n  Valid options are the same as for the `compilerOptions` section in `tsconfig.json`, with the\n  exception of `outDir`and `outFile` which are ignored since the code is compiled in-memory.\n\n  If `noEmitOnError` is set to a truthy value, in either `tsconfig.json` or in `karmaTypescriptConfig.compilerOptions`,\n  the karma process will exit with `ts.ExitStatus.DiagnosticsPresent_OutputsSkipped` if any compilation errors occur.\n\n* **karmaTypescriptConfig.coverageOptions.instrumentation** - A boolean indicating whether the code should be instrumented,\n  set this property to `false` to see the original Typescript code when debugging.\n  Please note that setting this property to `true` requires the Typescript compiler option `sourceMap` to also be set to `true`.\n  For more debugging options, please see `karmaTypescriptConfig.coverageOptions.sourceMap`.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.coverageOptions.instrumenterOptions** - Pass options to the `istanbul` instrumenter, ie options supported by [istanbul-lib-instrument](https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/src/instrumenter.js):\n\n    ```js\n    {\n        // Name of global coverage variable.\n        coverageVariable: '__coverage__',\n\n        // Preserve comments in output.\n        preserveComments: false,\n\n        // Generate compact code.\n        compact: true,\n\n        // Set to true to instrument ES6 modules.\n        esModules: false,\n\n        // Set to true to allow `return` statements outside of functions.\n        autoWrap: false,\n\n        // Set to true to produce a source map for the instrumented code.\n        produceSourceMap: false,\n\n        // Set to array of class method names to ignore for coverage.\n        ignoreClassMethods: [],\n\n        // A callback function that is called when a source map URL is found in the original code.\n        // This function is called with the source file name and the source map URL.\n        sourceMapUrlCallback: null,\n\n        // Turn debugging on.\n        debug: false,\n\n        // Set plugins.\n        plugins: [\n            'asyncGenerators',\n            'bigInt',\n            'classProperties',\n            'classPrivateProperties',\n            'dynamicImport',\n            'importMeta',\n            'objectRestSpread',\n            'optionalCatchBinding',\n            'flow',\n            'jsx'\n        ]\n    };\n    ```\n\n* **karmaTypescriptConfig.coverageOptions.exclude** - A `RegExp` object or an array of `RegExp` objects for filtering which files should be excluded from coverage instrumentation.<br/>\n  When filtering file paths, beware that Windows uses `\\` while UNIX-like systems use `/` as path separator.<br/>\n  Defaults to `/\\.(d|spec|test)\\.ts$/i` which excludes &ast;.d.ts, &ast;.spec.ts and &ast;.test.ts (case insensitive).\n\n* **karmaTypescriptConfig.coverageOptions.threshold** - An object with minimum coverage thresholds. The threshold values can be set on\n  a global level and on a per-file level, with options to exclude files and directories, and override settings on a per-file basis using globbing patterns.<br/>\n  A positive value will be used as a minimum percentage, for example `statements: 50` means that at least 50% of the statements should be covered by a test.<br/>\n  A negative value will be used as a maximum number of uncovered items, for example `lines: 10` means that no more than 10 uncovered lines are allowed.\n    ```javascript\n    threshold: {\n        global: {\n            statements: 100,\n            branches: 100,\n            functions: -10,\n            lines: 100,\n            excludes: [\n                \"src/foo/**/*.js\"\n            ]\n        },\n        file: {\n            statements: -10,\n            branches: 100,\n            functions: 100,\n            lines: 100,\n            excludes: [\n                \"src/bar/**/*.js\"\n            ],\n            overrides: {\n                \"src/file.js\": {\n                    statements: 90\n                }\n            }\n        }\n    }\n    ```\n\n* **karmaTypescriptConfig.exclude** - File string patterns to be excluded by the compiler. This property may be an `array` or an `object` for more fine-grained control.\n  * Array: The string values will be merged with existing options.\n  * Object: The string values will be merged with or replace existing options:\n  ```javascript\n  {\n      mode: \"merge|replace\",\n      values: [\"foo\", \"bar\"]\n  }\n  ```\n  Defaults to `[\"node_modules\"]`.\n\n* **karmaTypescriptConfig.include** - File string patterns to be included by the compiler. This property may be an `array` or an `object` for more fine-grained control.\n  * Array: The string values will be merged with existing options.\n  * Object: The string values will be merged with or replace existing options:\n  ```javascript\n  {\n      mode: \"merge|replace\",\n      values: [\"foo\", \"bar\"]\n  }\n  ```\n  This option is available in Typescript ^2.0.0.\n\n* **karmaTypescriptConfig.reports** - The types of coverage reports that should be created when running the tests,\n  defaults to an html report in the directory `./coverage`.\n  Reporters are configured as `\"reporttype\": destination` where the destination can be specified in three ways:\n\n    * A `string` with a directory path, for example `\"html\": \"coverage\"`.\n    * An empty string or `null`. Writes the output to the console, for example `\"text-summary\": \"\"`. This is only possible for a subset of the reports available.\n    * An `object` with more fine-grained control over path and filename:\n    ```javascript\n    \"cobertura\": {\n        \"directory\": \"coverage\",    // optional, defaults to 'coverage'\n        \"subdirectory\": \"cobertura\" // optional, defaults to the name of the browser running the tests\n        \"filename\": \"coverage.xml\", // optional, defaults to the report name\n    }\n\n    // \"subdirectory\" may also be a function that returns a directory from a given browser\n    \"cobertura\": {\n        \"directory\": \"coverage\",\n        \"subdirectory\": function(browser) {\n            // normalizes browser name directories to lowercase without version\n            // ex: coverage/chrome/coverage.xml\n            return browser.name.toLowerCase().split(' ')[0];\n        },\n        \"filename\": \"coverage.xml\"\n    }\n    ```\n\n    * Available report types:\n        * `\"clover\": destination`\n        * `\"cobertura\": destination`\n        * `\"html\": destination`\n        * `\"html-spa\": destination`\n        * `\"json-summary\": destination`\n        * `\"json\": destination`\n        * `\"lcovonly\": destination`\n        * `\"teamcity\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text-lcov\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text-summary\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text\": destination` (redirects to the console with destination \"\" or `null`)\n\n    * Example of the three destination types:\n    ```javascript\n    karmaTypescriptConfig: {\n        reports:\n        {\n            \"cobertura\": {\n                \"directory\": \"coverage\",\n                \"filename\": \"coverage.xml\",\n                \"subdirectory\": \"cobertura\"\n            },\n            \"html\": \"coverage\",\n            \"text-summary\": \"\"\n        }\n    }\n    ```\n\n* **karmaTypescriptConfig.transformPath** - A function for renaming compiled file extensions to `.js`.<br/>\n  Defaults to renaming `.ts` and `.tsx` to `.js`.\n\n* **karmaTypescriptConfig.tsconfig** - A path to a `tsconfig.json` file.<br/>\n  The default compiler options will be replaced by the options in this file.<br/>\n  The directory of the `tsconfig.json` file will be used as the base path for the Typescript compiler, and if `karmaTypescriptConfig.tsconfig` isn't set, the `basePath` property of the Karma config will be used as the\n  compiler base path instead.\n\nExample of a full `karmaTypescriptConfig` configuration:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        addNodeGlobals: true,\n        constants: {\n            __PRODUCTION__: false\n        },\n        entrypoints: /\\.spec\\.(ts|tsx)$/,\n        exclude: [\"react/addons\"],\n        ignore: [\"ws\"],\n        noParse: \"jquery\",\n        resolve: {\n            alias: {\n                \"@angular/upgrade/static$\": \"../bundles/upgrade-static.umd.js\"\n            },\n            extensions: [\".js\", \".json\"],\n            directories: [\"node_modules\"]\n        },\n        sourceMap: false,\n        transforms: [require(\"karma-typescript-es6-transform\")()],\n        validateSyntax: true\n    },\n    compilerDelay: 500,\n    compilerOptions: {\n        noImplicitAny: true,\n    },\n    coverageOptions: {\n        instrumentation: true,\n        instrumenterOptions: {\n            preserveComments: true\n        },\n        exclude: /\\.(d|spec|test)\\.ts/i,\n        threshold: {\n            global: {\n                statements: 100,\n                branches: 100,\n                functions: -10,\n                lines: 100,\n                excludes: [\n                    \"src/foo/**/*.js\"\n                ]\n            },\n            file: {\n                statements: -10,\n                branches: 100,\n                functions: 100,\n                lines: 100,\n                excludes: [\n                    \"src/bar/**/*.js\"\n                ],\n                overrides: {\n                    \"src/file.js\": {\n                        statements: 90\n                    }\n                }\n            }\n        },\n    },\n    exclude: [\"broken\"],\n    include: {\n        mode: \"replace\",\n        values: [\"**/*.ts\"]\n    },\n    reports: {\n        \"cobertura\": {\n            \"directory\": \"coverage\",\n            \"filename\": \"cobertura/coverage.xml\"\n        },\n        \"html\": \"coverage\",\n        \"text-summary\": \"\"\n    },\n    transformPath: function(filepath) {\n        return filepath.replace(/\\.(ts|tsx)$/, \".js\");\n    },\n    tsconfig: \"./tsconfig.json\"\n}\n```\n\n## Automatic bundling\n\nFiles executed in the test run are bundled into a main bundle, containing dependencies required from node_modules,\nand several smaller standalone bundles containing the Typescript files. All these bundles are tied together by `commonjs.js`,\nwhich acts as a hub, loading modules when they are required by other modules.\n\nAll files are bundled by being wrapped in a custom [CommonJS](https://en.wikipedia.org/wiki/CommonJS) wrapper,\nwhich emulates the Node.js module system by injecting the require function, the module object, the exports object,\nthe &#95;&#95;dirname variable and the &#95;&#95;filename variable.\n\nFor instance, this Typescript sample:\n\n```javascript\nexport function exportedFunction(): string {\n    return \"\";\n}\n```\n\nWould be compiled to the following JavaScript (assuming the compiler option `module` is set to `commonjs`):\n\n```javascript\nfunction exportedFunction() {\n    return \"\";\n}\nexports.exportedFunction = exportedFunction;\n```\n\nIt would then be wrapped in a `CommonJS` wrapper by the bundler:\n\n```javascript\n(function(global){\n    global.wrappers['/absolutepath/app/src/file.ts']=[function(require,module,exports,__dirname,__filename){\n        function exportedFunction() {\n            return \"\";\n        }\n        exports.exportedFunction = exportedFunction;\n    },'src/file.ts',{}];\n})(this);\n```\n\n*(In this example, the source map and a few other statements have been omitted for brevity and the wrapper has been formatted for readability)*\n\nAfter compilation, a simple static analysis is performed to find \"import\" and \"require\" statements in the code and if any\ndependencies are found, for instance `import { Component } from \"@angular/core\";`, it is added to the main bundle file along\nwith its dependencies.\n\nIf no import or require statements are found in any Typescript file included in the test run, or the compiler option `module`\nis set to another value than `commonjs`, *automatic bundling will not occur*.\n\nThis means that no Typescript file will be wrapped in the CommonJS wrapper and the reason behind this is the encapsulation that\nthe Node.js module system provides. If no module requests any other module, the test run would contain only isolated islands of\ncode unreachable from the global scope, there would be nothing to execute.\n\nHowever, this intentional behavior makes it possible to use karma-typescript for projects that use the Typescript module system,\nor have the compiler option `module` set to another value than `commonjs`, or simply put everything on the global scope.\n\n### Importing stylesheets and bundling for production\n\nStyle files (.css|.less|.sass|.scss) are served as JSON strings to the browser running the tests,\nallowing styles to be loaded using the Typescript import statement, ie `import \"./style/app.scss\";`.\n\nThis means styles can be imported in order to let, for instance, webpack load the styles with\nless-loader or scss-loader etc for bundling later on, without breaking the unit test runner.\n\nNote: JSON required by modules in node_modules will be loaded automatically by the bundler.\n\n### The module object\n\n```javascript\nmodule: {\n    exports: {},\n    id: \"project-relative-path/bar.ts\",\n    uri: \"/absolute-path/project-relative-path/bar.ts\"\n}\n```\n\nThe `module.id` will be calculated from the value of `module.uri`, relative to the Karma config `basePath` value.\n\nModules exporting an extensible object such as a *function* or an *object literal* will also be decorated with\na non-enumerable `default` property if `module.exports.default` is undefined.\n\n### Globals\n\nA full Node.js environment will be provided with global variables and browser shims for builtin core modules:\n\n* &#95;&#95;dirname\n* &#95;&#95;filename\n* Buffer\n* global\n* process\n\n### Browser shims\n* [assert](https://www.npmjs.com/package/assert)\n* [buffer](https://www.npmjs.com/package/buffer)\n* [console](https://www.npmjs.com/package/console-browserify)\n* [constants](https://www.npmjs.com/package/constants-browserify)\n* [crypto](https://www.npmjs.com/package/crypto-browserify)\n* [domain](https://www.npmjs.com/package/domain-browser)\n* [events](https://www.npmjs.com/package/events)\n* [http](https://www.npmjs.com/package/stream-http)\n* [https](https://www.npmjs.com/package/https-browserify)\n* [os](https://www.npmjs.com/package/os-browserify)\n* [path](https://www.npmjs.com/package/path-browserify)\n* [punycode](https://www.npmjs.com/package/punycode)\n* [querystring](https://www.npmjs.com/package/querystring-es3)\n* [stream](https://www.npmjs.com/package/stream-browserify)\n* [string_decoder](https://www.npmjs.com/package/string_decoder)\n* [timers](https://www.npmjs.com/package/timers-browserify)\n* [tty](https://www.npmjs.com/package/tty-browserify)\n* [url](https://www.npmjs.com/package/url)\n* [util](https://www.npmjs.com/package/util)\n* [vm](https://www.npmjs.com/package/vm-browserify)\n* [zlib](https://www.npmjs.com/package/browserify-zlib)\n\nThe plugin uses [browser-resolve](https://github.com/defunctzombie/node-browser-resolve) from the [browserify](https://github.com/substack/node-browserify) tool chain to load the source code from node_modules.\n\n### Mocking\nImported modules, local or npm packages, can be mocked using [karma-typescript-mock](https://www.npmjs.com/package/karma-typescript-mock). This feature is available in `karma-typescript@^3.0.5`.\n\n## Transforms API\n\nThe bundler has a public API which lets plugins alter or completely replace code before adding it to the bundle.\nFor example, a plugin could compile ES2015 JavaScript code to to ES5 syntax, making it possible to import an `npm` module\nwritten in ES2015 syntax from a Typescript module directly.\n\nThe interface between the bundler and the plugins is a plain array of functions, specified in the configuration property `karmaTypescriptConfig.bundlerOptions.transforms`, where each function is considered a transforming plugin.\n\nThe plugin functions in the transforms array are asynchronous and adhere to the Node.js callback convention where the first\nargument of the callback function is an `Error` object or `undefined` and the following parameters contains the result.\nHowever, although each function is asynchronous, all functions will be called *synchronously* one by one in the order they were added to the array, and each function will be called with the result of the previous function, enabling transforms plugin chaining.\n\nTransforms will be executed at two points in the bundling process: right after compilation of the project Typescript files\nand when resolving `import` and `require` statements. This means each transforming function will be called for both\nTypescript files and JavaScript files from `node_modules`, making each plugin implementation responsible for validating the\ncontext before performing any logic, for example by checking the file name, module name or the existence of an ast object etc.\n\nEach transforming function will be executed before resolving dependencies, which means paths in `import` or `require` statements\nor anywhere in the code can be rewritten before bundling, to fit the Karma execution environment. \n\nExample of a simple inline transforming function replacing the contents of a `.css` file, mimicking the behavior of Css Modules:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        transforms: [\n            function(context, callback) {\n                if(context.module === \"./main.css\") {\n                    context.source = \"module.exports = { color: red };\";\n                    return callback(undefined, true);\n                }\n                return callback(undefined, false);\n            }\n        ]\n    }\n}\n```\n\nIt is also possible to change the transpiled Typescript (ie the plain JavaScript code) code by using the third callback parameter to tell the Transforms API not to recompile the transpiled code:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        transforms: [\n            function(context, callback) {\n                if(context.ts) {\n                    context.ts.transpiled = \"\\n/* istanbul ignore next */\\n\" + context.ts.transpiled;\n                    return callback(undefined, true, false);\n                }\n                return callback(undefined, false);\n            }\n        ]\n    }\n}\n```\n\n### Context\nThe context object, `TransformContext`, is defined [here](https://github.com/monounity/karma-typescript/blob/master/src/api/transforms.ts).\n\n### Callback\n\nThe callback has two signatures, the \"boolean\" and the \"object\".\n\nThe boolean callback function has three arguments:\n1. An `Error` object or `undefined`\n2. A boolean indicating whether the value of `context.source` has changed or not.\n3. A boolean indicating whether the transformed source should be recompiled. Defaults to true and can be omitted.\n\nThe object callback function has two arguments:\n\n1. An `Error` object or `undefined`\n2. An object literal, which has the following properties:\n    1. A boolean indicating whether the value of `context.source` has changed or not.\n    2. A boolean indicating whether the transformed source should be recompiled (Typescript only!).\n    3. A boolean indicating whether a new AST should be created for the transformed source (JavaScript only!).\n\n## Requirements\n\nTypescript ^1.6.2 is required.\n\nVersions 1.6.2 - 1.7.5 work but aren't as heavily tested as versions 1.8.10 and up.\n\n## Troubleshooting\n\n### Error: Can not load \"karma-typescript\", it is not registered!\n\nUsers have reported success by simply deleting the `node_modules` folder and then running `npm install` again.\n\n### Error: Cannot find module 'buffer/' from '.'\n\n*Note: this error has been fixed in karma-typescript@^3.0.0`.*\n\nThis error seems to hit mostly users of with older versions of `npm`, where all dependencies don't get pulled in automatically by `npm`.\n\nThere's a workaround reported by users, which is simply adding the missing dependencies explicitly to `package.json`:\n\n * `npm install --save-dev browser-resolve`\n * `npm install --save-dev buffer`\n * `npm install --save-dev process`\n\nOther workarounds are running `npm install` twice or, if possible, upgrading to a newer version of `npm`.\n\nThese are the environments reported failing/working:\n\n|Npm|Node.js|OS|Works|\n|---|---|---|---|\n|2.5.18|4.4.7|Unknown|No|\n|2.14.7|4.2.1|Ubuntu 14.04|No|\n|2.14.12|4.2.6|OSX 10.11.3|No|\n|2.15.9|4.5.0|OSX 10.11.6|No|\n|2.15.9|4.6.0|OSX 10.12.3|No|\n|2.15.11|4.6.2|Ubuntu 14.04|No|\n|2.15.11|4.7.0|Ubuntu 14.04|Yes|\n|3.5.3|4.2.1|Windows 10|Yes|\n|3.8.6|6.10.0|Windows Server 2012 R2|Yes|\n|3.10.3|6.4.0|OSX 10.11.6|Yes|\n|3.10.9|6.9.2|Ubuntu 14.04|Yes|\n|4.0.5|6.4.0|OSX 10.11.6|Yes|\n|4.1.2|7.5.0|OSX 10.12.2|No|\n|4.1.2|7.7.3|Ubuntu 14.04|Yes|\n\n## Licensing\n\nThis software is licensed with the MIT license.\n\n© 2016-2020 Erik Barke, Monounity\n",
      "readmeFilename": "README.md",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@5.0.0-beta.3",
      "_nodeVersion": "12.11.1",
      "_npmVersion": "6.11.3",
      "dist": {
        "integrity": "sha512-0D5YGKJYcXnMsT1dtclFy2MMFmnb0/37NQufBdjfXiPFbjLLPPRVzqCYQ61MH9yaTgS4c1ZW+1n+XLrVXm//PA==",
        "shasum": "eba7b49f23169fd0b96eb9b713baf050b8fa6695",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-5.0.0-beta.3.tgz",
        "fileCount": 115,
        "unpackedSize": 347657,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeGzIPCRA9TVsSAnZWagAAJQEP/3BripEfwH+50AEuMwXM\nIO0+9di+iCA6MVWnqbT1PH9dDtpP53dF8GyglWn6BsAfcFpVDmDjjzOKWW4v\nHVzghnS5ESfi007wk1h6pOG2EkrVT5CCW/i7AnnTYle9vWxCnbYKU9qcpGQb\nogwTfQ6GktmiI0J3Ou2cJR6WB9WJITDZ5xBtb+WK1NN3nSUxiivM4TvvpVed\nSHJECux21oKRtKGZgTFXkMrZEzpbI3D/yIazL9CC7zK3hVomyRyZDzDfidbz\nlfYu0uQb3z1ZEjMLjULs8H1IVknTEEGUrkpuRj9QA/QKIZ0a839uX+H2sy7+\n7muQnY8j3iU0axg7I1jrFNgMVR13E6ASAiwOII0FBdogYuJPMDsHRoRkr6L0\nKPKBQ+fBknPi3nOeSv+UsabZuwskRJx/YGV0IZjyvtoLwR4RpO7qT20F9eaW\nSzShMcErmFdyF8eWuPeb/+H29KL9RdDE1kSnvVt7nMq2hDJTNMIB16obtb59\n5+rq7wp7eU9DdTC/1cJAtoWOYoWyK1KkTNI+7g8Cb6a685wpTYqQGAAkOaeK\nCerj3UAswtCaUE5KMYRmZjCOxIP47VVeoE+K7k65zoJ5Gx7QbJl8FWN/RjAr\nBXP0WpwQzMYdGzbhDSxRyaT5zlcjKR5QFokoQuLPHwG7ELjr6P10FfGSh3Jq\n5oKL\r\n=u2z7\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDyuZ3B7eOghw21+Bz/piRLWfx67924KkmVgUK89rZFgQIgTO9jRiUr/SaODTpRIrGWZsaQJMtNhF9e015/M9L8nJU="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_5.0.0-beta.3_1578840591362_0.7093970825772753"
      },
      "_hasShrinkwrap": false
    },
    "5.0.0": {
      "name": "karma-typescript",
      "version": "5.0.0",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "tslint --project tsconfig.json",
        "build": "tsc --rootDir ./src",
        "test": "nyc --require ts-node/register tape src/**/*.spec.ts | faucet"
      },
      "nyc": {
        "extension": [
          ".ts"
        ],
        "exclude": [
          "**/*.spec.ts"
        ],
        "reporter": [
          "html"
        ],
        "tempDir": "./coverage/.nyc_output"
      },
      "dependencies": {
        "acorn": "^7.1.0",
        "acorn-walk": "^7.0.0",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^1.11.3",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.4.3",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.2.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.7.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^3.5.0",
        "events": "^3.0.0",
        "glob": "^7.1.6",
        "https-browserify": "^1.0.0",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^4.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.0.0",
        "json-stringify-safe": "^5.0.1",
        "lodash": "^4.17.15",
        "log4js": "^6.1.0",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "source-map": "^0.7.3",
        "stream-browserify": "^2.0.2",
        "stream-http": "^3.1.0",
        "string_decoder": "^1.3.0",
        "timers-browserify": "^2.0.11",
        "tmp": "^0.1.0",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.1",
        "vm-browserify": "^1.1.2"
      },
      "devDependencies": {
        "@types/async": "^3.0.3",
        "@types/browser-resolve": "0.0.5",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^4.0.2",
        "@types/glob": "^7.1.1",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "@types/istanbul-lib-instrument": "^1.7.3",
        "@types/istanbul-lib-report": "^1.1.1",
        "@types/istanbul-lib-source-maps": "^1.2.2",
        "@types/istanbul-reports": "^1.1.1",
        "@types/karma": "^3.0.5",
        "@types/lodash": "^4.14.149",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^13.1.4",
        "@types/pad": "^2.1.0",
        "@types/sinon": "^7.5.1",
        "@types/tape": "^4.2.33",
        "@types/tmp": "^0.1.0",
        "cli-clear": "^1.0.4",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "nyc": "^15.0.0",
        "puppeteer": "^2.0.0",
        "tape": "^4.12.1",
        "ts-node": "^8.5.4",
        "tslint": "^5.20.1",
        "tslint-eslint-rules": "^5.4.0",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4",
        "typescript": "1 || 2 || 3"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@5.0.0",
      "_nodeVersion": "13.6.0",
      "_npmVersion": "6.13.4",
      "dist": {
        "integrity": "sha512-O8pQNKqbykAc20vjc1hd0CmIDycjxNAopK9ZADfG1ca7l2NA8M8HEnWDUxX2Q8pnsOipFkdLRRU3rogzdLufFA==",
        "shasum": "8c3c776c3c304aefd88b3daa2f54f5c51cb3b938",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-5.0.0.tgz",
        "fileCount": 115,
        "unpackedSize": 349060,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeY5n3CRA9TVsSAnZWagAA6FUP/A9pWAk8q75VQBzcsrYf\nWmm8yRlECp00s2Uqe8LVasgKdnfzt9hkJcSYtd59bvNFp2CirpWTYIw5I5QM\n7vQsTB12yqdzdHGVacIm8JGyBAS0rjatKEkgiIWAASaglHlB/VfE0tIBecqf\nVmSRwv0I40RS4Pl5oq1vohZdaWMAIeWjEhF5LJdbPtI8sQ+U0Vlz//kv6MIh\nObN49y6J4Bk2qJf1GvtppRO0Rm8UwTzQqk0oyW3SqcTeKMI957jPQ2ELvpUt\nDfRG+2mkM9NHTxAXBHBB8JRWHuTT/poMJvJfa9fO9wvid9XlWljRJxhxa/Xm\nzHKaWmtBIHzSdzllnQpPoHHacMbS+34p0j3kZHhP2qKuJHZMyJT4qtMfASXl\np7i4GJKemDcV8AmkL8ki6ZZJPoSDra2kJFLsGvZJ/IL0wd9SqwKXkN5ZTjpB\n8FS2k77KBpE44rEGdwIZoNSZGQXvdIylPjmzR0XFQs8xNeumXagZB+2m34Xi\nKtDaYcyWFbgYqpifepoJ4syY+B2giTIEytiBb3RIJE75ry6Ebs0zWWzrsjSh\nTYMUatolhYvRQhmWXEPYptSlb0THAeTfS6kBeB0qfJpryRpVPW+GE4tgRWFw\nBpIgy3mxbxyvlnmwfpAkMkVXyqI9vx049D1MP0ifb5qTYPBGD2xeyKq83vNP\noD2V\r\n=wUnu\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDizxJ0LGPbCF0a5UoYVcXmPVgDqofk5KNlTV6v8KMmUgIgSIMZJq4iKeLUgPbU+A1PHJZcDwh28irfNGN86xBWQ+M="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_5.0.0_1583585782669_0.03486969534153439"
      },
      "_hasShrinkwrap": false
    },
    "5.0.1": {
      "name": "karma-typescript",
      "version": "5.0.1",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "tslint --project tsconfig.json",
        "build": "tsc --rootDir ./src",
        "test": "nyc --require ts-node/register tape src/**/*.spec.ts | faucet"
      },
      "nyc": {
        "extension": [
          ".ts"
        ],
        "exclude": [
          "**/*.spec.ts"
        ],
        "reporter": [
          "html"
        ],
        "tempDir": "./coverage/.nyc_output"
      },
      "dependencies": {
        "acorn": "^7.1.0",
        "acorn-walk": "^7.0.0",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^1.11.3",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.4.3",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.2.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.7.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^3.5.0",
        "events": "^3.0.0",
        "glob": "^7.1.6",
        "https-browserify": "^1.0.0",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^4.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.0.0",
        "json-stringify-safe": "^5.0.1",
        "lodash": "^4.17.15",
        "log4js": "^6.1.0",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "source-map": "^0.7.3",
        "stream-browserify": "^2.0.2",
        "stream-http": "^3.1.0",
        "string_decoder": "^1.3.0",
        "timers-browserify": "^2.0.11",
        "tmp": "^0.1.0",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.1",
        "vm-browserify": "^1.1.2"
      },
      "devDependencies": {
        "@types/async": "^3.0.3",
        "@types/browser-resolve": "0.0.5",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^4.0.2",
        "@types/glob": "^7.1.1",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "@types/istanbul-lib-instrument": "^1.7.3",
        "@types/istanbul-lib-report": "^1.1.1",
        "@types/istanbul-lib-source-maps": "^1.2.2",
        "@types/istanbul-reports": "^1.1.1",
        "@types/karma": "^3.0.5",
        "@types/lodash": "^4.14.149",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^13.1.4",
        "@types/pad": "^2.1.0",
        "@types/sinon": "^7.5.1",
        "@types/tape": "^4.2.33",
        "@types/tmp": "^0.1.0",
        "cli-clear": "^1.0.4",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "nyc": "^15.0.0",
        "puppeteer": "^2.0.0",
        "tape": "^4.12.1",
        "ts-node": "^8.5.4",
        "tslint": "^5.20.1",
        "tslint-eslint-rules": "^5.4.0",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4",
        "typescript": "1 || 2 || 3"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@5.0.1",
      "_nodeVersion": "13.6.0",
      "_npmVersion": "6.13.4",
      "dist": {
        "integrity": "sha512-/AqfeOODqqtB145Lm3Kbx8o05BXxSgSS7WckxYgehkz1oA0/9pdpGRm8VlMqI7UXoLg/YrpZoIztIxpL7Jls/w==",
        "shasum": "9caf1bc4aa416c8860ed32f8e452397472d7fb64",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-5.0.1.tgz",
        "fileCount": 115,
        "unpackedSize": 349342,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJedSc2CRA9TVsSAnZWagAAohQP/jodwGKNQnf2vGJ51FaW\n+QW9qiX0NgdGK6Mm9YWlhW0Damkk38+afF24uyr5F7c5oNfMKh4lwal7jZuk\n0QfbjAwJRmF1K0h+shEpci0xV6Wkfqbi/yoUCdwgg03JqHTIVKsaN/RWPxMe\nickPHZO3gxhq09JliXoA2pIb0SHpSlHhYFHB8z2CoU/K7vtfCmzvrBRfSjrO\nA6s1zx5ObdYua8ShhXCy0lo8G3w00CnHx+hqNrM/+bAeMFVU1Rp/DNab9KJ7\n2UUFsxAqjKdsTCL4EywK85FlBXc1fjO3wdTzcHSxh97Klc6YGXrxRaGTF1E1\nYYY48hhI118AlEzX+OaxJi1biMXpvXkLdj5pehjP9RZGpcahamDN9dLLFmZu\nLOYdfGUF6p3faB3U6t1t0xTzcbuMi07YcaR+CJdO5GYt1efLoUvPQqaP16rS\nOULsbmZ+fQadPvvk507OdEP9qjYF/EhF4ymtYw/BpEqQoERTjK1YMGqj9q75\nsOl+CmdILxtOIQ6k63PVHuJaUo9125eaGOEGg45o/huy0/6BfOaRV0r5nQ/n\n+s0Xd7Enb9oV5UD30kmxKa6AsC6QvQgnLmGTTzAWDwDbSL7d2zaWNXKBwfjN\nLK8T+yA5gL0uW+AH2YH4x5B2NE045MrHTA3gFPvwSU1e1Z9OiJg0cR5FxUWC\n9YGM\r\n=nH4d\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDMGR46MH2SLHs0hc315D4He8DCEptVD1DZWZxxQOc+bQIgO6UB12Md5EqmvRBRGp8AhK82v9VrSuFwCq++VGK3Sgs="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_5.0.1_1584736054243_0.45615604098132034"
      },
      "_hasShrinkwrap": false
    },
    "5.0.2": {
      "name": "karma-typescript",
      "version": "5.0.2",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        },
        {
          "name": "sridharmallela"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "tslint --project tsconfig.json",
        "build": "tsc --rootDir ./src",
        "test": "nyc --require ts-node/register tape src/**/*.spec.ts | faucet"
      },
      "nyc": {
        "extension": [
          ".ts"
        ],
        "exclude": [
          "**/*.spec.ts"
        ],
        "reporter": [
          "html"
        ],
        "tempDir": "./coverage/.nyc_output"
      },
      "dependencies": {
        "acorn": "^7.1.0",
        "acorn-walk": "^7.0.0",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^1.11.3",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.4.3",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.2.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.7.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^4.0.0",
        "events": "^3.0.0",
        "glob": "^7.1.6",
        "https-browserify": "^1.0.0",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^4.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.0.0",
        "json-stringify-safe": "^5.0.1",
        "lodash": "^4.17.15",
        "log4js": "^6.1.0",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "source-map": "^0.7.3",
        "stream-browserify": "^2.0.2",
        "stream-http": "^3.1.0",
        "string_decoder": "^1.3.0",
        "timers-browserify": "^2.0.11",
        "tmp": "^0.1.0",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.1",
        "vm-browserify": "^1.1.2"
      },
      "devDependencies": {
        "@types/async": "^3.0.3",
        "@types/browser-resolve": "^1.11.0",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^4.0.2",
        "@types/glob": "^7.1.1",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "@types/istanbul-lib-instrument": "^1.7.3",
        "@types/istanbul-lib-report": "^3.0.0",
        "@types/istanbul-lib-source-maps": "^4.0.0",
        "@types/istanbul-reports": "^1.1.1",
        "@types/karma": "^4.4.1",
        "@types/lodash": "^4.14.149",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^13.1.4",
        "@types/pad": "^2.1.0",
        "@types/sinon": "^9.0.0",
        "@types/tape": "^4.2.33",
        "@types/tmp": "^0.1.0",
        "cli-clear": "^1.0.4",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "nyc": "^15.0.0",
        "puppeteer": "^2.0.0",
        "tape": "^4.12.1",
        "ts-node": "^8.5.4",
        "tslint": "^6.1.1",
        "tslint-eslint-rules": "^5.4.0",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4",
        "typescript": "1 || 2 || 3"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@5.0.2",
      "_nodeVersion": "13.6.0",
      "_npmVersion": "6.13.4",
      "dist": {
        "integrity": "sha512-cq3ETrnYMynLvUt29bqZhKMCHHDcqx0v0SfcsFqQsn/WWbMqXHNZq9dOLVXt6t3PiqfL0SLGq317LSNVmgLtqw==",
        "shasum": "f5c118b0d7d3ba2711afaebbc48e583f39eae1f6",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-5.0.2.tgz",
        "fileCount": 112,
        "unpackedSize": 348908,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeiJXtCRA9TVsSAnZWagAAvR4QAJYt2yxbqra1s6UUiMeH\ntVSEeOZLAR6U20ir1IBB3hvVqzegwwkvW4PmhVGSsD2VyXZSGpMGLJzCqvn2\n/A78XdPR7xyOddEIqJ3m7NILeH2enXrsfAI2wxr6LwQ3MjJKsoPxCHhWd4jL\nP3D6NXjmCCCZ8bzzz2DKJXfeMFaSYFS1/XPskR82HmXmc/TLpTaAAar6ZCG3\nf92x9d5QHkVj7ZkwdkfDdXcZWHj3lJfc8FGnEIjH2Ew7r7esJGqgnl3Wyh/J\nl7UJ0nhqQQsZnp0zgyFSn3SUEc62ayupTR7/ioDYXRf/rHIVF3IX6wFFX+C5\nxywtGN0qp+UgiNIestyDBiKFpZs8G4pC/PtvKCN9ciLShVxxXEKT4ipmUiaJ\ngJEqk+6J4VsT5XKST98+xpHs2xlc81rzC292f9IW4whBrJwYx/zsahT+ZlLV\nAFqTwB8d85dDOr/E5OaEfjsntmHjkrSMKIoiXq9dMb7h8Nw8oK2cQOx9Z7uW\n8GhYAGQg99JNHE4jh2F2ej39DO/8DryYL8BfkbfDBUkrPhpL3IxZyNmQpqHb\ncYv2R6jAYW0T/h7rfZt2Du7TwROqK7036LPMHfCqeN6giWmIO5/IsKhh+p7g\nax4UYAAU3QCtxdlkq2ZpdWhryPCSlPTztiMjU2j84+swVn6igZulhXyujQY+\nXQY7\r\n=1IBu\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIGfvsHIhy/eTaRFnqV8GRYfIKtEXVVrpIFU/zoH/Zvb8AiEAnPYVYWCiqIBd0psI6lWqrX8bZDoKCFKDtbBVa3fdn9E="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_5.0.2_1586009580633_0.2825745543631961"
      },
      "_hasShrinkwrap": false
    },
    "5.0.3": {
      "name": "karma-typescript",
      "version": "5.0.3",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        },
        {
          "name": "sridharmallela"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "tslint --project tsconfig.json",
        "build": "tsc --rootDir ./src",
        "test": "nyc --require ts-node/register tape src/**/*.spec.ts | faucet"
      },
      "nyc": {
        "extension": [
          ".ts"
        ],
        "exclude": [
          "**/*.spec.ts"
        ],
        "reporter": [
          "html"
        ],
        "tempDir": "./coverage/.nyc_output"
      },
      "dependencies": {
        "acorn": "^7.1.0",
        "acorn-walk": "^7.0.0",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^1.11.3",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.4.3",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.2.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.7.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^4.0.0",
        "events": "^3.0.0",
        "glob": "^7.1.6",
        "https-browserify": "^1.0.0",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^4.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.0.0",
        "json-stringify-safe": "^5.0.1",
        "lodash": "^4.17.15",
        "log4js": "^6.1.0",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "source-map": "^0.7.3",
        "stream-browserify": "^2.0.2",
        "stream-http": "^3.1.0",
        "string_decoder": "^1.3.0",
        "timers-browserify": "^2.0.11",
        "tmp": "^0.1.0",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.1",
        "vm-browserify": "^1.1.2"
      },
      "devDependencies": {
        "@types/async": "^3.0.3",
        "@types/browser-resolve": "^1.11.0",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^4.0.2",
        "@types/glob": "^7.1.1",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "@types/istanbul-lib-instrument": "^1.7.3",
        "@types/istanbul-lib-report": "^3.0.0",
        "@types/istanbul-lib-source-maps": "^4.0.0",
        "@types/istanbul-reports": "^1.1.1",
        "@types/karma": "^4.4.1",
        "@types/lodash": "^4.14.149",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^13.1.4",
        "@types/pad": "^2.1.0",
        "@types/sinon": "^9.0.0",
        "@types/tape": "^4.2.33",
        "@types/tmp": "^0.1.0",
        "cli-clear": "^1.0.4",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "nyc": "^15.0.0",
        "puppeteer": "^2.0.0",
        "tape": "^4.12.1",
        "ts-node": "^8.5.4",
        "tslint": "^6.1.1",
        "tslint-eslint-rules": "^5.4.0",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4 || 5",
        "typescript": "1 || 2 || 3"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@5.0.3",
      "_nodeVersion": "13.6.0",
      "_npmVersion": "6.13.4",
      "dist": {
        "integrity": "sha512-Irs767Oc5BCMPLbZ+VdJmIxLL+1fB3L9dye8oQHDfHXFuYBx+uir5FDLzNNXFgDRUMYxEFT1T1eucAcb56v+0A==",
        "shasum": "3b2b5cfde328748fa9f077fea25f90c36db53fed",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-5.0.3.tgz",
        "fileCount": 112,
        "unpackedSize": 350180,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJexs36CRA9TVsSAnZWagAAuhMP/1VykaGsaDL+2p6alrOU\n6hGCCy/HexOPcQ85Kb4NoBE63n5j4tKFcqJOEa2pvEMTEYKRAeNi0JDPYiV9\nyIHxfUV2pDFk+aWbcRJCoHWtBi6/3Rt7gmX3u7lAFT0HUHtiWbSiJQGg76yd\nOXOXdrQvi8JlwGaXTNnesZ1Au2B3DgVZSlkEtHLfIGN4mK7MlLKGc+3SK3S3\nZ96QGxmLHmJ+YQuSBcpE1ZzUdBNoyXeriSUSVGFTBBhKRy8pVuslUNv1uzMx\na51CTj0pcR8QgECrjigbVqVugVsIaEogMMPJjfrmS+gAcDciFXiU4YVCvXS4\nFMXp/l6BmZ20NSUg0PQfKYRacCqvIDInlqkOAmZPWh9NmFbB4uCASWDNizpl\nQnoU/9JKu+fpceb//eiizHSoxnS2guEkwYCkef7uaDuYaxxEjPojmyEcYE9T\nsghgE3krdZVqZmazq8OESUGruszhKoQWZnANp5EaKyB8VhHqQAkg0GX5QH0d\nKRJKtd79X5NiHynZsYORTfbnb48IwkML1X/KumqnHdJRB5Kmil293ByUoWSl\nA5Jgyuch7hzWeZDoy1u0bCzVErdNfmY2Fjay70MDOuoKjXqK9nEeXtK0pEJ2\nzODKhSQi8Ujoj+OVmjnr42g1rBTogslKWnDMs4qHRU4ZY5jDWe+V64B1ce44\npdCp\r\n=MrvN\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCBiwTBgunrHMm60+Sb0CWEhpDnDVtFbNzdhmYdKL4ZJwIhAIkINnRV245VoxqSIBKF47hcR6dWAgeGN9OniJL/iGEr"
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_5.0.3_1590087159361_0.5528940497552404"
      },
      "_hasShrinkwrap": false
    },
    "5.1.0": {
      "name": "karma-typescript",
      "version": "5.1.0",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        },
        {
          "name": "sridharmallela"
        },
        {
          "name": "leevipietilainen"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "tslint --project tsconfig.json",
        "build": "tsc --rootDir ./src",
        "test": "nyc --require ts-node/register tape src/**/*.spec.ts | faucet"
      },
      "nyc": {
        "extension": [
          ".ts"
        ],
        "exclude": [
          "**/*.spec.ts"
        ],
        "reporter": [
          "html"
        ],
        "tempDir": "./coverage/.nyc_output"
      },
      "dependencies": {
        "acorn": "^7.4.0",
        "acorn-walk": "^7.2.0",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^2.0.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.4.3",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.2.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.7.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^4.16.0",
        "events": "^3.2.0",
        "glob": "^7.1.6",
        "https-browserify": "^1.0.0",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^4.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.0.0",
        "json-stringify-safe": "^5.0.1",
        "lodash": "^4.17.19",
        "log4js": "^6.3.0",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "source-map": "^0.7.3",
        "stream-browserify": "^3.0.0",
        "stream-http": "^3.1.0",
        "string_decoder": "^1.3.0",
        "timers-browserify": "^2.0.11",
        "tmp": "^0.2.1",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.1",
        "vm-browserify": "^1.1.2"
      },
      "devDependencies": {
        "@types/async": "^3.0.3",
        "@types/browser-resolve": "^1.11.0",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^4.0.2",
        "@types/glob": "^7.1.3",
        "@types/istanbul-lib-coverage": "^2.0.3",
        "@types/istanbul-lib-instrument": "^1.7.3",
        "@types/istanbul-lib-report": "^3.0.0",
        "@types/istanbul-lib-source-maps": "^4.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/karma": "^5.0.0",
        "@types/lodash": "^4.14.159",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^14.0.27",
        "@types/pad": "^2.1.0",
        "@types/tape": "^4.13.0",
        "@types/tmp": "^0.2.0",
        "cli-clear": "^1.0.4",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "nyc": "^15.1.0",
        "puppeteer": "^5.2.1",
        "tape": "^5.0.1",
        "ts-node": "^8.10.2",
        "tslint": "^6.1.3",
        "tslint-eslint-rules": "^5.4.0",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4 || 5",
        "typescript": "1 || 2 || 3"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@5.1.0",
      "_nodeVersion": "12.16.3",
      "_npmVersion": "6.14.4",
      "dist": {
        "integrity": "sha512-Olm9FwrxN5Dq3Bq+QGhcYT3ei4jR834dKO1WeSfy9DcyPGHmsrZA6+xIyxUFoDonwZyWQyhRZiN64xgzQQAXEg==",
        "shasum": "0bb8ac1b48dbebdd1e03f3e0030385ce01380cfe",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-5.1.0.tgz",
        "fileCount": 112,
        "unpackedSize": 350947,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfNEQBCRA9TVsSAnZWagAAsM0P/0xpy6G+wp9SlpG1ngfr\n+WLtqtqtVTp5ix10YWfRI0Hf0P+BL+LkiI/MghF15CseXE4xB3mp3HKVt+LK\nBjhPkw6DtcCAEbs0Z9cDJxb/8JzjOLcP1VuEcEYNrh9ORyoFdZ9SoFqNH3wP\n4LmclqUickvGFGAqmaKXa+6I0ahexm6WfU4QwsDxwYmisa1WQnFY9rUjKlYK\nfpQ4oSSa1K9JSDCVbQ9U3KMNkmLOOnzmte8HnNhTlBVuQCAkCs0mLqLyGYz3\nskbsWwb4sfs3Kq14yOd+JBCpCEsQo9XNmwHOlBjeI4koGQgmfqREMVwo/+7h\nVigUtGIcKjIi7JOeJO68wbTM5v3umvxaN/laN80l2fM5u/wKYEVn+FusTT+i\n/co4pVPVjP3faUNcI/D6cM2JFIvvi7OmqUNSU2SsdFalcShLvzpQ5U1hCIig\nK8ueffASEyIpeQf1Y5orES+8GTuWP3gFDZg0DzkSVyoq/VCAgsPYtD1NfP9E\nP7l8uFmr1wBzMFiki43Ki9XjBA/4x8Dih1HSEHD458p9UGWxsyU+d1GjsYTN\nh5Z0jlninqRHiIBTGf8P+faq0qbF4p6YUoAbtcbvAXoRC3YBE/7yqPjyC1x0\nf/ZIpFYTRZjyFw7oyiZKvu4pTlBkohhrhjEoyHLWqG6k+EgXxUBp7j3maP+9\nLMp5\r\n=5RlR\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQDRWDTNOY0iaqY14zzovaUKV6nYLWpEK2XE5F3/opu10wIgE3TcSJD1VFBwt7Z7JAPZs63xxZz9Qz2NUJ2/Q5a28Zo="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_5.1.0_1597260800818_0.8825531056735867"
      },
      "_hasShrinkwrap": false
    },
    "5.2.0": {
      "name": "karma-typescript",
      "version": "5.2.0",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        },
        {
          "name": "sridharmallela"
        },
        {
          "name": "leevipietilainen"
        },
        {
          "name": "vladjerca"
        },
        {
          "name": "csvn"
        },
        {
          "name": "ryanvall"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint . --ext .ts",
        "build": "tsc --rootDir ./src",
        "test": "nyc --require ts-node/register tape \"src/**/*.spec.ts\" | faucet"
      },
      "nyc": {
        "extension": [
          ".ts"
        ],
        "exclude": [
          "**/*.spec.ts"
        ],
        "reporter": [
          "html"
        ],
        "tempDir": "./coverage/.nyc_output"
      },
      "dependencies": {
        "acorn": "^8.0.1",
        "acorn-walk": "^8.0.0",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^2.0.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.4.3",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.2.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.7.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^4.16.0",
        "events": "^3.2.0",
        "glob": "^7.1.6",
        "https-browserify": "^1.0.0",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^4.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.0.0",
        "json-stringify-safe": "^5.0.1",
        "lodash": "^4.17.19",
        "log4js": "^6.3.0",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "source-map": "^0.7.3",
        "stream-browserify": "^3.0.0",
        "stream-http": "^3.1.0",
        "string_decoder": "^1.3.0",
        "timers-browserify": "^2.0.11",
        "tmp": "^0.2.1",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.1",
        "vm-browserify": "^1.1.2"
      },
      "devDependencies": {
        "@types/async": "^3.0.3",
        "@types/browser-resolve": "^1.11.0",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^4.0.2",
        "@types/glob": "^7.1.3",
        "@types/istanbul-lib-coverage": "^2.0.3",
        "@types/istanbul-lib-instrument": "^1.7.3",
        "@types/istanbul-lib-report": "^3.0.0",
        "@types/istanbul-lib-source-maps": "^4.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/karma": "^5.0.0",
        "@types/lodash": "^4.14.159",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^14.0.27",
        "@types/pad": "^2.1.0",
        "@types/tape": "^4.13.0",
        "@types/tmp": "^0.2.0",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "nyc": "^15.1.0",
        "puppeteer": "^5.2.1",
        "tape": "^5.0.1",
        "ts-node": "^8.10.2",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4 || 5",
        "typescript": "1 || 2 || 3 || 4"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@5.2.0",
      "_nodeVersion": "12.16.3",
      "_npmVersion": "6.14.4",
      "dist": {
        "integrity": "sha512-idMJ0SKPLYudNiPaRw+GyOu0RQPJFpyUfrSN6/uFTzPLnJ7sLDd6xPMcxB+pNBHpL6s4fQfC5W9OlNblRvt2Dg==",
        "shasum": "3a1fdc322b829b698cdab5768ee71b940f021f15",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-5.2.0.tgz",
        "fileCount": 112,
        "unpackedSize": 355434,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfYw8GCRA9TVsSAnZWagAAaEEP/jTGVuZQzjt2JfPXy+hd\n6PugjrzO42CLuCmFNz1a4PVIFJv0UeF7jMIlZGwwKfAEpuBM94N5r0DciSf6\nwDkuv7XeqFROMVGVPSI6W0JdJvnPldI9gX+IPA70d64Fp5npVdD9xMBJS02k\nKWIBfxr0lkni6g34Cp24qxSTDMf1/EhIDkeDrByFMOuxWUQK/4cXFToV+5UP\nlrYOmMexQ2M00IJ4f+Gr/C+smZteI5PHyEMewD6TySvZ2kFXh+ujvU9xIIaL\np3PDN+0JxlP6VI9renLRC7MyQMoY+INwiUFxPE2yUVQCmtxBtgVchY49W6m3\nBiq6i++Fl8mBZWOdoHmetJAmgu9sMzp/8a3k7UJXUr1m4hBAEEPGb16fZ9+c\nMFsLfkabyM3GszjcI9X11URQqoeyQCowx5anTPeszGBys9F/OQ/dR30HV8RQ\nXt/AsKfC4ciRF7ZpzfDSktqQjA2vH6Uabt6FTam0XphnG6ruQxUH8qQy9CjG\nfIek2A5JIWrMkFb1LSqxyVvmuvrd2j04tTMAD82FHHvECAwTn2alyVrHhUTN\nHXSD6sjWVbGNXV0QcnQQ+fYbEp7DV6hLnbS+hD/f4rV23kD82KricVaXUMD4\nLkIp92xYZTKu36vnBsOMfZuU/mfCMVAleK1U8GimercMcAd13+rL2R/uNAWI\nfnTf\r\n=CyLb\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBOfNq5L1ZX5FVFlJZl6VfJIPb7xxB4WUqQJ1dnRw3OqAiEAo7WaG3yXG0G8fcXNhwbthm+UcTvo+Sdt58cakJ817iw="
          }
        ]
      },
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "directories": {},
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_5.2.0_1600327430276_0.3040925298765482"
      },
      "_hasShrinkwrap": false
    },
    "5.3.0": {
      "name": "karma-typescript",
      "version": "5.3.0",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        },
        {
          "name": "sridharmallela"
        },
        {
          "name": "leevipietilainen"
        },
        {
          "name": "vladjerca"
        },
        {
          "name": "csvn"
        },
        {
          "name": "ryanvall"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint . --ext .ts",
        "build": "tsc --rootDir ./src",
        "test": "nyc --require ts-node/register tape \"src/**/*.spec.ts\" | faucet"
      },
      "nyc": {
        "extension": [
          ".ts"
        ],
        "exclude": [
          "**/*.spec.ts"
        ],
        "reporter": [
          "html"
        ],
        "tempDir": "./coverage/.nyc_output"
      },
      "dependencies": {
        "acorn": "^8.0.1",
        "acorn-walk": "^8.0.0",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^2.0.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.4.3",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.2.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.7.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^4.16.0",
        "events": "^3.2.0",
        "glob": "^7.1.6",
        "https-browserify": "^1.0.0",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^4.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.0.0",
        "json-stringify-safe": "^5.0.1",
        "lodash": "^4.17.19",
        "log4js": "^6.3.0",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "source-map": "^0.7.3",
        "stream-browserify": "^3.0.0",
        "stream-http": "^3.1.0",
        "string_decoder": "^1.3.0",
        "timers-browserify": "^2.0.11",
        "tmp": "^0.2.1",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.1",
        "vm-browserify": "^1.1.2"
      },
      "devDependencies": {
        "@types/async": "^3.0.3",
        "@types/browser-resolve": "^1.11.0",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^4.0.2",
        "@types/glob": "^7.1.3",
        "@types/istanbul-lib-coverage": "^2.0.3",
        "@types/istanbul-lib-instrument": "^1.7.3",
        "@types/istanbul-lib-report": "^3.0.0",
        "@types/istanbul-lib-source-maps": "^4.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/karma": "^6.1.0",
        "@types/lodash": "^4.14.159",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^14.0.27",
        "@types/pad": "^2.1.0",
        "@types/tape": "^4.13.0",
        "@types/tmp": "^0.2.0",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "nyc": "^15.1.0",
        "puppeteer": "^5.2.1",
        "tape": "^5.0.1",
        "ts-node": "^8.10.2",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4 || 5 || 6",
        "typescript": "1 || 2 || 3 || 4"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@5.3.0",
      "_nodeVersion": "12.16.3",
      "_npmVersion": "6.14.4",
      "dist": {
        "integrity": "sha512-glx54LQkC4Lnb3zF/bDytWR6ELArQzzlniIvvlElsO7Ym8j0eQV2ATaXHQutczJ3tV+H2snYMDcD5RXkc4gY0w==",
        "shasum": "c5e4345ffd67cc09b9467400cc67cbcb252eafb9",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-5.3.0.tgz",
        "fileCount": 112,
        "unpackedSize": 355439,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgJVG9CRA9TVsSAnZWagAAaUoP/29JhumNjSwpMKEU2bq5\nhx/OBSoigjS/wdttbgyJ6moS/sjJ8feNCLMeMabS8Qvxe+HZCC+7YerjUitI\nmhBu88aHBJzB12/yaGhcUEL/gVG97i2azkRoABQolkvNG+4VGliWDqzyqLzq\neLiNAMXxDa+BcxAR36W6eMZD/j7IwRu8EIlNbGpzNN95SCTI8FZ9daKlZ6Ao\nmlrOihjfaGuXkuMnu/JDlG082BnVjrOBz1slYqYw76g4LtYwRpsVmVNCuu1T\nPF/Re8VLJUhA0BOnjNGSudcrLagRLJYJ6LJTFgAzLqdQeAUUezr2bvhMVpuZ\nN2eQDnVfLTD4XnsWQf0tyBSCmIz4FndK17q9yx0t+ZYTRa8hi0sD570Ix8G1\nzJyLcwPT3Q5Ib3DYeqJpgfDvpq4bir4vAq9ISmqXDXYmfM32wPo8tDpkCcge\n9CoebJgDySuzeCVULRBNMXXzoB7zSXST+d5gblZXzXTCBDTye4WEvrn4PURn\niDspaNrBwDGla/u/aO0IWTeOF9BtwDVMYhLyki+g1bpdWbbOCKHF021YP7GK\nJdnp3UqKGHV3ub0jka0zjTnyXPQlCNYZDCOHnyYnIIIScuTDuvLsPDwTd+Bt\nf0amRV3LGmUc0sFGQdgJy6H6OV8ncPd4cdFkZ5XTWmmxCSlJCEFi/bfICO9e\nNrvl\r\n=06v6\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIQCrFYkP4Y4dRY5xsuOGGfspiE21mC+yhhfHCzy5Z/gCLwIgMWUv8fcBhAZpxar43KvtOJg2Zg/vTFhOPDq87WcX8qY="
          }
        ]
      },
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_5.3.0_1613058492830_0.2936156050087948"
      },
      "_hasShrinkwrap": false
    },
    "5.4.0": {
      "name": "karma-typescript",
      "version": "5.4.0",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        },
        {
          "name": "sridharmallela"
        },
        {
          "name": "leevipietilainen"
        },
        {
          "name": "vladjerca"
        },
        {
          "name": "csvn"
        },
        {
          "name": "ryanvall"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint . --ext .ts",
        "build": "tsc --rootDir ./src",
        "test": "nyc --require ts-node/register tape \"src/**/*.spec.ts\" | faucet"
      },
      "nyc": {
        "extension": [
          ".ts"
        ],
        "exclude": [
          "**/*.spec.ts"
        ],
        "reporter": [
          "html"
        ],
        "tempDir": "./coverage/.nyc_output"
      },
      "dependencies": {
        "acorn": "^8.0.1",
        "acorn-walk": "^8.0.0",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^2.0.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.4.3",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.2.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.7.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^4.16.0",
        "events": "^3.2.0",
        "glob": "^7.1.6",
        "https-browserify": "^1.0.0",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^4.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.0.0",
        "json-stringify-safe": "^5.0.1",
        "lodash": "^4.17.19",
        "log4js": "^6.3.0",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "source-map": "^0.7.3",
        "stream-browserify": "^3.0.0",
        "stream-http": "^3.1.0",
        "string_decoder": "^1.3.0",
        "timers-browserify": "^2.0.11",
        "tmp": "^0.2.1",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.1",
        "vm-browserify": "^1.1.2"
      },
      "devDependencies": {
        "@types/async": "^3.0.3",
        "@types/browser-resolve": "^1.11.0",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^4.0.2",
        "@types/glob": "^7.1.3",
        "@types/istanbul-lib-coverage": "^2.0.3",
        "@types/istanbul-lib-instrument": "^1.7.3",
        "@types/istanbul-lib-report": "^3.0.0",
        "@types/istanbul-lib-source-maps": "^4.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/karma": "^6.1.0",
        "@types/lodash": "^4.14.159",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^14.0.27",
        "@types/pad": "^2.1.0",
        "@types/tape": "^4.13.0",
        "@types/tmp": "^0.2.0",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "nyc": "^15.1.0",
        "puppeteer": "^5.2.1",
        "tape": "^5.0.1",
        "ts-node": "^8.10.2",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4 || 5 || 6",
        "typescript": "1 || 2 || 3 || 4"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@5.4.0",
      "_nodeVersion": "12.16.3",
      "_npmVersion": "6.14.4",
      "dist": {
        "integrity": "sha512-ZaxlLzuo88uRbi3MYK/dC8ZDfvQyKzjS8SNDvFYYUontv9sPH38TOqsYB/OWCkjsbKpuGD1/iQkQ5r4uhIBv8Q==",
        "shasum": "b1bc1b65513acadac4c6fc2e32a0b03eaef73c69",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-5.4.0.tgz",
        "fileCount": 112,
        "unpackedSize": 355811,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgJurgCRA9TVsSAnZWagAATEoQAJrgEgJnGwC2kKLMQSyY\nQ4+wXbRJJGnUaoQp/YD2O3ZZWCh7i+7b5uWn3+zGF41ej5oH5/Ag0pTSBUSF\nE8F309HNE0saRg4DQqt3RP1VwdaADJQg2vD8J4KnCTkXKu5xkKm1YWW8MLud\nqfOk/oE70akprvIeI83EUoMbClP5NsiRxilML5tmDQgkjnhUHsJWbVaghM7F\nhKS0GUwbuAKHk9Rd1aWpSEgqHSQGzuL29pgOq4bTFv8fu2/DLIvLFFApts/2\nvYknb0Yf3zyz2q98o/zD/l1iBkJBusv0/wSIdRRnIS43mzrScPCwpLTB7tPi\noXxy9sQsFEzCQgR4nusB+lNRgj9yjkmITJyw8hB24knCx4UPp7e/3hdKVISb\nIj21Thx2POP0jSCGplMpVTbD3osETuqj4+I2YOEEt0xUqxHyfm/Dk62geqgS\n/X2kDYrYP4+GOS7OHqe2lIuWg34auzUJ4lGe4e0H4MIoxJ/4pMh8hz+ge4dw\niDZX6rSRPmAxMFF5lTWyVAGnCC11bj2ktnSh63simoP7E3bjFF+BmsNwPUfB\nGSaUevtldAqGB6+9UdQ/XrOvtvZZNkHnIaEVXlQNmPsS02QRHgn0BCXCWkkV\neinlzscPT6OBkZqxZVVe39fuYOrxLjxLHdlfhQcqI9GPcnHFSLIXiFwb+jyP\nHmw1\r\n=iMl4\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCUpAe3bCXVnWcyirPq/5NTOTGzKTDcddOa4UICSZf/1AIhAMJQJLd8t19ULWYoQZ8v0kWTbKXd9UlfDuZGDUkTLVKD"
          }
        ]
      },
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_5.4.0_1613163231804_0.8887275976375462"
      },
      "_hasShrinkwrap": false
    },
    "5.5.0": {
      "name": "karma-typescript",
      "version": "5.5.0",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        },
        {
          "name": "sridharmallela"
        },
        {
          "name": "leevipietilainen"
        },
        {
          "name": "vladjerca"
        },
        {
          "name": "csvn"
        },
        {
          "name": "ryanvall"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint . --ext .ts",
        "build": "tsc --rootDir ./src",
        "test": "nyc --require ts-node/register tape \"src/**/*.spec.ts\" | faucet"
      },
      "nyc": {
        "extension": [
          ".ts"
        ],
        "exclude": [
          "**/*.spec.ts"
        ],
        "reporter": [
          "html"
        ],
        "tempDir": "./coverage/.nyc_output"
      },
      "dependencies": {
        "acorn": "^8.0.1",
        "acorn-walk": "^8.0.0",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^2.0.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.4.3",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.2.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.7.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^4.16.0",
        "events": "^3.2.0",
        "glob": "^7.1.6",
        "https-browserify": "^1.0.0",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^4.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.0.0",
        "json-stringify-safe": "^5.0.1",
        "lodash": "^4.17.19",
        "log4js": "^6.3.0",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "source-map": "^0.7.3",
        "stream-browserify": "^3.0.0",
        "stream-http": "^3.1.0",
        "string_decoder": "^1.3.0",
        "timers-browserify": "^2.0.11",
        "tmp": "^0.2.1",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.1",
        "vm-browserify": "^1.1.2"
      },
      "devDependencies": {
        "@types/async": "^3.0.3",
        "@types/browser-resolve": "^1.11.0",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^4.0.2",
        "@types/glob": "^7.1.3",
        "@types/istanbul-lib-coverage": "^2.0.3",
        "@types/istanbul-lib-instrument": "^1.7.3",
        "@types/istanbul-lib-report": "^3.0.0",
        "@types/istanbul-lib-source-maps": "^4.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/karma": "^6.1.0",
        "@types/lodash": "^4.14.159",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^14.0.27",
        "@types/pad": "^2.1.0",
        "@types/tape": "^4.13.0",
        "@types/tmp": "^0.2.0",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "nyc": "^15.1.0",
        "puppeteer": "^5.2.1",
        "tape": "^5.0.1",
        "ts-node": "^8.10.2",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4 || 5 || 6",
        "typescript": "1 || 2 || 3 || 4"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@5.5.0",
      "_nodeVersion": "12.16.3",
      "_npmVersion": "6.14.4",
      "dist": {
        "integrity": "sha512-ZbRcDo6ERl8os+aVFintWOW9lngm6VEsQ3VumJBmHXcZOw24K6eEW4qDxLGAcy55bFMxCmdvR0p3Rhen7m8p9A==",
        "shasum": "e6812a0cd8e80b3329638fdbd3b6f0c6c0f5c53e",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-5.5.0.tgz",
        "fileCount": 112,
        "unpackedSize": 356478,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgR5rqCRA9TVsSAnZWagAALM4P/A4PeyVf6vrQV1aDnUfF\nOjsSj5v3azseOgdKp9Fld07r/hhertJKnLdZhN4YeRvxyJv183uvxlsJhwZ8\npo+mQ+M3E1W5Lsg7YlPNrcP9RwoWKUwGn4fI1zDSaq5/eK2qOVmAk/xvmfTI\neBp0upnq6woViDp+z2NvMVCdty1KUKLjP+laEqb9EydY7pzd0V/wNUVwWdfM\nHB8ItaVH5yxTIy7MJQmhJy9pBDa/T+H5WpbRL/vujMdBEGA6gXhaKPXnUhUd\nkDxAAej9Tki9eNaqIIQ1++mAWe/lxwTATaqvk6zDpTkfBs57D2gRUwrj7poN\nycx2vboxCv/pY48970TIJLoi6/bb/llEW/8ftwxu9139wcmKRD+jP++aU0j+\npiKdoXIOyhjn0eeNVoD6ZsY2AMFyCl1y4Fb1d2R5VCIGZEknQq0Jihps/GyA\nuJbzhjxotbs61w1sK+n4XQrSwlbKdP1U/lkPj4Js05kAGo5nDwZCvh2hO3l5\ncU6SaqDqGh369/0SXgHMaRr9vQotIT872Gd20lDoNMgysCXhPLtuCecvC5S5\n6mAGlXVy4ExSTC7bQHW8Xb0KEH1cjA5pMSDkEBaUopZg/ed9F0AStImh6cx8\nI+DHcTwU5/w/wsIOhD+eFrR27VJetOOCfNRYCigx8ytQWLB0/2cf3pT5Bk74\nR1ae\r\n=S1NR\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIHjV9d0Su42HKYxWrUrsKqiJ/r7RN2p3cIbXLO2TxnvhAiEAi1r315KMoHj2UhSiG+0IVG63ejhRw1cWTn3nn029QHE="
          }
        ]
      },
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_5.5.0_1615305449630_0.41383803071105696"
      },
      "_hasShrinkwrap": false
    },
    "5.5.1": {
      "name": "karma-typescript",
      "version": "5.5.1",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        },
        {
          "name": "sridharmallela"
        },
        {
          "name": "leevipietilainen"
        },
        {
          "name": "vladjerca"
        },
        {
          "name": "csvn"
        },
        {
          "name": "ryanvall"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint . --ext .ts",
        "build": "tsc --rootDir ./src",
        "test": "nyc --require ts-node/register tape \"src/**/*.spec.ts\" | faucet"
      },
      "nyc": {
        "extension": [
          ".ts"
        ],
        "exclude": [
          "**/*.spec.ts"
        ],
        "reporter": [
          "html"
        ],
        "tempDir": "./coverage/.nyc_output"
      },
      "dependencies": {
        "acorn": "^8.1.0",
        "acorn-walk": "^8.0.2",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^2.0.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.4.3",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.2.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.7.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^4.16.0",
        "events": "^3.2.0",
        "glob": "^7.1.6",
        "https-browserify": "^1.0.0",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^4.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.0.0",
        "json-stringify-safe": "^5.0.1",
        "lodash": "^4.17.19",
        "log4js": "^6.3.0",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "source-map": "^0.7.3",
        "stream-browserify": "^3.0.0",
        "stream-http": "^3.1.0",
        "string_decoder": "^1.3.0",
        "timers-browserify": "^2.0.11",
        "tmp": "^0.2.1",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.1",
        "vm-browserify": "^1.1.2"
      },
      "devDependencies": {
        "@types/async": "^3.0.3",
        "@types/browser-resolve": "^1.11.0",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^4.0.2",
        "@types/glob": "^7.1.3",
        "@types/istanbul-lib-coverage": "^2.0.3",
        "@types/istanbul-lib-instrument": "^1.7.3",
        "@types/istanbul-lib-report": "^3.0.0",
        "@types/istanbul-lib-source-maps": "^4.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/karma": "^6.1.0",
        "@types/lodash": "^4.14.159",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^14.0.27",
        "@types/pad": "^2.1.0",
        "@types/tape": "^4.13.0",
        "@types/tmp": "^0.2.0",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "nyc": "^15.1.0",
        "puppeteer": "^5.2.1",
        "tape": "^5.0.1",
        "ts-node": "^8.10.2",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4 || 5 || 6",
        "typescript": "1 || 2 || 3 || 4"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@5.5.1",
      "_nodeVersion": "12.16.3",
      "_npmVersion": "6.14.4",
      "dist": {
        "integrity": "sha512-iQDh48sHv+1pCO/Fvlz4b6HwcmaTuAzx1H0Q6zkUQMQH+5sjz8GNFB9jVDiDblbZcgdr+luVBk7NGUV5mXj+eg==",
        "shasum": "3ceb79ecec695c73d2633aff8714524b5440f38f",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-5.5.1.tgz",
        "fileCount": 112,
        "unpackedSize": 356478,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgXBLDCRA9TVsSAnZWagAAfdMP+wf4ulPcdGQjg7wNpzue\ncmMRuDXc8/Z1i6x9iWjMSzc4lGN1PO9HPtbtNxH51U9ja5X58mY7b8tXJu1L\nGsdxWogjdieSSAS4ifinuGMOxXCUeHZmWi/G2Bo45yBgH4rcOtUWHhYL2f12\n7ZYSDcrduVIAg+/5+lANkzkr+AszQo8Kmewnj/kT4Jkr55MydE6E5My+Pxhk\nLYFKbvA2J8hH0CwJh+0BQ+V3reNhpP1wu1mNJRtHOycq/LcKavROkXW0cKr+\nlbOYysZjAx3+ENZMUv94GkROVOnylV8Wl6gtnX82cQy24d0CrKqFrWU1GvJl\n3AvODdVoUP9n0fMgM3+6KSHa2jJraAoFaiZjToo8imb+n8UpHNB6Yka0gjqe\nHNmZi1Obh65Npgw5M2nq5DoZ9Uz+IcsR8ELXktnGlJbqAeF3ExS8gDly1vyt\n+DWAihOoiPkyCHtDxgGK7DBaM1uqKv9ODgaJkxNIGKvuG73KqdymIKIYkraL\nkBjIDMvBf0SuA4NNhoRsf1hEKyEyfvLfoJ1rRUW1zpR4NFc282lE/Hc/Nuac\nlMp8PSIkxM6iNSrKckMOPwN4t5CtGFWHMwntKRIGmzlwMvgpS307IYlITzUY\nbjFFQFj8by37DWB89g1nqfbMwCI2ynul8LXiZutpKqL2p3yc9YApy3PpKM6t\np3T4\r\n=h+QS\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIA0kVvz/Z0Df11kruxxxrx3ntsS8inTQEfz9jslizZvEAiEAnesKJSVDSJQu2naQYFxOKEhNFuZfypKxezLEPYqd2og="
          }
        ]
      },
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_5.5.1_1616646850858_0.668074169490694"
      },
      "_hasShrinkwrap": false
    },
    "5.5.2": {
      "name": "karma-typescript",
      "version": "5.5.2",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        },
        {
          "name": "sridharmallela"
        },
        {
          "name": "leevipietilainen"
        },
        {
          "name": "vladjerca"
        },
        {
          "name": "csvn"
        },
        {
          "name": "ryanvall"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint . --ext .ts",
        "build": "tsc --rootDir ./src",
        "test": "nyc --require ts-node/register tape \"src/**/*.spec.ts\" | faucet"
      },
      "nyc": {
        "extension": [
          ".ts"
        ],
        "exclude": [
          "**/*.spec.ts"
        ],
        "reporter": [
          "html"
        ],
        "tempDir": "./coverage/.nyc_output"
      },
      "dependencies": {
        "acorn": "^8.1.0",
        "acorn-walk": "^8.0.2",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^2.0.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.4.3",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.2.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.7.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^4.16.0",
        "events": "^3.2.0",
        "glob": "^7.1.6",
        "https-browserify": "^1.0.0",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^4.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.0.0",
        "json-stringify-safe": "^5.0.1",
        "lodash": "^4.17.19",
        "log4js": "^6.3.0",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "source-map": "^0.7.3",
        "stream-browserify": "^3.0.0",
        "stream-http": "^3.1.0",
        "string_decoder": "^1.3.0",
        "timers-browserify": "^2.0.11",
        "tmp": "^0.2.1",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.1",
        "vm-browserify": "^1.1.2"
      },
      "devDependencies": {
        "@types/async": "^3.0.3",
        "@types/browser-resolve": "^1.11.0",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^4.0.2",
        "@types/glob": "^7.1.3",
        "@types/istanbul-lib-coverage": "^2.0.3",
        "@types/istanbul-lib-instrument": "^1.7.3",
        "@types/istanbul-lib-report": "^3.0.0",
        "@types/istanbul-lib-source-maps": "^4.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/karma": "^6.1.0",
        "@types/lodash": "^4.14.159",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^14.0.27",
        "@types/pad": "^2.1.0",
        "@types/tape": "^4.13.0",
        "@types/tmp": "^0.2.0",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "nyc": "^15.1.0",
        "puppeteer": "^5.2.1",
        "tape": "^5.0.1",
        "ts-node": "^8.10.2",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4 || 5 || 6",
        "typescript": "1 || 2 || 3 || 4"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@5.5.2",
      "_nodeVersion": "12.16.3",
      "_npmVersion": "6.14.4",
      "dist": {
        "integrity": "sha512-2rNhiCMrIF+VR8jMuovOLSRjNkjdoE/kQ4XYZU94lMkHNQtnqCaToAnztMj4fuOPRErL7VIkwvJEO7jBd47Q6A==",
        "shasum": "02abf88d507f396d647cd6972bc0bd28d0c69dd0",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-5.5.2.tgz",
        "fileCount": 112,
        "unpackedSize": 356676,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhHr58CRA9TVsSAnZWagAA69kP/jMHHZx84802Y/8Svesi\ncYkqvaej4BRoLgImvPP1vUqTlrT7cNyUDWTwj1a+6roCoR64+k8l1LL6PnDb\n9YkAm1LWx0Uh0flZxlYoGForkYlA/y7M+5BQqTZEXPDEeEYZsK1lWrdVq7Be\nW2o7cI0YqoMWSA9qdu6EYadoZhE2oDbXO+KRX3r2vkcPzRcn3qX0aOBvX3Qo\nqeDjlI47qzQfFjnblcbtEvBeP8eJq8Nc7BpZqQQ2pzZY1/61onXGwF9izk42\n3T0GdivvRZ2CfTH6IxOFe5K4HwmfPmupvC4HTYC6g3OoaWLwgg5lxXz/oWjo\n6DkEULZSCvkKQhO65H/tGn4DjhlZ2W5aGYfVnS5loZsxe8Bj1JiPkl+RmDd3\nrUd3L/DAfCiyqx92rY5w2blwhc2tXH+1gXh5HDPCGJxWOkrT3tAqDlsoeM1I\nL2/o/lx1/4nKrCYzjB5niy0hYD54rtn+eqoDDzkXHMNHKnkEhNp2s7N97xPd\npZjPIYpepnSTDqB7NxIiV0vxMrSkYWtRWKRnyncHx9tSFPZfS5arWi0KfeB3\nFLXEqA9LpQ1DaO8WETnnYkEmSDYuTjg15dt0PUPjEvvx3esYu0qG0+1d8LeQ\niegIXX+7YK6qPXIggckwJDkLXbGUzpcchaaRRVzIrhsHBL7zNic2b+/BlQaA\nXwpH\r\n=TJNs\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIB2VDZPBLOF5UWfGvhkpuPfATNmzNHlPGtUvr35vge6kAiEAgVPCghDei8tPN4yPWblkMK56qNG7w6q6OZeV/FFGEKc="
          }
        ]
      },
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_5.5.2_1629404796594_0.3700910714587273"
      },
      "_hasShrinkwrap": false
    },
    "5.5.3": {
      "name": "karma-typescript",
      "version": "5.5.3",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        },
        {
          "name": "sridharmallela"
        },
        {
          "name": "leevipietilainen"
        },
        {
          "name": "vladjerca"
        },
        {
          "name": "csvn"
        },
        {
          "name": "ryanvall"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint . --ext .ts",
        "build": "tsc --rootDir ./src",
        "test": "nyc --require ts-node/register tape \"src/**/*.spec.ts\" | faucet"
      },
      "nyc": {
        "extension": [
          ".ts"
        ],
        "exclude": [
          "**/*.spec.ts"
        ],
        "reporter": [
          "html"
        ],
        "tempDir": "./coverage/.nyc_output"
      },
      "dependencies": {
        "acorn": "^8.1.0",
        "acorn-walk": "^8.0.2",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^2.0.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.4.3",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.2.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.7.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^4.16.0",
        "events": "^3.2.0",
        "glob": "^7.1.6",
        "https-browserify": "^1.0.0",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^4.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.0.0",
        "json-stringify-safe": "^5.0.1",
        "lodash": "^4.17.19",
        "log4js": "^6.3.0",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "source-map": "^0.7.3",
        "stream-browserify": "^3.0.0",
        "stream-http": "^3.1.0",
        "string_decoder": "^1.3.0",
        "timers-browserify": "^2.0.11",
        "tmp": "^0.2.1",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.1",
        "vm-browserify": "^1.1.2"
      },
      "devDependencies": {
        "@types/async": "^3.0.3",
        "@types/browser-resolve": "^1.11.0",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^4.0.2",
        "@types/glob": "^7.1.3",
        "@types/istanbul-lib-coverage": "^2.0.3",
        "@types/istanbul-lib-instrument": "^1.7.3",
        "@types/istanbul-lib-report": "^3.0.0",
        "@types/istanbul-lib-source-maps": "^4.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/karma": "^6.1.0",
        "@types/lodash": "^4.14.159",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^14.0.27",
        "@types/pad": "^2.1.0",
        "@types/tape": "^4.13.0",
        "@types/tmp": "^0.2.0",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "nyc": "^15.1.0",
        "puppeteer": "^5.2.1",
        "tape": "^5.0.1",
        "ts-node": "^8.10.2",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4 || 5 || 6",
        "typescript": "1 || 2 || 3 || 4"
      },
      "gitHead": "f5b9ce7a45c9597ab28ab0c83e4204a55c204ecd",
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@5.5.3",
      "_nodeVersion": "16.13.0",
      "_npmVersion": "8.1.0",
      "dist": {
        "integrity": "sha512-l1FHurolXEBIzRa9ExpNtjzysAhsi/vLpTazpwLHWWK86mknvVpqor6pRZ5Nid7jvOPrTBqAq0JRuLgiCdRkFw==",
        "shasum": "29c04d9677f8bd78dfacd89e8fa6f475dd25aba2",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-5.5.3.tgz",
        "fileCount": 112,
        "unpackedSize": 357938,
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh30ZrCRA9TVsSAnZWagAAZ0gP/1takZSVxHmsNy7LwCB8\nxqQjjB71G3UR/JFhCWQqJ8QD7NcGlfPA+XW3mu9WsK1lkJjNSDVHEVf2FVmw\ncYfEWsKggEVSf8hrS0g6YeIA9ShMnB7sOm3D+WKMDjMTGsd677z0LGLtI+ZT\ny775oCpdrdfjlPIGCHQJsikTp13jSx1YuZ3kph7iKuNxxxE3hdrjbdTtFBc4\ntRWJZXNVLVBZinhLt9O5L8wcKMTevkIqJYj+LsH2ooyGZ+wMTQWG7xQGSnsm\nju7pbLA4+9IOeQnSpQoo898i/0YdIymq8yMQhO2bjbCsiIBQSEyV9KWoxsg2\nqlm8UWfEqLgNxRLl2bpvIfVovjQu2cjqi8U1hEBqTE4r54IX4Mt6JDxxOlfV\nDe7ddNRAkxh/yD7nnWnOJqJUMNVZ8eAuvtFxogaB7tsxxxWweqAmiUkQ9wre\netMYZgFXVvimd4p0mph67afs+jX1MS535yMvZEzxqdL4Sd51dST9/r/OJ78e\nIJwjqGJHzeKwRIs9kCmuBdoRURSQSwooKUlulakbWSlZPsAAYKzR1b6jgfzP\nx25iA4K3HlRnzhMQVtlE12JahHLSbCNtur2j+7IWRWOP/mdmo6rBUoHajT4H\nediKhqnY4lDDpobyC+Gl75Iz+HIm/mK5d+2PGUZNDdPgAdY8tlvV1sEmAooP\nO50N\r\n=vanM\r\n-----END PGP SIGNATURE-----\r\n",
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEUCIBD6nfQs3Fh6RqLZY3UbPYKkGwmSqQsHEGMuvdXe0t3AAiEA8k3iW9pigMOnAC80lm6Un7kViVGBMD4Kb6DNrq/SDWk="
          }
        ]
      },
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_5.5.3_1642022507119_0.46398927286234937"
      },
      "_hasShrinkwrap": false
    },
    "5.5.4": {
      "name": "karma-typescript",
      "version": "5.5.4",
      "description": "Simplifying running unit tests with coverage for Typescript projects.",
      "main": "dist/index.js",
      "types": "./dist/api/index.d.ts",
      "keywords": [
        "angularjs",
        "angular2",
        "browserify",
        "commonjs",
        "coverage",
        "css modules",
        "docker",
        "istanbul",
        "jasmine",
        "karma",
        "karma plugin",
        "karma-plugin",
        "mocha",
        "postcss",
        "react",
        "remap",
        "transpile",
        "typescript",
        "unit test"
      ],
      "author": {
        "name": "monounity"
      },
      "contributors": [
        {
          "name": "erikbarke"
        },
        {
          "name": "mitchhentges"
        },
        {
          "name": "Hobart2967"
        },
        {
          "name": "xdamman"
        },
        {
          "name": "devoto13"
        },
        {
          "name": "sir-marc"
        },
        {
          "name": "cleavera"
        },
        {
          "name": "abraham"
        },
        {
          "name": "adamkasztenny"
        },
        {
          "name": "wawyed"
        },
        {
          "name": "jods4"
        },
        {
          "name": "alan-agius4"
        },
        {
          "name": "FreshRob"
        },
        {
          "name": "glennvorhes"
        },
        {
          "name": "fchiumeo"
        },
        {
          "name": "moshmage"
        },
        {
          "name": "tokrsen"
        },
        {
          "name": "g00fy-"
        },
        {
          "name": "kubut"
        },
        {
          "name": "VilleSalonen"
        },
        {
          "name": "yugi03"
        },
        {
          "name": "gempain"
        },
        {
          "name": "monounity"
        },
        {
          "name": "ggradnig"
        },
        {
          "name": "sridharmallela"
        },
        {
          "name": "leevipietilainen"
        },
        {
          "name": "vladjerca"
        },
        {
          "name": "csvn"
        },
        {
          "name": "ryanvall"
        }
      ],
      "repository": {
        "type": "git",
        "url": "git+https://github.com/monounity/karma-typescript.git"
      },
      "license": "MIT",
      "scripts": {
        "lint": "eslint . --ext .ts",
        "build": "tsc --rootDir ./src",
        "test": "nyc --require ts-node/register tape \"src/**/*.spec.ts\" | faucet"
      },
      "nyc": {
        "extension": [
          ".ts"
        ],
        "exclude": [
          "**/*.spec.ts"
        ],
        "reporter": [
          "html"
        ],
        "tempDir": "./coverage/.nyc_output"
      },
      "dependencies": {
        "acorn": "^8.1.0",
        "acorn-walk": "^8.0.2",
        "assert": "^2.0.0",
        "async": "^3.0.1",
        "browser-resolve": "^2.0.0",
        "browserify-zlib": "^0.2.0",
        "buffer": "^5.4.3",
        "combine-source-map": "^0.8.0",
        "console-browserify": "^1.2.0",
        "constants-browserify": "^1.0.0",
        "convert-source-map": "^1.7.0",
        "crypto-browserify": "^3.12.0",
        "diff": "^4.0.1",
        "domain-browser": "^4.16.0",
        "events": "^3.2.0",
        "glob": "^7.1.6",
        "https-browserify": "^1.0.0",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^4.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.0.0",
        "json-stringify-safe": "^5.0.1",
        "lodash": "^4.17.19",
        "log4js": "^6.3.0",
        "minimatch": "^3.0.4",
        "os-browserify": "^0.3.0",
        "pad": "^3.2.0",
        "path-browserify": "^1.0.0",
        "process": "^0.11.10",
        "punycode": "^2.1.1",
        "querystring-es3": "^0.2.1",
        "readable-stream": "^3.1.1",
        "source-map": "^0.7.3",
        "stream-browserify": "^3.0.0",
        "stream-http": "^3.1.0",
        "string_decoder": "^1.3.0",
        "timers-browserify": "^2.0.11",
        "tmp": "^0.2.1",
        "tty-browserify": "^0.0.1",
        "url": "^0.11.0",
        "util": "^0.12.1",
        "vm-browserify": "^1.1.2"
      },
      "devDependencies": {
        "@types/async": "^3.0.3",
        "@types/browser-resolve": "^1.11.0",
        "@types/combine-source-map": "^0.8.1",
        "@types/convert-source-map": "^1.5.1",
        "@types/diff": "^4.0.2",
        "@types/glob": "^7.1.3",
        "@types/istanbul-lib-coverage": "^2.0.3",
        "@types/istanbul-lib-instrument": "^1.7.3",
        "@types/istanbul-lib-report": "^3.0.0",
        "@types/istanbul-lib-source-maps": "^4.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/karma": "^6.1.0",
        "@types/lodash": "^4.14.159",
        "@types/minimatch": "^3.0.3",
        "@types/mock-require": "^2.0.0",
        "@types/node": "^14.0.27",
        "@types/pad": "^2.1.0",
        "@types/tape": "^4.13.0",
        "@types/tmp": "^0.2.0",
        "faucet": "0.0.1",
        "mock-require": "^3.0.3",
        "nyc": "^15.1.0",
        "puppeteer": "^5.2.1",
        "tape": "^5.0.1",
        "ts-node": "^8.10.2",
        "typescript": "latest"
      },
      "peerDependencies": {
        "karma": "1 || 2 || 3 || 4 || 5 || 6",
        "typescript": "1 || 2 || 3 || 4 || 5"
      },
      "bugs": {
        "url": "https://github.com/monounity/karma-typescript/issues"
      },
      "homepage": "https://github.com/monounity/karma-typescript#readme",
      "_id": "karma-typescript@5.5.4",
      "_nodeVersion": "10.24.1",
      "_npmVersion": "6.14.12",
      "dist": {
        "integrity": "sha512-D7nQ96xu/UekuqCmiPimnCuOFqp8+BxiND6MU6IJVN37E7DgXzr7SUeTzwuTHtKSYpgxKv4iOTUteYTxpeZL9A==",
        "shasum": "969871512b8476dfc7a496f48da9ca9c73d710e5",
        "tarball": "https://registry.npmjs.org/karma-typescript/-/karma-typescript-5.5.4.tgz",
        "fileCount": 112,
        "unpackedSize": 358911,
        "signatures": [
          {
            "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
            "sig": "MEYCIQCegcdPRVN+8lJ0ZiCJeBYCjgZFiiZK7KUcCusR/L03yAIhAL16o9D1Lcd/RIJnyDU74p3L5s9vGL4PD1nlZtSJoCG0"
          }
        ],
        "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkUBAUACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpE9A/8C8ZqOgLc66yN14lv2SIzMUXBpoYsohothS+zF7dDd3CErEci\r\nA2Y4kdMUt8sbXXSRVOSA0NN26IrRGPfNkPcDRId+e3PbceEV5WKsTV9Eu7W2\r\n5gDLTIiLiwnze6ZE4xb222/P1g8vBVP1rz0e0K625nQz6oUc4xoBNo9RK4cZ\r\nIsIja6CuDF770u7KX40HUSE2HEu99L4JzCSbajydHfFLdG0P8Z4YjjxTB0RC\r\ndAoKRlOYtPRlXojIv9U6Bv4z2zmjA6FOPVnjSir4DpBtzkUZ2L1zhkJ0JlgG\r\nyE8bEWSsGGNCURwywLhLp/GLCSAQHejZ4uzNPzO6RNWsGLaqBkB3Q6B8k7KZ\r\nvOKsnqw0yq8lkGUCOCxGrTIQNXCiiluEqGbMqtbxF5SweggR89a6jWr3lXfQ\r\nbjOnIcjg0xwPkoBRTZcQ9/ejIFsCqrnM2zmw/3fnYIw7JRvCk/cEK7uT35ce\r\nur9ZXk/jJVEagJOLOrlaZaoGcxbHkBCylUIINrjOkD9cRd0auii356zktIfv\r\ncoP8gaeSzBGw7FPS2KDuvYRM8GNOdMeLrFXN+jfpFi00k1oONnxtN1MeoAB4\r\nFU2O/V9MfWfs0Nzuc54s6cBjLMIA1aMfaFW1Ecp73N13Z9PYVXlvkTnHLOGy\r\nqiOHsHbP0gcCVPgRo/r9HwB/4xe+dQ2xHhw=\r\n=Evib\r\n-----END PGP SIGNATURE-----\r\n"
      },
      "_npmUser": {
        "name": "erikbarke",
        "email": "e@barke.nu"
      },
      "directories": {},
      "maintainers": [
        {
          "name": "erikbarke",
          "email": "e@barke.nu"
        },
        {
          "name": "monounity",
          "email": "work@barke.nu"
        }
      ],
      "_npmOperationalInternal": {
        "host": "s3://npm-registry-packages",
        "tmp": "tmp/karma-typescript_5.5.4_1682968596350_0.3432711794359731"
      },
      "_hasShrinkwrap": false
    }
  },
  "readme": "# karma-typescript\n\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Version\" src=\"https://img.shields.io/npm/v/karma-typescript.svg\"></a>\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Total Downloads\" src=\"https://img.shields.io/npm/dt/karma-typescript.svg\"></a>\n<a href=\"https://www.npmjs.com/package/karma-typescript\"><img alt=\"Npm Monthly Downloads\" src=\"https://img.shields.io/npm/dm/karma-typescript.svg\"></a>\n<a href=\"https://travis-ci.org/monounity/karma-typescript\"><img alt=\"Travis Status\" src=\"https://img.shields.io/travis/monounity/karma-typescript/master.svg?label=travis\"></a>\n<a href=\"https://ci.appveyor.com/project/monounity/karma-typescript\"><img alt=\"Appveyor Status\" src=\"https://img.shields.io/appveyor/ci/monounity/karma-typescript/master.svg?label=appveyor\"></a>\n\n> Karma :heart: Typescript\n\n* Run unit tests written in Typescript with full type checking, seamlessly without extra build steps or scripts.\n* Get remapped test coverage with [Istanbul](https://istanbul.js.org).\n* Use plain Typescript or a framework: Angular, AngularJS, React, Sinon, any framework of choice.\n\n## Installation\n\nThe easiest way is to keep `karma-typescript` as a devDependency in `package.json`:\n\n```json\n{\n  \"devDependencies\": {\n    \"karma\": \"^6.1.0\",\n    \"karma-typescript\": \"5.5.4\"\n  }\n}\n```\n\nDo this by installing the plugin via npm:\n\n```\nnpm install --save-dev karma-typescript\n```\n\n## Configuration\n\nBare minimum configuration can be achieved with the following `karma.conf.js` file:\n\n```javascript\nmodule.exports = function(config) {\n    config.set({\n        frameworks: [\"jasmine\", \"karma-typescript\"],\n        files: [\n            \"src/**/*.ts\" // *.tsx for React Jsx\n        ],\n        preprocessors: {\n            \"**/*.ts\": \"karma-typescript\" // *.tsx for React Jsx\n        },\n        reporters: [\"progress\", \"karma-typescript\"],\n        browsers: [\"Chrome\"]\n    });\n};\n```\n\nThe above example will compile all Typescript files and run the unit tests, producing remapped coverage in `./coverage`.\n\n## Examples\n\n[Cookbook](https://github.com/monounity/karma-typescript/blob/master/packages/karma-typescript/cookbook.md)\n\n### Frameworks and Integrations\n\n- [Angular](https://github.com/monounity/karma-typescript/tree/master/examples/angular2)\n- [AngularJS](https://github.com/monounity/karma-typescript/tree/master/examples/angularjs)\n- [Docker](https://github.com/monounity/karma-typescript/tree/master/examples/docker)\n- [Gulp](https://github.com/monounity/karma-typescript/tree/master/examples/gulp)\n- [Mocha](https://github.com/monounity/karma-typescript/tree/master/examples/mocha)\n\n### Other examples\n\n- Typescript [@latest](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-latest)\n- Typescript [1.8.10](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-1.8.10)\n- Typescript [1.6.2](https://github.com/monounity/karma-typescript/tree/master/examples/typescript-1.6.2)\n\n### Sample applications by users\n- [Hybrid app, code in JavaScript and tests in Typescript](https://github.com/adrianmarinica/karma-typescript-angularjs-sample)\n\n## Transforms:\n- [karma-typescript-angular2-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-angular2-transform)\n- [karma-typescript-cssmodules-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-cssmodules-transform)\n- [karma-typescript-es6-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-es6-transform)\n- [karma-typescript-postcss-transform](https://github.com/monounity/karma-typescript/tree/master/packages/karma-typescript-postcss-transform)\n\n### Example output\n\n<img src=\"http://i.imgur.com/sc4Mswh.png\" width=\"580\" height=\"280\" />\n\n- [Angular2 screenshot](https://github.com/monounity/karma-typescript/blob/master/assets/angular2.png)\n- [React screenshot](https://github.com/monounity/karma-typescript/blob/master/assets/react.png)\n\n## Advanced configuration\n\nThe plugin has default settings for the compiler, instrumenting files and creating reports etc, which should suit most needs.\n\nThese are the default compiler settings:\n\n```javascript\nkarmaTypescriptConfig: {\n    compilerOptions: {\n        emitDecoratorMetadata: true,\n        experimentalDecorators: true,\n        jsx: \"react\",\n        module: \"commonjs\",\n        sourceMap: true,\n        target: \"ES5\"\n    },\n    exclude: [\"node_modules\"]\n}\n```\n\nIf the defaults aren't enough, the settings can be configured from `karma.conf.js`:\n\n* **karmaTypescriptConfig.bundlerOptions.addNodeGlobals** - Boolean indicating whether the global variables\n  `process` and `Buffer` should be added to the bundle.<br/>\n  Defaults to `true`.\n  \n* **karmaTypescriptConfig.bundlerOptions.acornOptions** - An object literal with keys/values which are passed as configuration \n  options to the [Acorn](https://github.com/acornjs/acorn) parser used by the bundler.  The most notable of these keys is\n  `ecmaScript` which sets the ECMAScript target used by the parser.  If code has dependencies that use a newer version of \n  ECMAScript than the bundler defaults to (ES5), parsing errors will result when the source-reader tries to bundle dependencies \n  (e.g. dependencies that use `bigint` literals like `1n` will cause an error during code compilation unless this option is \n  explicitly set to 11(ES2020).  A complete list of options can be found in the [Acorn documentation](https://github.com/acornjs/acorn/tree/master/acorn#interface). \n\n* **karmaTypescriptConfig.bundlerOptions.constants** - An object literal with keys/values which will be available as global\n  variables in the bundle. The keys are expected to be strings and any non-string value will be stringified with `JSON.stringify`.\n\n  Configuration example:\n    ```javascript\n    constants: {\n        __STRING__: JSON.stringify(\"abc\" + 123),\n        __BOOLEAN__: true,\n        \"process.env\": {\n            \"VARIABLE\": \"value\"\n        }\n    }\n    ```\n  Code example:\n    ```javascript\n    declare var __STRING__: string;\n    declare var __BOOLEAN__: boolean;\n\n    console.log(__STRING__, __BOOLEAN__, process.env.VARIABLE);\n    ```\n\n* **karmaTypescriptConfig.bundlerOptions.entrypoints** - A `RegExp` filtering which files loaded by Karma should be executed in\n   a test run, for example only filenames ending with \".spec.ts\": `/\\.spec\\.ts$/`.<br/>\n   This setting can be used to make sure the specs have finished setting up the test environment before other code starts\n   requiring modules, which otherwise could lead to subtle bugs caused by race conditions.<br/>\n   When filtering file paths, beware that Windows uses `\\` while UNIX-like systems use `/` as path separator.<br/>\n   Defaults to all files, `/.*/`.\n\n* **karmaTypescriptConfig.bundlerOptions.exclude** - An array of npm module names that will be excluded from the bundle.\n\n* **karmaTypescriptConfig.bundlerOptions.ignore** - An array of npm module names that will be bundled as stubs, ie `module.exports = {};`.\n\n* **karmaTypescriptConfig.bundlerOptions.noParse** - An array of module names that will be bundled without being parsed for dependencies.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.alias** - An object literal where the key is a module name\n  and the value is a path that will be used when resolving the module.<br/>\n  The key is a string.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.extensions** - An array of file extensions to use, in order, when resolving modules.<br/>\n  Defaults to `[\".js\", \".json\", \".mjs\", \".ts\", \".tsx\"]`.\n\n* **karmaTypescriptConfig.bundlerOptions.resolve.directories** - An array of directories where modules will be recursively looked up.<br/>\n  Defaults to `[\"node_modules\"]`.\n\n* **karmaTypescriptConfig.bundlerOptions.sourceMap** - A boolean indicating whether source maps should be generated for imported modules in the bundle, useful for debugging in a browser.\n  For more debugging options, please see `karmaTypescriptConfig.coverageOptions.instrumentation`.</br>\n  Defaults to `false`.\n\n* **karmaTypescriptConfig.bundlerOptions.transforms** - An array of functions altering or replacing compiled Typescript code/Javascript\n  code loaded from `node_modules` before bundling it.\n  For more detailed documentation on transforms, please refer to the [Transforms API section](#transforms-api) in this document.<br/>\n\n* **karmaTypescriptConfig.bundlerOptions.validateSyntax** - A boolean indicating whether the syntax of the bundled code should be validated.\n  Setting this to `false` may speed up bundling for large projects with lots of imports from `node_modules`.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.compilerDelay** - The number of milliseconds the compiler waits before compiling the project on each run.</br>\n  For projects with a large number of files it might be necessary to increase this value to make sure the compiler has collected all files before firing.</br>\n  Defaults to 250 ms.\n\n* **karmaTypescriptConfig.compilerOptions** - This setting will override or add to existing compiler options.<br/>\n  Valid options are the same as for the `compilerOptions` section in `tsconfig.json`, with the\n  exception of `outDir`and `outFile` which are ignored since the code is compiled in-memory.\n\n  If `noEmitOnError` is set to a truthy value, in either `tsconfig.json` or in `karmaTypescriptConfig.compilerOptions`,\n  the karma process will exit with `ts.ExitStatus.DiagnosticsPresent_OutputsSkipped` if any compilation errors occur.\n\n* **karmaTypescriptConfig.coverageOptions.instrumentation** - A boolean indicating whether the code should be instrumented,\n  set this property to `false` to see the original Typescript code when debugging.\n  Please note that setting this property to `true` requires the Typescript compiler option `sourceMap` to also be set to `true`.\n  For more debugging options, please see `karmaTypescriptConfig.coverageOptions.sourceMap`.<br/>\n  Defaults to `true`.\n\n* **karmaTypescriptConfig.coverageOptions.instrumenterOptions** - Pass options to the `istanbul` instrumenter, ie options supported by [istanbul-lib-instrument](https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/src/instrumenter.js):\n\n    ```js\n    {\n        // Name of global coverage variable.\n        coverageVariable: '__coverage__',\n\n        // Preserve comments in output.\n        preserveComments: false,\n\n        // Generate compact code.\n        compact: true,\n\n        // Set to true to instrument ES6 modules.\n        esModules: false,\n\n        // Set to true to allow `return` statements outside of functions.\n        autoWrap: false,\n\n        // Set to true to produce a source map for the instrumented code.\n        produceSourceMap: false,\n\n        // Set to array of class method names to ignore for coverage.\n        ignoreClassMethods: [],\n\n        // A callback function that is called when a source map URL is found in the original code.\n        // This function is called with the source file name and the source map URL.\n        sourceMapUrlCallback: null,\n\n        // Turn debugging on.\n        debug: false,\n\n        // Set plugins.\n        plugins: [\n            'asyncGenerators',\n            'bigInt',\n            'classProperties',\n            'classPrivateProperties',\n            'dynamicImport',\n            'importMeta',\n            'objectRestSpread',\n            'optionalCatchBinding',\n            'flow',\n            'jsx'\n        ]\n    };\n    ```\n\n* **karmaTypescriptConfig.coverageOptions.exclude** - A `RegExp` object or an array of `RegExp` objects for filtering which files should be excluded from coverage instrumentation.<br/>\n  When filtering file paths, beware that Windows uses `\\` while UNIX-like systems use `/` as path separator.<br/>\n  Defaults to `/\\.(d|spec|test)\\.ts$/i` which excludes &ast;.d.ts, &ast;.spec.ts and &ast;.test.ts (case insensitive).\n\n* **karmaTypescriptConfig.coverageOptions.threshold** - An object with minimum coverage thresholds. The threshold values can be set on\n  a global level and on a per-file level, with options to exclude files and directories, and override settings on a per-file basis using globbing patterns.<br/>\n  A positive value will be used as a minimum percentage, for example `statements: 50` means that at least 50% of the statements should be covered by a test.<br/>\n  A negative value will be used as a maximum number of uncovered items, for example `lines: 10` means that no more than 10 uncovered lines are allowed.\n    ```javascript\n    threshold: {\n        global: {\n            statements: 100,\n            branches: 100,\n            functions: -10,\n            lines: 100,\n            excludes: [\n                \"src/foo/**/*.js\"\n            ]\n        },\n        file: {\n            statements: -10,\n            branches: 100,\n            functions: 100,\n            lines: 100,\n            excludes: [\n                \"src/bar/**/*.js\"\n            ],\n            overrides: {\n                \"src/file.js\": {\n                    statements: 90\n                }\n            }\n        }\n    }\n    ```\n\n* **karmaTypescriptConfig.coverageOptions.watermarks** - An object with custom istanbul watermarks. Each value is an array consisting of\n  a lower and upper bound. If code coverage is above the upper bound, this is considered \"healthy\", and many reports will print output in green.\n  If code coverage is below the lower bound, this is considered \"unhealthy\", and many reports will print output in red. Yellow output is reserved\n  for coverage in between the lower and upper bound.\n    ```javascript\n    watermarks: {\n      lines: [75, 90],\n      functions: [75, 90],\n      branches: [75, 90],\n      statements: [75, 90]\n    }\n    ```\n\n* **karmaTypescriptConfig.exclude** - File string patterns to be excluded by the compiler. This property may be an `array` or an `object` for more fine-grained control.\n  * Array: The string values will be merged with existing options.\n  * Object: The string values will be merged with or replace existing options:\n  ```javascript\n  {\n      mode: \"merge|replace\",\n      values: [\"foo\", \"bar\"]\n  }\n  ```\n  Defaults to `[\"node_modules\"]`.\n\n* **karmaTypescriptConfig.include** - File string patterns to be included by the compiler. This property may be an `array` or an `object` for more fine-grained control.\n  * Array: The string values will be merged with existing options.\n  * Object: The string values will be merged with or replace existing options:\n  ```javascript\n  {\n      mode: \"merge|replace\",\n      values: [\"foo\", \"bar\"]\n  }\n  ```\n  This option is available in Typescript ^2.0.0.\n\n* **karmaTypescriptConfig.reports** - The types of coverage reports that should be created when running the tests,\n  defaults to an html report in the directory `./coverage`.\n  Reporters are configured as `\"reporttype\": destination` where the destination can be specified in three ways:\n\n    * A `string` with a directory path, for example `\"html\": \"coverage\"`.\n    * An empty string or `null`. Writes the output to the console, for example `\"text-summary\": \"\"`. This is only possible for a subset of the reports available.\n    * An `object` with more fine-grained control over path and filename:\n    ```javascript\n    \"cobertura\": {\n        \"directory\": \"coverage\",    // optional, defaults to 'coverage'\n        \"subdirectory\": \"cobertura\" // optional, defaults to the name of the browser running the tests\n        \"filename\": \"coverage.xml\", // optional, defaults to the report name\n    }\n\n    // \"subdirectory\" may also be a function that returns a directory from a given browser\n    \"cobertura\": {\n        \"directory\": \"coverage\",\n        \"subdirectory\": function(browser) {\n            // normalizes browser name directories to lowercase without version\n            // ex: coverage/chrome/coverage.xml\n            return browser.name.toLowerCase().split(' ')[0];\n        },\n        \"filename\": \"coverage.xml\"\n    }\n    ```\n\n    * Available report types:\n        * `\"clover\": destination`\n        * `\"cobertura\": destination`\n        * `\"html\": destination`\n        * `\"html-spa\": destination`\n        * `\"json-summary\": destination`\n        * `\"json\": destination`\n        * `\"lcovonly\": destination`\n        * `\"teamcity\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text-lcov\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text-summary\": destination` (redirects to the console with destination \"\" or `null`)\n        * `\"text\": destination` (redirects to the console with destination \"\" or `null`)\n\n    * Example of the three destination types:\n    ```javascript\n    karmaTypescriptConfig: {\n        reports:\n        {\n            \"cobertura\": {\n                \"directory\": \"coverage\",\n                \"filename\": \"coverage.xml\",\n                \"subdirectory\": \"cobertura\"\n            },\n            \"html\": \"coverage\",\n            \"text-summary\": \"\"\n        }\n    }\n    ```\n\n* **karmaTypescriptConfig.transformPath** - A function for renaming compiled file extensions to `.js`.<br/>\n  Defaults to renaming `.ts` and `.tsx` to `.js`.\n\n* **karmaTypescriptConfig.tsconfig** - A path to a `tsconfig.json` file.<br/>\n  The default compiler options will be replaced by the options in this file.<br/>\n  The directory of the `tsconfig.json` file will be used as the base path for the Typescript compiler, and if `karmaTypescriptConfig.tsconfig` isn't set, the `basePath` property of the Karma config will be used as the\n  compiler base path instead.\n\n* **karmaTypescriptConfig.stopOnFailure** - Stop on any compiler error.<br/>\n  By default karma will stop when any typescript compile errors are encountered.<br/>\n  Setting this to false will allow tests to be run when typescript compile errors are present.\n\nExample of a full `karmaTypescriptConfig` configuration:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        addNodeGlobals: true,\n        constants: {\n            __PRODUCTION__: false\n        },\n        entrypoints: /\\.spec\\.(ts|tsx)$/,\n        exclude: [\"react/addons\"],\n        ignore: [\"ws\"],\n        noParse: \"jquery\",\n        resolve: {\n            alias: {\n                \"@angular/upgrade/static$\": \"../bundles/upgrade-static.umd.js\"\n            },\n            extensions: [\".js\", \".json\"],\n            directories: [\"node_modules\"]\n        },\n        sourceMap: false,\n        transforms: [require(\"karma-typescript-es6-transform\")()],\n        validateSyntax: true\n    },\n    compilerDelay: 500,\n    compilerOptions: {\n        noImplicitAny: true,\n    },\n    coverageOptions: {\n        instrumentation: true,\n        instrumenterOptions: {\n            preserveComments: true\n        },\n        exclude: /\\.(d|spec|test)\\.ts/i,\n        threshold: {\n            global: {\n                statements: 100,\n                branches: 100,\n                functions: -10,\n                lines: 100,\n                excludes: [\n                    \"src/foo/**/*.js\"\n                ]\n            },\n            file: {\n                statements: -10,\n                branches: 100,\n                functions: 100,\n                lines: 100,\n                excludes: [\n                    \"src/bar/**/*.js\"\n                ],\n                overrides: {\n                    \"src/file.js\": {\n                        statements: 90\n                    }\n                }\n            }\n        },\n    },\n    exclude: [\"broken\"],\n    include: {\n        mode: \"replace\",\n        values: [\"**/*.ts\"]\n    },\n    reports: {\n        \"cobertura\": {\n            \"directory\": \"coverage\",\n            \"filename\": \"cobertura/coverage.xml\"\n        },\n        \"html\": \"coverage\",\n        \"text-summary\": \"\"\n    },\n    transformPath: function(filepath) {\n        return filepath.replace(/\\.(ts|tsx)$/, \".js\");\n    },\n    tsconfig: \"./tsconfig.json\",\n    stopOnFailure: false\n}\n```\n\n## Automatic bundling\n\nFiles executed in the test run are bundled into a main bundle, containing dependencies required from node_modules,\nand several smaller standalone bundles containing the Typescript files. All these bundles are tied together by `commonjs.js`,\nwhich acts as a hub, loading modules when they are required by other modules.\n\nAll files are bundled by being wrapped in a custom [CommonJS](https://en.wikipedia.org/wiki/CommonJS) wrapper,\nwhich emulates the Node.js module system by injecting the require function, the module object, the exports object,\nthe &#95;&#95;dirname variable and the &#95;&#95;filename variable.\n\nFor instance, this Typescript sample:\n\n```javascript\nexport function exportedFunction(): string {\n    return \"\";\n}\n```\n\nWould be compiled to the following JavaScript (assuming the compiler option `module` is set to `commonjs`):\n\n```javascript\nfunction exportedFunction() {\n    return \"\";\n}\nexports.exportedFunction = exportedFunction;\n```\n\nIt would then be wrapped in a `CommonJS` wrapper by the bundler:\n\n```javascript\n(function(global){\n    global.wrappers['/absolutepath/app/src/file.ts']=[function(require,module,exports,__dirname,__filename){\n        function exportedFunction() {\n            return \"\";\n        }\n        exports.exportedFunction = exportedFunction;\n    },'src/file.ts',{}];\n})(this);\n```\n\n*(In this example, the source map and a few other statements have been omitted for brevity and the wrapper has been formatted for readability)*\n\nAfter compilation, a simple static analysis is performed to find \"import\" and \"require\" statements in the code and if any\ndependencies are found, for instance `import { Component } from \"@angular/core\";`, it is added to the main bundle file along\nwith its dependencies.\n\nIf no import or require statements are found in any Typescript file included in the test run, or the compiler option `module`\nis set to another value than `commonjs`, *automatic bundling will not occur*.\n\nThis means that no Typescript file will be wrapped in the CommonJS wrapper and the reason behind this is the encapsulation that\nthe Node.js module system provides. If no module requests any other module, the test run would contain only isolated islands of\ncode unreachable from the global scope, there would be nothing to execute.\n\nHowever, this intentional behavior makes it possible to use karma-typescript for projects that use the Typescript module system,\nor have the compiler option `module` set to another value than `commonjs`, or simply put everything on the global scope.\n\n### Importing stylesheets and bundling for production\n\nStyle files (.css|.less|.sass|.scss) are served as JSON strings to the browser running the tests,\nallowing styles to be loaded using the Typescript import statement, ie `import \"./style/app.scss\";`.\n\nThis means styles can be imported in order to let, for instance, webpack load the styles with\nless-loader or scss-loader etc for bundling later on, without breaking the unit test runner.\n\nNote: JSON required by modules in node_modules will be loaded automatically by the bundler.\n\n### The module object\n\n```javascript\nmodule: {\n    exports: {},\n    id: \"project-relative-path/bar.ts\",\n    uri: \"/absolute-path/project-relative-path/bar.ts\"\n}\n```\n\nThe `module.id` will be calculated from the value of `module.uri`, relative to the Karma config `basePath` value.\n\nModules exporting an extensible object such as a *function* or an *object literal* will also be decorated with\na non-enumerable `default` property if `module.exports.default` is undefined.\n\n### Globals\n\nA full Node.js environment will be provided with global variables and browser shims for builtin core modules:\n\n* &#95;&#95;dirname\n* &#95;&#95;filename\n* Buffer\n* global\n* process\n\n### Browser shims\n* [assert](https://www.npmjs.com/package/assert)\n* [buffer](https://www.npmjs.com/package/buffer)\n* [console](https://www.npmjs.com/package/console-browserify)\n* [constants](https://www.npmjs.com/package/constants-browserify)\n* [crypto](https://www.npmjs.com/package/crypto-browserify)\n* [domain](https://www.npmjs.com/package/domain-browser)\n* [events](https://www.npmjs.com/package/events)\n* [http](https://www.npmjs.com/package/stream-http)\n* [https](https://www.npmjs.com/package/https-browserify)\n* [os](https://www.npmjs.com/package/os-browserify)\n* [path](https://www.npmjs.com/package/path-browserify)\n* [punycode](https://www.npmjs.com/package/punycode)\n* [querystring](https://www.npmjs.com/package/querystring-es3)\n* [stream](https://www.npmjs.com/package/stream-browserify)\n* [string_decoder](https://www.npmjs.com/package/string_decoder)\n* [timers](https://www.npmjs.com/package/timers-browserify)\n* [tty](https://www.npmjs.com/package/tty-browserify)\n* [url](https://www.npmjs.com/package/url)\n* [util](https://www.npmjs.com/package/util)\n* [vm](https://www.npmjs.com/package/vm-browserify)\n* [zlib](https://www.npmjs.com/package/browserify-zlib)\n\nThe plugin uses [browser-resolve](https://github.com/defunctzombie/node-browser-resolve) from the [browserify](https://github.com/substack/node-browserify) tool chain to load the source code from node_modules.\n\n### Mocking\nImported modules, local or npm packages, can be mocked using [karma-typescript-mock](https://www.npmjs.com/package/karma-typescript-mock). This feature is available in `karma-typescript@^3.0.5`.\n\n## Transforms API\n\nThe bundler has a public API which lets plugins alter or completely replace code before adding it to the bundle.\nFor example, a plugin could compile ES2015 JavaScript code to to ES5 syntax, making it possible to import an `npm` module\nwritten in ES2015 syntax from a Typescript module directly.\n\nThe interface between the bundler and the plugins is a plain array of functions, specified in the configuration property `karmaTypescriptConfig.bundlerOptions.transforms`, where each function is considered a transforming plugin.\n\nThe plugin functions in the transforms array are asynchronous and adhere to the Node.js callback convention where the first\nargument of the callback function is an `Error` object or `undefined` and the following parameters contains the result.\nHowever, although each function is asynchronous, all functions will be called *synchronously* one by one in the order they were added to the array, and each function will be called with the result of the previous function, enabling transforms plugin chaining.\n\nTransforms will be executed at two points in the bundling process: right after compilation of the project Typescript files\nand when resolving `import` and `require` statements. This means each transforming function will be called for both\nTypescript files and JavaScript files from `node_modules`, making each plugin implementation responsible for validating the\ncontext before performing any logic, for example by checking the file name, module name or the existence of an ast object etc.\n\nEach transforming function will be executed before resolving dependencies, which means paths in `import` or `require` statements\nor anywhere in the code can be rewritten before bundling, to fit the Karma execution environment.\n\nExample of a simple inline transforming function replacing the contents of a `.css` file, mimicking the behavior of Css Modules:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        transforms: [\n            function(context, callback) {\n                if(context.module === \"./main.css\") {\n                    context.source = \"module.exports = { color: red };\";\n                    return callback(undefined, true);\n                }\n                return callback(undefined, false);\n            }\n        ]\n    }\n}\n```\n\nIt is also possible to change the transpiled Typescript (ie the plain JavaScript code) code by using the third callback parameter to tell the Transforms API not to recompile the transpiled code:\n\n```javascript\nkarmaTypescriptConfig: {\n    bundlerOptions: {\n        transforms: [\n            function(context, callback) {\n                if(context.ts) {\n                    context.ts.transpiled = \"\\n/* istanbul ignore next */\\n\" + context.ts.transpiled;\n                    return callback(undefined, true, false);\n                }\n                return callback(undefined, false);\n            }\n        ]\n    }\n}\n```\n\n### Context\nThe context object, `TransformContext`, is defined [here](https://github.com/monounity/karma-typescript/blob/master/src/api/transforms.ts).\n\n### Callback\n\nThe callback has two signatures, the \"boolean\" and the \"object\".\n\nThe boolean callback function has three arguments:\n1. An `Error` object or `undefined`\n2. A boolean indicating whether the value of `context.source` has changed or not.\n3. A boolean indicating whether the transformed source should be recompiled. Defaults to true and can be omitted.\n\nThe object callback function has two arguments:\n\n1. An `Error` object or `undefined`\n2. An object literal, which has the following properties:\n    1. A boolean indicating whether the value of `context.source` has changed or not.\n    2. A boolean indicating whether the transformed source should be recompiled (Typescript only!).\n    3. A boolean indicating whether a new AST should be created for the transformed source (JavaScript only!).\n\n## Requirements\n\nTypescript ^1.6.2 is required.\n\nVersions 1.6.2 - 1.7.5 work but aren't as heavily tested as versions 1.8.10 and up.\n\n## Troubleshooting\n\n### Error: Can not load \"karma-typescript\", it is not registered!\n\nUsers have reported success by simply deleting the `node_modules` folder and then running `npm install` again.\n\n### Error: Cannot find module 'buffer/' from '.'\n\n*Note: this error has been fixed in karma-typescript@^3.0.0`.*\n\nThis error seems to hit mostly users of with older versions of `npm`, where all dependencies don't get pulled in automatically by `npm`.\n\nThere's a workaround reported by users, which is simply adding the missing dependencies explicitly to `package.json`:\n\n * `npm install --save-dev browser-resolve`\n * `npm install --save-dev buffer`\n * `npm install --save-dev process`\n\nOther workarounds are running `npm install` twice or, if possible, upgrading to a newer version of `npm`.\n\nThese are the environments reported failing/working:\n\n|Npm|Node.js|OS|Works|\n|---|---|---|---|\n|2.5.18|4.4.7|Unknown|No|\n|2.14.7|4.2.1|Ubuntu 14.04|No|\n|2.14.12|4.2.6|OSX 10.11.3|No|\n|2.15.9|4.5.0|OSX 10.11.6|No|\n|2.15.9|4.6.0|OSX 10.12.3|No|\n|2.15.11|4.6.2|Ubuntu 14.04|No|\n|2.15.11|4.7.0|Ubuntu 14.04|Yes|\n|3.5.3|4.2.1|Windows 10|Yes|\n|3.8.6|6.10.0|Windows Server 2012 R2|Yes|\n|3.10.3|6.4.0|OSX 10.11.6|Yes|\n|3.10.9|6.9.2|Ubuntu 14.04|Yes|\n|4.0.5|6.4.0|OSX 10.11.6|Yes|\n|4.1.2|7.5.0|OSX 10.12.2|No|\n|4.1.2|7.7.3|Ubuntu 14.04|Yes|\n\n## Licensing\n\nThis software is licensed with the MIT license.\n\n© 2016-2021 Erik Barke, Monounity\n",
  "maintainers": [
    {
      "name": "erikbarke",
      "email": "e@barke.nu"
    },
    {
      "name": "monounity",
      "email": "work@barke.nu"
    }
  ],
  "time": {
    "modified": "2023-05-01T19:16:36.645Z",
    "created": "2016-08-22T06:30:22.955Z",
    "1.0.0": "2016-08-22T06:30:22.955Z",
    "1.0.1": "2016-08-22T06:44:05.875Z",
    "1.0.2": "2016-08-23T03:25:29.628Z",
    "1.0.3": "2016-08-23T04:44:24.137Z",
    "1.0.4": "2016-08-23T15:24:18.262Z",
    "1.0.5": "2016-08-23T15:26:41.182Z",
    "1.0.6": "2016-08-23T15:30:11.831Z",
    "1.0.7": "2016-08-23T15:32:28.613Z",
    "1.0.8": "2016-08-23T15:34:58.646Z",
    "1.0.9": "2016-08-24T04:11:30.717Z",
    "1.0.10": "2016-08-24T05:21:32.257Z",
    "1.0.11": "2016-08-28T05:35:54.008Z",
    "2.0.0": "2016-09-03T04:07:34.867Z",
    "2.0.1": "2016-09-03T04:18:12.205Z",
    "2.0.2": "2016-09-08T05:03:06.101Z",
    "2.0.3": "2016-09-09T05:20:25.207Z",
    "2.0.4": "2016-09-10T15:08:37.018Z",
    "2.0.5": "2016-09-13T00:12:29.700Z",
    "2.0.6": "2016-09-17T02:51:59.441Z",
    "2.0.7": "2016-10-25T02:35:16.127Z",
    "2.0.8": "2016-10-25T02:42:31.109Z",
    "2.0.9": "2016-10-25T03:15:47.971Z",
    "2.1.0": "2016-11-10T04:34:34.322Z",
    "2.1.1": "2016-11-11T01:38:54.041Z",
    "2.1.2": "2016-11-12T05:10:51.166Z",
    "2.1.3": "2016-11-20T05:01:27.370Z",
    "2.1.4": "2016-11-27T05:21:09.514Z",
    "2.1.5": "2016-12-19T02:45:15.279Z",
    "2.1.6": "2017-01-10T05:03:57.186Z",
    "2.1.7": "2017-01-26T16:38:58.515Z",
    "3.0.0-beta.1": "2017-03-05T05:29:44.055Z",
    "3.0.0-beta.2": "2017-03-12T22:35:08.226Z",
    "3.0.0": "2017-04-02T19:24:14.494Z",
    "3.0.1": "2017-04-20T13:20:24.444Z",
    "3.0.2": "2017-05-17T18:43:38.020Z",
    "3.0.3": "2017-06-03T20:12:49.541Z",
    "3.0.4": "2017-06-14T19:28:44.829Z",
    "3.0.5": "2017-08-01T20:22:59.075Z",
    "3.0.6": "2017-09-18T18:35:27.456Z",
    "3.0.7": "2017-09-25T18:32:44.072Z",
    "3.0.8": "2017-10-18T17:51:36.240Z",
    "3.0.9": "2017-12-18T05:46:24.286Z",
    "3.0.10": "2018-01-29T20:24:47.673Z",
    "3.0.11": "2018-01-30T09:39:54.913Z",
    "3.0.12": "2018-02-01T21:01:51.919Z",
    "3.0.13": "2018-07-15T18:25:11.535Z",
    "4.0.0-beta.1": "2018-12-28T20:47:42.643Z",
    "4.0.0-beta.2": "2019-01-04T00:14:18.106Z",
    "4.0.0-beta.3": "2019-01-16T11:38:05.989Z",
    "4.0.0": "2019-02-04T19:56:33.911Z",
    "4.1.0": "2019-05-31T22:16:46.074Z",
    "4.1.1": "2019-06-29T11:23:38.559Z",
    "5.0.0-beta.0": "2019-09-13T19:43:12.479Z",
    "5.0.0-beta.1": "2020-01-07T22:36:20.883Z",
    "5.0.0-beta.2": "2020-01-12T14:41:13.381Z",
    "5.0.0-beta.3": "2020-01-12T14:49:51.463Z",
    "5.0.0": "2020-03-07T12:56:22.806Z",
    "5.0.1": "2020-03-20T20:27:34.366Z",
    "5.0.2": "2020-04-04T14:13:00.791Z",
    "5.0.3": "2020-05-21T18:52:39.753Z",
    "5.1.0": "2020-08-12T19:33:20.919Z",
    "5.2.0": "2020-09-17T07:23:50.412Z",
    "5.3.0": "2021-02-11T15:48:12.990Z",
    "5.4.0": "2021-02-12T20:53:51.966Z",
    "5.5.0": "2021-03-09T15:57:29.790Z",
    "5.5.1": "2021-03-25T04:34:11.002Z",
    "5.5.2": "2021-08-19T20:26:36.937Z",
    "5.5.3": "2022-01-12T21:21:47.372Z",
    "5.5.4": "2023-05-01T19:16:36.521Z"
  },
  "homepage": "https://github.com/monounity/karma-typescript#readme",
  "keywords": [
    "angularjs",
    "angular2",
    "browserify",
    "commonjs",
    "coverage",
    "css modules",
    "docker",
    "istanbul",
    "jasmine",
    "karma",
    "karma plugin",
    "karma-plugin",
    "mocha",
    "postcss",
    "react",
    "remap",
    "transpile",
    "typescript",
    "unit test"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/monounity/karma-typescript.git"
  },
  "author": {
    "name": "monounity"
  },
  "bugs": {
    "url": "https://github.com/monounity/karma-typescript/issues"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "contributors": [
    {
      "name": "erikbarke"
    },
    {
      "name": "mitchhentges"
    },
    {
      "name": "Hobart2967"
    },
    {
      "name": "xdamman"
    },
    {
      "name": "devoto13"
    },
    {
      "name": "sir-marc"
    },
    {
      "name": "cleavera"
    },
    {
      "name": "abraham"
    },
    {
      "name": "adamkasztenny"
    },
    {
      "name": "wawyed"
    },
    {
      "name": "jods4"
    },
    {
      "name": "alan-agius4"
    },
    {
      "name": "FreshRob"
    },
    {
      "name": "glennvorhes"
    },
    {
      "name": "fchiumeo"
    },
    {
      "name": "moshmage"
    },
    {
      "name": "tokrsen"
    },
    {
      "name": "g00fy-"
    },
    {
      "name": "kubut"
    },
    {
      "name": "VilleSalonen"
    },
    {
      "name": "yugi03"
    },
    {
      "name": "gempain"
    },
    {
      "name": "monounity"
    },
    {
      "name": "ggradnig"
    },
    {
      "name": "sridharmallela"
    },
    {
      "name": "leevipietilainen"
    },
    {
      "name": "vladjerca"
    },
    {
      "name": "csvn"
    },
    {
      "name": "ryanvall"
    }
  ],
  "users": {
    "larrychen": true,
    "wendellm": true,
    "kutynko": true,
    "pstoeckle": true,
    "gomoto": true,
    "hagendorn": true,
    "stephn_r": true,
    "kalitine": true
  }
}